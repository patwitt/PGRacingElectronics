
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024498  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004248  08024698  08024698  00034698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a53c2  080288e0  080288e0  000388e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f8  080cdca4  080cdca4  000ddca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000cc  080cdd9c  080cdd9c  000ddd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080cde68  080cde68  001798c8  2**0
                  CONTENTS
  7 .ARM          00000008  080cde68  080cde68  000dde68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080cde70  080cde70  001798c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080cde70  080cde70  000dde70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080cdea0  080cdea0  000ddea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000dc  20000000  080cdea8  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056a0c  200000dc  080cdf84  000e00dc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20056ae8  080cdf84  000e6ae8  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001798c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90400000  90400000  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d2a17  00000000  00000000  001798f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00016abf  00000000  00000000  0024c30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003e10  00000000  00000000  00262dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003830  00000000  00000000  00266be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00038200  00000000  00000000  0026a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00049e61  00000000  00000000  002a2610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001296f3  00000000  00000000  002ec471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00415b64  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010c34  00000000  00000000  00415c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000dc 	.word	0x200000dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08024680 	.word	0x08024680

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e0 	.word	0x200000e0
 800023c:	08024680 	.word	0x08024680

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <FLASH_QSPI_Init+0x70>)
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <FLASH_QSPI_Init+0x74>)
 80005f0:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80005f2:	4819      	ldr	r0, [pc, #100]	; (8000658 <FLASH_QSPI_Init+0x70>)
 80005f4:	f00b f82c 	bl	800b650 <HAL_QSPI_DeInit>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e028      	b.n	8000654 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8000602:	f001 f9c9 	bl	8001998 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8000606:	f000 f82b 	bl	8000660 <FLASH_QSPI_ResetChip>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	e01f      	b.n	8000654 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f009 f819 	bl	800964c <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 800061a:	f000 f87f 	bl	800071c <FLASH_QSPI_AutoPollingMemReady>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	e015      	b.n	8000654 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000628:	f000 f8b0 	bl	800078c <FLASH_QSPI_WriteEnable>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e00e      	b.n	8000654 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000636:	f000 f8f3 	bl	8000820 <FLASH_QSPI_Configuration>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e007      	b.n	8000654 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000644:	f000 f962 	bl	800090c <FLASH_QSPI_EnableMemoryMappedMode>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e000      	b.n	8000654 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200569b0 	.word	0x200569b0
 800065c:	a0001000 	.word	0xa0001000

08000660 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b090      	sub	sp, #64	; 0x40
 8000664:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 800066a:	2366      	movs	r3, #102	; 0x66
 800066c:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800066e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000672:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000678:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000682:	2300      	movs	r3, #0
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000686:	2300      	movs	r3, #0
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	f241 3288 	movw	r2, #5000	; 0x1388
 80006a0:	4619      	mov	r1, r3
 80006a2:	481d      	ldr	r0, [pc, #116]	; (8000718 <FLASH_QSPI_ResetChip+0xb8>)
 80006a4:	f00b f9b2 	bl	800ba0c <HAL_QSPI_Command>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e02e      	b.n	8000710 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006b6:	e003      	b.n	80006c0 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 80006b8:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80006ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006bc:	3301      	adds	r3, #1
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c2:	2b2e      	cmp	r3, #46	; 0x2e
 80006c4:	d9f8      	bls.n	80006b8 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 80006c6:	2399      	movs	r3, #153	; 0x99
 80006c8:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80006ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ce:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80006d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80006de:	2300      	movs	r3, #0
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80006e2:	2300      	movs	r3, #0
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <FLASH_QSPI_ResetChip+0xb8>)
 8000700:	f00b f984 	bl	800ba0c <HAL_QSPI_Command>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3740      	adds	r7, #64	; 0x40
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200569b0 	.word	0x200569b0

0800071c <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000722:	2305      	movs	r3, #5
 8000724:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000742:	2300      	movs	r3, #0
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000746:	2300      	movs	r3, #0
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 800074e:	2301      	movs	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 800075a:	2310      	movs	r3, #16
 800075c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000764:	463a      	mov	r2, r7
 8000766:	f107 0118 	add.w	r1, r7, #24
 800076a:	f241 3388 	movw	r3, #5000	; 0x1388
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 8000770:	f00b fad9 	bl	800bd26 <HAL_QSPI_AutoPolling>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200569b0 	.word	0x200569b0

0800078c <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000792:	2306      	movs	r3, #6
 8000794:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80007b0:	2300      	movs	r3, #0
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80007c0:	4619      	mov	r1, r3
 80007c2:	4816      	ldr	r0, [pc, #88]	; (800081c <FLASH_QSPI_WriteEnable+0x90>)
 80007c4:	f00b f922 	bl	800ba0c <HAL_QSPI_Command>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e01f      	b.n	8000812 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 80007d2:	2302      	movs	r3, #2
 80007d4:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 80007d6:	2302      	movs	r3, #2
 80007d8:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80007e2:	2310      	movs	r3, #16
 80007e4:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ea:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 80007ec:	2305      	movs	r3, #5
 80007ee:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80007f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80007f6:	463a      	mov	r2, r7
 80007f8:	f107 0118 	add.w	r1, r7, #24
 80007fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <FLASH_QSPI_WriteEnable+0x90>)
 8000802:	f00b fa90 	bl	800bd26 <HAL_QSPI_AutoPolling>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	e000      	b.n	8000812 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3750      	adds	r7, #80	; 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200569b0 	.word	0x200569b0

08000820 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	; 0x40
 8000824:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000826:	2335      	movs	r3, #53	; 0x35
 8000828:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800082a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082e:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	f241 3288 	movw	r2, #5000	; 0x1388
 800085a:	4619      	mov	r1, r3
 800085c:	482a      	ldr	r0, [pc, #168]	; (8000908 <FLASH_QSPI_Configuration+0xe8>)
 800085e:	f00b f8d5 	bl	800ba0c <HAL_QSPI_Command>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e049      	b.n	8000900 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000872:	4619      	mov	r1, r3
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <FLASH_QSPI_Configuration+0xe8>)
 8000876:	f00b f9b9 	bl	800bbec <HAL_QSPI_Receive>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	e03d      	b.n	8000900 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000884:	f7ff ff82 	bl	800078c <FLASH_QSPI_WriteEnable>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e036      	b.n	8000900 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 800089c:	2331      	movs	r3, #49	; 0x31
 800089e:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008ae:	2300      	movs	r3, #0
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80008ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <FLASH_QSPI_Configuration+0xe8>)
 80008d4:	f00b f89a 	bl	800ba0c <HAL_QSPI_Command>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <FLASH_QSPI_Configuration+0xe8>)
 80008ec:	f00b f8ec 	bl	800bac8 <HAL_QSPI_Transmit>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 80008f6:	f001 f849 	bl	800198c <Error_Handler>
		return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3740      	adds	r7, #64	; 0x40
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200569b0 	.word	0x200569b0

0800090c <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b090      	sub	sp, #64	; 0x40
 8000910:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000912:	23eb      	movs	r3, #235	; 0xeb
 8000914:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091a:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000922:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 800093c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000942:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000950:	2304      	movs	r3, #4
 8000952:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000958:	463a      	mov	r2, r7
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000962:	f00b fa57 	bl	800be14 <HAL_QSPI_MemoryMapped>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3740      	adds	r7, #64	; 0x40
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200569b0 	.word	0x200569b0

08000980 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_CAN1_Init+0x6c>)
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <MX_CAN1_Init+0x70>)
 8000988:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_CAN1_Init+0x6c>)
 800098c:	2209      	movs	r2, #9
 800098e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_CAN1_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_CAN1_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_CAN1_Init+0x6c>)
 800099e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009d2:	f008 fe5f 	bl	8009694 <HAL_CAN_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009dc:	f000 ffd6 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	HAL_CAN_Start(&hcan1);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <MX_CAN1_Init+0x6c>)
 80009e2:	f008 ff52 	bl	800988a <HAL_CAN_Start>

  /* USER CODE END CAN1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20056828 	.word	0x20056828
 80009f0:	40006400 	.word	0x40006400

080009f4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <MX_CAN2_Init+0x6c>)
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <MX_CAN2_Init+0x70>)
 80009fc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a00:	2209      	movs	r2, #9
 8000a02:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a10:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a18:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a20:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a48:	f008 fe24 	bl	8009694 <HAL_CAN_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000a52:	f000 ff9b 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

	HAL_CAN_Start(&hcan2);
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <MX_CAN2_Init+0x6c>)
 8000a58:	f008 ff17 	bl	800988a <HAL_CAN_Start>

  /* USER CODE END CAN2_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200567d8 	.word	0x200567d8
 8000a64:	40006800 	.word	0x40006800

08000a68 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	; 0x38
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <HAL_CAN_MspInit+0x150>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d13a      	bne.n	8000b00 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <HAL_CAN_MspInit+0x154>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <HAL_CAN_MspInit+0x154>)
 8000a92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <HAL_CAN_MspInit+0x154>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d10b      	bne.n	8000ab4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a9c:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a41      	ldr	r2, [pc, #260]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000acc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ade:	2309      	movs	r3, #9
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <HAL_CAN_MspInit+0x15c>)
 8000aea:	f009 fe7b 	bl	800a7e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2105      	movs	r1, #5
 8000af2:	2014      	movs	r0, #20
 8000af4:	f009 fb2a 	bl	800a14c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000af8:	2014      	movs	r0, #20
 8000afa:	f009 fb43 	bl	800a184 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000afe:	e056      	b.n	8000bae <HAL_CAN_MspInit+0x146>
  else if(canHandle->Instance==CAN2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <HAL_CAN_MspInit+0x160>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d151      	bne.n	8000bae <HAL_CAN_MspInit+0x146>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <HAL_CAN_MspInit+0x154>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4a1e      	ldr	r2, [pc, #120]	; (8000bbc <HAL_CAN_MspInit+0x154>)
 8000b42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <HAL_CAN_MspInit+0x154>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10b      	bne.n	8000b64 <HAL_CAN_MspInit+0xfc>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_CAN_MspInit+0x158>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b8e:	2309      	movs	r3, #9
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_CAN_MspInit+0x164>)
 8000b9a:	f009 fe23 	bl	800a7e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	2040      	movs	r0, #64	; 0x40
 8000ba4:	f009 fad2 	bl	800a14c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000ba8:	2040      	movs	r0, #64	; 0x40
 8000baa:	f009 faeb 	bl	800a184 <HAL_NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40006400 	.word	0x40006400
 8000bbc:	200000f8 	.word	0x200000f8
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40006800 	.word	0x40006800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b091      	sub	sp, #68	; 0x44
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	f107 0214 	add.w	r2, r7, #20
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f008 fe95 	bl	8009912 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d10f      	bne.n	8000c12 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		ComputeEcumasterFrame(RxHeader, RxData);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	9303      	str	r3, [sp, #12]
 8000bf8:	466c      	mov	r4, sp
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0c:	f000 f816 	bl	8000c3c <ComputeEcumasterFrame>
	} else {
		ComputeInternalFrame(RxHeader, RxData);
	}
}
 8000c10:	e00e      	b.n	8000c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeInternalFrame(RxHeader, RxData);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	9303      	str	r3, [sp, #12]
 8000c18:	466c      	mov	r4, sp
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c2c:	f000 f8d4 	bl	8000dd8 <ComputeInternalFrame>
}
 8000c30:	bf00      	nop
 8000c32:	3734      	adds	r7, #52	; 0x34
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40006400 	.word	0x40006400

08000c3c <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	f107 0c08 	add.w	ip, r7, #8
 8000c46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1) {
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c50:	d121      	bne.n	8000c96 <ComputeEcumasterFrame+0x5a>
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 8000c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c54:	f000 f8cc 	bl	8000df0 <LittleToBigEndian>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000c5e:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	789a      	ldrb	r2, [r3, #2]
 8000c64:	4b5b      	ldr	r3, [pc, #364]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000c66:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	78da      	ldrb	r2, [r3, #3]
 8000c6c:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000c6e:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	3304      	adds	r3, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f8bb 	bl	8000df0 <LittleToBigEndian>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000c80:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	3306      	adds	r3, #6
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f8b2 	bl	8000df0 <LittleToBigEndian>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000c92:	80da      	strh	r2, [r3, #6]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
		EcuData.TCTorqueReduction = RxData[6];
		EcuData.PitLimitTorqueReduction = RxData[7];
	}
}
 8000c94:	e097      	b.n	8000dc6 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame3) {
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	f240 6202 	movw	r2, #1538	; 0x602
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d118      	bne.n	8000cd2 <ComputeEcumasterFrame+0x96>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 8000ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca2:	f000 f8a5 	bl	8000df0 <LittleToBigEndian>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cac:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	78da      	ldrb	r2, [r3, #3]
 8000cb2:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cb4:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4];
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	791a      	ldrb	r2, [r3, #4]
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cbc:	731a      	strb	r2, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f894 	bl	8000df0 <LittleToBigEndian>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cce:	81da      	strh	r2, [r3, #14]
}
 8000cd0:	e079      	b.n	8000dc6 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame4) {
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f240 6203 	movw	r2, #1539	; 0x603
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d123      	bne.n	8000d24 <ComputeEcumasterFrame+0xe8>
		EcuData.ignAngle = RxData[0];
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25a      	sxtb	r2, r3
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000ce4:	741a      	strb	r2, [r3, #16]
		EcuData.ignDwell = RxData[1];
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	785a      	ldrb	r2, [r3, #1]
 8000cea:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cec:	745a      	strb	r2, [r3, #17]
		EcuData.lambda = RxData[2];
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	789a      	ldrb	r2, [r3, #2]
 8000cf2:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cf4:	749a      	strb	r2, [r3, #18]
		EcuData.lambdaCorrection = RxData[3];
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	78da      	ldrb	r2, [r3, #3]
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000cfc:	74da      	strb	r2, [r3, #19]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3304      	adds	r3, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f874 	bl	8000df0 <LittleToBigEndian>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d0e:	829a      	strh	r2, [r3, #20]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	3306      	adds	r3, #6
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f86b 	bl	8000df0 <LittleToBigEndian>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d20:	82da      	strh	r2, [r3, #22]
}
 8000d22:	e050      	b.n	8000dc6 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame5) {
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	f240 6204 	movw	r2, #1540	; 0x604
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d120      	bne.n	8000d70 <ComputeEcumasterFrame+0x134>
		EcuData.gear = RxData[0];
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d34:	761a      	strb	r2, [r3, #24]
		EcuData.ecuTemp = RxData[1];
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	3301      	adds	r3, #1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b25a      	sxtb	r2, r3
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d40:	765a      	strb	r2, [r3, #25]
		EcuData.batt = LittleToBigEndian(&RxData[4]);
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3304      	adds	r3, #4
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f852 	bl	8000df0 <LittleToBigEndian>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d52:	835a      	strh	r2, [r3, #26]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3305      	adds	r3, #5
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f849 	bl	8000df0 <LittleToBigEndian>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d64:	839a      	strh	r2, [r3, #28]
		EcuData.flags1 = RxData[7];
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	79da      	ldrb	r2, [r3, #7]
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d6c:	779a      	strb	r2, [r3, #30]
}
 8000d6e:	e02a      	b.n	8000dc6 <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame6) {
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f240 6205 	movw	r2, #1541	; 0x605
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d125      	bne.n	8000dc6 <ComputeEcumasterFrame+0x18a>
		EcuData.DBWPosition = RxData[0];
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d80:	77da      	strb	r2, [r3, #31]
		EcuData.DBWTrigger = RxData[1];
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	785a      	ldrb	r2, [r3, #1]
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3302      	adds	r3, #2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f82d 	bl	8000df0 <LittleToBigEndian>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000d9c:	845a      	strh	r2, [r3, #34]	; 0x22
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	3304      	adds	r3, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f824 	bl	8000df0 <LittleToBigEndian>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCTorqueReduction = RxData[6];
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	799a      	ldrb	r2, [r3, #6]
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		EcuData.PitLimitTorqueReduction = RxData[7];
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	79da      	ldrb	r2, [r3, #7]
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <ComputeEcumasterFrame+0x198>)
 8000dc2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dce:	b004      	add	sp, #16
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20056800 	.word	0x20056800

08000dd8 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8000dd8:	b084      	sub	sp, #16
 8000dda:	b490      	push	{r4, r7}
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	f107 0408 	add.w	r4, r7, #8
 8000de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc90      	pop	{r4, r7}
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data) {
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] * 0xFFFF + data[1];
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <MX_CRC_Init+0x40>)
 8000e20:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_CRC_Init+0x3c>)
 8000e42:	f009 f9bb 	bl	800a1bc <HAL_CRC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e4c:	f000 fd9e 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20056850 	.word	0x20056850
 8000e58:	40023000 	.word	0x40023000

08000e5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_CRC_MspInit+0x38>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10b      	bne.n	8000e86 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023000 	.word	0x40023000
 8000e98:	40023800 	.word	0x40023800

08000e9c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <MX_DMA2D_Init+0x6c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ede:	f009 fa79 	bl	800a3d4 <HAL_DMA2D_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000ee8:	f000 fd50 	bl	800198c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eec:	2101      	movs	r1, #1
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_DMA2D_Init+0x68>)
 8000ef0:	f009 fbda 	bl	800a6a8 <HAL_DMA2D_ConfigLayer>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000efa:	f000 fd47 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20056874 	.word	0x20056874
 8000f08:	4002b000 	.word	0x4002b000

08000f0c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_DMA2D_MspInit+0x44>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d113      	bne.n	8000f46 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_DMA2D_MspInit+0x48>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_DMA2D_MspInit+0x48>)
 8000f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_DMA2D_MspInit+0x48>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2105      	movs	r1, #5
 8000f3a:	205a      	movs	r0, #90	; 0x5a
 8000f3c:	f009 f906 	bl	800a14c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f40:	205a      	movs	r0, #90	; 0x5a
 8000f42:	f009 f91f 	bl	800a184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	4002b000 	.word	0x4002b000
 8000f54:	40023800 	.word	0x40023800

08000f58 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f70:	4b49      	ldr	r3, [pc, #292]	; (8001098 <MX_FMC_Init+0x140>)
 8000f72:	4a4a      	ldr	r2, [pc, #296]	; (800109c <MX_FMC_Init+0x144>)
 8000f74:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_FMC_Init+0x140>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <MX_FMC_Init+0x140>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <MX_FMC_Init+0x140>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_FMC_Init+0x140>)
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_FMC_Init+0x140>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_FMC_Init+0x140>)
 8000f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f9c:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <MX_FMC_Init+0x140>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_FMC_Init+0x140>)
 8000fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000faa:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <MX_FMC_Init+0x140>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <MX_FMC_Init+0x140>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4830      	ldr	r0, [pc, #192]	; (8001098 <MX_FMC_Init+0x140>)
 8000fd8:	f00c fa96 	bl	800d508 <HAL_SDRAM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000fe2:	f000 fcd3 	bl	800198c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_FMC_Init+0x148>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_FMC_Init+0x148>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_FMC_Init+0x148>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <MX_FMC_Init+0x148>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001002:	f04f 32ff 	mov.w	r2, #4294967295
 8001006:	4926      	ldr	r1, [pc, #152]	; (80010a0 <MX_FMC_Init+0x148>)
 8001008:	4823      	ldr	r0, [pc, #140]	; (8001098 <MX_FMC_Init+0x140>)
 800100a:	f00c fab1 	bl	800d570 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f008 fb1c 	bl	800964c <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_FMC_Init+0x148>)
 8001016:	2202      	movs	r2, #2
 8001018:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_FMC_Init+0x148>)
 800101c:	2210      	movs	r2, #16
 800101e:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_FMC_Init+0x148>)
 8001022:	2201      	movs	r2, #1
 8001024:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_FMC_Init+0x148>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	491b      	ldr	r1, [pc, #108]	; (80010a0 <MX_FMC_Init+0x148>)
 8001032:	4819      	ldr	r0, [pc, #100]	; (8001098 <MX_FMC_Init+0x140>)
 8001034:	f00c fa9c 	bl	800d570 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_FMC_Init+0x148>)
 800103a:	2203      	movs	r2, #3
 800103c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_FMC_Init+0x148>)
 8001040:	2210      	movs	r2, #16
 8001042:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_FMC_Init+0x148>)
 8001046:	2208      	movs	r2, #8
 8001048:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_FMC_Init+0x148>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	4912      	ldr	r1, [pc, #72]	; (80010a0 <MX_FMC_Init+0x148>)
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_FMC_Init+0x140>)
 8001058:	f00c fa8a 	bl	800d570 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 800105c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001060:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_FMC_Init+0x148>)
 8001064:	2204      	movs	r2, #4
 8001066:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_FMC_Init+0x148>)
 800106a:	2210      	movs	r2, #16
 800106c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_FMC_Init+0x148>)
 8001070:	2201      	movs	r2, #1
 8001072:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <MX_FMC_Init+0x148>)
 8001078:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 800107a:	f04f 32ff 	mov.w	r2, #4294967295
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <MX_FMC_Init+0x148>)
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_FMC_Init+0x140>)
 8001082:	f00c fa75 	bl	800d570 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8001086:	f240 617c 	movw	r1, #1660	; 0x67c
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_FMC_Init+0x140>)
 800108c:	f00c fa9b 	bl	800d5c6 <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200568cc 	.word	0x200568cc
 800109c:	a0000140 	.word	0xa0000140
 80010a0:	20000100 	.word	0x20000100

080010a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010b8:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_FMC_MspInit+0x100>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d16d      	bne.n	800119c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80010c0:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_FMC_MspInit+0x100>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_FMC_MspInit+0x104>)
 80010c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ca:	4a37      	ldr	r2, [pc, #220]	; (80011a8 <HAL_FMC_MspInit+0x104>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6393      	str	r3, [r2, #56]	; 0x38
 80010d2:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_FMC_MspInit+0x104>)
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f0:	230c      	movs	r3, #12
 80010f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	482c      	ldr	r0, [pc, #176]	; (80011ac <HAL_FMC_MspInit+0x108>)
 80010fa:	f009 fb73 	bl	800a7e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <HAL_FMC_MspInit+0x10c>)
 8001118:	f009 fb64 	bl	800a7e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112c:	230c      	movs	r3, #12
 800112e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	481f      	ldr	r0, [pc, #124]	; (80011b4 <HAL_FMC_MspInit+0x110>)
 8001136:	f009 fb55 	bl	800a7e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800113a:	f248 1311 	movw	r3, #33041	; 0x8111
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800114c:	230c      	movs	r3, #12
 800114e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <HAL_FMC_MspInit+0x114>)
 8001156:	f009 fb45 	bl	800a7e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800115a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800115e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800116c:	230c      	movs	r3, #12
 800116e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <HAL_FMC_MspInit+0x118>)
 8001176:	f009 fb35 	bl	800a7e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800117a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800117e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800118c:	230c      	movs	r3, #12
 800118e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_FMC_MspInit+0x11c>)
 8001196:	f009 fb25 	bl	800a7e4 <HAL_GPIO_Init>
 800119a:	e000      	b.n	800119e <HAL_FMC_MspInit+0xfa>
    return;
 800119c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000fc 	.word	0x200000fc
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40020c00 	.word	0x40020c00

080011c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011cc:	f7ff ff6a 	bl	80010a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTASK */
  hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTASK_attributes);
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <MX_FREERTOS_Init+0x28>)
 80011de:	2100      	movs	r1, #0
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <MX_FREERTOS_Init+0x2c>)
 80011e2:	f00d fadb 	bl	800e79c <osThreadNew>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <MX_FREERTOS_Init+0x30>)
 80011ea:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL, &touchGFXTask_attributes);
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <MX_FREERTOS_Init+0x34>)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <MX_FREERTOS_Init+0x38>)
 80011f2:	f00d fad3 	bl	800e79c <osThreadNew>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <MX_FREERTOS_Init+0x3c>)
 80011fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	080252b4 	.word	0x080252b4
 8001204:	08001219 	.word	0x08001219
 8001208:	20056904 	.word	0x20056904
 800120c:	080252d8 	.word	0x080252d8
 8001210:	08001229 	.word	0x08001229
 8001214:	20056900 	.word	0x20056900

08001218 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f00d fb93 	bl	800e94c <osDelay>
 8001226:	e7fb      	b.n	8001220 <StartHardwareTask+0x8>

08001228 <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 8001230:	f000 ff09 	bl	8002046 <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f00d fb89 	bl	800e94c <osDelay>
 800123a:	e7fb      	b.n	8001234 <StartTouchGFXTask+0xc>

0800123c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <MX_GPIO_Init+0x130>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a45      	ldr	r2, [pc, #276]	; (800136c <MX_GPIO_Init+0x130>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b43      	ldr	r3, [pc, #268]	; (800136c <MX_GPIO_Init+0x130>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <MX_GPIO_Init+0x130>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a3f      	ldr	r2, [pc, #252]	; (800136c <MX_GPIO_Init+0x130>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <MX_GPIO_Init+0x130>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_GPIO_Init+0x130>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a39      	ldr	r2, [pc, #228]	; (800136c <MX_GPIO_Init+0x130>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <MX_GPIO_Init+0x130>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <MX_GPIO_Init+0x130>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a33      	ldr	r2, [pc, #204]	; (800136c <MX_GPIO_Init+0x130>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <MX_GPIO_Init+0x130>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <MX_GPIO_Init+0x130>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <MX_GPIO_Init+0x130>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <MX_GPIO_Init+0x130>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_GPIO_Init+0x130>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <MX_GPIO_Init+0x130>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_GPIO_Init+0x130>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_GPIO_Init+0x130>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <MX_GPIO_Init+0x130>)
 80012e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_GPIO_Init+0x130>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_GPIO_Init+0x130>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <MX_GPIO_Init+0x130>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_GPIO_Init+0x130>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2104      	movs	r1, #4
 8001316:	4816      	ldr	r0, [pc, #88]	; (8001370 <MX_GPIO_Init+0x134>)
 8001318:	f009 fd1c 	bl	800ad54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_RESET_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_GPIO_Init+0x138>)
 8001324:	f009 fd16 	bl	800ad54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 8001328:	2304      	movs	r3, #4
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_GPIO_Init+0x134>)
 8001340:	f009 fa50 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_PD_Pin;
 8001344:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_GPIO_Init+0x138>)
 800135e:	f009 fa41 	bl	800a7e4 <HAL_GPIO_Init>

}
 8001362:	bf00      	nop
 8001364:	3738      	adds	r7, #56	; 0x38
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40021000 	.word	0x40021000
 8001374:	40020800 	.word	0x40020800

08001378 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2234      	movs	r2, #52	; 0x34
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f021 ffc9 	bl	802331c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_LTDC_Init+0xfc>)
 800138c:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <MX_LTDC_Init+0x100>)
 800138e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_LTDC_Init+0xfc>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_LTDC_Init+0xfc>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800139c:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_LTDC_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013b0:	2227      	movs	r2, #39	; 0x27
 80013b2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013b6:	220b      	movs	r2, #11
 80013b8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013bc:	222f      	movs	r2, #47	; 0x2f
 80013be:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013c2:	f240 322b 	movw	r2, #811	; 0x32b
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013ca:	f240 220f 	movw	r2, #527	; 0x20f
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013d2:	f240 3233 	movw	r2, #819	; 0x333
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013da:	f240 2217 	movw	r2, #535	; 0x217
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013f8:	481e      	ldr	r0, [pc, #120]	; (8001474 <MX_LTDC_Init+0xfc>)
 80013fa:	f009 fcc5 	bl	800ad88 <HAL_LTDC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001404:	f000 fac2 	bl	800198c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 800140c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001410:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001416:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800141a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800141c:	2301      	movs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800142e:	2305      	movs	r3, #5
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001432:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001438:	f44f 7348 	mov.w	r3, #800	; 0x320
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800143e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_LTDC_Init+0xfc>)
 800145e:	f009 fe1b 	bl	800b098 <HAL_LTDC_ConfigLayer>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001468:	f000 fa90 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3738      	adds	r7, #56	; 0x38
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20056908 	.word	0x20056908
 8001478:	40016800 	.word	0x40016800

0800147c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0b4      	sub	sp, #208	; 0xd0
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	2290      	movs	r2, #144	; 0x90
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f021 ff3d 	bl	802331c <memset>
  if(ltdcHandle->Instance==LTDC)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4aa6      	ldr	r2, [pc, #664]	; (8001740 <HAL_LTDC_MspInit+0x2c4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	f040 8144 	bne.w	8001736 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014ae:	2308      	movs	r3, #8
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 80014b2:	f240 1317 	movw	r3, #279	; 0x117
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 80014b8:	2303      	movs	r3, #3
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80014c0:	2300      	movs	r3, #0
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80014c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014cc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00b fbf0 	bl	800ccb8 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80014de:	f000 fa55 	bl	800198c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014e2:	4b98      	ldr	r3, [pc, #608]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a97      	ldr	r2, [pc, #604]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 80014e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b95      	ldr	r3, [pc, #596]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a91      	ldr	r2, [pc, #580]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a8b      	ldr	r2, [pc, #556]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b86      	ldr	r3, [pc, #536]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a85      	ldr	r2, [pc, #532]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b83      	ldr	r3, [pc, #524]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b80      	ldr	r3, [pc, #512]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a7f      	ldr	r2, [pc, #508]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a79      	ldr	r2, [pc, #484]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a73      	ldr	r2, [pc, #460]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a6d      	ldr	r2, [pc, #436]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_LTDC_MspInit+0x2c8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015a2:	2370      	movs	r3, #112	; 0x70
 80015a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ba:	230e      	movs	r3, #14
 80015bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015c4:	4619      	mov	r1, r3
 80015c6:	4860      	ldr	r0, [pc, #384]	; (8001748 <HAL_LTDC_MspInit+0x2cc>)
 80015c8:	f009 f90c 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015e6:	230e      	movs	r3, #14
 80015e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015f0:	4619      	mov	r1, r3
 80015f2:	4856      	ldr	r0, [pc, #344]	; (800174c <HAL_LTDC_MspInit+0x2d0>)
 80015f4:	f009 f8f6 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80015f8:	23c1      	movs	r3, #193	; 0xc1
 80015fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001610:	230e      	movs	r3, #14
 8001612:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800161a:	4619      	mov	r1, r3
 800161c:	484c      	ldr	r0, [pc, #304]	; (8001750 <HAL_LTDC_MspInit+0x2d4>)
 800161e:	f009 f8e1 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001622:	f240 437e 	movw	r3, #1150	; 0x47e
 8001626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800163c:	230e      	movs	r3, #14
 800163e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001646:	4619      	mov	r1, r3
 8001648:	4842      	ldr	r0, [pc, #264]	; (8001754 <HAL_LTDC_MspInit+0x2d8>)
 800164a:	f009 f8cb 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800164e:	2303      	movs	r3, #3
 8001650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001666:	2309      	movs	r3, #9
 8001668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001670:	4619      	mov	r1, r3
 8001672:	4839      	ldr	r0, [pc, #228]	; (8001758 <HAL_LTDC_MspInit+0x2dc>)
 8001674:	f009 f8b6 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001678:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800167c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001692:	230e      	movs	r3, #14
 8001694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800169c:	4619      	mov	r1, r3
 800169e:	482e      	ldr	r0, [pc, #184]	; (8001758 <HAL_LTDC_MspInit+0x2dc>)
 80016a0:	f009 f8a0 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 80016a4:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 80016a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016be:	230e      	movs	r3, #14
 80016c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016c8:	4619      	mov	r1, r3
 80016ca:	4824      	ldr	r0, [pc, #144]	; (800175c <HAL_LTDC_MspInit+0x2e0>)
 80016cc:	f009 f88a 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80016d0:	2348      	movs	r3, #72	; 0x48
 80016d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e8:	230e      	movs	r3, #14
 80016ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016f2:	4619      	mov	r1, r3
 80016f4:	481a      	ldr	r0, [pc, #104]	; (8001760 <HAL_LTDC_MspInit+0x2e4>)
 80016f6:	f009 f875 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001714:	2309      	movs	r3, #9
 8001716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800171e:	4619      	mov	r1, r3
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <HAL_LTDC_MspInit+0x2e0>)
 8001722:	f009 f85f 	bl	800a7e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2058      	movs	r0, #88	; 0x58
 800172c:	f008 fd0e 	bl	800a14c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001730:	2058      	movs	r0, #88	; 0x58
 8001732:	f008 fd27 	bl	800a184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001736:	bf00      	nop
 8001738:	37d0      	adds	r7, #208	; 0xd0
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40016800 	.word	0x40016800
 8001744:	40023800 	.word	0x40023800
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40020800 	.word	0x40020800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	40021800 	.word	0x40021800
 8001760:	40020c00 	.word	0x40020c00

08001764 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001768:	f3bf 8f4f 	dsb	sy
}
 800176c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800176e:	f3bf 8f6f 	isb	sy
}
 8001772:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <SCB_EnableICache+0x48>)
 8001776:	2200      	movs	r2, #0
 8001778:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800177c:	f3bf 8f4f 	dsb	sy
}
 8001780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001782:	f3bf 8f6f 	isb	sy
}
 8001786:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <SCB_EnableICache+0x48>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <SCB_EnableICache+0x48>)
 800178e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001792:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
}
 8001798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179a:	f3bf 8f6f 	isb	sy
}
 800179e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <SCB_EnableDCache+0x84>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017be:	f3bf 8f4f 	dsb	sy
}
 80017c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <SCB_EnableDCache+0x84>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ca:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0b5b      	lsrs	r3, r3, #13
 80017d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017d4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017de:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80017e8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017ee:	4911      	ldr	r1, [pc, #68]	; (8001834 <SCB_EnableDCache+0x84>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ef      	bne.n	80017e0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	60fa      	str	r2, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e5      	bne.n	80017d6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800180a:	f3bf 8f4f 	dsb	sy
}
 800180e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <SCB_EnableDCache+0x84>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <SCB_EnableDCache+0x84>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001822:	f3bf 8f6f 	isb	sy
}
 8001826:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800183c:	f7ff ff92 	bl	8001764 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001840:	f7ff ffb6 	bl	80017b0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001844:	f007 fed4 	bl	80095f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001848:	f000 f81e 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184c:	f7ff fcf6 	bl	800123c <MX_GPIO_Init>
  MX_CRC_Init();
 8001850:	f7ff fae2 	bl	8000e18 <MX_CRC_Init>
  MX_FMC_Init();
 8001854:	f7ff fb80 	bl	8000f58 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001858:	f000 f89e 	bl	8001998 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 800185c:	f7ff fd8c 	bl	8001378 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001860:	f7ff fb1c 	bl	8000e9c <MX_DMA2D_Init>
  MX_TIM3_Init();
 8001864:	f000 fb0e 	bl	8001e84 <MX_TIM3_Init>
  MX_CAN2_Init();
 8001868:	f7ff f8c4 	bl	80009f4 <MX_CAN2_Init>
  MX_CAN1_Init();
 800186c:	f7ff f888 	bl	8000980 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8001870:	f000 fbe3 	bl	800203a <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8001874:	f7fe feb8 	bl	80005e8 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001878:	f00c ff26 	bl	800e6c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800187c:	f7ff fcac 	bl	80011d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001880:	f00c ff56 	bl	800e730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001884:	e7fe      	b.n	8001884 <main+0x4c>
	...

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	; 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	2234      	movs	r2, #52	; 0x34
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f021 fd40 	bl	802331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <SystemClock_Config+0xd8>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <SystemClock_Config+0xd8>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <SystemClock_Config+0xd8>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <SystemClock_Config+0xdc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a26      	ldr	r2, [pc, #152]	; (8001964 <SystemClock_Config+0xdc>)
 80018ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <SystemClock_Config+0xdc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018f0:	2319      	movs	r3, #25
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80018f4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80018f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4618      	mov	r0, r3
 800190c:	f00a fd32 	bl	800c374 <HAL_RCC_OscConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001916:	f000 f839 	bl	800198c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800191a:	f009 fdcd 	bl	800b4b8 <HAL_PWREx_EnableOverDrive>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001924:	f000 f832 	bl	800198c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001928:	230f      	movs	r3, #15
 800192a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	2302      	movs	r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001934:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	2107      	movs	r1, #7
 8001946:	4618      	mov	r0, r3
 8001948:	f00a ffc2 	bl	800c8d0 <HAL_RCC_ClockConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001952:	f000 f81b 	bl	800198c <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3750      	adds	r7, #80	; 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197a:	f007 fe47 	bl	800960c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40001000 	.word	0x40001000

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_QUADSPI_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 7;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019b0:	2210      	movs	r2, #16
 80019b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019b6:	2217      	movs	r2, #23
 80019b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019bc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80019c0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_QUADSPI_Init+0x50>)
 80019d6:	f009 fdbf 	bl	800b558 <HAL_QSPI_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f7ff ffd4 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200569b0 	.word	0x200569b0
 80019ec:	a0001000 	.word	0xa0001000

080019f0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <HAL_QSPI_MspInit+0x104>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d16c      	bne.n	8001aec <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	4a38      	ldr	r2, [pc, #224]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_QSPI_MspInit+0x108>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4821      	ldr	r0, [pc, #132]	; (8001afc <HAL_QSPI_MspInit+0x10c>)
 8001a76:	f008 feb5 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4819      	ldr	r0, [pc, #100]	; (8001afc <HAL_QSPI_MspInit+0x10c>)
 8001a98:	f008 fea4 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001aac:	2309      	movs	r3, #9
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <HAL_QSPI_MspInit+0x110>)
 8001ab8:	f008 fe94 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001abc:	2340      	movs	r3, #64	; 0x40
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001acc:	230a      	movs	r3, #10
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <HAL_QSPI_MspInit+0x110>)
 8001ad8:	f008 fe84 	bl	800a7e4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	205c      	movs	r0, #92	; 0x5c
 8001ae2:	f008 fb33 	bl	800a14c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001ae6:	205c      	movs	r0, #92	; 0x5c
 8001ae8:	f008 fb4c 	bl	800a184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	a0001000 	.word	0xa0001000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40021400 	.word	0x40021400
 8001b00:	40020400 	.word	0x40020400

08001b04 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_QSPI_MspDeInit+0x40>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d111      	bne.n	8001b3a <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_QSPI_MspDeInit+0x44>)
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_QSPI_MspDeInit+0x44>)
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001b22:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001b26:	4809      	ldr	r0, [pc, #36]	; (8001b4c <HAL_QSPI_MspDeInit+0x48>)
 8001b28:	f009 f808 	bl	800ab3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8001b2c:	2144      	movs	r1, #68	; 0x44
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <HAL_QSPI_MspDeInit+0x4c>)
 8001b30:	f009 f804 	bl	800ab3c <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001b34:	205c      	movs	r0, #92	; 0x5c
 8001b36:	f008 fb33 	bl	800a1a0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	a0001000 	.word	0xa0001000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40021400 	.word	0x40021400
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	f06f 0001 	mvn.w	r0, #1
 8001b92:	f008 fadb 	bl	800a14c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	2036      	movs	r0, #54	; 0x36
 8001bba:	f008 fac7 	bl	800a14c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bbe:	2036      	movs	r0, #54	; 0x36
 8001bc0:	f008 fae0 	bl	800a184 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_InitTick+0xa0>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_InitTick+0xa0>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_InitTick+0xa0>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bdc:	f107 0210 	add.w	r2, r7, #16
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00b f834 	bl	800cc54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bec:	f00b f81e 	bl	800cc2c <HAL_RCC_GetPCLK1Freq>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <HAL_InitTick+0xa4>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	3b01      	subs	r3, #1
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_InitTick+0xac>)
 8001c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c26:	f00b fcee 	bl	800d606 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c30:	4806      	ldr	r0, [pc, #24]	; (8001c4c <HAL_InitTick+0xa8>)
 8001c32:	f00b fd49 	bl	800d6c8 <HAL_TIM_Base_Start_IT>
 8001c36:	4603      	mov	r3, r0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3730      	adds	r7, #48	; 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	200569fc 	.word	0x200569fc
 8001c50:	40001000 	.word	0x40001000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <CAN1_RX0_IRQHandler+0x10>)
 8001c86:	f007 ff56 	bl	8009b36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20056828 	.word	0x20056828

08001c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM6_DAC_IRQHandler+0x10>)
 8001c9a:	f00b fde4 	bl	800d866 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200569fc 	.word	0x200569fc

08001ca8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <CAN2_RX0_IRQHandler+0x10>)
 8001cae:	f007 ff42 	bl	8009b36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200567d8 	.word	0x200567d8

08001cbc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <LTDC_IRQHandler+0x10>)
 8001cc2:	f009 f931 	bl	800af28 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20056908 	.word	0x20056908

08001cd0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <DMA2D_IRQHandler+0x10>)
 8001cd6:	f008 fbd7 	bl	800a488 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20056874 	.word	0x20056874

08001ce4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <QUADSPI_IRQHandler+0x10>)
 8001cea:	f009 fcd5 	bl	800b698 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200569b0 	.word	0x200569b0

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d12:	f021 faa9 	bl	8023268 <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3a:	e7fe      	b.n	8001d3a <_exit+0x12>

08001d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e00a      	b.n	8001d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4e:	f3af 8000 	nop.w
 8001d52:	4601      	mov	r1, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf0      	blt.n	8001d4e <_read+0x12>
	}

return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e009      	b.n	8001d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf1      	blt.n	8001d88 <_write+0x12>
	}
	return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_close>:

int _close(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_isatty>:

int _isatty(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	return 1;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f021 fa0e 	bl	8023268 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20080000 	.word	0x20080000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000110 	.word	0x20000110
 8001e80:	20056ae8 	.word	0x20056ae8

08001e84 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e96:	463b      	mov	r3, r7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <MX_TIM3_Init+0xb0>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ece:	4818      	ldr	r0, [pc, #96]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001ed0:	f00b fc72 	bl	800d7b8 <HAL_TIM_PWM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001eda:	f7ff fd57 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001eee:	f00c fa0f 	bl	800e310 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ef8:	f7ff fd48 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001f14:	f00b fdc6 	bl	800daa4 <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f1e:	f7ff fd35 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_TIM3_Init+0xac>)
 8001f24:	f000 f828 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20056a48 	.word	0x20056a48
 8001f34:	40000400 	.word	0x40000400

08001f38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_TIM_PWM_MspInit+0x38>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10b      	bne.n	8001f62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_TIM_MspPostInit+0x64>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11b      	bne.n	8001fd2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_TIM_MspPostInit+0x68>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_TIM_MspPostInit+0x68>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_TIM_MspPostInit+0x68>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_TIM_MspPostInit+0x6c>)
 8001fce:	f008 fc09 	bl	800a7e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002012:	f007 fadb 	bl	80095cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f021 f93f 	bl	8023298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7ff fc0d 	bl	8001838 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800202c:	080cdea8 	.word	0x080cdea8
  ldr r2, =_sbss
 8002030:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8002034:	20056ae8 	.word	0x20056ae8

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>

0800203a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800203e:	f001 fbdf 	bl	8003800 <touchgfx_init>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}

08002046 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800204a:	f001 fc03 	bl	8003854 <touchgfx_taskEntry>
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    {
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
    }
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	0802531c 	.word	0x0802531c

08002074 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    }
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffe9 	bl	8002054 <_ZN8touchgfx15TouchControllerD1Ev>
 8002082:	2104      	movs	r1, #4
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f020 ffb6 	bl	8022ff6 <_ZdlPvj>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ffbd 	bl	8002054 <_ZN8touchgfx15TouchControllerD1Ev>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	08025304 	.word	0x08025304

080020e8 <_ZN20STM32TouchControllerD0Ev>:
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ffe7 	bl	80020c4 <_ZN20STM32TouchControllerD1Ev>
 80020f6:	2104      	movs	r1, #4
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f020 ff7c 	bl	8022ff6 <_ZdlPvj>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]

}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]

}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]

}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    {
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	601a      	str	r2, [r3, #0]
    }
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	0802621c 	.word	0x0802621c

0800216c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    }
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe9 	bl	800214c <_ZN8touchgfx3HALD1Ev>
 800217a:	217c      	movs	r1, #124	; 0x7c
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f020 ff3a 	bl	8022ff6 <_ZdlPvj>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4610      	mov	r0, r2
 80021d4:	4798      	blx	r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	e000      	b.n	80021dc <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80021da:	2300      	movs	r3, #0
        }
    }
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f011 f819 	bl	8013224 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	33a0      	adds	r3, #160	; 0xa0
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
    }
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8002210:	2300      	movs	r3, #0
    }
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8002238:	f44f 7125 	mov.w	r1, #660	; 0x294
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800223e:	f020 ffe1 	bl	8023204 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf14      	ite	ne
 800225a:	2301      	movne	r3, #1
 800225c:	2300      	moveq	r3, #0
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8002262:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8002272:	701a      	strb	r2, [r3, #0]
    }
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	080246b8 	.word	0x080246b8
 8002280:	080246f0 	.word	0x080246f0
 8002284:	08024740 	.word	0x08024740
 8002288:	2005653a 	.word	0x2005653a
 800228c:	2005653b 	.word	0x2005653b

08002290 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8002298:	2300      	movs	r3, #0
    }
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4798      	blx	r3
        }
    }
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3318      	adds	r3, #24
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4610      	mov	r0, r2
 80022e4:	4798      	blx	r3
 80022e6:	4603      	mov	r3, r0
    }
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002304:	429a      	cmp	r2, r3
 8002306:	d017      	beq.n	8002338 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d12a      	bne.n	8002366 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002316:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800231e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002322:	881a      	ldrh	r2, [r3, #0]
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002326:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800232e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8002336:	e016      	b.n	8002366 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002346:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800234e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002356:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800235e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    }
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20056534 	.word	0x20056534
 8002378:	20056530 	.word	0x20056530
 800237c:	20056536 	.word	0x20056536
 8002380:	20056532 	.word	0x20056532
 8002384:	20056538 	.word	0x20056538

08002388 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	f010 f917 	bl	80125c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fecb 	bl	800214c <_ZN8touchgfx3HALD1Ev>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	08025680 	.word	0x08025680

080023c4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffe7 	bl	80023a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80023d2:	217c      	movs	r1, #124	; 0x7c
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f020 fe0e 	bl	8022ff6 <_ZdlPvj>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ffca 	bl	8002388 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fee0 	bl	80041cc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 ff7a 	bl	8004318 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f001 ff79 	bl	8004334 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f001 ff81 	bl	8004360 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	f001 ff8e 	bl	800439c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f001 feca 	bl	8004230 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 80024ae:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 80024c2:	801a      	strh	r2, [r3, #0]
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40016800 	.word	0x40016800
 80024d0:	20000114 	.word	0x20000114
 80024d4:	20000116 	.word	0x20000116

080024d8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 feb4 	bl	8004250 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 feb6 	bl	800426c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f001 feb8 	bl	8004288 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <_ZN11TouchGFXHALD1Ev+0x20>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff35 	bl	80023a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	08025334 	.word	0x08025334

08002544 <_ZN11TouchGFXHALD0Ev>:
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffe7 	bl	8002520 <_ZN11TouchGFXHALD1Ev>
 8002552:	217c      	movs	r1, #124	; 0x7c
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f020 fd4e 	bl	8022ff6 <_ZdlPvj>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002568:	2200      	movs	r2, #0
 800256a:	2101      	movs	r1, #1
 800256c:	2001      	movs	r0, #1
 800256e:	f00c fa1b 	bl	800e9a8 <osSemaphoreNew>
 8002572:	4603      	mov	r3, r0
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002576:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002584:	2126      	movs	r1, #38	; 0x26
 8002586:	480e      	ldr	r0, [pc, #56]	; (80025c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002588:	f020 fe3c 	bl	8023204 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800258c:	2200      	movs	r2, #0
 800258e:	2104      	movs	r1, #4
 8002590:	2001      	movs	r0, #1
 8002592:	f00c fb63 	bl	800ec5c <osMessageQueueNew>
 8002596:	4603      	mov	r3, r0
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800259a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80025a8:	212a      	movs	r1, #42	; 0x2a
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80025ac:	f020 fe2a 	bl	8023204 <__assert_func>
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000118 	.word	0x20000118
 80025b8:	08024788 	.word	0x08024788
 80025bc:	080247d4 	.word	0x080247d4
 80025c0:	08024804 	.word	0x08024804
 80025c4:	2000011c 	.word	0x2000011c
 80025c8:	08024880 	.word	0x08024880

080025cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	4618      	mov	r0, r3
 80025da:	f00c fa81 	bl	800eae0 <osSemaphoreAcquire>
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000118 	.word	0x20000118

080025e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00c fadb 	bl	800ebac <osSemaphoreRelease>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000118 	.word	0x20000118

08002600 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f00c fa68 	bl	800eae0 <osSemaphoreAcquire>
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000118 	.word	0x20000118

08002618 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f00c fac3 	bl	800ebac <osSemaphoreRelease>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000118 	.word	0x20000118

08002630 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	2300      	movs	r3, #0
 800263a:	2200      	movs	r2, #0
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800263e:	f00c fb93 	bl	800ed68 <osMessageQueuePut>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000011c 	.word	0x2000011c
 800264c:	20000004 	.word	0x20000004

08002650 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	1d39      	adds	r1, r7, #4
 800265c:	2300      	movs	r3, #0
 800265e:	2200      	movs	r2, #0
 8002660:	f00c fbf6 	bl	800ee50 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	1d39      	adds	r1, r7, #4
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	2200      	movs	r2, #0
 8002670:	f00c fbee 	bl	800ee50 <osMessageQueueGet>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000011c 	.word	0x2000011c

08002680 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4618      	mov	r0, r3
 800268e:	f00c f95d 	bl	800e94c <osDelay>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
    osThreadYield();
 800269e:	f00c f923 	bl	800e8e8 <osThreadYield>
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <__NVIC_EnableIRQ>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_DisableIRQ>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db12      	blt.n	800271c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	490a      	ldr	r1, [pc, #40]	; (8002728 <__NVIC_DisableIRQ+0x44>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	3320      	adds	r3, #32
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002710:	f3bf 8f4f 	dsb	sy
}
 8002714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002716:	f3bf 8f6f 	isb	sy
}
 800271a:	bf00      	nop
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100

0800272c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
        : color(0)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    {
    }
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
    }
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    {
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
    }
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	08025450 	.word	0x08025450

08002780 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    }
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ffe9 	bl	8002760 <_ZN8touchgfx9DMA_QueueD1Ev>
 800278e:	2104      	movs	r1, #4
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f020 fc30 	bl	8022ff6 <_ZdlPvj>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3344      	adds	r3, #68	; 0x44
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
    }
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    {
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
    }
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	0802675c 	.word	0x0802675c

080027dc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    }
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffe9 	bl	80027bc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80027ea:	210c      	movs	r1, #12
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f020 fc02 	bl	8022ff6 <_ZdlPvj>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	721a      	strb	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	725a      	strb	r2, [r3, #9]
    {
    }
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	0802675c 	.word	0x0802675c

08002830 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002838:	2301      	movs	r3, #1
    }
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3328      	adds	r3, #40	; 0x28
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4610      	mov	r0, r2
 800285a:	4798      	blx	r3
    }
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
        return instance;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
    }
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	2005653c 	.word	0x2005653c

0800287c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3314      	adds	r3, #20
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4610      	mov	r0, r2
 8002894:	4798      	blx	r3
    }
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80028a6:	f7ff ffdd 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ffe5 	bl	800287c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	330c      	adds	r3, #12
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff30 	bl	800272c <_ZN8touchgfx9colortypeC1Ev>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	330c      	adds	r3, #12
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7ff ff87 	bl	80027fc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80028ee:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <_ZN10STM32F7DMAC1Ev+0x50>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 000c 	add.w	r0, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3320      	adds	r3, #32
 80028fe:	2260      	movs	r2, #96	; 0x60
 8002900:	4619      	mov	r1, r3
 8002902:	f010 fdf9 	bl	80134f8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3320      	adds	r3, #32
 800290a:	245f      	movs	r4, #95	; 0x5f
 800290c:	461d      	mov	r5, r3
 800290e:	2c00      	cmp	r4, #0
 8002910:	db05      	blt.n	800291e <_ZN10STM32F7DMAC1Ev+0x46>
 8002912:	4628      	mov	r0, r5
 8002914:	f7ff ffd1 	bl	80028ba <_ZN8touchgfx6BlitOpC1Ev>
 8002918:	3520      	adds	r5, #32
 800291a:	3c01      	subs	r4, #1
 800291c:	e7f7      	b.n	800290e <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bdb0      	pop	{r4, r5, r7, pc}
 8002928:	08025400 	.word	0x08025400

0800292c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <_ZN10STM32F7DMAD1Ev+0x30>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800293a:	205a      	movs	r0, #90	; 0x5a
 800293c:	f7ff fed2 	bl	80026e4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	330c      	adds	r3, #12
 8002944:	4618      	mov	r0, r3
 8002946:	f000 faad 	bl	8002ea4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff35 	bl	80027bc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	08025400 	.word	0x08025400

08002960 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
}
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffdf 	bl	800292c <_ZN10STM32F7DMAD1Ev>
 800296e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f020 fb3f 	bl	8022ff6 <_ZdlPvj>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8002992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80029aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ae:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80029b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029ba:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <_ZN10STM32F7DMA10initializeEv+0x50>)
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <_ZN10STM32F7DMA10initializeEv+0x54>)
 80029c0:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80029c2:	205a      	movs	r0, #90	; 0x5a
 80029c4:	f7ff fe70 	bl	80026a8 <__NVIC_EnableIRQ>
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	20056874 	.word	0x20056874
 80029d8:	0800289f 	.word	0x0800289f

080029dc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

    switch (format)
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	2b0b      	cmp	r3, #11
 80029f0:	d826      	bhi.n	8002a40 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a35 	.word	0x08002a35
 80029fc:	08002a2f 	.word	0x08002a2f
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	08002a41 	.word	0x08002a41
 8002a08:	08002a41 	.word	0x08002a41
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002a41 	.word	0x08002a41
 8002a14:	08002a3b 	.word	0x08002a3b
 8002a18:	08002a3b 	.word	0x08002a3b
 8002a1c:	08002a3b 	.word	0x08002a3b
 8002a20:	08002a3b 	.word	0x08002a3b
 8002a24:	08002a3b 	.word	0x08002a3b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
        break;
 8002a2c:	e00e      	b.n	8002a4c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
        break;
 8002a32:	e00b      	b.n	8002a4c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002a34:	2302      	movs	r3, #2
 8002a36:	60fb      	str	r3, [r7, #12]
        break;
 8002a38:	e008      	b.n	8002a4c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	60fb      	str	r3, [r7, #12]
        break;
 8002a3e:	e005      	b.n	8002a4c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002a44:	2164      	movs	r1, #100	; 0x64
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002a48:	f020 fbdc 	bl	8023204 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	080248c4 	.word	0x080248c4
 8002a5c:	080248e0 	.word	0x080248e0
 8002a60:	0802492c 	.word	0x0802492c

08002a64 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d821      	bhi.n	8002abe <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002a7a:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002ab9 	.word	0x08002ab9
 8002a84:	08002ab3 	.word	0x08002ab3
 8002a88:	08002aad 	.word	0x08002aad
 8002a8c:	08002abf 	.word	0x08002abf
 8002a90:	08002abf 	.word	0x08002abf
 8002a94:	08002abf 	.word	0x08002abf
 8002a98:	08002abf 	.word	0x08002abf
 8002a9c:	08002ab3 	.word	0x08002ab3
 8002aa0:	08002ab3 	.word	0x08002ab3
 8002aa4:	08002ab3 	.word	0x08002ab3
 8002aa8:	08002ab3 	.word	0x08002ab3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
        break;
 8002ab0:	e00b      	b.n	8002aca <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
        break;
 8002ab6:	e008      	b.n	8002aca <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	60fb      	str	r3, [r7, #12]
        break;
 8002abc:	e005      	b.n	8002aca <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002ac2:	2185      	movs	r1, #133	; 0x85
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002ac6:	f020 fb9d 	bl	8023204 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	080248c4 	.word	0x080248c4
 8002ad8:	080249a4 	.word	0x080249a4
 8002adc:	0802492c 	.word	0x0802492c

08002ae0 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002ae8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	7f5b      	ldrb	r3, [r3, #29]
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff67 	bl	80029dc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002b0e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	7f9b      	ldrb	r3, [r3, #30]
 8002b14:	4619      	mov	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff60 	bl	80029dc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002b1c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	7f9b      	ldrb	r3, [r3, #30]
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff9d 	bl	8002a64 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002b2a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	8b5b      	ldrh	r3, [r3, #26]
 8002b30:	461a      	mov	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	8a9b      	ldrh	r3, [r3, #20]
 8002b36:	1ad2      	subs	r2, r2, r3
 8002b38:	4b97      	ldr	r3, [pc, #604]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	8b5b      	ldrh	r3, [r3, #26]
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	8a9b      	ldrh	r3, [r3, #20]
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	4b93      	ldr	r3, [pc, #588]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b4a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	8b1b      	ldrh	r3, [r3, #24]
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	8a9b      	ldrh	r3, [r3, #20]
 8002b56:	1ad2      	subs	r2, r2, r3
 8002b58:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b5a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b5c:	4a8e      	ldr	r2, [pc, #568]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	8adb      	ldrh	r3, [r3, #22]
 8002b66:	461a      	mov	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	8a9b      	ldrh	r3, [r3, #20]
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	4b89      	ldr	r3, [pc, #548]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	4b87      	ldr	r3, [pc, #540]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002b82:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d037      	beq.n	8002bfe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	f200 80e4 	bhi.w	8002d5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9a:	d015      	beq.n	8002bc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba0:	f200 80dd 	bhi.w	8002d5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d045      	beq.n	8002c34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	f200 80d8 	bhi.w	8002d5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	f000 80c0 	beq.w	8002d34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	f200 80d2 	bhi.w	8002d5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	f000 80a5 	beq.w	8002d0a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f000 80b7 	beq.w	8002d34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8002bc6:	e0ca      	b.n	8002d5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	7f1b      	ldrb	r3, [r3, #28]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4a71      	ldr	r2, [pc, #452]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	4c6e      	ldr	r4, [pc, #440]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fdb2 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002be8:	4a6b      	ldr	r2, [pc, #428]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bf4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002bf6:	4b68      	ldr	r3, [pc, #416]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002bf8:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002bfa:	601a      	str	r2, [r3, #0]
        break;
 8002bfc:	e0c8      	b.n	8002d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
 8002c02:	061b      	lsls	r3, r3, #24
 8002c04:	4619      	mov	r1, r3
 8002c06:	4a64      	ldr	r2, [pc, #400]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	4c61      	ldr	r4, [pc, #388]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fd97 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c1e:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c2a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c2e:	4a5c      	ldr	r2, [pc, #368]	; (8002da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002c30:	601a      	str	r2, [r3, #0]
        break;
 8002c32:	e0ad      	b.n	8002d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	7f1b      	ldrb	r3, [r3, #28]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	461a      	mov	r2, r3
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	4a53      	ldr	r2, [pc, #332]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c52:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c5e:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d00d      	beq.n	8002c92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002c76:	e020      	b.n	8002cba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002c78:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	8852      	ldrh	r2, [r2, #2]
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0212      	lsls	r2, r2, #8
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	61d3      	str	r3, [r2, #28]
            break;
 8002c90:	e019      	b.n	8002cc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	7f1b      	ldrb	r3, [r3, #28]
 8002c96:	2bff      	cmp	r3, #255	; 0xff
 8002c98:	d101      	bne.n	8002c9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	8852      	ldrh	r2, [r2, #2]
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0212      	lsls	r2, r2, #8
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	4a39      	ldr	r2, [pc, #228]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002cb2:	f043 0310 	orr.w	r3, r3, #16
 8002cb6:	61d3      	str	r3, [r2, #28]
            break;
 8002cb8:	e005      	b.n	8002cc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8002cba:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002cbe:	21ff      	movs	r1, #255	; 0xff
 8002cc0:	483c      	ldr	r0, [pc, #240]	; (8002db4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002cc2:	f020 fa9f 	bl	8023204 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ccc:	f043 0320 	orr.w	r3, r3, #32
 8002cd0:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8002ce8:	f7ff fcd7 	bl	800269a <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002cec:	e7f1      	b.n	8002cd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002cfc:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002cfe:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8002d00:	e046      	b.n	8002d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002d02:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d04:	4a2c      	ldr	r2, [pc, #176]	; (8002db8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002d06:	601a      	str	r2, [r3, #0]
      break;
 8002d08:	e042      	b.n	8002d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	7f1b      	ldrb	r3, [r3, #28]
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	461a      	mov	r2, r3
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d2a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002d30:	601a      	str	r2, [r3, #0]
        break;
 8002d32:	e02d      	b.n	8002d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7f1b      	ldrb	r3, [r3, #28]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d46:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d48:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d54:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d58:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002d5a:	601a      	str	r2, [r3, #0]
        break;
 8002d5c:	e018      	b.n	8002d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	7f1b      	ldrb	r3, [r3, #28]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	461a      	mov	r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	7f5a      	ldrb	r2, [r3, #29]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	7f9b      	ldrb	r3, [r3, #30]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d003      	beq.n	8002d86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8002d82:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002d84:	e003      	b.n	8002d8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002d88:	f240 2201 	movw	r2, #513	; 0x201
 8002d8c:	601a      	str	r2, [r3, #0]
        break;
 8002d8e:	bf00      	nop
    }
}
 8002d90:	bf00      	nop
 8002d92:	3724      	adds	r7, #36	; 0x24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	4002b000 	.word	0x4002b000
 8002d9c:	0002000a 	.word	0x0002000a
 8002da0:	00020201 	.word	0x00020201
 8002da4:	00020009 	.word	0x00020009
 8002da8:	ffff00ef 	.word	0xffff00ef
 8002dac:	080249f4 	.word	0x080249f4
 8002db0:	08024a10 	.word	0x08024a10
 8002db4:	0802492c 	.word	0x0802492c
 8002db8:	00010201 	.word	0x00010201

08002dbc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	7f9b      	ldrb	r3, [r3, #30]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fe49 	bl	8002a64 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002dd2:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	8adb      	ldrh	r3, [r3, #22]
 8002dde:	461a      	mov	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	8a9b      	ldrh	r3, [r3, #20]
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	431a      	orrs	r2, r3
 8002de8:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	8b5b      	ldrh	r3, [r3, #26]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	8a9b      	ldrh	r3, [r3, #20]
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d12e      	bne.n	8002e6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	8b5b      	ldrh	r3, [r3, #26]
 8002e10:	461a      	mov	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	8a9b      	ldrh	r3, [r3, #20]
 8002e16:	1ad2      	subs	r2, r2, r3
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e1a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	8b5b      	ldrh	r3, [r3, #26]
 8002e20:	461a      	mov	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	8a9b      	ldrh	r3, [r3, #20]
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e2a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	7f1b      	ldrb	r3, [r3, #28]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	4c13      	ldr	r4, [pc, #76]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fc7d 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e58:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e60:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8002e66:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002e68:	e010      	b.n	8002e8c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	4c06      	ldr	r4, [pc, #24]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fc63 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8002e82:	4603      	mov	r3, r0
 8002e84:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8002e88:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	4002b000 	.word	0x4002b000
 8002e98:	00010009 	.word	0x00010009
 8002e9c:	00020201 	.word	0x00020201
 8002ea0:	00030201 	.word	0x00030201

08002ea4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fc53 	bl	8002760 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	080267ac 	.word	0x080267ac

08002ec8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffe7 	bl	8002ea4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002ed6:	2114      	movs	r1, #20
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f020 f88c 	bl	8022ff6 <_ZdlPvj>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
        : color(col)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	601a      	str	r2, [r3, #0]
    }
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	805a      	strh	r2, [r3, #2]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	809a      	strh	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	80da      	strh	r2, [r3, #6]
    {
    }
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
    }
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200565b8 	.word	0x200565b8

08002f54 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    {
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
    }
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	0802566c 	.word	0x0802566c

08002f74 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    }
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ffe9 	bl	8002f54 <_ZN8touchgfx12FontProviderD1Ev>
 8002f82:	2104      	movs	r1, #4
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f020 f836 	bl	8022ff6 <_ZdlPvj>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	611a      	str	r2, [r3, #16]
    {
    }
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	0802565c 	.word	0x0802565c

08002fd4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
    {
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	601a      	str	r2, [r3, #0]
    }
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	0802565c 	.word	0x0802565c

08002ff4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    }
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ffe9 	bl	8002fd4 <_ZN8touchgfx7MVPHeapD1Ev>
 8003002:	2114      	movs	r1, #20
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f01f fff6 	bl	8022ff6 <_ZdlPvj>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    {
    }
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
    {
    }
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    {
    }
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
    {
    }
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
    {
    }
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    {
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
    }
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	08025634 	.word	0x08025634

080030b8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    }
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffe9 	bl	8003098 <_ZN8touchgfx15UIEventListenerD1Ev>
 80030c6:	2104      	movs	r1, #4
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f01f ff94 	bl	8022ff6 <_ZdlPvj>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    {
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
    }
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	08027018 	.word	0x08027018

080030f8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    }
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe9 	bl	80030d8 <_ZN8touchgfx3LCDD1Ev>
 8003106:	2108      	movs	r1, #8
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f01f ff74 	bl	8022ff6 <_ZdlPvj>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
    {
    }
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003142:	6810      	ldr	r0, [r2, #0]
 8003144:	6851      	ldr	r1, [r2, #4]
 8003146:	c303      	stmia	r3!, {r0, r1}
    }
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    {
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
    }
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	0802561c 	.word	0x0802561c

08003174 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    }
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ffe9 	bl	8003154 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003182:	2104      	movs	r1, #4
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f01f ff36 	bl	8022ff6 <_ZdlPvj>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff77 	bl	8003098 <_ZN8touchgfx15UIEventListenerD1Ev>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	080270f0 	.word	0x080270f0

080031b8 <_ZN8touchgfx11ApplicationD0Ev>:
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ffe7 	bl	8003194 <_ZN8touchgfx11ApplicationD1Ev>
 80031c6:	f44f 719c 	mov.w	r1, #312	; 0x138
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f01f ff13 	bl	8022ff6 <_ZdlPvj>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f804 	bl	80031f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00f      	beq.n	8003222 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4610      	mov	r0, r2
 800323c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff97 	bl	8003194 <_ZN8touchgfx11ApplicationD1Ev>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	080255d8 	.word	0x080255d8

08003274 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ffe7 	bl	8003250 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f01f feb5 	bl	8022ff6 <_ZdlPvj>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fd07 	bl	8003cc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ffcb 	bl	8003250 <_ZN8touchgfx14MVPApplicationD1Ev>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0802557c 	.word	0x0802557c

080032c8 <_ZN23FrontendApplicationBaseD0Ev>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffe1 	bl	8003298 <_ZN23FrontendApplicationBaseD1Ev>
 80032d6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f01f fe8b 	bl	8022ff6 <_ZdlPvj>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	4a05      	ldr	r2, [pc, #20]	; (800330c <_ZN19FrontendApplicationD1Ev+0x20>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ffcb 	bl	8003298 <_ZN23FrontendApplicationBaseD1Ev>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	08025538 	.word	0x08025538

08003310 <_ZN19FrontendApplicationD0Ev>:
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffe7 	bl	80032ec <_ZN19FrontendApplicationD1Ev>
 800331e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f01f fe67 	bl	8022ff6 <_ZdlPvj>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003340:	4618      	mov	r0, r3
 8003342:	f004 fd49 	bl	8007dd8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f012 fd89 	bl	8015e60 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	805a      	strh	r2, [r3, #2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	809a      	strh	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	80da      	strh	r2, [r3, #6]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	811a      	strh	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	815a      	strh	r2, [r3, #10]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	819a      	strh	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	739a      	strb	r2, [r3, #14]
        {
        }
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ffd5 	bl	8003356 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	829a      	strh	r2, [r3, #20]
    {
    }
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80033d2:	4a55      	ldr	r2, [pc, #340]	; (8003528 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	615a      	str	r2, [r3, #20]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	331c      	adds	r3, #28
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffcb 	bl	800339c <_ZN8touchgfx8GesturesC1Ev>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	64da      	str	r2, [r3, #76]	; 0x4c
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3350      	adds	r3, #80	; 0x50
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fd58 	bl	8002f06 <_ZN8touchgfx4RectC1Ev>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	659a      	str	r2, [r3, #88]	; 0x58
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	671a      	str	r2, [r3, #112]	; 0x70
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80034e6:	8b3b      	ldrh	r3, [r7, #24]
 80034e8:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80034ec:	8bbb      	ldrh	r3, [r7, #28]
 80034ee:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80034fc:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003504:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8003506:	8b3a      	ldrh	r2, [r7, #24]
 8003508:	8bbb      	ldrh	r3, [r7, #28]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf34      	ite	cc
 800350e:	2301      	movcc	r3, #1
 8003510:	2300      	movcs	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	0802621c 	.word	0x0802621c
 800352c:	2005653c 	.word	0x2005653c
 8003530:	20056530 	.word	0x20056530
 8003534:	20056532 	.word	0x20056532
 8003538:	20056534 	.word	0x20056534
 800353c:	20056536 	.word	0x20056536
 8003540:	20056538 	.word	0x20056538

08003544 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fba7 	bl	8004ca4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	f7ff fd0b 	bl	8002f94 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]
    {

    }
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08025524 	.word	0x08025524

08003594 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
 8003598:	4801      	ldr	r0, [pc, #4]	; (80035a0 <__tcf_0+0xc>)
 800359a:	f000 f965 	bl	8003868 <_ZN12FrontendHeapD1Ev>
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000138 	.word	0x20000138

080035a4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f3bf 8f5b 	dmb	ish
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <_ZN12FrontendHeap11getInstanceEv+0x48>
 80035c4:	480b      	ldr	r0, [pc, #44]	; (80035f4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80035c6:	f01f fd18 	bl	8022ffa <__cxa_guard_acquire>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <_ZN12FrontendHeap11getInstanceEv+0x48>
 80035da:	4807      	ldr	r0, [pc, #28]	; (80035f8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80035dc:	f000 f868 	bl	80036b0 <_ZN12FrontendHeapC1Ev>
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80035e2:	f01f fd16 	bl	8023012 <__cxa_guard_release>
 80035e6:	4805      	ldr	r0, [pc, #20]	; (80035fc <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80035e8:	f01f fe2a 	bl	8023240 <atexit>
        return instance;
 80035ec:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80035ee:	4618      	mov	r0, r3
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20022918 	.word	0x20022918
 80035f8:	20000138 	.word	0x20000138
 80035fc:	08003595 	.word	0x08003595

08003600 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	4a05      	ldr	r2, [pc, #20]	; (8003620 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fcdf 	bl	8002fd4 <_ZN8touchgfx7MVPHeapD1Ev>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	08025524 	.word	0x08025524

08003624 <_ZN16FrontendHeapBaseD0Ev>:
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffe7 	bl	8003600 <_ZN16FrontendHeapBaseD1Ev>
 8003632:	2114      	movs	r1, #20
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f01f fcde 	bl	8022ff6 <_ZdlPvj>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4618      	mov	r0, r3
 8003650:	f00e fdd4 	bl	80121fc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003654:	4a03      	ldr	r2, [pc, #12]	; (8003664 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	080254f0 	.word	0x080254f0

08003668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f00e fdc2 	bl	80121fc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003678:	4a03      	ldr	r2, [pc, #12]	; (8003688 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	080254bc 	.word	0x080254bc

0800368c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f00e fdb0 	bl	80121fc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800369c:	4a03      	ldr	r2, [pc, #12]	; (80036ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	08025488 	.word	0x08025488

080036b0 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f103 0414 	add.w	r4, r3, #20
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <_ZN12FrontendHeapC1Ev+0x8c>)
 80036ca:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <_ZN12FrontendHeapC1Ev+0x90>)
 80036d0:	440b      	add	r3, r1
                     app(model, *this)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	462a      	mov	r2, r5
 80036d8:	4621      	mov	r1, r4
 80036da:	f7ff ff41 	bl	8003560 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80036de:	4a19      	ldr	r2, [pc, #100]	; (8003744 <_ZN12FrontendHeapC1Ev+0x94>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3314      	adds	r3, #20
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ffab 	bl	8003644 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	332c      	adds	r3, #44	; 0x2c
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ffb8 	bl	8003668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <_ZN12FrontendHeapC1Ev+0x8c>)
 80036fc:	4413      	add	r3, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ffc4 	bl	800368c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <_ZN12FrontendHeapC1Ev+0x98>)
 8003708:	4413      	add	r3, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fb56 	bl	8007dbc <_ZN5ModelC1Ev>
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <_ZN12FrontendHeapC1Ev+0x90>)
 8003714:	4413      	add	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	490b      	ldr	r1, [pc, #44]	; (8003748 <_ZN12FrontendHeapC1Ev+0x98>)
 800371a:	4411      	add	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	f004 fb36 	bl	8007d90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <_ZN12FrontendHeapC1Ev+0x90>)
 800372a:	4413      	add	r3, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f7ff ff09 	bl	8003544 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bdb0      	pop	{r4, r5, r7, pc}
 800373c:	00022670 	.word	0x00022670
 8003740:	00022688 	.word	0x00022688
 8003744:	08025474 	.word	0x08025474
 8003748:	00022684 	.word	0x00022684

0800374c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	8bbb      	ldrh	r3, [r7, #28]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	8b3b      	ldrh	r3, [r7, #24]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	f7ff fe2b 	bl	80033c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800376e:	4a04      	ldr	r2, [pc, #16]	; (8003780 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]
    }
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	08025680 	.word	0x08025680

08003784 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	8bbb      	ldrh	r3, [r7, #28]
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	8b3b      	ldrh	r3, [r7, #24]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	f7ff ffd3 	bl	800374c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]
    }
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08025334 	.word	0x08025334

080037bc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	0802531c 	.word	0x0802531c

080037dc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ffe8 	bl	80037bc <_ZN8touchgfx15TouchControllerC1Ev>
 80037ec:	4a03      	ldr	r2, [pc, #12]	; (80037fc <_ZN20STM32TouchControllerC1Ev+0x20>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	08025304 	.word	0x08025304

08003800 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003806:	f000 ffed 	bl	80047e4 <_ZN14BitmapDatabase11getInstanceEv>
 800380a:	4604      	mov	r4, r0
 800380c:	f000 fff4 	bl	80047f8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003810:	4603      	mov	r3, r0
 8003812:	4619      	mov	r1, r3
 8003814:	2300      	movs	r3, #0
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2300      	movs	r3, #0
 800381a:	2200      	movs	r2, #0
 800381c:	4620      	mov	r0, r4
 800381e:	f015 fcdf 	bl	80191e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003822:	4809      	ldr	r0, [pc, #36]	; (8003848 <touchgfx_init+0x48>)
 8003824:	f7ff fb86 	bl	8002f34 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003828:	2000      	movs	r0, #0
 800382a:	f003 ffe5 	bl	80077f8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800382e:	4807      	ldr	r0, [pc, #28]	; (800384c <touchgfx_init+0x4c>)
 8003830:	f015 fc18 	bl	8019064 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003834:	f7ff feb6 	bl	80035a4 <_ZN12FrontendHeap11getInstanceEv>
 8003838:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800383a:	4805      	ldr	r0, [pc, #20]	; (8003850 <touchgfx_init+0x50>)
 800383c:	f7fe fdde 	bl	80023fc <_ZN11TouchGFXHAL10initializeEv>
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bd90      	pop	{r4, r7, pc}
 8003848:	20023598 	.word	0x20023598
 800384c:	20000008 	.word	0x20000008
 8003850:	2002359c 	.word	0x2002359c

08003854 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <touchgfx_taskEntry+0x10>)
 800385a:	f00e ff18 	bl	801268e <_ZN8touchgfx3HAL9taskEntryEv>
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2002359c 	.word	0x2002359c

08003868 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <_ZN12FrontendHeapD1Ev+0x50>)
 800387a:	4413      	add	r3, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fd35 	bl	80032ec <_ZN19FrontendApplicationD1Ev>
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <_ZN12FrontendHeapD1Ev+0x54>)
 8003886:	4413      	add	r3, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f82b 	bl	80038e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	332c      	adds	r3, #44	; 0x2c
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f848 	bl	8003928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3314      	adds	r3, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f867 	bl	8003970 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff feab 	bl	8003600 <_ZN16FrontendHeapBaseD1Ev>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	08025474 	.word	0x08025474
 80038b8:	00022688 	.word	0x00022688
 80038bc:	00022670 	.word	0x00022670

080038c0 <_ZN12FrontendHeapD0Ev>:
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ffcd 	bl	8003868 <_ZN12FrontendHeapD1Ev>
 80038ce:	4904      	ldr	r1, [pc, #16]	; (80038e0 <_ZN12FrontendHeapD0Ev+0x20>)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f01f fb90 	bl	8022ff6 <_ZdlPvj>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	000227e0 	.word	0x000227e0

080038e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	4a05      	ldr	r2, [pc, #20]	; (8003904 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f00e fc7f 	bl	80121f8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	08025488 	.word	0x08025488

08003908 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ffe7 	bl	80038e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003916:	2114      	movs	r1, #20
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f01f fb6c 	bl	8022ff6 <_ZdlPvj>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	4a05      	ldr	r2, [pc, #20]	; (8003948 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	f00e fc5d 	bl	80121f8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	080254bc 	.word	0x080254bc

0800394c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ffe7 	bl	8003928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f01f fb4a 	bl	8022ff6 <_ZdlPvj>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	00022644 	.word	0x00022644

08003970 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	4a05      	ldr	r2, [pc, #20]	; (8003990 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4618      	mov	r0, r3
 8003982:	f00e fc39 	bl	80121f8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	080254f0 	.word	0x080254f0

08003994 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ffe7 	bl	8003970 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80039a2:	2118      	movs	r1, #24
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f01f fb26 	bl	8022ff6 <_ZdlPvj>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fb87 	bl	80030d8 <_ZN8touchgfx3LCDD1Ev>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	080280e8 	.word	0x080280e8

080039d8 <_ZN8touchgfx8LCD24bppD0Ev>:
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ffe7 	bl	80039b4 <_ZN8touchgfx8LCD24bppD1Ev>
 80039e6:	2158      	movs	r1, #88	; 0x58
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f01f fb04 	bl	8022ff6 <_ZdlPvj>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_Z41__static_initialization_and_destruction_0ii>:
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b094      	sub	sp, #80	; 0x50
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 8129 	bne.w	8003c5c <_Z41__static_initialization_and_destruction_0ii+0x264>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a10:	4293      	cmp	r3, r2
 8003a12:	f040 8123 	bne.w	8003c5c <_Z41__static_initialization_and_destruction_0ii+0x264>
 8003a16:	2300      	movs	r3, #0
 8003a18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a28:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	461a      	mov	r2, r3
 8003a48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fa41 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8003a66:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8003a68:	bf00      	nop
 8003a6a:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8003a6c:	4b89      	ldr	r3, [pc, #548]	; (8003c94 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	23ff      	movs	r3, #255	; 0xff
 8003a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003a9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8003ab4:	f107 031c 	add.w	r3, r7, #28
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fa14 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8003ac2:	bf00      	nop
 8003ac4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8003ac6:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003ad0:	23ff      	movs	r3, #255	; 0xff
 8003ad2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003adc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003ae0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003ae4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ae8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8003aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003af0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003af4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	461a      	mov	r2, r3
 8003afc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	431a      	orrs	r2, r3
 8003b04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8003b0e:	f107 0318 	add.w	r3, r7, #24
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f9e7 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8003b1c:	bf00      	nop
 8003b1e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8003b20:	4b5e      	ldr	r3, [pc, #376]	; (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003b30:	23ff      	movs	r3, #255	; 0xff
 8003b32:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003b36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003b3a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8003b3e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003b46:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003b4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003b4e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	461a      	mov	r2, r3
 8003b56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f9ba 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8003b74:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8003b76:	bf00      	nop
 8003b78:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8003b7a:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	23f7      	movs	r3, #247	; 0xf7
 8003b80:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003b84:	234c      	movs	r3, #76	; 0x4c
 8003b86:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b90:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003b94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003b98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003b9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ba4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003ba8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff f98d 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8003bce:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8003bd0:	bf00      	nop
 8003bd2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8003bd4:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	23f7      	movs	r3, #247	; 0xf7
 8003bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003bde:	23d2      	movs	r3, #210	; 0xd2
 8003be0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003bea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003bf2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bfa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003bfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003c02:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	431a      	orrs	r2, r3
 8003c12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f960 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8003c28:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8003c2a:	bf00      	nop
 8003c2c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8003c30:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 8003c32:	481e      	ldr	r0, [pc, #120]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8003c34:	f7ff fdd2 	bl	80037dc <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8003c38:	481d      	ldr	r0, [pc, #116]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8003c3a:	f7fe fe4d 	bl	80028d8 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8003c3e:	481d      	ldr	r0, [pc, #116]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8003c40:	f017 fd30 	bl	801b6a4 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003c44:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8003c52:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8003c56:	4818      	ldr	r0, [pc, #96]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8003c58:	f7ff fd94 	bl	8003784 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <_Z41__static_initialization_and_destruction_0ii+0x292>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10e      	bne.n	8003c8a <_Z41__static_initialization_and_destruction_0ii+0x292>
 8003c6c:	4812      	ldr	r0, [pc, #72]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8003c6e:	f7fe fc57 	bl	8002520 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003c72:	4812      	ldr	r0, [pc, #72]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8003c74:	f000 f846 	bl	8003d04 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003c78:	480e      	ldr	r0, [pc, #56]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8003c7a:	f7ff fe9b 	bl	80039b4 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8003c7e:	480c      	ldr	r0, [pc, #48]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8003c80:	f7fe fe54 	bl	800292c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8003c84:	4809      	ldr	r0, [pc, #36]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8003c86:	f7fe fa1d 	bl	80020c4 <_ZN20STM32TouchControllerD1Ev>
}
 8003c8a:	bf00      	nop
 8003c8c:	3748      	adds	r7, #72	; 0x48
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000120 	.word	0x20000120
 8003c98:	20000124 	.word	0x20000124
 8003c9c:	20000128 	.word	0x20000128
 8003ca0:	2000012c 	.word	0x2000012c
 8003ca4:	20000130 	.word	0x20000130
 8003ca8:	20000134 	.word	0x20000134
 8003cac:	2002291c 	.word	0x2002291c
 8003cb0:	20022920 	.word	0x20022920
 8003cb4:	20023540 	.word	0x20023540
 8003cb8:	2002359c 	.word	0x2002359c
 8003cbc:	20000008 	.word	0x20000008

08003cc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fa3f 	bl	8003154 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	080255c0 	.word	0x080255c0

08003ce4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffe7 	bl	8003cc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f01f f97e 	bl	8022ff6 <_ZdlPvj>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 5; // swisop3_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_04 = 6; // swisop3_50_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff f91d 	bl	8002f54 <_ZN8touchgfx12FontProviderD1Ev>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	0802574c 	.word	0x0802574c

08003d28 <_ZN23ApplicationFontProviderD0Ev>:
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffe7 	bl	8003d04 <_ZN23ApplicationFontProviderD1Ev>
 8003d36:	2104      	movs	r1, #4
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f01f f95c 	bl	8022ff6 <_ZdlPvj>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003d50:	2301      	movs	r3, #1
    }
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003d66:	230c      	movs	r3, #12
    }
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
    }
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003da8:	887a      	ldrh	r2, [r7, #2]
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	3308      	adds	r3, #8
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4413      	add	r3, r2
    }
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003dcc:	2301      	movs	r3, #1
    }
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	0002263c 	.word	0x0002263c

08003df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
    }
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	0002263c 	.word	0x0002263c

08003e24 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	3308      	adds	r3, #8
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4413      	add	r3, r2
    }
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	0002263c 	.word	0x0002263c

08003e50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003e58:	2301      	movs	r3, #1
    }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003e6e:	2310      	movs	r3, #16
    }
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e88:	887b      	ldrh	r3, [r7, #2]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
    }
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	3308      	adds	r3, #8
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
    }
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68d2      	ldr	r2, [r2, #12]
 8003ed0:	1052      	asrs	r2, r2, #1
 8003ed2:	1899      	adds	r1, r3, r2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	e00a      	b.n	8003efc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	1052      	asrs	r2, r2, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	4413      	add	r3, r2
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4798      	blx	r3
    }
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003f30:	2300      	movs	r3, #0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003f3a:	2300      	movs	r3, #0
    }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_GLOBAL__sub_I_touchgfx_init>:
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f50:	2001      	movs	r0, #1
 8003f52:	f7ff fd51 	bl	80039f8 <_Z41__static_initialization_and_destruction_0ii>
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_GLOBAL__sub_D_touchgfx_init>:
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7ff fd49 	bl	80039f8 <_Z41__static_initialization_and_destruction_0ii>
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	331c      	adds	r3, #28
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
    }
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d105      	bne.n	8003fec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e027      	b.n	800403c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d123      	bne.n	800403a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d014      	beq.n	8004024 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3390      	adds	r3, #144	; 0x90
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800400e:	429a      	cmp	r2, r3
 8004010:	d008      	beq.n	8004024 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8004032:	2301      	movs	r3, #1
 8004034:	e002      	b.n	800403c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800403a:	2300      	movs	r3, #0
    }
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2005653a 	.word	0x2005653a

08004048 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <__NVIC_EnableIRQ>:
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db0b      	blt.n	800408e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	f003 021f 	and.w	r2, r3, #31
 800407c:	4907      	ldr	r1, [pc, #28]	; (800409c <__NVIC_EnableIRQ+0x38>)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2001      	movs	r0, #1
 8004086:	fa00 f202 	lsl.w	r2, r0, r2
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_DisableIRQ>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db12      	blt.n	80040d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	490a      	ldr	r1, [pc, #40]	; (80040e4 <__NVIC_DisableIRQ+0x44>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	3320      	adds	r3, #32
 80040c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040cc:	f3bf 8f4f 	dsb	sy
}
 80040d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040d2:	f3bf 8f6f 	isb	sy
}
 80040d6:	bf00      	nop
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	; (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <SCB_CleanInvalidateDCache+0x8c>)
 8004144:	2200      	movs	r2, #0
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800414a:	f3bf 8f4f 	dsb	sy
}
 800414e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <SCB_CleanInvalidateDCache+0x8c>)
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004160:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004174:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800417a:	4913      	ldr	r1, [pc, #76]	; (80041c8 <SCB_CleanInvalidateDCache+0x8c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	60ba      	str	r2, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d000      	beq.n	8004198 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8004196:	e7e9      	b.n	800416c <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e5a      	subs	r2, r3, #1
 800419c:	60fa      	str	r2, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d000      	beq.n	80041ae <SCB_CleanInvalidateDCache+0x72>
    do {
 80041ac:	e7d9      	b.n	8004162 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80041ae:	f3bf 8f4f 	dsb	sy
}
 80041b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041b4:	f3bf 8f6f 	isb	sy
}
 80041b8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80041cc:	b5b0      	push	{r4, r5, r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f00e fa47 	bl	801266a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80041dc:	687d      	ldr	r5, [r7, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	335c      	adds	r3, #92	; 0x5c
 80041e4:	681c      	ldr	r4, [r3, #0]
 80041e6:	f011 ff37 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4619      	mov	r1, r3
 80041ee:	4628      	mov	r0, r5
 80041f0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	490d      	ldr	r1, [pc, #52]	; (800422c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff26 	bl	8004048 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2101      	movs	r1, #1
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fee1 	bl	8003fc8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3380      	adds	r3, #128	; 0x80
 800420e:	681c      	ldr	r4, [r3, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	2200      	movs	r2, #0
 8004214:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004218:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff feb0 	bl	8003f84 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bdb0      	pop	{r4, r5, r7, pc}
 800422c:	08002681 	.word	0x08002681

08004230 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004238:	2109      	movs	r1, #9
 800423a:	205a      	movs	r0, #90	; 0x5a
 800423c:	f7ff ff54 	bl	80040e8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004240:	2109      	movs	r1, #9
 8004242:	2058      	movs	r0, #88	; 0x58
 8004244:	f7ff ff50 	bl	80040e8 <__NVIC_SetPriority>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004258:	205a      	movs	r0, #90	; 0x5a
 800425a:	f7ff ff03 	bl	8004064 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800425e:	2058      	movs	r0, #88	; 0x58
 8004260:	f7ff ff00 	bl	8004064 <__NVIC_EnableIRQ>
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004274:	205a      	movs	r0, #90	; 0x5a
 8004276:	f7ff ff13 	bl	80040a0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800427a:	2058      	movs	r0, #88	; 0x58
 800427c:	f7ff ff10 	bl	80040a0 <__NVIC_DisableIRQ>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80042a2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80042b6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80042ba:	881a      	ldrh	r2, [r3, #0]
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40016800 	.word	0x40016800
 80042dc:	20023630 	.word	0x20023630
 80042e0:	20023632 	.word	0x20023632

080042e4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f00e f9a2 	bl	8012638 <_ZN8touchgfx3HAL10beginFrameEv>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	f00e f9a1 	bl	8012650 <_ZN8touchgfx3HAL8endFrameEv>
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40016884 	.word	0x40016884

08004334 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800433e:	4a06      	ldr	r2, [pc, #24]	; (8004358 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004346:	2201      	movs	r2, #1
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40016884 	.word	0x40016884
 800435c:	40016800 	.word	0x40016800

08004360 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f00e f92f 	bl	80125d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800438a:	f7ff fed7 	bl	800413c <SCB_CleanInvalidateDCache>
    }
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	f00e fa76 	bl	80128a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80043b6:	4603      	mov	r3, r0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3301      	adds	r3, #1
 80043dc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80043de:	89fa      	ldrh	r2, [r7, #14]
 80043e0:	89bb      	ldrh	r3, [r7, #12]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d304      	bcc.n	80043f0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80043e6:	89fa      	ldrh	r2, [r7, #14]
 80043e8:	89bb      	ldrh	r3, [r7, #12]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	e000      	b.n	80043f2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40016800 	.word	0x40016800

08004404 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004422:	f7ff fe8b 	bl	800413c <SCB_CleanInvalidateDCache>
    }
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004452:	f7ff fe73 	bl	800413c <SCB_CleanInvalidateDCache>
    }
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_LTDC_LineEventCallback+0x74>)
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_LTDC_LineEventCallback+0x78>)
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	4293      	cmp	r3, r2
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d017      	beq.n	80044b2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_LTDC_LineEventCallback+0x7c>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f006 fe43 	bl	800b114 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800448e:	f7fe f9e9 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 8004492:	4603      	mov	r3, r0
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fd85 	bl	8003fa4 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800449a:	f7fe f8c9 	bl	8002630 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800449e:	f7fe f9e1 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f00e febd 	bl	8013224 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f7fd fe2c 	bl	8002108 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80044b0:	e00e      	b.n	80044d0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_LTDC_LineEventCallback+0x78>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f006 fe2b 	bl	800b114 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80044be:	2000      	movs	r0, #0
 80044c0:	f7fd fe2d 	bl	800211e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80044c4:	f7fe f9ce 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 80044c8:	4603      	mov	r3, r0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fd4c 	bl	8003f68 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40016800 	.word	0x40016800
 80044dc:	20023630 	.word	0x20023630
 80044e0:	20023632 	.word	0x20023632

080044e4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b092      	sub	sp, #72	; 0x48
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f040 8114 	bne.w	800471e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f040 810e 	bne.w	800471e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004508:	2300      	movs	r3, #0
 800450a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800450e:	2300      	movs	r3, #0
 8004510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004514:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800451c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004520:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004528:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800452c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	461a      	mov	r2, r3
 8004534:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	431a      	orrs	r2, r3
 800453c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004540:	4313      	orrs	r3, r2
 8004542:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004546:	f107 0320 	add.w	r3, r7, #32
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fccb 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8004552:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004554:	bf00      	nop
 8004556:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004558:	4b73      	ldr	r3, [pc, #460]	; (8004728 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	23ff      	movs	r3, #255	; 0xff
 800455e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004562:	2300      	movs	r3, #0
 8004564:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004568:	2300      	movs	r3, #0
 800456a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800456e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004572:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004582:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004586:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	461a      	mov	r2, r3
 800458e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	431a      	orrs	r2, r3
 8004596:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800459a:	4313      	orrs	r3, r2
 800459c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80045a0:	f107 031c 	add.w	r3, r7, #28
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fc9e 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80045ac:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80045ae:	bf00      	nop
 80045b0:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80045b2:	4b5e      	ldr	r3, [pc, #376]	; (800472c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80045bc:	23ff      	movs	r3, #255	; 0xff
 80045be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045d4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80045d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80045e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	461a      	mov	r2, r3
 80045e8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	431a      	orrs	r2, r3
 80045f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80045fa:	f107 0318 	add.w	r3, r7, #24
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fc71 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8004606:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004608:	bf00      	nop
 800460a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800460c:	4b48      	ldr	r3, [pc, #288]	; (8004730 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004616:	2300      	movs	r3, #0
 8004618:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800461c:	23ff      	movs	r3, #255	; 0xff
 800461e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004622:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004626:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800462a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800462e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004632:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004636:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800463a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	461a      	mov	r2, r3
 8004642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	431a      	orrs	r2, r3
 800464a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800464e:	4313      	orrs	r3, r2
 8004650:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fc44 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8004660:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004662:	bf00      	nop
 8004664:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	23f7      	movs	r3, #247	; 0xf7
 800466c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004670:	234c      	movs	r3, #76	; 0x4c
 8004672:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004676:	2302      	movs	r3, #2
 8004678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800467c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004680:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004684:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004688:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800468c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004690:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004694:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	461a      	mov	r2, r3
 800469c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	431a      	orrs	r2, r3
 80046a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80046ae:	f107 0310 	add.w	r3, r7, #16
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fc17 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80046ba:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80046bc:	bf00      	nop
 80046be:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	23f7      	movs	r3, #247	; 0xf7
 80046c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80046ca:	23d2      	movs	r3, #210	; 0xd2
 80046cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80046d0:	2302      	movs	r3, #2
 80046d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80046d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80046de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80046ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80046ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	461a      	mov	r2, r3
 80046f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	431a      	orrs	r2, r3
 80046fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004708:	f107 030c 	add.w	r3, r7, #12
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fbea 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8004714:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004716:	bf00      	nop
 8004718:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	bf00      	nop
 8004720:	3748      	adds	r7, #72	; 0x48
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20023618 	.word	0x20023618
 800472c:	2002361c 	.word	0x2002361c
 8004730:	20023620 	.word	0x20023620
 8004734:	20023624 	.word	0x20023624
 8004738:	20023628 	.word	0x20023628
 800473c:	2002362c 	.word	0x2002362c

08004740 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
 8004744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004748:	2001      	movs	r0, #1
 800474a:	f7ff fecb 	bl	80044e4 <_Z41__static_initialization_and_destruction_0ii>
 800474e:	bd80      	pop	{r7, pc}

08004750 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	2b07      	cmp	r3, #7
 8004760:	d83a      	bhi.n	80047d8 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	08004789 	.word	0x08004789
 800476c:	08004793 	.word	0x08004793
 8004770:	0800479d 	.word	0x0800479d
 8004774:	080047a7 	.word	0x080047a7
 8004778:	080047b1 	.word	0x080047b1
 800477c:	080047bb 	.word	0x080047bb
 8004780:	080047c5 	.word	0x080047c5
 8004784:	080047cf 	.word	0x080047cf
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004788:	f003 f8ae 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 800478c:	4603      	mov	r3, r0
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	e023      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8004792:	f003 f8a9 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 8004796:	4603      	mov	r3, r0
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	e01e      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800479c:	f003 f8a4 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 80047a0:	4603      	mov	r3, r0
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	e019      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80047a6:	f003 f89f 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 80047aa:	4603      	mov	r3, r0
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	e014      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80047b0:	f003 f89a 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 80047b4:	4603      	mov	r3, r0
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	e00f      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_02:
        // swisop3_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80047ba:	f003 f895 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 80047be:	4603      	mov	r3, r0
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	e00a      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_03:
        // swisop3_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80047c4:	f003 f890 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	e005      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80047ce:	f003 f88b 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 80047d2:	4603      	mov	r3, r0
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	e000      	b.n	80047da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 80047d8:	2300      	movs	r3, #0
    }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop

080047e4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80047e8:	4b02      	ldr	r3, [pc, #8]	; (80047f4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	08025758 	.word	0x08025758

080047f8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80047fc:	2301      	movs	r3, #1
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
    {
 8004810:	4a04      	ldr	r2, [pc, #16]	; (8004824 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
    }
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	08025920 	.word	0x08025920

08004828 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
    }
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ffe9 	bl	8004808 <_ZN8touchgfx4FontD1Ev>
 8004836:	2110      	movs	r1, #16
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f01e fbdc 	bl	8022ff6 <_ZdlPvj>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8004854:	887b      	ldrh	r3, [r7, #2]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800485a:	2300      	movs	r3, #0
 800485c:	e010      	b.n	8004880 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3308      	adds	r3, #8
 800486c:	681c      	ldr	r4, [r3, #0]
 800486e:	f107 030f 	add.w	r3, r7, #15
 8004872:	f107 0210 	add.w	r2, r7, #16
 8004876:	8879      	ldrh	r1, [r7, #2]
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	47a0      	blx	r4
 800487c:	6178      	str	r0, [r7, #20]
        return glyph;
 800487e:	697b      	ldr	r3, [r7, #20]
    }
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd90      	pop	{r4, r7, pc}

08004888 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	895b      	ldrh	r3, [r3, #10]
    }
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	899b      	ldrh	r3, [r3, #12]
    }
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	889b      	ldrh	r3, [r3, #4]
    }
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	889a      	ldrh	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	799b      	ldrb	r3, [r3, #6]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	b29b      	uxth	r3, r3
    }
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	79db      	ldrb	r3, [r3, #7]
 80048fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8004902:	b2db      	uxtb	r3, r3
    }
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	79db      	ldrb	r3, [r3, #7]
 800491c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004920:	b2db      	uxtb	r3, r3
    }
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	4a05      	ldr	r2, [pc, #20]	; (8004950 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff61 	bl	8004808 <_ZN8touchgfx4FontD1Ev>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	08027244 	.word	0x08027244

08004954 <_ZN8touchgfx9ConstFontD0Ev>:
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ffe7 	bl	8004930 <_ZN8touchgfx9ConstFontD1Ev>
 8004962:	2118      	movs	r1, #24
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f01e fb46 	bl	8022ff6 <_ZdlPvj>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	4a05      	ldr	r2, [pc, #20]	; (8004994 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ffd3 	bl	8004930 <_ZN8touchgfx9ConstFontD1Ev>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	080257cc 	.word	0x080257cc

08004998 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ffe7 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 80049a6:	2128      	movs	r1, #40	; 0x28
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f01e fb24 	bl	8022ff6 <_ZdlPvj>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    {
 80049c0:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
    }
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	08025774 	.word	0x08025774

080049d8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
    }
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ffe9 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
 80049e6:	2108      	movs	r1, #8
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f01e fb04 	bl	8022ff6 <_ZdlPvj>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	889a      	ldrh	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	809a      	strh	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	08025774 	.word	0x08025774

08004a24 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004a44:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	721a      	strb	r2, [r3, #8]
    {
    }
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	080257a8 	.word	0x080257a8

08004a68 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
    {
 8004a70:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
    }
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	080257a8 	.word	0x080257a8

08004a88 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    }
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ffe9 	bl	8004a68 <_ZN8touchgfx10TransitionD1Ev>
 8004a96:	210c      	movs	r1, #12
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f01e faac 	bl	8022ff6 <_ZdlPvj>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
    {
    }
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    {
    }
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
    {
    }
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8004aec:	f011 fab4 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 8004af0:	4603      	mov	r3, r0
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	3230      	adds	r2, #48	; 0x30
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	4790      	blx	r2
    }
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]
    }
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f011 fab6 	bl	801609c <_ZN8touchgfx11ApplicationC1Ev>
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004b4a:	6013      	str	r3, [r2, #0]
    }
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	080255d8 	.word	0x080255d8
 8004b5c:	200565a8 	.word	0x200565a8

08004b60 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]
    }
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	721a      	strb	r2, [r3, #8]
    }
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
    }
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004bc4:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd4:	e002      	b.n	8004bdc <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
    }
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	2005653c 	.word	0x2005653c

08004bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff ff90 	bl	8004b20 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004c00:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f89f 	bl	8004d50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004c22:	f7fd fe1f 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	3208      	adds	r2, #8
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004c34:	2000      	movs	r0, #0
 8004c36:	f002 fddf 	bl	80077f8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004c3a:	f7ff ffbb 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f017 fe10 	bl	801c866 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	0802557c 	.word	0x0802557c

08004c54 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ffe9 	bl	8004c54 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	3208      	adds	r2, #8
 8004c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c96:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	f107 0008 	add.w	r0, r7, #8
 8004cbe:	f107 0318 	add.w	r3, r7, #24
 8004cc2:	cb0c      	ldmia	r3, {r2, r3}
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	f000 f85f 	bl	8004d88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7ff ffcb 	bl	8004c6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fff0 	bl	8003cc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004cec:	bf00      	nop
 8004cee:	3724      	adds	r7, #36	; 0x24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd90      	pop	{r4, r7, pc}
 8004cf4:	08004cf9 	.word	0x08004cf9

08004cf8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8004d18:	4804      	ldr	r0, [pc, #16]	; (8004d2c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8004d1a:	f000 f867 	bl	8004dec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	2005659c 	.word	0x2005659c
 8004d2c:	20056598 	.word	0x20056598

08004d30 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	0802561c 	.word	0x0802561c

08004d50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ffe8 	bl	8004d30 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004d60:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	60da      	str	r2, [r3, #12]
    }
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	080255c0 	.word	0x080255c0

08004d88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4639      	mov	r1, r7
 8004d94:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ffc8 	bl	8004d30 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3308      	adds	r3, #8
 8004db0:	463a      	mov	r2, r7
 8004db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004db6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	080255c0 	.word	0x080255c0

08004dc8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fe32 	bl	8004a3c <_ZN8touchgfx10TransitionC1Ev>
 8004dd8:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	08025784 	.word	0x08025784

08004dec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b08f      	sub	sp, #60	; 0x3c
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3320      	adds	r3, #32
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4798      	blx	r3
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a80      	ldr	r2, [pc, #512]	; (8005010 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d805      	bhi.n	8004e20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004e14:	4b7f      	ldr	r3, [pc, #508]	; (8005014 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e16:	4a80      	ldr	r2, [pc, #512]	; (8005018 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e18:	21a3      	movs	r1, #163	; 0xa3
 8004e1a:	4880      	ldr	r0, [pc, #512]	; (800501c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e1c:	f01e f9f2 	bl	8023204 <__assert_func>
 8004e20:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3320      	adds	r3, #32
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d805      	bhi.n	8004e46 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004e3a:	4b79      	ldr	r3, [pc, #484]	; (8005020 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004e3c:	4a76      	ldr	r2, [pc, #472]	; (8005018 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e3e:	21a4      	movs	r1, #164	; 0xa4
 8004e40:	4876      	ldr	r0, [pc, #472]	; (800501c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e42:	f01e f9df 	bl	8023204 <__assert_func>
 8004e46:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3320      	adds	r3, #32
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4610      	mov	r0, r2
 8004e58:	4798      	blx	r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b0b      	cmp	r3, #11
 8004e5e:	d805      	bhi.n	8004e6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004e60:	4b70      	ldr	r3, [pc, #448]	; (8005024 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004e62:	4a6d      	ldr	r2, [pc, #436]	; (8005018 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e64:	21a5      	movs	r1, #165	; 0xa5
 8004e66:	486d      	ldr	r0, [pc, #436]	; (800501c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e68:	f01e f9cc 	bl	8023204 <__assert_func>
 8004e6c:	bf00      	nop
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004e7a:	f011 f8ed 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f011 f8ef 	bl	8016064 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
    if (*currentTrans)
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4798      	blx	r3
    if (*currentScreen)
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4798      	blx	r3
    if (*currentPresenter)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4798      	blx	r3
    if (*currentScreen)
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
    if (*currentPresenter)
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3308      	adds	r3, #8
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4798      	blx	r3
}
 8004f1e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f880 	bl	800502c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4619      	mov	r1, r3
 8004f30:	200c      	movs	r0, #12
 8004f32:	f7ff fd77 	bl	8004a24 <_ZnwjPv>
 8004f36:	4604      	mov	r4, r0
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7ff ff45 	bl	8004dc8 <_ZN8touchgfx12NoTransitionC1Ev>
 8004f3e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f883 	bl	8005052 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4835      	ldr	r0, [pc, #212]	; (8005028 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 8004f52:	f7ff fd67 	bl	8004a24 <_ZnwjPv>
 8004f56:	4604      	mov	r4, r0
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f003 f981 	bl	8008260 <_ZN11Screen1ViewC1Ev>
 8004f5e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f886 	bl	8005078 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4619      	mov	r1, r3
 8004f70:	2010      	movs	r0, #16
 8004f72:	f7ff fd57 	bl	8004a24 <_ZnwjPv>
 8004f76:	4604      	mov	r4, r0
 8004f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f002 ffe2 	bl	8007f44 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004f80:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f86:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f92:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	e000      	b.n	8004fa2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004fa6:	f7ff fddb 	bl	8004b60 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	3304      	adds	r3, #4
 8004fae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fdf0 	bl	8004b96 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f86f 	bl	800509e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69f8      	ldr	r0, [r7, #28]
 8004fd6:	4798      	blx	r3
    newPresenter->activate();
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69b8      	ldr	r0, [r7, #24]
 8004fe0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	69f8      	ldr	r0, [r7, #28]
 8004fe6:	f012 fd14 	bl	8017a12 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3310      	adds	r3, #16
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	4798      	blx	r3
    newTransition->invalidate();
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6978      	ldr	r0, [r7, #20]
 8005000:	4798      	blx	r3
}
 8005002:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005006:	4618      	mov	r0, r3
 8005008:	373c      	adds	r7, #60	; 0x3c
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	bf00      	nop
 8005010:	0002263b 	.word	0x0002263b
 8005014:	08024a50 	.word	0x08024a50
 8005018:	08024ae0 	.word	0x08024ae0
 800501c:	08024be4 	.word	0x08024be4
 8005020:	08024c2c 	.word	0x08024c2c
 8005024:	08024cd0 	.word	0x08024cd0
 8005028:	0002263c 	.word	0x0002263c

0800502c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	887a      	ldrh	r2, [r7, #2]
 8005042:	4611      	mov	r1, r2
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
 8005048:	4603      	mov	r3, r0
    }
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3324      	adds	r3, #36	; 0x24
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	4611      	mov	r1, r2
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
 800506e:	4603      	mov	r3, r0
    }
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3324      	adds	r3, #36	; 0x24
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	887a      	ldrh	r2, [r7, #2]
 800508e:	4611      	mov	r1, r2
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
 8005094:	4603      	mov	r3, r0
    }
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <_ZN8touchgfx12NoTransitionD1Ev>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	4a05      	ldr	r2, [pc, #20]	; (80050dc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fccb 	bl	8004a68 <_ZN8touchgfx10TransitionD1Ev>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	08025784 	.word	0x08025784

080050e0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffe7 	bl	80050bc <_ZN8touchgfx12NoTransitionD1Ev>
 80050ee:	210c      	movs	r1, #12
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f01d ff80 	bl	8022ff6 <_ZdlPvj>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_Z41__static_initialization_and_destruction_0ii>:
 8005100:	b580      	push	{r7, lr}
 8005102:	b092      	sub	sp, #72	; 0x48
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 8114 	bne.w	800533a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005118:	4293      	cmp	r3, r2
 800511a:	f040 810e 	bne.w	800533a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800511e:	2300      	movs	r3, #0
 8005120:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800512a:	2300      	movs	r3, #0
 800512c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005130:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005138:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800513c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005144:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	461a      	mov	r2, r3
 8005150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	431a      	orrs	r2, r3
 8005158:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800515c:	4313      	orrs	r3, r2
 800515e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005162:	f107 0320 	add.w	r3, r7, #32
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7fd febd 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800516e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8005170:	bf00      	nop
 8005172:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8005174:	4b73      	ldr	r3, [pc, #460]	; (8005344 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	23ff      	movs	r3, #255	; 0xff
 800517a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800517e:	2300      	movs	r3, #0
 8005180:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005184:	2300      	movs	r3, #0
 8005186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800518a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800518e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005192:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800519e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80051a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	461a      	mov	r2, r3
 80051aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	431a      	orrs	r2, r3
 80051b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80051bc:	f107 031c 	add.w	r3, r7, #28
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd fe90 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80051c8:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80051ca:	bf00      	nop
 80051cc:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80051ce:	4b5e      	ldr	r3, [pc, #376]	; (8005348 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80051d8:	23ff      	movs	r3, #255	; 0xff
 80051da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80051e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80051f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80051f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80051fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	461a      	mov	r2, r3
 8005204:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	431a      	orrs	r2, r3
 800520c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005210:	4313      	orrs	r3, r2
 8005212:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005216:	f107 0318 	add.w	r3, r7, #24
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f7fd fe63 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8005222:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8005224:	bf00      	nop
 8005226:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8005228:	4b48      	ldr	r3, [pc, #288]	; (800534c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005232:	2300      	movs	r3, #0
 8005234:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005238:	23ff      	movs	r3, #255	; 0xff
 800523a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800523e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005242:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005246:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800524a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800524e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005252:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005256:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	461a      	mov	r2, r3
 800525e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	431a      	orrs	r2, r3
 8005266:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800526a:	4313      	orrs	r3, r2
 800526c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd fe36 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800527c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800527e:	bf00      	nop
 8005280:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8005282:	4b33      	ldr	r3, [pc, #204]	; (8005350 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	23f7      	movs	r3, #247	; 0xf7
 8005288:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800528c:	234c      	movs	r3, #76	; 0x4c
 800528e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005292:	2302      	movs	r3, #2
 8005294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005298:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800529c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80052a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80052a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052ac:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80052b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	461a      	mov	r2, r3
 80052b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	431a      	orrs	r2, r3
 80052c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80052ca:	f107 0310 	add.w	r3, r7, #16
 80052ce:	4611      	mov	r1, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fd fe09 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80052d6:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80052d8:	bf00      	nop
 80052da:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	23f7      	movs	r3, #247	; 0xf7
 80052e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80052e6:	23d2      	movs	r3, #210	; 0xd2
 80052e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80052ec:	2302      	movs	r3, #2
 80052ee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80052f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80052fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005306:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800530a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	461a      	mov	r2, r3
 8005312:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	431a      	orrs	r2, r3
 800531a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800531e:	4313      	orrs	r3, r2
 8005320:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f7fd fddc 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8005330:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8005332:	bf00      	nop
 8005334:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	bf00      	nop
 800533c:	3748      	adds	r7, #72	; 0x48
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20023634 	.word	0x20023634
 8005348:	20023638 	.word	0x20023638
 800534c:	2002363c 	.word	0x2002363c
 8005350:	20023640 	.word	0x20023640
 8005354:	20023644 	.word	0x20023644
 8005358:	20023648 	.word	0x20023648

0800535c <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
 8005360:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005364:	2001      	movs	r0, #1
 8005366:	f7ff fecb 	bl	8005100 <_Z41__static_initialization_and_destruction_0ii>
 800536a:	bd80      	pop	{r7, pc}

0800536c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
    }
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800539c:	b580      	push	{r7, lr}
 800539e:	b08c      	sub	sp, #48	; 0x30
 80053a0:	af08      	add	r7, sp, #32
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	4611      	mov	r1, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	460b      	mov	r3, r1
 80053ac:	80fb      	strh	r3, [r7, #6]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	88b9      	ldrh	r1, [r7, #4]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053ba:	9306      	str	r3, [sp, #24]
 80053bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053be:	9305      	str	r3, [sp, #20]
 80053c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053ca:	9303      	str	r3, [sp, #12]
 80053cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	7f3b      	ldrb	r3, [r7, #28]
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	7e3b      	ldrb	r3, [r7, #24]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	460b      	mov	r3, r1
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	f011 fe71 	bl	80170c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80053e2:	4a0a      	ldr	r2, [pc, #40]	; (800540c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ec:	619a      	str	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f2:	61da      	str	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053f8:	621a      	str	r2, [r3, #32]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	080257cc 	.word	0x080257cc

08005410 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	889b      	ldrh	r3, [r3, #4]
 8005424:	0adb      	lsrs	r3, r3, #11
 8005426:	b29b      	uxth	r3, r3
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4413      	add	r3, r2
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005442:	b480      	push	{r7}
 8005444:	b089      	sub	sp, #36	; 0x24
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	460b      	mov	r3, r1
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	7b1b      	ldrb	r3, [r3, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800545e:	2300      	movs	r3, #0
 8005460:	e030      	b.n	80054c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	7b5b      	ldrb	r3, [r3, #13]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	b21b      	sxth	r3, r3
 8005472:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005476:	b219      	sxth	r1, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	7adb      	ldrb	r3, [r3, #11]
 800547c:	b21b      	sxth	r3, r3
 800547e:	430b      	orrs	r3, r1
 8005480:	b21b      	sxth	r3, r3
 8005482:	b29b      	uxth	r3, r3
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7b1b      	ldrb	r3, [r3, #12]
 800548e:	837b      	strh	r3, [r7, #26]
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d015      	beq.n	80054c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	897a      	ldrh	r2, [r7, #10]
 800549c:	429a      	cmp	r2, r3
 800549e:	d103      	bne.n	80054a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80054a6:	e00d      	b.n	80054c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	897a      	ldrh	r2, [r7, #10]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d306      	bcc.n	80054c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80054b2:	8b7b      	ldrh	r3, [r7, #26]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	837b      	strh	r3, [r7, #26]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3304      	adds	r3, #4
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e7e7      	b.n	8005490 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80054c0:	bf00      	nop
        }
    }
    return 0;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3724      	adds	r7, #36	; 0x24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80054d8:	4a14      	ldr	r2, [pc, #80]	; (800552c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fd fd0f 	bl	8002f06 <_ZN8touchgfx4RectC1Ev>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	330c      	adds	r3, #12
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fd fd0a 	bl	8002f06 <_ZN8touchgfx4RectC1Ev>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	615a      	str	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	619a      	str	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	61da      	str	r2, [r3, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	841a      	strh	r2, [r3, #32]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	080271e0 	.word	0x080271e0

08005530 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    {
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
    }
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	080271e0 	.word	0x080271e0

08005550 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
    }
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ffe9 	bl	8005530 <_ZN8touchgfx8DrawableD1Ev>
 800555e:	2128      	movs	r1, #40	; 0x28
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f01d fd48 	bl	8022ff6 <_ZdlPvj>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	809a      	strh	r2, [r3, #4]
    }
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	887a      	ldrh	r2, [r7, #2]
 800559e:	80da      	strh	r2, [r3, #6]
    }
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	811a      	strh	r2, [r3, #8]
    }
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	460b      	mov	r3, r1
 80055d4:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	887a      	ldrh	r2, [r7, #2]
 80055da:	815a      	strh	r2, [r3, #10]
    }
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
    {
    }
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
    {
    }
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
    {
    }
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
    {
    }
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
    {
    }
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	807b      	strh	r3, [r7, #2]
 800565e:	4613      	mov	r3, r2
 8005660:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3350      	adds	r3, #80	; 0x50
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	8879      	ldrh	r1, [r7, #2]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8005672:	b292      	uxth	r2, r2
 8005674:	1a8a      	subs	r2, r1, r2
 8005676:	b292      	uxth	r2, r2
 8005678:	b210      	sxth	r0, r2
 800567a:	8839      	ldrh	r1, [r7, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8005682:	b292      	uxth	r2, r2
 8005684:	1a8a      	subs	r2, r1, r2
 8005686:	b292      	uxth	r2, r2
 8005688:	b212      	sxth	r2, r2
 800568a:	4601      	mov	r1, r0
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
    }
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff ff14 	bl	80054d0 <_ZN8touchgfx8DrawableC1Ev>
 80056a8:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	08025ef8 	.word	0x08025ef8

080056c4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	4a05      	ldr	r2, [pc, #20]	; (80056fc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ff1f 	bl	8005530 <_ZN8touchgfx8DrawableD1Ev>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	08025ef8 	.word	0x08025ef8

08005700 <_ZN8touchgfx9ContainerD0Ev>:
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ffe7 	bl	80056dc <_ZN8touchgfx9ContainerD1Ev>
 800570e:	212c      	movs	r1, #44	; 0x2c
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f01d fc70 	bl	8022ff6 <_ZdlPvj>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
        return 0;
 8005728:	2300      	movs	r3, #0
    }
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	4608      	mov	r0, r1
 8005740:	4611      	mov	r1, r2
 8005742:	461a      	mov	r2, r3
 8005744:	4603      	mov	r3, r0
 8005746:	817b      	strh	r3, [r7, #10]
 8005748:	460b      	mov	r3, r1
 800574a:	813b      	strh	r3, [r7, #8]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8005750:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005754:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005758:	4619      	mov	r1, r3
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f80c 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005760:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005768:	4619      	mov	r1, r3
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f822 	bl	80057b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	803b      	strh	r3, [r7, #0]
        setX(x);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	332c      	adds	r3, #44	; 0x2c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005794:	4611      	mov	r1, r2
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
        setY(y);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3330      	adds	r3, #48	; 0x30
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057a6:	4611      	mov	r1, r2
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
    }
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3334      	adds	r3, #52	; 0x34
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057d0:	4611      	mov	r1, r2
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
        setHeight(height);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3338      	adds	r3, #56	; 0x38
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057e2:	4611      	mov	r1, r2
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
    }
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
        return visible;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
        return touchable;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005832:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005842:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff ffe1 	bl	8005824 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]
    }
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
    {
 8005880:	4a06      	ldr	r2, [pc, #24]	; (800589c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff26 	bl	80056dc <_ZN8touchgfx9ContainerD1Ev>
    }
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	080272d8 	.word	0x080272d8

080058a0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
    }
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ffe5 	bl	8005878 <_ZN8touchgfx6ScreenD1Ev>
 80058ae:	213c      	movs	r1, #60	; 0x3c
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f01d fba0 	bl	8022ff6 <_ZdlPvj>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
    {
    }
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
    {
    }
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
    {
    }
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
    {
    }
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f00c fcff 	bl	801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	817b      	strh	r3, [r7, #10]
 8005954:	4613      	mov	r3, r2
 8005956:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff ff48 	bl	80057f0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff ff4e 	bl	800580a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	601a      	str	r2, [r3, #0]
        }
    }
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fd9a 	bl	80054d0 <_ZN8touchgfx8DrawableC1Ev>
 800599c:	4a03      	ldr	r2, [pc, #12]	; (80059ac <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	080258a0 	.word	0x080258a0

080059b0 <_ZN8touchgfx6WidgetD1Ev>:
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fdb5 	bl	8005530 <_ZN8touchgfx8DrawableD1Ev>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	080258a0 	.word	0x080258a0

080059d4 <_ZN8touchgfx6WidgetD0Ev>:
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ffe7 	bl	80059b0 <_ZN8touchgfx6WidgetD1Ev>
 80059e2:	2128      	movs	r1, #40	; 0x28
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f01d fb06 	bl	8022ff6 <_ZdlPvj>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	2326      	movs	r3, #38	; 0x26
 8005a02:	461a      	mov	r2, r3
 8005a04:	2100      	movs	r1, #0
 8005a06:	f01d fc89 	bl	802331c <memset>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ffbd 	bl	800598c <_ZN8touchgfx6WidgetC1Ev>
 8005a12:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	22ff      	movs	r2, #255	; 0xff
 8005a1c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3328      	adds	r3, #40	; 0x28
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd fa5e 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	08026d94 	.word	0x08026d94

08005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005a64:	4a06      	ldr	r2, [pc, #24]	; (8005a80 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	809a      	strh	r2, [r3, #4]
    }
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	08025774 	.word	0x08025774

08005a84 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	2326      	movs	r3, #38	; 0x26
 8005a92:	461a      	mov	r2, r3
 8005a94:	2100      	movs	r1, #0
 8005a96:	f01d fc41 	bl	802331c <memset>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ff75 	bl	800598c <_ZN8touchgfx6WidgetC1Ev>
 8005aa2:	4a14      	ldr	r2, [pc, #80]	; (8005af4 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3328      	adds	r3, #40	; 0x28
 8005aac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ffd1 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3330      	adds	r3, #48	; 0x30
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fd fa13 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	869a      	strh	r2, [r3, #52]	; 0x34
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	22ff      	movs	r2, #255	; 0xff
 8005acc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	08026cec 	.word	0x08026cec

08005af8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3328      	adds	r3, #40	; 0x28
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe ff54 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff ff4c 	bl	80059b0 <_ZN8touchgfx6WidgetD1Ev>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08026cec 	.word	0x08026cec

08005b28 <_ZN8touchgfx8TextAreaD0Ev>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ffe1 	bl	8005af8 <_ZN8touchgfx8TextAreaD1Ev>
 8005b36:	213c      	movs	r1, #60	; 0x3c
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f01d fa5c 	bl	8022ff6 <_ZdlPvj>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ff96 	bl	8005a84 <_ZN8touchgfx8TextAreaC1Ev>
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08026df8 	.word	0x08026df8

08005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	809a      	strh	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	80da      	strh	r2, [r3, #6]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	721a      	strb	r2, [r3, #8]
    {
    }
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	0802588c 	.word	0x0802588c

08005bdc <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    {
 8005be4:	4a04      	ldr	r2, [pc, #16]	; (8005bf8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
    }
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	0802588c 	.word	0x0802588c

08005bfc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
    }
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffe9 	bl	8005bdc <_ZN8touchgfx15AbstractPainterD1Ev>
 8005c0a:	210c      	movs	r1, #12
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f01d f9f2 	bl	8022ff6 <_ZdlPvj>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
            : v(i)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	601a      	str	r2, [r3, #0]
        {
        }
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
        {
            return v;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
        }
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8005c52:	b590      	push	{r4, r7, lr}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3340      	adds	r3, #64	; 0x40
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ffea 	bl	8005c3a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8005c66:	4604      	mov	r4, r0
 8005c68:	463b      	mov	r3, r7
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff ffe5 	bl	8005c3a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8005c70:	4603      	mov	r3, r0
 8005c72:	429c      	cmp	r4, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f00d ff6c 	bl	8013b64 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8005c8c:	e000      	b.n	8005c90 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8005c8e:	bf00      	nop
    }
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd90      	pop	{r4, r7, pc}
	...

08005c98 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ff80 	bl	8005ba8 <_ZN8touchgfx15AbstractPainterC1Ev>
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8005cbe:	f7fe ff79 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	3224      	adds	r2, #36	; 0x24
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	4790      	blx	r2
 8005cce:	4603      	mov	r3, r0
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8005cde:	f7fc fdc1 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff53 	bl	8005b90 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf14      	ite	ne
 8005cf0:	2301      	movne	r3, #1
 8005cf2:	2300      	moveq	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01b      	beq.n	8005d32 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8005cfa:	f7fc fdb3 	bl	8002864 <_ZN8touchgfx3HAL11getInstanceEv>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff ff45 	bl	8005b90 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8005d06:	4603      	mov	r3, r0
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	3224      	adds	r2, #36	; 0x24
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4790      	blx	r2
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8005d3a:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8005d3c:	2128      	movs	r1, #40	; 0x28
 8005d3e:	4807      	ldr	r0, [pc, #28]	; (8005d5c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8005d40:	f01d fa60 	bl	8023204 <__assert_func>
 8005d44:	bf00      	nop
    }
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	08026880 	.word	0x08026880
 8005d54:	08024d74 	.word	0x08024d74
 8005d58:	08024dd4 	.word	0x08024dd4
 8005d5c:	08024e10 	.word	0x08024e10

08005d60 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff33 	bl	8005bdc <_ZN8touchgfx15AbstractPainterD1Ev>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	08026880 	.word	0x08026880

08005d84 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ffe7 	bl	8005d60 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8005d92:	2114      	movs	r1, #20
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f01d f92e 	bl	8022ff6 <_ZdlPvj>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff ff71 	bl	8005c98 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	751a      	strb	r2, [r3, #20]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	755a      	strb	r2, [r3, #21]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f807 	bl	8005de4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	080268a0 	.word	0x080268a0

08005de4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8005df2:	f107 0314 	add.w	r3, r7, #20
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fc fca6 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	751a      	strb	r2, [r3, #20]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8005e0a:	f107 0310 	add.w	r3, r7, #16
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc fc9a 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8005e14:	4603      	mov	r3, r0
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	755a      	strb	r2, [r3, #21]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8005e22:	f107 030c 	add.w	r3, r7, #12
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fc fc8e 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	759a      	strb	r2, [r3, #22]
    }
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <_ZN11tempBoxBaseD1Ev+0x40>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	33b8      	adds	r3, #184	; 0xb8
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fe52 	bl	8005af8 <_ZN8touchgfx8TextAreaD1Ev>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	33a0      	adds	r3, #160	; 0xa0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 f8c7 	bl	8006fec <_ZN8touchgfx13PainterRGB888D1Ev>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	332c      	adds	r3, #44	; 0x2c
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 f8a0 	bl	8006fa8 <_ZN8touchgfx4LineD1Ev>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fc36 	bl	80056dc <_ZN8touchgfx9ContainerD1Ev>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08025a00 	.word	0x08025a00

08005e80 <_ZN11tempBoxBaseD0Ev>:
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff ffd7 	bl	8005e3c <_ZN11tempBoxBaseD1Ev>
 8005e8e:	21f4      	movs	r1, #244	; 0xf4
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f01d f8b0 	bl	8022ff6 <_ZdlPvj>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <_ZN7tempBoxD1Ev+0x7c>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	f646 031c 	movw	r3, #26652	; 0x681c
 8005eb4:	4413      	add	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d011      	beq.n	8005ede <_ZN7tempBoxD1Ev+0x3e>
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	f646 031c 	movw	r3, #26652	; 0x681c
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	f646 031c 	movw	r3, #26652	; 0x681c
 8005ecc:	4413      	add	r3, r2
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d005      	beq.n	8005ede <_ZN7tempBoxD1Ev+0x3e>
 8005ed2:	3c18      	subs	r4, #24
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
 8005edc:	e7f3      	b.n	8005ec6 <_ZN7tempBoxD1Ev+0x26>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <_ZN7tempBoxD1Ev+0x6a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8005eee:	f246 34b0 	movw	r4, #25520	; 0x63b0
 8005ef2:	441c      	add	r4, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d005      	beq.n	8005f0a <_ZN7tempBoxD1Ev+0x6a>
 8005efe:	3c74      	subs	r4, #116	; 0x74
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4620      	mov	r0, r4
 8005f06:	4798      	blx	r3
 8005f08:	e7f4      	b.n	8005ef4 <_ZN7tempBoxD1Ev+0x54>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff95 	bl	8005e3c <_ZN11tempBoxBaseD1Ev>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	08025b9c 	.word	0x08025b9c

08005f20 <_ZN7tempBoxD0Ev>:
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ffb9 	bl	8005ea0 <_ZN7tempBoxD1Ev>
 8005f2e:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f01d f85f 	bl	8022ff6 <_ZdlPvj>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	4a05      	ldr	r2, [pc, #20]	; (8005f64 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fd2b 	bl	80059b0 <_ZN8touchgfx6WidgetD1Ev>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	08026d94 	.word	0x08026d94

08005f68 <_ZN8touchgfx3BoxD0Ev>:
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ffe7 	bl	8005f44 <_ZN8touchgfx3BoxD1Ev>
 8005f76:	212c      	movs	r1, #44	; 0x2c
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f01d f83c 	bl	8022ff6 <_ZdlPvj>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <_ZN12alertBarBaseD1Ev+0x34>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3360      	adds	r3, #96	; 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f86a 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	332c      	adds	r3, #44	; 0x2c
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 f843 	bl	8007030 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fb95 	bl	80056dc <_ZN8touchgfx9ContainerD1Ev>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	08025974 	.word	0x08025974

08005fc0 <_ZN12alertBarBaseD0Ev>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ffdd 	bl	8005f88 <_ZN12alertBarBaseD1Ev>
 8005fce:	21a0      	movs	r1, #160	; 0xa0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f01d f810 	bl	8022ff6 <_ZdlPvj>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	4a05      	ldr	r2, [pc, #20]	; (8006000 <_ZN8alertBarD1Ev+0x20>)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ffc9 	bl	8005f88 <_ZN12alertBarBaseD1Ev>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	08025b10 	.word	0x08025b10

08006004 <_ZN8alertBarD0Ev>:
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ffe7 	bl	8005fe0 <_ZN8alertBarD1Ev>
 8006012:	21d8      	movs	r1, #216	; 0xd8
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f01c ffee 	bl	8022ff6 <_ZdlPvj>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	4a05      	ldr	r2, [pc, #20]	; (8006044 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fc1f 	bl	8005878 <_ZN8touchgfx6ScreenD1Ev>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	08025858 	.word	0x08025858

08006048 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ffe7 	bl	8006024 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8006056:	2140      	movs	r1, #64	; 0x40
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f01c ffcc 	bl	8022ff6 <_ZdlPvj>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	4a31      	ldr	r2, [pc, #196]	; (8006138 <_ZN15Screen1ViewBaseD1Ev+0xd0>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4b30      	ldr	r3, [pc, #192]	; (800613c <_ZN15Screen1ViewBaseD1Ev+0xd4>)
 800607a:	4413      	add	r3, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fff9 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <_ZN15Screen1ViewBaseD1Ev+0xd8>)
 8006086:	4413      	add	r3, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ffa9 	bl	8005fe0 <_ZN8alertBarD1Ev>
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <_ZN15Screen1ViewBaseD1Ev+0xdc>)
 8006092:	4413      	add	r3, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ffa3 	bl	8005fe0 <_ZN8alertBarD1Ev>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <_ZN15Screen1ViewBaseD1Ev+0xe0>)
 800609e:	4413      	add	r3, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fefd 	bl	8005ea0 <_ZN7tempBoxD1Ev>
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80060ac:	4413      	add	r3, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fef6 	bl	8005ea0 <_ZN7tempBoxD1Ev>
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80060ba:	4413      	add	r3, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff feef 	bl	8005ea0 <_ZN7tempBoxD1Ev>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fee9 	bl	8005ea0 <_ZN7tempBoxD1Ev>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 ffcd 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 ffc7 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 ffc1 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 ff77 	bl	8006fec <_ZN8touchgfx13PainterRGB888D1Ev>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	33d8      	adds	r3, #216	; 0xd8
 8006102:	4618      	mov	r0, r3
 8006104:	f000 ff50 	bl	8006fa8 <_ZN8touchgfx4LineD1Ev>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3398      	adds	r3, #152	; 0x98
 800610c:	4618      	mov	r0, r3
 800610e:	f000 ffb1 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	336c      	adds	r3, #108	; 0x6c
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff ff14 	bl	8005f44 <_ZN8touchgfx3BoxD1Ev>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3340      	adds	r3, #64	; 0x40
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff0f 	bl	8005f44 <_ZN8touchgfx3BoxD1Ev>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff7b 	bl	8006024 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	08025824 	.word	0x08025824
 800613c:	0001f6c4 	.word	0x0001f6c4
 8006140:	0001f5ec 	.word	0x0001f5ec
 8006144:	0001f514 	.word	0x0001f514
 8006148:	00017858 	.word	0x00017858

0800614c <_ZN15Screen1ViewBaseD0Ev>:
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff87 	bl	8006068 <_ZN15Screen1ViewBaseD1Ev>
 800615a:	4904      	ldr	r1, [pc, #16]	; (800616c <_ZN15Screen1ViewBaseD0Ev+0x20>)
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f01c ff4a 	bl	8022ff6 <_ZdlPvj>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	00022638 	.word	0x00022638

08006170 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b0c3      	sub	sp, #268	; 0x10c
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fd4a 	bl	8006c14 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8006180:	4a96      	ldr	r2, [pc, #600]	; (80063dc <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3340      	adds	r3, #64	; 0x40
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fc32 	bl	80059f4 <_ZN8touchgfx3BoxC1Ev>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	336c      	adds	r3, #108	; 0x6c
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fc2d 	bl	80059f4 <_ZN8touchgfx3BoxC1Ev>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3398      	adds	r3, #152	; 0x98
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fcd2 	bl	8005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	33d8      	adds	r3, #216	; 0xd8
 80061a8:	4618      	mov	r0, r3
 80061aa:	f00d fcbb 	bl	8013b24 <_ZN8touchgfx4LineC1Ev>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80061b4:	f107 031c 	add.w	r3, r7, #28
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fc fe94 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80061c0:	69f9      	ldr	r1, [r7, #28]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7ff fdee 	bl	8005da4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fcba 	bl	8005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fcb4 	bl	8005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fcae 	bl	8005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80061f2:	4618      	mov	r0, r3
 80061f4:	f002 fecc 	bl	8008f90 <_ZN7tempBoxC1Ev>
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80061fe:	4413      	add	r3, r2
 8006200:	4618      	mov	r0, r3
 8006202:	f002 fec5 	bl	8008f90 <_ZN7tempBoxC1Ev>
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 800620c:	4413      	add	r3, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f002 febe 	bl	8008f90 <_ZN7tempBoxC1Ev>
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8006218:	4413      	add	r3, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f002 feb8 	bl	8008f90 <_ZN7tempBoxC1Ev>
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4b70      	ldr	r3, [pc, #448]	; (80063e4 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8006224:	4413      	add	r3, r2
 8006226:	4618      	mov	r0, r3
 8006228:	f002 fbc6 	bl	80089b8 <_ZN8alertBarC1Ev>
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4b6e      	ldr	r3, [pc, #440]	; (80063e8 <_ZN15Screen1ViewBaseC1Ev+0x278>)
 8006230:	4413      	add	r3, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f002 fbc0 	bl	80089b8 <_ZN8alertBarC1Ev>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <_ZN15Screen1ViewBaseC1Ev+0x27c>)
 800623c:	4413      	add	r3, r2
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fc82 	bl	8005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4b6a      	ldr	r3, [pc, #424]	; (80063f0 <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8006248:	4413      	add	r3, r2
 800624a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800624e:	4618      	mov	r0, r3
 8006250:	f00e f9ee 	bl	8014630 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800625a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006264:	2200      	movs	r2, #0
 8006266:	2100      	movs	r1, #0
 8006268:	f7ff fa65 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006284:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	461a      	mov	r2, r3
 800628c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	431a      	orrs	r2, r3
 8006294:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006298:	4313      	orrs	r3, r2
 800629a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800629e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fc fe1f 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80062aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062ae:	4619      	mov	r1, r3
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7ff fbc3 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80062bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	f240 3325 	movw	r3, #805	; 0x325
 80062c6:	2200      	movs	r2, #0
 80062c8:	2100      	movs	r1, #0
 80062ca:	f7ff fa34 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80062e6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80062ea:	041b      	lsls	r3, r3, #16
 80062ec:	461a      	mov	r2, r3
 80062ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	431a      	orrs	r2, r3
 80062f6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006300:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f7fc fdee 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800630c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006310:	4619      	mov	r1, r3
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fb92 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3398      	adds	r3, #152	; 0x98
 800631c:	223c      	movs	r2, #60	; 0x3c
 800631e:	f240 114b 	movw	r1, #331	; 0x14b
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fa28 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800632e:	23ff      	movs	r3, #255	; 0xff
 8006330:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8006334:	23ff      	movs	r3, #255	; 0xff
 8006336:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 800633a:	23ff      	movs	r3, #255	; 0xff
 800633c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8006340:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	461a      	mov	r2, r3
 8006348:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	431a      	orrs	r2, r3
 8006350:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8006354:	4313      	orrs	r3, r2
 8006356:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800635a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7fc fdc1 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636a:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 800636e:	61bb      	str	r3, [r7, #24]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8006370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006378:	bf00      	nop
    gearArea.setLinespacing(0);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3398      	adds	r3, #152	; 0x98
 800637e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006382:	2300      	movs	r3, #0
 8006384:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800638c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8006390:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006392:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4c17      	ldr	r4, [pc, #92]	; (80063f4 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 8006398:	441c      	add	r4, r3
 800639a:	f107 0320 	add.w	r3, r7, #32
 800639e:	210c      	movs	r1, #12
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fb59 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 80063a6:	f107 0320 	add.w	r3, r7, #32
 80063aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <_ZN15Screen1ViewBaseC1Ev+0x288>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <_ZN15Screen1ViewBaseC1Ev+0x252>
 80063b6:	4b11      	ldr	r3, [pc, #68]	; (80063fc <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 80063b8:	4a11      	ldr	r2, [pc, #68]	; (8006400 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 80063ba:	21ae      	movs	r1, #174	; 0xae
 80063bc:	4811      	ldr	r0, [pc, #68]	; (8006404 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 80063be:	f01c ff21 	bl	8023204 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80063c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063c6:	889a      	ldrh	r2, [r3, #4]
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <_ZN15Screen1ViewBaseC1Ev+0x298>)
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d31f      	bcc.n	8006410 <_ZN15Screen1ViewBaseC1Ev+0x2a0>
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 80063d2:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 80063d4:	21af      	movs	r1, #175	; 0xaf
 80063d6:	480b      	ldr	r0, [pc, #44]	; (8006404 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 80063d8:	f01c ff14 	bl	8023204 <__assert_func>
 80063dc:	08025824 	.word	0x08025824
 80063e0:	00017858 	.word	0x00017858
 80063e4:	0001f514 	.word	0x0001f514
 80063e8:	0001f5ec 	.word	0x0001f5ec
 80063ec:	0001f6c4 	.word	0x0001f6c4
 80063f0:	0001f758 	.word	0x0001f758
 80063f4:	0001f704 	.word	0x0001f704
 80063f8:	200565ac 	.word	0x200565ac
 80063fc:	08024e74 	.word	0x08024e74
 8006400:	08024eb8 	.word	0x08024eb8
 8006404:	08024ee8 	.word	0x08024ee8
 8006408:	200565b0 	.word	0x200565b0
 800640c:	08024f30 	.word	0x08024f30
    }
 8006410:	bf00      	nop
        return texts->getText(typedTextId);
 8006412:	4bc2      	ldr	r3, [pc, #776]	; (800671c <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006418:	4611      	mov	r1, r2
 800641a:	4618      	mov	r0, r3
 800641c:	f001 fa42 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 8006420:	4603      	mov	r3, r0
 8006422:	bf00      	nop
 8006424:	4abe      	ldr	r2, [pc, #760]	; (8006720 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 8006426:	2102      	movs	r1, #2
 8006428:	4620      	mov	r0, r4
 800642a:	f012 fe0d 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800642e:	f107 0320 	add.w	r3, r7, #32
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fac0 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4bb8      	ldr	r3, [pc, #736]	; (8006724 <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 8006442:	4413      	add	r3, r2
 8006444:	4619      	mov	r1, r3
 8006446:	f7ff fb95 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3398      	adds	r3, #152	; 0x98
 800644e:	4618      	mov	r0, r3
 8006450:	f00d ff16 	bl	8014280 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800645a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff faf9 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8006466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800646a:	4619      	mov	r1, r3
 800646c:	4620      	mov	r0, r4
 800646e:	f00d ff24 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fa9e 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8006482:	2314      	movs	r3, #20
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	2398      	movs	r3, #152	; 0x98
 8006488:	228c      	movs	r2, #140	; 0x8c
 800648a:	f240 1149 	movw	r1, #329	; 0x149
 800648e:	f7ff f952 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006498:	23ff      	movs	r3, #255	; 0xff
 800649a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 800649e:	23ff      	movs	r3, #255	; 0xff
 80064a0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80064a4:	23ff      	movs	r3, #255	; 0xff
 80064a6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80064aa:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	461a      	mov	r2, r3
 80064b2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	431a      	orrs	r2, r3
 80064ba:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80064c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc fd0c 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80064d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064d4:	4619      	mov	r1, r3
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7ff fc84 	bl	8005de4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f00d f93e 	bl	801376c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	33d8      	adds	r3, #216	; 0xd8
 80064f4:	2200      	movs	r2, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fba1 	bl	8006c40 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	33d8      	adds	r3, #216	; 0xd8
 8006502:	2200      	movs	r2, #0
 8006504:	2196      	movs	r1, #150	; 0x96
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fbc0 	bl	8006c8c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	33d8      	adds	r3, #216	; 0xd8
 8006510:	2104      	movs	r1, #4
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fbe0 	bl	8006cd8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	33d8      	adds	r3, #216	; 0xd8
 800651c:	2101      	movs	r1, #1
 800651e:	4618      	mov	r0, r3
 8006520:	f00d fc46 	bl	8013db0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 800652a:	2345      	movs	r3, #69	; 0x45
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	23d4      	movs	r3, #212	; 0xd4
 8006530:	2247      	movs	r2, #71	; 0x47
 8006532:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006536:	f7ff f8fe 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006540:	2300      	movs	r3, #0
 8006542:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006546:	2366      	movs	r3, #102	; 0x66
 8006548:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 800654c:	23ff      	movs	r3, #255	; 0xff
 800654e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8006552:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	461a      	mov	r2, r3
 800655a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	431a      	orrs	r2, r3
 8006562:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006566:	4313      	orrs	r3, r2
 8006568:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800656c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f7fc fcb8 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006578:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800657a:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 800657e:	617b      	str	r3, [r7, #20]
        this->color = color;
 8006580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006588:	bf00      	nop
    rpmArea.setLinespacing(0);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006594:	2300      	movs	r3, #0
 8006596:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 800659a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800659e:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80065a2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80065a4:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4c5f      	ldr	r4, [pc, #380]	; (8006728 <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 80065aa:	441c      	add	r4, r3
 80065ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065b0:	210b      	movs	r1, #11
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fa50 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 80065b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80065c0:	4b5a      	ldr	r3, [pc, #360]	; (800672c <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <_ZN15Screen1ViewBaseC1Ev+0x464>
 80065c8:	4b59      	ldr	r3, [pc, #356]	; (8006730 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80065ca:	4a5a      	ldr	r2, [pc, #360]	; (8006734 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80065cc:	21ae      	movs	r1, #174	; 0xae
 80065ce:	485a      	ldr	r0, [pc, #360]	; (8006738 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80065d0:	f01c fe18 	bl	8023204 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80065d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065d8:	889a      	ldrh	r2, [r3, #4]
 80065da:	4b58      	ldr	r3, [pc, #352]	; (800673c <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d305      	bcc.n	80065ee <_ZN15Screen1ViewBaseC1Ev+0x47e>
 80065e2:	4b57      	ldr	r3, [pc, #348]	; (8006740 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 80065e4:	4a53      	ldr	r2, [pc, #332]	; (8006734 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80065e6:	21af      	movs	r1, #175	; 0xaf
 80065e8:	4853      	ldr	r0, [pc, #332]	; (8006738 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80065ea:	f01c fe0b 	bl	8023204 <__assert_func>
    }
 80065ee:	bf00      	nop
        return texts->getText(typedTextId);
 80065f0:	4b4a      	ldr	r3, [pc, #296]	; (800671c <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f953 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 80065fe:	4603      	mov	r3, r0
 8006600:	bf00      	nop
 8006602:	4a47      	ldr	r2, [pc, #284]	; (8006720 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 8006604:	210a      	movs	r1, #10
 8006606:	4620      	mov	r0, r4
 8006608:	f012 fd1e 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800660c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe f9d1 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4b42      	ldr	r3, [pc, #264]	; (8006728 <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 8006620:	4413      	add	r3, r2
 8006622:	4619      	mov	r1, r3
 8006624:	f7ff faa6 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 800662e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006632:	2101      	movs	r1, #1
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fa0f 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 800663a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800663e:	4619      	mov	r1, r3
 8006640:	4620      	mov	r0, r4
 8006642:	f00d fe3a 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe f9b4 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 259, 49);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8006656:	2331      	movs	r3, #49	; 0x31
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f240 1303 	movw	r3, #259	; 0x103
 800665e:	2252      	movs	r2, #82	; 0x52
 8006660:	210e      	movs	r1, #14
 8006662:	f7ff f868 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 800666c:	23ff      	movs	r3, #255	; 0xff
 800666e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8006672:	23ff      	movs	r3, #255	; 0xff
 8006674:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8006678:	23ff      	movs	r3, #255	; 0xff
 800667a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 800667e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	461a      	mov	r2, r3
 8006686:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	431a      	orrs	r2, r3
 800668e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8006692:	4313      	orrs	r3, r2
 8006694:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006698:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fc fc22 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80066a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066a6:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80066aa:	613b      	str	r3, [r7, #16]
        this->color = color;
 80066ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80066b4:	bf00      	nop
    battArea.setLinespacing(0);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80066bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 80066c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066ca:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80066ce:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80066d0:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4c1b      	ldr	r4, [pc, #108]	; (8006744 <_ZN15Screen1ViewBaseC1Ev+0x5d4>)
 80066d6:	441c      	add	r4, r3
 80066d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066dc:	2108      	movs	r1, #8
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff f9ba 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 80066e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <_ZN15Screen1ViewBaseC1Ev+0x590>
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80066f6:	4a0f      	ldr	r2, [pc, #60]	; (8006734 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80066f8:	21ae      	movs	r1, #174	; 0xae
 80066fa:	480f      	ldr	r0, [pc, #60]	; (8006738 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80066fc:	f01c fd82 	bl	8023204 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006704:	889a      	ldrh	r2, [r3, #4]
 8006706:	4b0d      	ldr	r3, [pc, #52]	; (800673c <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d31c      	bcc.n	8006748 <_ZN15Screen1ViewBaseC1Ev+0x5d8>
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 8006710:	4a08      	ldr	r2, [pc, #32]	; (8006734 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006712:	21af      	movs	r1, #175	; 0xaf
 8006714:	4808      	ldr	r0, [pc, #32]	; (8006738 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006716:	f01c fd75 	bl	8023204 <__assert_func>
 800671a:	bf00      	nop
 800671c:	200565b8 	.word	0x200565b8
 8006720:	08024f84 	.word	0x08024f84
 8006724:	0001f704 	.word	0x0001f704
 8006728:	0001f708 	.word	0x0001f708
 800672c:	200565ac 	.word	0x200565ac
 8006730:	08024e74 	.word	0x08024e74
 8006734:	08024eb8 	.word	0x08024eb8
 8006738:	08024ee8 	.word	0x08024ee8
 800673c:	200565b0 	.word	0x200565b0
 8006740:	08024f30 	.word	0x08024f30
 8006744:	0001f71c 	.word	0x0001f71c
    }
 8006748:	bf00      	nop
        return texts->getText(typedTextId);
 800674a:	4bb1      	ldr	r3, [pc, #708]	; (8006a10 <_ZN15Screen1ViewBaseC1Ev+0x8a0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f8a5 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 800675a:	4603      	mov	r3, r0
 800675c:	bf00      	nop
 800675e:	4aad      	ldr	r2, [pc, #692]	; (8006a14 <_ZN15Screen1ViewBaseC1Ev+0x8a4>)
 8006760:	210a      	movs	r1, #10
 8006762:	4620      	mov	r0, r4
 8006764:	f012 fc70 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe f923 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4ba7      	ldr	r3, [pc, #668]	; (8006a18 <_ZN15Screen1ViewBaseC1Ev+0x8a8>)
 800677c:	4413      	add	r3, r2
 800677e:	4619      	mov	r1, r3
 8006780:	f7ff f9f8 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 800678a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800678e:	2102      	movs	r1, #2
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff f961 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8006796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800679a:	4619      	mov	r1, r3
 800679c:	4620      	mov	r0, r4
 800679e:	f00d fd8c 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80067a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe f906 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    tcsArea.setPosition(652, 82, 138, 49);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 80067b2:	2331      	movs	r3, #49	; 0x31
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	238a      	movs	r3, #138	; 0x8a
 80067b8:	2252      	movs	r2, #82	; 0x52
 80067ba:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80067be:	f7fe ffba 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    tcsArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80067c8:	23ff      	movs	r3, #255	; 0xff
 80067ca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80067ce:	23ff      	movs	r3, #255	; 0xff
 80067d0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80067d4:	23ff      	movs	r3, #255	; 0xff
 80067d6:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80067da:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80067de:	041b      	lsls	r3, r3, #16
 80067e0:	461a      	mov	r2, r3
 80067e2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	431a      	orrs	r2, r3
 80067ea:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80067f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fc fb74 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006802:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8006806:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8006808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006810:	bf00      	nop
    tcsArea.setLinespacing(0);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800681c:	2300      	movs	r3, #0
 800681e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        linespace = space;
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006826:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 800682a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800682c:	bf00      	nop
    Unicode::snprintf(tcsAreaBuffer, TCSAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID12).getText());
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4c7a      	ldr	r4, [pc, #488]	; (8006a1c <_ZN15Screen1ViewBaseC1Ev+0x8ac>)
 8006832:	441c      	add	r4, r3
 8006834:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006838:	210a      	movs	r1, #10
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff f90c 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8006840:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006844:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006848:	4b75      	ldr	r3, [pc, #468]	; (8006a20 <_ZN15Screen1ViewBaseC1Ev+0x8b0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <_ZN15Screen1ViewBaseC1Ev+0x6ec>
 8006850:	4b74      	ldr	r3, [pc, #464]	; (8006a24 <_ZN15Screen1ViewBaseC1Ev+0x8b4>)
 8006852:	4a75      	ldr	r2, [pc, #468]	; (8006a28 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8006854:	21ae      	movs	r1, #174	; 0xae
 8006856:	4875      	ldr	r0, [pc, #468]	; (8006a2c <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8006858:	f01c fcd4 	bl	8023204 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800685c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006860:	889a      	ldrh	r2, [r3, #4]
 8006862:	4b73      	ldr	r3, [pc, #460]	; (8006a30 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d305      	bcc.n	8006876 <_ZN15Screen1ViewBaseC1Ev+0x706>
 800686a:	4b72      	ldr	r3, [pc, #456]	; (8006a34 <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
 800686c:	4a6e      	ldr	r2, [pc, #440]	; (8006a28 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 800686e:	21af      	movs	r1, #175	; 0xaf
 8006870:	486e      	ldr	r0, [pc, #440]	; (8006a2c <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8006872:	f01c fcc7 	bl	8023204 <__assert_func>
    }
 8006876:	bf00      	nop
        return texts->getText(typedTextId);
 8006878:	4b65      	ldr	r3, [pc, #404]	; (8006a10 <_ZN15Screen1ViewBaseC1Ev+0x8a0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f001 f80e 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 8006888:	4603      	mov	r3, r0
 800688a:	bf00      	nop
 800688c:	4a61      	ldr	r2, [pc, #388]	; (8006a14 <_ZN15Screen1ViewBaseC1Ev+0x8a4>)
 800688e:	210a      	movs	r1, #10
 8006890:	4620      	mov	r0, r4
 8006892:	f012 fbd9 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe f88c 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
    tcsArea.setWildcard(tcsAreaBuffer);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4b5c      	ldr	r3, [pc, #368]	; (8006a1c <_ZN15Screen1ViewBaseC1Ev+0x8ac>)
 80068aa:	4413      	add	r3, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	f7ff f961 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tcsArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80068b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80068bc:	2103      	movs	r1, #3
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff f8ca 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 80068c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80068c8:	4619      	mov	r1, r3
 80068ca:	4620      	mov	r0, r4
 80068cc:	f00d fcf5 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80068d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe f86f 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80068e0:	22f8      	movs	r2, #248	; 0xf8
 80068e2:	210b      	movs	r1, #11
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe ff47 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80068f0:	4413      	add	r3, r2
 80068f2:	f240 1249 	movw	r2, #329	; 0x149
 80068f6:	210b      	movs	r1, #11
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe ff3d 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006904:	4413      	add	r3, r2
 8006906:	22f8      	movs	r2, #248	; 0xf8
 8006908:	f240 213a 	movw	r1, #570	; 0x23a
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe ff33 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <_ZN15Screen1ViewBaseC1Ev+0x8c8>)
 8006916:	4413      	add	r3, r2
 8006918:	f240 1249 	movw	r2, #329	; 0x149
 800691c:	f240 213a 	movw	r1, #570	; 0x23a
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe ff29 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4b44      	ldr	r3, [pc, #272]	; (8006a3c <_ZN15Screen1ViewBaseC1Ev+0x8cc>)
 800692a:	4413      	add	r3, r2
 800692c:	2200      	movs	r2, #0
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe ff21 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <_ZN15Screen1ViewBaseC1Ev+0x8d0>)
 800693a:	4413      	add	r3, r2
 800693c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006940:	2100      	movs	r1, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe ff18 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	483e      	ldr	r0, [pc, #248]	; (8006a44 <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 800694c:	4418      	add	r0, r3
 800694e:	2331      	movs	r3, #49	; 0x31
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	23ee      	movs	r3, #238	; 0xee
 8006954:	2296      	movs	r2, #150	; 0x96
 8006956:	210e      	movs	r1, #14
 8006958:	f7fe feed 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4c39      	ldr	r4, [pc, #228]	; (8006a44 <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8006960:	441c      	add	r4, r3
 8006962:	23ff      	movs	r3, #255	; 0xff
 8006964:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8006968:	23ff      	movs	r3, #255	; 0xff
 800696a:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 800696e:	23ff      	movs	r3, #255	; 0xff
 8006970:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 8006974:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	461a      	mov	r2, r3
 800697c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	431a      	orrs	r2, r3
 8006984:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006988:	4313      	orrs	r3, r2
 800698a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800698e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7fc faa7 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800699a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699c:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80069a0:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80069a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80069aa:	bf00      	nop
    cltArea.setLinespacing(0);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 80069b0:	4413      	add	r3, r2
 80069b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
        linespace = space;
 80069bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069c0:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 80069c4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80069c6:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4c1f      	ldr	r4, [pc, #124]	; (8006a48 <_ZN15Screen1ViewBaseC1Ev+0x8d8>)
 80069cc:	441c      	add	r4, r3
 80069ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80069d2:	2109      	movs	r1, #9
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff f83f 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 80069da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80069de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <_ZN15Screen1ViewBaseC1Ev+0x8b0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <_ZN15Screen1ViewBaseC1Ev+0x886>
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <_ZN15Screen1ViewBaseC1Ev+0x8b4>)
 80069ec:	4a0e      	ldr	r2, [pc, #56]	; (8006a28 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80069ee:	21ae      	movs	r1, #174	; 0xae
 80069f0:	480e      	ldr	r0, [pc, #56]	; (8006a2c <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80069f2:	f01c fc07 	bl	8023204 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80069f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fa:	889a      	ldrh	r2, [r3, #4]
 80069fc:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d323      	bcc.n	8006a4c <_ZN15Screen1ViewBaseC1Ev+0x8dc>
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
 8006a06:	4a08      	ldr	r2, [pc, #32]	; (8006a28 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8006a08:	21af      	movs	r1, #175	; 0xaf
 8006a0a:	4808      	ldr	r0, [pc, #32]	; (8006a2c <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8006a0c:	f01c fbfa 	bl	8023204 <__assert_func>
 8006a10:	200565b8 	.word	0x200565b8
 8006a14:	08024f84 	.word	0x08024f84
 8006a18:	0001f71c 	.word	0x0001f71c
 8006a1c:	0001f730 	.word	0x0001f730
 8006a20:	200565ac 	.word	0x200565ac
 8006a24:	08024e74 	.word	0x08024e74
 8006a28:	08024eb8 	.word	0x08024eb8
 8006a2c:	08024ee8 	.word	0x08024ee8
 8006a30:	200565b0 	.word	0x200565b0
 8006a34:	08024f30 	.word	0x08024f30
 8006a38:	00017858 	.word	0x00017858
 8006a3c:	0001f514 	.word	0x0001f514
 8006a40:	0001f5ec 	.word	0x0001f5ec
 8006a44:	0001f6c4 	.word	0x0001f6c4
 8006a48:	0001f744 	.word	0x0001f744
    }
 8006a4c:	bf00      	nop
        return texts->getText(typedTextId);
 8006a4e:	4b50      	ldr	r3, [pc, #320]	; (8006b90 <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ff23 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	bf00      	nop
 8006a62:	4a4c      	ldr	r2, [pc, #304]	; (8006b94 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8006a64:	210a      	movs	r1, #10
 8006a66:	4620      	mov	r0, r4
 8006a68:	f012 faee 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006a6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fd ffa1 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8006a7a:	4413      	add	r3, r2
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	4a47      	ldr	r2, [pc, #284]	; (8006b9c <_ZN15Screen1ViewBaseC1Ev+0xa2c>)
 8006a80:	440a      	add	r2, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff f875 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4c42      	ldr	r4, [pc, #264]	; (8006b98 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8006a8e:	441c      	add	r4, r3
 8006a90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a94:	2107      	movs	r1, #7
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe ffde 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8006a9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f00d fc09 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006aa8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fd ff83 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3340      	adds	r3, #64	; 0x40
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe ff34 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	336c      	adds	r3, #108	; 0x6c
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fe ff2d 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3398      	adds	r3, #152	; 0x98
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe ff26 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	33d8      	adds	r3, #216	; 0xd8
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7fe ff1f 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f7fe ff17 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fe ff0f 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tcsArea);
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7fe ff07 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7fe feff 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8006b32:	4413      	add	r3, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7fe fef7 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006b42:	4413      	add	r3, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7fe feef 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	4b14      	ldr	r3, [pc, #80]	; (8006ba0 <_ZN15Screen1ViewBaseC1Ev+0xa30>)
 8006b50:	4413      	add	r3, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	f7fe fee8 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <_ZN15Screen1ViewBaseC1Ev+0xa34>)
 8006b5e:	4413      	add	r3, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fe fee1 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <_ZN15Screen1ViewBaseC1Ev+0xa38>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f7fe feda 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f7fe fed3 	bl	8005928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd90      	pop	{r4, r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200565b8 	.word	0x200565b8
 8006b94:	08024f84 	.word	0x08024f84
 8006b98:	0001f6c4 	.word	0x0001f6c4
 8006b9c:	0001f744 	.word	0x0001f744
 8006ba0:	00017858 	.word	0x00017858
 8006ba4:	0001f514 	.word	0x0001f514
 8006ba8:	0001f5ec 	.word	0x0001f5ec

08006bac <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f002 fadc 	bl	8009178 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8006bc6:	4413      	add	r3, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f002 fad5 	bl	8009178 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 face 	bl	8009178 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <_ZN15Screen1ViewBase11setupScreenEv+0x5c>)
 8006be0:	4413      	add	r3, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f002 fac8 	bl	8009178 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <_ZN15Screen1ViewBase11setupScreenEv+0x60>)
 8006bec:	4413      	add	r3, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 ff10 	bl	8008a14 <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <_ZN15Screen1ViewBase11setupScreenEv+0x64>)
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 ff0a 	bl	8008a14 <_ZN8alertBar10initializeEv>
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	00017858 	.word	0x00017858
 8006c0c:	0001f514 	.word	0x0001f514
 8006c10:	0001f5ec 	.word	0x0001f5ec

08006c14 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f010 fd7a 	bl	8017718 <_ZN8touchgfx6ScreenC1Ev>
 8006c24:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08025858 	.word	0x08025858

08006c40 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe ffde 	bl	8005c1c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	461c      	mov	r4, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	f107 0310 	add.w	r3, r7, #16
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe ffd2 	bl	8005c1c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8006c78:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f00d f880 	bl	8013d84 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8006c84:	bf00      	nop
 8006c86:	3724      	adds	r7, #36	; 0x24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}

08006c8c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b089      	sub	sp, #36	; 0x24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe ffb8 	bl	8005c1c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	461c      	mov	r4, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	f107 0310 	add.w	r3, r7, #16
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe ffac 	bl	8005c1c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8006cc4:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	4621      	mov	r1, r4
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f00d f865 	bl	8013d9a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8006cd0:	bf00      	nop
 8006cd2:	3724      	adds	r7, #36	; 0x24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd90      	pop	{r4, r7, pc}

08006cd8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe ff93 	bl	8005c1c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fe ffa9 	bl	8005c52 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <_Z41__static_initialization_and_destruction_0ii>:
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b092      	sub	sp, #72	; 0x48
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 8114 	bne.w	8006f42 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d20:	4293      	cmp	r3, r2
 8006d22:	f040 810e 	bne.w	8006f42 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006d26:	2300      	movs	r3, #0
 8006d28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006d3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8006d50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d54:	041b      	lsls	r3, r3, #16
 8006d56:	461a      	mov	r2, r3
 8006d58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d6a:	f107 0320 	add.w	r3, r7, #32
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fc f8b9 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006d76:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8006d78:	bf00      	nop
 8006d7a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8006d7c:	4b73      	ldr	r3, [pc, #460]	; (8006f4c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	23ff      	movs	r3, #255	; 0xff
 8006d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d86:	2300      	movs	r3, #0
 8006d88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006d9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006da6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006daa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	461a      	mov	r2, r3
 8006db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	431a      	orrs	r2, r3
 8006dba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006dc4:	f107 031c 	add.w	r3, r7, #28
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fc f88c 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006dd0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8006dd2:	bf00      	nop
 8006dd4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8006dd6:	4b5e      	ldr	r3, [pc, #376]	; (8006f50 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006de0:	23ff      	movs	r3, #255	; 0xff
 8006de2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006de6:	2300      	movs	r3, #0
 8006de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006df0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006df4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006df8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006e04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	431a      	orrs	r2, r3
 8006e14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc f85f 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8006e2c:	bf00      	nop
 8006e2e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8006e30:	4b48      	ldr	r3, [pc, #288]	; (8006f54 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006e40:	23ff      	movs	r3, #255	; 0xff
 8006e42:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8006e46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006e4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8006e4e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006e56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006e5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006e5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	461a      	mov	r2, r3
 8006e66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e78:	f107 0314 	add.w	r3, r7, #20
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fc f832 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006e84:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8006e86:	bf00      	nop
 8006e88:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8006e8a:	4b33      	ldr	r3, [pc, #204]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	23f7      	movs	r3, #247	; 0xf7
 8006e90:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006e94:	234c      	movs	r3, #76	; 0x4c
 8006e96:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006ea0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006ea4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006ea8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006eac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006eb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006eb4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006eb8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006ed2:	f107 0310 	add.w	r3, r7, #16
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fc f805 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006ede:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8006ee0:	bf00      	nop
 8006ee2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	23f7      	movs	r3, #247	; 0xf7
 8006eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006eee:	23d2      	movs	r3, #210	; 0xd2
 8006ef0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006efe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8006f02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006f0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006f12:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	431a      	orrs	r2, r3
 8006f22:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fb ffd8 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8006f38:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8006f3a:	bf00      	nop
 8006f3c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	bf00      	nop
 8006f44:	3748      	adds	r7, #72	; 0x48
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2002364c 	.word	0x2002364c
 8006f50:	20023650 	.word	0x20023650
 8006f54:	20023654 	.word	0x20023654
 8006f58:	20023658 	.word	0x20023658
 8006f5c:	2002365c 	.word	0x2002365c
 8006f60:	20023660 	.word	0x20023660

08006f64 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	4a05      	ldr	r2, [pc, #20]	; (8006f84 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fd1b 	bl	80059b0 <_ZN8touchgfx6WidgetD1Ev>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	08026924 	.word	0x08026924

08006f88 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ffe7 	bl	8006f64 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8006f96:	2130      	movs	r1, #48	; 0x30
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f01c f82c 	bl	8022ff6 <_ZdlPvj>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	4a05      	ldr	r2, [pc, #20]	; (8006fc8 <_ZN8touchgfx4LineD1Ev+0x20>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ffd3 	bl	8006f64 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	08026b48 	.word	0x08026b48

08006fcc <_ZN8touchgfx4LineD0Ev>:
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ffe7 	bl	8006fa8 <_ZN8touchgfx4LineD1Ev>
 8006fda:	2174      	movs	r1, #116	; 0x74
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f01c f80a 	bl	8022ff6 <_ZdlPvj>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	4a05      	ldr	r2, [pc, #20]	; (800700c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe feaf 	bl	8005d60 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	080268a0 	.word	0x080268a0

08007010 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ffe7 	bl	8006fec <_ZN8touchgfx13PainterRGB888D1Ev>
 800701e:	2118      	movs	r1, #24
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f01b ffe8 	bl	8022ff6 <_ZdlPvj>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	4a05      	ldr	r2, [pc, #20]	; (8007050 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe ff7f 	bl	8005f44 <_ZN8touchgfx3BoxD1Ev>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	08026ea0 	.word	0x08026ea0

08007054 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff ffe7 	bl	8007030 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8007062:	2134      	movs	r1, #52	; 0x34
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f01b ffc6 	bl	8022ff6 <_ZdlPvj>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	4a05      	ldr	r2, [pc, #20]	; (8007094 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe fd37 	bl	8005af8 <_ZN8touchgfx8TextAreaD1Ev>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	08026df8 	.word	0x08026df8

08007098 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ffe7 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80070a6:	2140      	movs	r1, #64	; 0x40
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f01b ffa4 	bl	8022ff6 <_ZdlPvj>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <_GLOBAL__sub_I__ZN15Screen1ViewBaseC2Ev>:
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070c0:	2001      	movs	r0, #1
 80070c2:	f7ff fe21 	bl	8006d08 <_Z41__static_initialization_and_destruction_0ii>
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__tcf_0+0xc>)
 80070ce:	f7fd fc51 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20023664 	.word	0x20023664

080070d8 <_Z24getFont_swisop3_300_4bppv>:
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08c      	sub	sp, #48	; 0x30
 80070dc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80070de:	4b20      	ldr	r3, [pc, #128]	; (8007160 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f3bf 8f5b 	dmb	ish
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02d      	beq.n	8007156 <_Z24getFont_swisop3_300_4bppv+0x7e>
 80070fa:	4819      	ldr	r0, [pc, #100]	; (8007160 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80070fc:	f01b ff7d 	bl	8022ffa <__cxa_guard_acquire>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d022      	beq.n	8007156 <_Z24getFont_swisop3_300_4bppv+0x7e>
 8007110:	2300      	movs	r3, #0
 8007112:	930a      	str	r3, [sp, #40]	; 0x28
 8007114:	2300      	movs	r3, #0
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	2300      	movs	r3, #0
 800711a:	9308      	str	r3, [sp, #32]
 800711c:	233f      	movs	r3, #63	; 0x3f
 800711e:	9307      	str	r3, [sp, #28]
 8007120:	4b10      	ldr	r3, [pc, #64]	; (8007164 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 8007122:	9306      	str	r3, [sp, #24]
 8007124:	4b10      	ldr	r3, [pc, #64]	; (8007168 <_Z24getFont_swisop3_300_4bppv+0x90>)
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	2300      	movs	r3, #0
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	2300      	movs	r3, #0
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	2301      	movs	r3, #1
 8007132:	9302      	str	r3, [sp, #8]
 8007134:	2304      	movs	r3, #4
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	233b      	movs	r3, #59	; 0x3b
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007140:	223f      	movs	r2, #63	; 0x3f
 8007142:	490a      	ldr	r1, [pc, #40]	; (800716c <_Z24getFont_swisop3_300_4bppv+0x94>)
 8007144:	480a      	ldr	r0, [pc, #40]	; (8007170 <_Z24getFont_swisop3_300_4bppv+0x98>)
 8007146:	f7fe f929 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800714a:	4805      	ldr	r0, [pc, #20]	; (8007160 <_Z24getFont_swisop3_300_4bppv+0x88>)
 800714c:	f01b ff61 	bl	8023012 <__cxa_guard_release>
 8007150:	4808      	ldr	r0, [pc, #32]	; (8007174 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 8007152:	f01c f875 	bl	8023240 <atexit>
    return swisop3_300_4bpp;
 8007156:	4b06      	ldr	r3, [pc, #24]	; (8007170 <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	2002368c 	.word	0x2002368c
 8007164:	080cdca4 	.word	0x080cdca4
 8007168:	080258fc 	.word	0x080258fc
 800716c:	080ccafc 	.word	0x080ccafc
 8007170:	20023664 	.word	0x20023664
 8007174:	080070c9 	.word	0x080070c9

08007178 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_40_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_40_4bpp()
{
    static touchgfx::GeneratedFont swisop3_40_4bpp(glyphs_swisop3_40_4bpp, 66, 40, 8, 4, 1, 0, 0, unicodes_swisop3_40_4bpp, kerning_swisop3_40_4bpp, 63, 0, 0, 0);
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__tcf_0+0xc>)
 800717e:	f7fd fbf9 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20023690 	.word	0x20023690

08007188 <_Z23getFont_swisop3_40_4bppv>:
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08c      	sub	sp, #48	; 0x30
 800718c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_40_4bpp(glyphs_swisop3_40_4bpp, 66, 40, 8, 4, 1, 0, 0, unicodes_swisop3_40_4bpp, kerning_swisop3_40_4bpp, 63, 0, 0, 0);
 800718e:	4b1f      	ldr	r3, [pc, #124]	; (800720c <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	f3bf 8f5b 	dmb	ish
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf0c      	ite	eq
 80071a0:	2301      	moveq	r3, #1
 80071a2:	2300      	movne	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d02c      	beq.n	8007204 <_Z23getFont_swisop3_40_4bppv+0x7c>
 80071aa:	4818      	ldr	r0, [pc, #96]	; (800720c <_Z23getFont_swisop3_40_4bppv+0x84>)
 80071ac:	f01b ff25 	bl	8022ffa <__cxa_guard_acquire>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d021      	beq.n	8007204 <_Z23getFont_swisop3_40_4bppv+0x7c>
 80071c0:	2300      	movs	r3, #0
 80071c2:	930a      	str	r3, [sp, #40]	; 0x28
 80071c4:	2300      	movs	r3, #0
 80071c6:	9309      	str	r3, [sp, #36]	; 0x24
 80071c8:	2300      	movs	r3, #0
 80071ca:	9308      	str	r3, [sp, #32]
 80071cc:	233f      	movs	r3, #63	; 0x3f
 80071ce:	9307      	str	r3, [sp, #28]
 80071d0:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <_Z23getFont_swisop3_40_4bppv+0x88>)
 80071d2:	9306      	str	r3, [sp, #24]
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <_Z23getFont_swisop3_40_4bppv+0x8c>)
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	2300      	movs	r3, #0
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	2300      	movs	r3, #0
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	2301      	movs	r3, #1
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	2304      	movs	r3, #4
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	2308      	movs	r3, #8
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2328      	movs	r3, #40	; 0x28
 80071ee:	2242      	movs	r2, #66	; 0x42
 80071f0:	4909      	ldr	r1, [pc, #36]	; (8007218 <_Z23getFont_swisop3_40_4bppv+0x90>)
 80071f2:	480a      	ldr	r0, [pc, #40]	; (800721c <_Z23getFont_swisop3_40_4bppv+0x94>)
 80071f4:	f7fe f8d2 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80071f8:	4804      	ldr	r0, [pc, #16]	; (800720c <_Z23getFont_swisop3_40_4bppv+0x84>)
 80071fa:	f01b ff0a 	bl	8023012 <__cxa_guard_release>
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <_Z23getFont_swisop3_40_4bppv+0x98>)
 8007200:	f01c f81e 	bl	8023240 <atexit>
    return swisop3_40_4bpp;
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <_Z23getFont_swisop3_40_4bppv+0x94>)
}
 8007206:	4618      	mov	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200236b8 	.word	0x200236b8
 8007210:	080cdca8 	.word	0x080cdca8
 8007214:	08025900 	.word	0x08025900
 8007218:	080cce70 	.word	0x080cce70
 800721c:	20023690 	.word	0x20023690
 8007220:	08007179 	.word	0x08007179

08007224 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__tcf_0+0xc>)
 800722a:	f7fd fba3 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 800722e:	bd80      	pop	{r7, pc}
 8007230:	200236bc 	.word	0x200236bc

08007234 <_Z23getFont_swisop3_50_4bppv>:
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	; 0x30
 8007238:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f3bf 8f5b 	dmb	ish
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d02c      	beq.n	80072b0 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8007256:	4818      	ldr	r0, [pc, #96]	; (80072b8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007258:	f01b fecf 	bl	8022ffa <__cxa_guard_acquire>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	bf14      	ite	ne
 8007262:	2301      	movne	r3, #1
 8007264:	2300      	moveq	r3, #0
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d021      	beq.n	80072b0 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800726c:	2300      	movs	r3, #0
 800726e:	930a      	str	r3, [sp, #40]	; 0x28
 8007270:	2300      	movs	r3, #0
 8007272:	9309      	str	r3, [sp, #36]	; 0x24
 8007274:	2300      	movs	r3, #0
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	233f      	movs	r3, #63	; 0x3f
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <_Z23getFont_swisop3_50_4bppv+0x88>)
 800727e:	9306      	str	r3, [sp, #24]
 8007280:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	2300      	movs	r3, #0
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	2300      	movs	r3, #0
 800728a:	9303      	str	r3, [sp, #12]
 800728c:	2301      	movs	r3, #1
 800728e:	9302      	str	r3, [sp, #8]
 8007290:	2304      	movs	r3, #4
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	230a      	movs	r3, #10
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2332      	movs	r3, #50	; 0x32
 800729a:	2241      	movs	r2, #65	; 0x41
 800729c:	4909      	ldr	r1, [pc, #36]	; (80072c4 <_Z23getFont_swisop3_50_4bppv+0x90>)
 800729e:	480a      	ldr	r0, [pc, #40]	; (80072c8 <_Z23getFont_swisop3_50_4bppv+0x94>)
 80072a0:	f7fe f87c 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80072a4:	4804      	ldr	r0, [pc, #16]	; (80072b8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 80072a6:	f01b feb4 	bl	8023012 <__cxa_guard_release>
 80072aa:	4808      	ldr	r0, [pc, #32]	; (80072cc <_Z23getFont_swisop3_50_4bppv+0x98>)
 80072ac:	f01b ffc8 	bl	8023240 <atexit>
    return swisop3_50_4bpp;
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200236e4 	.word	0x200236e4
 80072bc:	080cdcac 	.word	0x080cdcac
 80072c0:	08025904 	.word	0x08025904
 80072c4:	080cd20c 	.word	0x080cd20c
 80072c8:	200236bc 	.word	0x200236bc
 80072cc:	08007225 	.word	0x08007225

080072d0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_60_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_60_4bpp()
{
    static touchgfx::GeneratedFont swisop3_60_4bpp(glyphs_swisop3_60_4bpp, 63, 60, 12, 4, 1, 0, 0, unicodes_swisop3_60_4bpp, kerning_swisop3_60_4bpp, 63, 0, 0, 0);
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__tcf_0+0xc>)
 80072d6:	f7fd fb4d 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200236e8 	.word	0x200236e8

080072e0 <_Z23getFont_swisop3_60_4bppv>:
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	; 0x30
 80072e4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_60_4bpp(glyphs_swisop3_60_4bpp, 63, 60, 12, 4, 1, 0, 0, unicodes_swisop3_60_4bpp, kerning_swisop3_60_4bpp, 63, 0, 0, 0);
 80072e6:	4b1f      	ldr	r3, [pc, #124]	; (8007364 <_Z23getFont_swisop3_60_4bppv+0x84>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f3bf 8f5b 	dmb	ish
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf0c      	ite	eq
 80072f8:	2301      	moveq	r3, #1
 80072fa:	2300      	movne	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d02c      	beq.n	800735c <_Z23getFont_swisop3_60_4bppv+0x7c>
 8007302:	4818      	ldr	r0, [pc, #96]	; (8007364 <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007304:	f01b fe79 	bl	8022ffa <__cxa_guard_acquire>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	bf14      	ite	ne
 800730e:	2301      	movne	r3, #1
 8007310:	2300      	moveq	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d021      	beq.n	800735c <_Z23getFont_swisop3_60_4bppv+0x7c>
 8007318:	2300      	movs	r3, #0
 800731a:	930a      	str	r3, [sp, #40]	; 0x28
 800731c:	2300      	movs	r3, #0
 800731e:	9309      	str	r3, [sp, #36]	; 0x24
 8007320:	2300      	movs	r3, #0
 8007322:	9308      	str	r3, [sp, #32]
 8007324:	233f      	movs	r3, #63	; 0x3f
 8007326:	9307      	str	r3, [sp, #28]
 8007328:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <_Z23getFont_swisop3_60_4bppv+0x88>)
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	4b0f      	ldr	r3, [pc, #60]	; (800736c <_Z23getFont_swisop3_60_4bppv+0x8c>)
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	2300      	movs	r3, #0
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	2300      	movs	r3, #0
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	2301      	movs	r3, #1
 800733a:	9302      	str	r3, [sp, #8]
 800733c:	2304      	movs	r3, #4
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	230c      	movs	r3, #12
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	233c      	movs	r3, #60	; 0x3c
 8007346:	223f      	movs	r2, #63	; 0x3f
 8007348:	4909      	ldr	r1, [pc, #36]	; (8007370 <_Z23getFont_swisop3_60_4bppv+0x90>)
 800734a:	480a      	ldr	r0, [pc, #40]	; (8007374 <_Z23getFont_swisop3_60_4bppv+0x94>)
 800734c:	f7fe f826 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007350:	4804      	ldr	r0, [pc, #16]	; (8007364 <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007352:	f01b fe5e 	bl	8023012 <__cxa_guard_release>
 8007356:	4808      	ldr	r0, [pc, #32]	; (8007378 <_Z23getFont_swisop3_60_4bppv+0x98>)
 8007358:	f01b ff72 	bl	8023240 <atexit>
    return swisop3_60_4bpp;
 800735c:	4b05      	ldr	r3, [pc, #20]	; (8007374 <_Z23getFont_swisop3_60_4bppv+0x94>)
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20023710 	.word	0x20023710
 8007368:	080cdcb0 	.word	0x080cdcb0
 800736c:	08025908 	.word	0x08025908
 8007370:	080cd59c 	.word	0x080cd59c
 8007374:	200236e8 	.word	0x200236e8
 8007378:	080072d1 	.word	0x080072d1

0800737c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__tcf_0+0xc>)
 8007382:	f7fd faf7 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20023714 	.word	0x20023714

0800738c <_Z23getFont_verdana_10_4bppv>:
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08c      	sub	sp, #48	; 0x30
 8007390:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007392:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f3bf 8f5b 	dmb	ish
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bf0c      	ite	eq
 80073a4:	2301      	moveq	r3, #1
 80073a6:	2300      	movne	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d02c      	beq.n	8007408 <_Z23getFont_verdana_10_4bppv+0x7c>
 80073ae:	4818      	ldr	r0, [pc, #96]	; (8007410 <_Z23getFont_verdana_10_4bppv+0x84>)
 80073b0:	f01b fe23 	bl	8022ffa <__cxa_guard_acquire>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bf14      	ite	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	2300      	moveq	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d021      	beq.n	8007408 <_Z23getFont_verdana_10_4bppv+0x7c>
 80073c4:	2300      	movs	r3, #0
 80073c6:	930a      	str	r3, [sp, #40]	; 0x28
 80073c8:	2300      	movs	r3, #0
 80073ca:	9309      	str	r3, [sp, #36]	; 0x24
 80073cc:	2300      	movs	r3, #0
 80073ce:	9308      	str	r3, [sp, #32]
 80073d0:	233f      	movs	r3, #63	; 0x3f
 80073d2:	9307      	str	r3, [sp, #28]
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <_Z23getFont_verdana_10_4bppv+0x88>)
 80073d6:	9306      	str	r3, [sp, #24]
 80073d8:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	2300      	movs	r3, #0
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	2301      	movs	r3, #1
 80073e6:	9302      	str	r3, [sp, #8]
 80073e8:	2304      	movs	r3, #4
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	2300      	movs	r3, #0
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	230a      	movs	r3, #10
 80073f2:	2201      	movs	r2, #1
 80073f4:	4909      	ldr	r1, [pc, #36]	; (800741c <_Z23getFont_verdana_10_4bppv+0x90>)
 80073f6:	480a      	ldr	r0, [pc, #40]	; (8007420 <_Z23getFont_verdana_10_4bppv+0x94>)
 80073f8:	f7fd ffd0 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80073fc:	4804      	ldr	r0, [pc, #16]	; (8007410 <_Z23getFont_verdana_10_4bppv+0x84>)
 80073fe:	f01b fe08 	bl	8023012 <__cxa_guard_release>
 8007402:	4808      	ldr	r0, [pc, #32]	; (8007424 <_Z23getFont_verdana_10_4bppv+0x98>)
 8007404:	f01b ff1c 	bl	8023240 <atexit>
    return verdana_10_4bpp;
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800740a:	4618      	mov	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2002373c 	.word	0x2002373c
 8007414:	080cdcb4 	.word	0x080cdcb4
 8007418:	0802590c 	.word	0x0802590c
 800741c:	080cd910 	.word	0x080cd910
 8007420:	20023714 	.word	0x20023714
 8007424:	0800737d 	.word	0x0800737d

08007428 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
 800742c:	4801      	ldr	r0, [pc, #4]	; (8007434 <__tcf_0+0xc>)
 800742e:	f7fd faa1 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20023740 	.word	0x20023740

08007438 <_Z23getFont_verdana_20_4bppv>:
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08c      	sub	sp, #48	; 0x30
 800743c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800743e:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <_Z23getFont_verdana_20_4bppv+0x84>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f3bf 8f5b 	dmb	ish
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d02c      	beq.n	80074b4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800745a:	4818      	ldr	r0, [pc, #96]	; (80074bc <_Z23getFont_verdana_20_4bppv+0x84>)
 800745c:	f01b fdcd 	bl	8022ffa <__cxa_guard_acquire>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	bf14      	ite	ne
 8007466:	2301      	movne	r3, #1
 8007468:	2300      	moveq	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d021      	beq.n	80074b4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007470:	2300      	movs	r3, #0
 8007472:	930a      	str	r3, [sp, #40]	; 0x28
 8007474:	2300      	movs	r3, #0
 8007476:	9309      	str	r3, [sp, #36]	; 0x24
 8007478:	2300      	movs	r3, #0
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	233f      	movs	r3, #63	; 0x3f
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8007482:	9306      	str	r3, [sp, #24]
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007486:	9305      	str	r3, [sp, #20]
 8007488:	2301      	movs	r3, #1
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	2301      	movs	r3, #1
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	2301      	movs	r3, #1
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	2304      	movs	r3, #4
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	2304      	movs	r3, #4
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	2314      	movs	r3, #20
 800749e:	223f      	movs	r2, #63	; 0x3f
 80074a0:	4909      	ldr	r1, [pc, #36]	; (80074c8 <_Z23getFont_verdana_20_4bppv+0x90>)
 80074a2:	480a      	ldr	r0, [pc, #40]	; (80074cc <_Z23getFont_verdana_20_4bppv+0x94>)
 80074a4:	f7fd ff7a 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80074a8:	4804      	ldr	r0, [pc, #16]	; (80074bc <_Z23getFont_verdana_20_4bppv+0x84>)
 80074aa:	f01b fdb2 	bl	8023012 <__cxa_guard_release>
 80074ae:	4808      	ldr	r0, [pc, #32]	; (80074d0 <_Z23getFont_verdana_20_4bppv+0x98>)
 80074b0:	f01b fec6 	bl	8023240 <atexit>
    return verdana_20_4bpp;
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <_Z23getFont_verdana_20_4bppv+0x94>)
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20023768 	.word	0x20023768
 80074c0:	080cdcb8 	.word	0x080cdcb8
 80074c4:	08025910 	.word	0x08025910
 80074c8:	080cd920 	.word	0x080cd920
 80074cc:	20023740 	.word	0x20023740
 80074d0:	08007429 	.word	0x08007429

080074d4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__tcf_0+0xc>)
 80074da:	f7fd fa4b 	bl	8004974 <_ZN8touchgfx13GeneratedFontD1Ev>
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	2002376c 	.word	0x2002376c

080074e4 <_Z23getFont_verdana_40_4bppv>:
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08c      	sub	sp, #48	; 0x30
 80074e8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80074ea:	4b1f      	ldr	r3, [pc, #124]	; (8007568 <_Z23getFont_verdana_40_4bppv+0x84>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	f3bf 8f5b 	dmb	ish
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bf0c      	ite	eq
 80074fc:	2301      	moveq	r3, #1
 80074fe:	2300      	movne	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d02c      	beq.n	8007560 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007506:	4818      	ldr	r0, [pc, #96]	; (8007568 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007508:	f01b fd77 	bl	8022ffa <__cxa_guard_acquire>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d021      	beq.n	8007560 <_Z23getFont_verdana_40_4bppv+0x7c>
 800751c:	2300      	movs	r3, #0
 800751e:	930a      	str	r3, [sp, #40]	; 0x28
 8007520:	2300      	movs	r3, #0
 8007522:	9309      	str	r3, [sp, #36]	; 0x24
 8007524:	2300      	movs	r3, #0
 8007526:	9308      	str	r3, [sp, #32]
 8007528:	233f      	movs	r3, #63	; 0x3f
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <_Z23getFont_verdana_40_4bppv+0x88>)
 800752e:	9306      	str	r3, [sp, #24]
 8007530:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	2300      	movs	r3, #0
 8007536:	9304      	str	r3, [sp, #16]
 8007538:	2300      	movs	r3, #0
 800753a:	9303      	str	r3, [sp, #12]
 800753c:	2301      	movs	r3, #1
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	2304      	movs	r3, #4
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	2300      	movs	r3, #0
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	2328      	movs	r3, #40	; 0x28
 800754a:	2201      	movs	r2, #1
 800754c:	4909      	ldr	r1, [pc, #36]	; (8007574 <_Z23getFont_verdana_40_4bppv+0x90>)
 800754e:	480a      	ldr	r0, [pc, #40]	; (8007578 <_Z23getFont_verdana_40_4bppv+0x94>)
 8007550:	f7fd ff24 	bl	800539c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007554:	4804      	ldr	r0, [pc, #16]	; (8007568 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007556:	f01b fd5c 	bl	8023012 <__cxa_guard_release>
 800755a:	4808      	ldr	r0, [pc, #32]	; (800757c <_Z23getFont_verdana_40_4bppv+0x98>)
 800755c:	f01b fe70 	bl	8023240 <atexit>
    return verdana_40_4bpp;
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8007562:	4618      	mov	r0, r3
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20023794 	.word	0x20023794
 800756c:	080cdd98 	.word	0x080cdd98
 8007570:	08025914 	.word	0x08025914
 8007574:	080cdc94 	.word	0x080cdc94
 8007578:	2002376c 	.word	0x2002376c
 800757c:	080074d5 	.word	0x080074d5

08007580 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	460b      	mov	r3, r1
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800758e:	2300      	movs	r3, #0
    }
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80075a4:	2300      	movs	r3, #0
    }
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80075ba:	2300      	movs	r3, #0
    }
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	4613      	mov	r3, r2
 80075d4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80075d6:	4a07      	ldr	r2, [pc, #28]	; (80075f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6013      	str	r3, [r2, #0]
        fonts = f;
 80075dc:	4a06      	ldr	r2, [pc, #24]	; (80075f8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80075e2:	4a06      	ldr	r2, [pc, #24]	; (80075fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	8013      	strh	r3, [r2, #0]
    }
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	200565ac 	.word	0x200565ac
 80075f8:	200565b4 	.word	0x200565b4
 80075fc:	200565b0 	.word	0x200565b0

08007600 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007600:	b40e      	push	{r1, r2, r3}
 8007602:	b580      	push	{r7, lr}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800760a:	f107 0320 	add.w	r3, r7, #32
 800760e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f00f fb72 	bl	8016d00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800761c:	4603      	mov	r3, r0
 800761e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007620:	89fb      	ldrh	r3, [r7, #14]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800762c:	b003      	add	sp, #12
 800762e:	4770      	bx	lr

08007630 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007630:	b40c      	push	{r2, r3}
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800763e:	f107 031c 	add.w	r3, r7, #28
 8007642:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8007644:	78f9      	ldrb	r1, [r7, #3]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f00f fb58 	bl	8016d00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8007650:	4603      	mov	r3, r0
 8007652:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007654:	89fb      	ldrh	r3, [r7, #14]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007660:	b002      	add	sp, #8
 8007662:	4770      	bx	lr

08007664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d016      	beq.n	80076a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	331a      	adds	r3, #26
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	8adb      	ldrh	r3, [r3, #22]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8007686:	4b43      	ldr	r3, [pc, #268]	; (8007794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007688:	4a43      	ldr	r2, [pc, #268]	; (8007798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800768a:	21bf      	movs	r1, #191	; 0xbf
 800768c:	4843      	ldr	r0, [pc, #268]	; (800779c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800768e:	f01b fdb9 	bl	8023204 <__assert_func>
            return buffer[pos];
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	8a9b      	ldrh	r3, [r3, #20]
 8007696:	461a      	mov	r2, r3
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80076a6:	2300      	movs	r3, #0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d06a      	beq.n	8007782 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f010 ff13 	bl	80184d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	331a      	adds	r3, #26
 80076b6:	623b      	str	r3, [r7, #32]
 80076b8:	2301      	movs	r3, #1
 80076ba:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	8adb      	ldrh	r3, [r3, #22]
 80076c0:	8bfa      	ldrh	r2, [r7, #30]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d305      	bcc.n	80076d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80076c8:	4a36      	ldr	r2, [pc, #216]	; (80077a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80076ca:	21c4      	movs	r1, #196	; 0xc4
 80076cc:	4833      	ldr	r0, [pc, #204]	; (800779c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80076ce:	f01b fd99 	bl	8023204 <__assert_func>
            const uint16_t index = pos + offset;
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	8a9a      	ldrh	r2, [r3, #20]
 80076d6:	8bfb      	ldrh	r3, [r7, #30]
 80076d8:	4413      	add	r3, r2
 80076da:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80076dc:	8bbb      	ldrh	r3, [r7, #28]
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d801      	bhi.n	80076e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80076e2:	8bbb      	ldrh	r3, [r7, #28]
 80076e4:	e001      	b.n	80076ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80076e6:	8bbb      	ldrh	r3, [r7, #28]
 80076e8:	3b0a      	subs	r3, #10
 80076ea:	6a3a      	ldr	r2, [r7, #32]
 80076ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f0:	f640 123f 	movw	r2, #2367	; 0x93f
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d03f      	beq.n	8007782 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	331a      	adds	r3, #26
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	321a      	adds	r2, #26
 800770a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	8ad2      	ldrh	r2, [r2, #22]
 8007710:	2a00      	cmp	r2, #0
 8007712:	d105      	bne.n	8007720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8007714:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007716:	4a20      	ldr	r2, [pc, #128]	; (8007798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8007718:	21bf      	movs	r1, #191	; 0xbf
 800771a:	4820      	ldr	r0, [pc, #128]	; (800779c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800771c:	f01b fd72 	bl	8023204 <__assert_func>
            return buffer[pos];
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	8a92      	ldrh	r2, [r2, #20]
 8007724:	4611      	mov	r1, r2
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	4613      	mov	r3, r2
 8007730:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	8adb      	ldrh	r3, [r3, #22]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d806      	bhi.n	8007748 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800773c:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800773e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8007742:	4816      	ldr	r0, [pc, #88]	; (800779c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007744:	f01b fd5e 	bl	8023204 <__assert_func>
            const uint16_t index = pos + 1;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	8a9b      	ldrh	r3, [r3, #20]
 800774c:	3301      	adds	r3, #1
 800774e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8007750:	89bb      	ldrh	r3, [r7, #12]
 8007752:	2b09      	cmp	r3, #9
 8007754:	d801      	bhi.n	800775a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8007756:	89bb      	ldrh	r3, [r7, #12]
 8007758:	e000      	b.n	800775c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800775a:	2300      	movs	r3, #0
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	89f9      	ldrh	r1, [r7, #14]
 8007760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8007764:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	331a      	adds	r3, #26
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	f640 133f 	movw	r3, #2367	; 0x93f
 8007770:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	8a9b      	ldrh	r3, [r3, #20]
 8007776:	4619      	mov	r1, r3
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	8afa      	ldrh	r2, [r7, #22]
 800777c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8007780:	bf00      	nop
        }
    }
    return getNextChar();
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f010 fd8c 	bl	80182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007788:	4603      	mov	r3, r0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	08024f88 	.word	0x08024f88
 8007798:	08024f94 	.word	0x08024f94
 800779c:	08025040 	.word	0x08025040
 80077a0:	0802508c 	.word	0x0802508c
 80077a4:	0802509c 	.word	0x0802509c
 80077a8:	08025170 	.word	0x08025170
 80077ac:	0802517c 	.word	0x0802517c

080077b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f010 fd2b 	bl	8018214 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af02      	add	r7, sp, #8
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	1d38      	adds	r0, r7, #4
 80077d0:	e880 0006 	stmia.w	r0, {r1, r2}
 80077d4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80077d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077da:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80077dc:	1d39      	adds	r1, r7, #4
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f00d ffe4 	bl	80157b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80077f0:	bf00      	nop
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d127      	bne.n	800785c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8007810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d016      	beq.n	8007846 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	4a1b      	ldr	r2, [pc, #108]	; (8007888 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800781c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007820:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	4413      	add	r3, r2
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800782c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4413      	add	r3, r2
 8007836:	4a16      	ldr	r2, [pc, #88]	; (8007890 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007838:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	e00a      	b.n	800785c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8007846:	4b11      	ldr	r3, [pc, #68]	; (800788c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8007848:	4a12      	ldr	r2, [pc, #72]	; (8007894 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800784a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800784c:	4a12      	ldr	r2, [pc, #72]	; (8007898 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007850:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	4a11      	ldr	r2, [pc, #68]	; (800789c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8007856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800785a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00d      	beq.n	800787e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8007862:	4a0f      	ldr	r2, [pc, #60]	; (80078a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8007868:	f000 f83e 	bl	80078e8 <_ZN17TypedTextDatabase8getFontsEv>
 800786c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800786e:	f000 f833 	bl	80078d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	4621      	mov	r1, r4
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fea5 	bl	80075c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	bd90      	pop	{r4, r7, pc}
 8007886:	bf00      	nop
 8007888:	20023798 	.word	0x20023798
 800788c:	200237a0 	.word	0x200237a0
 8007890:	200237a4 	.word	0x200237a4
 8007894:	080cddd0 	.word	0x080cddd0
 8007898:	080cdd9c 	.word	0x080cdd9c
 800789c:	080cde64 	.word	0x080cde64
 80078a0:	2002379c 	.word	0x2002379c

080078a4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80078b6:	6819      	ldr	r1, [r3, #0]
 80078b8:	887b      	ldrh	r3, [r7, #2]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	4413      	add	r3, r2
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	200237a0 	.word	0x200237a0
 80078d4:	200237a4 	.word	0x200237a4

080078d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80078dc:	230d      	movs	r3, #13
}
 80078de:	4618      	mov	r0, r3
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80078ec:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	200237a8 	.word	0x200237a8

080078fc <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_swisop3_50_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d127      	bne.n	800795c <_Z41__static_initialization_and_destruction_0ii+0x60>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007912:	4293      	cmp	r3, r2
 8007914:	d122      	bne.n	800795c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 8007916:	f7ff fd8f 	bl	8007438 <_Z23getFont_verdana_20_4bppv>
 800791a:	4603      	mov	r3, r0
};
 800791c:	4a11      	ldr	r2, [pc, #68]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800791e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8007920:	f7ff fde0 	bl	80074e4 <_Z23getFont_verdana_40_4bppv>
 8007924:	4603      	mov	r3, r0
};
 8007926:	4a0f      	ldr	r2, [pc, #60]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007928:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800792a:	f7ff fd2f 	bl	800738c <_Z23getFont_verdana_10_4bppv>
 800792e:	4603      	mov	r3, r0
};
 8007930:	4a0c      	ldr	r2, [pc, #48]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007932:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 8007934:	f7ff fbd0 	bl	80070d8 <_Z24getFont_swisop3_300_4bppv>
 8007938:	4603      	mov	r3, r0
};
 800793a:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800793c:	60d3      	str	r3, [r2, #12]
    &(getFont_swisop3_40_4bpp()),
 800793e:	f7ff fc23 	bl	8007188 <_Z23getFont_swisop3_40_4bppv>
 8007942:	4603      	mov	r3, r0
};
 8007944:	4a07      	ldr	r2, [pc, #28]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007946:	6113      	str	r3, [r2, #16]
    &(getFont_swisop3_60_4bpp()),
 8007948:	f7ff fcca 	bl	80072e0 <_Z23getFont_swisop3_60_4bppv>
 800794c:	4603      	mov	r3, r0
};
 800794e:	4a05      	ldr	r2, [pc, #20]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007950:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp())
 8007952:	f7ff fc6f 	bl	8007234 <_Z23getFont_swisop3_50_4bppv>
 8007956:	4603      	mov	r3, r0
};
 8007958:	4a02      	ldr	r2, [pc, #8]	; (8007964 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800795a:	6193      	str	r3, [r2, #24]
} // namespace TypedTextDatabase
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	200237a8 	.word	0x200237a8

08007968 <_GLOBAL__sub_I_touchgfx_fonts>:
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
 800796c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007970:	2001      	movs	r0, #1
 8007972:	f7ff ffc3 	bl	80078fc <_Z41__static_initialization_and_destruction_0ii>
 8007976:	bd80      	pop	{r7, pc}

08007978 <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe f836 	bl	80059f4 <_ZN8touchgfx3BoxC1Ev>
 8007988:	4a08      	ldr	r2, [pc, #32]	; (80079ac <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	332c      	adds	r3, #44	; 0x2c
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f7fb faa7 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	08026ea0 	.word	0x08026ea0

080079b0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	887a      	ldrh	r2, [r7, #2]
 80079dc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 80079ec:	b590      	push	{r4, r7, lr}
 80079ee:	b091      	sub	sp, #68	; 0x44
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd fe4e 	bl	8005698 <_ZN8touchgfx9ContainerC1Ev>
 80079fc:	4a69      	ldr	r2, [pc, #420]	; (8007ba4 <_ZN12alertBarBaseC1Ev+0x1b8>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	332c      	adds	r3, #44	; 0x2c
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ffb6 	bl	8007978 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3360      	adds	r3, #96	; 0x60
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe f899 	bl	8005b48 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fd fdc5 	bl	80055ac <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	213c      	movs	r1, #60	; 0x3c
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fd fdcf 	bl	80055ca <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8007a32:	233c      	movs	r3, #60	; 0x3c
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f7fd fe7a 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8007a48:	23ff      	movs	r3, #255	; 0xff
 8007a4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a5e:	041b      	lsls	r3, r3, #16
 8007a60:	461a      	mov	r2, r3
 8007a62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a74:	f107 031c 	add.w	r3, r7, #28
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fb fa34 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4619      	mov	r1, r3
 8007a84:	4620      	mov	r0, r4
 8007a86:	f7fd ffd9 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007abc:	f107 0318 	add.w	r3, r7, #24
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fb fa10 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7ff ff6f 	bl	80079b0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	332c      	adds	r3, #44	; 0x2c
 8007ad6:	2105      	movs	r1, #5
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ff77 	bl	80079cc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(263, 0, 302, 60);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8007ae4:	233c      	movs	r3, #60	; 0x3c
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8007aec:	2200      	movs	r2, #0
 8007aee:	f240 1107 	movw	r1, #263	; 0x107
 8007af2:	f7fd fe20 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8007afc:	23ff      	movs	r3, #255	; 0xff
 8007afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b02:	23ff      	movs	r3, #255	; 0xff
 8007b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b08:	23ff      	movs	r3, #255	; 0xff
 8007b0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b12:	041b      	lsls	r3, r3, #16
 8007b14:	461a      	mov	r2, r3
 8007b16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fb f9da 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	62fc      	str	r4, [r7, #44]	; 0x2c
 8007b38:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8007b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007b40:	bf00      	nop
    frontText.setLinespacing(0);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3360      	adds	r3, #96	; 0x60
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	2300      	movs	r3, #0
 8007b4a:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007b50:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007b52:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	2105      	movs	r1, #5
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fd ff79 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f00c fba4 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fc ff1e 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	332c      	adds	r3, #44	; 0x2c
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f00a fbd9 	bl	801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3360      	adds	r3, #96	; 0x60
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f00a fbd2 	bl	801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	373c      	adds	r7, #60	; 0x3c
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	08025974 	.word	0x08025974

08007ba8 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]

}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8007bbc:	b590      	push	{r4, r7, lr}
 8007bbe:	b091      	sub	sp, #68	; 0x44
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fd66 	bl	8005698 <_ZN8touchgfx9ContainerC1Ev>
 8007bcc:	4a6a      	ldr	r2, [pc, #424]	; (8007d78 <_ZN11tempBoxBaseC1Ev+0x1bc>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	332c      	adds	r3, #44	; 0x2c
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f00b ffa4 	bl	8013b24 <_ZN8touchgfx4LineC1Ev>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8007be2:	f107 0310 	add.w	r3, r7, #16
 8007be6:	2100      	movs	r1, #0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fb f97d 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8007bee:	6939      	ldr	r1, [r7, #16]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7fe f8d7 	bl	8005da4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	33b8      	adds	r3, #184	; 0xb8
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd ff42 	bl	8005a84 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	21dc      	movs	r1, #220	; 0xdc
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fd fcd1 	bl	80055ac <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	213c      	movs	r1, #60	; 0x3c
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd fcdb 	bl	80055ca <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8007c1a:	233c      	movs	r3, #60	; 0x3c
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2364      	movs	r3, #100	; 0x64
 8007c20:	2200      	movs	r2, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	f7fd fd87 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8007c2e:	23ff      	movs	r3, #255	; 0xff
 8007c30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8007c34:	23ff      	movs	r3, #255	; 0xff
 8007c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c3a:	23ff      	movs	r3, #255	; 0xff
 8007c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c44:	041b      	lsls	r3, r3, #16
 8007c46:	461a      	mov	r2, r3
 8007c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007c5a:	f107 0320 	add.w	r3, r7, #32
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fb f941 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7fe f8ba 	bl	8005de4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	33a0      	adds	r3, #160	; 0xa0
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f00b fd75 	bl	801376c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	332c      	adds	r3, #44	; 0x2c
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe ffd8 	bl	8006c40 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	332c      	adds	r3, #44	; 0x2c
 8007c94:	22dc      	movs	r2, #220	; 0xdc
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fff7 	bl	8006c8c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	332c      	adds	r3, #44	; 0x2c
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff f817 	bl	8006cd8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	332c      	adds	r3, #44	; 0x2c
 8007cae:	2101      	movs	r1, #1
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f00c f87d 	bl	8013db0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8007cbc:	233c      	movs	r3, #60	; 0x3c
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	23dc      	movs	r3, #220	; 0xdc
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	f7fd fd36 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8007cd0:	23ff      	movs	r3, #255	; 0xff
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd6:	23ff      	movs	r3, #255	; 0xff
 8007cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cdc:	23ff      	movs	r3, #255	; 0xff
 8007cde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	041b      	lsls	r3, r3, #16
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007cfc:	f107 031c 	add.w	r3, r7, #28
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fb f8f0 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	62fc      	str	r4, [r7, #44]	; 0x2c
 8007d0c:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007d14:	bf00      	nop
    textArea1.setLinespacing(2);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	33b8      	adds	r3, #184	; 0xb8
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8007d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d22:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007d24:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007d26:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8007d2e:	f107 0314 	add.w	r3, r7, #20
 8007d32:	2104      	movs	r1, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd fe8f 	bl	8005a58 <_ZN8touchgfx9TypedTextC1Et>
 8007d3a:	f107 0314 	add.w	r3, r7, #20
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4620      	mov	r0, r4
 8007d42:	f00c faba 	bl	80142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007d46:	f107 0314 	add.w	r3, r7, #20
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fc fe34 	bl	80049b8 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	332c      	adds	r3, #44	; 0x2c
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f00a faef 	bl	801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	33b8      	adds	r3, #184	; 0xb8
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f00a fae8 	bl	801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	373c      	adds	r7, #60	; 0x3c
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd90      	pop	{r4, r7, pc}
 8007d76:	bf00      	nop
 8007d78:	08025a00 	.word	0x08025a00

08007d7c <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fc ff22 	bl	8004bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8007da8:	4a03      	ldr	r2, [pc, #12]	; (8007db8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]
{

}
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	08025538 	.word	0x08025538

08007dbc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]
{

}
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <_ZN5Model4tickEv>:

void Model::tick()
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
    {
    }
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
    {
    }
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
    {
 8007e1c:	4a04      	ldr	r2, [pc, #16]	; (8007e30 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
    }
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	08025ac4 	.word	0x08025ac4

08007e34 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
    }
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ffe9 	bl	8007e14 <_ZN8touchgfx9PresenterD1Ev>
 8007e42:	2104      	movs	r1, #4
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f01b f8d6 	bl	8022ff6 <_ZdlPvj>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
    {
 8007e5c:	4a04      	ldr	r2, [pc, #16]	; (8007e70 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
    }
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	08025ac4 	.word	0x08025ac4

08007e74 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	4a06      	ldr	r2, [pc, #24]	; (8007e98 <_ZN13ModelListenerC1Ev+0x24>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	08025ab4 	.word	0x08025ab4

08007e9c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <_ZN13ModelListenerD1Ev+0x1c>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	08025ab4 	.word	0x08025ab4

08007ebc <_ZN13ModelListenerD0Ev>:
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ffe9 	bl	8007e9c <_ZN13ModelListenerD1Ev>
 8007eca:	2108      	movs	r1, #8
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f01b f892 	bl	8022ff6 <_ZdlPvj>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <_ZN16Screen1PresenterD1Ev+0x30>)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <_ZN16Screen1PresenterD1Ev+0x34>)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	605a      	str	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff ffd1 	bl	8007e9c <_ZN13ModelListenerD1Ev>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff89 	bl	8007e14 <_ZN8touchgfx9PresenterD1Ev>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	08025a8c 	.word	0x08025a8c
 8007f10:	08025aa4 	.word	0x08025aa4

08007f14 <_ZThn4_N16Screen1PresenterD1Ev>:
 8007f14:	f1a0 0004 	sub.w	r0, r0, #4
 8007f18:	e7e0      	b.n	8007edc <_ZN16Screen1PresenterD1Ev>
 8007f1a:	bf00      	nop

08007f1c <_ZN16Screen1PresenterD0Ev>:
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff ffd9 	bl	8007edc <_ZN16Screen1PresenterD1Ev>
 8007f2a:	2110      	movs	r1, #16
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f01b f862 	bl	8022ff6 <_ZdlPvj>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <_ZThn4_N16Screen1PresenterD0Ev>:
 8007f3c:	f1a0 0004 	sub.w	r0, r0, #4
 8007f40:	e7ec      	b.n	8007f1c <_ZN16Screen1PresenterD0Ev>
	...

08007f44 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
    : view(v)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff ff7f 	bl	8007e54 <_ZN8touchgfx9PresenterC1Ev>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff ff8a 	bl	8007e74 <_ZN13ModelListenerC1Ev>
 8007f60:	4a06      	ldr	r2, [pc, #24]	; (8007f7c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	4a06      	ldr	r2, [pc, #24]	; (8007f80 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	605a      	str	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	60da      	str	r2, [r3, #12]
{

}
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	08025a8c 	.word	0x08025a8c
 8007f80:	08025aa4 	.word	0x08025aa4

08007f84 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]

}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]

}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <_Z41__static_initialization_and_destruction_0ii>:
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b092      	sub	sp, #72	; 0x48
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	f040 8114 	bne.w	80081e6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	f040 810e 	bne.w	80081e6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fe4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fe8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	431a      	orrs	r2, r3
 8008004:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008008:	4313      	orrs	r3, r2
 800800a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800800e:	f107 0320 	add.w	r3, r7, #32
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7fa ff67 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800801a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800801c:	bf00      	nop
 800801e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8008020:	4b73      	ldr	r3, [pc, #460]	; (80081f0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	23ff      	movs	r3, #255	; 0xff
 8008026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800802a:	2300      	movs	r3, #0
 800802c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008030:	2300      	movs	r3, #0
 8008032:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800803a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800803e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008046:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800804a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800804e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	461a      	mov	r2, r3
 8008056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	431a      	orrs	r2, r3
 800805e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008062:	4313      	orrs	r3, r2
 8008064:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008068:	f107 031c 	add.w	r3, r7, #28
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fa ff3a 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008074:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8008076:	bf00      	nop
 8008078:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800807a:	4b5e      	ldr	r3, [pc, #376]	; (80081f4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	2300      	movs	r3, #0
 8008080:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008084:	23ff      	movs	r3, #255	; 0xff
 8008086:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800808a:	2300      	movs	r3, #0
 800808c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008090:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008098:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800809c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80080a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80080a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80080ac:	041b      	lsls	r3, r3, #16
 80080ae:	461a      	mov	r2, r3
 80080b0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	431a      	orrs	r2, r3
 80080b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80080bc:	4313      	orrs	r3, r2
 80080be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80080c2:	f107 0318 	add.w	r3, r7, #24
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fa ff0d 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80080ce:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80080d0:	bf00      	nop
 80080d2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80080d4:	4b48      	ldr	r3, [pc, #288]	; (80081f8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080de:	2300      	movs	r3, #0
 80080e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80080e4:	23ff      	movs	r3, #255	; 0xff
 80080e6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80080ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080ee:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80080f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80080f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80080fa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80080fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008102:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	461a      	mov	r2, r3
 800810a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	431a      	orrs	r2, r3
 8008112:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008116:	4313      	orrs	r3, r2
 8008118:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800811c:	f107 0314 	add.w	r3, r7, #20
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fa fee0 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008128:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800812a:	bf00      	nop
 800812c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800812e:	4b33      	ldr	r3, [pc, #204]	; (80081fc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	23f7      	movs	r3, #247	; 0xf7
 8008134:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008138:	234c      	movs	r3, #76	; 0x4c
 800813a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800813e:	2302      	movs	r3, #2
 8008140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008144:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008148:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800814c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008150:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008154:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008158:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800815c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	461a      	mov	r2, r3
 8008164:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	431a      	orrs	r2, r3
 800816c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008170:	4313      	orrs	r3, r2
 8008172:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008176:	f107 0310 	add.w	r3, r7, #16
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f7fa feb3 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008182:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008184:	bf00      	nop
 8008186:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8008188:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	23f7      	movs	r3, #247	; 0xf7
 800818e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008192:	23d2      	movs	r3, #210	; 0xd2
 8008194:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008198:	2302      	movs	r3, #2
 800819a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800819e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80081a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80081a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80081b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80081b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	461a      	mov	r2, r3
 80081be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	431a      	orrs	r2, r3
 80081c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80081d0:	f107 030c 	add.w	r3, r7, #12
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fa fe86 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80081dc:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80081de:	bf00      	nop
 80081e0:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80081e2:	4b08      	ldr	r3, [pc, #32]	; (8008204 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	bf00      	nop
 80081e8:	3748      	adds	r7, #72	; 0x48
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200237c4 	.word	0x200237c4
 80081f4:	200237c8 	.word	0x200237c8
 80081f8:	200237cc 	.word	0x200237cc
 80081fc:	200237d0 	.word	0x200237d0
 8008200:	200237d4 	.word	0x200237d4
 8008204:	200237d8 	.word	0x200237d8

08008208 <_GLOBAL__sub_I__ZN16Screen1PresenterC2ER11Screen1View>:
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
 800820c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008210:	2001      	movs	r0, #1
 8008212:	f7ff fecb 	bl	8007fac <_Z41__static_initialization_and_destruction_0ii>
 8008216:	bd80      	pop	{r7, pc}

08008218 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	4a05      	ldr	r2, [pc, #20]	; (8008238 <_ZN11Screen1ViewD1Ev+0x20>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	f7fd ff1d 	bl	8006068 <_ZN15Screen1ViewBaseD1Ev>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	08025adc 	.word	0x08025adc

0800823c <_ZN11Screen1ViewD0Ev>:
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff ffe7 	bl	8008218 <_ZN11Screen1ViewD1Ev>
 800824a:	4904      	ldr	r1, [pc, #16]	; (800825c <_ZN11Screen1ViewD0Ev+0x20>)
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f01a fed2 	bl	8022ff6 <_ZdlPvj>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	0002263c 	.word	0x0002263c

08008260 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <stdio.h>
#include <cstring>

Screen1View::Screen1View()
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	f7fd ff80 	bl	8006170 <_ZN15Screen1ViewBaseC1Ev>
 8008270:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <_ZN11Screen1ViewC1Ev+0x98>)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	4b20      	ldr	r3, [pc, #128]	; (80082fc <_ZN11Screen1ViewC1Ev+0x9c>)
 800827a:	4413      	add	r3, r2
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
{
    rpmArea.setWildcard(rpmAreaBuffer);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <_ZN11Screen1ViewC1Ev+0xa0>)
 800828a:	4413      	add	r3, r2
 800828c:	4619      	mov	r1, r3
 800828e:	f7fd fc71 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.setWildcard(gearAreaBuffer);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <_ZN11Screen1ViewC1Ev+0xa4>)
 800829c:	4413      	add	r3, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	f7fd fc68 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setWildcard(cltAreaBuffer);
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4b18      	ldr	r3, [pc, #96]	; (8008308 <_ZN11Screen1ViewC1Ev+0xa8>)
 80082a8:	4413      	add	r3, r2
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4a17      	ldr	r2, [pc, #92]	; (800830c <_ZN11Screen1ViewC1Ev+0xac>)
 80082ae:	440a      	add	r2, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fd fc5e 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setWildcard(battAreaBuffer);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4b13      	ldr	r3, [pc, #76]	; (8008310 <_ZN11Screen1ViewC1Ev+0xb0>)
 80082c2:	4413      	add	r3, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	f7fd fc55 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    setRPM(100);
 80082ca:	2164      	movs	r1, #100	; 0x64
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f97f 	bl	80085d0 <_ZN11Screen1View6setRPMEi>
    setGear(2);
 80082d2:	2102      	movs	r1, #2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fa0d 	bl	80086f4 <_ZN11Screen1View7setGearEi>
    setClt(71.2);
 80082da:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008314 <_ZN11Screen1ViewC1Ev+0xb4>
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f9d4 	bl	800868c <_ZN11Screen1View6setCltEf>
    setBatt(13.42);
 80082e4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008318 <_ZN11Screen1ViewC1Ev+0xb8>
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f99d 	bl	8008628 <_ZN11Screen1View7setBattEf>
}
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	08025adc 	.word	0x08025adc
 80082fc:	00022638 	.word	0x00022638
 8008300:	0001f708 	.word	0x0001f708
 8008304:	0001f704 	.word	0x0001f704
 8008308:	0001f6c4 	.word	0x0001f6c4
 800830c:	0001f744 	.word	0x0001f744
 8008310:	0001f71c 	.word	0x0001f71c
 8008314:	428e6666 	.word	0x428e6666
 8008318:	4156b852 	.word	0x4156b852

0800831c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fc40 	bl	8006bac <_ZN15Screen1ViewBase11setupScreenEv>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd fad2 	bl	80058e8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
    Screen1View::tempBox1_1.redraw();
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800835a:	4413      	add	r3, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f000 ff5d 	bl	800921c <_ZN7tempBox6redrawEv>
    tempBox1_1.invalidate();
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8008368:	4413      	add	r3, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f00e fdea 	bl	8016f44 <_ZNK8touchgfx8Drawable10invalidateEv>
    static int a = 0;
    if(tickCounter % 255 == 0)
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	4b27      	ldr	r3, [pc, #156]	; (8008410 <_ZN11Screen1View15handleTickEventEv+0xc4>)
 8008374:	4413      	add	r3, r2
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4b26      	ldr	r3, [pc, #152]	; (8008414 <_ZN11Screen1View15handleTickEventEv+0xc8>)
 800837a:	fb83 1302 	smull	r1, r3, r3, r2
 800837e:	4413      	add	r3, r2
 8008380:	11d9      	asrs	r1, r3, #7
 8008382:	17d3      	asrs	r3, r2, #31
 8008384:	1ac9      	subs	r1, r1, r3
 8008386:	460b      	mov	r3, r1
 8008388:	021b      	lsls	r3, r3, #8
 800838a:	1a5b      	subs	r3, r3, r1
 800838c:	1ad1      	subs	r1, r2, r3
 800838e:	2900      	cmp	r1, #0
 8008390:	d124      	bne.n	80083dc <_ZN11Screen1View15handleTickEventEv+0x90>
    {
        a++; 
 8008392:	4b21      	ldr	r3, [pc, #132]	; (8008418 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3301      	adds	r3, #1
 8008398:	4a1f      	ldr	r2, [pc, #124]	; (8008418 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 800839a:	6013      	str	r3, [r2, #0]
        a = a % 3;
 800839c:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	4b1e      	ldr	r3, [pc, #120]	; (800841c <_ZN11Screen1View15handleTickEventEv+0xd0>)
 80083a2:	fb83 3201 	smull	r3, r2, r3, r1
 80083a6:	17cb      	asrs	r3, r1, #31
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	4613      	mov	r3, r2
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	4413      	add	r3, r2
 80083b0:	1aca      	subs	r2, r1, r3
 80083b2:	4b19      	ldr	r3, [pc, #100]	; (8008418 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 80083b4:	601a      	str	r2, [r3, #0]
        if(a == 0)
 80083b6:	4b18      	ldr	r3, [pc, #96]	; (8008418 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d107      	bne.n	80083ce <_ZN11Screen1View15handleTickEventEv+0x82>
        {
            alertBar1.setState(EBarState::Info);
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	4b17      	ldr	r3, [pc, #92]	; (8008420 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 80083c2:	4413      	add	r3, r2
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fb3a 	bl	8008a40 <_ZN8alertBar8setStateE9EBarState>
 80083cc:	e006      	b.n	80083dc <_ZN11Screen1View15handleTickEventEv+0x90>
        }
        else
        {
            alertBar1.setState(EBarState::Warning);
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	4b13      	ldr	r3, [pc, #76]	; (8008420 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 80083d2:	4413      	add	r3, r2
 80083d4:	2101      	movs	r1, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fb32 	bl	8008a40 <_ZN8alertBar8setStateE9EBarState>
        }
        
    }
    alertBar1.invalidate();
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4b10      	ldr	r3, [pc, #64]	; (8008420 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 80083e0:	4413      	add	r3, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f00e fdae 	bl	8016f44 <_ZNK8touchgfx8Drawable10invalidateEv>
    alertBar1.setText("12345678912345\n");
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 80083ec:	4413      	add	r3, r2
 80083ee:	490d      	ldr	r1, [pc, #52]	; (8008424 <_ZN11Screen1View15handleTickEventEv+0xd8>)
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fb67 	bl	8008ac4 <_ZN8alertBar7setTextEPKc>
    tickCounter++;
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <_ZN11Screen1View15handleTickEventEv+0xc4>)
 80083fa:	4413      	add	r3, r2
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4b03      	ldr	r3, [pc, #12]	; (8008410 <_ZN11Screen1View15handleTickEventEv+0xc4>)
 8008404:	440b      	add	r3, r1
 8008406:	601a      	str	r2, [r3, #0]
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	00022638 	.word	0x00022638
 8008414:	80808081 	.word	0x80808081
 8008418:	200237f4 	.word	0x200237f4
 800841c:	55555556 	.word	0x55555556
 8008420:	0001f514 	.word	0x0001f514
 8008424:	08025230 	.word	0x08025230

08008428 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void Screen1View::setText(touchgfx::TextAreaWithOneWildcard textArea, touchgfx::Unicode::UnicodeChar* buffer, const char inText[])
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
    Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	f7f7 ff02 	bl	8000240 <strlen>
 800843c:	4603      	mov	r3, r0
 800843e:	b29b      	uxth	r3, r3
 8008440:	3301      	adds	r3, #1
 8008442:	b29b      	uxth	r3, r3
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f010 fdfd 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea.resizeToCurrentText();
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f00b ff15 	bl	8014280 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea.invalidate();
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4618      	mov	r0, r3
 800845a:	f00e fd73 	bl	8016f44 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	4a1e      	ldr	r2, [pc, #120]	; (80084ec <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	3304      	adds	r3, #4
 800847e:	3204      	adds	r2, #4
 8008480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008484:	e883 0003 	stmia.w	r3, {r0, r1}
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	320c      	adds	r2, #12
 8008490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008494:	e883 0003 	stmia.w	r3, {r0, r1}
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	695a      	ldr	r2, [r3, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	615a      	str	r2, [r3, #20]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	699a      	ldr	r2, [r3, #24]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	619a      	str	r2, [r3, #24]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	61da      	str	r2, [r3, #28]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	841a      	strh	r2, [r3, #32]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	845a      	strh	r2, [r3, #34]	; 0x22
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	080271e0 	.word	0x080271e0

080084f0 <_ZN8touchgfx6WidgetC1ERKS0_>:
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff ffb1 	bl	8008468 <_ZN8touchgfx8DrawableC1ERKS0_>
 8008506:	4a04      	ldr	r2, [pc, #16]	; (8008518 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	080258a0 	.word	0x080258a0

0800851c <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff ffdf 	bl	80084f0 <_ZN8touchgfx6WidgetC1ERKS0_>
 8008532:	4a19      	ldr	r2, [pc, #100]	; (8008598 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	3328      	adds	r3, #40	; 0x28
 8008542:	4619      	mov	r1, r3
 8008544:	4610      	mov	r0, r2
 8008546:	f7fc fa57 	bl	80049f8 <_ZN8touchgfx9TypedTextC1ERKS0_>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008550:	631a      	str	r2, [r3, #48]	; 0x30
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	869a      	strh	r2, [r3, #52]	; 0x34
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	08026cec 	.word	0x08026cec

0800859c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff ffb5 	bl	800851c <_ZN8touchgfx8TextAreaC1ERKS0_>
 80085b2:	4a06      	ldr	r2, [pc, #24]	; (80085cc <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	63da      	str	r2, [r3, #60]	; 0x3c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	08026df8 	.word	0x08026df8

080085d0 <_ZN11Screen1View6setRPMEi>:

void Screen1View::setRPM(int inRPM)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b096      	sub	sp, #88	; 0x58
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
    char textBuffer[10]; 
    sprintf(textBuffer,"%d", inRPM);
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	490f      	ldr	r1, [pc, #60]	; (8008620 <_ZN11Screen1View6setRPMEi+0x50>)
 80085e2:	4618      	mov	r0, r3
 80085e4:	f01b fa8e 	bl	8023b04 <siprintf>
    setText(rpmArea, rpmAreaBuffer, textBuffer); 
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 80085ee:	f107 0318 	add.w	r3, r7, #24
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff ffd1 	bl	800859c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a09      	ldr	r2, [pc, #36]	; (8008624 <_ZN11Screen1View6setRPMEi+0x54>)
 80085fe:	441a      	add	r2, r3
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	f107 0118 	add.w	r1, r7, #24
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff ff0d 	bl	8008428 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fd2e 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8008618:	bf00      	nop
 800861a:	3758      	adds	r7, #88	; 0x58
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	08025240 	.word	0x08025240
 8008624:	0001f708 	.word	0x0001f708

08008628 <_ZN11Screen1View7setBattEf>:

void Screen1View::setBatt(float inBatt)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b096      	sub	sp, #88	; 0x58
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	ed87 0a00 	vstr	s0, [r7]
    char textBuffer[10];
    sprintf(textBuffer, "%.2f", inBatt);
 8008634:	edd7 7a00 	vldr	s15, [r7]
 8008638:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800863c:	f107 000c 	add.w	r0, r7, #12
 8008640:	ec53 2b17 	vmov	r2, r3, d7
 8008644:	490f      	ldr	r1, [pc, #60]	; (8008684 <_ZN11Screen1View7setBattEf+0x5c>)
 8008646:	f01b fa5d 	bl	8023b04 <siprintf>
    setText(battArea, battAreaBuffer, textBuffer);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff ffa0 	bl	800859c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a0a      	ldr	r2, [pc, #40]	; (8008688 <_ZN11Screen1View7setBattEf+0x60>)
 8008660:	441a      	add	r2, r3
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	f107 0118 	add.w	r1, r7, #24
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fedc 	bl	8008428 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8008670:	f107 0318 	add.w	r3, r7, #24
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe fcfd 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800867a:	bf00      	nop
 800867c:	3758      	adds	r7, #88	; 0x58
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	08025244 	.word	0x08025244
 8008688:	0001f71c 	.word	0x0001f71c

0800868c <_ZN11Screen1View6setCltEf>:

void Screen1View::setClt(float inClt)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b096      	sub	sp, #88	; 0x58
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	ed87 0a00 	vstr	s0, [r7]
    char textBuffer[10];
    sprintf(textBuffer, "%.1f", inClt);
 8008698:	edd7 7a00 	vldr	s15, [r7]
 800869c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80086a0:	f107 000c 	add.w	r0, r7, #12
 80086a4:	ec53 2b17 	vmov	r2, r3, d7
 80086a8:	490f      	ldr	r1, [pc, #60]	; (80086e8 <_ZN11Screen1View6setCltEf+0x5c>)
 80086aa:	f01b fa2b 	bl	8023b04 <siprintf>
    setText(cltArea, cltAreaBuffer, textBuffer);
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4b0e      	ldr	r3, [pc, #56]	; (80086ec <_ZN11Screen1View6setCltEf+0x60>)
 80086b2:	4413      	add	r3, r2
 80086b4:	f107 0218 	add.w	r2, r7, #24
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7ff ff6e 	bl	800859c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a0b      	ldr	r2, [pc, #44]	; (80086f0 <_ZN11Screen1View6setCltEf+0x64>)
 80086c4:	441a      	add	r2, r3
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	f107 0118 	add.w	r1, r7, #24
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff feaa 	bl	8008428 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80086d4:	f107 0318 	add.w	r3, r7, #24
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fccb 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80086de:	bf00      	nop
 80086e0:	3758      	adds	r7, #88	; 0x58
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	0802524c 	.word	0x0802524c
 80086ec:	0001f6c4 	.word	0x0001f6c4
 80086f0:	0001f744 	.word	0x0001f744

080086f4 <_ZN11Screen1View7setGearEi>:

void Screen1View::setGear(int inGear)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b096      	sub	sp, #88	; 0x58
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
    char textBuffer[10]; 
    sprintf(textBuffer,"%d", inGear);
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	490f      	ldr	r1, [pc, #60]	; (8008744 <_ZN11Screen1View7setGearEi+0x50>)
 8008706:	4618      	mov	r0, r3
 8008708:	f01b f9fc 	bl	8023b04 <siprintf>
    setText(gearArea, gearAreaBuffer, textBuffer); 
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff ff3f 	bl	800859c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a09      	ldr	r2, [pc, #36]	; (8008748 <_ZN11Screen1View7setGearEi+0x54>)
 8008722:	441a      	add	r2, r3
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	f107 0118 	add.w	r1, r7, #24
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff fe7b 	bl	8008428 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fc9c 	bl	8007074 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800873c:	bf00      	nop
 800873e:	3758      	adds	r7, #88	; 0x58
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	08025240 	.word	0x08025240
 8008748:	0001f704 	.word	0x0001f704

0800874c <_Z41__static_initialization_and_destruction_0ii>:
 800874c:	b580      	push	{r7, lr}
 800874e:	b092      	sub	sp, #72	; 0x48
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b01      	cmp	r3, #1
 800875a:	f040 8114 	bne.w	8008986 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008764:	4293      	cmp	r3, r2
 8008766:	f040 810e 	bne.w	8008986 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800876a:	2300      	movs	r3, #0
 800876c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008770:	2300      	movs	r3, #0
 8008772:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008776:	2300      	movs	r3, #0
 8008778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800877c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008788:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800878c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008790:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	461a      	mov	r2, r3
 800879c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	431a      	orrs	r2, r3
 80087a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80087ae:	f107 0320 	add.w	r3, r7, #32
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fa fb97 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80087ba:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80087bc:	bf00      	nop
 80087be:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80087c0:	4b73      	ldr	r3, [pc, #460]	; (8008990 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	23ff      	movs	r3, #255	; 0xff
 80087c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80087ca:	2300      	movs	r3, #0
 80087cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80087d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80087de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80087ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80087ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087f2:	041b      	lsls	r3, r3, #16
 80087f4:	461a      	mov	r2, r3
 80087f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	431a      	orrs	r2, r3
 80087fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008802:	4313      	orrs	r3, r2
 8008804:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008808:	f107 031c 	add.w	r3, r7, #28
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7fa fb6a 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008814:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8008816:	bf00      	nop
 8008818:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800881a:	4b5e      	ldr	r3, [pc, #376]	; (8008994 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	2300      	movs	r3, #0
 8008820:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008824:	23ff      	movs	r3, #255	; 0xff
 8008826:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800882a:	2300      	movs	r3, #0
 800882c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008830:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008834:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008838:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800883c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008844:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008848:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	461a      	mov	r2, r3
 8008850:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008854:	021b      	lsls	r3, r3, #8
 8008856:	431a      	orrs	r2, r3
 8008858:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800885c:	4313      	orrs	r3, r2
 800885e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008862:	f107 0318 	add.w	r3, r7, #24
 8008866:	4611      	mov	r1, r2
 8008868:	4618      	mov	r0, r3
 800886a:	f7fa fb3d 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800886e:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8008870:	bf00      	nop
 8008872:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8008874:	4b48      	ldr	r3, [pc, #288]	; (8008998 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	2300      	movs	r3, #0
 800887a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800887e:	2300      	movs	r3, #0
 8008880:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008884:	23ff      	movs	r3, #255	; 0xff
 8008886:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800888a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800888e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008892:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008896:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800889a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800889e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80088a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80088a6:	041b      	lsls	r3, r3, #16
 80088a8:	461a      	mov	r2, r3
 80088aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	431a      	orrs	r2, r3
 80088b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fa fb10 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80088c8:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80088ca:	bf00      	nop
 80088cc:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80088ce:	4b33      	ldr	r3, [pc, #204]	; (800899c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	23f7      	movs	r3, #247	; 0xf7
 80088d4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80088d8:	234c      	movs	r3, #76	; 0x4c
 80088da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80088de:	2302      	movs	r3, #2
 80088e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80088e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80088e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80088ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80088f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80088f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80088fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	461a      	mov	r2, r3
 8008904:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	431a      	orrs	r2, r3
 800890c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008910:	4313      	orrs	r3, r2
 8008912:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008916:	f107 0310 	add.w	r3, r7, #16
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7fa fae3 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008922:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008924:	bf00      	nop
 8008926:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8008928:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	23f7      	movs	r3, #247	; 0xf7
 800892e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008932:	23d2      	movs	r3, #210	; 0xd2
 8008934:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008938:	2302      	movs	r3, #2
 800893a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800893e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008942:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008946:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008952:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008956:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	461a      	mov	r2, r3
 800895e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	431a      	orrs	r2, r3
 8008966:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800896a:	4313      	orrs	r3, r2
 800896c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008970:	f107 030c 	add.w	r3, r7, #12
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f7fa fab6 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800897c:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800897e:	bf00      	nop
 8008980:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	bf00      	nop
 8008988:	3748      	adds	r7, #72	; 0x48
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200237dc 	.word	0x200237dc
 8008994:	200237e0 	.word	0x200237e0
 8008998:	200237e4 	.word	0x200237e4
 800899c:	200237e8 	.word	0x200237e8
 80089a0:	200237ec 	.word	0x200237ec
 80089a4:	200237f0 	.word	0x200237f0

080089a8 <_GLOBAL__sub_I__ZN11Screen1ViewC2Ev>:
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089b0:	2001      	movs	r0, #1
 80089b2:	f7ff fecb 	bl	800874c <_Z41__static_initialization_and_destruction_0ii>
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff f812 	bl	80079ec <_ZN12alertBarBaseC1Ev>
 80089c8:	4a0d      	ldr	r2, [pc, #52]	; (8008a00 <_ZN8alertBarC1Ev+0x48>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <_ZN8alertBarC1Ev+0x4c>)
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <_ZN8alertBarC1Ev+0x50>)
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <_ZN8alertBarC1Ev+0x54>)
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <_ZN8alertBarC1Ev+0x58>)
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
{
}
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	08025b10 	.word	0x08025b10
 8008a04:	20023804 	.word	0x20023804
 8008a08:	20023808 	.word	0x20023808
 8008a0c:	200237fc 	.word	0x200237fc
 8008a10:	2002380c 	.word	0x2002380c

08008a14 <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff f8c2 	bl	8007ba8 <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	33b0      	adds	r3, #176	; 0xb0
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fd f89f 	bl	8005b74 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d833      	bhi.n	8008ab8 <_ZN8alertBar8setStateE9EBarState+0x78>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <_ZN8alertBar8setStateE9EBarState+0x18>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a69 	.word	0x08008a69
 8008a5c:	08008a7d 	.word	0x08008a7d
 8008a60:	08008a91 	.word	0x08008a91
 8008a64:	08008aa5 	.word	0x08008aa5
    switch (inState)
    {
    case EBarState::Info:
        bgBox.setColor(dataColors[0]);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7fc ffe1 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8008a7a:	e01e      	b.n	8008aba <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::Warning:
        bgBox.setColor(dataColors[1]);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f7fc ffd7 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8008a8e:	e014      	b.n	8008aba <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::Fault:
        bgBox.setColor(dataColors[2]);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fc ffcd 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8008aa2:	e00a      	b.n	8008aba <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::News:
        bgBox.setColor(dataColors[3]);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f7fc ffc3 	bl	8005a3c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8008ab6:	e000      	b.n	8008aba <_ZN8alertBar8setStateE9EBarState+0x7a>

    default:
        break;
 8008ab8:	bf00      	nop
    }
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8008ad4:	6838      	ldr	r0, [r7, #0]
 8008ad6:	f7f7 fbb3 	bl	8000240 <strlen>
 8008ada:	4603      	mov	r3, r0
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3301      	adds	r3, #1
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f010 faae 	bl	8019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    frontText.resizeToCurrentText();
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3360      	adds	r3, #96	; 0x60
 8008af0:	4618      	mov	r0, r3
 8008af2:	f00b fbc5 	bl	8014280 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    frontText.invalidate();
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3360      	adds	r3, #96	; 0x60
 8008afa:	4618      	mov	r0, r3
 8008afc:	f00e fa22 	bl	8016f44 <_ZNK8touchgfx8Drawable10invalidateEv>
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd90      	pop	{r4, r7, pc}

08008b08 <_Z41__static_initialization_and_destruction_0ii>:
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b092      	sub	sp, #72	; 0x48
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	f040 8114 	bne.w	8008d42 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b20:	4293      	cmp	r3, r2
 8008b22:	f040 810e 	bne.w	8008d42 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008b32:	2300      	movs	r3, #0
 8008b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	461a      	mov	r2, r3
 8008b58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b6a:	f107 0320 	add.w	r3, r7, #32
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fa f9b9 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008b76:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8008b78:	bf00      	nop
 8008b7a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8008b7c:	4b73      	ldr	r3, [pc, #460]	; (8008d4c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	23ff      	movs	r3, #255	; 0xff
 8008b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b86:	2300      	movs	r3, #0
 8008b88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bae:	041b      	lsls	r3, r3, #16
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008bc4:	f107 031c 	add.w	r3, r7, #28
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fa f98c 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008bd0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8008bd2:	bf00      	nop
 8008bd4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8008bd6:	4b5e      	ldr	r3, [pc, #376]	; (8008d50 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008be0:	23ff      	movs	r3, #255	; 0xff
 8008be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008bf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008bf4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008bf8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008c04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	431a      	orrs	r2, r3
 8008c14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fa f95f 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008c2a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8008c2c:	bf00      	nop
 8008c2e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8008c30:	4b48      	ldr	r3, [pc, #288]	; (8008d54 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	2300      	movs	r3, #0
 8008c36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008c40:	23ff      	movs	r3, #255	; 0xff
 8008c42:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8008c46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008c4e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008c56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008c5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008c5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	461a      	mov	r2, r3
 8008c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c6a:	021b      	lsls	r3, r3, #8
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008c72:	4313      	orrs	r3, r2
 8008c74:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fa f932 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008c84:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8008c86:	bf00      	nop
 8008c88:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8008c8a:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	23f7      	movs	r3, #247	; 0xf7
 8008c90:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008c94:	234c      	movs	r3, #76	; 0x4c
 8008c96:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ca0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008ca4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008ca8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008cac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cb4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008cb8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008cbc:	041b      	lsls	r3, r3, #16
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008cd2:	f107 0310 	add.w	r3, r7, #16
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fa f905 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008cde:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008ce0:	bf00      	nop
 8008ce2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	23f7      	movs	r3, #247	; 0xf7
 8008cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008cee:	23d2      	movs	r3, #210	; 0xd2
 8008cf0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008d02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008d0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008d12:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008d16:	041b      	lsls	r3, r3, #16
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	431a      	orrs	r2, r3
 8008d22:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d2c:	f107 030c 	add.w	r3, r7, #12
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fa f8d8 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008d38:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8008d3a:	bf00      	nop
 8008d3c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	bf00      	nop
 8008d44:	3748      	adds	r7, #72	; 0x48
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200237f8 	.word	0x200237f8
 8008d50:	200237fc 	.word	0x200237fc
 8008d54:	20023800 	.word	0x20023800
 8008d58:	20023804 	.word	0x20023804
 8008d5c:	20023808 	.word	0x20023808
 8008d60:	2002380c 	.word	0x2002380c

08008d64 <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f7ff fecb 	bl	8008b08 <_Z41__static_initialization_and_destruction_0ii>
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <_Z4lerpfff>:
}

inline float lerp(float a, float b, float t)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	ed87 0a03 	vstr	s0, [r7, #12]
 8008d7e:	edc7 0a02 	vstr	s1, [r7, #8]
 8008d82:	ed87 1a01 	vstr	s2, [r7, #4]
    float value =  a + t * (b - a);
 8008d86:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da2:	edc7 7a05 	vstr	s15, [r7, #20]
    if( value < fminf(a,b))
 8008da6:	edd7 0a02 	vldr	s1, [r7, #8]
 8008daa:	ed97 0a03 	vldr	s0, [r7, #12]
 8008dae:	f01a f9ea 	bl	8023186 <fminf>
 8008db2:	eeb0 7a40 	vmov.f32	s14, s0
 8008db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc2:	d508      	bpl.n	8008dd6 <_Z4lerpfff+0x62>
    {
        return fminf(a,b);
 8008dc4:	edd7 0a02 	vldr	s1, [r7, #8]
 8008dc8:	ed97 0a03 	vldr	s0, [r7, #12]
 8008dcc:	f01a f9db 	bl	8023186 <fminf>
 8008dd0:	eef0 7a40 	vmov.f32	s15, s0
 8008dd4:	e019      	b.n	8008e0a <_Z4lerpfff+0x96>
    }
    if(value > fmaxf(a,b))
 8008dd6:	edd7 0a02 	vldr	s1, [r7, #8]
 8008dda:	ed97 0a03 	vldr	s0, [r7, #12]
 8008dde:	f01a f9b7 	bl	8023150 <fmaxf>
 8008de2:	eeb0 7a40 	vmov.f32	s14, s0
 8008de6:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df2:	dd08      	ble.n	8008e06 <_Z4lerpfff+0x92>
    {
        return fmaxf(a,b);
 8008df4:	edd7 0a02 	vldr	s1, [r7, #8]
 8008df8:	ed97 0a03 	vldr	s0, [r7, #12]
 8008dfc:	f01a f9a8 	bl	8023150 <fmaxf>
 8008e00:	eef0 7a40 	vmov.f32	s15, s0
 8008e04:	e001      	b.n	8008e0a <_Z4lerpfff+0x96>
    }
    return value;
 8008e06:	edd7 7a05 	vldr	s15, [r7, #20]
}
 8008e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <_Z9lerpColorN8touchgfx9colortypeES0_f>:

using namespace touchgfx;
inline colortype lerpColor(colortype x, colortype y, float alpha)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	ed2d 8b02 	vpush	{d8}
 8008e1a:	b090      	sub	sp, #64	; 0x40
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	ed87 0a01 	vstr	s0, [r7, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
        return color >> 16;
 8008e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f9 fc8a 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8008e34:	4603      	mov	r3, r0
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	b2db      	uxtb	r3, r3
    float r = lerp((float)Color::getRed(x), (float)Color::getRed(y), alpha);
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	623b      	str	r3, [r7, #32]
 8008e46:	f107 0320 	add.w	r3, r7, #32
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7f9 fc7c 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8008e50:	4603      	mov	r3, r0
 8008e52:	0c1b      	lsrs	r3, r3, #16
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	ed97 1a01 	vldr	s2, [r7, #4]
 8008e62:	eef0 0a67 	vmov.f32	s1, s15
 8008e66:	eeb0 0a48 	vmov.f32	s0, s16
 8008e6a:	f7ff ff83 	bl	8008d74 <_Z4lerpfff>
 8008e6e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	61fb      	str	r3, [r7, #28]
        return color >> 8;
 8008e76:	f107 031c 	add.w	r3, r7, #28
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f9 fc64 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8008e80:	4603      	mov	r3, r0
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	b2db      	uxtb	r3, r3
    float g = lerp((float)Color::getGreen(x), (float)Color::getGreen(y), alpha);
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	f107 0318 	add.w	r3, r7, #24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f9 fc56 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	0a1b      	lsrs	r3, r3, #8
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	ed97 1a01 	vldr	s2, [r7, #4]
 8008eae:	eef0 0a67 	vmov.f32	s1, s15
 8008eb2:	eeb0 0a48 	vmov.f32	s0, s16
 8008eb6:	f7ff ff5d 	bl	8008d74 <_Z4lerpfff>
 8008eba:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	617b      	str	r3, [r7, #20]
        return color;
 8008ec2:	f107 0314 	add.w	r3, r7, #20
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7f9 fc3e 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	b2db      	uxtb	r3, r3
    float b = lerp((float)Color::getBlue(x), (float)Color::getBlue(y), alpha);
 8008ed0:	ee07 3a90 	vmov	s15, r3
 8008ed4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	f107 0310 	add.w	r3, r7, #16
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7f9 fc31 	bl	8002748 <_ZNK8touchgfx9colortypecvmEv>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef2:	ed97 1a01 	vldr	s2, [r7, #4]
 8008ef6:	eef0 0a67 	vmov.f32	s1, s15
 8008efa:	eeb0 0a48 	vmov.f32	s0, s16
 8008efe:	f7ff ff39 	bl	8008d74 <_Z4lerpfff>
 8008f02:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    return Color::getColorFrom24BitRGB(r,g,b);
 8008f06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f0e:	edc7 7a00 	vstr	s15, [r7]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	b2d9      	uxtb	r1, r3
 8008f16:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1e:	edc7 7a00 	vstr	s15, [r7]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2e:	edc7 7a00 	vstr	s15, [r7]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
 8008f3a:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8008f3e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008f4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008f52:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008f56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008f5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008f5e:	041b      	lsls	r3, r3, #16
 8008f60:	461a      	mov	r2, r3
 8008f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7f9 ffb4 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
        return getColorFromRGB(red, green, blue);
 8008f82:	bf00      	nop
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3740      	adds	r7, #64	; 0x40
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	ecbd 8b02 	vpop	{d8}
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 8008f90:	b5b0      	push	{r4, r5, r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fe0e 	bl	8007bbc <_ZN11tempBoxBaseC1Ev>
 8008fa0:	4a73      	ldr	r2, [pc, #460]	; (8009170 <_ZN7tempBoxC1Ev+0x1e0>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	22dc      	movs	r2, #220	; 0xdc
 8008fb2:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8008fbc:	24db      	movs	r4, #219	; 0xdb
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	2c00      	cmp	r4, #0
 8008fc2:	db05      	blt.n	8008fd0 <_ZN7tempBoxC1Ev+0x40>
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f00a fdad 	bl	8013b24 <_ZN8touchgfx4LineC1Ev>
 8008fca:	3574      	adds	r5, #116	; 0x74
 8008fcc:	3c01      	subs	r4, #1
 8008fce:	e7f7      	b.n	8008fc0 <_ZN7tempBoxC1Ev+0x30>
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	f646 031c 	movw	r3, #26652	; 0x681c
 8008fd6:	4413      	add	r3, r2
 8008fd8:	24db      	movs	r4, #219	; 0xdb
 8008fda:	461d      	mov	r5, r3
 8008fdc:	2c00      	cmp	r4, #0
 8008fde:	db0c      	blt.n	8008ffa <_ZN7tempBoxC1Ev+0x6a>
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f9 ff7e 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f7fc fed8 	bl	8005da4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8008ff4:	3518      	adds	r5, #24
 8008ff6:	3c01      	subs	r4, #1
 8008ff8:	e7f0      	b.n	8008fdc <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2bdb      	cmp	r3, #219	; 0xdb
 8009002:	f300 80b0 	bgt.w	8009166 <_ZN7tempBoxC1Ev+0x1d6>
    {
        lines[i].setPosition(0,0,220,60);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2274      	movs	r2, #116	; 0x74
 800900a:	fb02 f303 	mul.w	r3, r2, r3
 800900e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	4413      	add	r3, r2
 8009016:	1d18      	adds	r0, r3, #4
 8009018:	233c      	movs	r3, #60	; 0x3c
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	23dc      	movs	r3, #220	; 0xdc
 800901e:	2200      	movs	r2, #0
 8009020:	2100      	movs	r1, #0
 8009022:	f7fc fb88 	bl	8005736 <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(255 - i , i, i % 40));
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4613      	mov	r3, r2
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	4413      	add	r3, r2
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	f646 0218 	movw	r2, #26648	; 0x6818
 8009034:	441a      	add	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4413      	add	r3, r2
 800903a:	1d1c      	adds	r4, r3, #4
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	43db      	mvns	r3, r3
 8009042:	b2dd      	uxtb	r5, r3
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	b2d8      	uxtb	r0, r3
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	4b4a      	ldr	r3, [pc, #296]	; (8009174 <_ZN7tempBoxC1Ev+0x1e4>)
 800904c:	fb83 1302 	smull	r1, r3, r3, r2
 8009050:	1119      	asrs	r1, r3, #4
 8009052:	17d3      	asrs	r3, r2, #31
 8009054:	1ac9      	subs	r1, r1, r3
 8009056:	460b      	mov	r3, r1
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	440b      	add	r3, r1
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	1ad1      	subs	r1, r2, r3
 8009060:	b2cb      	uxtb	r3, r1
 8009062:	462a      	mov	r2, r5
 8009064:	74fa      	strb	r2, [r7, #19]
 8009066:	4602      	mov	r2, r0
 8009068:	74ba      	strb	r2, [r7, #18]
 800906a:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800906c:	7cfb      	ldrb	r3, [r7, #19]
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	461a      	mov	r2, r3
 8009072:	7cbb      	ldrb	r3, [r7, #18]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	431a      	orrs	r2, r3
 8009078:	7c7b      	ldrb	r3, [r7, #17]
 800907a:	4313      	orrs	r3, r2
 800907c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009080:	f107 030c 	add.w	r3, r7, #12
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7f9 ff2e 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4619      	mov	r1, r3
 8009090:	4620      	mov	r0, r4
 8009092:	f7fc fea7 	bl	8005de4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2274      	movs	r2, #116	; 0x74
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4413      	add	r3, r2
 80090a6:	1d18      	adds	r0, r3, #4
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2174      	movs	r1, #116	; 0x74
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	4413      	add	r3, r2
 80090b4:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	335c      	adds	r3, #92	; 0x5c
 80090bc:	681c      	ldr	r4, [r3, #0]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4613      	mov	r3, r2
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	4413      	add	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	f646 0218 	movw	r2, #26648	; 0x6818
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4413      	add	r3, r2
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	47a0      	blx	r4
        lines[i].setStart(i,0);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2274      	movs	r2, #116	; 0x74
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
 80090e0:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	4413      	add	r3, r2
 80090e8:	3304      	adds	r3, #4
 80090ea:	2200      	movs	r2, #0
 80090ec:	6979      	ldr	r1, [r7, #20]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd fda6 	bl	8006c40 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2274      	movs	r2, #116	; 0x74
 80090f8:	fb02 f303 	mul.w	r3, r2, r3
 80090fc:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	3304      	adds	r3, #4
 8009106:	223c      	movs	r2, #60	; 0x3c
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd fdbe 	bl	8006c8c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2274      	movs	r2, #116	; 0x74
 8009114:	fb02 f303 	mul.w	r3, r2, r3
 8009118:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	4413      	add	r3, r2
 8009120:	3304      	adds	r3, #4
 8009122:	2101      	movs	r1, #1
 8009124:	4618      	mov	r0, r3
 8009126:	f7fd fdd7 	bl	8006cd8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2274      	movs	r2, #116	; 0x74
 800912e:	fb02 f303 	mul.w	r3, r2, r3
 8009132:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	3304      	adds	r3, #4
 800913c:	2101      	movs	r1, #1
 800913e:	4618      	mov	r0, r3
 8009140:	f00a fe36 	bl	8013db0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2274      	movs	r2, #116	; 0x74
 800914a:	fb02 f303 	mul.w	r3, r2, r3
 800914e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	f009 f8ef 	bl	801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	3301      	adds	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e74b      	b.n	8008ffe <_ZN7tempBoxC1Ev+0x6e>
    }

}
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bdb0      	pop	{r4, r5, r7, pc}
 8009170:	08025b9c 	.word	0x08025b9c
 8009174:	66666667 	.word	0x66666667

08009178 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fdfa 	bl	8007d7c <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 14;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	220e      	movs	r2, #14
 800918c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 20;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2214      	movs	r2, #20
 8009194:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 120;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2278      	movs	r2, #120	; 0x78
 800919c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 30;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	221e      	movs	r2, #30
 80091a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 180;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	22b4      	movs	r2, #180	; 0xb4
 80091ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 11;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	220b      	movs	r2, #11
 80091b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2205      	movs	r2, #5
 80091bc:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <_ZN7tempBox7mapTempEf>:
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB((tickCounter + i)% 255 , (255 - tickCounter + i) % 255, 0));
    }
}
 
colortype tempBox::mapTemp(float inTemp)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	ed87 0a00 	vstr	s0, [r7]
    /* Upper scale temperature */
    const float maxTemp = 200; 
 80091d4:	4b0d      	ldr	r3, [pc, #52]	; (800920c <_ZN7tempBox7mapTempEf+0x44>)
 80091d6:	617b      	str	r3, [r7, #20]
    const float p = inTemp/maxTemp;
 80091d8:	ed97 7a00 	vldr	s14, [r7]
 80091dc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8009210 <_ZN7tempBox7mapTempEf+0x48>
 80091e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091e4:	edc7 7a04 	vstr	s15, [r7, #16]
    const colortype lowerTempColor = colors::green;
 80091e8:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <_ZN7tempBox7mapTempEf+0x4c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60fb      	str	r3, [r7, #12]
    const colortype upperTempColor = colors::red;
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <_ZN7tempBox7mapTempEf+0x50>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60bb      	str	r3, [r7, #8]

    return lerpColor(lowerTempColor, upperTempColor, p);
 80091f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff fe0a 	bl	8008e14 <_Z9lerpColorN8touchgfx9colortypeES0_f>
 8009200:	4603      	mov	r3, r0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	43480000 	.word	0x43480000
 8009210:	43480000 	.word	0x43480000
 8009214:	20023818 	.word	0x20023818
 8009218:	20023814 	.word	0x20023814

0800921c <_ZN7tempBox6redrawEv>:

void tempBox::redraw()
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	; 0x28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
    for( int i = 0; i < LINES_NUM; i++)
 8009224:	2300      	movs	r3, #0
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	2bdb      	cmp	r3, #219	; 0xdb
 800922c:	f300 8092 	bgt.w	8009354 <_ZN7tempBox6redrawEv+0x138>
    {
        float p = (float)i / LINES_NUM;
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800923a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800935c <_ZN7tempBox6redrawEv+0x140>
 800923e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009242:	edc7 7a07 	vstr	s15, [r7, #28]
        float iInRange = p * numberOfValues;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009254:	ed97 7a07 	vldr	s14, [r7, #28]
 8009258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925c:	edc7 7a08 	vstr	s15, [r7, #32]

        if(iInRange < 0)
 8009260:	edd7 7a08 	vldr	s15, [r7, #32]
 8009264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926c:	d503      	bpl.n	8009276 <_ZN7tempBox6redrawEv+0x5a>
            iInRange = 0;
 800926e:	f04f 0300 	mov.w	r3, #0
 8009272:	623b      	str	r3, [r7, #32]
 8009274:	e017      	b.n	80092a6 <_ZN7tempBox6redrawEv+0x8a>
        else if(iInRange >= numberOfValues)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009284:	ed97 7a08 	vldr	s14, [r7, #32]
 8009288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800928c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009290:	db09      	blt.n	80092a6 <_ZN7tempBox6redrawEv+0x8a>
            iInRange = numberOfValues - 1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8009298:	3b01      	subs	r3, #1
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092a2:	edc7 7a08 	vstr	s15, [r7, #32]

        //if iInRange is abs value get data from array, else liniear interpolate between values
        int kCeil = ceilf(iInRange);
 80092a6:	ed97 0a08 	vldr	s0, [r7, #32]
 80092aa:	f019 fecd 	bl	8023048 <ceilf>
 80092ae:	eef0 7a40 	vmov.f32	s15, s0
 80092b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092b6:	ee17 3a90 	vmov	r3, s15
 80092ba:	61bb      	str	r3, [r7, #24]
        int kFloor = floorf(iInRange);
 80092bc:	ed97 0a08 	vldr	s0, [r7, #32]
 80092c0:	f019 ff04 	bl	80230cc <floorf>
 80092c4:	eef0 7a40 	vmov.f32	s15, s0
 80092c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092cc:	ee17 3a90 	vmov	r3, s15
 80092d0:	617b      	str	r3, [r7, #20]

        float alpha = iInRange - kFloor;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80092e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e4:	edc7 7a04 	vstr	s15, [r7, #16]
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	323e      	adds	r2, #62	; 0x3e
 80092ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	323e      	adds	r2, #62	; 0x3e
 8009300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009304:	ee07 3a10 	vmov	s14, r3
 8009308:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800930c:	ed97 1a04 	vldr	s2, [r7, #16]
 8009310:	eef0 0a47 	vmov.f32	s1, s14
 8009314:	eeb0 0a67 	vmov.f32	s0, s15
 8009318:	f7ff fd2c 	bl	8008d74 <_Z4lerpfff>
 800931c:	ed87 0a03 	vstr	s0, [r7, #12]
        
        const colortype tempColor = mapTemp(endValue);
 8009320:	ed97 0a03 	vldr	s0, [r7, #12]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7ff ff4f 	bl	80091c8 <_ZN7tempBox7mapTempEf>
 800932a:	4603      	mov	r3, r0
 800932c:	60bb      	str	r3, [r7, #8]
        linesPainter[i].setColor(tempColor);
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	4613      	mov	r3, r2
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	4413      	add	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	f646 0218 	movw	r2, #26648	; 0x6818
 800933c:	441a      	add	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	4618      	mov	r0, r3
 8009348:	f7fc fd4c 	bl	8005de4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    for( int i = 0; i < LINES_NUM; i++)
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	3301      	adds	r3, #1
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
 8009352:	e769      	b.n	8009228 <_ZN7tempBox6redrawEv+0xc>
    }
 8009354:	bf00      	nop
 8009356:	3728      	adds	r7, #40	; 0x28
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	435c0000 	.word	0x435c0000

08009360 <_Z41__static_initialization_and_destruction_0ii>:
 8009360:	b580      	push	{r7, lr}
 8009362:	b092      	sub	sp, #72	; 0x48
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b01      	cmp	r3, #1
 800936e:	f040 8114 	bne.w	800959a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009378:	4293      	cmp	r3, r2
 800937a:	f040 810e 	bne.w	800959a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800937e:	2300      	movs	r3, #0
 8009380:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009384:	2300      	movs	r3, #0
 8009386:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800938a:	2300      	movs	r3, #0
 800938c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009390:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009394:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800939c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80093a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80093a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	461a      	mov	r2, r3
 80093b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	431a      	orrs	r2, r3
 80093b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093bc:	4313      	orrs	r3, r2
 80093be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80093c2:	f107 0320 	add.w	r3, r7, #32
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7f9 fd8d 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80093ce:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80093d0:	bf00      	nop
 80093d2:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80093d4:	4b73      	ldr	r3, [pc, #460]	; (80095a4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	23ff      	movs	r3, #255	; 0xff
 80093da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80093de:	2300      	movs	r3, #0
 80093e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80093e4:	2300      	movs	r3, #0
 80093e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80093ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80093f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80093f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80093fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009402:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009406:	041b      	lsls	r3, r3, #16
 8009408:	461a      	mov	r2, r3
 800940a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	431a      	orrs	r2, r3
 8009412:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009416:	4313      	orrs	r3, r2
 8009418:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800941c:	f107 031c 	add.w	r3, r7, #28
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f7f9 fd60 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8009428:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800942a:	bf00      	nop
 800942c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800942e:	4b5e      	ldr	r3, [pc, #376]	; (80095a8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	2300      	movs	r3, #0
 8009434:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009438:	23ff      	movs	r3, #255	; 0xff
 800943a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800943e:	2300      	movs	r3, #0
 8009440:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009444:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009448:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800944c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009450:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009458:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800945c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009460:	041b      	lsls	r3, r3, #16
 8009462:	461a      	mov	r2, r3
 8009464:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	431a      	orrs	r2, r3
 800946c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009470:	4313      	orrs	r3, r2
 8009472:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009476:	f107 0318 	add.w	r3, r7, #24
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f7f9 fd33 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8009482:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009484:	bf00      	nop
 8009486:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009488:	4b48      	ldr	r3, [pc, #288]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	2300      	movs	r3, #0
 800948e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009492:	2300      	movs	r3, #0
 8009494:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009498:	23ff      	movs	r3, #255	; 0xff
 800949a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800949e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80094a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80094a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80094aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80094ae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80094b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80094b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80094ba:	041b      	lsls	r3, r3, #16
 80094bc:	461a      	mov	r2, r3
 80094be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094c2:	021b      	lsls	r3, r3, #8
 80094c4:	431a      	orrs	r2, r3
 80094c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80094d0:	f107 0314 	add.w	r3, r7, #20
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f9 fd06 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 80094dc:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80094de:	bf00      	nop
 80094e0:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80094e2:	4b33      	ldr	r3, [pc, #204]	; (80095b0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	23f7      	movs	r3, #247	; 0xf7
 80094e8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80094ec:	234c      	movs	r3, #76	; 0x4c
 80094ee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80094f2:	2302      	movs	r3, #2
 80094f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80094f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80094fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009500:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009504:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009508:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800950c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009510:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	461a      	mov	r2, r3
 8009518:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	431a      	orrs	r2, r3
 8009520:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009524:	4313      	orrs	r3, r2
 8009526:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800952a:	f107 0310 	add.w	r3, r7, #16
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7f9 fcd9 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8009536:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009538:	bf00      	nop
 800953a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800953c:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	23f7      	movs	r3, #247	; 0xf7
 8009542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009546:	23d2      	movs	r3, #210	; 0xd2
 8009548:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800954c:	2302      	movs	r3, #2
 800954e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009556:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800955a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009562:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800956a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800956e:	041b      	lsls	r3, r3, #16
 8009570:	461a      	mov	r2, r3
 8009572:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	431a      	orrs	r2, r3
 800957a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800957e:	4313      	orrs	r3, r2
 8009580:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009584:	f107 030c 	add.w	r3, r7, #12
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f7f9 fcac 	bl	8002ee8 <_ZN8touchgfx9colortypeC1Em>
 8009590:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009592:	bf00      	nop
 8009594:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009596:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	bf00      	nop
 800959c:	3748      	adds	r7, #72	; 0x48
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20023810 	.word	0x20023810
 80095a8:	20023814 	.word	0x20023814
 80095ac:	20023818 	.word	0x20023818
 80095b0:	2002381c 	.word	0x2002381c
 80095b4:	20023820 	.word	0x20023820
 80095b8:	20023824 	.word	0x20023824

080095bc <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
 80095c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80095c4:	2001      	movs	r0, #1
 80095c6:	f7ff fecb 	bl	8009360 <_Z41__static_initialization_and_destruction_0ii>
 80095ca:	bd80      	pop	{r7, pc}

080095cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095d0:	4b06      	ldr	r3, [pc, #24]	; (80095ec <SystemInit+0x20>)
 80095d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d6:	4a05      	ldr	r2, [pc, #20]	; (80095ec <SystemInit+0x20>)
 80095d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80095e0:	bf00      	nop
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	e000ed00 	.word	0xe000ed00

080095f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80095f4:	2003      	movs	r0, #3
 80095f6:	f000 fd9e 	bl	800a136 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80095fa:	200f      	movs	r0, #15
 80095fc:	f7f8 fad2 	bl	8001ba4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009600:	f7f8 faa8 	bl	8001b54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <HAL_IncTick+0x20>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	4b06      	ldr	r3, [pc, #24]	; (8009630 <HAL_IncTick+0x24>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4413      	add	r3, r2
 800961c:	4a04      	ldr	r2, [pc, #16]	; (8009630 <HAL_IncTick+0x24>)
 800961e:	6013      	str	r3, [r2, #0]
}
 8009620:	bf00      	nop
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20000014 	.word	0x20000014
 8009630:	20056a94 	.word	0x20056a94

08009634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
  return uwTick;
 8009638:	4b03      	ldr	r3, [pc, #12]	; (8009648 <HAL_GetTick+0x14>)
 800963a:	681b      	ldr	r3, [r3, #0]
}
 800963c:	4618      	mov	r0, r3
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20056a94 	.word	0x20056a94

0800964c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009654:	f7ff ffee 	bl	8009634 <HAL_GetTick>
 8009658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d005      	beq.n	8009672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <HAL_Delay+0x44>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009672:	bf00      	nop
 8009674:	f7ff ffde 	bl	8009634 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	429a      	cmp	r2, r3
 8009682:	d8f7      	bhi.n	8009674 <HAL_Delay+0x28>
  {
  }
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000014 	.word	0x20000014

08009694 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e0ed      	b.n	8009882 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d102      	bne.n	80096b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7f7 f9d8 	bl	8000a68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0202 	bic.w	r2, r2, #2
 80096c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096c8:	f7ff ffb4 	bl	8009634 <HAL_GetTick>
 80096cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096ce:	e012      	b.n	80096f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096d0:	f7ff ffb0 	bl	8009634 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b0a      	cmp	r3, #10
 80096dc:	d90b      	bls.n	80096f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2205      	movs	r2, #5
 80096ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e0c5      	b.n	8009882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e5      	bne.n	80096d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0201 	orr.w	r2, r2, #1
 8009712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009714:	f7ff ff8e 	bl	8009634 <HAL_GetTick>
 8009718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800971a:	e012      	b.n	8009742 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800971c:	f7ff ff8a 	bl	8009634 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b0a      	cmp	r3, #10
 8009728:	d90b      	bls.n	8009742 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2205      	movs	r2, #5
 800973a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e09f      	b.n	8009882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0e5      	beq.n	800971c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7e1b      	ldrb	r3, [r3, #24]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d108      	bne.n	800976a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	e007      	b.n	800977a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7e5b      	ldrb	r3, [r3, #25]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d108      	bne.n	8009794 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	e007      	b.n	80097a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7e9b      	ldrb	r3, [r3, #26]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d108      	bne.n	80097be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0220 	orr.w	r2, r2, #32
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	e007      	b.n	80097ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0220 	bic.w	r2, r2, #32
 80097cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7edb      	ldrb	r3, [r3, #27]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d108      	bne.n	80097e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0210 	bic.w	r2, r2, #16
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e007      	b.n	80097f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0210 	orr.w	r2, r2, #16
 80097f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	7f1b      	ldrb	r3, [r3, #28]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d108      	bne.n	8009812 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0208 	orr.w	r2, r2, #8
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e007      	b.n	8009822 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0208 	bic.w	r2, r2, #8
 8009820:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7f5b      	ldrb	r3, [r3, #29]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d108      	bne.n	800983c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0204 	orr.w	r2, r2, #4
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e007      	b.n	800984c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f022 0204 	bic.w	r2, r2, #4
 800984a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	ea42 0103 	orr.w	r1, r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	1e5a      	subs	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b01      	cmp	r3, #1
 800989c:	d12e      	bne.n	80098fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0201 	bic.w	r2, r2, #1
 80098b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80098b6:	f7ff febd 	bl	8009634 <HAL_GetTick>
 80098ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80098bc:	e012      	b.n	80098e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80098be:	f7ff feb9 	bl	8009634 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b0a      	cmp	r3, #10
 80098ca:	d90b      	bls.n	80098e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2205      	movs	r2, #5
 80098dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e012      	b.n	800990a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e5      	bne.n	80098be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e006      	b.n	800990a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
  }
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009912:	b480      	push	{r7}
 8009914:	b087      	sub	sp, #28
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
 800991e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009926:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d003      	beq.n	8009936 <HAL_CAN_GetRxMessage+0x24>
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	2b02      	cmp	r3, #2
 8009932:	f040 80f3 	bne.w	8009b1c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10e      	bne.n	800995a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d116      	bne.n	8009978 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e0e7      	b.n	8009b2a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d107      	bne.n	8009978 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e0d8      	b.n	8009b2a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	331b      	adds	r3, #27
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	4413      	add	r3, r2
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0204 	and.w	r2, r3, #4
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10c      	bne.n	80099b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	331b      	adds	r3, #27
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	4413      	add	r3, r2
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	0d5b      	lsrs	r3, r3, #21
 80099a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	e00b      	b.n	80099c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	331b      	adds	r3, #27
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	4413      	add	r3, r2
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	08db      	lsrs	r3, r3, #3
 80099c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	331b      	adds	r3, #27
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	4413      	add	r3, r2
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0202 	and.w	r2, r3, #2
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	331b      	adds	r3, #27
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	4413      	add	r3, r2
 80099ea:	3304      	adds	r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 020f 	and.w	r2, r3, #15
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	331b      	adds	r3, #27
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	4413      	add	r3, r2
 8009a02:	3304      	adds	r3, #4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	0a1b      	lsrs	r3, r3, #8
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	331b      	adds	r3, #27
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	4413      	add	r3, r2
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	0c1b      	lsrs	r3, r3, #16
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	0a1a      	lsrs	r2, r3, #8
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	0c1a      	lsrs	r2, r3, #16
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	3302      	adds	r3, #2
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	011b      	lsls	r3, r3, #4
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	0e1a      	lsrs	r2, r3, #24
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	3303      	adds	r3, #3
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	011b      	lsls	r3, r3, #4
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	0a1a      	lsrs	r2, r3, #8
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	3305      	adds	r3, #5
 8009ab8:	b2d2      	uxtb	r2, r2
 8009aba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	011b      	lsls	r3, r3, #4
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	0c1a      	lsrs	r2, r3, #16
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	3306      	adds	r3, #6
 8009ad2:	b2d2      	uxtb	r2, r2
 8009ad4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	011b      	lsls	r3, r3, #4
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	0e1a      	lsrs	r2, r3, #24
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	3307      	adds	r3, #7
 8009aec:	b2d2      	uxtb	r2, r2
 8009aee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d108      	bne.n	8009b08 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f042 0220 	orr.w	r2, r2, #32
 8009b04:	60da      	str	r2, [r3, #12]
 8009b06:	e007      	b.n	8009b18 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0220 	orr.w	r2, r2, #32
 8009b16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e006      	b.n	8009b2a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
  }
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b08a      	sub	sp, #40	; 0x28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d07c      	beq.n	8009c76 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d023      	beq.n	8009bce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	f003 0302 	and.w	r3, r3, #2
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f983 	bl	8009ea4 <HAL_CAN_TxMailbox0CompleteCallback>
 8009b9e:	e016      	b.n	8009bce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d004      	beq.n	8009bb4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb2:	e00c      	b.n	8009bce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	f003 0308 	and.w	r3, r3, #8
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc6:	e002      	b.n	8009bce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f989 	bl	8009ee0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d024      	beq.n	8009c22 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f963 	bl	8009eb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8009bf2:	e016      	b.n	8009c22 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d004      	beq.n	8009c08 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
 8009c06:	e00c      	b.n	8009c22 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d004      	beq.n	8009c1c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1a:	e002      	b.n	8009c22 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f969 	bl	8009ef4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d024      	beq.n	8009c76 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f943 	bl	8009ecc <HAL_CAN_TxMailbox2CompleteCallback>
 8009c46:	e016      	b.n	8009c76 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c58:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5a:	e00c      	b.n	8009c76 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c6e:	e002      	b.n	8009c76 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f949 	bl	8009f08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f003 0308 	and.w	r3, r3, #8
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d007      	beq.n	8009c9a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2210      	movs	r2, #16
 8009c98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f003 0308 	and.w	r3, r3, #8
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2208      	movs	r2, #8
 8009cb4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f930 	bl	8009f1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7f6 ff7b 	bl	8000bd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00c      	beq.n	8009cfe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	f003 0310 	and.w	r3, r3, #16
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d007      	beq.n	8009cfe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f003 0308 	and.w	r3, r3, #8
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2208      	movs	r2, #8
 8009d18:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f912 	bl	8009f44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	f003 0310 	and.w	r3, r3, #16
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d009      	beq.n	8009d3e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	f003 0303 	and.w	r3, r3, #3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f8f9 	bl	8009f30 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	f003 0310 	and.w	r3, r3, #16
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d006      	beq.n	8009d60 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2210      	movs	r2, #16
 8009d58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f8fc 	bl	8009f58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d006      	beq.n	8009d82 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2208      	movs	r2, #8
 8009d7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f8f5 	bl	8009f6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d07b      	beq.n	8009e84 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d072      	beq.n	8009e7c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d008      	beq.n	8009db2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	f043 0301 	orr.w	r3, r3, #1
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d008      	beq.n	8009dce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	f043 0302 	orr.w	r3, r3, #2
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d008      	beq.n	8009dea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	f043 0304 	orr.w	r3, r3, #4
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d043      	beq.n	8009e7c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d03e      	beq.n	8009e7c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e04:	2b60      	cmp	r3, #96	; 0x60
 8009e06:	d02b      	beq.n	8009e60 <HAL_CAN_IRQHandler+0x32a>
 8009e08:	2b60      	cmp	r3, #96	; 0x60
 8009e0a:	d82e      	bhi.n	8009e6a <HAL_CAN_IRQHandler+0x334>
 8009e0c:	2b50      	cmp	r3, #80	; 0x50
 8009e0e:	d022      	beq.n	8009e56 <HAL_CAN_IRQHandler+0x320>
 8009e10:	2b50      	cmp	r3, #80	; 0x50
 8009e12:	d82a      	bhi.n	8009e6a <HAL_CAN_IRQHandler+0x334>
 8009e14:	2b40      	cmp	r3, #64	; 0x40
 8009e16:	d019      	beq.n	8009e4c <HAL_CAN_IRQHandler+0x316>
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	d826      	bhi.n	8009e6a <HAL_CAN_IRQHandler+0x334>
 8009e1c:	2b30      	cmp	r3, #48	; 0x30
 8009e1e:	d010      	beq.n	8009e42 <HAL_CAN_IRQHandler+0x30c>
 8009e20:	2b30      	cmp	r3, #48	; 0x30
 8009e22:	d822      	bhi.n	8009e6a <HAL_CAN_IRQHandler+0x334>
 8009e24:	2b10      	cmp	r3, #16
 8009e26:	d002      	beq.n	8009e2e <HAL_CAN_IRQHandler+0x2f8>
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d005      	beq.n	8009e38 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009e2c:	e01d      	b.n	8009e6a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	f043 0308 	orr.w	r3, r3, #8
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e36:	e019      	b.n	8009e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	f043 0310 	orr.w	r3, r3, #16
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e40:	e014      	b.n	8009e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	f043 0320 	orr.w	r3, r3, #32
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e4a:	e00f      	b.n	8009e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e54:	e00a      	b.n	8009e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e5e:	e005      	b.n	8009e6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e68:	e000      	b.n	8009e6c <HAL_CAN_IRQHandler+0x336>
            break;
 8009e6a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	699a      	ldr	r2, [r3, #24]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e7a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2204      	movs	r2, #4
 8009e82:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d008      	beq.n	8009e9c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f872 	bl	8009f80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009e9c:	bf00      	nop
 8009e9e:	3728      	adds	r7, #40	; 0x28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <__NVIC_SetPriorityGrouping>:
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009fa4:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009fbc:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009fc2:	4a04      	ldr	r2, [pc, #16]	; (8009fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	60d3      	str	r3, [r2, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	e000ed00 	.word	0xe000ed00
 8009fd8:	05fa0000 	.word	0x05fa0000

08009fdc <__NVIC_GetPriorityGrouping>:
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fe0:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	0a1b      	lsrs	r3, r3, #8
 8009fe6:	f003 0307 	and.w	r3, r3, #7
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	e000ed00 	.word	0xe000ed00

08009ff8 <__NVIC_EnableIRQ>:
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a006:	2b00      	cmp	r3, #0
 800a008:	db0b      	blt.n	800a022 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a00a:	79fb      	ldrb	r3, [r7, #7]
 800a00c:	f003 021f 	and.w	r2, r3, #31
 800a010:	4907      	ldr	r1, [pc, #28]	; (800a030 <__NVIC_EnableIRQ+0x38>)
 800a012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a016:	095b      	lsrs	r3, r3, #5
 800a018:	2001      	movs	r0, #1
 800a01a:	fa00 f202 	lsl.w	r2, r0, r2
 800a01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	e000e100 	.word	0xe000e100

0800a034 <__NVIC_DisableIRQ>:
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a03e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a042:	2b00      	cmp	r3, #0
 800a044:	db12      	blt.n	800a06c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	f003 021f 	and.w	r2, r3, #31
 800a04c:	490a      	ldr	r1, [pc, #40]	; (800a078 <__NVIC_DisableIRQ+0x44>)
 800a04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	2001      	movs	r0, #1
 800a056:	fa00 f202 	lsl.w	r2, r0, r2
 800a05a:	3320      	adds	r3, #32
 800a05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a060:	f3bf 8f4f 	dsb	sy
}
 800a064:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a066:	f3bf 8f6f 	isb	sy
}
 800a06a:	bf00      	nop
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	e000e100 	.word	0xe000e100

0800a07c <__NVIC_SetPriority>:
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	6039      	str	r1, [r7, #0]
 800a086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	db0a      	blt.n	800a0a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	b2da      	uxtb	r2, r3
 800a094:	490c      	ldr	r1, [pc, #48]	; (800a0c8 <__NVIC_SetPriority+0x4c>)
 800a096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a09a:	0112      	lsls	r2, r2, #4
 800a09c:	b2d2      	uxtb	r2, r2
 800a09e:	440b      	add	r3, r1
 800a0a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a0a4:	e00a      	b.n	800a0bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	4908      	ldr	r1, [pc, #32]	; (800a0cc <__NVIC_SetPriority+0x50>)
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	3b04      	subs	r3, #4
 800a0b4:	0112      	lsls	r2, r2, #4
 800a0b6:	b2d2      	uxtb	r2, r2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	761a      	strb	r2, [r3, #24]
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	e000e100 	.word	0xe000e100
 800a0cc:	e000ed00 	.word	0xe000ed00

0800a0d0 <NVIC_EncodePriority>:
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b089      	sub	sp, #36	; 0x24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f003 0307 	and.w	r3, r3, #7
 800a0e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	f1c3 0307 	rsb	r3, r3, #7
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	bf28      	it	cs
 800a0ee:	2304      	movcs	r3, #4
 800a0f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	2b06      	cmp	r3, #6
 800a0f8:	d902      	bls.n	800a100 <NVIC_EncodePriority+0x30>
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3b03      	subs	r3, #3
 800a0fe:	e000      	b.n	800a102 <NVIC_EncodePriority+0x32>
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	fa02 f303 	lsl.w	r3, r2, r3
 800a10e:	43da      	mvns	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	401a      	ands	r2, r3
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a118:	f04f 31ff 	mov.w	r1, #4294967295
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	fa01 f303 	lsl.w	r3, r1, r3
 800a122:	43d9      	mvns	r1, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a128:	4313      	orrs	r3, r2
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3724      	adds	r7, #36	; 0x24
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff ff28 	bl	8009f94 <__NVIC_SetPriorityGrouping>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a15e:	f7ff ff3d 	bl	8009fdc <__NVIC_GetPriorityGrouping>
 800a162:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	6978      	ldr	r0, [r7, #20]
 800a16a:	f7ff ffb1 	bl	800a0d0 <NVIC_EncodePriority>
 800a16e:	4602      	mov	r2, r0
 800a170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff ff80 	bl	800a07c <__NVIC_SetPriority>
}
 800a17c:	bf00      	nop
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a18e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff ff30 	bl	8009ff8 <__NVIC_EnableIRQ>
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff ff40 	bl	800a034 <__NVIC_DisableIRQ>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e054      	b.n	800a278 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7f5b      	ldrb	r3, [r3, #29]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d105      	bne.n	800a1e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7f6 fe3c 	bl	8000e5c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	791b      	ldrb	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10c      	bne.n	800a20c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a22      	ldr	r2, [pc, #136]	; (800a280 <HAL_CRC_Init+0xc4>)
 800a1f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0218 	bic.w	r2, r2, #24
 800a208:	609a      	str	r2, [r3, #8]
 800a20a:	e00c      	b.n	800a226 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6899      	ldr	r1, [r3, #8]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	461a      	mov	r2, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f834 	bl	800a284 <HAL_CRCEx_Polynomial_Set>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e028      	b.n	800a278 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	795b      	ldrb	r3, [r3, #5]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d105      	bne.n	800a23a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f04f 32ff 	mov.w	r2, #4294967295
 800a236:	611a      	str	r2, [r3, #16]
 800a238:	e004      	b.n	800a244 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	6912      	ldr	r2, [r2, #16]
 800a242:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695a      	ldr	r2, [r3, #20]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	699a      	ldr	r2, [r3, #24]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	04c11db7 	.word	0x04c11db7

0800a284 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a294:	231f      	movs	r3, #31
 800a296:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a298:	bf00      	nop
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1e5a      	subs	r2, r3, #1
 800a29e:	613a      	str	r2, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d009      	beq.n	800a2b8 <HAL_CRCEx_Polynomial_Set+0x34>
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f003 031f 	and.w	r3, r3, #31
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0f0      	beq.n	800a29a <HAL_CRCEx_Polynomial_Set+0x16>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b18      	cmp	r3, #24
 800a2bc:	d846      	bhi.n	800a34c <HAL_CRCEx_Polynomial_Set+0xc8>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a353 	.word	0x0800a353
 800a2c8:	0800a34d 	.word	0x0800a34d
 800a2cc:	0800a34d 	.word	0x0800a34d
 800a2d0:	0800a34d 	.word	0x0800a34d
 800a2d4:	0800a34d 	.word	0x0800a34d
 800a2d8:	0800a34d 	.word	0x0800a34d
 800a2dc:	0800a34d 	.word	0x0800a34d
 800a2e0:	0800a34d 	.word	0x0800a34d
 800a2e4:	0800a341 	.word	0x0800a341
 800a2e8:	0800a34d 	.word	0x0800a34d
 800a2ec:	0800a34d 	.word	0x0800a34d
 800a2f0:	0800a34d 	.word	0x0800a34d
 800a2f4:	0800a34d 	.word	0x0800a34d
 800a2f8:	0800a34d 	.word	0x0800a34d
 800a2fc:	0800a34d 	.word	0x0800a34d
 800a300:	0800a34d 	.word	0x0800a34d
 800a304:	0800a335 	.word	0x0800a335
 800a308:	0800a34d 	.word	0x0800a34d
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a34d 	.word	0x0800a34d
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a34d 	.word	0x0800a34d
 800a31c:	0800a34d 	.word	0x0800a34d
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	0800a329 	.word	0x0800a329
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b06      	cmp	r3, #6
 800a32c:	d913      	bls.n	800a356 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a332:	e010      	b.n	800a356 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b07      	cmp	r3, #7
 800a338:	d90f      	bls.n	800a35a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a33e:	e00c      	b.n	800a35a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b0f      	cmp	r3, #15
 800a344:	d90b      	bls.n	800a35e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a34a:	e008      	b.n	800a35e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	75fb      	strb	r3, [r7, #23]
      break;
 800a350:	e006      	b.n	800a360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a352:	bf00      	nop
 800a354:	e004      	b.n	800a360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a356:	bf00      	nop
 800a358:	e002      	b.n	800a360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a35a:	bf00      	nop
 800a35c:	e000      	b.n	800a360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a35e:	bf00      	nop
  }
  if (status == HAL_OK)
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10d      	bne.n	800a382 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f023 0118 	bic.w	r1, r3, #24
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
}
 800a384:	4618      	mov	r0, r3
 800a386:	371c      	adds	r7, #28
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d004      	beq.n	800a3ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2280      	movs	r2, #128	; 0x80
 800a3a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e00c      	b.n	800a3c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0201 	bic.w	r2, r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e049      	b.n	800a47a <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d106      	bne.n	800a400 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7f6 fd86 	bl	8000f0c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	f023 0107 	bic.w	r1, r3, #7
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a43a:	4b12      	ldr	r3, [pc, #72]	; (800a484 <HAL_DMA2D_Init+0xb0>)
 800a43c:	4013      	ands	r3, r2
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	68d1      	ldr	r1, [r2, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	430b      	orrs	r3, r1
 800a448:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a450:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	051a      	lsls	r2, r3, #20
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	055b      	lsls	r3, r3, #21
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	ffffc000 	.word	0xffffc000

0800a488 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d026      	beq.n	800a4f8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d021      	beq.n	800a4f8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4c2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c8:	f043 0201 	orr.w	r2, r3, #1
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2204      	movs	r2, #4
 800a4dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d026      	beq.n	800a550 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d021      	beq.n	800a550 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a51a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2220      	movs	r2, #32
 800a522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a528:	f043 0202 	orr.w	r2, r3, #2
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2204      	movs	r2, #4
 800a534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d003      	beq.n	800a550 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d026      	beq.n	800a5a8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a560:	2b00      	cmp	r3, #0
 800a562:	d021      	beq.n	800a5a8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a572:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2208      	movs	r2, #8
 800a57a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a580:	f043 0204 	orr.w	r2, r3, #4
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2204      	movs	r2, #4
 800a58c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d013      	beq.n	800a5da <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00e      	beq.n	800a5da <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f853 	bl	800a680 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f003 0302 	and.w	r3, r3, #2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d024      	beq.n	800a62e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d01f      	beq.n	800a62e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a5fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2202      	movs	r2, #2
 800a604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01f      	beq.n	800a678 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d01a      	beq.n	800a678 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a650:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2210      	movs	r2, #16
 800a658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f80e 	bl	800a694 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_DMA2D_ConfigLayer+0x20>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e084      	b.n	800a7d2 <HAL_DMA2D_ConfigLayer+0x12a>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	4413      	add	r3, r2
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	3320      	adds	r3, #32
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	041b      	lsls	r3, r3, #16
 800a6f4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a6fc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a704:	4313      	orrs	r3, r2
 800a706:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800a708:	4b35      	ldr	r3, [pc, #212]	; (800a7e0 <HAL_DMA2D_ConfigLayer+0x138>)
 800a70a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	2b0a      	cmp	r3, #10
 800a712:	d003      	beq.n	800a71c <HAL_DMA2D_ConfigLayer+0x74>
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	2b09      	cmp	r3, #9
 800a71a:	d107      	bne.n	800a72c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	e005      	b.n	800a738 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	061b      	lsls	r3, r3, #24
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d120      	bne.n	800a780 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	43db      	mvns	r3, r3
 800a748:	ea02 0103 	and.w	r1, r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	430a      	orrs	r2, r1
 800a754:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	6812      	ldr	r2, [r2, #0]
 800a75e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b0a      	cmp	r3, #10
 800a766:	d003      	beq.n	800a770 <HAL_DMA2D_ConfigLayer+0xc8>
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	2b09      	cmp	r3, #9
 800a76e:	d127      	bne.n	800a7c0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a77c:	629a      	str	r2, [r3, #40]	; 0x28
 800a77e:	e01f      	b.n	800a7c0 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69da      	ldr	r2, [r3, #28]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	43db      	mvns	r3, r3
 800a78a:	ea02 0103 	and.w	r1, r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	430a      	orrs	r2, r1
 800a796:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	6812      	ldr	r2, [r2, #0]
 800a7a0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2b0a      	cmp	r3, #10
 800a7a8:	d003      	beq.n	800a7b2 <HAL_DMA2D_ConfigLayer+0x10a>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	2b09      	cmp	r3, #9
 800a7b0:	d106      	bne.n	800a7c0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a7be:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	ff33000f 	.word	0xff33000f

0800a7e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b089      	sub	sp, #36	; 0x24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	61fb      	str	r3, [r7, #28]
 800a802:	e175      	b.n	800aaf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a804:	2201      	movs	r2, #1
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4013      	ands	r3, r2
 800a816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	f040 8164 	bne.w	800aaea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d00b      	beq.n	800a842 <HAL_GPIO_Init+0x5e>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d007      	beq.n	800a842 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a836:	2b11      	cmp	r3, #17
 800a838:	d003      	beq.n	800a842 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2b12      	cmp	r3, #18
 800a840:	d130      	bne.n	800a8a4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	2203      	movs	r2, #3
 800a84e:	fa02 f303 	lsl.w	r3, r2, r3
 800a852:	43db      	mvns	r3, r3
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	4013      	ands	r3, r2
 800a858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	fa02 f303 	lsl.w	r3, r2, r3
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	4313      	orrs	r3, r2
 800a86a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a878:	2201      	movs	r2, #1
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	fa02 f303 	lsl.w	r3, r2, r3
 800a880:	43db      	mvns	r3, r3
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	4013      	ands	r3, r2
 800a886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	091b      	lsrs	r3, r3, #4
 800a88e:	f003 0201 	and.w	r2, r3, #1
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	fa02 f303 	lsl.w	r3, r2, r3
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69ba      	ldr	r2, [r7, #24]
 800a8d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d003      	beq.n	800a8e4 <HAL_GPIO_Init+0x100>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b12      	cmp	r3, #18
 800a8e2:	d123      	bne.n	800a92c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	08da      	lsrs	r2, r3, #3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3208      	adds	r2, #8
 800a8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	f003 0307 	and.w	r3, r3, #7
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	220f      	movs	r2, #15
 800a8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a900:	43db      	mvns	r3, r3
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	4013      	ands	r3, r2
 800a906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	fa02 f303 	lsl.w	r3, r2, r3
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	08da      	lsrs	r2, r3, #3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3208      	adds	r2, #8
 800a926:	69b9      	ldr	r1, [r7, #24]
 800a928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	2203      	movs	r2, #3
 800a938:	fa02 f303 	lsl.w	r3, r2, r3
 800a93c:	43db      	mvns	r3, r3
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	4013      	ands	r3, r2
 800a942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f003 0203 	and.w	r2, r3, #3
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	fa02 f303 	lsl.w	r3, r2, r3
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	4313      	orrs	r3, r2
 800a958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80be 	beq.w	800aaea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a96e:	4b66      	ldr	r3, [pc, #408]	; (800ab08 <HAL_GPIO_Init+0x324>)
 800a970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a972:	4a65      	ldr	r2, [pc, #404]	; (800ab08 <HAL_GPIO_Init+0x324>)
 800a974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a978:	6453      	str	r3, [r2, #68]	; 0x44
 800a97a:	4b63      	ldr	r3, [pc, #396]	; (800ab08 <HAL_GPIO_Init+0x324>)
 800a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a986:	4a61      	ldr	r2, [pc, #388]	; (800ab0c <HAL_GPIO_Init+0x328>)
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	089b      	lsrs	r3, r3, #2
 800a98c:	3302      	adds	r3, #2
 800a98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a992:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	220f      	movs	r2, #15
 800a99e:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a2:	43db      	mvns	r3, r3
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a58      	ldr	r2, [pc, #352]	; (800ab10 <HAL_GPIO_Init+0x32c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d037      	beq.n	800aa22 <HAL_GPIO_Init+0x23e>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a57      	ldr	r2, [pc, #348]	; (800ab14 <HAL_GPIO_Init+0x330>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d031      	beq.n	800aa1e <HAL_GPIO_Init+0x23a>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a56      	ldr	r2, [pc, #344]	; (800ab18 <HAL_GPIO_Init+0x334>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d02b      	beq.n	800aa1a <HAL_GPIO_Init+0x236>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a55      	ldr	r2, [pc, #340]	; (800ab1c <HAL_GPIO_Init+0x338>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d025      	beq.n	800aa16 <HAL_GPIO_Init+0x232>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a54      	ldr	r2, [pc, #336]	; (800ab20 <HAL_GPIO_Init+0x33c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d01f      	beq.n	800aa12 <HAL_GPIO_Init+0x22e>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a53      	ldr	r2, [pc, #332]	; (800ab24 <HAL_GPIO_Init+0x340>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d019      	beq.n	800aa0e <HAL_GPIO_Init+0x22a>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a52      	ldr	r2, [pc, #328]	; (800ab28 <HAL_GPIO_Init+0x344>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d013      	beq.n	800aa0a <HAL_GPIO_Init+0x226>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a51      	ldr	r2, [pc, #324]	; (800ab2c <HAL_GPIO_Init+0x348>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00d      	beq.n	800aa06 <HAL_GPIO_Init+0x222>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a50      	ldr	r2, [pc, #320]	; (800ab30 <HAL_GPIO_Init+0x34c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d007      	beq.n	800aa02 <HAL_GPIO_Init+0x21e>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a4f      	ldr	r2, [pc, #316]	; (800ab34 <HAL_GPIO_Init+0x350>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d101      	bne.n	800a9fe <HAL_GPIO_Init+0x21a>
 800a9fa:	2309      	movs	r3, #9
 800a9fc:	e012      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800a9fe:	230a      	movs	r3, #10
 800aa00:	e010      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa02:	2308      	movs	r3, #8
 800aa04:	e00e      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa06:	2307      	movs	r3, #7
 800aa08:	e00c      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa0a:	2306      	movs	r3, #6
 800aa0c:	e00a      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa0e:	2305      	movs	r3, #5
 800aa10:	e008      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa12:	2304      	movs	r3, #4
 800aa14:	e006      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa16:	2303      	movs	r3, #3
 800aa18:	e004      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	e002      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e000      	b.n	800aa24 <HAL_GPIO_Init+0x240>
 800aa22:	2300      	movs	r3, #0
 800aa24:	69fa      	ldr	r2, [r7, #28]
 800aa26:	f002 0203 	and.w	r2, r2, #3
 800aa2a:	0092      	lsls	r2, r2, #2
 800aa2c:	4093      	lsls	r3, r2
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800aa34:	4935      	ldr	r1, [pc, #212]	; (800ab0c <HAL_GPIO_Init+0x328>)
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	089b      	lsrs	r3, r3, #2
 800aa3a:	3302      	adds	r3, #2
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aa42:	4b3d      	ldr	r3, [pc, #244]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	43db      	mvns	r3, r3
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aa66:	4a34      	ldr	r2, [pc, #208]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800aa6c:	4b32      	ldr	r3, [pc, #200]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	43db      	mvns	r3, r3
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aa90:	4a29      	ldr	r2, [pc, #164]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aa96:	4b28      	ldr	r3, [pc, #160]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	43db      	mvns	r3, r3
 800aaa0:	69ba      	ldr	r2, [r7, #24]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aaba:	4a1f      	ldr	r2, [pc, #124]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	43db      	mvns	r3, r3
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	4013      	ands	r3, r2
 800aace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aae4:	4a14      	ldr	r2, [pc, #80]	; (800ab38 <HAL_GPIO_Init+0x354>)
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	3301      	adds	r3, #1
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	2b0f      	cmp	r3, #15
 800aaf4:	f67f ae86 	bls.w	800a804 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	3724      	adds	r7, #36	; 0x24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	40023800 	.word	0x40023800
 800ab0c:	40013800 	.word	0x40013800
 800ab10:	40020000 	.word	0x40020000
 800ab14:	40020400 	.word	0x40020400
 800ab18:	40020800 	.word	0x40020800
 800ab1c:	40020c00 	.word	0x40020c00
 800ab20:	40021000 	.word	0x40021000
 800ab24:	40021400 	.word	0x40021400
 800ab28:	40021800 	.word	0x40021800
 800ab2c:	40021c00 	.word	0x40021c00
 800ab30:	40022000 	.word	0x40022000
 800ab34:	40022400 	.word	0x40022400
 800ab38:	40013c00 	.word	0x40013c00

0800ab3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800ab46:	2300      	movs	r3, #0
 800ab48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
 800ab56:	e0d9      	b.n	800ad0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ab58:	2201      	movs	r2, #1
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	4013      	ands	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	f040 80c9 	bne.w	800ad06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800ab74:	4a6b      	ldr	r2, [pc, #428]	; (800ad24 <HAL_GPIO_DeInit+0x1e8>)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	089b      	lsrs	r3, r3, #2
 800ab7a:	3302      	adds	r3, #2
 800ab7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab80:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	220f      	movs	r2, #15
 800ab8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	4013      	ands	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a63      	ldr	r2, [pc, #396]	; (800ad28 <HAL_GPIO_DeInit+0x1ec>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d037      	beq.n	800ac0e <HAL_GPIO_DeInit+0xd2>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a62      	ldr	r2, [pc, #392]	; (800ad2c <HAL_GPIO_DeInit+0x1f0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d031      	beq.n	800ac0a <HAL_GPIO_DeInit+0xce>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a61      	ldr	r2, [pc, #388]	; (800ad30 <HAL_GPIO_DeInit+0x1f4>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d02b      	beq.n	800ac06 <HAL_GPIO_DeInit+0xca>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a60      	ldr	r2, [pc, #384]	; (800ad34 <HAL_GPIO_DeInit+0x1f8>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d025      	beq.n	800ac02 <HAL_GPIO_DeInit+0xc6>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a5f      	ldr	r2, [pc, #380]	; (800ad38 <HAL_GPIO_DeInit+0x1fc>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d01f      	beq.n	800abfe <HAL_GPIO_DeInit+0xc2>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a5e      	ldr	r2, [pc, #376]	; (800ad3c <HAL_GPIO_DeInit+0x200>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d019      	beq.n	800abfa <HAL_GPIO_DeInit+0xbe>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a5d      	ldr	r2, [pc, #372]	; (800ad40 <HAL_GPIO_DeInit+0x204>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d013      	beq.n	800abf6 <HAL_GPIO_DeInit+0xba>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a5c      	ldr	r2, [pc, #368]	; (800ad44 <HAL_GPIO_DeInit+0x208>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d00d      	beq.n	800abf2 <HAL_GPIO_DeInit+0xb6>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a5b      	ldr	r2, [pc, #364]	; (800ad48 <HAL_GPIO_DeInit+0x20c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d007      	beq.n	800abee <HAL_GPIO_DeInit+0xb2>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a5a      	ldr	r2, [pc, #360]	; (800ad4c <HAL_GPIO_DeInit+0x210>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d101      	bne.n	800abea <HAL_GPIO_DeInit+0xae>
 800abe6:	2309      	movs	r3, #9
 800abe8:	e012      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800abea:	230a      	movs	r3, #10
 800abec:	e010      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800abee:	2308      	movs	r3, #8
 800abf0:	e00e      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800abf2:	2307      	movs	r3, #7
 800abf4:	e00c      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800abf6:	2306      	movs	r3, #6
 800abf8:	e00a      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800abfa:	2305      	movs	r3, #5
 800abfc:	e008      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800abfe:	2304      	movs	r3, #4
 800ac00:	e006      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800ac02:	2303      	movs	r3, #3
 800ac04:	e004      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800ac06:	2302      	movs	r3, #2
 800ac08:	e002      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <HAL_GPIO_DeInit+0xd4>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	f002 0203 	and.w	r2, r2, #3
 800ac16:	0092      	lsls	r2, r2, #2
 800ac18:	4093      	lsls	r3, r2
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d132      	bne.n	800ac86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ac20:	4b4b      	ldr	r3, [pc, #300]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	43db      	mvns	r3, r3
 800ac28:	4949      	ldr	r1, [pc, #292]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ac2e:	4b48      	ldr	r3, [pc, #288]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	43db      	mvns	r3, r3
 800ac36:	4946      	ldr	r1, [pc, #280]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac38:	4013      	ands	r3, r2
 800ac3a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ac3c:	4b44      	ldr	r3, [pc, #272]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	43db      	mvns	r3, r3
 800ac44:	4942      	ldr	r1, [pc, #264]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac46:	4013      	ands	r3, r2
 800ac48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ac4a:	4b41      	ldr	r3, [pc, #260]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac4c:	68da      	ldr	r2, [r3, #12]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	43db      	mvns	r3, r3
 800ac52:	493f      	ldr	r1, [pc, #252]	; (800ad50 <HAL_GPIO_DeInit+0x214>)
 800ac54:	4013      	ands	r3, r2
 800ac56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	220f      	movs	r2, #15
 800ac62:	fa02 f303 	lsl.w	r3, r2, r3
 800ac66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800ac68:	4a2e      	ldr	r2, [pc, #184]	; (800ad24 <HAL_GPIO_DeInit+0x1e8>)
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	089b      	lsrs	r3, r3, #2
 800ac6e:	3302      	adds	r3, #2
 800ac70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	43da      	mvns	r2, r3
 800ac78:	482a      	ldr	r0, [pc, #168]	; (800ad24 <HAL_GPIO_DeInit+0x1e8>)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	089b      	lsrs	r3, r3, #2
 800ac7e:	400a      	ands	r2, r1
 800ac80:	3302      	adds	r3, #2
 800ac82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	2103      	movs	r1, #3
 800ac90:	fa01 f303 	lsl.w	r3, r1, r3
 800ac94:	43db      	mvns	r3, r3
 800ac96:	401a      	ands	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	08da      	lsrs	r2, r3, #3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3208      	adds	r2, #8
 800aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f003 0307 	and.w	r3, r3, #7
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	220f      	movs	r2, #15
 800acb2:	fa02 f303 	lsl.w	r3, r2, r3
 800acb6:	43db      	mvns	r3, r3
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	08d2      	lsrs	r2, r2, #3
 800acbc:	4019      	ands	r1, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3208      	adds	r2, #8
 800acc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	2103      	movs	r1, #3
 800acd0:	fa01 f303 	lsl.w	r3, r1, r3
 800acd4:	43db      	mvns	r3, r3
 800acd6:	401a      	ands	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	2101      	movs	r1, #1
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	fa01 f303 	lsl.w	r3, r1, r3
 800ace8:	43db      	mvns	r3, r3
 800acea:	401a      	ands	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689a      	ldr	r2, [r3, #8]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	005b      	lsls	r3, r3, #1
 800acf8:	2103      	movs	r1, #3
 800acfa:	fa01 f303 	lsl.w	r3, r1, r3
 800acfe:	43db      	mvns	r3, r3
 800ad00:	401a      	ands	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b0f      	cmp	r3, #15
 800ad10:	f67f af22 	bls.w	800ab58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	40013800 	.word	0x40013800
 800ad28:	40020000 	.word	0x40020000
 800ad2c:	40020400 	.word	0x40020400
 800ad30:	40020800 	.word	0x40020800
 800ad34:	40020c00 	.word	0x40020c00
 800ad38:	40021000 	.word	0x40021000
 800ad3c:	40021400 	.word	0x40021400
 800ad40:	40021800 	.word	0x40021800
 800ad44:	40021c00 	.word	0x40021c00
 800ad48:	40022000 	.word	0x40022000
 800ad4c:	40022400 	.word	0x40022400
 800ad50:	40013c00 	.word	0x40013c00

0800ad54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	807b      	strh	r3, [r7, #2]
 800ad60:	4613      	mov	r3, r2
 800ad62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad64:	787b      	ldrb	r3, [r7, #1]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad6a:	887a      	ldrh	r2, [r7, #2]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ad70:	e003      	b.n	800ad7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ad72:	887b      	ldrh	r3, [r7, #2]
 800ad74:	041a      	lsls	r2, r3, #16
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	619a      	str	r2, [r3, #24]
}
 800ad7a:	bf00      	nop
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
	...

0800ad88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e0bf      	b.n	800af1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d106      	bne.n	800adb4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7f6 fb64 	bl	800147c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2202      	movs	r2, #2
 800adb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	699a      	ldr	r2, [r3, #24]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800adca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6999      	ldr	r1, [r3, #24]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ade0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6899      	ldr	r1, [r3, #8]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b4a      	ldr	r3, [pc, #296]	; (800af24 <HAL_LTDC_Init+0x19c>)
 800adfc:	400b      	ands	r3, r1
 800adfe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6899      	ldr	r1, [r3, #8]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	699a      	ldr	r2, [r3, #24]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68d9      	ldr	r1, [r3, #12]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b3e      	ldr	r3, [pc, #248]	; (800af24 <HAL_LTDC_Init+0x19c>)
 800ae2a:	400b      	ands	r3, r1
 800ae2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68d9      	ldr	r1, [r3, #12]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	431a      	orrs	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6919      	ldr	r1, [r3, #16]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4b33      	ldr	r3, [pc, #204]	; (800af24 <HAL_LTDC_Init+0x19c>)
 800ae58:	400b      	ands	r3, r1
 800ae5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6919      	ldr	r1, [r3, #16]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6959      	ldr	r1, [r3, #20]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	4b27      	ldr	r3, [pc, #156]	; (800af24 <HAL_LTDC_Init+0x19c>)
 800ae86:	400b      	ands	r3, r1
 800ae88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	041b      	lsls	r3, r3, #16
 800ae90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6959      	ldr	r1, [r3, #20]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aeb8:	041b      	lsls	r3, r3, #16
 800aeba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aeca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0206 	orr.w	r2, r2, #6
 800aef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699a      	ldr	r2, [r3, #24]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0201 	orr.w	r2, r2, #1
 800af06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	f000f800 	.word	0xf000f800

0800af28 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b00      	cmp	r3, #0
 800af48:	d023      	beq.n	800af92 <HAL_LTDC_IRQHandler+0x6a>
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01e      	beq.n	800af92 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 0204 	bic.w	r2, r2, #4
 800af62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2204      	movs	r2, #4
 800af6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af72:	f043 0201 	orr.w	r2, r3, #1
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2204      	movs	r2, #4
 800af80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f86f 	bl	800b070 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f003 0302 	and.w	r3, r3, #2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d023      	beq.n	800afe4 <HAL_LTDC_IRQHandler+0xbc>
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f003 0302 	and.w	r3, r3, #2
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d01e      	beq.n	800afe4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f022 0202 	bic.w	r2, r2, #2
 800afb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2202      	movs	r2, #2
 800afbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800afc4:	f043 0202 	orr.w	r2, r3, #2
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2204      	movs	r2, #4
 800afd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f846 	bl	800b070 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d01b      	beq.n	800b026 <HAL_LTDC_IRQHandler+0xfe>
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d016      	beq.n	800b026 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0201 	bic.w	r2, r2, #1
 800b006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2201      	movs	r2, #1
 800b00e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7f9 fa1f 	bl	8004464 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f003 0308 	and.w	r3, r3, #8
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01b      	beq.n	800b068 <HAL_LTDC_IRQHandler+0x140>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	f003 0308 	and.w	r3, r3, #8
 800b036:	2b00      	cmp	r3, #0
 800b038:	d016      	beq.n	800b068 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0208 	bic.w	r2, r2, #8
 800b048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2208      	movs	r2, #8
 800b050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f80e 	bl	800b084 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b068:	bf00      	nop
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b098:	b5b0      	push	{r4, r5, r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d101      	bne.n	800b0b2 <HAL_LTDC_ConfigLayer+0x1a>
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	e02c      	b.n	800b10c <HAL_LTDC_ConfigLayer+0x74>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2134      	movs	r1, #52	; 0x34
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	461d      	mov	r5, r3
 800b0d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f849 	bl	800b184 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bdb0      	pop	{r4, r5, r7, pc}

0800b114 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_LTDC_ProgramLineEvent+0x18>
 800b128:	2302      	movs	r3, #2
 800b12a:	e023      	b.n	800b174 <HAL_LTDC_ProgramLineEvent+0x60>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2202      	movs	r2, #2
 800b138:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f022 0201 	bic.w	r2, r2, #1
 800b14a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800b14c:	4a0c      	ldr	r2, [pc, #48]	; (800b180 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f042 0201 	orr.w	r2, r2, #1
 800b160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	40016800 	.word	0x40016800

0800b184 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b184:	b480      	push	{r7}
 800b186:	b089      	sub	sp, #36	; 0x24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	0c1b      	lsrs	r3, r3, #16
 800b19c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1a0:	4413      	add	r3, r2
 800b1a2:	041b      	lsls	r3, r3, #16
 800b1a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	01db      	lsls	r3, r3, #7
 800b1b0:	4413      	add	r3, r2
 800b1b2:	3384      	adds	r3, #132	; 0x84
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	6812      	ldr	r2, [r2, #0]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	01d2      	lsls	r2, r2, #7
 800b1c0:	440a      	add	r2, r1
 800b1c2:	3284      	adds	r2, #132	; 0x84
 800b1c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b1c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	0c1b      	lsrs	r3, r3, #16
 800b1d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1da:	4413      	add	r3, r2
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	01db      	lsls	r3, r3, #7
 800b1e8:	440b      	add	r3, r1
 800b1ea:	3384      	adds	r3, #132	; 0x84
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b202:	4413      	add	r3, r2
 800b204:	041b      	lsls	r3, r3, #16
 800b206:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	01db      	lsls	r3, r3, #7
 800b212:	4413      	add	r3, r2
 800b214:	3384      	adds	r3, #132	; 0x84
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	6812      	ldr	r2, [r2, #0]
 800b21c:	4611      	mov	r1, r2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	01d2      	lsls	r2, r2, #7
 800b222:	440a      	add	r2, r1
 800b224:	3284      	adds	r2, #132	; 0x84
 800b226:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b22a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b23a:	4413      	add	r3, r2
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4619      	mov	r1, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	01db      	lsls	r3, r3, #7
 800b248:	440b      	add	r3, r1
 800b24a:	3384      	adds	r3, #132	; 0x84
 800b24c:	4619      	mov	r1, r3
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	4313      	orrs	r3, r2
 800b252:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	461a      	mov	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	01db      	lsls	r3, r3, #7
 800b25e:	4413      	add	r3, r2
 800b260:	3384      	adds	r3, #132	; 0x84
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	4611      	mov	r1, r2
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	01d2      	lsls	r2, r2, #7
 800b26e:	440a      	add	r2, r1
 800b270:	3284      	adds	r2, #132	; 0x84
 800b272:	f023 0307 	bic.w	r3, r3, #7
 800b276:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	01db      	lsls	r3, r3, #7
 800b282:	4413      	add	r3, r2
 800b284:	3384      	adds	r3, #132	; 0x84
 800b286:	461a      	mov	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b294:	021b      	lsls	r3, r3, #8
 800b296:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b29e:	041b      	lsls	r3, r3, #16
 800b2a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	061b      	lsls	r3, r3, #24
 800b2a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	01db      	lsls	r3, r3, #7
 800b2b4:	4413      	add	r3, r2
 800b2b6:	3384      	adds	r3, #132	; 0x84
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	01db      	lsls	r3, r3, #7
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3384      	adds	r3, #132	; 0x84
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	01db      	lsls	r3, r3, #7
 800b2e8:	440b      	add	r3, r1
 800b2ea:	3384      	adds	r3, #132	; 0x84
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	01db      	lsls	r3, r3, #7
 800b2fe:	4413      	add	r3, r2
 800b300:	3384      	adds	r3, #132	; 0x84
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	6812      	ldr	r2, [r2, #0]
 800b308:	4611      	mov	r1, r2
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	01d2      	lsls	r2, r2, #7
 800b30e:	440a      	add	r2, r1
 800b310:	3284      	adds	r2, #132	; 0x84
 800b312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b316:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	01db      	lsls	r3, r3, #7
 800b322:	4413      	add	r3, r2
 800b324:	3384      	adds	r3, #132	; 0x84
 800b326:	461a      	mov	r2, r3
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	01db      	lsls	r3, r3, #7
 800b338:	4413      	add	r3, r2
 800b33a:	3384      	adds	r3, #132	; 0x84
 800b33c:	69da      	ldr	r2, [r3, #28]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	01db      	lsls	r3, r3, #7
 800b348:	440b      	add	r3, r1
 800b34a:	3384      	adds	r3, #132	; 0x84
 800b34c:	4619      	mov	r1, r3
 800b34e:	4b58      	ldr	r3, [pc, #352]	; (800b4b0 <LTDC_SetConfig+0x32c>)
 800b350:	4013      	ands	r3, r2
 800b352:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	69da      	ldr	r2, [r3, #28]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	68f9      	ldr	r1, [r7, #12]
 800b35e:	6809      	ldr	r1, [r1, #0]
 800b360:	4608      	mov	r0, r1
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	01c9      	lsls	r1, r1, #7
 800b366:	4401      	add	r1, r0
 800b368:	3184      	adds	r1, #132	; 0x84
 800b36a:	4313      	orrs	r3, r2
 800b36c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	01db      	lsls	r3, r3, #7
 800b378:	4413      	add	r3, r2
 800b37a:	3384      	adds	r3, #132	; 0x84
 800b37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	01db      	lsls	r3, r3, #7
 800b388:	4413      	add	r3, r2
 800b38a:	3384      	adds	r3, #132	; 0x84
 800b38c:	461a      	mov	r2, r3
 800b38e:	2300      	movs	r3, #0
 800b390:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	01db      	lsls	r3, r3, #7
 800b39c:	4413      	add	r3, r2
 800b39e:	3384      	adds	r3, #132	; 0x84
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	61fb      	str	r3, [r7, #28]
 800b3b4:	e01b      	b.n	800b3ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d102      	bne.n	800b3c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	61fb      	str	r3, [r7, #28]
 800b3c2:	e014      	b.n	800b3ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d00b      	beq.n	800b3e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d007      	beq.n	800b3e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d003      	beq.n	800b3e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b3e0:	2b07      	cmp	r3, #7
 800b3e2:	d102      	bne.n	800b3ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	61fb      	str	r3, [r7, #28]
 800b3e8:	e001      	b.n	800b3ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	01db      	lsls	r3, r3, #7
 800b3f8:	4413      	add	r3, r2
 800b3fa:	3384      	adds	r3, #132	; 0x84
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	6812      	ldr	r2, [r2, #0]
 800b402:	4611      	mov	r1, r2
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	01d2      	lsls	r2, r2, #7
 800b408:	440a      	add	r2, r1
 800b40a:	3284      	adds	r2, #132	; 0x84
 800b40c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b410:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b416:	69fa      	ldr	r2, [r7, #28]
 800b418:	fb02 f303 	mul.w	r3, r2, r3
 800b41c:	041a      	lsls	r2, r3, #16
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6859      	ldr	r1, [r3, #4]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	1acb      	subs	r3, r1, r3
 800b428:	69f9      	ldr	r1, [r7, #28]
 800b42a:	fb01 f303 	mul.w	r3, r1, r3
 800b42e:	3303      	adds	r3, #3
 800b430:	68f9      	ldr	r1, [r7, #12]
 800b432:	6809      	ldr	r1, [r1, #0]
 800b434:	4608      	mov	r0, r1
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	01c9      	lsls	r1, r1, #7
 800b43a:	4401      	add	r1, r0
 800b43c:	3184      	adds	r1, #132	; 0x84
 800b43e:	4313      	orrs	r3, r2
 800b440:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	01db      	lsls	r3, r3, #7
 800b44c:	4413      	add	r3, r2
 800b44e:	3384      	adds	r3, #132	; 0x84
 800b450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4619      	mov	r1, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	01db      	lsls	r3, r3, #7
 800b45c:	440b      	add	r3, r1
 800b45e:	3384      	adds	r3, #132	; 0x84
 800b460:	4619      	mov	r1, r3
 800b462:	4b14      	ldr	r3, [pc, #80]	; (800b4b4 <LTDC_SetConfig+0x330>)
 800b464:	4013      	ands	r3, r2
 800b466:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	461a      	mov	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	01db      	lsls	r3, r3, #7
 800b472:	4413      	add	r3, r2
 800b474:	3384      	adds	r3, #132	; 0x84
 800b476:	461a      	mov	r2, r3
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	01db      	lsls	r3, r3, #7
 800b488:	4413      	add	r3, r2
 800b48a:	3384      	adds	r3, #132	; 0x84
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	6812      	ldr	r2, [r2, #0]
 800b492:	4611      	mov	r1, r2
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	01d2      	lsls	r2, r2, #7
 800b498:	440a      	add	r2, r1
 800b49a:	3284      	adds	r2, #132	; 0x84
 800b49c:	f043 0301 	orr.w	r3, r3, #1
 800b4a0:	6013      	str	r3, [r2, #0]
}
 800b4a2:	bf00      	nop
 800b4a4:	3724      	adds	r7, #36	; 0x24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	fffff8f8 	.word	0xfffff8f8
 800b4b4:	fffff800 	.word	0xfffff800

0800b4b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b4c2:	4b23      	ldr	r3, [pc, #140]	; (800b550 <HAL_PWREx_EnableOverDrive+0x98>)
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c6:	4a22      	ldr	r2, [pc, #136]	; (800b550 <HAL_PWREx_EnableOverDrive+0x98>)
 800b4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4cc:	6413      	str	r3, [r2, #64]	; 0x40
 800b4ce:	4b20      	ldr	r3, [pc, #128]	; (800b550 <HAL_PWREx_EnableOverDrive+0x98>)
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b4da:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a1d      	ldr	r2, [pc, #116]	; (800b554 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b4e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b4e6:	f7fe f8a5 	bl	8009634 <HAL_GetTick>
 800b4ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b4ec:	e009      	b.n	800b502 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b4ee:	f7fe f8a1 	bl	8009634 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4fc:	d901      	bls.n	800b502 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e022      	b.n	800b548 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b502:	4b14      	ldr	r3, [pc, #80]	; (800b554 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b50a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b50e:	d1ee      	bne.n	800b4ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b510:	4b10      	ldr	r3, [pc, #64]	; (800b554 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a0f      	ldr	r2, [pc, #60]	; (800b554 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b51c:	f7fe f88a 	bl	8009634 <HAL_GetTick>
 800b520:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b522:	e009      	b.n	800b538 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b524:	f7fe f886 	bl	8009634 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b532:	d901      	bls.n	800b538 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e007      	b.n	800b548 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b538:	4b06      	ldr	r3, [pc, #24]	; (800b554 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b544:	d1ee      	bne.n	800b524 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40023800 	.word	0x40023800
 800b554:	40007000 	.word	0x40007000

0800b558 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b560:	f7fe f868 	bl	8009634 <HAL_GetTick>
 800b564:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e067      	b.n	800b640 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10b      	bne.n	800b594 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7f6 fa33 	bl	80019f0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b58a:	f241 3188 	movw	r1, #5000	; 0x1388
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fcf2 	bl	800bf78 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	021a      	lsls	r2, r3, #8
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2120      	movs	r1, #32
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fd1d 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d135      	bne.n	800b636 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <HAL_QSPI_Init+0xf0>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6852      	ldr	r2, [r2, #4]
 800b5d8:	0611      	lsls	r1, r2, #24
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	68d2      	ldr	r2, [r2, #12]
 800b5de:	4311      	orrs	r1, r2
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	69d2      	ldr	r2, [r2, #28]
 800b5e4:	4311      	orrs	r1, r2
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	6a12      	ldr	r2, [r2, #32]
 800b5ea:	4311      	orrs	r1, r2
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	430b      	orrs	r3, r1
 800b5f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	4b14      	ldr	r3, [pc, #80]	; (800b64c <HAL_QSPI_Init+0xf4>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6912      	ldr	r2, [r2, #16]
 800b602:	0411      	lsls	r1, r2, #16
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6952      	ldr	r2, [r2, #20]
 800b608:	4311      	orrs	r1, r2
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6992      	ldr	r2, [r2, #24]
 800b60e:	4311      	orrs	r1, r2
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6812      	ldr	r2, [r2, #0]
 800b614:	430b      	orrs	r3, r1
 800b616:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f042 0201 	orr.w	r2, r2, #1
 800b626:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b63e:	7afb      	ldrb	r3, [r7, #11]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	00ffff2f 	.word	0x00ffff2f
 800b64c:	ffe0f8fe 	.word	0xffe0f8fe

0800b650 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e016      	b.n	800b690 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 0201 	bic.w	r2, r2, #1
 800b670:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7f6 fa46 	bl	8001b04 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d064      	beq.n	800b784 <HAL_QSPI_IRQHandler+0xec>
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d05f      	beq.n	800b784 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3320      	adds	r3, #32
 800b6ca:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2b12      	cmp	r3, #18
 800b6d6:	d125      	bne.n	800b724 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b6d8:	e01c      	b.n	800b714 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00f      	beq.n	800b702 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	781a      	ldrb	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	1c5a      	adds	r2, r3, #1
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fa:	1e5a      	subs	r2, r3, #1
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	62da      	str	r2, [r3, #44]	; 0x2c
 800b700:	e008      	b.n	800b714 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b710:	601a      	str	r2, [r3, #0]
          break;
 800b712:	e033      	b.n	800b77c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f003 0304 	and.w	r3, r3, #4
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1db      	bne.n	800b6da <HAL_QSPI_IRQHandler+0x42>
 800b722:	e02b      	b.n	800b77c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b22      	cmp	r3, #34	; 0x22
 800b72e:	d125      	bne.n	800b77c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b730:	e01d      	b.n	800b76e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b736:	2b00      	cmp	r3, #0
 800b738:	d010      	beq.n	800b75c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	7812      	ldrb	r2, [r2, #0]
 800b742:	b2d2      	uxtb	r2, r2
 800b744:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b754:	1e5a      	subs	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	639a      	str	r2, [r3, #56]	; 0x38
 800b75a:	e008      	b.n	800b76e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b76a:	601a      	str	r2, [r3, #0]
          break;
 800b76c:	e006      	b.n	800b77c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f003 0304 	and.w	r3, r3, #4
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1da      	bne.n	800b732 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fbdd 	bl	800bf3c <HAL_QSPI_FifoThresholdCallback>
 800b782:	e13c      	b.n	800b9fe <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80b0 	beq.w	800b8f0 <HAL_QSPI_IRQHandler+0x258>
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 80aa 	beq.w	800b8f0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b7b2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b12      	cmp	r3, #18
 800b7be:	d120      	bne.n	800b802 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0304 	and.w	r3, r3, #4
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d011      	beq.n	800b7f2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0204 	bic.w	r2, r2, #4
 800b7dc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f022 0201 	bic.w	r2, r2, #1
 800b7f0:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fb94 	bl	800bf28 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b800:	e0fa      	b.n	800b9f8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b22      	cmp	r3, #34	; 0x22
 800b80c:	d143      	bne.n	800b896 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d012      	beq.n	800b842 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 0204 	bic.w	r2, r2, #4
 800b82a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f022 0201 	bic.w	r2, r2, #1
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	e021      	b.n	800b886 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3320      	adds	r3, #32
 800b848:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b84a:	e013      	b.n	800b874 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b850:	2b00      	cmp	r3, #0
 800b852:	d017      	beq.n	800b884 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	b2d2      	uxtb	r2, r2
 800b85e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b864:	1c5a      	adds	r2, r3, #1
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86e:	1e5a      	subs	r2, r3, #1
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1e4      	bne.n	800b84c <HAL_QSPI_IRQHandler+0x1b4>
 800b882:	e000      	b.n	800b886 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800b884:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fb40 	bl	800bf14 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b894:	e0b0      	b.n	800b9f8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d107      	bne.n	800b8b2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fb28 	bl	800bf00 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b8b0:	e0a2      	b.n	800b9f8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b08      	cmp	r3, #8
 800b8bc:	f040 809c 	bne.w	800b9f8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695a      	ldr	r2, [r3, #20]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b8ce:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d103      	bne.n	800b8e8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fb03 	bl	800beec <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b8e6:	e087      	b.n	800b9f8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 faf5 	bl	800bed8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b8ee:	e083      	b.n	800b9f8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f003 0308 	and.w	r3, r3, #8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01f      	beq.n	800b93a <HAL_QSPI_IRQHandler+0x2a2>
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d01a      	beq.n	800b93a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2208      	movs	r2, #8
 800b90a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b928:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fb0c 	bl	800bf50 <HAL_QSPI_StatusMatchCallback>
 800b938:	e061      	b.n	800b9fe <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	d047      	beq.n	800b9d4 <HAL_QSPI_IRQHandler+0x33c>
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d042      	beq.n	800b9d4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2201      	movs	r2, #1
 800b954:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b964:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96a:	f043 0202 	orr.w	r2, r3, #2
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d021      	beq.n	800b9c4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f022 0204 	bic.w	r2, r2, #4
 800b98e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b994:	4a1c      	ldr	r2, [pc, #112]	; (800ba08 <HAL_QSPI_IRQHandler+0x370>)
 800b996:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fcf7 	bl	800a390 <HAL_DMA_Abort_IT>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d029      	beq.n	800b9fc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ac:	f043 0204 	orr.w	r2, r3, #4
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa8b 	bl	800bed8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b9c2:	e01b      	b.n	800b9fc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fa83 	bl	800bed8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b9d2:	e013      	b.n	800b9fc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f003 0310 	and.w	r3, r3, #16
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00f      	beq.n	800b9fe <HAL_QSPI_IRQHandler+0x366>
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00a      	beq.n	800b9fe <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2210      	movs	r2, #16
 800b9ee:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fab7 	bl	800bf64 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800b9f6:	e002      	b.n	800b9fe <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b9f8:	bf00      	nop
 800b9fa:	e000      	b.n	800b9fe <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b9fc:	bf00      	nop
}
 800b9fe:	bf00      	nop
 800ba00:	3718      	adds	r7, #24
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	0800bf95 	.word	0x0800bf95

0800ba0c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ba18:	f7fd fe0c 	bl	8009634 <HAL_GetTick>
 800ba1c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <HAL_QSPI_Command+0x22>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e048      	b.n	800bac0 <HAL_QSPI_Command+0xb4>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d137      	bne.n	800bab2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	2200      	movs	r2, #0
 800ba58:	2120      	movs	r1, #32
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 facd 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d125      	bne.n	800bab6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 fafa 	bl	800c068 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d115      	bne.n	800baa8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2201      	movs	r2, #1
 800ba84:	2102      	movs	r1, #2
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fab7 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10f      	bne.n	800bab6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800baa6:	e006      	b.n	800bab6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bab0:	e001      	b.n	800bab6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800bab2:	2302      	movs	r3, #2
 800bab4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800babe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	; 0x28
 800bacc:	af02      	add	r7, sp, #8
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800bad8:	f7fd fdac 	bl	8009634 <HAL_GetTick>
 800badc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3320      	adds	r3, #32
 800bae4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d101      	bne.n	800baf6 <HAL_QSPI_Transmit+0x2e>
 800baf2:	2302      	movs	r3, #2
 800baf4:	e076      	b.n	800bbe4 <HAL_QSPI_Transmit+0x11c>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d165      	bne.n	800bbd6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d056      	beq.n	800bbc4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2212      	movs	r2, #18
 800bb1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	695a      	ldr	r2, [r3, #20]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800bb4a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800bb4c:	e01b      	b.n	800bb86 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	2201      	movs	r2, #1
 800bb56:	2104      	movs	r1, #4
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 fa4e 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800bb62:	7ffb      	ldrb	r3, [r7, #31]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d113      	bne.n	800bb90 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	781a      	ldrb	r2, [r3, #0]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	1e5a      	subs	r2, r3, #1
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1df      	bne.n	800bb4e <HAL_QSPI_Transmit+0x86>
 800bb8e:	e000      	b.n	800bb92 <HAL_QSPI_Transmit+0xca>
          break;
 800bb90:	bf00      	nop
      }

      if (status == HAL_OK)
 800bb92:	7ffb      	ldrb	r3, [r7, #31]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d110      	bne.n	800bbba <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	2102      	movs	r1, #2
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 fa29 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800bbac:	7ffb      	ldrb	r3, [r7, #31]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbc2:	e00a      	b.n	800bbda <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc8:	f043 0208 	orr.w	r2, r3, #8
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	77fb      	strb	r3, [r7, #31]
 800bbd4:	e001      	b.n	800bbda <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800bbe2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3720      	adds	r7, #32
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08a      	sub	sp, #40	; 0x28
 800bbf0:	af02      	add	r7, sp, #8
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800bbfc:	f7fd fd1a 	bl	8009634 <HAL_GetTick>
 800bc00:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3320      	adds	r3, #32
 800bc10:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d101      	bne.n	800bc22 <HAL_QSPI_Receive+0x36>
 800bc1e:	2302      	movs	r3, #2
 800bc20:	e07d      	b.n	800bd1e <HAL_QSPI_Receive+0x132>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d16c      	bne.n	800bd10 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d05d      	beq.n	800bcfe <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2222      	movs	r2, #34	; 0x22
 800bc46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bc7a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800bc84:	e01c      	b.n	800bcc0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	2106      	movs	r1, #6
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f000 f9b2 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800bc96:	4603      	mov	r3, r0
 800bc98:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800bc9a:	7ffb      	ldrb	r3, [r7, #31]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d114      	bne.n	800bcca <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	7812      	ldrb	r2, [r2, #0]
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcba:	1e5a      	subs	r2, r3, #1
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1de      	bne.n	800bc86 <HAL_QSPI_Receive+0x9a>
 800bcc8:	e000      	b.n	800bccc <HAL_QSPI_Receive+0xe0>
          break;
 800bcca:	bf00      	nop
      }

      if (status == HAL_OK)
 800bccc:	7ffb      	ldrb	r3, [r7, #31]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d110      	bne.n	800bcf4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	2102      	movs	r1, #2
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 f98c 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800bce6:	7ffb      	ldrb	r3, [r7, #31]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d103      	bne.n	800bcf4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcfc:	e00a      	b.n	800bd14 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd02:	f043 0208 	orr.w	r2, r3, #8
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	77fb      	strb	r3, [r7, #31]
 800bd0e:	e001      	b.n	800bd14 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bd10:	2302      	movs	r3, #2
 800bd12:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800bd1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3720      	adds	r7, #32
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b088      	sub	sp, #32
 800bd2a:	af02      	add	r7, sp, #8
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	60b9      	str	r1, [r7, #8]
 800bd30:	607a      	str	r2, [r7, #4]
 800bd32:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bd34:	f7fd fc7e 	bl	8009634 <HAL_GetTick>
 800bd38:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d101      	bne.n	800bd4a <HAL_QSPI_AutoPolling+0x24>
 800bd46:	2302      	movs	r3, #2
 800bd48:	e060      	b.n	800be0c <HAL_QSPI_AutoPolling+0xe6>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d14f      	bne.n	800bdfe <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2242      	movs	r2, #66	; 0x42
 800bd68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	2200      	movs	r2, #0
 800bd74:	2120      	movs	r1, #32
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 f93f 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d13d      	bne.n	800be02 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6812      	ldr	r2, [r2, #0]
 800bd8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	6852      	ldr	r2, [r2, #4]
 800bd98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6892      	ldr	r2, [r2, #8]
 800bda2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800bdbc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68da      	ldr	r2, [r3, #12]
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bdc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 f94b 	bl	800c068 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	2108      	movs	r1, #8
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 f90c 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800bde2:	4603      	mov	r3, r0
 800bde4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdfc:	e001      	b.n	800be02 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800bdfe:	2302      	movs	r3, #2
 800be00:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af02      	add	r7, sp, #8
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800be20:	f7fd fc08 	bl	8009634 <HAL_GetTick>
 800be24:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d101      	bne.n	800be36 <HAL_QSPI_MemoryMapped+0x22>
 800be32:	2302      	movs	r3, #2
 800be34:	e04c      	b.n	800bed0 <HAL_QSPI_MemoryMapped+0xbc>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b01      	cmp	r3, #1
 800be48:	d13b      	bne.n	800bec2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2282      	movs	r2, #130	; 0x82
 800be54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2200      	movs	r2, #0
 800be62:	2120      	movs	r1, #32
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 f8c8 	bl	800bffa <QSPI_WaitFlagStateUntilTimeout>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d128      	bne.n	800bec6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f023 0108 	bic.w	r1, r3, #8
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	430a      	orrs	r2, r1
 800be88:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	2b08      	cmp	r3, #8
 800be90:	d110      	bne.n	800beb4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6812      	ldr	r2, [r2, #0]
 800be9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2210      	movs	r2, #16
 800bea2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800beb2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800beb4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800beb8:	68b9      	ldr	r1, [r7, #8]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 f8d4 	bl	800c068 <QSPI_Config>
 800bec0:	e001      	b.n	800bec6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bec2:	2302      	movs	r3, #2
 800bec4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bece:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800bf44:	bf00      	nop
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	649a      	str	r2, [r3, #72]	; 0x48
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b08      	cmp	r3, #8
 800bfb8:	d114      	bne.n	800bfe4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bfd0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f042 0202 	orr.w	r2, r2, #2
 800bfe0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800bfe2:	e006      	b.n	800bff2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f7ff ff73 	bl	800bed8 <HAL_QSPI_ErrorCallback>
}
 800bff2:	bf00      	nop
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	60b9      	str	r1, [r7, #8]
 800c004:	603b      	str	r3, [r7, #0]
 800c006:	4613      	mov	r3, r2
 800c008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c00a:	e01a      	b.n	800c042 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c012:	d016      	beq.n	800c042 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c014:	f7fd fb0e 	bl	8009634 <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	429a      	cmp	r2, r3
 800c022:	d302      	bcc.n	800c02a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10b      	bne.n	800c042 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2204      	movs	r2, #4
 800c02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c036:	f043 0201 	orr.w	r2, r3, #1
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e00e      	b.n	800c060 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4013      	ands	r3, r2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	bf14      	ite	ne
 800c050:	2301      	movne	r3, #1
 800c052:	2300      	moveq	r3, #0
 800c054:	b2db      	uxtb	r3, r3
 800c056:	461a      	mov	r2, r3
 800c058:	79fb      	ldrb	r3, [r7, #7]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d1d6      	bne.n	800c00c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d009      	beq.n	800c090 <QSPI_Config+0x28>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c082:	d005      	beq.n	800c090 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3a01      	subs	r2, #1
 800c08e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 80b9 	beq.w	800c20c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d05f      	beq.n	800c162 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	6892      	ldr	r2, [r2, #8]
 800c0aa:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d031      	beq.n	800c118 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	431a      	orrs	r2, r3
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	431a      	orrs	r2, r3
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	049b      	lsls	r3, r3, #18
 800c0d0:	431a      	orrs	r2, r3
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	431a      	orrs	r2, r3
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	431a      	orrs	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	ea42 0103 	orr.w	r1, r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	430a      	orrs	r2, r1
 800c100:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c108:	f000 812e 	beq.w	800c368 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	6852      	ldr	r2, [r2, #4]
 800c114:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c116:	e127      	b.n	800c368 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c120:	431a      	orrs	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c126:	431a      	orrs	r2, r3
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	431a      	orrs	r2, r3
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	049b      	lsls	r3, r3, #18
 800c134:	431a      	orrs	r2, r3
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	431a      	orrs	r2, r3
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	431a      	orrs	r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	431a      	orrs	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	431a      	orrs	r2, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	ea42 0103 	orr.w	r1, r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	615a      	str	r2, [r3, #20]
}
 800c160:	e102      	b.n	800c368 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d02e      	beq.n	800c1c8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c172:	431a      	orrs	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c178:	431a      	orrs	r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17e:	431a      	orrs	r2, r3
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	049b      	lsls	r3, r3, #18
 800c186:	431a      	orrs	r2, r3
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	431a      	orrs	r2, r3
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	431a      	orrs	r2, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	431a      	orrs	r2, r3
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	ea42 0103 	orr.w	r1, r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c1b8:	f000 80d6 	beq.w	800c368 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	6852      	ldr	r2, [r2, #4]
 800c1c4:	619a      	str	r2, [r3, #24]
}
 800c1c6:	e0cf      	b.n	800c368 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	431a      	orrs	r2, r3
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	695b      	ldr	r3, [r3, #20]
 800c1e2:	049b      	lsls	r3, r3, #18
 800c1e4:	431a      	orrs	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	431a      	orrs	r2, r3
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	431a      	orrs	r2, r3
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	ea42 0103 	orr.w	r1, r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	430a      	orrs	r2, r1
 800c208:	615a      	str	r2, [r3, #20]
}
 800c20a:	e0ad      	b.n	800c368 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d058      	beq.n	800c2c6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	6892      	ldr	r2, [r2, #8]
 800c21c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d02d      	beq.n	800c282 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22e:	431a      	orrs	r2, r3
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c234:	431a      	orrs	r2, r3
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23a:	431a      	orrs	r2, r3
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	695b      	ldr	r3, [r3, #20]
 800c240:	049b      	lsls	r3, r3, #18
 800c242:	431a      	orrs	r2, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	431a      	orrs	r2, r3
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	431a      	orrs	r2, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	431a      	orrs	r2, r3
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	431a      	orrs	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	ea42 0103 	orr.w	r1, r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	430a      	orrs	r2, r1
 800c26c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c274:	d078      	beq.n	800c368 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	6852      	ldr	r2, [r2, #4]
 800c27e:	619a      	str	r2, [r3, #24]
}
 800c280:	e072      	b.n	800c368 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	431a      	orrs	r2, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c290:	431a      	orrs	r2, r3
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c296:	431a      	orrs	r2, r3
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	049b      	lsls	r3, r3, #18
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	431a      	orrs	r2, r3
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	69db      	ldr	r3, [r3, #28]
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	ea42 0103 	orr.w	r1, r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	615a      	str	r2, [r3, #20]
}
 800c2c4:	e050      	b.n	800c368 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	69db      	ldr	r3, [r3, #28]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d02a      	beq.n	800c324 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	049b      	lsls	r3, r3, #18
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	6a1b      	ldr	r3, [r3, #32]
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	431a      	orrs	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	431a      	orrs	r2, r3
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	ea42 0103 	orr.w	r1, r2, r3
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c316:	d027      	beq.n	800c368 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	6852      	ldr	r2, [r2, #4]
 800c320:	619a      	str	r2, [r3, #24]
}
 800c322:	e021      	b.n	800c368 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01d      	beq.n	800c368 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c334:	431a      	orrs	r2, r3
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c33a:	431a      	orrs	r2, r3
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c340:	431a      	orrs	r2, r3
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	049b      	lsls	r3, r3, #18
 800c348:	431a      	orrs	r2, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	431a      	orrs	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	69db      	ldr	r3, [r3, #28]
 800c354:	431a      	orrs	r2, r3
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	699b      	ldr	r3, [r3, #24]
 800c35a:	ea42 0103 	orr.w	r1, r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	430a      	orrs	r2, r1
 800c366:	615a      	str	r2, [r3, #20]
}
 800c368:	bf00      	nop
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c37c:	2300      	movs	r3, #0
 800c37e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e29b      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 8087 	beq.w	800c4a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c398:	4b96      	ldr	r3, [pc, #600]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f003 030c 	and.w	r3, r3, #12
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d00c      	beq.n	800c3be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3a4:	4b93      	ldr	r3, [pc, #588]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f003 030c 	and.w	r3, r3, #12
 800c3ac:	2b08      	cmp	r3, #8
 800c3ae:	d112      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x62>
 800c3b0:	4b90      	ldr	r3, [pc, #576]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3bc:	d10b      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3be:	4b8d      	ldr	r3, [pc, #564]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d06c      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x130>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d168      	bne.n	800c4a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e275      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3de:	d106      	bne.n	800c3ee <HAL_RCC_OscConfig+0x7a>
 800c3e0:	4b84      	ldr	r3, [pc, #528]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a83      	ldr	r2, [pc, #524]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	e02e      	b.n	800c44c <HAL_RCC_OscConfig+0xd8>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10c      	bne.n	800c410 <HAL_RCC_OscConfig+0x9c>
 800c3f6:	4b7f      	ldr	r3, [pc, #508]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a7e      	ldr	r2, [pc, #504]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c3fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c400:	6013      	str	r3, [r2, #0]
 800c402:	4b7c      	ldr	r3, [pc, #496]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a7b      	ldr	r2, [pc, #492]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	e01d      	b.n	800c44c <HAL_RCC_OscConfig+0xd8>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c418:	d10c      	bne.n	800c434 <HAL_RCC_OscConfig+0xc0>
 800c41a:	4b76      	ldr	r3, [pc, #472]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a75      	ldr	r2, [pc, #468]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	4b73      	ldr	r3, [pc, #460]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a72      	ldr	r2, [pc, #456]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c42c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	e00b      	b.n	800c44c <HAL_RCC_OscConfig+0xd8>
 800c434:	4b6f      	ldr	r3, [pc, #444]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a6e      	ldr	r2, [pc, #440]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c43a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	4b6c      	ldr	r3, [pc, #432]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a6b      	ldr	r2, [pc, #428]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c44a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d013      	beq.n	800c47c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c454:	f7fd f8ee 	bl	8009634 <HAL_GetTick>
 800c458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c45a:	e008      	b.n	800c46e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c45c:	f7fd f8ea 	bl	8009634 <HAL_GetTick>
 800c460:	4602      	mov	r2, r0
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b64      	cmp	r3, #100	; 0x64
 800c468:	d901      	bls.n	800c46e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e229      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c46e:	4b61      	ldr	r3, [pc, #388]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0f0      	beq.n	800c45c <HAL_RCC_OscConfig+0xe8>
 800c47a:	e014      	b.n	800c4a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c47c:	f7fd f8da 	bl	8009634 <HAL_GetTick>
 800c480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c482:	e008      	b.n	800c496 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c484:	f7fd f8d6 	bl	8009634 <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	2b64      	cmp	r3, #100	; 0x64
 800c490:	d901      	bls.n	800c496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c492:	2303      	movs	r3, #3
 800c494:	e215      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c496:	4b57      	ldr	r3, [pc, #348]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1f0      	bne.n	800c484 <HAL_RCC_OscConfig+0x110>
 800c4a2:	e000      	b.n	800c4a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d069      	beq.n	800c586 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c4b2:	4b50      	ldr	r3, [pc, #320]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f003 030c 	and.w	r3, r3, #12
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00b      	beq.n	800c4d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4be:	4b4d      	ldr	r3, [pc, #308]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	f003 030c 	and.w	r3, r3, #12
 800c4c6:	2b08      	cmp	r3, #8
 800c4c8:	d11c      	bne.n	800c504 <HAL_RCC_OscConfig+0x190>
 800c4ca:	4b4a      	ldr	r3, [pc, #296]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d116      	bne.n	800c504 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4d6:	4b47      	ldr	r3, [pc, #284]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0302 	and.w	r3, r3, #2
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <HAL_RCC_OscConfig+0x17a>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d001      	beq.n	800c4ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e1e9      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4ee:	4b41      	ldr	r3, [pc, #260]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	493d      	ldr	r1, [pc, #244]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c4fe:	4313      	orrs	r3, r2
 800c500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c502:	e040      	b.n	800c586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d023      	beq.n	800c554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c50c:	4b39      	ldr	r3, [pc, #228]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a38      	ldr	r2, [pc, #224]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c512:	f043 0301 	orr.w	r3, r3, #1
 800c516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c518:	f7fd f88c 	bl	8009634 <HAL_GetTick>
 800c51c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c51e:	e008      	b.n	800c532 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c520:	f7fd f888 	bl	8009634 <HAL_GetTick>
 800c524:	4602      	mov	r2, r0
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d901      	bls.n	800c532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e1c7      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c532:	4b30      	ldr	r3, [pc, #192]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0f0      	beq.n	800c520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c53e:	4b2d      	ldr	r3, [pc, #180]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	00db      	lsls	r3, r3, #3
 800c54c:	4929      	ldr	r1, [pc, #164]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	600b      	str	r3, [r1, #0]
 800c552:	e018      	b.n	800c586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c554:	4b27      	ldr	r3, [pc, #156]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a26      	ldr	r2, [pc, #152]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c560:	f7fd f868 	bl	8009634 <HAL_GetTick>
 800c564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c566:	e008      	b.n	800c57a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c568:	f7fd f864 	bl	8009634 <HAL_GetTick>
 800c56c:	4602      	mov	r2, r0
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	2b02      	cmp	r3, #2
 800c574:	d901      	bls.n	800c57a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e1a3      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c57a:	4b1e      	ldr	r3, [pc, #120]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1f0      	bne.n	800c568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0308 	and.w	r3, r3, #8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d038      	beq.n	800c604 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d019      	beq.n	800c5ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c59a:	4b16      	ldr	r3, [pc, #88]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c59e:	4a15      	ldr	r2, [pc, #84]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c5a0:	f043 0301 	orr.w	r3, r3, #1
 800c5a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5a6:	f7fd f845 	bl	8009634 <HAL_GetTick>
 800c5aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5ae:	f7fd f841 	bl	8009634 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d901      	bls.n	800c5c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e180      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5c0:	4b0c      	ldr	r3, [pc, #48]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c5c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5c4:	f003 0302 	and.w	r3, r3, #2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0f0      	beq.n	800c5ae <HAL_RCC_OscConfig+0x23a>
 800c5cc:	e01a      	b.n	800c604 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5ce:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d2:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	f023 0301 	bic.w	r3, r3, #1
 800c5d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5da:	f7fd f82b 	bl	8009634 <HAL_GetTick>
 800c5de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5e0:	e00a      	b.n	800c5f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5e2:	f7fd f827 	bl	8009634 <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d903      	bls.n	800c5f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e166      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
 800c5f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5f8:	4b92      	ldr	r3, [pc, #584]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fc:	f003 0302 	and.w	r3, r3, #2
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1ee      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f000 80a4 	beq.w	800c75a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c612:	4b8c      	ldr	r3, [pc, #560]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10d      	bne.n	800c63a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c61e:	4b89      	ldr	r3, [pc, #548]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	4a88      	ldr	r2, [pc, #544]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c628:	6413      	str	r3, [r2, #64]	; 0x40
 800c62a:	4b86      	ldr	r3, [pc, #536]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c632:	60bb      	str	r3, [r7, #8]
 800c634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c636:	2301      	movs	r3, #1
 800c638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c63a:	4b83      	ldr	r3, [pc, #524]	; (800c848 <HAL_RCC_OscConfig+0x4d4>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c642:	2b00      	cmp	r3, #0
 800c644:	d118      	bne.n	800c678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c646:	4b80      	ldr	r3, [pc, #512]	; (800c848 <HAL_RCC_OscConfig+0x4d4>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a7f      	ldr	r2, [pc, #508]	; (800c848 <HAL_RCC_OscConfig+0x4d4>)
 800c64c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c652:	f7fc ffef 	bl	8009634 <HAL_GetTick>
 800c656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c658:	e008      	b.n	800c66c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c65a:	f7fc ffeb 	bl	8009634 <HAL_GetTick>
 800c65e:	4602      	mov	r2, r0
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	2b64      	cmp	r3, #100	; 0x64
 800c666:	d901      	bls.n	800c66c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c668:	2303      	movs	r3, #3
 800c66a:	e12a      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c66c:	4b76      	ldr	r3, [pc, #472]	; (800c848 <HAL_RCC_OscConfig+0x4d4>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0f0      	beq.n	800c65a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d106      	bne.n	800c68e <HAL_RCC_OscConfig+0x31a>
 800c680:	4b70      	ldr	r3, [pc, #448]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c684:	4a6f      	ldr	r2, [pc, #444]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c686:	f043 0301 	orr.w	r3, r3, #1
 800c68a:	6713      	str	r3, [r2, #112]	; 0x70
 800c68c:	e02d      	b.n	800c6ea <HAL_RCC_OscConfig+0x376>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10c      	bne.n	800c6b0 <HAL_RCC_OscConfig+0x33c>
 800c696:	4b6b      	ldr	r3, [pc, #428]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c69a:	4a6a      	ldr	r2, [pc, #424]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c69c:	f023 0301 	bic.w	r3, r3, #1
 800c6a0:	6713      	str	r3, [r2, #112]	; 0x70
 800c6a2:	4b68      	ldr	r3, [pc, #416]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a6:	4a67      	ldr	r2, [pc, #412]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6a8:	f023 0304 	bic.w	r3, r3, #4
 800c6ac:	6713      	str	r3, [r2, #112]	; 0x70
 800c6ae:	e01c      	b.n	800c6ea <HAL_RCC_OscConfig+0x376>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	2b05      	cmp	r3, #5
 800c6b6:	d10c      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x35e>
 800c6b8:	4b62      	ldr	r3, [pc, #392]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6bc:	4a61      	ldr	r2, [pc, #388]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6be:	f043 0304 	orr.w	r3, r3, #4
 800c6c2:	6713      	str	r3, [r2, #112]	; 0x70
 800c6c4:	4b5f      	ldr	r3, [pc, #380]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c8:	4a5e      	ldr	r2, [pc, #376]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6ca:	f043 0301 	orr.w	r3, r3, #1
 800c6ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c6d0:	e00b      	b.n	800c6ea <HAL_RCC_OscConfig+0x376>
 800c6d2:	4b5c      	ldr	r3, [pc, #368]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d6:	4a5b      	ldr	r2, [pc, #364]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6d8:	f023 0301 	bic.w	r3, r3, #1
 800c6dc:	6713      	str	r3, [r2, #112]	; 0x70
 800c6de:	4b59      	ldr	r3, [pc, #356]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e2:	4a58      	ldr	r2, [pc, #352]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c6e4:	f023 0304 	bic.w	r3, r3, #4
 800c6e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d015      	beq.n	800c71e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6f2:	f7fc ff9f 	bl	8009634 <HAL_GetTick>
 800c6f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6f8:	e00a      	b.n	800c710 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6fa:	f7fc ff9b 	bl	8009634 <HAL_GetTick>
 800c6fe:	4602      	mov	r2, r0
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	f241 3288 	movw	r2, #5000	; 0x1388
 800c708:	4293      	cmp	r3, r2
 800c70a:	d901      	bls.n	800c710 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e0d8      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c710:	4b4c      	ldr	r3, [pc, #304]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c714:	f003 0302 	and.w	r3, r3, #2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d0ee      	beq.n	800c6fa <HAL_RCC_OscConfig+0x386>
 800c71c:	e014      	b.n	800c748 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c71e:	f7fc ff89 	bl	8009634 <HAL_GetTick>
 800c722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c724:	e00a      	b.n	800c73c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c726:	f7fc ff85 	bl	8009634 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	f241 3288 	movw	r2, #5000	; 0x1388
 800c734:	4293      	cmp	r3, r2
 800c736:	d901      	bls.n	800c73c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e0c2      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c73c:	4b41      	ldr	r3, [pc, #260]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c740:	f003 0302 	and.w	r3, r3, #2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1ee      	bne.n	800c726 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d105      	bne.n	800c75a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c74e:	4b3d      	ldr	r3, [pc, #244]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c752:	4a3c      	ldr	r2, [pc, #240]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	699b      	ldr	r3, [r3, #24]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f000 80ae 	beq.w	800c8c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c764:	4b37      	ldr	r3, [pc, #220]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f003 030c 	and.w	r3, r3, #12
 800c76c:	2b08      	cmp	r3, #8
 800c76e:	d06d      	beq.n	800c84c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d14b      	bne.n	800c810 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c778:	4b32      	ldr	r3, [pc, #200]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a31      	ldr	r2, [pc, #196]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c77e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c784:	f7fc ff56 	bl	8009634 <HAL_GetTick>
 800c788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c78a:	e008      	b.n	800c79e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c78c:	f7fc ff52 	bl	8009634 <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b02      	cmp	r3, #2
 800c798:	d901      	bls.n	800c79e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e091      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c79e:	4b29      	ldr	r3, [pc, #164]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f0      	bne.n	800c78c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69da      	ldr	r2, [r3, #28]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	019b      	lsls	r3, r3, #6
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	041b      	lsls	r3, r3, #16
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7cc:	061b      	lsls	r3, r3, #24
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d4:	071b      	lsls	r3, r3, #28
 800c7d6:	491b      	ldr	r1, [pc, #108]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7dc:	4b19      	ldr	r3, [pc, #100]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a18      	ldr	r2, [pc, #96]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c7e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7e8:	f7fc ff24 	bl	8009634 <HAL_GetTick>
 800c7ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7ee:	e008      	b.n	800c802 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7f0:	f7fc ff20 	bl	8009634 <HAL_GetTick>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d901      	bls.n	800c802 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c7fe:	2303      	movs	r3, #3
 800c800:	e05f      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c802:	4b10      	ldr	r3, [pc, #64]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0f0      	beq.n	800c7f0 <HAL_RCC_OscConfig+0x47c>
 800c80e:	e057      	b.n	800c8c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c810:	4b0c      	ldr	r3, [pc, #48]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a0b      	ldr	r2, [pc, #44]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c81a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c81c:	f7fc ff0a 	bl	8009634 <HAL_GetTick>
 800c820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c822:	e008      	b.n	800c836 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c824:	f7fc ff06 	bl	8009634 <HAL_GetTick>
 800c828:	4602      	mov	r2, r0
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d901      	bls.n	800c836 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c832:	2303      	movs	r3, #3
 800c834:	e045      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c836:	4b03      	ldr	r3, [pc, #12]	; (800c844 <HAL_RCC_OscConfig+0x4d0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1f0      	bne.n	800c824 <HAL_RCC_OscConfig+0x4b0>
 800c842:	e03d      	b.n	800c8c0 <HAL_RCC_OscConfig+0x54c>
 800c844:	40023800 	.word	0x40023800
 800c848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c84c:	4b1f      	ldr	r3, [pc, #124]	; (800c8cc <HAL_RCC_OscConfig+0x558>)
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d030      	beq.n	800c8bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c864:	429a      	cmp	r2, r3
 800c866:	d129      	bne.n	800c8bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c872:	429a      	cmp	r2, r3
 800c874:	d122      	bne.n	800c8bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c87c:	4013      	ands	r3, r2
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c882:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c884:	4293      	cmp	r3, r2
 800c886:	d119      	bne.n	800c8bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c892:	085b      	lsrs	r3, r3, #1
 800c894:	3b01      	subs	r3, #1
 800c896:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c898:	429a      	cmp	r2, r3
 800c89a:	d10f      	bne.n	800c8bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d107      	bne.n	800c8bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d001      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e000      	b.n	800c8c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	40023800 	.word	0x40023800

0800c8d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e0d0      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8e8:	4b6a      	ldr	r3, [pc, #424]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 030f 	and.w	r3, r3, #15
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d910      	bls.n	800c918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8f6:	4b67      	ldr	r3, [pc, #412]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f023 020f 	bic.w	r2, r3, #15
 800c8fe:	4965      	ldr	r1, [pc, #404]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	4313      	orrs	r3, r2
 800c904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c906:	4b63      	ldr	r3, [pc, #396]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 030f 	and.w	r3, r3, #15
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	429a      	cmp	r2, r3
 800c912:	d001      	beq.n	800c918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e0b8      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 0302 	and.w	r3, r3, #2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d020      	beq.n	800c966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 0304 	and.w	r3, r3, #4
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d005      	beq.n	800c93c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c930:	4b59      	ldr	r3, [pc, #356]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	4a58      	ldr	r2, [pc, #352]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c93a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0308 	and.w	r3, r3, #8
 800c944:	2b00      	cmp	r3, #0
 800c946:	d005      	beq.n	800c954 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c948:	4b53      	ldr	r3, [pc, #332]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	4a52      	ldr	r2, [pc, #328]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c94e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c952:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c954:	4b50      	ldr	r3, [pc, #320]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	494d      	ldr	r1, [pc, #308]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c962:	4313      	orrs	r3, r2
 800c964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d040      	beq.n	800c9f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d107      	bne.n	800c98a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c97a:	4b47      	ldr	r3, [pc, #284]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c982:	2b00      	cmp	r3, #0
 800c984:	d115      	bne.n	800c9b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e07f      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d107      	bne.n	800c9a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c992:	4b41      	ldr	r3, [pc, #260]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d109      	bne.n	800c9b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e073      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9a2:	4b3d      	ldr	r3, [pc, #244]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0302 	and.w	r3, r3, #2
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e06b      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c9b2:	4b39      	ldr	r3, [pc, #228]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f023 0203 	bic.w	r2, r3, #3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	4936      	ldr	r1, [pc, #216]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9c4:	f7fc fe36 	bl	8009634 <HAL_GetTick>
 800c9c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9ca:	e00a      	b.n	800c9e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9cc:	f7fc fe32 	bl	8009634 <HAL_GetTick>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d901      	bls.n	800c9e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e053      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9e2:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	f003 020c 	and.w	r2, r3, #12
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d1eb      	bne.n	800c9cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c9f4:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 030f 	and.w	r3, r3, #15
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d210      	bcs.n	800ca24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca02:	4b24      	ldr	r3, [pc, #144]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f023 020f 	bic.w	r2, r3, #15
 800ca0a:	4922      	ldr	r1, [pc, #136]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca12:	4b20      	ldr	r3, [pc, #128]	; (800ca94 <HAL_RCC_ClockConfig+0x1c4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 030f 	and.w	r3, r3, #15
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d001      	beq.n	800ca24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e032      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d008      	beq.n	800ca42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca30:	4b19      	ldr	r3, [pc, #100]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	4916      	ldr	r1, [pc, #88]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0308 	and.w	r3, r3, #8
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d009      	beq.n	800ca62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ca4e:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	490e      	ldr	r1, [pc, #56]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca62:	f000 f821 	bl	800caa8 <HAL_RCC_GetSysClockFreq>
 800ca66:	4602      	mov	r2, r0
 800ca68:	4b0b      	ldr	r3, [pc, #44]	; (800ca98 <HAL_RCC_ClockConfig+0x1c8>)
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	091b      	lsrs	r3, r3, #4
 800ca6e:	f003 030f 	and.w	r3, r3, #15
 800ca72:	490a      	ldr	r1, [pc, #40]	; (800ca9c <HAL_RCC_ClockConfig+0x1cc>)
 800ca74:	5ccb      	ldrb	r3, [r1, r3]
 800ca76:	fa22 f303 	lsr.w	r3, r2, r3
 800ca7a:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <HAL_RCC_ClockConfig+0x1d0>)
 800ca7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <HAL_RCC_ClockConfig+0x1d4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7f5 f88e 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	40023c00 	.word	0x40023c00
 800ca98:	40023800 	.word	0x40023800
 800ca9c:	08025c20 	.word	0x08025c20
 800caa0:	2000000c 	.word	0x2000000c
 800caa4:	20000010 	.word	0x20000010

0800caa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800caa8:	b5b0      	push	{r4, r5, r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800caae:	2100      	movs	r1, #0
 800cab0:	6079      	str	r1, [r7, #4]
 800cab2:	2100      	movs	r1, #0
 800cab4:	60f9      	str	r1, [r7, #12]
 800cab6:	2100      	movs	r1, #0
 800cab8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800caba:	2100      	movs	r1, #0
 800cabc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cabe:	4952      	ldr	r1, [pc, #328]	; (800cc08 <HAL_RCC_GetSysClockFreq+0x160>)
 800cac0:	6889      	ldr	r1, [r1, #8]
 800cac2:	f001 010c 	and.w	r1, r1, #12
 800cac6:	2908      	cmp	r1, #8
 800cac8:	d00d      	beq.n	800cae6 <HAL_RCC_GetSysClockFreq+0x3e>
 800caca:	2908      	cmp	r1, #8
 800cacc:	f200 8094 	bhi.w	800cbf8 <HAL_RCC_GetSysClockFreq+0x150>
 800cad0:	2900      	cmp	r1, #0
 800cad2:	d002      	beq.n	800cada <HAL_RCC_GetSysClockFreq+0x32>
 800cad4:	2904      	cmp	r1, #4
 800cad6:	d003      	beq.n	800cae0 <HAL_RCC_GetSysClockFreq+0x38>
 800cad8:	e08e      	b.n	800cbf8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cada:	4b4c      	ldr	r3, [pc, #304]	; (800cc0c <HAL_RCC_GetSysClockFreq+0x164>)
 800cadc:	60bb      	str	r3, [r7, #8]
      break;
 800cade:	e08e      	b.n	800cbfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cae0:	4b4b      	ldr	r3, [pc, #300]	; (800cc10 <HAL_RCC_GetSysClockFreq+0x168>)
 800cae2:	60bb      	str	r3, [r7, #8]
      break;
 800cae4:	e08b      	b.n	800cbfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cae6:	4948      	ldr	r1, [pc, #288]	; (800cc08 <HAL_RCC_GetSysClockFreq+0x160>)
 800cae8:	6849      	ldr	r1, [r1, #4]
 800caea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800caee:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800caf0:	4945      	ldr	r1, [pc, #276]	; (800cc08 <HAL_RCC_GetSysClockFreq+0x160>)
 800caf2:	6849      	ldr	r1, [r1, #4]
 800caf4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800caf8:	2900      	cmp	r1, #0
 800cafa:	d024      	beq.n	800cb46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cafc:	4942      	ldr	r1, [pc, #264]	; (800cc08 <HAL_RCC_GetSysClockFreq+0x160>)
 800cafe:	6849      	ldr	r1, [r1, #4]
 800cb00:	0989      	lsrs	r1, r1, #6
 800cb02:	4608      	mov	r0, r1
 800cb04:	f04f 0100 	mov.w	r1, #0
 800cb08:	f240 14ff 	movw	r4, #511	; 0x1ff
 800cb0c:	f04f 0500 	mov.w	r5, #0
 800cb10:	ea00 0204 	and.w	r2, r0, r4
 800cb14:	ea01 0305 	and.w	r3, r1, r5
 800cb18:	493d      	ldr	r1, [pc, #244]	; (800cc10 <HAL_RCC_GetSysClockFreq+0x168>)
 800cb1a:	fb01 f003 	mul.w	r0, r1, r3
 800cb1e:	2100      	movs	r1, #0
 800cb20:	fb01 f102 	mul.w	r1, r1, r2
 800cb24:	1844      	adds	r4, r0, r1
 800cb26:	493a      	ldr	r1, [pc, #232]	; (800cc10 <HAL_RCC_GetSysClockFreq+0x168>)
 800cb28:	fba2 0101 	umull	r0, r1, r2, r1
 800cb2c:	1863      	adds	r3, r4, r1
 800cb2e:	4619      	mov	r1, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	461a      	mov	r2, r3
 800cb34:	f04f 0300 	mov.w	r3, #0
 800cb38:	f7f3 fbda 	bl	80002f0 <__aeabi_uldivmod>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4613      	mov	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	e04a      	b.n	800cbdc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb46:	4b30      	ldr	r3, [pc, #192]	; (800cc08 <HAL_RCC_GetSysClockFreq+0x160>)
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	099b      	lsrs	r3, r3, #6
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	f04f 0300 	mov.w	r3, #0
 800cb52:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cb56:	f04f 0100 	mov.w	r1, #0
 800cb5a:	ea02 0400 	and.w	r4, r2, r0
 800cb5e:	ea03 0501 	and.w	r5, r3, r1
 800cb62:	4620      	mov	r0, r4
 800cb64:	4629      	mov	r1, r5
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f04f 0300 	mov.w	r3, #0
 800cb6e:	014b      	lsls	r3, r1, #5
 800cb70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cb74:	0142      	lsls	r2, r0, #5
 800cb76:	4610      	mov	r0, r2
 800cb78:	4619      	mov	r1, r3
 800cb7a:	1b00      	subs	r0, r0, r4
 800cb7c:	eb61 0105 	sbc.w	r1, r1, r5
 800cb80:	f04f 0200 	mov.w	r2, #0
 800cb84:	f04f 0300 	mov.w	r3, #0
 800cb88:	018b      	lsls	r3, r1, #6
 800cb8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800cb8e:	0182      	lsls	r2, r0, #6
 800cb90:	1a12      	subs	r2, r2, r0
 800cb92:	eb63 0301 	sbc.w	r3, r3, r1
 800cb96:	f04f 0000 	mov.w	r0, #0
 800cb9a:	f04f 0100 	mov.w	r1, #0
 800cb9e:	00d9      	lsls	r1, r3, #3
 800cba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cba4:	00d0      	lsls	r0, r2, #3
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	1912      	adds	r2, r2, r4
 800cbac:	eb45 0303 	adc.w	r3, r5, r3
 800cbb0:	f04f 0000 	mov.w	r0, #0
 800cbb4:	f04f 0100 	mov.w	r1, #0
 800cbb8:	0299      	lsls	r1, r3, #10
 800cbba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800cbbe:	0290      	lsls	r0, r2, #10
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	f04f 0300 	mov.w	r3, #0
 800cbd0:	f7f3 fb8e 	bl	80002f0 <__aeabi_uldivmod>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4613      	mov	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <HAL_RCC_GetSysClockFreq+0x160>)
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	0c1b      	lsrs	r3, r3, #16
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf4:	60bb      	str	r3, [r7, #8]
      break;
 800cbf6:	e002      	b.n	800cbfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cbf8:	4b04      	ldr	r3, [pc, #16]	; (800cc0c <HAL_RCC_GetSysClockFreq+0x164>)
 800cbfa:	60bb      	str	r3, [r7, #8]
      break;
 800cbfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bdb0      	pop	{r4, r5, r7, pc}
 800cc08:	40023800 	.word	0x40023800
 800cc0c:	00f42400 	.word	0x00f42400
 800cc10:	017d7840 	.word	0x017d7840

0800cc14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc18:	4b03      	ldr	r3, [pc, #12]	; (800cc28 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	2000000c 	.word	0x2000000c

0800cc2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cc30:	f7ff fff0 	bl	800cc14 <HAL_RCC_GetHCLKFreq>
 800cc34:	4602      	mov	r2, r0
 800cc36:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	0a9b      	lsrs	r3, r3, #10
 800cc3c:	f003 0307 	and.w	r3, r3, #7
 800cc40:	4903      	ldr	r1, [pc, #12]	; (800cc50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc42:	5ccb      	ldrb	r3, [r1, r3]
 800cc44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	40023800 	.word	0x40023800
 800cc50:	08025c30 	.word	0x08025c30

0800cc54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	220f      	movs	r2, #15
 800cc62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cc64:	4b12      	ldr	r3, [pc, #72]	; (800ccb0 <HAL_RCC_GetClockConfig+0x5c>)
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	f003 0203 	and.w	r2, r3, #3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cc70:	4b0f      	ldr	r3, [pc, #60]	; (800ccb0 <HAL_RCC_GetClockConfig+0x5c>)
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <HAL_RCC_GetClockConfig+0x5c>)
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cc88:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <HAL_RCC_GetClockConfig+0x5c>)
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	08db      	lsrs	r3, r3, #3
 800cc8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cc96:	4b07      	ldr	r3, [pc, #28]	; (800ccb4 <HAL_RCC_GetClockConfig+0x60>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 020f 	and.w	r2, r3, #15
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	601a      	str	r2, [r3, #0]
}
 800cca2:	bf00      	nop
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	40023800 	.word	0x40023800
 800ccb4:	40023c00 	.word	0x40023c00

0800ccb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d012      	beq.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cce0:	4b69      	ldr	r3, [pc, #420]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	4a68      	ldr	r2, [pc, #416]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cce6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ccea:	6093      	str	r3, [r2, #8]
 800ccec:	4b66      	ldr	r3, [pc, #408]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ccee:	689a      	ldr	r2, [r3, #8]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf4:	4964      	ldr	r1, [pc, #400]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cd02:	2301      	movs	r3, #1
 800cd04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d017      	beq.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd12:	4b5d      	ldr	r3, [pc, #372]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd20:	4959      	ldr	r1, [pc, #356]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd22:	4313      	orrs	r3, r2
 800cd24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd30:	d101      	bne.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cd32:	2301      	movs	r3, #1
 800cd34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d017      	beq.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cd4e:	4b4e      	ldr	r3, [pc, #312]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5c:	494a      	ldr	r1, [pc, #296]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd6c:	d101      	bne.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 0320 	and.w	r3, r3, #32
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 808b 	beq.w	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cd9c:	4b3a      	ldr	r3, [pc, #232]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda0:	4a39      	ldr	r2, [pc, #228]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cda2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cda6:	6413      	str	r3, [r2, #64]	; 0x40
 800cda8:	4b37      	ldr	r3, [pc, #220]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdb0:	60bb      	str	r3, [r7, #8]
 800cdb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cdb4:	4b35      	ldr	r3, [pc, #212]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a34      	ldr	r2, [pc, #208]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cdba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdc0:	f7fc fc38 	bl	8009634 <HAL_GetTick>
 800cdc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cdc6:	e008      	b.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdc8:	f7fc fc34 	bl	8009634 <HAL_GetTick>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	2b64      	cmp	r3, #100	; 0x64
 800cdd4:	d901      	bls.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e38f      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cdda:	4b2c      	ldr	r3, [pc, #176]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0f0      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cde6:	4b28      	ldr	r3, [pc, #160]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d035      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d02e      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ce04:	4b20      	ldr	r3, [pc, #128]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ce0e:	4b1e      	ldr	r3, [pc, #120]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce12:	4a1d      	ldr	r2, [pc, #116]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ce1a:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1e:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ce26:	4a18      	ldr	r2, [pc, #96]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ce2c:	4b16      	ldr	r3, [pc, #88]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d114      	bne.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce38:	f7fc fbfc 	bl	8009634 <HAL_GetTick>
 800ce3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce3e:	e00a      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce40:	f7fc fbf8 	bl	8009634 <HAL_GetTick>
 800ce44:	4602      	mov	r2, r0
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d901      	bls.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e351      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce56:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d0ee      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce6e:	d111      	bne.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ce7c:	4b04      	ldr	r3, [pc, #16]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ce7e:	400b      	ands	r3, r1
 800ce80:	4901      	ldr	r1, [pc, #4]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce82:	4313      	orrs	r3, r2
 800ce84:	608b      	str	r3, [r1, #8]
 800ce86:	e00b      	b.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ce88:	40023800 	.word	0x40023800
 800ce8c:	40007000 	.word	0x40007000
 800ce90:	0ffffcff 	.word	0x0ffffcff
 800ce94:	4bb3      	ldr	r3, [pc, #716]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	4ab2      	ldr	r2, [pc, #712]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ce9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ce9e:	6093      	str	r3, [r2, #8]
 800cea0:	4bb0      	ldr	r3, [pc, #704]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ceac:	49ad      	ldr	r1, [pc, #692]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0310 	and.w	r3, r3, #16
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d010      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cebe:	4ba9      	ldr	r3, [pc, #676]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec4:	4aa7      	ldr	r2, [pc, #668]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ceca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cece:	4ba5      	ldr	r3, [pc, #660]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ced0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced8:	49a2      	ldr	r1, [pc, #648]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceda:	4313      	orrs	r3, r2
 800cedc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ceec:	4b9d      	ldr	r3, [pc, #628]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cef2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cefa:	499a      	ldr	r1, [pc, #616]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cefc:	4313      	orrs	r3, r2
 800cefe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf0e:	4b95      	ldr	r3, [pc, #596]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf1c:	4991      	ldr	r1, [pc, #580]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00a      	beq.n	800cf46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf30:	4b8c      	ldr	r3, [pc, #560]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3e:	4989      	ldr	r1, [pc, #548]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf40:	4313      	orrs	r3, r2
 800cf42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00a      	beq.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf52:	4b84      	ldr	r3, [pc, #528]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf60:	4980      	ldr	r1, [pc, #512]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00a      	beq.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cf74:	4b7b      	ldr	r3, [pc, #492]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf7a:	f023 0203 	bic.w	r2, r3, #3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf82:	4978      	ldr	r1, [pc, #480]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf84:	4313      	orrs	r3, r2
 800cf86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cf96:	4b73      	ldr	r3, [pc, #460]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf9c:	f023 020c 	bic.w	r2, r3, #12
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa4:	496f      	ldr	r1, [pc, #444]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00a      	beq.n	800cfce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cfb8:	4b6a      	ldr	r3, [pc, #424]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfc6:	4967      	ldr	r1, [pc, #412]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00a      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cfda:	4b62      	ldr	r3, [pc, #392]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe8:	495e      	ldr	r1, [pc, #376]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfea:	4313      	orrs	r3, r2
 800cfec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00a      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cffc:	4b59      	ldr	r3, [pc, #356]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d00a:	4956      	ldr	r1, [pc, #344]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d00c:	4313      	orrs	r3, r2
 800d00e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00a      	beq.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d01e:	4b51      	ldr	r3, [pc, #324]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d024:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d02c:	494d      	ldr	r1, [pc, #308]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d02e:	4313      	orrs	r3, r2
 800d030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00a      	beq.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d040:	4b48      	ldr	r3, [pc, #288]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d046:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d04e:	4945      	ldr	r1, [pc, #276]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d050:	4313      	orrs	r3, r2
 800d052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00a      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d062:	4b40      	ldr	r3, [pc, #256]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d070:	493c      	ldr	r1, [pc, #240]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d072:	4313      	orrs	r3, r2
 800d074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00a      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d084:	4b37      	ldr	r3, [pc, #220]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d08a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d092:	4934      	ldr	r1, [pc, #208]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d094:	4313      	orrs	r3, r2
 800d096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d011      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d0a6:	4b2f      	ldr	r3, [pc, #188]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b4:	492b      	ldr	r1, [pc, #172]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0c4:	d101      	bne.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0308 	and.w	r3, r3, #8
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d0e6:	4b1f      	ldr	r3, [pc, #124]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0f4:	491b      	ldr	r1, [pc, #108]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00b      	beq.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d108:	4b16      	ldr	r3, [pc, #88]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d10e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d118:	4912      	ldr	r1, [pc, #72]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d12c:	4b0d      	ldr	r3, [pc, #52]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d132:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d13c:	4909      	ldr	r1, [pc, #36]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d13e:	4313      	orrs	r3, r2
 800d140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00f      	beq.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d150:	4b04      	ldr	r3, [pc, #16]	; (800d164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d156:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d160:	e002      	b.n	800d168 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d162:	bf00      	nop
 800d164:	40023800 	.word	0x40023800
 800d168:	4986      	ldr	r1, [pc, #536]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00b      	beq.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d17c:	4b81      	ldr	r3, [pc, #516]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d17e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d18c:	497d      	ldr	r1, [pc, #500]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d18e:	4313      	orrs	r3, r2
 800d190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d006      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 80d6 	beq.w	800d354 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d1a8:	4b76      	ldr	r3, [pc, #472]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a75      	ldr	r2, [pc, #468]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d1ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1b4:	f7fc fa3e 	bl	8009634 <HAL_GetTick>
 800d1b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1ba:	e008      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d1bc:	f7fc fa3a 	bl	8009634 <HAL_GetTick>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	2b64      	cmp	r3, #100	; 0x64
 800d1c8:	d901      	bls.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e195      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1ce:	4b6d      	ldr	r3, [pc, #436]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1f0      	bne.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d021      	beq.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x572>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d11d      	bne.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d1ee:	4b65      	ldr	r3, [pc, #404]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f4:	0c1b      	lsrs	r3, r3, #16
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d1fc:	4b61      	ldr	r3, [pc, #388]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d202:	0e1b      	lsrs	r3, r3, #24
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	019a      	lsls	r2, r3, #6
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	041b      	lsls	r3, r3, #16
 800d214:	431a      	orrs	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	061b      	lsls	r3, r3, #24
 800d21a:	431a      	orrs	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	071b      	lsls	r3, r3, #28
 800d222:	4958      	ldr	r1, [pc, #352]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d224:	4313      	orrs	r3, r2
 800d226:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d23e:	d00a      	beq.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d02e      	beq.n	800d2aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d254:	d129      	bne.n	800d2aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d256:	4b4b      	ldr	r3, [pc, #300]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d25c:	0c1b      	lsrs	r3, r3, #16
 800d25e:	f003 0303 	and.w	r3, r3, #3
 800d262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d264:	4b47      	ldr	r3, [pc, #284]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d26a:	0f1b      	lsrs	r3, r3, #28
 800d26c:	f003 0307 	and.w	r3, r3, #7
 800d270:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	019a      	lsls	r2, r3, #6
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	041b      	lsls	r3, r3, #16
 800d27c:	431a      	orrs	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	061b      	lsls	r3, r3, #24
 800d284:	431a      	orrs	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	071b      	lsls	r3, r3, #28
 800d28a:	493e      	ldr	r1, [pc, #248]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d28c:	4313      	orrs	r3, r2
 800d28e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d292:	4b3c      	ldr	r3, [pc, #240]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d298:	f023 021f 	bic.w	r2, r3, #31
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	4938      	ldr	r1, [pc, #224]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d01d      	beq.n	800d2f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2b6:	4b33      	ldr	r3, [pc, #204]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2bc:	0e1b      	lsrs	r3, r3, #24
 800d2be:	f003 030f 	and.w	r3, r3, #15
 800d2c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2c4:	4b2f      	ldr	r3, [pc, #188]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ca:	0f1b      	lsrs	r3, r3, #28
 800d2cc:	f003 0307 	and.w	r3, r3, #7
 800d2d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	019a      	lsls	r2, r3, #6
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	041b      	lsls	r3, r3, #16
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	061b      	lsls	r3, r3, #24
 800d2e4:	431a      	orrs	r2, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	071b      	lsls	r3, r3, #28
 800d2ea:	4926      	ldr	r1, [pc, #152]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d011      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	019a      	lsls	r2, r3, #6
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	041b      	lsls	r3, r3, #16
 800d30a:	431a      	orrs	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	061b      	lsls	r3, r3, #24
 800d312:	431a      	orrs	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	071b      	lsls	r3, r3, #28
 800d31a:	491a      	ldr	r1, [pc, #104]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d31c:	4313      	orrs	r3, r2
 800d31e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d322:	4b18      	ldr	r3, [pc, #96]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a17      	ldr	r2, [pc, #92]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d32e:	f7fc f981 	bl	8009634 <HAL_GetTick>
 800d332:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d334:	e008      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d336:	f7fc f97d 	bl	8009634 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b64      	cmp	r3, #100	; 0x64
 800d342:	d901      	bls.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e0d8      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0f0      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	2b01      	cmp	r3, #1
 800d358:	f040 80ce 	bne.w	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d35c:	4b09      	ldr	r3, [pc, #36]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a08      	ldr	r2, [pc, #32]	; (800d384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d368:	f7fc f964 	bl	8009634 <HAL_GetTick>
 800d36c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d36e:	e00b      	b.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d370:	f7fc f960 	bl	8009634 <HAL_GetTick>
 800d374:	4602      	mov	r2, r0
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	2b64      	cmp	r3, #100	; 0x64
 800d37c:	d904      	bls.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d37e:	2303      	movs	r3, #3
 800d380:	e0bb      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 800d382:	bf00      	nop
 800d384:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d388:	4b5e      	ldr	r3, [pc, #376]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d394:	d0ec      	beq.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d009      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d02e      	beq.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d12a      	bne.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d3be:	4b51      	ldr	r3, [pc, #324]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c4:	0c1b      	lsrs	r3, r3, #16
 800d3c6:	f003 0303 	and.w	r3, r3, #3
 800d3ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d3cc:	4b4d      	ldr	r3, [pc, #308]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3d2:	0f1b      	lsrs	r3, r3, #28
 800d3d4:	f003 0307 	and.w	r3, r3, #7
 800d3d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	019a      	lsls	r2, r3, #6
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	041b      	lsls	r3, r3, #16
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	061b      	lsls	r3, r3, #24
 800d3ec:	431a      	orrs	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	071b      	lsls	r3, r3, #28
 800d3f2:	4944      	ldr	r1, [pc, #272]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d3fa:	4b42      	ldr	r3, [pc, #264]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d400:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d408:	3b01      	subs	r3, #1
 800d40a:	021b      	lsls	r3, r3, #8
 800d40c:	493d      	ldr	r1, [pc, #244]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d40e:	4313      	orrs	r3, r2
 800d410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d022      	beq.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d428:	d11d      	bne.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d42a:	4b36      	ldr	r3, [pc, #216]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d430:	0e1b      	lsrs	r3, r3, #24
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d438:	4b32      	ldr	r3, [pc, #200]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d43e:	0f1b      	lsrs	r3, r3, #28
 800d440:	f003 0307 	and.w	r3, r3, #7
 800d444:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	019a      	lsls	r2, r3, #6
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	041b      	lsls	r3, r3, #16
 800d452:	431a      	orrs	r2, r3
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	061b      	lsls	r3, r3, #24
 800d458:	431a      	orrs	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	071b      	lsls	r3, r3, #28
 800d45e:	4929      	ldr	r1, [pc, #164]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d460:	4313      	orrs	r3, r2
 800d462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f003 0308 	and.w	r3, r3, #8
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d028      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d472:	4b24      	ldr	r3, [pc, #144]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d478:	0e1b      	lsrs	r3, r3, #24
 800d47a:	f003 030f 	and.w	r3, r3, #15
 800d47e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d480:	4b20      	ldr	r3, [pc, #128]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d486:	0c1b      	lsrs	r3, r3, #16
 800d488:	f003 0303 	and.w	r3, r3, #3
 800d48c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	695b      	ldr	r3, [r3, #20]
 800d492:	019a      	lsls	r2, r3, #6
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	041b      	lsls	r3, r3, #16
 800d498:	431a      	orrs	r2, r3
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	061b      	lsls	r3, r3, #24
 800d49e:	431a      	orrs	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	071b      	lsls	r3, r3, #28
 800d4a6:	4917      	ldr	r1, [pc, #92]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d4ae:	4b15      	ldr	r3, [pc, #84]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4bc:	4911      	ldr	r1, [pc, #68]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d4c4:	4b0f      	ldr	r3, [pc, #60]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a0e      	ldr	r2, [pc, #56]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d4ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4d0:	f7fc f8b0 	bl	8009634 <HAL_GetTick>
 800d4d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d4d6:	e008      	b.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d4d8:	f7fc f8ac 	bl	8009634 <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	2b64      	cmp	r3, #100	; 0x64
 800d4e4:	d901      	bls.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e007      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d4ea:	4b06      	ldr	r3, [pc, #24]	; (800d504 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4f6:	d1ef      	bne.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3720      	adds	r7, #32
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	40023800 	.word	0x40023800

0800d508 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	e025      	b.n	800d568 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d522:	b2db      	uxtb	r3, r3
 800d524:	2b00      	cmp	r3, #0
 800d526:	d106      	bne.n	800d536 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7f3 fe47 	bl	80011c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2202      	movs	r2, #2
 800d53a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3304      	adds	r3, #4
 800d546:	4619      	mov	r1, r3
 800d548:	4610      	mov	r0, r2
 800d54a:	f000 ff8d 	bl	800e468 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6818      	ldr	r0, [r3, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	461a      	mov	r2, r3
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	f000 fff7 	bl	800e54c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d582:	b2db      	uxtb	r3, r3
 800d584:	2b02      	cmp	r3, #2
 800d586:	d101      	bne.n	800d58c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d588:	2302      	movs	r3, #2
 800d58a:	e018      	b.n	800d5be <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	68b9      	ldr	r1, [r7, #8]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f001 f855 	bl	800e64c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d104      	bne.n	800d5b4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2205      	movs	r2, #5
 800d5ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d5b2:	e003      	b.n	800d5bc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b082      	sub	sp, #8
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d101      	bne.n	800d5e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d5dc:	2302      	movs	r3, #2
 800d5de:	e00e      	b.n	800d5fe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f001 f850 	bl	800e694 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d101      	bne.n	800d618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	e049      	b.n	800d6ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 f841 	bl	800d6b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2202      	movs	r2, #2
 800d636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3304      	adds	r3, #4
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f000 fb65 	bl	800dd14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2201      	movs	r2, #1
 800d696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2201      	movs	r2, #1
 800d69e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d001      	beq.n	800d6e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e054      	b.n	800d78a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f042 0201 	orr.w	r2, r2, #1
 800d6f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a26      	ldr	r2, [pc, #152]	; (800d798 <HAL_TIM_Base_Start_IT+0xd0>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d022      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d70a:	d01d      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a22      	ldr	r2, [pc, #136]	; (800d79c <HAL_TIM_Base_Start_IT+0xd4>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d018      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a21      	ldr	r2, [pc, #132]	; (800d7a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d013      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a1f      	ldr	r2, [pc, #124]	; (800d7a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d00e      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a1e      	ldr	r2, [pc, #120]	; (800d7a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d009      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a1c      	ldr	r2, [pc, #112]	; (800d7ac <HAL_TIM_Base_Start_IT+0xe4>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d004      	beq.n	800d748 <HAL_TIM_Base_Start_IT+0x80>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a1b      	ldr	r2, [pc, #108]	; (800d7b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d115      	bne.n	800d774 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	689a      	ldr	r2, [r3, #8]
 800d74e:	4b19      	ldr	r3, [pc, #100]	; (800d7b4 <HAL_TIM_Base_Start_IT+0xec>)
 800d750:	4013      	ands	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2b06      	cmp	r3, #6
 800d758:	d015      	beq.n	800d786 <HAL_TIM_Base_Start_IT+0xbe>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d760:	d011      	beq.n	800d786 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f042 0201 	orr.w	r2, r2, #1
 800d770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d772:	e008      	b.n	800d786 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f042 0201 	orr.w	r2, r2, #1
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	e000      	b.n	800d788 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3714      	adds	r7, #20
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	40010000 	.word	0x40010000
 800d79c:	40000400 	.word	0x40000400
 800d7a0:	40000800 	.word	0x40000800
 800d7a4:	40000c00 	.word	0x40000c00
 800d7a8:	40010400 	.word	0x40010400
 800d7ac:	40014000 	.word	0x40014000
 800d7b0:	40001800 	.word	0x40001800
 800d7b4:	00010007 	.word	0x00010007

0800d7b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e049      	b.n	800d85e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7f4 fbaa 	bl	8001f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	f000 fa8c 	bl	800dd14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b082      	sub	sp, #8
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	f003 0302 	and.w	r3, r3, #2
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d122      	bne.n	800d8c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	2b02      	cmp	r3, #2
 800d888:	d11b      	bne.n	800d8c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f06f 0202 	mvn.w	r2, #2
 800d892:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	f003 0303 	and.w	r3, r3, #3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fa15 	bl	800dcd8 <HAL_TIM_IC_CaptureCallback>
 800d8ae:	e005      	b.n	800d8bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 fa07 	bl	800dcc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fa18 	bl	800dcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	d122      	bne.n	800d916 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	f003 0304 	and.w	r3, r3, #4
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	d11b      	bne.n	800d916 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f06f 0204 	mvn.w	r2, #4
 800d8e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d003      	beq.n	800d904 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f9eb 	bl	800dcd8 <HAL_TIM_IC_CaptureCallback>
 800d902:	e005      	b.n	800d910 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 f9dd 	bl	800dcc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f9ee 	bl	800dcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	f003 0308 	and.w	r3, r3, #8
 800d920:	2b08      	cmp	r3, #8
 800d922:	d122      	bne.n	800d96a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	f003 0308 	and.w	r3, r3, #8
 800d92e:	2b08      	cmp	r3, #8
 800d930:	d11b      	bne.n	800d96a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f06f 0208 	mvn.w	r2, #8
 800d93a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2204      	movs	r2, #4
 800d940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	69db      	ldr	r3, [r3, #28]
 800d948:	f003 0303 	and.w	r3, r3, #3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d003      	beq.n	800d958 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 f9c1 	bl	800dcd8 <HAL_TIM_IC_CaptureCallback>
 800d956:	e005      	b.n	800d964 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f9b3 	bl	800dcc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f9c4 	bl	800dcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	f003 0310 	and.w	r3, r3, #16
 800d974:	2b10      	cmp	r3, #16
 800d976:	d122      	bne.n	800d9be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	f003 0310 	and.w	r3, r3, #16
 800d982:	2b10      	cmp	r3, #16
 800d984:	d11b      	bne.n	800d9be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f06f 0210 	mvn.w	r2, #16
 800d98e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2208      	movs	r2, #8
 800d994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	69db      	ldr	r3, [r3, #28]
 800d99c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d003      	beq.n	800d9ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 f997 	bl	800dcd8 <HAL_TIM_IC_CaptureCallback>
 800d9aa:	e005      	b.n	800d9b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f989 	bl	800dcc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f99a 	bl	800dcec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	691b      	ldr	r3, [r3, #16]
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d10e      	bne.n	800d9ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d107      	bne.n	800d9ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f06f 0201 	mvn.w	r2, #1
 800d9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7f3 ffbf 	bl	8001968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9f4:	2b80      	cmp	r3, #128	; 0x80
 800d9f6:	d10e      	bne.n	800da16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da02:	2b80      	cmp	r3, #128	; 0x80
 800da04:	d107      	bne.n	800da16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 fd15 	bl	800e440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da24:	d10e      	bne.n	800da44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da30:	2b80      	cmp	r3, #128	; 0x80
 800da32:	d107      	bne.n	800da44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800da3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fd08 	bl	800e454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da4e:	2b40      	cmp	r3, #64	; 0x40
 800da50:	d10e      	bne.n	800da70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da5c:	2b40      	cmp	r3, #64	; 0x40
 800da5e:	d107      	bne.n	800da70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f948 	bl	800dd00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	f003 0320 	and.w	r3, r3, #32
 800da7a:	2b20      	cmp	r3, #32
 800da7c:	d10e      	bne.n	800da9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	f003 0320 	and.w	r3, r3, #32
 800da88:	2b20      	cmp	r3, #32
 800da8a:	d107      	bne.n	800da9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f06f 0220 	mvn.w	r2, #32
 800da94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fcc8 	bl	800e42c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da9c:	bf00      	nop
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d101      	bne.n	800dabe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800daba:	2302      	movs	r3, #2
 800dabc:	e0fd      	b.n	800dcba <HAL_TIM_PWM_ConfigChannel+0x216>
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b14      	cmp	r3, #20
 800daca:	f200 80f0 	bhi.w	800dcae <HAL_TIM_PWM_ConfigChannel+0x20a>
 800dace:	a201      	add	r2, pc, #4	; (adr r2, 800dad4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800dad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad4:	0800db29 	.word	0x0800db29
 800dad8:	0800dcaf 	.word	0x0800dcaf
 800dadc:	0800dcaf 	.word	0x0800dcaf
 800dae0:	0800dcaf 	.word	0x0800dcaf
 800dae4:	0800db69 	.word	0x0800db69
 800dae8:	0800dcaf 	.word	0x0800dcaf
 800daec:	0800dcaf 	.word	0x0800dcaf
 800daf0:	0800dcaf 	.word	0x0800dcaf
 800daf4:	0800dbab 	.word	0x0800dbab
 800daf8:	0800dcaf 	.word	0x0800dcaf
 800dafc:	0800dcaf 	.word	0x0800dcaf
 800db00:	0800dcaf 	.word	0x0800dcaf
 800db04:	0800dbeb 	.word	0x0800dbeb
 800db08:	0800dcaf 	.word	0x0800dcaf
 800db0c:	0800dcaf 	.word	0x0800dcaf
 800db10:	0800dcaf 	.word	0x0800dcaf
 800db14:	0800dc2d 	.word	0x0800dc2d
 800db18:	0800dcaf 	.word	0x0800dcaf
 800db1c:	0800dcaf 	.word	0x0800dcaf
 800db20:	0800dcaf 	.word	0x0800dcaf
 800db24:	0800dc6d 	.word	0x0800dc6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68b9      	ldr	r1, [r7, #8]
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 f990 	bl	800de54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	699a      	ldr	r2, [r3, #24]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f042 0208 	orr.w	r2, r2, #8
 800db42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	699a      	ldr	r2, [r3, #24]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f022 0204 	bic.w	r2, r2, #4
 800db52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6999      	ldr	r1, [r3, #24]
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	691a      	ldr	r2, [r3, #16]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	430a      	orrs	r2, r1
 800db64:	619a      	str	r2, [r3, #24]
      break;
 800db66:	e0a3      	b.n	800dcb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68b9      	ldr	r1, [r7, #8]
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 f9e2 	bl	800df38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	699a      	ldr	r2, [r3, #24]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	699a      	ldr	r2, [r3, #24]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	6999      	ldr	r1, [r3, #24]
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	021a      	lsls	r2, r3, #8
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	430a      	orrs	r2, r1
 800dba6:	619a      	str	r2, [r3, #24]
      break;
 800dba8:	e082      	b.n	800dcb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68b9      	ldr	r1, [r7, #8]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 fa39 	bl	800e028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69da      	ldr	r2, [r3, #28]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f042 0208 	orr.w	r2, r2, #8
 800dbc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	69da      	ldr	r2, [r3, #28]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f022 0204 	bic.w	r2, r2, #4
 800dbd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	69d9      	ldr	r1, [r3, #28]
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	691a      	ldr	r2, [r3, #16]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	430a      	orrs	r2, r1
 800dbe6:	61da      	str	r2, [r3, #28]
      break;
 800dbe8:	e062      	b.n	800dcb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	68b9      	ldr	r1, [r7, #8]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 fa8f 	bl	800e114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	69da      	ldr	r2, [r3, #28]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	69da      	ldr	r2, [r3, #28]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	69d9      	ldr	r1, [r3, #28]
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	021a      	lsls	r2, r3, #8
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	430a      	orrs	r2, r1
 800dc28:	61da      	str	r2, [r3, #28]
      break;
 800dc2a:	e041      	b.n	800dcb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68b9      	ldr	r1, [r7, #8]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fac6 	bl	800e1c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f042 0208 	orr.w	r2, r2, #8
 800dc46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f022 0204 	bic.w	r2, r2, #4
 800dc56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	691a      	ldr	r2, [r3, #16]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	430a      	orrs	r2, r1
 800dc68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dc6a:	e021      	b.n	800dcb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68b9      	ldr	r1, [r7, #8]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 faf8 	bl	800e268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	691b      	ldr	r3, [r3, #16]
 800dca2:	021a      	lsls	r2, r3, #8
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dcac:	e000      	b.n	800dcb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800dcae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop

0800dcc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a40      	ldr	r2, [pc, #256]	; (800de28 <TIM_Base_SetConfig+0x114>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d013      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd32:	d00f      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a3d      	ldr	r2, [pc, #244]	; (800de2c <TIM_Base_SetConfig+0x118>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d00b      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a3c      	ldr	r2, [pc, #240]	; (800de30 <TIM_Base_SetConfig+0x11c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d007      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a3b      	ldr	r2, [pc, #236]	; (800de34 <TIM_Base_SetConfig+0x120>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d003      	beq.n	800dd54 <TIM_Base_SetConfig+0x40>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a3a      	ldr	r2, [pc, #232]	; (800de38 <TIM_Base_SetConfig+0x124>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d108      	bne.n	800dd66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a2f      	ldr	r2, [pc, #188]	; (800de28 <TIM_Base_SetConfig+0x114>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d02b      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd74:	d027      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a2c      	ldr	r2, [pc, #176]	; (800de2c <TIM_Base_SetConfig+0x118>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d023      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a2b      	ldr	r2, [pc, #172]	; (800de30 <TIM_Base_SetConfig+0x11c>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d01f      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a2a      	ldr	r2, [pc, #168]	; (800de34 <TIM_Base_SetConfig+0x120>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d01b      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a29      	ldr	r2, [pc, #164]	; (800de38 <TIM_Base_SetConfig+0x124>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d017      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a28      	ldr	r2, [pc, #160]	; (800de3c <TIM_Base_SetConfig+0x128>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d013      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a27      	ldr	r2, [pc, #156]	; (800de40 <TIM_Base_SetConfig+0x12c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00f      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a26      	ldr	r2, [pc, #152]	; (800de44 <TIM_Base_SetConfig+0x130>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d00b      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a25      	ldr	r2, [pc, #148]	; (800de48 <TIM_Base_SetConfig+0x134>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d007      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a24      	ldr	r2, [pc, #144]	; (800de4c <TIM_Base_SetConfig+0x138>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d003      	beq.n	800ddc6 <TIM_Base_SetConfig+0xb2>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a23      	ldr	r2, [pc, #140]	; (800de50 <TIM_Base_SetConfig+0x13c>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d108      	bne.n	800ddd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	689a      	ldr	r2, [r3, #8]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a0a      	ldr	r2, [pc, #40]	; (800de28 <TIM_Base_SetConfig+0x114>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d003      	beq.n	800de0c <TIM_Base_SetConfig+0xf8>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a0c      	ldr	r2, [pc, #48]	; (800de38 <TIM_Base_SetConfig+0x124>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d103      	bne.n	800de14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	691a      	ldr	r2, [r3, #16]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	615a      	str	r2, [r3, #20]
}
 800de1a:	bf00      	nop
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	40010000 	.word	0x40010000
 800de2c:	40000400 	.word	0x40000400
 800de30:	40000800 	.word	0x40000800
 800de34:	40000c00 	.word	0x40000c00
 800de38:	40010400 	.word	0x40010400
 800de3c:	40014000 	.word	0x40014000
 800de40:	40014400 	.word	0x40014400
 800de44:	40014800 	.word	0x40014800
 800de48:	40001800 	.word	0x40001800
 800de4c:	40001c00 	.word	0x40001c00
 800de50:	40002000 	.word	0x40002000

0800de54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de54:	b480      	push	{r7}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	f023 0201 	bic.w	r2, r3, #1
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	4b2b      	ldr	r3, [pc, #172]	; (800df2c <TIM_OC1_SetConfig+0xd8>)
 800de80:	4013      	ands	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f023 0303 	bic.w	r3, r3, #3
 800de8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	4313      	orrs	r3, r2
 800de94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f023 0302 	bic.w	r3, r3, #2
 800de9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a21      	ldr	r2, [pc, #132]	; (800df30 <TIM_OC1_SetConfig+0xdc>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d003      	beq.n	800deb8 <TIM_OC1_SetConfig+0x64>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a20      	ldr	r2, [pc, #128]	; (800df34 <TIM_OC1_SetConfig+0xe0>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d10c      	bne.n	800ded2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	f023 0308 	bic.w	r3, r3, #8
 800debe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f023 0304 	bic.w	r3, r3, #4
 800ded0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a16      	ldr	r2, [pc, #88]	; (800df30 <TIM_OC1_SetConfig+0xdc>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d003      	beq.n	800dee2 <TIM_OC1_SetConfig+0x8e>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a15      	ldr	r2, [pc, #84]	; (800df34 <TIM_OC1_SetConfig+0xe0>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d111      	bne.n	800df06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800def0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	4313      	orrs	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	4313      	orrs	r3, r2
 800df04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	621a      	str	r2, [r3, #32]
}
 800df20:	bf00      	nop
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	fffeff8f 	.word	0xfffeff8f
 800df30:	40010000 	.word	0x40010000
 800df34:	40010400 	.word	0x40010400

0800df38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df38:	b480      	push	{r7}
 800df3a:	b087      	sub	sp, #28
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	f023 0210 	bic.w	r2, r3, #16
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a1b      	ldr	r3, [r3, #32]
 800df52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	699b      	ldr	r3, [r3, #24]
 800df5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	4b2e      	ldr	r3, [pc, #184]	; (800e01c <TIM_OC2_SetConfig+0xe4>)
 800df64:	4013      	ands	r3, r2
 800df66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f023 0320 	bic.w	r3, r3, #32
 800df82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	011b      	lsls	r3, r3, #4
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a23      	ldr	r2, [pc, #140]	; (800e020 <TIM_OC2_SetConfig+0xe8>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d003      	beq.n	800dfa0 <TIM_OC2_SetConfig+0x68>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a22      	ldr	r2, [pc, #136]	; (800e024 <TIM_OC2_SetConfig+0xec>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d10d      	bne.n	800dfbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	011b      	lsls	r3, r3, #4
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a18      	ldr	r2, [pc, #96]	; (800e020 <TIM_OC2_SetConfig+0xe8>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d003      	beq.n	800dfcc <TIM_OC2_SetConfig+0x94>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a17      	ldr	r2, [pc, #92]	; (800e024 <TIM_OC2_SetConfig+0xec>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d113      	bne.n	800dff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	699b      	ldr	r3, [r3, #24]
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	693a      	ldr	r2, [r7, #16]
 800dff0:	4313      	orrs	r3, r2
 800dff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	685a      	ldr	r2, [r3, #4]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	621a      	str	r2, [r3, #32]
}
 800e00e:	bf00      	nop
 800e010:	371c      	adds	r7, #28
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	feff8fff 	.word	0xfeff8fff
 800e020:	40010000 	.word	0x40010000
 800e024:	40010400 	.word	0x40010400

0800e028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e028:	b480      	push	{r7}
 800e02a:	b087      	sub	sp, #28
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a1b      	ldr	r3, [r3, #32]
 800e036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a1b      	ldr	r3, [r3, #32]
 800e042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	69db      	ldr	r3, [r3, #28]
 800e04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	4b2d      	ldr	r3, [pc, #180]	; (800e108 <TIM_OC3_SetConfig+0xe0>)
 800e054:	4013      	ands	r3, r2
 800e056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f023 0303 	bic.w	r3, r3, #3
 800e05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	021b      	lsls	r3, r3, #8
 800e078:	697a      	ldr	r2, [r7, #20]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a22      	ldr	r2, [pc, #136]	; (800e10c <TIM_OC3_SetConfig+0xe4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d003      	beq.n	800e08e <TIM_OC3_SetConfig+0x66>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a21      	ldr	r2, [pc, #132]	; (800e110 <TIM_OC3_SetConfig+0xe8>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d10d      	bne.n	800e0aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a17      	ldr	r2, [pc, #92]	; (800e10c <TIM_OC3_SetConfig+0xe4>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d003      	beq.n	800e0ba <TIM_OC3_SetConfig+0x92>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a16      	ldr	r2, [pc, #88]	; (800e110 <TIM_OC3_SetConfig+0xe8>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d113      	bne.n	800e0e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	011b      	lsls	r3, r3, #4
 800e0dc:	693a      	ldr	r2, [r7, #16]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	697a      	ldr	r2, [r7, #20]
 800e0fa:	621a      	str	r2, [r3, #32]
}
 800e0fc:	bf00      	nop
 800e0fe:	371c      	adds	r7, #28
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr
 800e108:	fffeff8f 	.word	0xfffeff8f
 800e10c:	40010000 	.word	0x40010000
 800e110:	40010400 	.word	0x40010400

0800e114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e114:	b480      	push	{r7}
 800e116:	b087      	sub	sp, #28
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	69db      	ldr	r3, [r3, #28]
 800e13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	4b1e      	ldr	r3, [pc, #120]	; (800e1b8 <TIM_OC4_SetConfig+0xa4>)
 800e140:	4013      	ands	r3, r2
 800e142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e14a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	021b      	lsls	r3, r3, #8
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	4313      	orrs	r3, r2
 800e156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e15e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	031b      	lsls	r3, r3, #12
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	4313      	orrs	r3, r2
 800e16a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a13      	ldr	r2, [pc, #76]	; (800e1bc <TIM_OC4_SetConfig+0xa8>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d003      	beq.n	800e17c <TIM_OC4_SetConfig+0x68>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a12      	ldr	r2, [pc, #72]	; (800e1c0 <TIM_OC4_SetConfig+0xac>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d109      	bne.n	800e190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	019b      	lsls	r3, r3, #6
 800e18a:	697a      	ldr	r2, [r7, #20]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	693a      	ldr	r2, [r7, #16]
 800e1a8:	621a      	str	r2, [r3, #32]
}
 800e1aa:	bf00      	nop
 800e1ac:	371c      	adds	r7, #28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	feff8fff 	.word	0xfeff8fff
 800e1bc:	40010000 	.word	0x40010000
 800e1c0:	40010400 	.word	0x40010400

0800e1c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b087      	sub	sp, #28
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a1b      	ldr	r3, [r3, #32]
 800e1d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	4b1b      	ldr	r3, [pc, #108]	; (800e25c <TIM_OC5_SetConfig+0x98>)
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	041b      	lsls	r3, r3, #16
 800e20c:	693a      	ldr	r2, [r7, #16]
 800e20e:	4313      	orrs	r3, r2
 800e210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a12      	ldr	r2, [pc, #72]	; (800e260 <TIM_OC5_SetConfig+0x9c>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d003      	beq.n	800e222 <TIM_OC5_SetConfig+0x5e>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a11      	ldr	r2, [pc, #68]	; (800e264 <TIM_OC5_SetConfig+0xa0>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d109      	bne.n	800e236 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	021b      	lsls	r3, r3, #8
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	4313      	orrs	r3, r2
 800e234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	697a      	ldr	r2, [r7, #20]
 800e23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	693a      	ldr	r2, [r7, #16]
 800e24e:	621a      	str	r2, [r3, #32]
}
 800e250:	bf00      	nop
 800e252:	371c      	adds	r7, #28
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	fffeff8f 	.word	0xfffeff8f
 800e260:	40010000 	.word	0x40010000
 800e264:	40010400 	.word	0x40010400

0800e268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	4b1c      	ldr	r3, [pc, #112]	; (800e304 <TIM_OC6_SetConfig+0x9c>)
 800e294:	4013      	ands	r3, r2
 800e296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	051b      	lsls	r3, r3, #20
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a13      	ldr	r2, [pc, #76]	; (800e308 <TIM_OC6_SetConfig+0xa0>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d003      	beq.n	800e2c8 <TIM_OC6_SetConfig+0x60>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a12      	ldr	r2, [pc, #72]	; (800e30c <TIM_OC6_SetConfig+0xa4>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d109      	bne.n	800e2dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	695b      	ldr	r3, [r3, #20]
 800e2d4:	029b      	lsls	r3, r3, #10
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	685a      	ldr	r2, [r3, #4]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	621a      	str	r2, [r3, #32]
}
 800e2f6:	bf00      	nop
 800e2f8:	371c      	adds	r7, #28
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	feff8fff 	.word	0xfeff8fff
 800e308:	40010000 	.word	0x40010000
 800e30c:	40010400 	.word	0x40010400

0800e310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e320:	2b01      	cmp	r3, #1
 800e322:	d101      	bne.n	800e328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e324:	2302      	movs	r3, #2
 800e326:	e06d      	b.n	800e404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a30      	ldr	r2, [pc, #192]	; (800e410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d004      	beq.n	800e35c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a2f      	ldr	r2, [pc, #188]	; (800e414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d108      	bne.n	800e36e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e362:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e374:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a20      	ldr	r2, [pc, #128]	; (800e410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d022      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e39a:	d01d      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a1d      	ldr	r2, [pc, #116]	; (800e418 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d018      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a1c      	ldr	r2, [pc, #112]	; (800e41c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d013      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a1a      	ldr	r2, [pc, #104]	; (800e420 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d00e      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a15      	ldr	r2, [pc, #84]	; (800e414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d009      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a16      	ldr	r2, [pc, #88]	; (800e424 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d004      	beq.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a15      	ldr	r2, [pc, #84]	; (800e428 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d10c      	bne.n	800e3f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	40010000 	.word	0x40010000
 800e414:	40010400 	.word	0x40010400
 800e418:	40000400 	.word	0x40000400
 800e41c:	40000800 	.word	0x40000800
 800e420:	40000c00 	.word	0x40000c00
 800e424:	40014000 	.word	0x40014000
 800e428:	40001800 	.word	0x40001800

0800e42c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800e476:	2300      	movs	r3, #0
 800e478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d027      	beq.n	800e4d2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	4b2f      	ldr	r3, [pc, #188]	; (800e548 <FMC_SDRAM_Init+0xe0>)
 800e48c:	4013      	ands	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e498:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800e49e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800e4a4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800e4aa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800e4b0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800e4b6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800e4bc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e4c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	e032      	b.n	800e538 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e4de:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e4e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e4ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	4b12      	ldr	r3, [pc, #72]	; (800e548 <FMC_SDRAM_Init+0xe0>)
 800e500:	4013      	ands	r3, r2
 800e502:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e50c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800e512:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800e518:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800e51e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800e524:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e526:	68ba      	ldr	r2, [r7, #8]
 800e528:	4313      	orrs	r3, r2
 800e52a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800e538:	2300      	movs	r3, #0
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3714      	adds	r7, #20
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	ffff8000 	.word	0xffff8000

0800e54c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b087      	sub	sp, #28
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d02e      	beq.n	800e5c4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e572:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	3b01      	subs	r3, #1
 800e580:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e582:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	3b01      	subs	r3, #1
 800e58a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e58c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	3b01      	subs	r3, #1
 800e594:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e596:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e5a0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e5aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	609a      	str	r2, [r3, #8]
 800e5c2:	e039      	b.n	800e638 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	4b1e      	ldr	r3, [pc, #120]	; (800e648 <FMC_SDRAM_Timing_Init+0xfc>)
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e5f6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	3b01      	subs	r3, #1
 800e604:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e606:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e610:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	3b01      	subs	r3, #1
 800e618:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e61a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	699b      	ldr	r3, [r3, #24]
 800e620:	3b01      	subs	r3, #1
 800e622:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e624:	4313      	orrs	r3, r2
 800e626:	693a      	ldr	r2, [r7, #16]
 800e628:	4313      	orrs	r3, r2
 800e62a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800e638:	2300      	movs	r3, #0
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	371c      	adds	r7, #28
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	ff0f0fff 	.word	0xff0f0fff

0800e64c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	691a      	ldr	r2, [r3, #16]
 800e65c:	4b0c      	ldr	r3, [pc, #48]	; (800e690 <FMC_SDRAM_SendCommand+0x44>)
 800e65e:	4013      	ands	r3, r2
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	6811      	ldr	r1, [r2, #0]
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	6852      	ldr	r2, [r2, #4]
 800e668:	4311      	orrs	r1, r2
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	6892      	ldr	r2, [r2, #8]
 800e66e:	3a01      	subs	r2, #1
 800e670:	0152      	lsls	r2, r2, #5
 800e672:	4311      	orrs	r1, r2
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	68d2      	ldr	r2, [r2, #12]
 800e678:	0252      	lsls	r2, r2, #9
 800e67a:	430a      	orrs	r2, r1
 800e67c:	431a      	orrs	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	ffc00000 	.word	0xffc00000

0800e694 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	695a      	ldr	r2, [r3, #20]
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	431a      	orrs	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	370c      	adds	r7, #12
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e6ba:	b480      	push	{r7}
 800e6bc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e6be:	bf00      	nop
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ce:	f3ef 8305 	mrs	r3, IPSR
 800e6d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10f      	bne.n	800e6fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6da:	f3ef 8310 	mrs	r3, PRIMASK
 800e6de:	607b      	str	r3, [r7, #4]
  return(result);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d105      	bne.n	800e6f2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6e6:	f3ef 8311 	mrs	r3, BASEPRI
 800e6ea:	603b      	str	r3, [r7, #0]
  return(result);
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d007      	beq.n	800e702 <osKernelInitialize+0x3a>
 800e6f2:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <osKernelInitialize+0x64>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d103      	bne.n	800e702 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e6fa:	f06f 0305 	mvn.w	r3, #5
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	e00c      	b.n	800e71c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e702:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <osKernelInitialize+0x64>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d105      	bne.n	800e716 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e70a:	4b08      	ldr	r3, [pc, #32]	; (800e72c <osKernelInitialize+0x64>)
 800e70c:	2201      	movs	r2, #1
 800e70e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e710:	2300      	movs	r3, #0
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	e002      	b.n	800e71c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e716:	f04f 33ff 	mov.w	r3, #4294967295
 800e71a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e71c:	68fb      	ldr	r3, [r7, #12]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	20023828 	.word	0x20023828

0800e730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e736:	f3ef 8305 	mrs	r3, IPSR
 800e73a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e73c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10f      	bne.n	800e762 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e742:	f3ef 8310 	mrs	r3, PRIMASK
 800e746:	607b      	str	r3, [r7, #4]
  return(result);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d105      	bne.n	800e75a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e74e:	f3ef 8311 	mrs	r3, BASEPRI
 800e752:	603b      	str	r3, [r7, #0]
  return(result);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d007      	beq.n	800e76a <osKernelStart+0x3a>
 800e75a:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <osKernelStart+0x68>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d103      	bne.n	800e76a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e762:	f06f 0305 	mvn.w	r3, #5
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	e010      	b.n	800e78c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e76a:	4b0b      	ldr	r3, [pc, #44]	; (800e798 <osKernelStart+0x68>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d109      	bne.n	800e786 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e772:	f7ff ffa2 	bl	800e6ba <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e776:	4b08      	ldr	r3, [pc, #32]	; (800e798 <osKernelStart+0x68>)
 800e778:	2202      	movs	r2, #2
 800e77a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e77c:	f002 fb18 	bl	8010db0 <vTaskStartScheduler>
      stat = osOK;
 800e780:	2300      	movs	r3, #0
 800e782:	60fb      	str	r3, [r7, #12]
 800e784:	e002      	b.n	800e78c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e78c:	68fb      	ldr	r3, [r7, #12]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	20023828 	.word	0x20023828

0800e79c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b090      	sub	sp, #64	; 0x40
 800e7a0:	af04      	add	r7, sp, #16
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7ac:	f3ef 8305 	mrs	r3, IPSR
 800e7b0:	61fb      	str	r3, [r7, #28]
  return(result);
 800e7b2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f040 808f 	bne.w	800e8d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e7be:	61bb      	str	r3, [r7, #24]
  return(result);
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d105      	bne.n	800e7d2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7c6:	f3ef 8311 	mrs	r3, BASEPRI
 800e7ca:	617b      	str	r3, [r7, #20]
  return(result);
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <osThreadNew+0x3e>
 800e7d2:	4b44      	ldr	r3, [pc, #272]	; (800e8e4 <osThreadNew+0x148>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b02      	cmp	r3, #2
 800e7d8:	d07e      	beq.n	800e8d8 <osThreadNew+0x13c>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d07b      	beq.n	800e8d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e7e0:	2380      	movs	r3, #128	; 0x80
 800e7e2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e7e4:	2318      	movs	r3, #24
 800e7e6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d045      	beq.n	800e884 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <osThreadNew+0x6a>
        name = attr->name;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d002      	beq.n	800e814 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	699b      	ldr	r3, [r3, #24]
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	2b00      	cmp	r3, #0
 800e818:	d008      	beq.n	800e82c <osThreadNew+0x90>
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	2b38      	cmp	r3, #56	; 0x38
 800e81e:	d805      	bhi.n	800e82c <osThreadNew+0x90>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <osThreadNew+0x94>
        return (NULL);
 800e82c:	2300      	movs	r3, #0
 800e82e:	e054      	b.n	800e8da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d003      	beq.n	800e840 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	089b      	lsrs	r3, r3, #2
 800e83e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00e      	beq.n	800e866 <osThreadNew+0xca>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	2b5b      	cmp	r3, #91	; 0x5b
 800e84e:	d90a      	bls.n	800e866 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e854:	2b00      	cmp	r3, #0
 800e856:	d006      	beq.n	800e866 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	695b      	ldr	r3, [r3, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <osThreadNew+0xca>
        mem = 1;
 800e860:	2301      	movs	r3, #1
 800e862:	623b      	str	r3, [r7, #32]
 800e864:	e010      	b.n	800e888 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10c      	bne.n	800e888 <osThreadNew+0xec>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d108      	bne.n	800e888 <osThreadNew+0xec>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	691b      	ldr	r3, [r3, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d104      	bne.n	800e888 <osThreadNew+0xec>
          mem = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	623b      	str	r3, [r7, #32]
 800e882:	e001      	b.n	800e888 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e888:	6a3b      	ldr	r3, [r7, #32]
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d110      	bne.n	800e8b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e896:	9202      	str	r2, [sp, #8]
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	f002 f8a3 	bl	80109f0 <xTaskCreateStatic>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	613b      	str	r3, [r7, #16]
 800e8ae:	e013      	b.n	800e8d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d110      	bne.n	800e8d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	f107 0310 	add.w	r3, r7, #16
 800e8be:	9301      	str	r3, [sp, #4]
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f002 f8f4 	bl	8010ab6 <xTaskCreate>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d001      	beq.n	800e8d8 <osThreadNew+0x13c>
          hTask = NULL;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e8d8:	693b      	ldr	r3, [r7, #16]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3730      	adds	r7, #48	; 0x30
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20023828 	.word	0x20023828

0800e8e8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8ee:	f3ef 8305 	mrs	r3, IPSR
 800e8f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d10f      	bne.n	800e91a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e8fe:	607b      	str	r3, [r7, #4]
  return(result);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d105      	bne.n	800e912 <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e906:	f3ef 8311 	mrs	r3, BASEPRI
 800e90a:	603b      	str	r3, [r7, #0]
  return(result);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d007      	beq.n	800e922 <osThreadYield+0x3a>
 800e912:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <osThreadYield+0x5c>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b02      	cmp	r3, #2
 800e918:	d103      	bne.n	800e922 <osThreadYield+0x3a>
    stat = osErrorISR;
 800e91a:	f06f 0305 	mvn.w	r3, #5
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	e009      	b.n	800e936 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800e922:	2300      	movs	r3, #0
 800e924:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800e926:	4b08      	ldr	r3, [pc, #32]	; (800e948 <osThreadYield+0x60>)
 800e928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e92c:	601a      	str	r2, [r3, #0]
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800e936:	68fb      	ldr	r3, [r7, #12]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	20023828 	.word	0x20023828
 800e948:	e000ed04 	.word	0xe000ed04

0800e94c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e954:	f3ef 8305 	mrs	r3, IPSR
 800e958:	613b      	str	r3, [r7, #16]
  return(result);
 800e95a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10f      	bne.n	800e980 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e960:	f3ef 8310 	mrs	r3, PRIMASK
 800e964:	60fb      	str	r3, [r7, #12]
  return(result);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d105      	bne.n	800e978 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e96c:	f3ef 8311 	mrs	r3, BASEPRI
 800e970:	60bb      	str	r3, [r7, #8]
  return(result);
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d007      	beq.n	800e988 <osDelay+0x3c>
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <osDelay+0x58>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d103      	bne.n	800e988 <osDelay+0x3c>
    stat = osErrorISR;
 800e980:	f06f 0305 	mvn.w	r3, #5
 800e984:	617b      	str	r3, [r7, #20]
 800e986:	e007      	b.n	800e998 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f002 f9d6 	bl	8010d44 <vTaskDelay>
    }
  }

  return (stat);
 800e998:	697b      	ldr	r3, [r7, #20]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3718      	adds	r7, #24
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20023828 	.word	0x20023828

0800e9a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b08c      	sub	sp, #48	; 0x30
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9b8:	f3ef 8305 	mrs	r3, IPSR
 800e9bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800e9be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f040 8086 	bne.w	800ead2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9ca:	617b      	str	r3, [r7, #20]
  return(result);
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d105      	bne.n	800e9de <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9d2:	f3ef 8311 	mrs	r3, BASEPRI
 800e9d6:	613b      	str	r3, [r7, #16]
  return(result);
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d003      	beq.n	800e9e6 <osSemaphoreNew+0x3e>
 800e9de:	4b3f      	ldr	r3, [pc, #252]	; (800eadc <osSemaphoreNew+0x134>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d075      	beq.n	800ead2 <osSemaphoreNew+0x12a>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d072      	beq.n	800ead2 <osSemaphoreNew+0x12a>
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d86e      	bhi.n	800ead2 <osSemaphoreNew+0x12a>
    mem = -1;
 800e9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d015      	beq.n	800ea2c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d006      	beq.n	800ea16 <osSemaphoreNew+0x6e>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	2b4f      	cmp	r3, #79	; 0x4f
 800ea0e:	d902      	bls.n	800ea16 <osSemaphoreNew+0x6e>
        mem = 1;
 800ea10:	2301      	movs	r3, #1
 800ea12:	623b      	str	r3, [r7, #32]
 800ea14:	e00c      	b.n	800ea30 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d108      	bne.n	800ea30 <osSemaphoreNew+0x88>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d104      	bne.n	800ea30 <osSemaphoreNew+0x88>
          mem = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	623b      	str	r3, [r7, #32]
 800ea2a:	e001      	b.n	800ea30 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea36:	d04c      	beq.n	800ead2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d128      	bne.n	800ea90 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ea3e:	6a3b      	ldr	r3, [r7, #32]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d10a      	bne.n	800ea5a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	2203      	movs	r2, #3
 800ea4a:	9200      	str	r2, [sp, #0]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2100      	movs	r1, #0
 800ea50:	2001      	movs	r0, #1
 800ea52:	f000 ffe1 	bl	800fa18 <xQueueGenericCreateStatic>
 800ea56:	6278      	str	r0, [r7, #36]	; 0x24
 800ea58:	e005      	b.n	800ea66 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ea5a:	2203      	movs	r2, #3
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	2001      	movs	r0, #1
 800ea60:	f001 f85c 	bl	800fb1c <xQueueGenericCreate>
 800ea64:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d022      	beq.n	800eab2 <osSemaphoreNew+0x10a>
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d01f      	beq.n	800eab2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ea72:	2300      	movs	r3, #0
 800ea74:	2200      	movs	r2, #0
 800ea76:	2100      	movs	r1, #0
 800ea78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea7a:	f001 f927 	bl	800fccc <xQueueGenericSend>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d016      	beq.n	800eab2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ea84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea86:	f001 fddd 	bl	8010644 <vQueueDelete>
            hSemaphore = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea8e:	e010      	b.n	800eab2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d108      	bne.n	800eaa8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	68b9      	ldr	r1, [r7, #8]
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f001 f8a1 	bl	800fbe6 <xQueueCreateCountingSemaphoreStatic>
 800eaa4:	6278      	str	r0, [r7, #36]	; 0x24
 800eaa6:	e004      	b.n	800eab2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800eaa8:	68b9      	ldr	r1, [r7, #8]
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f001 f8d6 	bl	800fc5c <xQueueCreateCountingSemaphore>
 800eab0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00c      	beq.n	800ead2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <osSemaphoreNew+0x11e>
          name = attr->name;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	61fb      	str	r3, [r7, #28]
 800eac4:	e001      	b.n	800eaca <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800eac6:	2300      	movs	r3, #0
 800eac8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800eaca:	69f9      	ldr	r1, [r7, #28]
 800eacc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eace:	f001 ff07 	bl	80108e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3728      	adds	r7, #40	; 0x28
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20023828 	.word	0x20023828

0800eae0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d103      	bne.n	800eb00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eaf8:	f06f 0303 	mvn.w	r3, #3
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	e04b      	b.n	800eb98 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb00:	f3ef 8305 	mrs	r3, IPSR
 800eb04:	617b      	str	r3, [r7, #20]
  return(result);
 800eb06:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10f      	bne.n	800eb2c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb0c:	f3ef 8310 	mrs	r3, PRIMASK
 800eb10:	613b      	str	r3, [r7, #16]
  return(result);
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d105      	bne.n	800eb24 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb18:	f3ef 8311 	mrs	r3, BASEPRI
 800eb1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d026      	beq.n	800eb72 <osSemaphoreAcquire+0x92>
 800eb24:	4b1f      	ldr	r3, [pc, #124]	; (800eba4 <osSemaphoreAcquire+0xc4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	d122      	bne.n	800eb72 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d003      	beq.n	800eb3a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800eb32:	f06f 0303 	mvn.w	r3, #3
 800eb36:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eb38:	e02d      	b.n	800eb96 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eb3e:	f107 0308 	add.w	r3, r7, #8
 800eb42:	461a      	mov	r2, r3
 800eb44:	2100      	movs	r1, #0
 800eb46:	69b8      	ldr	r0, [r7, #24]
 800eb48:	f001 fcf6 	bl	8010538 <xQueueReceiveFromISR>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d003      	beq.n	800eb5a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800eb52:	f06f 0302 	mvn.w	r3, #2
 800eb56:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eb58:	e01d      	b.n	800eb96 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d01a      	beq.n	800eb96 <osSemaphoreAcquire+0xb6>
 800eb60:	4b11      	ldr	r3, [pc, #68]	; (800eba8 <osSemaphoreAcquire+0xc8>)
 800eb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800eb70:	e011      	b.n	800eb96 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	69b8      	ldr	r0, [r7, #24]
 800eb76:	f001 fbcb 	bl	8010310 <xQueueSemaphoreTake>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d00b      	beq.n	800eb98 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d003      	beq.n	800eb8e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800eb86:	f06f 0301 	mvn.w	r3, #1
 800eb8a:	61fb      	str	r3, [r7, #28]
 800eb8c:	e004      	b.n	800eb98 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800eb8e:	f06f 0302 	mvn.w	r3, #2
 800eb92:	61fb      	str	r3, [r7, #28]
 800eb94:	e000      	b.n	800eb98 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800eb96:	bf00      	nop
      }
    }
  }

  return (stat);
 800eb98:	69fb      	ldr	r3, [r7, #28]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3720      	adds	r7, #32
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20023828 	.word	0x20023828
 800eba8:	e000ed04 	.word	0xe000ed04

0800ebac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d103      	bne.n	800ebca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ebc2:	f06f 0303 	mvn.w	r3, #3
 800ebc6:	61fb      	str	r3, [r7, #28]
 800ebc8:	e03e      	b.n	800ec48 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebca:	f3ef 8305 	mrs	r3, IPSR
 800ebce:	617b      	str	r3, [r7, #20]
  return(result);
 800ebd0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10f      	bne.n	800ebf6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebd6:	f3ef 8310 	mrs	r3, PRIMASK
 800ebda:	613b      	str	r3, [r7, #16]
  return(result);
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d105      	bne.n	800ebee <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebe2:	f3ef 8311 	mrs	r3, BASEPRI
 800ebe6:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d01e      	beq.n	800ec2c <osSemaphoreRelease+0x80>
 800ebee:	4b19      	ldr	r3, [pc, #100]	; (800ec54 <osSemaphoreRelease+0xa8>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d11a      	bne.n	800ec2c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebfa:	f107 0308 	add.w	r3, r7, #8
 800ebfe:	4619      	mov	r1, r3
 800ec00:	69b8      	ldr	r0, [r7, #24]
 800ec02:	f001 fa09 	bl	8010018 <xQueueGiveFromISR>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d003      	beq.n	800ec14 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ec0c:	f06f 0302 	mvn.w	r3, #2
 800ec10:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec12:	e018      	b.n	800ec46 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d015      	beq.n	800ec46 <osSemaphoreRelease+0x9a>
 800ec1a:	4b0f      	ldr	r3, [pc, #60]	; (800ec58 <osSemaphoreRelease+0xac>)
 800ec1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec20:	601a      	str	r2, [r3, #0]
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec2a:	e00c      	b.n	800ec46 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	2200      	movs	r2, #0
 800ec30:	2100      	movs	r1, #0
 800ec32:	69b8      	ldr	r0, [r7, #24]
 800ec34:	f001 f84a 	bl	800fccc <xQueueGenericSend>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d004      	beq.n	800ec48 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ec3e:	f06f 0302 	mvn.w	r3, #2
 800ec42:	61fb      	str	r3, [r7, #28]
 800ec44:	e000      	b.n	800ec48 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec46:	bf00      	nop
    }
  }

  return (stat);
 800ec48:	69fb      	ldr	r3, [r7, #28]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3720      	adds	r7, #32
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20023828 	.word	0x20023828
 800ec58:	e000ed04 	.word	0xe000ed04

0800ec5c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b08c      	sub	sp, #48	; 0x30
 800ec60:	af02      	add	r7, sp, #8
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6c:	f3ef 8305 	mrs	r3, IPSR
 800ec70:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec72:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d16f      	bne.n	800ed58 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec78:	f3ef 8310 	mrs	r3, PRIMASK
 800ec7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d105      	bne.n	800ec90 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec84:	f3ef 8311 	mrs	r3, BASEPRI
 800ec88:	613b      	str	r3, [r7, #16]
  return(result);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d003      	beq.n	800ec98 <osMessageQueueNew+0x3c>
 800ec90:	4b34      	ldr	r3, [pc, #208]	; (800ed64 <osMessageQueueNew+0x108>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d05f      	beq.n	800ed58 <osMessageQueueNew+0xfc>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d05c      	beq.n	800ed58 <osMessageQueueNew+0xfc>
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d059      	beq.n	800ed58 <osMessageQueueNew+0xfc>
    mem = -1;
 800eca4:	f04f 33ff 	mov.w	r3, #4294967295
 800eca8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d029      	beq.n	800ed04 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d012      	beq.n	800ecde <osMessageQueueNew+0x82>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	2b4f      	cmp	r3, #79	; 0x4f
 800ecbe:	d90e      	bls.n	800ecde <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00a      	beq.n	800ecde <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	695a      	ldr	r2, [r3, #20]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	68b9      	ldr	r1, [r7, #8]
 800ecd0:	fb01 f303 	mul.w	r3, r1, r3
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d302      	bcc.n	800ecde <osMessageQueueNew+0x82>
        mem = 1;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	623b      	str	r3, [r7, #32]
 800ecdc:	e014      	b.n	800ed08 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d110      	bne.n	800ed08 <osMessageQueueNew+0xac>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d10c      	bne.n	800ed08 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d108      	bne.n	800ed08 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d104      	bne.n	800ed08 <osMessageQueueNew+0xac>
          mem = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	623b      	str	r3, [r7, #32]
 800ed02:	e001      	b.n	800ed08 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d10b      	bne.n	800ed26 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	691a      	ldr	r2, [r3, #16]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	2100      	movs	r1, #0
 800ed18:	9100      	str	r1, [sp, #0]
 800ed1a:	68b9      	ldr	r1, [r7, #8]
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f000 fe7b 	bl	800fa18 <xQueueGenericCreateStatic>
 800ed22:	6278      	str	r0, [r7, #36]	; 0x24
 800ed24:	e008      	b.n	800ed38 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d105      	bne.n	800ed38 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f000 fef3 	bl	800fb1c <xQueueGenericCreate>
 800ed36:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00c      	beq.n	800ed58 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d003      	beq.n	800ed4c <osMessageQueueNew+0xf0>
        name = attr->name;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	61fb      	str	r3, [r7, #28]
 800ed4a:	e001      	b.n	800ed50 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed50:	69f9      	ldr	r1, [r7, #28]
 800ed52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed54:	f001 fdc4 	bl	80108e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3728      	adds	r7, #40	; 0x28
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20023828 	.word	0x20023828

0800ed68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b08a      	sub	sp, #40	; 0x28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	4613      	mov	r3, r2
 800ed76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed80:	f3ef 8305 	mrs	r3, IPSR
 800ed84:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed86:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10f      	bne.n	800edac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ed90:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d105      	bne.n	800eda4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed98:	f3ef 8311 	mrs	r3, BASEPRI
 800ed9c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d02c      	beq.n	800edfe <osMessageQueuePut+0x96>
 800eda4:	4b28      	ldr	r3, [pc, #160]	; (800ee48 <osMessageQueuePut+0xe0>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d128      	bne.n	800edfe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edac:	6a3b      	ldr	r3, [r7, #32]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d005      	beq.n	800edbe <osMessageQueuePut+0x56>
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <osMessageQueuePut+0x56>
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d003      	beq.n	800edc6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800edbe:	f06f 0303 	mvn.w	r3, #3
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edc4:	e039      	b.n	800ee3a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800edca:	f107 0210 	add.w	r2, r7, #16
 800edce:	2300      	movs	r3, #0
 800edd0:	68b9      	ldr	r1, [r7, #8]
 800edd2:	6a38      	ldr	r0, [r7, #32]
 800edd4:	f001 f880 	bl	800fed8 <xQueueGenericSendFromISR>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d003      	beq.n	800ede6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800edde:	f06f 0302 	mvn.w	r3, #2
 800ede2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ede4:	e029      	b.n	800ee3a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d026      	beq.n	800ee3a <osMessageQueuePut+0xd2>
 800edec:	4b17      	ldr	r3, [pc, #92]	; (800ee4c <osMessageQueuePut+0xe4>)
 800edee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edfc:	e01d      	b.n	800ee3a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800edfe:	6a3b      	ldr	r3, [r7, #32]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <osMessageQueuePut+0xa2>
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ee0a:	f06f 0303 	mvn.w	r3, #3
 800ee0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee10:	e014      	b.n	800ee3c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ee12:	2300      	movs	r3, #0
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	68b9      	ldr	r1, [r7, #8]
 800ee18:	6a38      	ldr	r0, [r7, #32]
 800ee1a:	f000 ff57 	bl	800fccc <xQueueGenericSend>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d00b      	beq.n	800ee3c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d003      	beq.n	800ee32 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ee2a:	f06f 0301 	mvn.w	r3, #1
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee30:	e004      	b.n	800ee3c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ee32:	f06f 0302 	mvn.w	r3, #2
 800ee36:	627b      	str	r3, [r7, #36]	; 0x24
 800ee38:	e000      	b.n	800ee3c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee3a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3728      	adds	r7, #40	; 0x28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	20023828 	.word	0x20023828
 800ee4c:	e000ed04 	.word	0xe000ed04

0800ee50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b08a      	sub	sp, #40	; 0x28
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
 800ee5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee66:	f3ef 8305 	mrs	r3, IPSR
 800ee6a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee6c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10f      	bne.n	800ee92 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee72:	f3ef 8310 	mrs	r3, PRIMASK
 800ee76:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d105      	bne.n	800ee8a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee7e:	f3ef 8311 	mrs	r3, BASEPRI
 800ee82:	617b      	str	r3, [r7, #20]
  return(result);
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d02c      	beq.n	800eee4 <osMessageQueueGet+0x94>
 800ee8a:	4b28      	ldr	r3, [pc, #160]	; (800ef2c <osMessageQueueGet+0xdc>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	d128      	bne.n	800eee4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <osMessageQueueGet+0x54>
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d002      	beq.n	800eea4 <osMessageQueueGet+0x54>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800eea4:	f06f 0303 	mvn.w	r3, #3
 800eea8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eeaa:	e038      	b.n	800ef1e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800eeac:	2300      	movs	r3, #0
 800eeae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800eeb0:	f107 0310 	add.w	r3, r7, #16
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	68b9      	ldr	r1, [r7, #8]
 800eeb8:	6a38      	ldr	r0, [r7, #32]
 800eeba:	f001 fb3d 	bl	8010538 <xQueueReceiveFromISR>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d003      	beq.n	800eecc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800eec4:	f06f 0302 	mvn.w	r3, #2
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eeca:	e028      	b.n	800ef1e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d025      	beq.n	800ef1e <osMessageQueueGet+0xce>
 800eed2:	4b17      	ldr	r3, [pc, #92]	; (800ef30 <osMessageQueueGet+0xe0>)
 800eed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eed8:	601a      	str	r2, [r3, #0]
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eee2:	e01c      	b.n	800ef1e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <osMessageQueueGet+0xa0>
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d103      	bne.n	800eef8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800eef0:	f06f 0303 	mvn.w	r3, #3
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
 800eef6:	e013      	b.n	800ef20 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eef8:	683a      	ldr	r2, [r7, #0]
 800eefa:	68b9      	ldr	r1, [r7, #8]
 800eefc:	6a38      	ldr	r0, [r7, #32]
 800eefe:	f001 f921 	bl	8010144 <xQueueReceive>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d00b      	beq.n	800ef20 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d003      	beq.n	800ef16 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ef0e:	f06f 0301 	mvn.w	r3, #1
 800ef12:	627b      	str	r3, [r7, #36]	; 0x24
 800ef14:	e004      	b.n	800ef20 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ef16:	f06f 0302 	mvn.w	r3, #2
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef1c:	e000      	b.n	800ef20 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3728      	adds	r7, #40	; 0x28
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20023828 	.word	0x20023828
 800ef30:	e000ed04 	.word	0xe000ed04

0800ef34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	4a07      	ldr	r2, [pc, #28]	; (800ef60 <vApplicationGetIdleTaskMemory+0x2c>)
 800ef44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	4a06      	ldr	r2, [pc, #24]	; (800ef64 <vApplicationGetIdleTaskMemory+0x30>)
 800ef4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2280      	movs	r2, #128	; 0x80
 800ef50:	601a      	str	r2, [r3, #0]
}
 800ef52:	bf00      	nop
 800ef54:	3714      	adds	r7, #20
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	2002382c 	.word	0x2002382c
 800ef64:	20023888 	.word	0x20023888

0800ef68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	4a07      	ldr	r2, [pc, #28]	; (800ef94 <vApplicationGetTimerTaskMemory+0x2c>)
 800ef78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	4a06      	ldr	r2, [pc, #24]	; (800ef98 <vApplicationGetTimerTaskMemory+0x30>)
 800ef7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef86:	601a      	str	r2, [r3, #0]
}
 800ef88:	bf00      	nop
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	20023a88 	.word	0x20023a88
 800ef98:	20023ae4 	.word	0x20023ae4

0800ef9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b08a      	sub	sp, #40	; 0x28
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800efa4:	2300      	movs	r3, #0
 800efa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800efa8:	f001 ff6c 	bl	8010e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800efac:	4b5b      	ldr	r3, [pc, #364]	; (800f11c <pvPortMalloc+0x180>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d101      	bne.n	800efb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800efb4:	f000 f91a 	bl	800f1ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800efb8:	4b59      	ldr	r3, [pc, #356]	; (800f120 <pvPortMalloc+0x184>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4013      	ands	r3, r2
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f040 8092 	bne.w	800f0ea <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d01f      	beq.n	800f00c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800efcc:	2208      	movs	r2, #8
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4413      	add	r3, r2
 800efd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f003 0307 	and.w	r3, r3, #7
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d016      	beq.n	800f00c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f023 0307 	bic.w	r3, r3, #7
 800efe4:	3308      	adds	r3, #8
 800efe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f003 0307 	and.w	r3, r3, #7
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00c      	beq.n	800f00c <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff6:	b672      	cpsid	i
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	b662      	cpsie	i
 800f006:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f008:	bf00      	nop
 800f00a:	e7fe      	b.n	800f00a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d06b      	beq.n	800f0ea <pvPortMalloc+0x14e>
 800f012:	4b44      	ldr	r3, [pc, #272]	; (800f124 <pvPortMalloc+0x188>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d866      	bhi.n	800f0ea <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f01c:	4b42      	ldr	r3, [pc, #264]	; (800f128 <pvPortMalloc+0x18c>)
 800f01e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f020:	4b41      	ldr	r3, [pc, #260]	; (800f128 <pvPortMalloc+0x18c>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f026:	e004      	b.n	800f032 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d903      	bls.n	800f044 <pvPortMalloc+0xa8>
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d1f1      	bne.n	800f028 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f044:	4b35      	ldr	r3, [pc, #212]	; (800f11c <pvPortMalloc+0x180>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d04d      	beq.n	800f0ea <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2208      	movs	r2, #8
 800f054:	4413      	add	r3, r2
 800f056:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	1ad2      	subs	r2, r2, r3
 800f068:	2308      	movs	r3, #8
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d921      	bls.n	800f0b4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	f003 0307 	and.w	r3, r3, #7
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00c      	beq.n	800f09c <pvPortMalloc+0x100>
	__asm volatile
 800f082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f086:	b672      	cpsid	i
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	b662      	cpsie	i
 800f096:	613b      	str	r3, [r7, #16]
}
 800f098:	bf00      	nop
 800f09a:	e7fe      	b.n	800f09a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	685a      	ldr	r2, [r3, #4]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	1ad2      	subs	r2, r2, r3
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0ae:	69b8      	ldr	r0, [r7, #24]
 800f0b0:	f000 f8fe 	bl	800f2b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0b4:	4b1b      	ldr	r3, [pc, #108]	; (800f124 <pvPortMalloc+0x188>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	1ad3      	subs	r3, r2, r3
 800f0be:	4a19      	ldr	r2, [pc, #100]	; (800f124 <pvPortMalloc+0x188>)
 800f0c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0c2:	4b18      	ldr	r3, [pc, #96]	; (800f124 <pvPortMalloc+0x188>)
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	4b19      	ldr	r3, [pc, #100]	; (800f12c <pvPortMalloc+0x190>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d203      	bcs.n	800f0d6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0ce:	4b15      	ldr	r3, [pc, #84]	; (800f124 <pvPortMalloc+0x188>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a16      	ldr	r2, [pc, #88]	; (800f12c <pvPortMalloc+0x190>)
 800f0d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d8:	685a      	ldr	r2, [r3, #4]
 800f0da:	4b11      	ldr	r3, [pc, #68]	; (800f120 <pvPortMalloc+0x184>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	431a      	orrs	r2, r3
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f0ea:	f001 fed9 	bl	8010ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	f003 0307 	and.w	r3, r3, #7
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00c      	beq.n	800f112 <pvPortMalloc+0x176>
	__asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fc:	b672      	cpsid	i
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	b662      	cpsie	i
 800f10c:	60fb      	str	r3, [r7, #12]
}
 800f10e:	bf00      	nop
 800f110:	e7fe      	b.n	800f110 <pvPortMalloc+0x174>
	return pvReturn;
 800f112:	69fb      	ldr	r3, [r7, #28]
}
 800f114:	4618      	mov	r0, r3
 800f116:	3728      	adds	r7, #40	; 0x28
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	20055eec 	.word	0x20055eec
 800f120:	20055ef8 	.word	0x20055ef8
 800f124:	20055ef0 	.word	0x20055ef0
 800f128:	20055ee4 	.word	0x20055ee4
 800f12c:	20055ef4 	.word	0x20055ef4

0800f130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d04c      	beq.n	800f1dc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f142:	2308      	movs	r3, #8
 800f144:	425b      	negs	r3, r3
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	4413      	add	r3, r2
 800f14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	685a      	ldr	r2, [r3, #4]
 800f154:	4b23      	ldr	r3, [pc, #140]	; (800f1e4 <vPortFree+0xb4>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4013      	ands	r3, r2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10c      	bne.n	800f178 <vPortFree+0x48>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	b672      	cpsid	i
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	b662      	cpsie	i
 800f172:	60fb      	str	r3, [r7, #12]
}
 800f174:	bf00      	nop
 800f176:	e7fe      	b.n	800f176 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00c      	beq.n	800f19a <vPortFree+0x6a>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f184:	b672      	cpsid	i
 800f186:	f383 8811 	msr	BASEPRI, r3
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	b662      	cpsie	i
 800f194:	60bb      	str	r3, [r7, #8]
}
 800f196:	bf00      	nop
 800f198:	e7fe      	b.n	800f198 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	685a      	ldr	r2, [r3, #4]
 800f19e:	4b11      	ldr	r3, [pc, #68]	; (800f1e4 <vPortFree+0xb4>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4013      	ands	r3, r2
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d019      	beq.n	800f1dc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d115      	bne.n	800f1dc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	4b0b      	ldr	r3, [pc, #44]	; (800f1e4 <vPortFree+0xb4>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	43db      	mvns	r3, r3
 800f1ba:	401a      	ands	r2, r3
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1c0:	f001 fe60 	bl	8010e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	685a      	ldr	r2, [r3, #4]
 800f1c8:	4b07      	ldr	r3, [pc, #28]	; (800f1e8 <vPortFree+0xb8>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	4a06      	ldr	r2, [pc, #24]	; (800f1e8 <vPortFree+0xb8>)
 800f1d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1d2:	6938      	ldr	r0, [r7, #16]
 800f1d4:	f000 f86c 	bl	800f2b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f1d8:	f001 fe62 	bl	8010ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f1dc:	bf00      	nop
 800f1de:	3718      	adds	r7, #24
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	20055ef8 	.word	0x20055ef8
 800f1e8:	20055ef0 	.word	0x20055ef0

0800f1ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f1f2:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800f1f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1f8:	4b27      	ldr	r3, [pc, #156]	; (800f298 <prvHeapInit+0xac>)
 800f1fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f003 0307 	and.w	r3, r3, #7
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00c      	beq.n	800f220 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	3307      	adds	r3, #7
 800f20a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f023 0307 	bic.w	r3, r3, #7
 800f212:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	1ad3      	subs	r3, r2, r3
 800f21a:	4a1f      	ldr	r2, [pc, #124]	; (800f298 <prvHeapInit+0xac>)
 800f21c:	4413      	add	r3, r2
 800f21e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f224:	4a1d      	ldr	r2, [pc, #116]	; (800f29c <prvHeapInit+0xb0>)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f22a:	4b1c      	ldr	r3, [pc, #112]	; (800f29c <prvHeapInit+0xb0>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	4413      	add	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f238:	2208      	movs	r2, #8
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	1a9b      	subs	r3, r3, r2
 800f23e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f023 0307 	bic.w	r3, r3, #7
 800f246:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	4a15      	ldr	r2, [pc, #84]	; (800f2a0 <prvHeapInit+0xb4>)
 800f24c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f24e:	4b14      	ldr	r3, [pc, #80]	; (800f2a0 <prvHeapInit+0xb4>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2200      	movs	r2, #0
 800f254:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f256:	4b12      	ldr	r3, [pc, #72]	; (800f2a0 <prvHeapInit+0xb4>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2200      	movs	r2, #0
 800f25c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	1ad2      	subs	r2, r2, r3
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f26c:	4b0c      	ldr	r3, [pc, #48]	; (800f2a0 <prvHeapInit+0xb4>)
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	4a0a      	ldr	r2, [pc, #40]	; (800f2a4 <prvHeapInit+0xb8>)
 800f27a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	4a09      	ldr	r2, [pc, #36]	; (800f2a8 <prvHeapInit+0xbc>)
 800f282:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f284:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <prvHeapInit+0xc0>)
 800f286:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f28a:	601a      	str	r2, [r3, #0]
}
 800f28c:	bf00      	nop
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	20023ee4 	.word	0x20023ee4
 800f29c:	20055ee4 	.word	0x20055ee4
 800f2a0:	20055eec 	.word	0x20055eec
 800f2a4:	20055ef4 	.word	0x20055ef4
 800f2a8:	20055ef0 	.word	0x20055ef0
 800f2ac:	20055ef8 	.word	0x20055ef8

0800f2b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2b8:	4b28      	ldr	r3, [pc, #160]	; (800f35c <prvInsertBlockIntoFreeList+0xac>)
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	e002      	b.n	800f2c4 <prvInsertBlockIntoFreeList+0x14>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	60fb      	str	r3, [r7, #12]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d8f7      	bhi.n	800f2be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	4413      	add	r3, r2
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d108      	bne.n	800f2f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	685a      	ldr	r2, [r3, #4]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	441a      	add	r2, r3
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	68ba      	ldr	r2, [r7, #8]
 800f2fc:	441a      	add	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	429a      	cmp	r2, r3
 800f304:	d118      	bne.n	800f338 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	4b15      	ldr	r3, [pc, #84]	; (800f360 <prvInsertBlockIntoFreeList+0xb0>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d00d      	beq.n	800f32e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	441a      	add	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	e008      	b.n	800f340 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f32e:	4b0c      	ldr	r3, [pc, #48]	; (800f360 <prvInsertBlockIntoFreeList+0xb0>)
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	e003      	b.n	800f340 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	429a      	cmp	r2, r3
 800f346:	d002      	beq.n	800f34e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f34e:	bf00      	nop
 800f350:	3714      	adds	r7, #20
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	20055ee4 	.word	0x20055ee4
 800f360:	20055eec 	.word	0x20055eec

0800f364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f103 0208 	add.w	r2, r3, #8
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f04f 32ff 	mov.w	r2, #4294967295
 800f37c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f103 0208 	add.w	r2, r3, #8
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f103 0208 	add.w	r2, r3, #8
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3b2:	bf00      	nop
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b085      	sub	sp, #20
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	689a      	ldr	r2, [r3, #8]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	683a      	ldr	r2, [r7, #0]
 800f3e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	601a      	str	r2, [r3, #0]
}
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f406:	b480      	push	{r7}
 800f408:	b085      	sub	sp, #20
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f41c:	d103      	bne.n	800f426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	e00c      	b.n	800f440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3308      	adds	r3, #8
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	e002      	b.n	800f434 <vListInsert+0x2e>
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	60fb      	str	r3, [r7, #12]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68ba      	ldr	r2, [r7, #8]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d2f6      	bcs.n	800f42e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	683a      	ldr	r2, [r7, #0]
 800f44e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	601a      	str	r2, [r3, #0]
}
 800f46c:	bf00      	nop
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	6892      	ldr	r2, [r2, #8]
 800f48e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	6852      	ldr	r2, [r2, #4]
 800f498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d103      	bne.n	800f4ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	689a      	ldr	r2, [r3, #8]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	1e5a      	subs	r2, r3, #1
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	3b04      	subs	r3, #4
 800f4dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f4e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3b04      	subs	r3, #4
 800f4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f023 0201 	bic.w	r2, r3, #1
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	3b04      	subs	r3, #4
 800f4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4fc:	4a0c      	ldr	r2, [pc, #48]	; (800f530 <pxPortInitialiseStack+0x64>)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	3b14      	subs	r3, #20
 800f506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	3b04      	subs	r3, #4
 800f512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f06f 0202 	mvn.w	r2, #2
 800f51a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	3b20      	subs	r3, #32
 800f520:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f522:	68fb      	ldr	r3, [r7, #12]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr
 800f530:	0800f535 	.word	0x0800f535

0800f534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f53e:	4b14      	ldr	r3, [pc, #80]	; (800f590 <prvTaskExitError+0x5c>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d00c      	beq.n	800f562 <prvTaskExitError+0x2e>
	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54c:	b672      	cpsid	i
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	b662      	cpsie	i
 800f55c:	60fb      	str	r3, [r7, #12]
}
 800f55e:	bf00      	nop
 800f560:	e7fe      	b.n	800f560 <prvTaskExitError+0x2c>
	__asm volatile
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	b672      	cpsid	i
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	b662      	cpsie	i
 800f576:	60bb      	str	r3, [r7, #8]
}
 800f578:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f57a:	bf00      	nop
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d0fc      	beq.n	800f57c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f582:	bf00      	nop
 800f584:	bf00      	nop
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	20000018 	.word	0x20000018
	...

0800f5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5a0:	4b07      	ldr	r3, [pc, #28]	; (800f5c0 <pxCurrentTCBConst2>)
 800f5a2:	6819      	ldr	r1, [r3, #0]
 800f5a4:	6808      	ldr	r0, [r1, #0]
 800f5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5aa:	f380 8809 	msr	PSP, r0
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f04f 0000 	mov.w	r0, #0
 800f5b6:	f380 8811 	msr	BASEPRI, r0
 800f5ba:	4770      	bx	lr
 800f5bc:	f3af 8000 	nop.w

0800f5c0 <pxCurrentTCBConst2>:
 800f5c0:	20055f04 	.word	0x20055f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5c4:	bf00      	nop
 800f5c6:	bf00      	nop

0800f5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5c8:	4808      	ldr	r0, [pc, #32]	; (800f5ec <prvPortStartFirstTask+0x24>)
 800f5ca:	6800      	ldr	r0, [r0, #0]
 800f5cc:	6800      	ldr	r0, [r0, #0]
 800f5ce:	f380 8808 	msr	MSP, r0
 800f5d2:	f04f 0000 	mov.w	r0, #0
 800f5d6:	f380 8814 	msr	CONTROL, r0
 800f5da:	b662      	cpsie	i
 800f5dc:	b661      	cpsie	f
 800f5de:	f3bf 8f4f 	dsb	sy
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	df00      	svc	0
 800f5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5ea:	bf00      	nop
 800f5ec:	e000ed08 	.word	0xe000ed08

0800f5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5f6:	4b37      	ldr	r3, [pc, #220]	; (800f6d4 <xPortStartScheduler+0xe4>)
 800f5f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	22ff      	movs	r2, #255	; 0xff
 800f606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f610:	78fb      	ldrb	r3, [r7, #3]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	4b2f      	ldr	r3, [pc, #188]	; (800f6d8 <xPortStartScheduler+0xe8>)
 800f61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f61e:	4b2f      	ldr	r3, [pc, #188]	; (800f6dc <xPortStartScheduler+0xec>)
 800f620:	2207      	movs	r2, #7
 800f622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f624:	e009      	b.n	800f63a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f626:	4b2d      	ldr	r3, [pc, #180]	; (800f6dc <xPortStartScheduler+0xec>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	3b01      	subs	r3, #1
 800f62c:	4a2b      	ldr	r2, [pc, #172]	; (800f6dc <xPortStartScheduler+0xec>)
 800f62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f630:	78fb      	ldrb	r3, [r7, #3]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	b2db      	uxtb	r3, r3
 800f638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f642:	2b80      	cmp	r3, #128	; 0x80
 800f644:	d0ef      	beq.n	800f626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f646:	4b25      	ldr	r3, [pc, #148]	; (800f6dc <xPortStartScheduler+0xec>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f1c3 0307 	rsb	r3, r3, #7
 800f64e:	2b04      	cmp	r3, #4
 800f650:	d00c      	beq.n	800f66c <xPortStartScheduler+0x7c>
	__asm volatile
 800f652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f656:	b672      	cpsid	i
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	b662      	cpsie	i
 800f666:	60bb      	str	r3, [r7, #8]
}
 800f668:	bf00      	nop
 800f66a:	e7fe      	b.n	800f66a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f66c:	4b1b      	ldr	r3, [pc, #108]	; (800f6dc <xPortStartScheduler+0xec>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	021b      	lsls	r3, r3, #8
 800f672:	4a1a      	ldr	r2, [pc, #104]	; (800f6dc <xPortStartScheduler+0xec>)
 800f674:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f676:	4b19      	ldr	r3, [pc, #100]	; (800f6dc <xPortStartScheduler+0xec>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f67e:	4a17      	ldr	r2, [pc, #92]	; (800f6dc <xPortStartScheduler+0xec>)
 800f680:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	b2da      	uxtb	r2, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f68a:	4b15      	ldr	r3, [pc, #84]	; (800f6e0 <xPortStartScheduler+0xf0>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a14      	ldr	r2, [pc, #80]	; (800f6e0 <xPortStartScheduler+0xf0>)
 800f690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f694:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f696:	4b12      	ldr	r3, [pc, #72]	; (800f6e0 <xPortStartScheduler+0xf0>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a11      	ldr	r2, [pc, #68]	; (800f6e0 <xPortStartScheduler+0xf0>)
 800f69c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6a2:	f000 f8dd 	bl	800f860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6a6:	4b0f      	ldr	r3, [pc, #60]	; (800f6e4 <xPortStartScheduler+0xf4>)
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6ac:	f000 f8fc 	bl	800f8a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6b0:	4b0d      	ldr	r3, [pc, #52]	; (800f6e8 <xPortStartScheduler+0xf8>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a0c      	ldr	r2, [pc, #48]	; (800f6e8 <xPortStartScheduler+0xf8>)
 800f6b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6bc:	f7ff ff84 	bl	800f5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6c0:	f001 fd5a 	bl	8011178 <vTaskSwitchContext>
	prvTaskExitError();
 800f6c4:	f7ff ff36 	bl	800f534 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	e000e400 	.word	0xe000e400
 800f6d8:	20055efc 	.word	0x20055efc
 800f6dc:	20055f00 	.word	0x20055f00
 800f6e0:	e000ed20 	.word	0xe000ed20
 800f6e4:	20000018 	.word	0x20000018
 800f6e8:	e000ef34 	.word	0xe000ef34

0800f6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f6:	b672      	cpsid	i
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	b662      	cpsie	i
 800f706:	607b      	str	r3, [r7, #4]
}
 800f708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f70a:	4b10      	ldr	r3, [pc, #64]	; (800f74c <vPortEnterCritical+0x60>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	3301      	adds	r3, #1
 800f710:	4a0e      	ldr	r2, [pc, #56]	; (800f74c <vPortEnterCritical+0x60>)
 800f712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f714:	4b0d      	ldr	r3, [pc, #52]	; (800f74c <vPortEnterCritical+0x60>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d111      	bne.n	800f740 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f71c:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <vPortEnterCritical+0x64>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00c      	beq.n	800f740 <vPortEnterCritical+0x54>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72a:	b672      	cpsid	i
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	b662      	cpsie	i
 800f73a:	603b      	str	r3, [r7, #0]
}
 800f73c:	bf00      	nop
 800f73e:	e7fe      	b.n	800f73e <vPortEnterCritical+0x52>
	}
}
 800f740:	bf00      	nop
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr
 800f74c:	20000018 	.word	0x20000018
 800f750:	e000ed04 	.word	0xe000ed04

0800f754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f75a:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <vPortExitCritical+0x54>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d10c      	bne.n	800f77c <vPortExitCritical+0x28>
	__asm volatile
 800f762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f766:	b672      	cpsid	i
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	b662      	cpsie	i
 800f776:	607b      	str	r3, [r7, #4]
}
 800f778:	bf00      	nop
 800f77a:	e7fe      	b.n	800f77a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f77c:	4b0a      	ldr	r3, [pc, #40]	; (800f7a8 <vPortExitCritical+0x54>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	3b01      	subs	r3, #1
 800f782:	4a09      	ldr	r2, [pc, #36]	; (800f7a8 <vPortExitCritical+0x54>)
 800f784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f786:	4b08      	ldr	r3, [pc, #32]	; (800f7a8 <vPortExitCritical+0x54>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d105      	bne.n	800f79a <vPortExitCritical+0x46>
 800f78e:	2300      	movs	r3, #0
 800f790:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f798:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f79a:	bf00      	nop
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	20000018 	.word	0x20000018
 800f7ac:	00000000 	.word	0x00000000

0800f7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7b0:	f3ef 8009 	mrs	r0, PSP
 800f7b4:	f3bf 8f6f 	isb	sy
 800f7b8:	4b15      	ldr	r3, [pc, #84]	; (800f810 <pxCurrentTCBConst>)
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	f01e 0f10 	tst.w	lr, #16
 800f7c0:	bf08      	it	eq
 800f7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ca:	6010      	str	r0, [r2, #0]
 800f7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7d4:	b672      	cpsid	i
 800f7d6:	f380 8811 	msr	BASEPRI, r0
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	f3bf 8f6f 	isb	sy
 800f7e2:	b662      	cpsie	i
 800f7e4:	f001 fcc8 	bl	8011178 <vTaskSwitchContext>
 800f7e8:	f04f 0000 	mov.w	r0, #0
 800f7ec:	f380 8811 	msr	BASEPRI, r0
 800f7f0:	bc09      	pop	{r0, r3}
 800f7f2:	6819      	ldr	r1, [r3, #0]
 800f7f4:	6808      	ldr	r0, [r1, #0]
 800f7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fa:	f01e 0f10 	tst.w	lr, #16
 800f7fe:	bf08      	it	eq
 800f800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f804:	f380 8809 	msr	PSP, r0
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop

0800f810 <pxCurrentTCBConst>:
 800f810:	20055f04 	.word	0x20055f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f814:	bf00      	nop
 800f816:	bf00      	nop

0800f818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f822:	b672      	cpsid	i
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	b662      	cpsie	i
 800f832:	607b      	str	r3, [r7, #4]
}
 800f834:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f836:	f001 fbe3 	bl	8011000 <xTaskIncrementTick>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d003      	beq.n	800f848 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f840:	4b06      	ldr	r3, [pc, #24]	; (800f85c <SysTick_Handler+0x44>)
 800f842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f846:	601a      	str	r2, [r3, #0]
 800f848:	2300      	movs	r3, #0
 800f84a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	f383 8811 	msr	BASEPRI, r3
}
 800f852:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f854:	bf00      	nop
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	e000ed04 	.word	0xe000ed04

0800f860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f860:	b480      	push	{r7}
 800f862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f864:	4b0b      	ldr	r3, [pc, #44]	; (800f894 <vPortSetupTimerInterrupt+0x34>)
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f86a:	4b0b      	ldr	r3, [pc, #44]	; (800f898 <vPortSetupTimerInterrupt+0x38>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f870:	4b0a      	ldr	r3, [pc, #40]	; (800f89c <vPortSetupTimerInterrupt+0x3c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a0a      	ldr	r2, [pc, #40]	; (800f8a0 <vPortSetupTimerInterrupt+0x40>)
 800f876:	fba2 2303 	umull	r2, r3, r2, r3
 800f87a:	099b      	lsrs	r3, r3, #6
 800f87c:	4a09      	ldr	r2, [pc, #36]	; (800f8a4 <vPortSetupTimerInterrupt+0x44>)
 800f87e:	3b01      	subs	r3, #1
 800f880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f882:	4b04      	ldr	r3, [pc, #16]	; (800f894 <vPortSetupTimerInterrupt+0x34>)
 800f884:	2207      	movs	r2, #7
 800f886:	601a      	str	r2, [r3, #0]
}
 800f888:	bf00      	nop
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	e000e010 	.word	0xe000e010
 800f898:	e000e018 	.word	0xe000e018
 800f89c:	2000000c 	.word	0x2000000c
 800f8a0:	10624dd3 	.word	0x10624dd3
 800f8a4:	e000e014 	.word	0xe000e014

0800f8a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8b8 <vPortEnableVFP+0x10>
 800f8ac:	6801      	ldr	r1, [r0, #0]
 800f8ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8b2:	6001      	str	r1, [r0, #0]
 800f8b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8b6:	bf00      	nop
 800f8b8:	e000ed88 	.word	0xe000ed88

0800f8bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8c2:	f3ef 8305 	mrs	r3, IPSR
 800f8c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2b0f      	cmp	r3, #15
 800f8cc:	d916      	bls.n	800f8fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8ce:	4a19      	ldr	r2, [pc, #100]	; (800f934 <vPortValidateInterruptPriority+0x78>)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8d8:	4b17      	ldr	r3, [pc, #92]	; (800f938 <vPortValidateInterruptPriority+0x7c>)
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	7afa      	ldrb	r2, [r7, #11]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d20c      	bcs.n	800f8fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e6:	b672      	cpsid	i
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	b662      	cpsie	i
 800f8f6:	607b      	str	r3, [r7, #4]
}
 800f8f8:	bf00      	nop
 800f8fa:	e7fe      	b.n	800f8fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8fc:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <vPortValidateInterruptPriority+0x80>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f904:	4b0e      	ldr	r3, [pc, #56]	; (800f940 <vPortValidateInterruptPriority+0x84>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d90c      	bls.n	800f926 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f910:	b672      	cpsid	i
 800f912:	f383 8811 	msr	BASEPRI, r3
 800f916:	f3bf 8f6f 	isb	sy
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	b662      	cpsie	i
 800f920:	603b      	str	r3, [r7, #0]
}
 800f922:	bf00      	nop
 800f924:	e7fe      	b.n	800f924 <vPortValidateInterruptPriority+0x68>
	}
 800f926:	bf00      	nop
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	e000e3f0 	.word	0xe000e3f0
 800f938:	20055efc 	.word	0x20055efc
 800f93c:	e000ed0c 	.word	0xe000ed0c
 800f940:	20055f00 	.word	0x20055f00

0800f944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10c      	bne.n	800f972 <xQueueGenericReset+0x2e>
	__asm volatile
 800f958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95c:	b672      	cpsid	i
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	b662      	cpsie	i
 800f96c:	60bb      	str	r3, [r7, #8]
}
 800f96e:	bf00      	nop
 800f970:	e7fe      	b.n	800f970 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f972:	f7ff febb 	bl	800f6ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f97e:	68f9      	ldr	r1, [r7, #12]
 800f980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f982:	fb01 f303 	mul.w	r3, r1, r3
 800f986:	441a      	add	r2, r3
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9a2:	3b01      	subs	r3, #1
 800f9a4:	68f9      	ldr	r1, [r7, #12]
 800f9a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f9a8:	fb01 f303 	mul.w	r3, r1, r3
 800f9ac:	441a      	add	r2, r3
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	22ff      	movs	r2, #255	; 0xff
 800f9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	22ff      	movs	r2, #255	; 0xff
 800f9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d114      	bne.n	800f9f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d01a      	beq.n	800fa06 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3310      	adds	r3, #16
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f001 fc83 	bl	80112e0 <xTaskRemoveFromEventList>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d012      	beq.n	800fa06 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f9e0:	4b0c      	ldr	r3, [pc, #48]	; (800fa14 <xQueueGenericReset+0xd0>)
 800f9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9e6:	601a      	str	r2, [r3, #0]
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	e009      	b.n	800fa06 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	3310      	adds	r3, #16
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fcb4 	bl	800f364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	3324      	adds	r3, #36	; 0x24
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7ff fcaf 	bl	800f364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fa06:	f7ff fea5 	bl	800f754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fa0a:	2301      	movs	r3, #1
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	e000ed04 	.word	0xe000ed04

0800fa18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b08e      	sub	sp, #56	; 0x38
 800fa1c:	af02      	add	r7, sp, #8
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
 800fa24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10c      	bne.n	800fa46 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800fa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa30:	b672      	cpsid	i
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	b662      	cpsie	i
 800fa40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fa42:	bf00      	nop
 800fa44:	e7fe      	b.n	800fa44 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10c      	bne.n	800fa66 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	b672      	cpsid	i
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	b662      	cpsie	i
 800fa60:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa62:	bf00      	nop
 800fa64:	e7fe      	b.n	800fa64 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <xQueueGenericCreateStatic+0x5a>
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <xQueueGenericCreateStatic+0x5e>
 800fa72:	2301      	movs	r3, #1
 800fa74:	e000      	b.n	800fa78 <xQueueGenericCreateStatic+0x60>
 800fa76:	2300      	movs	r3, #0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10c      	bne.n	800fa96 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800fa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa80:	b672      	cpsid	i
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	b662      	cpsie	i
 800fa90:	623b      	str	r3, [r7, #32]
}
 800fa92:	bf00      	nop
 800fa94:	e7fe      	b.n	800fa94 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d102      	bne.n	800faa2 <xQueueGenericCreateStatic+0x8a>
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <xQueueGenericCreateStatic+0x8e>
 800faa2:	2301      	movs	r3, #1
 800faa4:	e000      	b.n	800faa8 <xQueueGenericCreateStatic+0x90>
 800faa6:	2300      	movs	r3, #0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d10c      	bne.n	800fac6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800faac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab0:	b672      	cpsid	i
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	b662      	cpsie	i
 800fac0:	61fb      	str	r3, [r7, #28]
}
 800fac2:	bf00      	nop
 800fac4:	e7fe      	b.n	800fac4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fac6:	2350      	movs	r3, #80	; 0x50
 800fac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b50      	cmp	r3, #80	; 0x50
 800face:	d00c      	beq.n	800faea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad4:	b672      	cpsid	i
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	b662      	cpsie	i
 800fae4:	61bb      	str	r3, [r7, #24]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800faea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00d      	beq.n	800fb12 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fafe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	4613      	mov	r3, r2
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f000 f847 	bl	800fba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3730      	adds	r7, #48	; 0x30
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08a      	sub	sp, #40	; 0x28
 800fb20:	af02      	add	r7, sp, #8
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	4613      	mov	r3, r2
 800fb28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d10c      	bne.n	800fb4a <xQueueGenericCreate+0x2e>
	__asm volatile
 800fb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb34:	b672      	cpsid	i
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	b662      	cpsie	i
 800fb44:	613b      	str	r3, [r7, #16]
}
 800fb46:	bf00      	nop
 800fb48:	e7fe      	b.n	800fb48 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d102      	bne.n	800fb56 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fb50:	2300      	movs	r3, #0
 800fb52:	61fb      	str	r3, [r7, #28]
 800fb54:	e004      	b.n	800fb60 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	fb02 f303 	mul.w	r3, r2, r3
 800fb5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	3350      	adds	r3, #80	; 0x50
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff fa19 	bl	800ef9c <pvPortMalloc>
 800fb6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d011      	beq.n	800fb96 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	3350      	adds	r3, #80	; 0x50
 800fb7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb84:	79fa      	ldrb	r2, [r7, #7]
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	697a      	ldr	r2, [r7, #20]
 800fb8e:	68b9      	ldr	r1, [r7, #8]
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f000 f805 	bl	800fba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb96:	69bb      	ldr	r3, [r7, #24]
	}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3720      	adds	r7, #32
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d103      	bne.n	800fbbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	69ba      	ldr	r2, [r7, #24]
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	e002      	b.n	800fbc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fbce:	2101      	movs	r1, #1
 800fbd0:	69b8      	ldr	r0, [r7, #24]
 800fbd2:	f7ff feb7 	bl	800f944 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	78fa      	ldrb	r2, [r7, #3]
 800fbda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fbde:	bf00      	nop
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b08a      	sub	sp, #40	; 0x28
 800fbea:	af02      	add	r7, sp, #8
 800fbec:	60f8      	str	r0, [r7, #12]
 800fbee:	60b9      	str	r1, [r7, #8]
 800fbf0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d10c      	bne.n	800fc12 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800fbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfc:	b672      	cpsid	i
 800fbfe:	f383 8811 	msr	BASEPRI, r3
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	b662      	cpsie	i
 800fc0c:	61bb      	str	r3, [r7, #24]
}
 800fc0e:	bf00      	nop
 800fc10:	e7fe      	b.n	800fc10 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d90c      	bls.n	800fc34 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800fc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1e:	b672      	cpsid	i
 800fc20:	f383 8811 	msr	BASEPRI, r3
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	b662      	cpsie	i
 800fc2e:	617b      	str	r3, [r7, #20]
}
 800fc30:	bf00      	nop
 800fc32:	e7fe      	b.n	800fc32 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fc34:	2302      	movs	r3, #2
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	f7ff feea 	bl	800fa18 <xQueueGenericCreateStatic>
 800fc44:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fc52:	69fb      	ldr	r3, [r7, #28]
	}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3720      	adds	r7, #32
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b086      	sub	sp, #24
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10c      	bne.n	800fc86 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	b672      	cpsid	i
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	b662      	cpsie	i
 800fc80:	613b      	str	r3, [r7, #16]
}
 800fc82:	bf00      	nop
 800fc84:	e7fe      	b.n	800fc84 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fc86:	683a      	ldr	r2, [r7, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d90c      	bls.n	800fca8 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	b672      	cpsid	i
 800fc94:	f383 8811 	msr	BASEPRI, r3
 800fc98:	f3bf 8f6f 	isb	sy
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	b662      	cpsie	i
 800fca2:	60fb      	str	r3, [r7, #12]
}
 800fca4:	bf00      	nop
 800fca6:	e7fe      	b.n	800fca6 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fca8:	2202      	movs	r2, #2
 800fcaa:	2100      	movs	r1, #0
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff ff35 	bl	800fb1c <xQueueGenericCreate>
 800fcb2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	683a      	ldr	r2, [r7, #0]
 800fcbe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fcc0:	697b      	ldr	r3, [r7, #20]
	}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3718      	adds	r7, #24
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
	...

0800fccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08e      	sub	sp, #56	; 0x38
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
 800fcd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d10c      	bne.n	800fd02 <xQueueGenericSend+0x36>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcec:	b672      	cpsid	i
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	b662      	cpsie	i
 800fcfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fcfe:	bf00      	nop
 800fd00:	e7fe      	b.n	800fd00 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d103      	bne.n	800fd10 <xQueueGenericSend+0x44>
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <xQueueGenericSend+0x48>
 800fd10:	2301      	movs	r3, #1
 800fd12:	e000      	b.n	800fd16 <xQueueGenericSend+0x4a>
 800fd14:	2300      	movs	r3, #0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10c      	bne.n	800fd34 <xQueueGenericSend+0x68>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1e:	b672      	cpsid	i
 800fd20:	f383 8811 	msr	BASEPRI, r3
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	b662      	cpsie	i
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd30:	bf00      	nop
 800fd32:	e7fe      	b.n	800fd32 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d103      	bne.n	800fd42 <xQueueGenericSend+0x76>
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d101      	bne.n	800fd46 <xQueueGenericSend+0x7a>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <xQueueGenericSend+0x7c>
 800fd46:	2300      	movs	r3, #0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10c      	bne.n	800fd66 <xQueueGenericSend+0x9a>
	__asm volatile
 800fd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd50:	b672      	cpsid	i
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	b662      	cpsie	i
 800fd60:	623b      	str	r3, [r7, #32]
}
 800fd62:	bf00      	nop
 800fd64:	e7fe      	b.n	800fd64 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd66:	f001 fc81 	bl	801166c <xTaskGetSchedulerState>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d102      	bne.n	800fd76 <xQueueGenericSend+0xaa>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <xQueueGenericSend+0xae>
 800fd76:	2301      	movs	r3, #1
 800fd78:	e000      	b.n	800fd7c <xQueueGenericSend+0xb0>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d10c      	bne.n	800fd9a <xQueueGenericSend+0xce>
	__asm volatile
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	b672      	cpsid	i
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	b662      	cpsie	i
 800fd94:	61fb      	str	r3, [r7, #28]
}
 800fd96:	bf00      	nop
 800fd98:	e7fe      	b.n	800fd98 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd9a:	f7ff fca7 	bl	800f6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d302      	bcc.n	800fdb0 <xQueueGenericSend+0xe4>
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d129      	bne.n	800fe04 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fdb0:	683a      	ldr	r2, [r7, #0]
 800fdb2:	68b9      	ldr	r1, [r7, #8]
 800fdb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdb6:	f000 fc82 	bl	80106be <prvCopyDataToQueue>
 800fdba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d010      	beq.n	800fde6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc6:	3324      	adds	r3, #36	; 0x24
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f001 fa89 	bl	80112e0 <xTaskRemoveFromEventList>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d013      	beq.n	800fdfc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fdd4:	4b3f      	ldr	r3, [pc, #252]	; (800fed4 <xQueueGenericSend+0x208>)
 800fdd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	e00a      	b.n	800fdfc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d007      	beq.n	800fdfc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fdec:	4b39      	ldr	r3, [pc, #228]	; (800fed4 <xQueueGenericSend+0x208>)
 800fdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fdfc:	f7ff fcaa 	bl	800f754 <vPortExitCritical>
				return pdPASS;
 800fe00:	2301      	movs	r3, #1
 800fe02:	e063      	b.n	800fecc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d103      	bne.n	800fe12 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe0a:	f7ff fca3 	bl	800f754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e05c      	b.n	800fecc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d106      	bne.n	800fe26 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe18:	f107 0314 	add.w	r3, r7, #20
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f001 fac5 	bl	80113ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe22:	2301      	movs	r3, #1
 800fe24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe26:	f7ff fc95 	bl	800f754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe2a:	f001 f82b 	bl	8010e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe2e:	f7ff fc5d 	bl	800f6ec <vPortEnterCritical>
 800fe32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe38:	b25b      	sxtb	r3, r3
 800fe3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe3e:	d103      	bne.n	800fe48 <xQueueGenericSend+0x17c>
 800fe40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe42:	2200      	movs	r2, #0
 800fe44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe4e:	b25b      	sxtb	r3, r3
 800fe50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe54:	d103      	bne.n	800fe5e <xQueueGenericSend+0x192>
 800fe56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe5e:	f7ff fc79 	bl	800f754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe62:	1d3a      	adds	r2, r7, #4
 800fe64:	f107 0314 	add.w	r3, r7, #20
 800fe68:	4611      	mov	r1, r2
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f001 fab4 	bl	80113d8 <xTaskCheckForTimeOut>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d124      	bne.n	800fec0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fe76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe78:	f000 fd19 	bl	80108ae <prvIsQueueFull>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d018      	beq.n	800feb4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fe82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe84:	3310      	adds	r3, #16
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	4611      	mov	r1, r2
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f001 f9d4 	bl	8011238 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fe90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe92:	f000 fca4 	bl	80107de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fe96:	f001 f803 	bl	8010ea0 <xTaskResumeAll>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f47f af7c 	bne.w	800fd9a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fea2:	4b0c      	ldr	r3, [pc, #48]	; (800fed4 <xQueueGenericSend+0x208>)
 800fea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fea8:	601a      	str	r2, [r3, #0]
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	e772      	b.n	800fd9a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800feb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feb6:	f000 fc92 	bl	80107de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800feba:	f000 fff1 	bl	8010ea0 <xTaskResumeAll>
 800febe:	e76c      	b.n	800fd9a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fec2:	f000 fc8c 	bl	80107de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fec6:	f000 ffeb 	bl	8010ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800feca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3738      	adds	r7, #56	; 0x38
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	e000ed04 	.word	0xe000ed04

0800fed8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b08e      	sub	sp, #56	; 0x38
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	607a      	str	r2, [r7, #4]
 800fee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800feea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feec:	2b00      	cmp	r3, #0
 800feee:	d10c      	bne.n	800ff0a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef4:	b672      	cpsid	i
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	b662      	cpsie	i
 800ff04:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ff06:	bf00      	nop
 800ff08:	e7fe      	b.n	800ff08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d103      	bne.n	800ff18 <xQueueGenericSendFromISR+0x40>
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d101      	bne.n	800ff1c <xQueueGenericSendFromISR+0x44>
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e000      	b.n	800ff1e <xQueueGenericSendFromISR+0x46>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d10c      	bne.n	800ff3c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ff22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff26:	b672      	cpsid	i
 800ff28:	f383 8811 	msr	BASEPRI, r3
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	b662      	cpsie	i
 800ff36:	623b      	str	r3, [r7, #32]
}
 800ff38:	bf00      	nop
 800ff3a:	e7fe      	b.n	800ff3a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d103      	bne.n	800ff4a <xQueueGenericSendFromISR+0x72>
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d101      	bne.n	800ff4e <xQueueGenericSendFromISR+0x76>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e000      	b.n	800ff50 <xQueueGenericSendFromISR+0x78>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d10c      	bne.n	800ff6e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ff54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff58:	b672      	cpsid	i
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	b662      	cpsie	i
 800ff68:	61fb      	str	r3, [r7, #28]
}
 800ff6a:	bf00      	nop
 800ff6c:	e7fe      	b.n	800ff6c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff6e:	f7ff fca5 	bl	800f8bc <vPortValidateInterruptPriority>
	__asm volatile
 800ff72:	f3ef 8211 	mrs	r2, BASEPRI
 800ff76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7a:	b672      	cpsid	i
 800ff7c:	f383 8811 	msr	BASEPRI, r3
 800ff80:	f3bf 8f6f 	isb	sy
 800ff84:	f3bf 8f4f 	dsb	sy
 800ff88:	b662      	cpsie	i
 800ff8a:	61ba      	str	r2, [r7, #24]
 800ff8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ff8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d302      	bcc.n	800ffa4 <xQueueGenericSendFromISR+0xcc>
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	2b02      	cmp	r3, #2
 800ffa2:	d12c      	bne.n	800fffe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ffaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	68b9      	ldr	r1, [r7, #8]
 800ffb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffb4:	f000 fb83 	bl	80106be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ffb8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ffbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc0:	d112      	bne.n	800ffe8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d016      	beq.n	800fff8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffcc:	3324      	adds	r3, #36	; 0x24
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f001 f986 	bl	80112e0 <xTaskRemoveFromEventList>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00e      	beq.n	800fff8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00b      	beq.n	800fff8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	e007      	b.n	800fff8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ffe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffec:	3301      	adds	r3, #1
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	b25a      	sxtb	r2, r3
 800fff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fff8:	2301      	movs	r3, #1
 800fffa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fffc:	e001      	b.n	8010002 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	637b      	str	r3, [r7, #52]	; 0x34
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	f383 8811 	msr	BASEPRI, r3
}
 801000c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801000e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010010:	4618      	mov	r0, r3
 8010012:	3738      	adds	r7, #56	; 0x38
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b08e      	sub	sp, #56	; 0x38
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010028:	2b00      	cmp	r3, #0
 801002a:	d10c      	bne.n	8010046 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801002c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010030:	b672      	cpsid	i
 8010032:	f383 8811 	msr	BASEPRI, r3
 8010036:	f3bf 8f6f 	isb	sy
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	b662      	cpsie	i
 8010040:	623b      	str	r3, [r7, #32]
}
 8010042:	bf00      	nop
 8010044:	e7fe      	b.n	8010044 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00c      	beq.n	8010068 <xQueueGiveFromISR+0x50>
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010052:	b672      	cpsid	i
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	b662      	cpsie	i
 8010062:	61fb      	str	r3, [r7, #28]
}
 8010064:	bf00      	nop
 8010066:	e7fe      	b.n	8010066 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d103      	bne.n	8010078 <xQueueGiveFromISR+0x60>
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <xQueueGiveFromISR+0x64>
 8010078:	2301      	movs	r3, #1
 801007a:	e000      	b.n	801007e <xQueueGiveFromISR+0x66>
 801007c:	2300      	movs	r3, #0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d10c      	bne.n	801009c <xQueueGiveFromISR+0x84>
	__asm volatile
 8010082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010086:	b672      	cpsid	i
 8010088:	f383 8811 	msr	BASEPRI, r3
 801008c:	f3bf 8f6f 	isb	sy
 8010090:	f3bf 8f4f 	dsb	sy
 8010094:	b662      	cpsie	i
 8010096:	61bb      	str	r3, [r7, #24]
}
 8010098:	bf00      	nop
 801009a:	e7fe      	b.n	801009a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801009c:	f7ff fc0e 	bl	800f8bc <vPortValidateInterruptPriority>
	__asm volatile
 80100a0:	f3ef 8211 	mrs	r2, BASEPRI
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	b672      	cpsid	i
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	b662      	cpsie	i
 80100b8:	617a      	str	r2, [r7, #20]
 80100ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80100bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d22b      	bcs.n	8010128 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80100d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80100da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100dc:	1c5a      	adds	r2, r3, #1
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80100e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ea:	d112      	bne.n	8010112 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d016      	beq.n	8010122 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f6:	3324      	adds	r3, #36	; 0x24
 80100f8:	4618      	mov	r0, r3
 80100fa:	f001 f8f1 	bl	80112e0 <xTaskRemoveFromEventList>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d00e      	beq.n	8010122 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00b      	beq.n	8010122 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	2201      	movs	r2, #1
 801010e:	601a      	str	r2, [r3, #0]
 8010110:	e007      	b.n	8010122 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010116:	3301      	adds	r3, #1
 8010118:	b2db      	uxtb	r3, r3
 801011a:	b25a      	sxtb	r2, r3
 801011c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010122:	2301      	movs	r3, #1
 8010124:	637b      	str	r3, [r7, #52]	; 0x34
 8010126:	e001      	b.n	801012c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010128:	2300      	movs	r3, #0
 801012a:	637b      	str	r3, [r7, #52]	; 0x34
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f383 8811 	msr	BASEPRI, r3
}
 8010136:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801013a:	4618      	mov	r0, r3
 801013c:	3738      	adds	r7, #56	; 0x38
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
	...

08010144 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b08c      	sub	sp, #48	; 0x30
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010150:	2300      	movs	r3, #0
 8010152:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10c      	bne.n	8010178 <xQueueReceive+0x34>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	b672      	cpsid	i
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	b662      	cpsie	i
 8010172:	623b      	str	r3, [r7, #32]
}
 8010174:	bf00      	nop
 8010176:	e7fe      	b.n	8010176 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d103      	bne.n	8010186 <xQueueReceive+0x42>
 801017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <xQueueReceive+0x46>
 8010186:	2301      	movs	r3, #1
 8010188:	e000      	b.n	801018c <xQueueReceive+0x48>
 801018a:	2300      	movs	r3, #0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10c      	bne.n	80101aa <xQueueReceive+0x66>
	__asm volatile
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	b672      	cpsid	i
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	b662      	cpsie	i
 80101a4:	61fb      	str	r3, [r7, #28]
}
 80101a6:	bf00      	nop
 80101a8:	e7fe      	b.n	80101a8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101aa:	f001 fa5f 	bl	801166c <xTaskGetSchedulerState>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <xQueueReceive+0x76>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <xQueueReceive+0x7a>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <xQueueReceive+0x7c>
 80101be:	2300      	movs	r3, #0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10c      	bne.n	80101de <xQueueReceive+0x9a>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	b672      	cpsid	i
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	b662      	cpsie	i
 80101d8:	61bb      	str	r3, [r7, #24]
}
 80101da:	bf00      	nop
 80101dc:	e7fe      	b.n	80101dc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101de:	f7ff fa85 	bl	800f6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d01f      	beq.n	801022e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80101ee:	68b9      	ldr	r1, [r7, #8]
 80101f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101f2:	f000 face 	bl	8010792 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	1e5a      	subs	r2, r3, #1
 80101fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010200:	691b      	ldr	r3, [r3, #16]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00f      	beq.n	8010226 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010208:	3310      	adds	r3, #16
 801020a:	4618      	mov	r0, r3
 801020c:	f001 f868 	bl	80112e0 <xTaskRemoveFromEventList>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d007      	beq.n	8010226 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010216:	4b3d      	ldr	r3, [pc, #244]	; (801030c <xQueueReceive+0x1c8>)
 8010218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010226:	f7ff fa95 	bl	800f754 <vPortExitCritical>
				return pdPASS;
 801022a:	2301      	movs	r3, #1
 801022c:	e069      	b.n	8010302 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d103      	bne.n	801023c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010234:	f7ff fa8e 	bl	800f754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010238:	2300      	movs	r3, #0
 801023a:	e062      	b.n	8010302 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801023c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023e:	2b00      	cmp	r3, #0
 8010240:	d106      	bne.n	8010250 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010242:	f107 0310 	add.w	r3, r7, #16
 8010246:	4618      	mov	r0, r3
 8010248:	f001 f8b0 	bl	80113ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801024c:	2301      	movs	r3, #1
 801024e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010250:	f7ff fa80 	bl	800f754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010254:	f000 fe16 	bl	8010e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010258:	f7ff fa48 	bl	800f6ec <vPortEnterCritical>
 801025c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010262:	b25b      	sxtb	r3, r3
 8010264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010268:	d103      	bne.n	8010272 <xQueueReceive+0x12e>
 801026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010278:	b25b      	sxtb	r3, r3
 801027a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027e:	d103      	bne.n	8010288 <xQueueReceive+0x144>
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	2200      	movs	r2, #0
 8010284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010288:	f7ff fa64 	bl	800f754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801028c:	1d3a      	adds	r2, r7, #4
 801028e:	f107 0310 	add.w	r3, r7, #16
 8010292:	4611      	mov	r1, r2
 8010294:	4618      	mov	r0, r3
 8010296:	f001 f89f 	bl	80113d8 <xTaskCheckForTimeOut>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d123      	bne.n	80102e8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a2:	f000 faee 	bl	8010882 <prvIsQueueEmpty>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d017      	beq.n	80102dc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80102ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ae:	3324      	adds	r3, #36	; 0x24
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	4611      	mov	r1, r2
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 ffbf 	bl	8011238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102bc:	f000 fa8f 	bl	80107de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102c0:	f000 fdee 	bl	8010ea0 <xTaskResumeAll>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d189      	bne.n	80101de <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80102ca:	4b10      	ldr	r3, [pc, #64]	; (801030c <xQueueReceive+0x1c8>)
 80102cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102d0:	601a      	str	r2, [r3, #0]
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	e780      	b.n	80101de <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80102dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102de:	f000 fa7e 	bl	80107de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102e2:	f000 fddd 	bl	8010ea0 <xTaskResumeAll>
 80102e6:	e77a      	b.n	80101de <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80102e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102ea:	f000 fa78 	bl	80107de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102ee:	f000 fdd7 	bl	8010ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102f4:	f000 fac5 	bl	8010882 <prvIsQueueEmpty>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f43f af6f 	beq.w	80101de <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010300:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010302:	4618      	mov	r0, r3
 8010304:	3730      	adds	r7, #48	; 0x30
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	e000ed04 	.word	0xe000ed04

08010310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b08e      	sub	sp, #56	; 0x38
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801031a:	2300      	movs	r3, #0
 801031c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010322:	2300      	movs	r3, #0
 8010324:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10c      	bne.n	8010346 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010330:	b672      	cpsid	i
 8010332:	f383 8811 	msr	BASEPRI, r3
 8010336:	f3bf 8f6f 	isb	sy
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	b662      	cpsie	i
 8010340:	623b      	str	r3, [r7, #32]
}
 8010342:	bf00      	nop
 8010344:	e7fe      	b.n	8010344 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00c      	beq.n	8010368 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	b672      	cpsid	i
 8010354:	f383 8811 	msr	BASEPRI, r3
 8010358:	f3bf 8f6f 	isb	sy
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	b662      	cpsie	i
 8010362:	61fb      	str	r3, [r7, #28]
}
 8010364:	bf00      	nop
 8010366:	e7fe      	b.n	8010366 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010368:	f001 f980 	bl	801166c <xTaskGetSchedulerState>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d102      	bne.n	8010378 <xQueueSemaphoreTake+0x68>
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <xQueueSemaphoreTake+0x6c>
 8010378:	2301      	movs	r3, #1
 801037a:	e000      	b.n	801037e <xQueueSemaphoreTake+0x6e>
 801037c:	2300      	movs	r3, #0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d10c      	bne.n	801039c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8010382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010386:	b672      	cpsid	i
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	b662      	cpsie	i
 8010396:	61bb      	str	r3, [r7, #24]
}
 8010398:	bf00      	nop
 801039a:	e7fe      	b.n	801039a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801039c:	f7ff f9a6 	bl	800f6ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80103a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d024      	beq.n	80103f6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	1e5a      	subs	r2, r3, #1
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d104      	bne.n	80103c6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80103bc:	f001 fad4 	bl	8011968 <pvTaskIncrementMutexHeldCount>
 80103c0:	4602      	mov	r2, r0
 80103c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00f      	beq.n	80103ee <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d0:	3310      	adds	r3, #16
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 ff84 	bl	80112e0 <xTaskRemoveFromEventList>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d007      	beq.n	80103ee <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103de:	4b55      	ldr	r3, [pc, #340]	; (8010534 <xQueueSemaphoreTake+0x224>)
 80103e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80103ee:	f7ff f9b1 	bl	800f754 <vPortExitCritical>
				return pdPASS;
 80103f2:	2301      	movs	r3, #1
 80103f4:	e099      	b.n	801052a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d113      	bne.n	8010424 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80103fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00c      	beq.n	801041c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	b672      	cpsid	i
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	b662      	cpsie	i
 8010416:	617b      	str	r3, [r7, #20]
}
 8010418:	bf00      	nop
 801041a:	e7fe      	b.n	801041a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801041c:	f7ff f99a 	bl	800f754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010420:	2300      	movs	r3, #0
 8010422:	e082      	b.n	801052a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010426:	2b00      	cmp	r3, #0
 8010428:	d106      	bne.n	8010438 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801042a:	f107 030c 	add.w	r3, r7, #12
 801042e:	4618      	mov	r0, r3
 8010430:	f000 ffbc 	bl	80113ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010434:	2301      	movs	r3, #1
 8010436:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010438:	f7ff f98c 	bl	800f754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801043c:	f000 fd22 	bl	8010e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010440:	f7ff f954 	bl	800f6ec <vPortEnterCritical>
 8010444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801044a:	b25b      	sxtb	r3, r3
 801044c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010450:	d103      	bne.n	801045a <xQueueSemaphoreTake+0x14a>
 8010452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010454:	2200      	movs	r2, #0
 8010456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010460:	b25b      	sxtb	r3, r3
 8010462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010466:	d103      	bne.n	8010470 <xQueueSemaphoreTake+0x160>
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046a:	2200      	movs	r2, #0
 801046c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010470:	f7ff f970 	bl	800f754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010474:	463a      	mov	r2, r7
 8010476:	f107 030c 	add.w	r3, r7, #12
 801047a:	4611      	mov	r1, r2
 801047c:	4618      	mov	r0, r3
 801047e:	f000 ffab 	bl	80113d8 <xTaskCheckForTimeOut>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d132      	bne.n	80104ee <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801048a:	f000 f9fa 	bl	8010882 <prvIsQueueEmpty>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d026      	beq.n	80104e2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d109      	bne.n	80104b0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 801049c:	f7ff f926 	bl	800f6ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f001 f8ff 	bl	80116a8 <xTaskPriorityInherit>
 80104aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80104ac:	f7ff f952 	bl	800f754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	3324      	adds	r3, #36	; 0x24
 80104b4:	683a      	ldr	r2, [r7, #0]
 80104b6:	4611      	mov	r1, r2
 80104b8:	4618      	mov	r0, r3
 80104ba:	f000 febd 	bl	8011238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104c0:	f000 f98d 	bl	80107de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104c4:	f000 fcec 	bl	8010ea0 <xTaskResumeAll>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f47f af66 	bne.w	801039c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80104d0:	4b18      	ldr	r3, [pc, #96]	; (8010534 <xQueueSemaphoreTake+0x224>)
 80104d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d6:	601a      	str	r2, [r3, #0]
 80104d8:	f3bf 8f4f 	dsb	sy
 80104dc:	f3bf 8f6f 	isb	sy
 80104e0:	e75c      	b.n	801039c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80104e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104e4:	f000 f97b 	bl	80107de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104e8:	f000 fcda 	bl	8010ea0 <xTaskResumeAll>
 80104ec:	e756      	b.n	801039c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80104ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104f0:	f000 f975 	bl	80107de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104f4:	f000 fcd4 	bl	8010ea0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104fa:	f000 f9c2 	bl	8010882 <prvIsQueueEmpty>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	f43f af4b 	beq.w	801039c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00d      	beq.n	8010528 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801050c:	f7ff f8ee 	bl	800f6ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010512:	f000 f8bc 	bl	801068e <prvGetDisinheritPriorityAfterTimeout>
 8010516:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801051e:	4618      	mov	r0, r3
 8010520:	f001 f99c 	bl	801185c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010524:	f7ff f916 	bl	800f754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010528:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801052a:	4618      	mov	r0, r3
 801052c:	3738      	adds	r7, #56	; 0x38
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	e000ed04 	.word	0xe000ed04

08010538 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08e      	sub	sp, #56	; 0x38
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054a:	2b00      	cmp	r3, #0
 801054c:	d10c      	bne.n	8010568 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801054e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010552:	b672      	cpsid	i
 8010554:	f383 8811 	msr	BASEPRI, r3
 8010558:	f3bf 8f6f 	isb	sy
 801055c:	f3bf 8f4f 	dsb	sy
 8010560:	b662      	cpsie	i
 8010562:	623b      	str	r3, [r7, #32]
}
 8010564:	bf00      	nop
 8010566:	e7fe      	b.n	8010566 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d103      	bne.n	8010576 <xQueueReceiveFromISR+0x3e>
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <xQueueReceiveFromISR+0x42>
 8010576:	2301      	movs	r3, #1
 8010578:	e000      	b.n	801057c <xQueueReceiveFromISR+0x44>
 801057a:	2300      	movs	r3, #0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10c      	bne.n	801059a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010584:	b672      	cpsid	i
 8010586:	f383 8811 	msr	BASEPRI, r3
 801058a:	f3bf 8f6f 	isb	sy
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	b662      	cpsie	i
 8010594:	61fb      	str	r3, [r7, #28]
}
 8010596:	bf00      	nop
 8010598:	e7fe      	b.n	8010598 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801059a:	f7ff f98f 	bl	800f8bc <vPortValidateInterruptPriority>
	__asm volatile
 801059e:	f3ef 8211 	mrs	r2, BASEPRI
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	b672      	cpsid	i
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	b662      	cpsie	i
 80105b6:	61ba      	str	r2, [r7, #24]
 80105b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80105ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80105bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d02f      	beq.n	801062a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105d4:	68b9      	ldr	r1, [r7, #8]
 80105d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105d8:	f000 f8db 	bl	8010792 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	1e5a      	subs	r2, r3, #1
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80105e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80105e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ec:	d112      	bne.n	8010614 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d016      	beq.n	8010624 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	3310      	adds	r3, #16
 80105fa:	4618      	mov	r0, r3
 80105fc:	f000 fe70 	bl	80112e0 <xTaskRemoveFromEventList>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00e      	beq.n	8010624 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00b      	beq.n	8010624 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	e007      	b.n	8010624 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010618:	3301      	adds	r3, #1
 801061a:	b2db      	uxtb	r3, r3
 801061c:	b25a      	sxtb	r2, r3
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010624:	2301      	movs	r3, #1
 8010626:	637b      	str	r3, [r7, #52]	; 0x34
 8010628:	e001      	b.n	801062e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801062a:	2300      	movs	r3, #0
 801062c:	637b      	str	r3, [r7, #52]	; 0x34
 801062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010630:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	f383 8811 	msr	BASEPRI, r3
}
 8010638:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801063c:	4618      	mov	r0, r3
 801063e:	3738      	adds	r7, #56	; 0x38
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d10c      	bne.n	8010670 <vQueueDelete+0x2c>
	__asm volatile
 8010656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065a:	b672      	cpsid	i
 801065c:	f383 8811 	msr	BASEPRI, r3
 8010660:	f3bf 8f6f 	isb	sy
 8010664:	f3bf 8f4f 	dsb	sy
 8010668:	b662      	cpsie	i
 801066a:	60bb      	str	r3, [r7, #8]
}
 801066c:	bf00      	nop
 801066e:	e7fe      	b.n	801066e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f000 f95f 	bl	8010934 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801067c:	2b00      	cmp	r3, #0
 801067e:	d102      	bne.n	8010686 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f7fe fd55 	bl	800f130 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010686:	bf00      	nop
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801068e:	b480      	push	{r7}
 8010690:	b085      	sub	sp, #20
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069a:	2b00      	cmp	r3, #0
 801069c:	d006      	beq.n	80106ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80106a8:	60fb      	str	r3, [r7, #12]
 80106aa:	e001      	b.n	80106b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80106ac:	2300      	movs	r3, #0
 80106ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80106b0:	68fb      	ldr	r3, [r7, #12]
	}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3714      	adds	r7, #20
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr

080106be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80106be:	b580      	push	{r7, lr}
 80106c0:	b086      	sub	sp, #24
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	60f8      	str	r0, [r7, #12]
 80106c6:	60b9      	str	r1, [r7, #8]
 80106c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10d      	bne.n	80106f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d14d      	bne.n	8010780 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f001 f845 	bl	8011778 <xTaskPriorityDisinherit>
 80106ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2200      	movs	r2, #0
 80106f4:	609a      	str	r2, [r3, #8]
 80106f6:	e043      	b.n	8010780 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d119      	bne.n	8010732 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	6858      	ldr	r0, [r3, #4]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010706:	461a      	mov	r2, r3
 8010708:	68b9      	ldr	r1, [r7, #8]
 801070a:	f012 fdf9 	bl	8023300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	685a      	ldr	r2, [r3, #4]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010716:	441a      	add	r2, r3
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	685a      	ldr	r2, [r3, #4]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	429a      	cmp	r2, r3
 8010726:	d32b      	bcc.n	8010780 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	605a      	str	r2, [r3, #4]
 8010730:	e026      	b.n	8010780 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	68d8      	ldr	r0, [r3, #12]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801073a:	461a      	mov	r2, r3
 801073c:	68b9      	ldr	r1, [r7, #8]
 801073e:	f012 fddf 	bl	8023300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	68da      	ldr	r2, [r3, #12]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801074a:	425b      	negs	r3, r3
 801074c:	441a      	add	r2, r3
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	68da      	ldr	r2, [r3, #12]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	429a      	cmp	r2, r3
 801075c:	d207      	bcs.n	801076e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	689a      	ldr	r2, [r3, #8]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010766:	425b      	negs	r3, r3
 8010768:	441a      	add	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b02      	cmp	r3, #2
 8010772:	d105      	bne.n	8010780 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d002      	beq.n	8010780 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	3b01      	subs	r3, #1
 801077e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	1c5a      	adds	r2, r3, #1
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010788:	697b      	ldr	r3, [r7, #20]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b082      	sub	sp, #8
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d018      	beq.n	80107d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	68da      	ldr	r2, [r3, #12]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ac:	441a      	add	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	68da      	ldr	r2, [r3, #12]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	689b      	ldr	r3, [r3, #8]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d303      	bcc.n	80107c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68d9      	ldr	r1, [r3, #12]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ce:	461a      	mov	r2, r3
 80107d0:	6838      	ldr	r0, [r7, #0]
 80107d2:	f012 fd95 	bl	8023300 <memcpy>
	}
}
 80107d6:	bf00      	nop
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b084      	sub	sp, #16
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80107e6:	f7fe ff81 	bl	800f6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80107f2:	e011      	b.n	8010818 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d012      	beq.n	8010822 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3324      	adds	r3, #36	; 0x24
 8010800:	4618      	mov	r0, r3
 8010802:	f000 fd6d 	bl	80112e0 <xTaskRemoveFromEventList>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d001      	beq.n	8010810 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801080c:	f000 fe4a 	bl	80114a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010810:	7bfb      	ldrb	r3, [r7, #15]
 8010812:	3b01      	subs	r3, #1
 8010814:	b2db      	uxtb	r3, r3
 8010816:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801081c:	2b00      	cmp	r3, #0
 801081e:	dce9      	bgt.n	80107f4 <prvUnlockQueue+0x16>
 8010820:	e000      	b.n	8010824 <prvUnlockQueue+0x46>
					break;
 8010822:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	22ff      	movs	r2, #255	; 0xff
 8010828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801082c:	f7fe ff92 	bl	800f754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010830:	f7fe ff5c 	bl	800f6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801083a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801083c:	e011      	b.n	8010862 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d012      	beq.n	801086c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	3310      	adds	r3, #16
 801084a:	4618      	mov	r0, r3
 801084c:	f000 fd48 	bl	80112e0 <xTaskRemoveFromEventList>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010856:	f000 fe25 	bl	80114a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801085a:	7bbb      	ldrb	r3, [r7, #14]
 801085c:	3b01      	subs	r3, #1
 801085e:	b2db      	uxtb	r3, r3
 8010860:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010866:	2b00      	cmp	r3, #0
 8010868:	dce9      	bgt.n	801083e <prvUnlockQueue+0x60>
 801086a:	e000      	b.n	801086e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801086c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	22ff      	movs	r2, #255	; 0xff
 8010872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010876:	f7fe ff6d 	bl	800f754 <vPortExitCritical>
}
 801087a:	bf00      	nop
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b084      	sub	sp, #16
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801088a:	f7fe ff2f 	bl	800f6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010896:	2301      	movs	r3, #1
 8010898:	60fb      	str	r3, [r7, #12]
 801089a:	e001      	b.n	80108a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801089c:	2300      	movs	r3, #0
 801089e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108a0:	f7fe ff58 	bl	800f754 <vPortExitCritical>

	return xReturn;
 80108a4:	68fb      	ldr	r3, [r7, #12]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b084      	sub	sp, #16
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108b6:	f7fe ff19 	bl	800f6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d102      	bne.n	80108cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80108c6:	2301      	movs	r3, #1
 80108c8:	60fb      	str	r3, [r7, #12]
 80108ca:	e001      	b.n	80108d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108d0:	f7fe ff40 	bl	800f754 <vPortExitCritical>

	return xReturn;
 80108d4:	68fb      	ldr	r3, [r7, #12]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
	...

080108e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80108ea:	2300      	movs	r3, #0
 80108ec:	60fb      	str	r3, [r7, #12]
 80108ee:	e014      	b.n	801091a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80108f0:	4a0f      	ldr	r2, [pc, #60]	; (8010930 <vQueueAddToRegistry+0x50>)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10b      	bne.n	8010914 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80108fc:	490c      	ldr	r1, [pc, #48]	; (8010930 <vQueueAddToRegistry+0x50>)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010906:	4a0a      	ldr	r2, [pc, #40]	; (8010930 <vQueueAddToRegistry+0x50>)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	00db      	lsls	r3, r3, #3
 801090c:	4413      	add	r3, r2
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010912:	e006      	b.n	8010922 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	3301      	adds	r3, #1
 8010918:	60fb      	str	r3, [r7, #12]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2b07      	cmp	r3, #7
 801091e:	d9e7      	bls.n	80108f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010920:	bf00      	nop
 8010922:	bf00      	nop
 8010924:	3714      	adds	r7, #20
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	20056a98 	.word	0x20056a98

08010934 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801093c:	2300      	movs	r3, #0
 801093e:	60fb      	str	r3, [r7, #12]
 8010940:	e016      	b.n	8010970 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010942:	4a10      	ldr	r2, [pc, #64]	; (8010984 <vQueueUnregisterQueue+0x50>)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	4413      	add	r3, r2
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	429a      	cmp	r2, r3
 8010950:	d10b      	bne.n	801096a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010952:	4a0c      	ldr	r2, [pc, #48]	; (8010984 <vQueueUnregisterQueue+0x50>)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2100      	movs	r1, #0
 8010958:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801095c:	4a09      	ldr	r2, [pc, #36]	; (8010984 <vQueueUnregisterQueue+0x50>)
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	00db      	lsls	r3, r3, #3
 8010962:	4413      	add	r3, r2
 8010964:	2200      	movs	r2, #0
 8010966:	605a      	str	r2, [r3, #4]
				break;
 8010968:	e006      	b.n	8010978 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	3301      	adds	r3, #1
 801096e:	60fb      	str	r3, [r7, #12]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2b07      	cmp	r3, #7
 8010974:	d9e5      	bls.n	8010942 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010976:	bf00      	nop
 8010978:	bf00      	nop
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	20056a98 	.word	0x20056a98

08010988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010998:	f7fe fea8 	bl	800f6ec <vPortEnterCritical>
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109a2:	b25b      	sxtb	r3, r3
 80109a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a8:	d103      	bne.n	80109b2 <vQueueWaitForMessageRestricted+0x2a>
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109b8:	b25b      	sxtb	r3, r3
 80109ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109be:	d103      	bne.n	80109c8 <vQueueWaitForMessageRestricted+0x40>
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109c8:	f7fe fec4 	bl	800f754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d106      	bne.n	80109e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	3324      	adds	r3, #36	; 0x24
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	68b9      	ldr	r1, [r7, #8]
 80109dc:	4618      	mov	r0, r3
 80109de:	f000 fc51 	bl	8011284 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80109e2:	6978      	ldr	r0, [r7, #20]
 80109e4:	f7ff fefb 	bl	80107de <prvUnlockQueue>
	}
 80109e8:	bf00      	nop
 80109ea:	3718      	adds	r7, #24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08e      	sub	sp, #56	; 0x38
 80109f4:	af04      	add	r7, sp, #16
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
 80109fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80109fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d10c      	bne.n	8010a1e <xTaskCreateStatic+0x2e>
	__asm volatile
 8010a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a08:	b672      	cpsid	i
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	b662      	cpsie	i
 8010a18:	623b      	str	r3, [r7, #32]
}
 8010a1a:	bf00      	nop
 8010a1c:	e7fe      	b.n	8010a1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d10c      	bne.n	8010a3e <xTaskCreateStatic+0x4e>
	__asm volatile
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	b672      	cpsid	i
 8010a2a:	f383 8811 	msr	BASEPRI, r3
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	b662      	cpsie	i
 8010a38:	61fb      	str	r3, [r7, #28]
}
 8010a3a:	bf00      	nop
 8010a3c:	e7fe      	b.n	8010a3c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a3e:	235c      	movs	r3, #92	; 0x5c
 8010a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	2b5c      	cmp	r3, #92	; 0x5c
 8010a46:	d00c      	beq.n	8010a62 <xTaskCreateStatic+0x72>
	__asm volatile
 8010a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4c:	b672      	cpsid	i
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	b662      	cpsie	i
 8010a5c:	61bb      	str	r3, [r7, #24]
}
 8010a5e:	bf00      	nop
 8010a60:	e7fe      	b.n	8010a60 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010a62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d01e      	beq.n	8010aa8 <xTaskCreateStatic+0xb8>
 8010a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d01b      	beq.n	8010aa8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010a82:	2300      	movs	r3, #0
 8010a84:	9303      	str	r3, [sp, #12]
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	9302      	str	r3, [sp, #8]
 8010a8a:	f107 0314 	add.w	r3, r7, #20
 8010a8e:	9301      	str	r3, [sp, #4]
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	68b9      	ldr	r1, [r7, #8]
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f000 f850 	bl	8010b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aa2:	f000 f8df 	bl	8010c64 <prvAddNewTaskToReadyList>
 8010aa6:	e001      	b.n	8010aac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010aac:	697b      	ldr	r3, [r7, #20]
	}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3728      	adds	r7, #40	; 0x28
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b08c      	sub	sp, #48	; 0x30
 8010aba:	af04      	add	r7, sp, #16
 8010abc:	60f8      	str	r0, [r7, #12]
 8010abe:	60b9      	str	r1, [r7, #8]
 8010ac0:	603b      	str	r3, [r7, #0]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ac6:	88fb      	ldrh	r3, [r7, #6]
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fa66 	bl	800ef9c <pvPortMalloc>
 8010ad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00e      	beq.n	8010af6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010ad8:	205c      	movs	r0, #92	; 0x5c
 8010ada:	f7fe fa5f 	bl	800ef9c <pvPortMalloc>
 8010ade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d003      	beq.n	8010aee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	697a      	ldr	r2, [r7, #20]
 8010aea:	631a      	str	r2, [r3, #48]	; 0x30
 8010aec:	e005      	b.n	8010afa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010aee:	6978      	ldr	r0, [r7, #20]
 8010af0:	f7fe fb1e 	bl	800f130 <vPortFree>
 8010af4:	e001      	b.n	8010afa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010af6:	2300      	movs	r3, #0
 8010af8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d017      	beq.n	8010b30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b08:	88fa      	ldrh	r2, [r7, #6]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9303      	str	r3, [sp, #12]
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	9302      	str	r3, [sp, #8]
 8010b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	68b9      	ldr	r1, [r7, #8]
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 f80e 	bl	8010b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b24:	69f8      	ldr	r0, [r7, #28]
 8010b26:	f000 f89d 	bl	8010c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	61bb      	str	r3, [r7, #24]
 8010b2e:	e002      	b.n	8010b36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b30:	f04f 33ff 	mov.w	r3, #4294967295
 8010b34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b36:	69bb      	ldr	r3, [r7, #24]
	}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3720      	adds	r7, #32
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	461a      	mov	r2, r3
 8010b58:	21a5      	movs	r1, #165	; 0xa5
 8010b5a:	f012 fbdf 	bl	802331c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b62:	6879      	ldr	r1, [r7, #4]
 8010b64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010b68:	440b      	add	r3, r1
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	4413      	add	r3, r2
 8010b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	f023 0307 	bic.w	r3, r3, #7
 8010b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010b78:	69bb      	ldr	r3, [r7, #24]
 8010b7a:	f003 0307 	and.w	r3, r3, #7
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d00c      	beq.n	8010b9c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b86:	b672      	cpsid	i
 8010b88:	f383 8811 	msr	BASEPRI, r3
 8010b8c:	f3bf 8f6f 	isb	sy
 8010b90:	f3bf 8f4f 	dsb	sy
 8010b94:	b662      	cpsie	i
 8010b96:	617b      	str	r3, [r7, #20]
}
 8010b98:	bf00      	nop
 8010b9a:	e7fe      	b.n	8010b9a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d01f      	beq.n	8010be2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	61fb      	str	r3, [r7, #28]
 8010ba6:	e012      	b.n	8010bce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	4413      	add	r3, r2
 8010bae:	7819      	ldrb	r1, [r3, #0]
 8010bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	3334      	adds	r3, #52	; 0x34
 8010bb8:	460a      	mov	r2, r1
 8010bba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010bbc:	68ba      	ldr	r2, [r7, #8]
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d006      	beq.n	8010bd6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	61fb      	str	r3, [r7, #28]
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	2b0f      	cmp	r3, #15
 8010bd2:	d9e9      	bls.n	8010ba8 <prvInitialiseNewTask+0x68>
 8010bd4:	e000      	b.n	8010bd8 <prvInitialiseNewTask+0x98>
			{
				break;
 8010bd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010be0:	e003      	b.n	8010bea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	2200      	movs	r2, #0
 8010be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bec:	2b37      	cmp	r3, #55	; 0x37
 8010bee:	d901      	bls.n	8010bf4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010bf0:	2337      	movs	r3, #55	; 0x37
 8010bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c02:	2200      	movs	r2, #0
 8010c04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	3304      	adds	r3, #4
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fe fbca 	bl	800f3a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	3318      	adds	r3, #24
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fe fbc5 	bl	800f3a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c32:	2200      	movs	r2, #0
 8010c34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	68f9      	ldr	r1, [r7, #12]
 8010c42:	69b8      	ldr	r0, [r7, #24]
 8010c44:	f7fe fc42 	bl	800f4cc <pxPortInitialiseStack>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c5a:	bf00      	nop
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
	...

08010c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010c6c:	f7fe fd3e 	bl	800f6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010c70:	4b2d      	ldr	r3, [pc, #180]	; (8010d28 <prvAddNewTaskToReadyList+0xc4>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	3301      	adds	r3, #1
 8010c76:	4a2c      	ldr	r2, [pc, #176]	; (8010d28 <prvAddNewTaskToReadyList+0xc4>)
 8010c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010c7a:	4b2c      	ldr	r3, [pc, #176]	; (8010d2c <prvAddNewTaskToReadyList+0xc8>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d109      	bne.n	8010c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010c82:	4a2a      	ldr	r2, [pc, #168]	; (8010d2c <prvAddNewTaskToReadyList+0xc8>)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010c88:	4b27      	ldr	r3, [pc, #156]	; (8010d28 <prvAddNewTaskToReadyList+0xc4>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d110      	bne.n	8010cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010c90:	f000 fc2c 	bl	80114ec <prvInitialiseTaskLists>
 8010c94:	e00d      	b.n	8010cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010c96:	4b26      	ldr	r3, [pc, #152]	; (8010d30 <prvAddNewTaskToReadyList+0xcc>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d109      	bne.n	8010cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010c9e:	4b23      	ldr	r3, [pc, #140]	; (8010d2c <prvAddNewTaskToReadyList+0xc8>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d802      	bhi.n	8010cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010cac:	4a1f      	ldr	r2, [pc, #124]	; (8010d2c <prvAddNewTaskToReadyList+0xc8>)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010cb2:	4b20      	ldr	r3, [pc, #128]	; (8010d34 <prvAddNewTaskToReadyList+0xd0>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	4a1e      	ldr	r2, [pc, #120]	; (8010d34 <prvAddNewTaskToReadyList+0xd0>)
 8010cba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010cbc:	4b1d      	ldr	r3, [pc, #116]	; (8010d34 <prvAddNewTaskToReadyList+0xd0>)
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc8:	4b1b      	ldr	r3, [pc, #108]	; (8010d38 <prvAddNewTaskToReadyList+0xd4>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d903      	bls.n	8010cd8 <prvAddNewTaskToReadyList+0x74>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd4:	4a18      	ldr	r2, [pc, #96]	; (8010d38 <prvAddNewTaskToReadyList+0xd4>)
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cdc:	4613      	mov	r3, r2
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	4413      	add	r3, r2
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	4a15      	ldr	r2, [pc, #84]	; (8010d3c <prvAddNewTaskToReadyList+0xd8>)
 8010ce6:	441a      	add	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	3304      	adds	r3, #4
 8010cec:	4619      	mov	r1, r3
 8010cee:	4610      	mov	r0, r2
 8010cf0:	f7fe fb65 	bl	800f3be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010cf4:	f7fe fd2e 	bl	800f754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010cf8:	4b0d      	ldr	r3, [pc, #52]	; (8010d30 <prvAddNewTaskToReadyList+0xcc>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00e      	beq.n	8010d1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d00:	4b0a      	ldr	r3, [pc, #40]	; (8010d2c <prvAddNewTaskToReadyList+0xc8>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d207      	bcs.n	8010d1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d0e:	4b0c      	ldr	r3, [pc, #48]	; (8010d40 <prvAddNewTaskToReadyList+0xdc>)
 8010d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d1e:	bf00      	nop
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	200563d8 	.word	0x200563d8
 8010d2c:	20055f04 	.word	0x20055f04
 8010d30:	200563e4 	.word	0x200563e4
 8010d34:	200563f4 	.word	0x200563f4
 8010d38:	200563e0 	.word	0x200563e0
 8010d3c:	20055f08 	.word	0x20055f08
 8010d40:	e000ed04 	.word	0xe000ed04

08010d44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d019      	beq.n	8010d8a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010d56:	4b14      	ldr	r3, [pc, #80]	; (8010da8 <vTaskDelay+0x64>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00c      	beq.n	8010d78 <vTaskDelay+0x34>
	__asm volatile
 8010d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d62:	b672      	cpsid	i
 8010d64:	f383 8811 	msr	BASEPRI, r3
 8010d68:	f3bf 8f6f 	isb	sy
 8010d6c:	f3bf 8f4f 	dsb	sy
 8010d70:	b662      	cpsie	i
 8010d72:	60bb      	str	r3, [r7, #8]
}
 8010d74:	bf00      	nop
 8010d76:	e7fe      	b.n	8010d76 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010d78:	f000 f884 	bl	8010e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 fe06 	bl	8011990 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010d84:	f000 f88c 	bl	8010ea0 <xTaskResumeAll>
 8010d88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d107      	bne.n	8010da0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010d90:	4b06      	ldr	r3, [pc, #24]	; (8010dac <vTaskDelay+0x68>)
 8010d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d96:	601a      	str	r2, [r3, #0]
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010da0:	bf00      	nop
 8010da2:	3710      	adds	r7, #16
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	20056400 	.word	0x20056400
 8010dac:	e000ed04 	.word	0xe000ed04

08010db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b08a      	sub	sp, #40	; 0x28
 8010db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010db6:	2300      	movs	r3, #0
 8010db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010dbe:	463a      	mov	r2, r7
 8010dc0:	1d39      	adds	r1, r7, #4
 8010dc2:	f107 0308 	add.w	r3, r7, #8
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe f8b4 	bl	800ef34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010dcc:	6839      	ldr	r1, [r7, #0]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	9202      	str	r2, [sp, #8]
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	2300      	movs	r3, #0
 8010ddc:	460a      	mov	r2, r1
 8010dde:	4923      	ldr	r1, [pc, #140]	; (8010e6c <vTaskStartScheduler+0xbc>)
 8010de0:	4823      	ldr	r0, [pc, #140]	; (8010e70 <vTaskStartScheduler+0xc0>)
 8010de2:	f7ff fe05 	bl	80109f0 <xTaskCreateStatic>
 8010de6:	4603      	mov	r3, r0
 8010de8:	4a22      	ldr	r2, [pc, #136]	; (8010e74 <vTaskStartScheduler+0xc4>)
 8010dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010dec:	4b21      	ldr	r3, [pc, #132]	; (8010e74 <vTaskStartScheduler+0xc4>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010df4:	2301      	movs	r3, #1
 8010df6:	617b      	str	r3, [r7, #20]
 8010df8:	e001      	b.n	8010dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d102      	bne.n	8010e0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e04:	f000 fe18 	bl	8011a38 <xTimerCreateTimerTask>
 8010e08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d118      	bne.n	8010e42 <vTaskStartScheduler+0x92>
	__asm volatile
 8010e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e14:	b672      	cpsid	i
 8010e16:	f383 8811 	msr	BASEPRI, r3
 8010e1a:	f3bf 8f6f 	isb	sy
 8010e1e:	f3bf 8f4f 	dsb	sy
 8010e22:	b662      	cpsie	i
 8010e24:	613b      	str	r3, [r7, #16]
}
 8010e26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010e28:	4b13      	ldr	r3, [pc, #76]	; (8010e78 <vTaskStartScheduler+0xc8>)
 8010e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e30:	4b12      	ldr	r3, [pc, #72]	; (8010e7c <vTaskStartScheduler+0xcc>)
 8010e32:	2201      	movs	r2, #1
 8010e34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010e36:	4b12      	ldr	r3, [pc, #72]	; (8010e80 <vTaskStartScheduler+0xd0>)
 8010e38:	2200      	movs	r2, #0
 8010e3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010e3c:	f7fe fbd8 	bl	800f5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010e40:	e010      	b.n	8010e64 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e48:	d10c      	bne.n	8010e64 <vTaskStartScheduler+0xb4>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4e:	b672      	cpsid	i
 8010e50:	f383 8811 	msr	BASEPRI, r3
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	b662      	cpsie	i
 8010e5e:	60fb      	str	r3, [r7, #12]
}
 8010e60:	bf00      	nop
 8010e62:	e7fe      	b.n	8010e62 <vTaskStartScheduler+0xb2>
}
 8010e64:	bf00      	nop
 8010e66:	3718      	adds	r7, #24
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	08025254 	.word	0x08025254
 8010e70:	080114bd 	.word	0x080114bd
 8010e74:	200563fc 	.word	0x200563fc
 8010e78:	200563f8 	.word	0x200563f8
 8010e7c:	200563e4 	.word	0x200563e4
 8010e80:	200563dc 	.word	0x200563dc

08010e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010e88:	4b04      	ldr	r3, [pc, #16]	; (8010e9c <vTaskSuspendAll+0x18>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	4a03      	ldr	r2, [pc, #12]	; (8010e9c <vTaskSuspendAll+0x18>)
 8010e90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010e92:	bf00      	nop
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	20056400 	.word	0x20056400

08010ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010eae:	4b43      	ldr	r3, [pc, #268]	; (8010fbc <xTaskResumeAll+0x11c>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d10c      	bne.n	8010ed0 <xTaskResumeAll+0x30>
	__asm volatile
 8010eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eba:	b672      	cpsid	i
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	b662      	cpsie	i
 8010eca:	603b      	str	r3, [r7, #0]
}
 8010ecc:	bf00      	nop
 8010ece:	e7fe      	b.n	8010ece <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010ed0:	f7fe fc0c 	bl	800f6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010ed4:	4b39      	ldr	r3, [pc, #228]	; (8010fbc <xTaskResumeAll+0x11c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3b01      	subs	r3, #1
 8010eda:	4a38      	ldr	r2, [pc, #224]	; (8010fbc <xTaskResumeAll+0x11c>)
 8010edc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ede:	4b37      	ldr	r3, [pc, #220]	; (8010fbc <xTaskResumeAll+0x11c>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d162      	bne.n	8010fac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ee6:	4b36      	ldr	r3, [pc, #216]	; (8010fc0 <xTaskResumeAll+0x120>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d05e      	beq.n	8010fac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010eee:	e02f      	b.n	8010f50 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ef0:	4b34      	ldr	r3, [pc, #208]	; (8010fc4 <xTaskResumeAll+0x124>)
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	3318      	adds	r3, #24
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7fe fabb 	bl	800f478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	3304      	adds	r3, #4
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fe fab6 	bl	800f478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f10:	4b2d      	ldr	r3, [pc, #180]	; (8010fc8 <xTaskResumeAll+0x128>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d903      	bls.n	8010f20 <xTaskResumeAll+0x80>
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1c:	4a2a      	ldr	r2, [pc, #168]	; (8010fc8 <xTaskResumeAll+0x128>)
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f24:	4613      	mov	r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4413      	add	r3, r2
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	4a27      	ldr	r2, [pc, #156]	; (8010fcc <xTaskResumeAll+0x12c>)
 8010f2e:	441a      	add	r2, r3
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	3304      	adds	r3, #4
 8010f34:	4619      	mov	r1, r3
 8010f36:	4610      	mov	r0, r2
 8010f38:	f7fe fa41 	bl	800f3be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f40:	4b23      	ldr	r3, [pc, #140]	; (8010fd0 <xTaskResumeAll+0x130>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d302      	bcc.n	8010f50 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8010f4a:	4b22      	ldr	r3, [pc, #136]	; (8010fd4 <xTaskResumeAll+0x134>)
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f50:	4b1c      	ldr	r3, [pc, #112]	; (8010fc4 <xTaskResumeAll+0x124>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1cb      	bne.n	8010ef0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010f5e:	f000 fb65 	bl	801162c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010f62:	4b1d      	ldr	r3, [pc, #116]	; (8010fd8 <xTaskResumeAll+0x138>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d010      	beq.n	8010f90 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010f6e:	f000 f847 	bl	8011000 <xTaskIncrementTick>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010f78:	4b16      	ldr	r3, [pc, #88]	; (8010fd4 <xTaskResumeAll+0x134>)
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3b01      	subs	r3, #1
 8010f82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d1f1      	bne.n	8010f6e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8010f8a:	4b13      	ldr	r3, [pc, #76]	; (8010fd8 <xTaskResumeAll+0x138>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010f90:	4b10      	ldr	r3, [pc, #64]	; (8010fd4 <xTaskResumeAll+0x134>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d009      	beq.n	8010fac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010f9c:	4b0f      	ldr	r3, [pc, #60]	; (8010fdc <xTaskResumeAll+0x13c>)
 8010f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fa2:	601a      	str	r2, [r3, #0]
 8010fa4:	f3bf 8f4f 	dsb	sy
 8010fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010fac:	f7fe fbd2 	bl	800f754 <vPortExitCritical>

	return xAlreadyYielded;
 8010fb0:	68bb      	ldr	r3, [r7, #8]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	20056400 	.word	0x20056400
 8010fc0:	200563d8 	.word	0x200563d8
 8010fc4:	20056398 	.word	0x20056398
 8010fc8:	200563e0 	.word	0x200563e0
 8010fcc:	20055f08 	.word	0x20055f08
 8010fd0:	20055f04 	.word	0x20055f04
 8010fd4:	200563ec 	.word	0x200563ec
 8010fd8:	200563e8 	.word	0x200563e8
 8010fdc:	e000ed04 	.word	0xe000ed04

08010fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010fe6:	4b05      	ldr	r3, [pc, #20]	; (8010ffc <xTaskGetTickCount+0x1c>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010fec:	687b      	ldr	r3, [r7, #4]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	200563dc 	.word	0x200563dc

08011000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b086      	sub	sp, #24
 8011004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011006:	2300      	movs	r3, #0
 8011008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801100a:	4b50      	ldr	r3, [pc, #320]	; (801114c <xTaskIncrementTick+0x14c>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	f040 808b 	bne.w	801112a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011014:	4b4e      	ldr	r3, [pc, #312]	; (8011150 <xTaskIncrementTick+0x150>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3301      	adds	r3, #1
 801101a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801101c:	4a4c      	ldr	r2, [pc, #304]	; (8011150 <xTaskIncrementTick+0x150>)
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d122      	bne.n	801106e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011028:	4b4a      	ldr	r3, [pc, #296]	; (8011154 <xTaskIncrementTick+0x154>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00c      	beq.n	801104c <xTaskIncrementTick+0x4c>
	__asm volatile
 8011032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011036:	b672      	cpsid	i
 8011038:	f383 8811 	msr	BASEPRI, r3
 801103c:	f3bf 8f6f 	isb	sy
 8011040:	f3bf 8f4f 	dsb	sy
 8011044:	b662      	cpsie	i
 8011046:	603b      	str	r3, [r7, #0]
}
 8011048:	bf00      	nop
 801104a:	e7fe      	b.n	801104a <xTaskIncrementTick+0x4a>
 801104c:	4b41      	ldr	r3, [pc, #260]	; (8011154 <xTaskIncrementTick+0x154>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	60fb      	str	r3, [r7, #12]
 8011052:	4b41      	ldr	r3, [pc, #260]	; (8011158 <xTaskIncrementTick+0x158>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a3f      	ldr	r2, [pc, #252]	; (8011154 <xTaskIncrementTick+0x154>)
 8011058:	6013      	str	r3, [r2, #0]
 801105a:	4a3f      	ldr	r2, [pc, #252]	; (8011158 <xTaskIncrementTick+0x158>)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	6013      	str	r3, [r2, #0]
 8011060:	4b3e      	ldr	r3, [pc, #248]	; (801115c <xTaskIncrementTick+0x15c>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	3301      	adds	r3, #1
 8011066:	4a3d      	ldr	r2, [pc, #244]	; (801115c <xTaskIncrementTick+0x15c>)
 8011068:	6013      	str	r3, [r2, #0]
 801106a:	f000 fadf 	bl	801162c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801106e:	4b3c      	ldr	r3, [pc, #240]	; (8011160 <xTaskIncrementTick+0x160>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	693a      	ldr	r2, [r7, #16]
 8011074:	429a      	cmp	r2, r3
 8011076:	d349      	bcc.n	801110c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011078:	4b36      	ldr	r3, [pc, #216]	; (8011154 <xTaskIncrementTick+0x154>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d104      	bne.n	801108c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011082:	4b37      	ldr	r3, [pc, #220]	; (8011160 <xTaskIncrementTick+0x160>)
 8011084:	f04f 32ff 	mov.w	r2, #4294967295
 8011088:	601a      	str	r2, [r3, #0]
					break;
 801108a:	e03f      	b.n	801110c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801108c:	4b31      	ldr	r3, [pc, #196]	; (8011154 <xTaskIncrementTick+0x154>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801109c:	693a      	ldr	r2, [r7, #16]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d203      	bcs.n	80110ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80110a4:	4a2e      	ldr	r2, [pc, #184]	; (8011160 <xTaskIncrementTick+0x160>)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80110aa:	e02f      	b.n	801110c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	3304      	adds	r3, #4
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fe f9e1 	bl	800f478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d004      	beq.n	80110c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	3318      	adds	r3, #24
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe f9d8 	bl	800f478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110cc:	4b25      	ldr	r3, [pc, #148]	; (8011164 <xTaskIncrementTick+0x164>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d903      	bls.n	80110dc <xTaskIncrementTick+0xdc>
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d8:	4a22      	ldr	r2, [pc, #136]	; (8011164 <xTaskIncrementTick+0x164>)
 80110da:	6013      	str	r3, [r2, #0]
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e0:	4613      	mov	r3, r2
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	4413      	add	r3, r2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	4a1f      	ldr	r2, [pc, #124]	; (8011168 <xTaskIncrementTick+0x168>)
 80110ea:	441a      	add	r2, r3
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	3304      	adds	r3, #4
 80110f0:	4619      	mov	r1, r3
 80110f2:	4610      	mov	r0, r2
 80110f4:	f7fe f963 	bl	800f3be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110fc:	4b1b      	ldr	r3, [pc, #108]	; (801116c <xTaskIncrementTick+0x16c>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011102:	429a      	cmp	r2, r3
 8011104:	d3b8      	bcc.n	8011078 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011106:	2301      	movs	r3, #1
 8011108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801110a:	e7b5      	b.n	8011078 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801110c:	4b17      	ldr	r3, [pc, #92]	; (801116c <xTaskIncrementTick+0x16c>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011112:	4915      	ldr	r1, [pc, #84]	; (8011168 <xTaskIncrementTick+0x168>)
 8011114:	4613      	mov	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4413      	add	r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	440b      	add	r3, r1
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2b01      	cmp	r3, #1
 8011122:	d907      	bls.n	8011134 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011124:	2301      	movs	r3, #1
 8011126:	617b      	str	r3, [r7, #20]
 8011128:	e004      	b.n	8011134 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801112a:	4b11      	ldr	r3, [pc, #68]	; (8011170 <xTaskIncrementTick+0x170>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	3301      	adds	r3, #1
 8011130:	4a0f      	ldr	r2, [pc, #60]	; (8011170 <xTaskIncrementTick+0x170>)
 8011132:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011134:	4b0f      	ldr	r3, [pc, #60]	; (8011174 <xTaskIncrementTick+0x174>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801113c:	2301      	movs	r3, #1
 801113e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011140:	697b      	ldr	r3, [r7, #20]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3718      	adds	r7, #24
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20056400 	.word	0x20056400
 8011150:	200563dc 	.word	0x200563dc
 8011154:	20056390 	.word	0x20056390
 8011158:	20056394 	.word	0x20056394
 801115c:	200563f0 	.word	0x200563f0
 8011160:	200563f8 	.word	0x200563f8
 8011164:	200563e0 	.word	0x200563e0
 8011168:	20055f08 	.word	0x20055f08
 801116c:	20055f04 	.word	0x20055f04
 8011170:	200563e8 	.word	0x200563e8
 8011174:	200563ec 	.word	0x200563ec

08011178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011178:	b480      	push	{r7}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801117e:	4b29      	ldr	r3, [pc, #164]	; (8011224 <vTaskSwitchContext+0xac>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d003      	beq.n	801118e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011186:	4b28      	ldr	r3, [pc, #160]	; (8011228 <vTaskSwitchContext+0xb0>)
 8011188:	2201      	movs	r2, #1
 801118a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801118c:	e043      	b.n	8011216 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 801118e:	4b26      	ldr	r3, [pc, #152]	; (8011228 <vTaskSwitchContext+0xb0>)
 8011190:	2200      	movs	r2, #0
 8011192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011194:	4b25      	ldr	r3, [pc, #148]	; (801122c <vTaskSwitchContext+0xb4>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	60fb      	str	r3, [r7, #12]
 801119a:	e012      	b.n	80111c2 <vTaskSwitchContext+0x4a>
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10c      	bne.n	80111bc <vTaskSwitchContext+0x44>
	__asm volatile
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	b672      	cpsid	i
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	b662      	cpsie	i
 80111b6:	607b      	str	r3, [r7, #4]
}
 80111b8:	bf00      	nop
 80111ba:	e7fe      	b.n	80111ba <vTaskSwitchContext+0x42>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	3b01      	subs	r3, #1
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	491b      	ldr	r1, [pc, #108]	; (8011230 <vTaskSwitchContext+0xb8>)
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	4613      	mov	r3, r2
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	009b      	lsls	r3, r3, #2
 80111ce:	440b      	add	r3, r1
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d0e2      	beq.n	801119c <vTaskSwitchContext+0x24>
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	4613      	mov	r3, r2
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	4413      	add	r3, r2
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	4a13      	ldr	r2, [pc, #76]	; (8011230 <vTaskSwitchContext+0xb8>)
 80111e2:	4413      	add	r3, r2
 80111e4:	60bb      	str	r3, [r7, #8]
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	685a      	ldr	r2, [r3, #4]
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	605a      	str	r2, [r3, #4]
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	685a      	ldr	r2, [r3, #4]
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	3308      	adds	r3, #8
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d104      	bne.n	8011206 <vTaskSwitchContext+0x8e>
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	685a      	ldr	r2, [r3, #4]
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	605a      	str	r2, [r3, #4]
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	4a09      	ldr	r2, [pc, #36]	; (8011234 <vTaskSwitchContext+0xbc>)
 801120e:	6013      	str	r3, [r2, #0]
 8011210:	4a06      	ldr	r2, [pc, #24]	; (801122c <vTaskSwitchContext+0xb4>)
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	6013      	str	r3, [r2, #0]
}
 8011216:	bf00      	nop
 8011218:	3714      	adds	r7, #20
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	20056400 	.word	0x20056400
 8011228:	200563ec 	.word	0x200563ec
 801122c:	200563e0 	.word	0x200563e0
 8011230:	20055f08 	.word	0x20055f08
 8011234:	20055f04 	.word	0x20055f04

08011238 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d10c      	bne.n	8011262 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124c:	b672      	cpsid	i
 801124e:	f383 8811 	msr	BASEPRI, r3
 8011252:	f3bf 8f6f 	isb	sy
 8011256:	f3bf 8f4f 	dsb	sy
 801125a:	b662      	cpsie	i
 801125c:	60fb      	str	r3, [r7, #12]
}
 801125e:	bf00      	nop
 8011260:	e7fe      	b.n	8011260 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011262:	4b07      	ldr	r3, [pc, #28]	; (8011280 <vTaskPlaceOnEventList+0x48>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3318      	adds	r3, #24
 8011268:	4619      	mov	r1, r3
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7fe f8cb 	bl	800f406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011270:	2101      	movs	r1, #1
 8011272:	6838      	ldr	r0, [r7, #0]
 8011274:	f000 fb8c 	bl	8011990 <prvAddCurrentTaskToDelayedList>
}
 8011278:	bf00      	nop
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	20055f04 	.word	0x20055f04

08011284 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10c      	bne.n	80112b0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8011296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129a:	b672      	cpsid	i
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	b662      	cpsie	i
 80112aa:	617b      	str	r3, [r7, #20]
}
 80112ac:	bf00      	nop
 80112ae:	e7fe      	b.n	80112ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112b0:	4b0a      	ldr	r3, [pc, #40]	; (80112dc <vTaskPlaceOnEventListRestricted+0x58>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	3318      	adds	r3, #24
 80112b6:	4619      	mov	r1, r3
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f7fe f880 	bl	800f3be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d002      	beq.n	80112ca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80112c4:	f04f 33ff 	mov.w	r3, #4294967295
 80112c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	68b8      	ldr	r0, [r7, #8]
 80112ce:	f000 fb5f 	bl	8011990 <prvAddCurrentTaskToDelayedList>
	}
 80112d2:	bf00      	nop
 80112d4:	3718      	adds	r7, #24
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	20055f04 	.word	0x20055f04

080112e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d10c      	bne.n	8011310 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80112f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fa:	b672      	cpsid	i
 80112fc:	f383 8811 	msr	BASEPRI, r3
 8011300:	f3bf 8f6f 	isb	sy
 8011304:	f3bf 8f4f 	dsb	sy
 8011308:	b662      	cpsie	i
 801130a:	60fb      	str	r3, [r7, #12]
}
 801130c:	bf00      	nop
 801130e:	e7fe      	b.n	801130e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	3318      	adds	r3, #24
 8011314:	4618      	mov	r0, r3
 8011316:	f7fe f8af 	bl	800f478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801131a:	4b1e      	ldr	r3, [pc, #120]	; (8011394 <xTaskRemoveFromEventList+0xb4>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d11d      	bne.n	801135e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	3304      	adds	r3, #4
 8011326:	4618      	mov	r0, r3
 8011328:	f7fe f8a6 	bl	800f478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011330:	4b19      	ldr	r3, [pc, #100]	; (8011398 <xTaskRemoveFromEventList+0xb8>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	429a      	cmp	r2, r3
 8011336:	d903      	bls.n	8011340 <xTaskRemoveFromEventList+0x60>
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	4a16      	ldr	r2, [pc, #88]	; (8011398 <xTaskRemoveFromEventList+0xb8>)
 801133e:	6013      	str	r3, [r2, #0]
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011344:	4613      	mov	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4413      	add	r3, r2
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	4a13      	ldr	r2, [pc, #76]	; (801139c <xTaskRemoveFromEventList+0xbc>)
 801134e:	441a      	add	r2, r3
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	3304      	adds	r3, #4
 8011354:	4619      	mov	r1, r3
 8011356:	4610      	mov	r0, r2
 8011358:	f7fe f831 	bl	800f3be <vListInsertEnd>
 801135c:	e005      	b.n	801136a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	3318      	adds	r3, #24
 8011362:	4619      	mov	r1, r3
 8011364:	480e      	ldr	r0, [pc, #56]	; (80113a0 <xTaskRemoveFromEventList+0xc0>)
 8011366:	f7fe f82a 	bl	800f3be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136e:	4b0d      	ldr	r3, [pc, #52]	; (80113a4 <xTaskRemoveFromEventList+0xc4>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011374:	429a      	cmp	r2, r3
 8011376:	d905      	bls.n	8011384 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011378:	2301      	movs	r3, #1
 801137a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801137c:	4b0a      	ldr	r3, [pc, #40]	; (80113a8 <xTaskRemoveFromEventList+0xc8>)
 801137e:	2201      	movs	r2, #1
 8011380:	601a      	str	r2, [r3, #0]
 8011382:	e001      	b.n	8011388 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011384:	2300      	movs	r3, #0
 8011386:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011388:	697b      	ldr	r3, [r7, #20]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	20056400 	.word	0x20056400
 8011398:	200563e0 	.word	0x200563e0
 801139c:	20055f08 	.word	0x20055f08
 80113a0:	20056398 	.word	0x20056398
 80113a4:	20055f04 	.word	0x20055f04
 80113a8:	200563ec 	.word	0x200563ec

080113ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80113b4:	4b06      	ldr	r3, [pc, #24]	; (80113d0 <vTaskInternalSetTimeOutState+0x24>)
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80113bc:	4b05      	ldr	r3, [pc, #20]	; (80113d4 <vTaskInternalSetTimeOutState+0x28>)
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	605a      	str	r2, [r3, #4]
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr
 80113d0:	200563f0 	.word	0x200563f0
 80113d4:	200563dc 	.word	0x200563dc

080113d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b088      	sub	sp, #32
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10c      	bne.n	8011402 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80113e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ec:	b672      	cpsid	i
 80113ee:	f383 8811 	msr	BASEPRI, r3
 80113f2:	f3bf 8f6f 	isb	sy
 80113f6:	f3bf 8f4f 	dsb	sy
 80113fa:	b662      	cpsie	i
 80113fc:	613b      	str	r3, [r7, #16]
}
 80113fe:	bf00      	nop
 8011400:	e7fe      	b.n	8011400 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10c      	bne.n	8011422 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140c:	b672      	cpsid	i
 801140e:	f383 8811 	msr	BASEPRI, r3
 8011412:	f3bf 8f6f 	isb	sy
 8011416:	f3bf 8f4f 	dsb	sy
 801141a:	b662      	cpsie	i
 801141c:	60fb      	str	r3, [r7, #12]
}
 801141e:	bf00      	nop
 8011420:	e7fe      	b.n	8011420 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011422:	f7fe f963 	bl	800f6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011426:	4b1d      	ldr	r3, [pc, #116]	; (801149c <xTaskCheckForTimeOut+0xc4>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	69ba      	ldr	r2, [r7, #24]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801143e:	d102      	bne.n	8011446 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011440:	2300      	movs	r3, #0
 8011442:	61fb      	str	r3, [r7, #28]
 8011444:	e023      	b.n	801148e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	4b15      	ldr	r3, [pc, #84]	; (80114a0 <xTaskCheckForTimeOut+0xc8>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	429a      	cmp	r2, r3
 8011450:	d007      	beq.n	8011462 <xTaskCheckForTimeOut+0x8a>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	69ba      	ldr	r2, [r7, #24]
 8011458:	429a      	cmp	r2, r3
 801145a:	d302      	bcc.n	8011462 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801145c:	2301      	movs	r3, #1
 801145e:	61fb      	str	r3, [r7, #28]
 8011460:	e015      	b.n	801148e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	429a      	cmp	r2, r3
 801146a:	d20b      	bcs.n	8011484 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	1ad2      	subs	r2, r2, r3
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f7ff ff97 	bl	80113ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801147e:	2300      	movs	r3, #0
 8011480:	61fb      	str	r3, [r7, #28]
 8011482:	e004      	b.n	801148e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	2200      	movs	r2, #0
 8011488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801148a:	2301      	movs	r3, #1
 801148c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801148e:	f7fe f961 	bl	800f754 <vPortExitCritical>

	return xReturn;
 8011492:	69fb      	ldr	r3, [r7, #28]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3720      	adds	r7, #32
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	200563dc 	.word	0x200563dc
 80114a0:	200563f0 	.word	0x200563f0

080114a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80114a4:	b480      	push	{r7}
 80114a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80114a8:	4b03      	ldr	r3, [pc, #12]	; (80114b8 <vTaskMissedYield+0x14>)
 80114aa:	2201      	movs	r2, #1
 80114ac:	601a      	str	r2, [r3, #0]
}
 80114ae:	bf00      	nop
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	200563ec 	.word	0x200563ec

080114bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80114c4:	f000 f852 	bl	801156c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80114c8:	4b06      	ldr	r3, [pc, #24]	; (80114e4 <prvIdleTask+0x28>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d9f9      	bls.n	80114c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80114d0:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <prvIdleTask+0x2c>)
 80114d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114d6:	601a      	str	r2, [r3, #0]
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80114e0:	e7f0      	b.n	80114c4 <prvIdleTask+0x8>
 80114e2:	bf00      	nop
 80114e4:	20055f08 	.word	0x20055f08
 80114e8:	e000ed04 	.word	0xe000ed04

080114ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80114f2:	2300      	movs	r3, #0
 80114f4:	607b      	str	r3, [r7, #4]
 80114f6:	e00c      	b.n	8011512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80114f8:	687a      	ldr	r2, [r7, #4]
 80114fa:	4613      	mov	r3, r2
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	4413      	add	r3, r2
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4a12      	ldr	r2, [pc, #72]	; (801154c <prvInitialiseTaskLists+0x60>)
 8011504:	4413      	add	r3, r2
 8011506:	4618      	mov	r0, r3
 8011508:	f7fd ff2c 	bl	800f364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	3301      	adds	r3, #1
 8011510:	607b      	str	r3, [r7, #4]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2b37      	cmp	r3, #55	; 0x37
 8011516:	d9ef      	bls.n	80114f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011518:	480d      	ldr	r0, [pc, #52]	; (8011550 <prvInitialiseTaskLists+0x64>)
 801151a:	f7fd ff23 	bl	800f364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801151e:	480d      	ldr	r0, [pc, #52]	; (8011554 <prvInitialiseTaskLists+0x68>)
 8011520:	f7fd ff20 	bl	800f364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011524:	480c      	ldr	r0, [pc, #48]	; (8011558 <prvInitialiseTaskLists+0x6c>)
 8011526:	f7fd ff1d 	bl	800f364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801152a:	480c      	ldr	r0, [pc, #48]	; (801155c <prvInitialiseTaskLists+0x70>)
 801152c:	f7fd ff1a 	bl	800f364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011530:	480b      	ldr	r0, [pc, #44]	; (8011560 <prvInitialiseTaskLists+0x74>)
 8011532:	f7fd ff17 	bl	800f364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011536:	4b0b      	ldr	r3, [pc, #44]	; (8011564 <prvInitialiseTaskLists+0x78>)
 8011538:	4a05      	ldr	r2, [pc, #20]	; (8011550 <prvInitialiseTaskLists+0x64>)
 801153a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801153c:	4b0a      	ldr	r3, [pc, #40]	; (8011568 <prvInitialiseTaskLists+0x7c>)
 801153e:	4a05      	ldr	r2, [pc, #20]	; (8011554 <prvInitialiseTaskLists+0x68>)
 8011540:	601a      	str	r2, [r3, #0]
}
 8011542:	bf00      	nop
 8011544:	3708      	adds	r7, #8
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	20055f08 	.word	0x20055f08
 8011550:	20056368 	.word	0x20056368
 8011554:	2005637c 	.word	0x2005637c
 8011558:	20056398 	.word	0x20056398
 801155c:	200563ac 	.word	0x200563ac
 8011560:	200563c4 	.word	0x200563c4
 8011564:	20056390 	.word	0x20056390
 8011568:	20056394 	.word	0x20056394

0801156c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011572:	e019      	b.n	80115a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011574:	f7fe f8ba 	bl	800f6ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011578:	4b10      	ldr	r3, [pc, #64]	; (80115bc <prvCheckTasksWaitingTermination+0x50>)
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3304      	adds	r3, #4
 8011584:	4618      	mov	r0, r3
 8011586:	f7fd ff77 	bl	800f478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801158a:	4b0d      	ldr	r3, [pc, #52]	; (80115c0 <prvCheckTasksWaitingTermination+0x54>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	3b01      	subs	r3, #1
 8011590:	4a0b      	ldr	r2, [pc, #44]	; (80115c0 <prvCheckTasksWaitingTermination+0x54>)
 8011592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011594:	4b0b      	ldr	r3, [pc, #44]	; (80115c4 <prvCheckTasksWaitingTermination+0x58>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	3b01      	subs	r3, #1
 801159a:	4a0a      	ldr	r2, [pc, #40]	; (80115c4 <prvCheckTasksWaitingTermination+0x58>)
 801159c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801159e:	f7fe f8d9 	bl	800f754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 f810 	bl	80115c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80115a8:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <prvCheckTasksWaitingTermination+0x58>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d1e1      	bne.n	8011574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80115b0:	bf00      	nop
 80115b2:	bf00      	nop
 80115b4:	3708      	adds	r7, #8
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	200563ac 	.word	0x200563ac
 80115c0:	200563d8 	.word	0x200563d8
 80115c4:	200563c0 	.word	0x200563c0

080115c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b084      	sub	sp, #16
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d108      	bne.n	80115ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fd fda6 	bl	800f130 <vPortFree>
				vPortFree( pxTCB );
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7fd fda3 	bl	800f130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80115ea:	e01a      	b.n	8011622 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d103      	bne.n	80115fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7fd fd9a 	bl	800f130 <vPortFree>
	}
 80115fc:	e011      	b.n	8011622 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011604:	2b02      	cmp	r3, #2
 8011606:	d00c      	beq.n	8011622 <prvDeleteTCB+0x5a>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	b672      	cpsid	i
 801160e:	f383 8811 	msr	BASEPRI, r3
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	f3bf 8f4f 	dsb	sy
 801161a:	b662      	cpsie	i
 801161c:	60fb      	str	r3, [r7, #12]
}
 801161e:	bf00      	nop
 8011620:	e7fe      	b.n	8011620 <prvDeleteTCB+0x58>
	}
 8011622:	bf00      	nop
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
	...

0801162c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011632:	4b0c      	ldr	r3, [pc, #48]	; (8011664 <prvResetNextTaskUnblockTime+0x38>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d104      	bne.n	8011646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801163c:	4b0a      	ldr	r3, [pc, #40]	; (8011668 <prvResetNextTaskUnblockTime+0x3c>)
 801163e:	f04f 32ff 	mov.w	r2, #4294967295
 8011642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011644:	e008      	b.n	8011658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011646:	4b07      	ldr	r3, [pc, #28]	; (8011664 <prvResetNextTaskUnblockTime+0x38>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	4a04      	ldr	r2, [pc, #16]	; (8011668 <prvResetNextTaskUnblockTime+0x3c>)
 8011656:	6013      	str	r3, [r2, #0]
}
 8011658:	bf00      	nop
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	20056390 	.word	0x20056390
 8011668:	200563f8 	.word	0x200563f8

0801166c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011672:	4b0b      	ldr	r3, [pc, #44]	; (80116a0 <xTaskGetSchedulerState+0x34>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d102      	bne.n	8011680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801167a:	2301      	movs	r3, #1
 801167c:	607b      	str	r3, [r7, #4]
 801167e:	e008      	b.n	8011692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011680:	4b08      	ldr	r3, [pc, #32]	; (80116a4 <xTaskGetSchedulerState+0x38>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d102      	bne.n	801168e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011688:	2302      	movs	r3, #2
 801168a:	607b      	str	r3, [r7, #4]
 801168c:	e001      	b.n	8011692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801168e:	2300      	movs	r3, #0
 8011690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011692:	687b      	ldr	r3, [r7, #4]
	}
 8011694:	4618      	mov	r0, r3
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	200563e4 	.word	0x200563e4
 80116a4:	20056400 	.word	0x20056400

080116a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80116b4:	2300      	movs	r3, #0
 80116b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d051      	beq.n	8011762 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c2:	4b2a      	ldr	r3, [pc, #168]	; (801176c <xTaskPriorityInherit+0xc4>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d241      	bcs.n	8011750 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	699b      	ldr	r3, [r3, #24]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	db06      	blt.n	80116e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116d4:	4b25      	ldr	r3, [pc, #148]	; (801176c <xTaskPriorityInherit+0xc4>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	6959      	ldr	r1, [r3, #20]
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ea:	4613      	mov	r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4a1f      	ldr	r2, [pc, #124]	; (8011770 <xTaskPriorityInherit+0xc8>)
 80116f4:	4413      	add	r3, r2
 80116f6:	4299      	cmp	r1, r3
 80116f8:	d122      	bne.n	8011740 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	3304      	adds	r3, #4
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fd feba 	bl	800f478 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011704:	4b19      	ldr	r3, [pc, #100]	; (801176c <xTaskPriorityInherit+0xc4>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011712:	4b18      	ldr	r3, [pc, #96]	; (8011774 <xTaskPriorityInherit+0xcc>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	429a      	cmp	r2, r3
 8011718:	d903      	bls.n	8011722 <xTaskPriorityInherit+0x7a>
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801171e:	4a15      	ldr	r2, [pc, #84]	; (8011774 <xTaskPriorityInherit+0xcc>)
 8011720:	6013      	str	r3, [r2, #0]
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011726:	4613      	mov	r3, r2
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	4413      	add	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4a10      	ldr	r2, [pc, #64]	; (8011770 <xTaskPriorityInherit+0xc8>)
 8011730:	441a      	add	r2, r3
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	3304      	adds	r3, #4
 8011736:	4619      	mov	r1, r3
 8011738:	4610      	mov	r0, r2
 801173a:	f7fd fe40 	bl	800f3be <vListInsertEnd>
 801173e:	e004      	b.n	801174a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011740:	4b0a      	ldr	r3, [pc, #40]	; (801176c <xTaskPriorityInherit+0xc4>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801174a:	2301      	movs	r3, #1
 801174c:	60fb      	str	r3, [r7, #12]
 801174e:	e008      	b.n	8011762 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011754:	4b05      	ldr	r3, [pc, #20]	; (801176c <xTaskPriorityInherit+0xc4>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801175a:	429a      	cmp	r2, r3
 801175c:	d201      	bcs.n	8011762 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801175e:	2301      	movs	r3, #1
 8011760:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011762:	68fb      	ldr	r3, [r7, #12]
	}
 8011764:	4618      	mov	r0, r3
 8011766:	3710      	adds	r7, #16
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}
 801176c:	20055f04 	.word	0x20055f04
 8011770:	20055f08 	.word	0x20055f08
 8011774:	200563e0 	.word	0x200563e0

08011778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011784:	2300      	movs	r3, #0
 8011786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d05a      	beq.n	8011844 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801178e:	4b30      	ldr	r3, [pc, #192]	; (8011850 <xTaskPriorityDisinherit+0xd8>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	693a      	ldr	r2, [r7, #16]
 8011794:	429a      	cmp	r2, r3
 8011796:	d00c      	beq.n	80117b2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	b672      	cpsid	i
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	b662      	cpsie	i
 80117ac:	60fb      	str	r3, [r7, #12]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d10c      	bne.n	80117d4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80117ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117be:	b672      	cpsid	i
 80117c0:	f383 8811 	msr	BASEPRI, r3
 80117c4:	f3bf 8f6f 	isb	sy
 80117c8:	f3bf 8f4f 	dsb	sy
 80117cc:	b662      	cpsie	i
 80117ce:	60bb      	str	r3, [r7, #8]
}
 80117d0:	bf00      	nop
 80117d2:	e7fe      	b.n	80117d2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117d8:	1e5a      	subs	r2, r3, #1
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d02c      	beq.n	8011844 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d128      	bne.n	8011844 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	3304      	adds	r3, #4
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fd fe3e 	bl	800f478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011808:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011814:	4b0f      	ldr	r3, [pc, #60]	; (8011854 <xTaskPriorityDisinherit+0xdc>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	429a      	cmp	r2, r3
 801181a:	d903      	bls.n	8011824 <xTaskPriorityDisinherit+0xac>
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011820:	4a0c      	ldr	r2, [pc, #48]	; (8011854 <xTaskPriorityDisinherit+0xdc>)
 8011822:	6013      	str	r3, [r2, #0]
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011828:	4613      	mov	r3, r2
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4413      	add	r3, r2
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	4a09      	ldr	r2, [pc, #36]	; (8011858 <xTaskPriorityDisinherit+0xe0>)
 8011832:	441a      	add	r2, r3
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	3304      	adds	r3, #4
 8011838:	4619      	mov	r1, r3
 801183a:	4610      	mov	r0, r2
 801183c:	f7fd fdbf 	bl	800f3be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011840:	2301      	movs	r3, #1
 8011842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011844:	697b      	ldr	r3, [r7, #20]
	}
 8011846:	4618      	mov	r0, r3
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	20055f04 	.word	0x20055f04
 8011854:	200563e0 	.word	0x200563e0
 8011858:	20055f08 	.word	0x20055f08

0801185c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801185c:	b580      	push	{r7, lr}
 801185e:	b088      	sub	sp, #32
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801186a:	2301      	movs	r3, #1
 801186c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d06e      	beq.n	8011952 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011878:	2b00      	cmp	r3, #0
 801187a:	d10c      	bne.n	8011896 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801187c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011880:	b672      	cpsid	i
 8011882:	f383 8811 	msr	BASEPRI, r3
 8011886:	f3bf 8f6f 	isb	sy
 801188a:	f3bf 8f4f 	dsb	sy
 801188e:	b662      	cpsie	i
 8011890:	60fb      	str	r3, [r7, #12]
}
 8011892:	bf00      	nop
 8011894:	e7fe      	b.n	8011894 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	429a      	cmp	r2, r3
 801189e:	d902      	bls.n	80118a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	61fb      	str	r3, [r7, #28]
 80118a4:	e002      	b.n	80118ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b0:	69fa      	ldr	r2, [r7, #28]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d04d      	beq.n	8011952 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ba:	697a      	ldr	r2, [r7, #20]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d148      	bne.n	8011952 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80118c0:	4b26      	ldr	r3, [pc, #152]	; (801195c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	69ba      	ldr	r2, [r7, #24]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d10c      	bne.n	80118e4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80118ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ce:	b672      	cpsid	i
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	b662      	cpsie	i
 80118de:	60bb      	str	r3, [r7, #8]
}
 80118e0:	bf00      	nop
 80118e2:	e7fe      	b.n	80118e2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	69fa      	ldr	r2, [r7, #28]
 80118ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	699b      	ldr	r3, [r3, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	db04      	blt.n	8011902 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	6959      	ldr	r1, [r3, #20]
 8011906:	693a      	ldr	r2, [r7, #16]
 8011908:	4613      	mov	r3, r2
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	4413      	add	r3, r2
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	4a13      	ldr	r2, [pc, #76]	; (8011960 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011912:	4413      	add	r3, r2
 8011914:	4299      	cmp	r1, r3
 8011916:	d11c      	bne.n	8011952 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	3304      	adds	r3, #4
 801191c:	4618      	mov	r0, r3
 801191e:	f7fd fdab 	bl	800f478 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011926:	4b0f      	ldr	r3, [pc, #60]	; (8011964 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	429a      	cmp	r2, r3
 801192c:	d903      	bls.n	8011936 <vTaskPriorityDisinheritAfterTimeout+0xda>
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011932:	4a0c      	ldr	r2, [pc, #48]	; (8011964 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011934:	6013      	str	r3, [r2, #0]
 8011936:	69bb      	ldr	r3, [r7, #24]
 8011938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193a:	4613      	mov	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4a07      	ldr	r2, [pc, #28]	; (8011960 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011944:	441a      	add	r2, r3
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	3304      	adds	r3, #4
 801194a:	4619      	mov	r1, r3
 801194c:	4610      	mov	r0, r2
 801194e:	f7fd fd36 	bl	800f3be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011952:	bf00      	nop
 8011954:	3720      	adds	r7, #32
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	20055f04 	.word	0x20055f04
 8011960:	20055f08 	.word	0x20055f08
 8011964:	200563e0 	.word	0x200563e0

08011968 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011968:	b480      	push	{r7}
 801196a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801196c:	4b07      	ldr	r3, [pc, #28]	; (801198c <pvTaskIncrementMutexHeldCount+0x24>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d004      	beq.n	801197e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011974:	4b05      	ldr	r3, [pc, #20]	; (801198c <pvTaskIncrementMutexHeldCount+0x24>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801197a:	3201      	adds	r2, #1
 801197c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801197e:	4b03      	ldr	r3, [pc, #12]	; (801198c <pvTaskIncrementMutexHeldCount+0x24>)
 8011980:	681b      	ldr	r3, [r3, #0]
	}
 8011982:	4618      	mov	r0, r3
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr
 801198c:	20055f04 	.word	0x20055f04

08011990 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801199a:	4b21      	ldr	r3, [pc, #132]	; (8011a20 <prvAddCurrentTaskToDelayedList+0x90>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119a0:	4b20      	ldr	r3, [pc, #128]	; (8011a24 <prvAddCurrentTaskToDelayedList+0x94>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	3304      	adds	r3, #4
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fd fd66 	bl	800f478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b2:	d10a      	bne.n	80119ca <prvAddCurrentTaskToDelayedList+0x3a>
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d007      	beq.n	80119ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119ba:	4b1a      	ldr	r3, [pc, #104]	; (8011a24 <prvAddCurrentTaskToDelayedList+0x94>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	3304      	adds	r3, #4
 80119c0:	4619      	mov	r1, r3
 80119c2:	4819      	ldr	r0, [pc, #100]	; (8011a28 <prvAddCurrentTaskToDelayedList+0x98>)
 80119c4:	f7fd fcfb 	bl	800f3be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80119c8:	e026      	b.n	8011a18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	4413      	add	r3, r2
 80119d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80119d2:	4b14      	ldr	r3, [pc, #80]	; (8011a24 <prvAddCurrentTaskToDelayedList+0x94>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d209      	bcs.n	80119f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119e2:	4b12      	ldr	r3, [pc, #72]	; (8011a2c <prvAddCurrentTaskToDelayedList+0x9c>)
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	4b0f      	ldr	r3, [pc, #60]	; (8011a24 <prvAddCurrentTaskToDelayedList+0x94>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	3304      	adds	r3, #4
 80119ec:	4619      	mov	r1, r3
 80119ee:	4610      	mov	r0, r2
 80119f0:	f7fd fd09 	bl	800f406 <vListInsert>
}
 80119f4:	e010      	b.n	8011a18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119f6:	4b0e      	ldr	r3, [pc, #56]	; (8011a30 <prvAddCurrentTaskToDelayedList+0xa0>)
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	4b0a      	ldr	r3, [pc, #40]	; (8011a24 <prvAddCurrentTaskToDelayedList+0x94>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	3304      	adds	r3, #4
 8011a00:	4619      	mov	r1, r3
 8011a02:	4610      	mov	r0, r2
 8011a04:	f7fd fcff 	bl	800f406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a08:	4b0a      	ldr	r3, [pc, #40]	; (8011a34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	68ba      	ldr	r2, [r7, #8]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d202      	bcs.n	8011a18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011a12:	4a08      	ldr	r2, [pc, #32]	; (8011a34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	6013      	str	r3, [r2, #0]
}
 8011a18:	bf00      	nop
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	200563dc 	.word	0x200563dc
 8011a24:	20055f04 	.word	0x20055f04
 8011a28:	200563c4 	.word	0x200563c4
 8011a2c:	20056394 	.word	0x20056394
 8011a30:	20056390 	.word	0x20056390
 8011a34:	200563f8 	.word	0x200563f8

08011a38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08a      	sub	sp, #40	; 0x28
 8011a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011a42:	f000 fb15 	bl	8012070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011a46:	4b1d      	ldr	r3, [pc, #116]	; (8011abc <xTimerCreateTimerTask+0x84>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d021      	beq.n	8011a92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011a52:	2300      	movs	r3, #0
 8011a54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011a56:	1d3a      	adds	r2, r7, #4
 8011a58:	f107 0108 	add.w	r1, r7, #8
 8011a5c:	f107 030c 	add.w	r3, r7, #12
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7fd fa81 	bl	800ef68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011a66:	6879      	ldr	r1, [r7, #4]
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	9202      	str	r2, [sp, #8]
 8011a6e:	9301      	str	r3, [sp, #4]
 8011a70:	2302      	movs	r3, #2
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	2300      	movs	r3, #0
 8011a76:	460a      	mov	r2, r1
 8011a78:	4911      	ldr	r1, [pc, #68]	; (8011ac0 <xTimerCreateTimerTask+0x88>)
 8011a7a:	4812      	ldr	r0, [pc, #72]	; (8011ac4 <xTimerCreateTimerTask+0x8c>)
 8011a7c:	f7fe ffb8 	bl	80109f0 <xTaskCreateStatic>
 8011a80:	4603      	mov	r3, r0
 8011a82:	4a11      	ldr	r2, [pc, #68]	; (8011ac8 <xTimerCreateTimerTask+0x90>)
 8011a84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011a86:	4b10      	ldr	r3, [pc, #64]	; (8011ac8 <xTimerCreateTimerTask+0x90>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d001      	beq.n	8011a92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10c      	bne.n	8011ab2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9c:	b672      	cpsid	i
 8011a9e:	f383 8811 	msr	BASEPRI, r3
 8011aa2:	f3bf 8f6f 	isb	sy
 8011aa6:	f3bf 8f4f 	dsb	sy
 8011aaa:	b662      	cpsie	i
 8011aac:	613b      	str	r3, [r7, #16]
}
 8011aae:	bf00      	nop
 8011ab0:	e7fe      	b.n	8011ab0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011ab2:	697b      	ldr	r3, [r7, #20]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3718      	adds	r7, #24
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	20056434 	.word	0x20056434
 8011ac0:	0802525c 	.word	0x0802525c
 8011ac4:	08011c09 	.word	0x08011c09
 8011ac8:	20056438 	.word	0x20056438

08011acc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b08a      	sub	sp, #40	; 0x28
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	607a      	str	r2, [r7, #4]
 8011ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011ada:	2300      	movs	r3, #0
 8011adc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10c      	bne.n	8011afe <xTimerGenericCommand+0x32>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	b672      	cpsid	i
 8011aea:	f383 8811 	msr	BASEPRI, r3
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	b662      	cpsie	i
 8011af8:	623b      	str	r3, [r7, #32]
}
 8011afa:	bf00      	nop
 8011afc:	e7fe      	b.n	8011afc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011afe:	4b1a      	ldr	r3, [pc, #104]	; (8011b68 <xTimerGenericCommand+0x9c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d02a      	beq.n	8011b5c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	2b05      	cmp	r3, #5
 8011b16:	dc18      	bgt.n	8011b4a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011b18:	f7ff fda8 	bl	801166c <xTaskGetSchedulerState>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b02      	cmp	r3, #2
 8011b20:	d109      	bne.n	8011b36 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011b22:	4b11      	ldr	r3, [pc, #68]	; (8011b68 <xTimerGenericCommand+0x9c>)
 8011b24:	6818      	ldr	r0, [r3, #0]
 8011b26:	f107 0110 	add.w	r1, r7, #16
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b2e:	f7fe f8cd 	bl	800fccc <xQueueGenericSend>
 8011b32:	6278      	str	r0, [r7, #36]	; 0x24
 8011b34:	e012      	b.n	8011b5c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011b36:	4b0c      	ldr	r3, [pc, #48]	; (8011b68 <xTimerGenericCommand+0x9c>)
 8011b38:	6818      	ldr	r0, [r3, #0]
 8011b3a:	f107 0110 	add.w	r1, r7, #16
 8011b3e:	2300      	movs	r3, #0
 8011b40:	2200      	movs	r2, #0
 8011b42:	f7fe f8c3 	bl	800fccc <xQueueGenericSend>
 8011b46:	6278      	str	r0, [r7, #36]	; 0x24
 8011b48:	e008      	b.n	8011b5c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011b4a:	4b07      	ldr	r3, [pc, #28]	; (8011b68 <xTimerGenericCommand+0x9c>)
 8011b4c:	6818      	ldr	r0, [r3, #0]
 8011b4e:	f107 0110 	add.w	r1, r7, #16
 8011b52:	2300      	movs	r3, #0
 8011b54:	683a      	ldr	r2, [r7, #0]
 8011b56:	f7fe f9bf 	bl	800fed8 <xQueueGenericSendFromISR>
 8011b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3728      	adds	r7, #40	; 0x28
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	20056434 	.word	0x20056434

08011b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b088      	sub	sp, #32
 8011b70:	af02      	add	r7, sp, #8
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b76:	4b23      	ldr	r3, [pc, #140]	; (8011c04 <prvProcessExpiredTimer+0x98>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	3304      	adds	r3, #4
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fd fc77 	bl	800f478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b90:	f003 0304 	and.w	r3, r3, #4
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d024      	beq.n	8011be2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	699a      	ldr	r2, [r3, #24]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	18d1      	adds	r1, r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	683a      	ldr	r2, [r7, #0]
 8011ba4:	6978      	ldr	r0, [r7, #20]
 8011ba6:	f000 f8d3 	bl	8011d50 <prvInsertTimerInActiveList>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d021      	beq.n	8011bf4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	2100      	movs	r1, #0
 8011bba:	6978      	ldr	r0, [r7, #20]
 8011bbc:	f7ff ff86 	bl	8011acc <xTimerGenericCommand>
 8011bc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d115      	bne.n	8011bf4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bcc:	b672      	cpsid	i
 8011bce:	f383 8811 	msr	BASEPRI, r3
 8011bd2:	f3bf 8f6f 	isb	sy
 8011bd6:	f3bf 8f4f 	dsb	sy
 8011bda:	b662      	cpsie	i
 8011bdc:	60fb      	str	r3, [r7, #12]
}
 8011bde:	bf00      	nop
 8011be0:	e7fe      	b.n	8011be0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011be8:	f023 0301 	bic.w	r3, r3, #1
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	6a1b      	ldr	r3, [r3, #32]
 8011bf8:	6978      	ldr	r0, [r7, #20]
 8011bfa:	4798      	blx	r3
}
 8011bfc:	bf00      	nop
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	2005642c 	.word	0x2005642c

08011c08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c10:	f107 0308 	add.w	r3, r7, #8
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 f857 	bl	8011cc8 <prvGetNextExpireTime>
 8011c1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	4619      	mov	r1, r3
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f000 f803 	bl	8011c2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011c26:	f000 f8d5 	bl	8011dd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c2a:	e7f1      	b.n	8011c10 <prvTimerTask+0x8>

08011c2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011c36:	f7ff f925 	bl	8010e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c3a:	f107 0308 	add.w	r3, r7, #8
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 f866 	bl	8011d10 <prvSampleTimeNow>
 8011c44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d130      	bne.n	8011cae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d10a      	bne.n	8011c68 <prvProcessTimerOrBlockTask+0x3c>
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d806      	bhi.n	8011c68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011c5a:	f7ff f921 	bl	8010ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011c5e:	68f9      	ldr	r1, [r7, #12]
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f7ff ff83 	bl	8011b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011c66:	e024      	b.n	8011cb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d008      	beq.n	8011c80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011c6e:	4b13      	ldr	r3, [pc, #76]	; (8011cbc <prvProcessTimerOrBlockTask+0x90>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d101      	bne.n	8011c7c <prvProcessTimerOrBlockTask+0x50>
 8011c78:	2301      	movs	r3, #1
 8011c7a:	e000      	b.n	8011c7e <prvProcessTimerOrBlockTask+0x52>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011c80:	4b0f      	ldr	r3, [pc, #60]	; (8011cc0 <prvProcessTimerOrBlockTask+0x94>)
 8011c82:	6818      	ldr	r0, [r3, #0]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	1ad3      	subs	r3, r2, r3
 8011c8a:	683a      	ldr	r2, [r7, #0]
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	f7fe fe7b 	bl	8010988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011c92:	f7ff f905 	bl	8010ea0 <xTaskResumeAll>
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d10a      	bne.n	8011cb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011c9c:	4b09      	ldr	r3, [pc, #36]	; (8011cc4 <prvProcessTimerOrBlockTask+0x98>)
 8011c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ca2:	601a      	str	r2, [r3, #0]
 8011ca4:	f3bf 8f4f 	dsb	sy
 8011ca8:	f3bf 8f6f 	isb	sy
}
 8011cac:	e001      	b.n	8011cb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011cae:	f7ff f8f7 	bl	8010ea0 <xTaskResumeAll>
}
 8011cb2:	bf00      	nop
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	20056430 	.word	0x20056430
 8011cc0:	20056434 	.word	0x20056434
 8011cc4:	e000ed04 	.word	0xe000ed04

08011cc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011cd0:	4b0e      	ldr	r3, [pc, #56]	; (8011d0c <prvGetNextExpireTime+0x44>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <prvGetNextExpireTime+0x16>
 8011cda:	2201      	movs	r2, #1
 8011cdc:	e000      	b.n	8011ce0 <prvGetNextExpireTime+0x18>
 8011cde:	2200      	movs	r2, #0
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d105      	bne.n	8011cf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011cec:	4b07      	ldr	r3, [pc, #28]	; (8011d0c <prvGetNextExpireTime+0x44>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	60fb      	str	r3, [r7, #12]
 8011cf6:	e001      	b.n	8011cfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3714      	adds	r7, #20
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	2005642c 	.word	0x2005642c

08011d10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011d18:	f7ff f962 	bl	8010fe0 <xTaskGetTickCount>
 8011d1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011d1e:	4b0b      	ldr	r3, [pc, #44]	; (8011d4c <prvSampleTimeNow+0x3c>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d205      	bcs.n	8011d34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011d28:	f000 f93c 	bl	8011fa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	601a      	str	r2, [r3, #0]
 8011d32:	e002      	b.n	8011d3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2200      	movs	r2, #0
 8011d38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011d3a:	4a04      	ldr	r2, [pc, #16]	; (8011d4c <prvSampleTimeNow+0x3c>)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011d40:	68fb      	ldr	r3, [r7, #12]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3710      	adds	r7, #16
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	2005643c 	.word	0x2005643c

08011d50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b086      	sub	sp, #24
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
 8011d5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011d6e:	68ba      	ldr	r2, [r7, #8]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d812      	bhi.n	8011d9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	1ad2      	subs	r2, r2, r3
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	699b      	ldr	r3, [r3, #24]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d302      	bcc.n	8011d8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011d84:	2301      	movs	r3, #1
 8011d86:	617b      	str	r3, [r7, #20]
 8011d88:	e01b      	b.n	8011dc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011d8a:	4b10      	ldr	r3, [pc, #64]	; (8011dcc <prvInsertTimerInActiveList+0x7c>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	3304      	adds	r3, #4
 8011d92:	4619      	mov	r1, r3
 8011d94:	4610      	mov	r0, r2
 8011d96:	f7fd fb36 	bl	800f406 <vListInsert>
 8011d9a:	e012      	b.n	8011dc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d206      	bcs.n	8011db2 <prvInsertTimerInActiveList+0x62>
 8011da4:	68ba      	ldr	r2, [r7, #8]
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d302      	bcc.n	8011db2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011dac:	2301      	movs	r3, #1
 8011dae:	617b      	str	r3, [r7, #20]
 8011db0:	e007      	b.n	8011dc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011db2:	4b07      	ldr	r3, [pc, #28]	; (8011dd0 <prvInsertTimerInActiveList+0x80>)
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	3304      	adds	r3, #4
 8011dba:	4619      	mov	r1, r3
 8011dbc:	4610      	mov	r0, r2
 8011dbe:	f7fd fb22 	bl	800f406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011dc2:	697b      	ldr	r3, [r7, #20]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3718      	adds	r7, #24
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	20056430 	.word	0x20056430
 8011dd0:	2005642c 	.word	0x2005642c

08011dd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b08e      	sub	sp, #56	; 0x38
 8011dd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011dda:	e0d0      	b.n	8011f7e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	da1a      	bge.n	8011e18 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011de2:	1d3b      	adds	r3, r7, #4
 8011de4:	3304      	adds	r3, #4
 8011de6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d10c      	bne.n	8011e08 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8011dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df2:	b672      	cpsid	i
 8011df4:	f383 8811 	msr	BASEPRI, r3
 8011df8:	f3bf 8f6f 	isb	sy
 8011dfc:	f3bf 8f4f 	dsb	sy
 8011e00:	b662      	cpsie	i
 8011e02:	61fb      	str	r3, [r7, #28]
}
 8011e04:	bf00      	nop
 8011e06:	e7fe      	b.n	8011e06 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e0e:	6850      	ldr	r0, [r2, #4]
 8011e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e12:	6892      	ldr	r2, [r2, #8]
 8011e14:	4611      	mov	r1, r2
 8011e16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f2c0 80ae 	blt.w	8011f7c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e26:	695b      	ldr	r3, [r3, #20]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d004      	beq.n	8011e36 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2e:	3304      	adds	r3, #4
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7fd fb21 	bl	800f478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e36:	463b      	mov	r3, r7
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff ff69 	bl	8011d10 <prvSampleTimeNow>
 8011e3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2b09      	cmp	r3, #9
 8011e44:	f200 809b 	bhi.w	8011f7e <prvProcessReceivedCommands+0x1aa>
 8011e48:	a201      	add	r2, pc, #4	; (adr r2, 8011e50 <prvProcessReceivedCommands+0x7c>)
 8011e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e4e:	bf00      	nop
 8011e50:	08011e79 	.word	0x08011e79
 8011e54:	08011e79 	.word	0x08011e79
 8011e58:	08011e79 	.word	0x08011e79
 8011e5c:	08011ef1 	.word	0x08011ef1
 8011e60:	08011f05 	.word	0x08011f05
 8011e64:	08011f53 	.word	0x08011f53
 8011e68:	08011e79 	.word	0x08011e79
 8011e6c:	08011e79 	.word	0x08011e79
 8011e70:	08011ef1 	.word	0x08011ef1
 8011e74:	08011f05 	.word	0x08011f05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e7e:	f043 0301 	orr.w	r3, r3, #1
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e8e:	699b      	ldr	r3, [r3, #24]
 8011e90:	18d1      	adds	r1, r2, r3
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e98:	f7ff ff5a 	bl	8011d50 <prvInsertTimerInActiveList>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d06d      	beq.n	8011f7e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	6a1b      	ldr	r3, [r3, #32]
 8011ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ea8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011eb0:	f003 0304 	and.w	r3, r3, #4
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d062      	beq.n	8011f7e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	441a      	add	r2, r3
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eca:	f7ff fdff 	bl	8011acc <xTimerGenericCommand>
 8011ece:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011ed0:	6a3b      	ldr	r3, [r7, #32]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d153      	bne.n	8011f7e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8011ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eda:	b672      	cpsid	i
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	b662      	cpsie	i
 8011eea:	61bb      	str	r3, [r7, #24]
}
 8011eec:	bf00      	nop
 8011eee:	e7fe      	b.n	8011eee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ef6:	f023 0301 	bic.w	r3, r3, #1
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011f02:	e03c      	b.n	8011f7e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f0a:	f043 0301 	orr.w	r3, r3, #1
 8011f0e:	b2da      	uxtb	r2, r3
 8011f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1e:	699b      	ldr	r3, [r3, #24]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d10c      	bne.n	8011f3e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8011f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f28:	b672      	cpsid	i
 8011f2a:	f383 8811 	msr	BASEPRI, r3
 8011f2e:	f3bf 8f6f 	isb	sy
 8011f32:	f3bf 8f4f 	dsb	sy
 8011f36:	b662      	cpsie	i
 8011f38:	617b      	str	r3, [r7, #20]
}
 8011f3a:	bf00      	nop
 8011f3c:	e7fe      	b.n	8011f3c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f40:	699a      	ldr	r2, [r3, #24]
 8011f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f44:	18d1      	adds	r1, r2, r3
 8011f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f4c:	f7ff ff00 	bl	8011d50 <prvInsertTimerInActiveList>
					break;
 8011f50:	e015      	b.n	8011f7e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f58:	f003 0302 	and.w	r3, r3, #2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d103      	bne.n	8011f68 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8011f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f62:	f7fd f8e5 	bl	800f130 <vPortFree>
 8011f66:	e00a      	b.n	8011f7e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f6e:	f023 0301 	bic.w	r3, r3, #1
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011f7a:	e000      	b.n	8011f7e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011f7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011f7e:	4b08      	ldr	r3, [pc, #32]	; (8011fa0 <prvProcessReceivedCommands+0x1cc>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	1d39      	adds	r1, r7, #4
 8011f84:	2200      	movs	r2, #0
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fe f8dc 	bl	8010144 <xQueueReceive>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f47f af24 	bne.w	8011ddc <prvProcessReceivedCommands+0x8>
	}
}
 8011f94:	bf00      	nop
 8011f96:	bf00      	nop
 8011f98:	3730      	adds	r7, #48	; 0x30
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20056434 	.word	0x20056434

08011fa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011faa:	e04a      	b.n	8012042 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011fac:	4b2e      	ldr	r3, [pc, #184]	; (8012068 <prvSwitchTimerLists+0xc4>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fb6:	4b2c      	ldr	r3, [pc, #176]	; (8012068 <prvSwitchTimerLists+0xc4>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	3304      	adds	r3, #4
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fd fa57 	bl	800f478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	6a1b      	ldr	r3, [r3, #32]
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fd8:	f003 0304 	and.w	r3, r3, #4
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d030      	beq.n	8012042 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	699b      	ldr	r3, [r3, #24]
 8011fe4:	693a      	ldr	r2, [r7, #16]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011fea:	68ba      	ldr	r2, [r7, #8]
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d90e      	bls.n	8012010 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	68ba      	ldr	r2, [r7, #8]
 8011ff6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011ffe:	4b1a      	ldr	r3, [pc, #104]	; (8012068 <prvSwitchTimerLists+0xc4>)
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	3304      	adds	r3, #4
 8012006:	4619      	mov	r1, r3
 8012008:	4610      	mov	r0, r2
 801200a:	f7fd f9fc 	bl	800f406 <vListInsert>
 801200e:	e018      	b.n	8012042 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012010:	2300      	movs	r3, #0
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	2300      	movs	r3, #0
 8012016:	693a      	ldr	r2, [r7, #16]
 8012018:	2100      	movs	r1, #0
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	f7ff fd56 	bl	8011acc <xTimerGenericCommand>
 8012020:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d10c      	bne.n	8012042 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8012028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202c:	b672      	cpsid	i
 801202e:	f383 8811 	msr	BASEPRI, r3
 8012032:	f3bf 8f6f 	isb	sy
 8012036:	f3bf 8f4f 	dsb	sy
 801203a:	b662      	cpsie	i
 801203c:	603b      	str	r3, [r7, #0]
}
 801203e:	bf00      	nop
 8012040:	e7fe      	b.n	8012040 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012042:	4b09      	ldr	r3, [pc, #36]	; (8012068 <prvSwitchTimerLists+0xc4>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d1af      	bne.n	8011fac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801204c:	4b06      	ldr	r3, [pc, #24]	; (8012068 <prvSwitchTimerLists+0xc4>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012052:	4b06      	ldr	r3, [pc, #24]	; (801206c <prvSwitchTimerLists+0xc8>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a04      	ldr	r2, [pc, #16]	; (8012068 <prvSwitchTimerLists+0xc4>)
 8012058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801205a:	4a04      	ldr	r2, [pc, #16]	; (801206c <prvSwitchTimerLists+0xc8>)
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	6013      	str	r3, [r2, #0]
}
 8012060:	bf00      	nop
 8012062:	3718      	adds	r7, #24
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	2005642c 	.word	0x2005642c
 801206c:	20056430 	.word	0x20056430

08012070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012076:	f7fd fb39 	bl	800f6ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801207a:	4b15      	ldr	r3, [pc, #84]	; (80120d0 <prvCheckForValidListAndQueue+0x60>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d120      	bne.n	80120c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012082:	4814      	ldr	r0, [pc, #80]	; (80120d4 <prvCheckForValidListAndQueue+0x64>)
 8012084:	f7fd f96e 	bl	800f364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012088:	4813      	ldr	r0, [pc, #76]	; (80120d8 <prvCheckForValidListAndQueue+0x68>)
 801208a:	f7fd f96b 	bl	800f364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801208e:	4b13      	ldr	r3, [pc, #76]	; (80120dc <prvCheckForValidListAndQueue+0x6c>)
 8012090:	4a10      	ldr	r2, [pc, #64]	; (80120d4 <prvCheckForValidListAndQueue+0x64>)
 8012092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012094:	4b12      	ldr	r3, [pc, #72]	; (80120e0 <prvCheckForValidListAndQueue+0x70>)
 8012096:	4a10      	ldr	r2, [pc, #64]	; (80120d8 <prvCheckForValidListAndQueue+0x68>)
 8012098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801209a:	2300      	movs	r3, #0
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	4b11      	ldr	r3, [pc, #68]	; (80120e4 <prvCheckForValidListAndQueue+0x74>)
 80120a0:	4a11      	ldr	r2, [pc, #68]	; (80120e8 <prvCheckForValidListAndQueue+0x78>)
 80120a2:	2110      	movs	r1, #16
 80120a4:	200a      	movs	r0, #10
 80120a6:	f7fd fcb7 	bl	800fa18 <xQueueGenericCreateStatic>
 80120aa:	4603      	mov	r3, r0
 80120ac:	4a08      	ldr	r2, [pc, #32]	; (80120d0 <prvCheckForValidListAndQueue+0x60>)
 80120ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80120b0:	4b07      	ldr	r3, [pc, #28]	; (80120d0 <prvCheckForValidListAndQueue+0x60>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d005      	beq.n	80120c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80120b8:	4b05      	ldr	r3, [pc, #20]	; (80120d0 <prvCheckForValidListAndQueue+0x60>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	490b      	ldr	r1, [pc, #44]	; (80120ec <prvCheckForValidListAndQueue+0x7c>)
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fe fc0e 	bl	80108e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80120c4:	f7fd fb46 	bl	800f754 <vPortExitCritical>
}
 80120c8:	bf00      	nop
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	20056434 	.word	0x20056434
 80120d4:	20056404 	.word	0x20056404
 80120d8:	20056418 	.word	0x20056418
 80120dc:	2005642c 	.word	0x2005642c
 80120e0:	20056430 	.word	0x20056430
 80120e4:	200564e0 	.word	0x200564e0
 80120e8:	20056440 	.word	0x20056440
 80120ec:	08025264 	.word	0x08025264

080120f0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80120f0:	8880      	ldrh	r0, [r0, #4]
 80120f2:	4770      	bx	lr

080120f4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80120f4:	2300      	movs	r3, #0
 80120f6:	8083      	strh	r3, [r0, #4]
 80120f8:	4770      	bx	lr
	...

080120fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80120fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fe:	6803      	ldr	r3, [r0, #0]
 8012100:	460e      	mov	r6, r1
 8012102:	2100      	movs	r1, #0
 8012104:	4605      	mov	r5, r0
 8012106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012108:	4798      	blx	r3
 801210a:	4604      	mov	r4, r0
 801210c:	682b      	ldr	r3, [r5, #0]
 801210e:	4628      	mov	r0, r5
 8012110:	1b34      	subs	r4, r6, r4
 8012112:	6a1b      	ldr	r3, [r3, #32]
 8012114:	b2a4      	uxth	r4, r4
 8012116:	4798      	blx	r3
 8012118:	88ab      	ldrh	r3, [r5, #4]
 801211a:	fbb4 f4f0 	udiv	r4, r4, r0
 801211e:	42a3      	cmp	r3, r4
 8012120:	d805      	bhi.n	801212e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8012122:	4b0e      	ldr	r3, [pc, #56]	; (801215c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8012124:	211e      	movs	r1, #30
 8012126:	4a0e      	ldr	r2, [pc, #56]	; (8012160 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012128:	480e      	ldr	r0, [pc, #56]	; (8012164 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801212a:	f011 f86b 	bl	8023204 <__assert_func>
 801212e:	682b      	ldr	r3, [r5, #0]
 8012130:	2100      	movs	r1, #0
 8012132:	4628      	mov	r0, r5
 8012134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012136:	4798      	blx	r3
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	4607      	mov	r7, r0
 801213c:	4628      	mov	r0, r5
 801213e:	6a1b      	ldr	r3, [r3, #32]
 8012140:	4798      	blx	r3
 8012142:	1bf3      	subs	r3, r6, r7
 8012144:	b29b      	uxth	r3, r3
 8012146:	fbb3 f2f0 	udiv	r2, r3, r0
 801214a:	fb02 3010 	mls	r0, r2, r0, r3
 801214e:	b118      	cbz	r0, 8012158 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8012150:	4b05      	ldr	r3, [pc, #20]	; (8012168 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8012152:	211f      	movs	r1, #31
 8012154:	4a02      	ldr	r2, [pc, #8]	; (8012160 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012156:	e7e7      	b.n	8012128 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8012158:	4620      	mov	r0, r4
 801215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801215c:	08025c38 	.word	0x08025c38
 8012160:	08025da6 	.word	0x08025da6
 8012164:	08025c4d 	.word	0x08025c4d
 8012168:	08025c7b 	.word	0x08025c7b

0801216c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	6803      	ldr	r3, [r0, #0]
 8012170:	460d      	mov	r5, r1
 8012172:	4604      	mov	r4, r0
 8012174:	6a1b      	ldr	r3, [r3, #32]
 8012176:	4798      	blx	r3
 8012178:	4285      	cmp	r5, r0
 801217a:	d905      	bls.n	8012188 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801217c:	4b0c      	ldr	r3, [pc, #48]	; (80121b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801217e:	2130      	movs	r1, #48	; 0x30
 8012180:	4a0c      	ldr	r2, [pc, #48]	; (80121b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012182:	480d      	ldr	r0, [pc, #52]	; (80121b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8012184:	f011 f83e 	bl	8023204 <__assert_func>
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	4620      	mov	r0, r4
 801218c:	88a5      	ldrh	r5, [r4, #4]
 801218e:	69db      	ldr	r3, [r3, #28]
 8012190:	4798      	blx	r3
 8012192:	4285      	cmp	r5, r0
 8012194:	d303      	bcc.n	801219e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8012196:	4b09      	ldr	r3, [pc, #36]	; (80121bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8012198:	2131      	movs	r1, #49	; 0x31
 801219a:	4a06      	ldr	r2, [pc, #24]	; (80121b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801219c:	e7f1      	b.n	8012182 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801219e:	6823      	ldr	r3, [r4, #0]
 80121a0:	4620      	mov	r0, r4
 80121a2:	88a1      	ldrh	r1, [r4, #4]
 80121a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a6:	4798      	blx	r3
 80121a8:	88a3      	ldrh	r3, [r4, #4]
 80121aa:	3301      	adds	r3, #1
 80121ac:	80a3      	strh	r3, [r4, #4]
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	08025cf5 	.word	0x08025cf5
 80121b4:	08025de9 	.word	0x08025de9
 80121b8:	08025c4d 	.word	0x08025c4d
 80121bc:	08025d0c 	.word	0x08025d0c

080121c0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	6803      	ldr	r3, [r0, #0]
 80121c4:	4616      	mov	r6, r2
 80121c6:	4604      	mov	r4, r0
 80121c8:	460d      	mov	r5, r1
 80121ca:	6a1b      	ldr	r3, [r3, #32]
 80121cc:	4798      	blx	r3
 80121ce:	4286      	cmp	r6, r0
 80121d0:	d905      	bls.n	80121de <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80121d2:	4b06      	ldr	r3, [pc, #24]	; (80121ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80121d4:	213a      	movs	r1, #58	; 0x3a
 80121d6:	4a06      	ldr	r2, [pc, #24]	; (80121f0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80121d8:	4806      	ldr	r0, [pc, #24]	; (80121f4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80121da:	f011 f813 	bl	8023204 <__assert_func>
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	4629      	mov	r1, r5
 80121e2:	4620      	mov	r0, r4
 80121e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121ea:	4718      	bx	r3
 80121ec:	08025cf5 	.word	0x08025cf5
 80121f0:	08025d5c 	.word	0x08025d5c
 80121f4:	08025c4d 	.word	0x08025c4d

080121f8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80121f8:	4770      	bx	lr
	...

080121fc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80121fc:	4a02      	ldr	r2, [pc, #8]	; (8012208 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80121fe:	6002      	str	r2, [r0, #0]
 8012200:	2200      	movs	r2, #0
 8012202:	8082      	strh	r2, [r0, #4]
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop
 8012208:	08025d30 	.word	0x08025d30

0801220c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801220c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801220e:	2000      	movs	r0, #0
 8012210:	b12b      	cbz	r3, 801221e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012212:	b920      	cbnz	r0, 801221e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012214:	1a5a      	subs	r2, r3, r1
 8012216:	699b      	ldr	r3, [r3, #24]
 8012218:	4250      	negs	r0, r2
 801221a:	4150      	adcs	r0, r2
 801221c:	e7f8      	b.n	8012210 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801221e:	4770      	bx	lr

08012220 <_ZN8touchgfx9Container9removeAllEv>:
 8012220:	2200      	movs	r2, #0
 8012222:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012224:	b123      	cbz	r3, 8012230 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012226:	6999      	ldr	r1, [r3, #24]
 8012228:	6281      	str	r1, [r0, #40]	; 0x28
 801222a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801222e:	e7f8      	b.n	8012222 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012230:	4770      	bx	lr

08012232 <_ZN8touchgfx9Container6unlinkEv>:
 8012232:	2300      	movs	r3, #0
 8012234:	6283      	str	r3, [r0, #40]	; 0x28
 8012236:	4770      	bx	lr

08012238 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223c:	461f      	mov	r7, r3
 801223e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012242:	460d      	mov	r5, r1
 8012244:	4616      	mov	r6, r2
 8012246:	b103      	cbz	r3, 801224a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012248:	6038      	str	r0, [r7, #0]
 801224a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801224c:	b314      	cbz	r4, 8012294 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801224e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012252:	b1eb      	cbz	r3, 8012290 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012254:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012258:	428d      	cmp	r5, r1
 801225a:	db19      	blt.n	8012290 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801225c:	b289      	uxth	r1, r1
 801225e:	8923      	ldrh	r3, [r4, #8]
 8012260:	440b      	add	r3, r1
 8012262:	b21b      	sxth	r3, r3
 8012264:	429d      	cmp	r5, r3
 8012266:	da13      	bge.n	8012290 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012268:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801226c:	4296      	cmp	r6, r2
 801226e:	db0f      	blt.n	8012290 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012270:	b292      	uxth	r2, r2
 8012272:	8963      	ldrh	r3, [r4, #10]
 8012274:	4413      	add	r3, r2
 8012276:	b21b      	sxth	r3, r3
 8012278:	429e      	cmp	r6, r3
 801227a:	da09      	bge.n	8012290 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	1ab2      	subs	r2, r6, r2
 8012280:	1a69      	subs	r1, r5, r1
 8012282:	4620      	mov	r0, r4
 8012284:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8012288:	b212      	sxth	r2, r2
 801228a:	463b      	mov	r3, r7
 801228c:	b209      	sxth	r1, r1
 801228e:	47c0      	blx	r8
 8012290:	69a4      	ldr	r4, [r4, #24]
 8012292:	e7db      	b.n	801224c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012298 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012298:	2200      	movs	r2, #0
 801229a:	8002      	strh	r2, [r0, #0]
 801229c:	8042      	strh	r2, [r0, #2]
 801229e:	8082      	strh	r2, [r0, #4]
 80122a0:	80c2      	strh	r2, [r0, #6]
 80122a2:	4770      	bx	lr

080122a4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80122a4:	b570      	push	{r4, r5, r6, lr}
 80122a6:	460d      	mov	r5, r1
 80122a8:	4616      	mov	r6, r2
 80122aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80122ac:	b13c      	cbz	r4, 80122be <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	4620      	mov	r0, r4
 80122b2:	4632      	mov	r2, r6
 80122b4:	4629      	mov	r1, r5
 80122b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122b8:	4798      	blx	r3
 80122ba:	69a4      	ldr	r4, [r4, #24]
 80122bc:	e7f6      	b.n	80122ac <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80122be:	bd70      	pop	{r4, r5, r6, pc}

080122c0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80122c0:	b538      	push	{r3, r4, r5, lr}
 80122c2:	460d      	mov	r5, r1
 80122c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80122c6:	b134      	cbz	r4, 80122d6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80122c8:	682b      	ldr	r3, [r5, #0]
 80122ca:	4621      	mov	r1, r4
 80122cc:	4628      	mov	r0, r5
 80122ce:	689b      	ldr	r3, [r3, #8]
 80122d0:	4798      	blx	r3
 80122d2:	69a4      	ldr	r4, [r4, #24]
 80122d4:	e7f7      	b.n	80122c6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80122d6:	bd38      	pop	{r3, r4, r5, pc}

080122d8 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80122d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80122da:	b19b      	cbz	r3, 8012304 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80122dc:	428b      	cmp	r3, r1
 80122de:	d109      	bne.n	80122f4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80122e0:	699a      	ldr	r2, [r3, #24]
 80122e2:	2100      	movs	r1, #0
 80122e4:	6159      	str	r1, [r3, #20]
 80122e6:	6282      	str	r2, [r0, #40]	; 0x28
 80122e8:	b902      	cbnz	r2, 80122ec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80122ea:	4770      	bx	lr
 80122ec:	6199      	str	r1, [r3, #24]
 80122ee:	4770      	bx	lr
 80122f0:	4613      	mov	r3, r2
 80122f2:	b13a      	cbz	r2, 8012304 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80122f4:	699a      	ldr	r2, [r3, #24]
 80122f6:	428a      	cmp	r2, r1
 80122f8:	d1fa      	bne.n	80122f0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80122fa:	698a      	ldr	r2, [r1, #24]
 80122fc:	619a      	str	r2, [r3, #24]
 80122fe:	2300      	movs	r3, #0
 8012300:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012304:	4770      	bx	lr

08012306 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012306:	b410      	push	{r4}
 8012308:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801230a:	4604      	mov	r4, r0
 801230c:	b92b      	cbnz	r3, 801231a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801230e:	6803      	ldr	r3, [r0, #0]
 8012310:	4611      	mov	r1, r2
 8012312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012318:	4718      	bx	r3
 801231a:	b941      	cbnz	r1, 801232e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801231c:	6193      	str	r3, [r2, #24]
 801231e:	6282      	str	r2, [r0, #40]	; 0x28
 8012320:	6154      	str	r4, [r2, #20]
 8012322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012326:	4770      	bx	lr
 8012328:	4603      	mov	r3, r0
 801232a:	2800      	cmp	r0, #0
 801232c:	d0f9      	beq.n	8012322 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801232e:	4299      	cmp	r1, r3
 8012330:	6998      	ldr	r0, [r3, #24]
 8012332:	d1f9      	bne.n	8012328 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012334:	6190      	str	r0, [r2, #24]
 8012336:	618a      	str	r2, [r1, #24]
 8012338:	e7f2      	b.n	8012320 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801233c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801233c:	4288      	cmp	r0, r1
 801233e:	b508      	push	{r3, lr}
 8012340:	d105      	bne.n	801234e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8012342:	4b11      	ldr	r3, [pc, #68]	; (8012388 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8012344:	2121      	movs	r1, #33	; 0x21
 8012346:	4a11      	ldr	r2, [pc, #68]	; (801238c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012348:	4811      	ldr	r0, [pc, #68]	; (8012390 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801234a:	f010 ff5b 	bl	8023204 <__assert_func>
 801234e:	694b      	ldr	r3, [r1, #20]
 8012350:	b11b      	cbz	r3, 801235a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8012352:	4b10      	ldr	r3, [pc, #64]	; (8012394 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8012354:	2122      	movs	r1, #34	; 0x22
 8012356:	4a0d      	ldr	r2, [pc, #52]	; (801238c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012358:	e7f6      	b.n	8012348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801235a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801235e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012360:	b913      	cbnz	r3, 8012368 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8012362:	6281      	str	r1, [r0, #40]	; 0x28
 8012364:	bd08      	pop	{r3, pc}
 8012366:	4613      	mov	r3, r2
 8012368:	699a      	ldr	r2, [r3, #24]
 801236a:	b12a      	cbz	r2, 8012378 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801236c:	428b      	cmp	r3, r1
 801236e:	d1fa      	bne.n	8012366 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8012370:	4b09      	ldr	r3, [pc, #36]	; (8012398 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8012372:	2133      	movs	r1, #51	; 0x33
 8012374:	4a05      	ldr	r2, [pc, #20]	; (801238c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012376:	e7e7      	b.n	8012348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012378:	428b      	cmp	r3, r1
 801237a:	d103      	bne.n	8012384 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801237c:	4b06      	ldr	r3, [pc, #24]	; (8012398 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801237e:	2136      	movs	r1, #54	; 0x36
 8012380:	4a02      	ldr	r2, [pc, #8]	; (801238c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012382:	e7e1      	b.n	8012348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012384:	6199      	str	r1, [r3, #24]
 8012386:	e7ed      	b.n	8012364 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8012388:	08025e27 	.word	0x08025e27
 801238c:	08025f78 	.word	0x08025f78
 8012390:	08025e53 	.word	0x08025e53
 8012394:	08025e86 	.word	0x08025e86
 8012398:	08025ebc 	.word	0x08025ebc

0801239c <_ZN8touchgfx4RectaNERKS0_>:
 801239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123a0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80123a4:	888c      	ldrh	r4, [r1, #4]
 80123a6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80123aa:	443c      	add	r4, r7
 80123ac:	b2a4      	uxth	r4, r4
 80123ae:	fa0f f884 	sxth.w	r8, r4
 80123b2:	45c1      	cmp	r9, r8
 80123b4:	da2f      	bge.n	8012416 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123b6:	8882      	ldrh	r2, [r0, #4]
 80123b8:	444a      	add	r2, r9
 80123ba:	b292      	uxth	r2, r2
 80123bc:	fa0f fe82 	sxth.w	lr, r2
 80123c0:	4577      	cmp	r7, lr
 80123c2:	da28      	bge.n	8012416 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123c4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80123c8:	88cb      	ldrh	r3, [r1, #6]
 80123ca:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80123ce:	442b      	add	r3, r5
 80123d0:	b21b      	sxth	r3, r3
 80123d2:	429e      	cmp	r6, r3
 80123d4:	da1f      	bge.n	8012416 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123d6:	88c3      	ldrh	r3, [r0, #6]
 80123d8:	4433      	add	r3, r6
 80123da:	b29b      	uxth	r3, r3
 80123dc:	fa0f fc83 	sxth.w	ip, r3
 80123e0:	4565      	cmp	r5, ip
 80123e2:	da18      	bge.n	8012416 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123e4:	454f      	cmp	r7, r9
 80123e6:	bfb8      	it	lt
 80123e8:	464f      	movlt	r7, r9
 80123ea:	42b5      	cmp	r5, r6
 80123ec:	bfb8      	it	lt
 80123ee:	4635      	movlt	r5, r6
 80123f0:	45f0      	cmp	r8, lr
 80123f2:	bfd8      	it	le
 80123f4:	4622      	movle	r2, r4
 80123f6:	1bd2      	subs	r2, r2, r7
 80123f8:	8082      	strh	r2, [r0, #4]
 80123fa:	884a      	ldrh	r2, [r1, #2]
 80123fc:	88c9      	ldrh	r1, [r1, #6]
 80123fe:	8007      	strh	r7, [r0, #0]
 8012400:	440a      	add	r2, r1
 8012402:	8045      	strh	r5, [r0, #2]
 8012404:	b292      	uxth	r2, r2
 8012406:	b211      	sxth	r1, r2
 8012408:	458c      	cmp	ip, r1
 801240a:	bfa8      	it	ge
 801240c:	4613      	movge	r3, r2
 801240e:	1b5b      	subs	r3, r3, r5
 8012410:	80c3      	strh	r3, [r0, #6]
 8012412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012416:	2300      	movs	r3, #0
 8012418:	8003      	strh	r3, [r0, #0]
 801241a:	8043      	strh	r3, [r0, #2]
 801241c:	8083      	strh	r3, [r0, #4]
 801241e:	80c3      	strh	r3, [r0, #6]
 8012420:	e7f7      	b.n	8012412 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012422 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012422:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	dd06      	ble.n	8012438 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801242a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801242e:	2800      	cmp	r0, #0
 8012430:	bfcc      	ite	gt
 8012432:	2000      	movgt	r0, #0
 8012434:	2001      	movle	r0, #1
 8012436:	4770      	bx	lr
 8012438:	2001      	movs	r0, #1
 801243a:	4770      	bx	lr

0801243c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012440:	2300      	movs	r3, #0
 8012442:	4604      	mov	r4, r0
 8012444:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012446:	8003      	strh	r3, [r0, #0]
 8012448:	8043      	strh	r3, [r0, #2]
 801244a:	8083      	strh	r3, [r0, #4]
 801244c:	80c3      	strh	r3, [r0, #6]
 801244e:	2d00      	cmp	r5, #0
 8012450:	d040      	beq.n	80124d4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012452:	1d28      	adds	r0, r5, #4
 8012454:	f7ff ffe5 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012458:	b988      	cbnz	r0, 801247e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801245a:	4620      	mov	r0, r4
 801245c:	f7ff ffe1 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012460:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012464:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012468:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801246c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012470:	b138      	cbz	r0, 8012482 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012472:	8022      	strh	r2, [r4, #0]
 8012474:	8063      	strh	r3, [r4, #2]
 8012476:	f8a4 e004 	strh.w	lr, [r4, #4]
 801247a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801247e:	69ad      	ldr	r5, [r5, #24]
 8012480:	e7e5      	b.n	801244e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012482:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012486:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801248a:	4290      	cmp	r0, r2
 801248c:	4607      	mov	r7, r0
 801248e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012492:	460e      	mov	r6, r1
 8012494:	bfa8      	it	ge
 8012496:	4617      	movge	r7, r2
 8012498:	4299      	cmp	r1, r3
 801249a:	4472      	add	r2, lr
 801249c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80124a0:	bfa8      	it	ge
 80124a2:	461e      	movge	r6, r3
 80124a4:	4440      	add	r0, r8
 80124a6:	4471      	add	r1, lr
 80124a8:	4463      	add	r3, ip
 80124aa:	b200      	sxth	r0, r0
 80124ac:	8027      	strh	r7, [r4, #0]
 80124ae:	b212      	sxth	r2, r2
 80124b0:	8066      	strh	r6, [r4, #2]
 80124b2:	b209      	sxth	r1, r1
 80124b4:	b21b      	sxth	r3, r3
 80124b6:	4290      	cmp	r0, r2
 80124b8:	bfac      	ite	ge
 80124ba:	ebc7 0200 	rsbge	r2, r7, r0
 80124be:	ebc7 0202 	rsblt	r2, r7, r2
 80124c2:	4299      	cmp	r1, r3
 80124c4:	bfac      	ite	ge
 80124c6:	ebc6 0301 	rsbge	r3, r6, r1
 80124ca:	ebc6 0303 	rsblt	r3, r6, r3
 80124ce:	80a2      	strh	r2, [r4, #4]
 80124d0:	80e3      	strh	r3, [r4, #6]
 80124d2:	e7d4      	b.n	801247e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80124d4:	4620      	mov	r0, r4
 80124d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124da <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80124da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80124de:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80124e2:	b383      	cbz	r3, 8012546 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80124e4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80124e6:	b374      	cbz	r4, 8012546 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80124e8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80124ec:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80124f0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80124f4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80124f8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80124fc:	b303      	cbz	r3, 8012540 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80124fe:	4668      	mov	r0, sp
 8012500:	1d21      	adds	r1, r4, #4
 8012502:	f8ad 5000 	strh.w	r5, [sp]
 8012506:	f8ad 6002 	strh.w	r6, [sp, #2]
 801250a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801250e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012512:	f7ff ff43 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 8012516:	4668      	mov	r0, sp
 8012518:	f7ff ff83 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 801251c:	b980      	cbnz	r0, 8012540 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801251e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012522:	4669      	mov	r1, sp
 8012524:	88a2      	ldrh	r2, [r4, #4]
 8012526:	4620      	mov	r0, r4
 8012528:	1a9b      	subs	r3, r3, r2
 801252a:	88e2      	ldrh	r2, [r4, #6]
 801252c:	f8ad 3000 	strh.w	r3, [sp]
 8012530:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012534:	1a9b      	subs	r3, r3, r2
 8012536:	f8ad 3002 	strh.w	r3, [sp, #2]
 801253a:	6823      	ldr	r3, [r4, #0]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	4798      	blx	r3
 8012540:	69a4      	ldr	r4, [r4, #24]
 8012542:	2c00      	cmp	r4, #0
 8012544:	d1d8      	bne.n	80124f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012546:	b002      	add	sp, #8
 8012548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801254c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801254c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801254e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012552:	460d      	mov	r5, r1
 8012554:	4616      	mov	r6, r2
 8012556:	b323      	cbz	r3, 80125a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012558:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801255a:	b314      	cbz	r4, 80125a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801255c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012560:	b1eb      	cbz	r3, 801259e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012562:	6828      	ldr	r0, [r5, #0]
 8012564:	466b      	mov	r3, sp
 8012566:	6869      	ldr	r1, [r5, #4]
 8012568:	c303      	stmia	r3!, {r0, r1}
 801256a:	4668      	mov	r0, sp
 801256c:	1d21      	adds	r1, r4, #4
 801256e:	f7ff ff15 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 8012572:	4668      	mov	r0, sp
 8012574:	f7ff ff55 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012578:	b988      	cbnz	r0, 801259e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801257a:	f8bd 3000 	ldrh.w	r3, [sp]
 801257e:	4669      	mov	r1, sp
 8012580:	88a2      	ldrh	r2, [r4, #4]
 8012582:	4620      	mov	r0, r4
 8012584:	1a9b      	subs	r3, r3, r2
 8012586:	88e2      	ldrh	r2, [r4, #6]
 8012588:	f8ad 3000 	strh.w	r3, [sp]
 801258c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012590:	1a9b      	subs	r3, r3, r2
 8012592:	4632      	mov	r2, r6
 8012594:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012598:	6823      	ldr	r3, [r4, #0]
 801259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801259c:	4798      	blx	r3
 801259e:	69a4      	ldr	r4, [r4, #24]
 80125a0:	e7db      	b.n	801255a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80125a2:	b002      	add	sp, #8
 80125a4:	bd70      	pop	{r4, r5, r6, pc}

080125a6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80125a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80125aa:	4770      	bx	lr

080125ac <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80125ac:	4770      	bx	lr

080125ae <_ZN8touchgfx3HAL10FlushCacheEv>:
 80125ae:	4770      	bx	lr

080125b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80125b0:	6803      	ldr	r3, [r0, #0]
 80125b2:	b513      	push	{r0, r1, r4, lr}
 80125b4:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 80125b8:	2300      	movs	r3, #0
 80125ba:	e9cd 3300 	strd	r3, r3, [sp]
 80125be:	466b      	mov	r3, sp
 80125c0:	47a0      	blx	r4
 80125c2:	b002      	add	sp, #8
 80125c4:	bd10      	pop	{r4, pc}

080125c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80125c6:	2301      	movs	r3, #1
 80125c8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80125cc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80125d0:	4770      	bx	lr

080125d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80125d2:	2301      	movs	r3, #1
 80125d4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80125d8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80125dc:	4770      	bx	lr

080125de <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80125de:	6843      	ldr	r3, [r0, #4]
 80125e0:	2201      	movs	r2, #1
 80125e2:	725a      	strb	r2, [r3, #9]
 80125e4:	6840      	ldr	r0, [r0, #4]
 80125e6:	6803      	ldr	r3, [r0, #0]
 80125e8:	691b      	ldr	r3, [r3, #16]
 80125ea:	4718      	bx	r3

080125ec <_ZN8touchgfx3HAL8flushDMAEv>:
 80125ec:	6840      	ldr	r0, [r0, #4]
 80125ee:	6803      	ldr	r3, [r0, #0]
 80125f0:	689b      	ldr	r3, [r3, #8]
 80125f2:	4718      	bx	r3

080125f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80125f4:	b530      	push	{r4, r5, lr}
 80125f6:	b08b      	sub	sp, #44	; 0x2c
 80125f8:	6804      	ldr	r4, [r0, #0]
 80125fa:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80125fe:	9508      	str	r5, [sp, #32]
 8012600:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8012604:	9507      	str	r5, [sp, #28]
 8012606:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801260a:	9506      	str	r5, [sp, #24]
 801260c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012610:	9505      	str	r5, [sp, #20]
 8012612:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012616:	9504      	str	r5, [sp, #16]
 8012618:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801261c:	9503      	str	r5, [sp, #12]
 801261e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012622:	9502      	str	r5, [sp, #8]
 8012624:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012628:	e9cd 3500 	strd	r3, r5, [sp]
 801262c:	4613      	mov	r3, r2
 801262e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012630:	2200      	movs	r2, #0
 8012632:	47a0      	blx	r4
 8012634:	b00b      	add	sp, #44	; 0x2c
 8012636:	bd30      	pop	{r4, r5, pc}

08012638 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012638:	4b04      	ldr	r3, [pc, #16]	; (801264c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	b123      	cbz	r3, 8012648 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801263e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012642:	f080 0001 	eor.w	r0, r0, #1
 8012646:	4770      	bx	lr
 8012648:	2001      	movs	r0, #1
 801264a:	4770      	bx	lr
 801264c:	2005653a 	.word	0x2005653a

08012650 <_ZN8touchgfx3HAL8endFrameEv>:
 8012650:	b510      	push	{r4, lr}
 8012652:	4604      	mov	r4, r0
 8012654:	6840      	ldr	r0, [r0, #4]
 8012656:	6803      	ldr	r3, [r0, #0]
 8012658:	689b      	ldr	r3, [r3, #8]
 801265a:	4798      	blx	r3
 801265c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012660:	b113      	cbz	r3, 8012668 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012662:	2301      	movs	r3, #1
 8012664:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012668:	bd10      	pop	{r4, pc}

0801266a <_ZN8touchgfx3HAL10initializeEv>:
 801266a:	b510      	push	{r4, lr}
 801266c:	4604      	mov	r4, r0
 801266e:	f7ef ff79 	bl	8002564 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012672:	6860      	ldr	r0, [r4, #4]
 8012674:	6803      	ldr	r3, [r0, #0]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	4798      	blx	r3
 801267a:	68e0      	ldr	r0, [r4, #12]
 801267c:	6803      	ldr	r3, [r0, #0]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	4798      	blx	r3
 8012682:	6823      	ldr	r3, [r4, #0]
 8012684:	4620      	mov	r0, r4
 8012686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801268c:	4718      	bx	r3

0801268e <_ZN8touchgfx3HAL9taskEntryEv>:
 801268e:	b508      	push	{r3, lr}
 8012690:	6803      	ldr	r3, [r0, #0]
 8012692:	4604      	mov	r4, r0
 8012694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012696:	4798      	blx	r3
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801269c:	4620      	mov	r0, r4
 801269e:	4798      	blx	r3
 80126a0:	f7ef ffd6 	bl	8002650 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126a8:	e7f8      	b.n	801269c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080126ac <_ZN8touchgfx3HAL4tickEv>:
 80126ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80126ae:	6803      	ldr	r3, [r0, #0]
 80126b0:	4604      	mov	r4, r0
 80126b2:	4d5c      	ldr	r5, [pc, #368]	; (8012824 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80126b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80126b8:	4798      	blx	r3
 80126ba:	2800      	cmp	r0, #0
 80126bc:	f000 8097 	beq.w	80127ee <_ZN8touchgfx3HAL4tickEv+0x142>
 80126c0:	2001      	movs	r0, #1
 80126c2:	2600      	movs	r6, #0
 80126c4:	f7ef fd20 	bl	8002108 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80126c8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80126cc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80126d0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80126d4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80126d8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80126dc:	b133      	cbz	r3, 80126ec <_ZN8touchgfx3HAL4tickEv+0x40>
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	4620      	mov	r0, r4
 80126e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80126e6:	4798      	blx	r3
 80126e8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80126ec:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80126f0:	2601      	movs	r6, #1
 80126f2:	6862      	ldr	r2, [r4, #4]
 80126f4:	f083 0301 	eor.w	r3, r3, #1
 80126f8:	702e      	strb	r6, [r5, #0]
 80126fa:	7253      	strb	r3, [r2, #9]
 80126fc:	f003 fcac 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 8012700:	6803      	ldr	r3, [r0, #0]
 8012702:	4631      	mov	r1, r6
 8012704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012706:	4798      	blx	r3
 8012708:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801270c:	b90b      	cbnz	r3, 8012712 <_ZN8touchgfx3HAL4tickEv+0x66>
 801270e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8012712:	f003 fca1 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 8012716:	6803      	ldr	r3, [r0, #0]
 8012718:	695b      	ldr	r3, [r3, #20]
 801271a:	4798      	blx	r3
 801271c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801271e:	6803      	ldr	r3, [r0, #0]
 8012720:	691b      	ldr	r3, [r3, #16]
 8012722:	4798      	blx	r3
 8012724:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012728:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801272c:	3b01      	subs	r3, #1
 801272e:	b2db      	uxtb	r3, r3
 8012730:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012734:	b10a      	cbz	r2, 801273a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1eb      	bne.n	8012712 <_ZN8touchgfx3HAL4tickEv+0x66>
 801273a:	4a3b      	ldr	r2, [pc, #236]	; (8012828 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801273c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8012740:	7813      	ldrb	r3, [r2, #0]
 8012742:	3301      	adds	r3, #1
 8012744:	b25b      	sxtb	r3, r3
 8012746:	4299      	cmp	r1, r3
 8012748:	7013      	strb	r3, [r2, #0]
 801274a:	dc10      	bgt.n	801276e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801274c:	2300      	movs	r3, #0
 801274e:	68e0      	ldr	r0, [r4, #12]
 8012750:	a902      	add	r1, sp, #8
 8012752:	7013      	strb	r3, [r2, #0]
 8012754:	aa03      	add	r2, sp, #12
 8012756:	6803      	ldr	r3, [r0, #0]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	4798      	blx	r3
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	2800      	cmp	r0, #0
 8012760:	d051      	beq.n	8012806 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8012762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012766:	4620      	mov	r0, r4
 8012768:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801276c:	4798      	blx	r3
 801276e:	2300      	movs	r3, #0
 8012770:	6960      	ldr	r0, [r4, #20]
 8012772:	f88d 3007 	strb.w	r3, [sp, #7]
 8012776:	b158      	cbz	r0, 8012790 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8012778:	6803      	ldr	r3, [r0, #0]
 801277a:	f10d 0107 	add.w	r1, sp, #7
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	4798      	blx	r3
 8012782:	b128      	cbz	r0, 8012790 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8012784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012786:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801278a:	6803      	ldr	r3, [r0, #0]
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	4798      	blx	r3
 8012790:	f104 001c 	add.w	r0, r4, #28
 8012794:	f00e ff5e 	bl	8021654 <_ZN8touchgfx8Gestures4tickEv>
 8012798:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801279c:	b30b      	cbz	r3, 80127e2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801279e:	6920      	ldr	r0, [r4, #16]
 80127a0:	6803      	ldr	r3, [r0, #0]
 80127a2:	691b      	ldr	r3, [r3, #16]
 80127a4:	4798      	blx	r3
 80127a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80127a8:	4606      	mov	r6, r0
 80127aa:	b903      	cbnz	r3, 80127ae <_ZN8touchgfx3HAL4tickEv+0x102>
 80127ac:	6720      	str	r0, [r4, #112]	; 0x70
 80127ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80127b0:	4a1e      	ldr	r2, [pc, #120]	; (801282c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80127b2:	1af3      	subs	r3, r6, r3
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d914      	bls.n	80127e2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80127b8:	6920      	ldr	r0, [r4, #16]
 80127ba:	6803      	ldr	r3, [r0, #0]
 80127bc:	699b      	ldr	r3, [r3, #24]
 80127be:	4798      	blx	r3
 80127c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80127c2:	2264      	movs	r2, #100	; 0x64
 80127c4:	1af3      	subs	r3, r6, r3
 80127c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80127ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80127ce:	2800      	cmp	r0, #0
 80127d0:	dc1e      	bgt.n	8012810 <_ZN8touchgfx3HAL4tickEv+0x164>
 80127d2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80127d6:	6920      	ldr	r0, [r4, #16]
 80127d8:	2100      	movs	r1, #0
 80127da:	6803      	ldr	r3, [r0, #0]
 80127dc:	69db      	ldr	r3, [r3, #28]
 80127de:	4798      	blx	r3
 80127e0:	6726      	str	r6, [r4, #112]	; 0x70
 80127e2:	f003 fc39 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 80127e6:	6803      	ldr	r3, [r0, #0]
 80127e8:	2100      	movs	r1, #0
 80127ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ec:	4798      	blx	r3
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	4620      	mov	r0, r4
 80127f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80127f6:	4798      	blx	r3
 80127f8:	2001      	movs	r0, #1
 80127fa:	f7ef fc90 	bl	800211e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80127fe:	2300      	movs	r3, #0
 8012800:	702b      	strb	r3, [r5, #0]
 8012802:	b004      	add	sp, #16
 8012804:	bd70      	pop	{r4, r5, r6, pc}
 8012806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801280a:	4620      	mov	r0, r4
 801280c:	4798      	blx	r3
 801280e:	e7ae      	b.n	801276e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8012810:	2863      	cmp	r0, #99	; 0x63
 8012812:	bfcb      	itete	gt
 8012814:	2300      	movgt	r3, #0
 8012816:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801281a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801281e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8012822:	e7d8      	b.n	80127d6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8012824:	20056540 	.word	0x20056540
 8012828:	20056541 	.word	0x20056541
 801282c:	05f5e100 	.word	0x05f5e100

08012830 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012830:	f7ef beda 	b.w	80025e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012834 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012834:	6581      	str	r1, [r0, #88]	; 0x58
 8012836:	301c      	adds	r0, #28
 8012838:	f00e bf0a 	b.w	8021650 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801283c <_ZN8touchgfx3HAL5touchEll>:
 801283c:	b530      	push	{r4, r5, lr}
 801283e:	b087      	sub	sp, #28
 8012840:	4604      	mov	r4, r0
 8012842:	a804      	add	r0, sp, #16
 8012844:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012848:	f003 f9f2 	bl	8015c30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801284c:	9b04      	ldr	r3, [sp, #16]
 801284e:	a906      	add	r1, sp, #24
 8012850:	a803      	add	r0, sp, #12
 8012852:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012856:	9b05      	ldr	r3, [sp, #20]
 8012858:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801285c:	f003 fa26 	bl	8015cac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012860:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8012864:	f104 001c 	add.w	r0, r4, #28
 8012868:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801286c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012870:	b189      	cbz	r1, 8012896 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012872:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8012876:	9300      	str	r3, [sp, #0]
 8012878:	4613      	mov	r3, r2
 801287a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801287e:	462a      	mov	r2, r5
 8012880:	f00e fef6 	bl	8021670 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012884:	b128      	cbz	r0, 8012892 <_ZN8touchgfx3HAL5touchEll+0x56>
 8012886:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801288a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801288c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012890:	6623      	str	r3, [r4, #96]	; 0x60
 8012892:	b007      	add	sp, #28
 8012894:	bd30      	pop	{r4, r5, pc}
 8012896:	f00e ff2f 	bl	80216f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801289a:	2301      	movs	r3, #1
 801289c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80128a0:	e7f1      	b.n	8012886 <_ZN8touchgfx3HAL5touchEll+0x4a>

080128a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80128a2:	b570      	push	{r4, r5, r6, lr}
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d050      	beq.n	801294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80128a8:	ea81 0002 	eor.w	r0, r1, r2
 80128ac:	07c6      	lsls	r6, r0, #31
 80128ae:	d508      	bpl.n	80128c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80128b0:	3a01      	subs	r2, #1
 80128b2:	18cc      	adds	r4, r1, r3
 80128b4:	42a1      	cmp	r1, r4
 80128b6:	d048      	beq.n	801294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80128b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80128bc:	f801 0b01 	strb.w	r0, [r1], #1
 80128c0:	e7f8      	b.n	80128b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80128c2:	07d5      	lsls	r5, r2, #31
 80128c4:	bf42      	ittt	mi
 80128c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80128ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80128ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80128d2:	2b01      	cmp	r3, #1
 80128d4:	d915      	bls.n	8012902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80128d6:	ea82 0001 	eor.w	r0, r2, r1
 80128da:	0784      	lsls	r4, r0, #30
 80128dc:	d02d      	beq.n	801293a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80128de:	1e94      	subs	r4, r2, #2
 80128e0:	4608      	mov	r0, r1
 80128e2:	18ce      	adds	r6, r1, r3
 80128e4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80128e8:	f820 5b02 	strh.w	r5, [r0], #2
 80128ec:	1a35      	subs	r5, r6, r0
 80128ee:	2d01      	cmp	r5, #1
 80128f0:	d8f8      	bhi.n	80128e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80128f2:	1e98      	subs	r0, r3, #2
 80128f4:	f003 0301 	and.w	r3, r3, #1
 80128f8:	f020 0001 	bic.w	r0, r0, #1
 80128fc:	3002      	adds	r0, #2
 80128fe:	4401      	add	r1, r0
 8012900:	4402      	add	r2, r0
 8012902:	1f14      	subs	r4, r2, #4
 8012904:	4608      	mov	r0, r1
 8012906:	18ce      	adds	r6, r1, r3
 8012908:	1a35      	subs	r5, r6, r0
 801290a:	2d03      	cmp	r5, #3
 801290c:	d810      	bhi.n	8012930 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801290e:	089c      	lsrs	r4, r3, #2
 8012910:	00a0      	lsls	r0, r4, #2
 8012912:	4401      	add	r1, r0
 8012914:	3801      	subs	r0, #1
 8012916:	4402      	add	r2, r0
 8012918:	f06f 0003 	mvn.w	r0, #3
 801291c:	fb00 3404 	mla	r4, r0, r4, r3
 8012920:	440c      	add	r4, r1
 8012922:	42a1      	cmp	r1, r4
 8012924:	d011      	beq.n	801294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8012926:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801292a:	f801 3b01 	strb.w	r3, [r1], #1
 801292e:	e7f8      	b.n	8012922 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8012930:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8012934:	f840 5b04 	str.w	r5, [r0], #4
 8012938:	e7e6      	b.n	8012908 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801293a:	0790      	lsls	r0, r2, #30
 801293c:	d0e1      	beq.n	8012902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801293e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012942:	3b02      	subs	r3, #2
 8012944:	f821 0b02 	strh.w	r0, [r1], #2
 8012948:	e7db      	b.n	8012902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801294a:	2001      	movs	r0, #1
 801294c:	bd70      	pop	{r4, r5, r6, pc}

0801294e <_ZN8touchgfx3HAL7noTouchEv>:
 801294e:	b510      	push	{r4, lr}
 8012950:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8012954:	4604      	mov	r4, r0
 8012956:	b153      	cbz	r3, 801296e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012958:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801295c:	2101      	movs	r1, #1
 801295e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8012962:	301c      	adds	r0, #28
 8012964:	f00e fec8 	bl	80216f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012968:	2300      	movs	r3, #0
 801296a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801296e:	bd10      	pop	{r4, pc}

08012970 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012974:	4604      	mov	r4, r0
 8012976:	6980      	ldr	r0, [r0, #24]
 8012978:	b085      	sub	sp, #20
 801297a:	460f      	mov	r7, r1
 801297c:	4690      	mov	r8, r2
 801297e:	4699      	mov	r9, r3
 8012980:	b930      	cbnz	r0, 8012990 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8012982:	4b1c      	ldr	r3, [pc, #112]	; (80129f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8012984:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8012988:	4a1b      	ldr	r2, [pc, #108]	; (80129f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801298a:	481c      	ldr	r0, [pc, #112]	; (80129fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801298c:	f010 fc3a 	bl	8023204 <__assert_func>
 8012990:	ad04      	add	r5, sp, #16
 8012992:	2600      	movs	r6, #0
 8012994:	f845 6d04 	str.w	r6, [r5, #-4]!
 8012998:	6806      	ldr	r6, [r0, #0]
 801299a:	9501      	str	r5, [sp, #4]
 801299c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80129a0:	9500      	str	r5, [sp, #0]
 80129a2:	6835      	ldr	r5, [r6, #0]
 80129a4:	47a8      	blx	r5
 80129a6:	4d16      	ldr	r5, [pc, #88]	; (8012a00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80129a8:	4606      	mov	r6, r0
 80129aa:	f8a5 9000 	strh.w	r9, [r5]
 80129ae:	f7f2 f901 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80129b2:	6803      	ldr	r3, [r0, #0]
 80129b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b6:	4798      	blx	r3
 80129b8:	2801      	cmp	r0, #1
 80129ba:	d012      	beq.n	80129e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80129bc:	d306      	bcc.n	80129cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80129be:	280d      	cmp	r0, #13
 80129c0:	d80b      	bhi.n	80129da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80129c2:	4b10      	ldr	r3, [pc, #64]	; (8012a04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80129c4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80129c8:	4a0b      	ldr	r2, [pc, #44]	; (80129f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80129ca:	e7de      	b.n	801298a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80129cc:	882b      	ldrh	r3, [r5, #0]
 80129ce:	fb08 7203 	mla	r2, r8, r3, r7
 80129d2:	9b03      	ldr	r3, [sp, #12]
 80129d4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80129d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80129da:	4630      	mov	r0, r6
 80129dc:	b005      	add	sp, #20
 80129de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129e2:	882a      	ldrh	r2, [r5, #0]
 80129e4:	9b03      	ldr	r3, [sp, #12]
 80129e6:	fb08 7202 	mla	r2, r8, r2, r7
 80129ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80129ee:	1a9a      	subs	r2, r3, r2
 80129f0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80129f2:	e7f2      	b.n	80129da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80129f4:	08026120 	.word	0x08026120
 80129f8:	080264a5 	.word	0x080264a5
 80129fc:	08026165 	.word	0x08026165
 8012a00:	20056536 	.word	0x20056536
 8012a04:	0802618b 	.word	0x0802618b

08012a08 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8012a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a0a:	b08b      	sub	sp, #44	; 0x2c
 8012a0c:	4617      	mov	r7, r2
 8012a0e:	4604      	mov	r4, r0
 8012a10:	460e      	mov	r6, r1
 8012a12:	461d      	mov	r5, r3
 8012a14:	f7f2 f8ce 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8012a18:	6803      	ldr	r3, [r0, #0]
 8012a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a1c:	4798      	blx	r3
 8012a1e:	4b0f      	ldr	r3, [pc, #60]	; (8012a5c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8012a20:	6822      	ldr	r2, [r4, #0]
 8012a22:	4631      	mov	r1, r6
 8012a24:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	9306      	str	r3, [sp, #24]
 8012a2e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012a32:	9305      	str	r3, [sp, #20]
 8012a34:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012a38:	9304      	str	r3, [sp, #16]
 8012a3a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012a3e:	9303      	str	r3, [sp, #12]
 8012a40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012a44:	9302      	str	r3, [sp, #8]
 8012a46:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012a4a:	e9cd 5300 	strd	r5, r3, [sp]
 8012a4e:	463b      	mov	r3, r7
 8012a50:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8012a52:	2200      	movs	r2, #0
 8012a54:	47a8      	blx	r5
 8012a56:	b00b      	add	sp, #44	; 0x2c
 8012a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	20056536 	.word	0x20056536

08012a60 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8012a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a64:	4698      	mov	r8, r3
 8012a66:	6803      	ldr	r3, [r0, #0]
 8012a68:	b08b      	sub	sp, #44	; 0x2c
 8012a6a:	4617      	mov	r7, r2
 8012a6c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8012a6e:	460e      	mov	r6, r1
 8012a70:	4b11      	ldr	r3, [pc, #68]	; (8012ab8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8012a72:	4604      	mov	r4, r0
 8012a74:	f8b3 9000 	ldrh.w	r9, [r3]
 8012a78:	f7f2 f89c 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8012a7c:	6803      	ldr	r3, [r0, #0]
 8012a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a80:	4798      	blx	r3
 8012a82:	2302      	movs	r3, #2
 8012a84:	9008      	str	r0, [sp, #32]
 8012a86:	2200      	movs	r2, #0
 8012a88:	4631      	mov	r1, r6
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012a90:	2301      	movs	r3, #1
 8012a92:	9305      	str	r3, [sp, #20]
 8012a94:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012a98:	9304      	str	r3, [sp, #16]
 8012a9a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012a9e:	9303      	str	r3, [sp, #12]
 8012aa0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012aa4:	9302      	str	r3, [sp, #8]
 8012aa6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012aaa:	e9cd 8300 	strd	r8, r3, [sp]
 8012aae:	463b      	mov	r3, r7
 8012ab0:	47a8      	blx	r5
 8012ab2:	b00b      	add	sp, #44	; 0x2c
 8012ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ab8:	20056536 	.word	0x20056536

08012abc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8012abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ac0:	4698      	mov	r8, r3
 8012ac2:	6803      	ldr	r3, [r0, #0]
 8012ac4:	b087      	sub	sp, #28
 8012ac6:	460e      	mov	r6, r1
 8012ac8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8012aca:	4617      	mov	r7, r2
 8012acc:	4b0d      	ldr	r3, [pc, #52]	; (8012b04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8012ace:	4604      	mov	r4, r0
 8012ad0:	f8b3 9000 	ldrh.w	r9, [r3]
 8012ad4:	f7f2 f86e 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8012ad8:	6803      	ldr	r3, [r0, #0]
 8012ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012adc:	4798      	blx	r3
 8012ade:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012ae2:	463a      	mov	r2, r7
 8012ae4:	4631      	mov	r1, r6
 8012ae6:	9302      	str	r3, [sp, #8]
 8012ae8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012aec:	9301      	str	r3, [sp, #4]
 8012aee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012af2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8012af6:	9300      	str	r3, [sp, #0]
 8012af8:	4620      	mov	r0, r4
 8012afa:	4643      	mov	r3, r8
 8012afc:	47a8      	blx	r5
 8012afe:	b007      	add	sp, #28
 8012b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b04:	20056536 	.word	0x20056536

08012b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	b08f      	sub	sp, #60	; 0x3c
 8012b10:	4610      	mov	r0, r2
 8012b12:	460d      	mov	r5, r1
 8012b14:	4691      	mov	r9, r2
 8012b16:	461e      	mov	r6, r3
 8012b18:	f006 fabc 	bl	8019094 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	f000 80b3 	beq.w	8012c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8012b22:	6823      	ldr	r3, [r4, #0]
 8012b24:	4620      	mov	r0, r4
 8012b26:	f8df b190 	ldr.w	fp, [pc, #400]	; 8012cb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 8012b2a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b30:	4798      	blx	r3
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	4620      	mov	r0, r4
 8012b36:	f8df a184 	ldr.w	sl, [pc, #388]	; 8012cbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8012b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b3c:	4798      	blx	r3
 8012b3e:	f8bb 3000 	ldrh.w	r3, [fp]
 8012b42:	4f5a      	ldr	r7, [pc, #360]	; (8012cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8012b44:	9300      	str	r3, [sp, #0]
 8012b46:	f8ba 3000 	ldrh.w	r3, [sl]
 8012b4a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012b4e:	4640      	mov	r0, r8
 8012b50:	9301      	str	r3, [sp, #4]
 8012b52:	883b      	ldrh	r3, [r7, #0]
 8012b54:	9302      	str	r3, [sp, #8]
 8012b56:	4b56      	ldr	r3, [pc, #344]	; (8012cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8012b58:	881a      	ldrh	r2, [r3, #0]
 8012b5a:	9304      	str	r3, [sp, #16]
 8012b5c:	9203      	str	r2, [sp, #12]
 8012b5e:	f006 fb53 	bl	8019208 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012b62:	8038      	strh	r0, [r7, #0]
 8012b64:	4640      	mov	r0, r8
 8012b66:	f006 fb89 	bl	801927c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012b6a:	9b04      	ldr	r3, [sp, #16]
 8012b6c:	8018      	strh	r0, [r3, #0]
 8012b6e:	4b51      	ldr	r3, [pc, #324]	; (8012cb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f040 808b 	bne.w	8012c8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 8012b78:	883b      	ldrh	r3, [r7, #0]
 8012b7a:	f8aa 0000 	strh.w	r0, [sl]
 8012b7e:	f8ab 3000 	strh.w	r3, [fp]
 8012b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012b84:	4648      	mov	r0, r9
 8012b86:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8012b88:	9304      	str	r3, [sp, #16]
 8012b8a:	f006 fa83 	bl	8019094 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012b8e:	2200      	movs	r2, #0
 8012b90:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012b94:	4611      	mov	r1, r2
 8012b96:	4628      	mov	r0, r5
 8012b98:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012b9c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012ba0:	f7f2 fdea 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012baa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012bae:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	dd71      	ble.n	8012c9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8012bb6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	dd6d      	ble.n	8012c9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8012bbe:	462a      	mov	r2, r5
 8012bc0:	ab0a      	add	r3, sp, #40	; 0x28
 8012bc2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012bc6:	6851      	ldr	r1, [r2, #4]
 8012bc8:	c303      	stmia	r3!, {r0, r1}
 8012bca:	4631      	mov	r1, r6
 8012bcc:	a80a      	add	r0, sp, #40	; 0x28
 8012bce:	f7ff fbe5 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 8012bd2:	4b36      	ldr	r3, [pc, #216]	; (8012cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8012bd4:	2600      	movs	r6, #0
 8012bd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bda:	4b35      	ldr	r3, [pc, #212]	; (8012cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8012bdc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012be0:	aa0a      	add	r2, sp, #40	; 0x28
 8012be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012be6:	960c      	str	r6, [sp, #48]	; 0x30
 8012be8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012bec:	ab08      	add	r3, sp, #32
 8012bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	a90c      	add	r1, sp, #48	; 0x30
 8012bfa:	f7ff fbcf 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 8012bfe:	a807      	add	r0, sp, #28
 8012c00:	f006 fc00 	bl	8019404 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012c04:	4680      	mov	r8, r0
 8012c06:	f7f1 ffd5 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8012c0a:	6802      	ldr	r2, [r0, #0]
 8012c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c0e:	4790      	blx	r2
 8012c10:	4580      	cmp	r8, r0
 8012c12:	d049      	beq.n	8012ca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8012c14:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012c16:	b150      	cbz	r0, 8012c2e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8012c18:	a807      	add	r0, sp, #28
 8012c1a:	f006 fbf3 	bl	8019404 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012c1e:	4606      	mov	r6, r0
 8012c20:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012c22:	6803      	ldr	r3, [r0, #0]
 8012c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c26:	4798      	blx	r3
 8012c28:	1a33      	subs	r3, r6, r0
 8012c2a:	4258      	negs	r0, r3
 8012c2c:	4158      	adcs	r0, r3
 8012c2e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8012c32:	2600      	movs	r6, #0
 8012c34:	696b      	ldr	r3, [r5, #20]
 8012c36:	a908      	add	r1, sp, #32
 8012c38:	682a      	ldr	r2, [r5, #0]
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	9305      	str	r3, [sp, #20]
 8012c3e:	616e      	str	r6, [r5, #20]
 8012c40:	6892      	ldr	r2, [r2, #8]
 8012c42:	4790      	blx	r2
 8012c44:	9b05      	ldr	r3, [sp, #20]
 8012c46:	4652      	mov	r2, sl
 8012c48:	4649      	mov	r1, r9
 8012c4a:	616b      	str	r3, [r5, #20]
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8012c52:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8012c56:	f7f2 fd8f 	bl	8005778 <_ZN8touchgfx8Drawable5setXYEss>
 8012c5a:	9b04      	ldr	r3, [sp, #16]
 8012c5c:	9a00      	ldr	r2, [sp, #0]
 8012c5e:	4620      	mov	r0, r4
 8012c60:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 8012c64:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012c66:	801a      	strh	r2, [r3, #0]
 8012c68:	9a01      	ldr	r2, [sp, #4]
 8012c6a:	4b14      	ldr	r3, [pc, #80]	; (8012cbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012c6c:	801a      	strh	r2, [r3, #0]
 8012c6e:	9a02      	ldr	r2, [sp, #8]
 8012c70:	4b0e      	ldr	r3, [pc, #56]	; (8012cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8012c72:	801a      	strh	r2, [r3, #0]
 8012c74:	4b0e      	ldr	r3, [pc, #56]	; (8012cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8012c76:	9a03      	ldr	r2, [sp, #12]
 8012c78:	801a      	strh	r2, [r3, #0]
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c7e:	4798      	blx	r3
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	4620      	mov	r0, r4
 8012c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c86:	4798      	blx	r3
 8012c88:	b00f      	add	sp, #60	; 0x3c
 8012c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8e:	883b      	ldrh	r3, [r7, #0]
 8012c90:	f8ab 0000 	strh.w	r0, [fp]
 8012c94:	f8aa 3000 	strh.w	r3, [sl]
 8012c98:	e773      	b.n	8012b82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012c9a:	462a      	mov	r2, r5
 8012c9c:	ab0a      	add	r3, sp, #40	; 0x28
 8012c9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012ca2:	6851      	ldr	r1, [r2, #4]
 8012ca4:	c303      	stmia	r3!, {r0, r1}
 8012ca6:	e794      	b.n	8012bd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8012ca8:	4630      	mov	r0, r6
 8012caa:	e7c0      	b.n	8012c2e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8012cac:	20056530 	.word	0x20056530
 8012cb0:	20056532 	.word	0x20056532
 8012cb4:	20056534 	.word	0x20056534
 8012cb8:	20056536 	.word	0x20056536
 8012cbc:	20056538 	.word	0x20056538

08012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012cc0:	4b07      	ldr	r3, [pc, #28]	; (8012ce0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012cc2:	b510      	push	{r4, lr}
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	b13b      	cbz	r3, 8012cda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012cca:	6803      	ldr	r3, [r0, #0]
 8012ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cce:	4798      	blx	r3
 8012cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012cd2:	4283      	cmp	r3, r0
 8012cd4:	d101      	bne.n	8012cda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012cd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012cd8:	bd10      	pop	{r4, pc}
 8012cda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012cdc:	e7fc      	b.n	8012cd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012cde:	bf00      	nop
 8012ce0:	2005653a 	.word	0x2005653a

08012ce4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce8:	b088      	sub	sp, #32
 8012cea:	4692      	mov	sl, r2
 8012cec:	461c      	mov	r4, r3
 8012cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cf2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8012cf6:	2500      	movs	r5, #0
 8012cf8:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8012d02:	fb09 a404 	mla	r4, r9, r4, sl
 8012d06:	9503      	str	r5, [sp, #12]
 8012d08:	f8ad 8014 	strh.w	r8, [sp, #20]
 8012d0c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012d10:	f88d 501c 	strb.w	r5, [sp, #28]
 8012d14:	e9cd 3100 	strd	r3, r1, [sp]
 8012d18:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012d1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012d20:	f7ff ffce 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012d24:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012d28:	f8ad 901a 	strh.w	r9, [sp, #26]
 8012d2c:	f88d 501e 	strb.w	r5, [sp, #30]
 8012d30:	9404      	str	r4, [sp, #16]
 8012d32:	f88d 501d 	strb.w	r5, [sp, #29]
 8012d36:	f1b8 0f00 	cmp.w	r8, #0
 8012d3a:	d000      	beq.n	8012d3e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 8012d3c:	b937      	cbnz	r7, 8012d4c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 8012d3e:	4b0d      	ldr	r3, [pc, #52]	; (8012d74 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 8012d40:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012d44:	4a0c      	ldr	r2, [pc, #48]	; (8012d78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8012d46:	480d      	ldr	r0, [pc, #52]	; (8012d7c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8012d48:	f010 fa5c 	bl	8023204 <__assert_func>
 8012d4c:	6833      	ldr	r3, [r6, #0]
 8012d4e:	4630      	mov	r0, r6
 8012d50:	9c00      	ldr	r4, [sp, #0]
 8012d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d54:	4798      	blx	r3
 8012d56:	4220      	tst	r0, r4
 8012d58:	d104      	bne.n	8012d64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 8012d5a:	4b09      	ldr	r3, [pc, #36]	; (8012d80 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8012d5c:	f240 2105 	movw	r1, #517	; 0x205
 8012d60:	4a05      	ldr	r2, [pc, #20]	; (8012d78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8012d62:	e7f0      	b.n	8012d46 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8012d64:	6870      	ldr	r0, [r6, #4]
 8012d66:	4669      	mov	r1, sp
 8012d68:	6803      	ldr	r3, [r0, #0]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	4798      	blx	r3
 8012d6e:	b008      	add	sp, #32
 8012d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d74:	08025fb3 	.word	0x08025fb3
 8012d78:	080262e0 	.word	0x080262e0
 8012d7c:	08026165 	.word	0x08026165
 8012d80:	08025feb 	.word	0x08025feb

08012d84 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d88:	b089      	sub	sp, #36	; 0x24
 8012d8a:	4693      	mov	fp, r2
 8012d8c:	461d      	mov	r5, r3
 8012d8e:	2400      	movs	r4, #0
 8012d90:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8012d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d98:	468a      	mov	sl, r1
 8012d9a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8012d9e:	fb09 b505 	mla	r5, r9, r5, fp
 8012da2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8012da6:	4606      	mov	r6, r0
 8012da8:	9403      	str	r4, [sp, #12]
 8012daa:	e9cd 3400 	strd	r3, r4, [sp]
 8012dae:	f7ff ff87 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012db2:	f8ad 8014 	strh.w	r8, [sp, #20]
 8012db6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012dba:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012dbe:	f8ad 4018 	strh.w	r4, [sp, #24]
 8012dc2:	9504      	str	r5, [sp, #16]
 8012dc4:	f8ad 901a 	strh.w	r9, [sp, #26]
 8012dc8:	f8cd a00c 	str.w	sl, [sp, #12]
 8012dcc:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012dd0:	f88d 401e 	strb.w	r4, [sp, #30]
 8012dd4:	f1b8 0f00 	cmp.w	r8, #0
 8012dd8:	d000      	beq.n	8012ddc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 8012dda:	b937      	cbnz	r7, 8012dea <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8012ddc:	4b0d      	ldr	r3, [pc, #52]	; (8012e14 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8012dde:	f240 2119 	movw	r1, #537	; 0x219
 8012de2:	4a0d      	ldr	r2, [pc, #52]	; (8012e18 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8012de4:	480d      	ldr	r0, [pc, #52]	; (8012e1c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8012de6:	f010 fa0d 	bl	8023204 <__assert_func>
 8012dea:	6833      	ldr	r3, [r6, #0]
 8012dec:	4630      	mov	r0, r6
 8012dee:	9c00      	ldr	r4, [sp, #0]
 8012df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012df2:	4798      	blx	r3
 8012df4:	4220      	tst	r0, r4
 8012df6:	d104      	bne.n	8012e02 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8012df8:	4b09      	ldr	r3, [pc, #36]	; (8012e20 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8012dfa:	f240 211a 	movw	r1, #538	; 0x21a
 8012dfe:	4a06      	ldr	r2, [pc, #24]	; (8012e18 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8012e00:	e7f0      	b.n	8012de4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8012e02:	6870      	ldr	r0, [r6, #4]
 8012e04:	4669      	mov	r1, sp
 8012e06:	6803      	ldr	r3, [r0, #0]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	4798      	blx	r3
 8012e0c:	b009      	add	sp, #36	; 0x24
 8012e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e12:	bf00      	nop
 8012e14:	08026030 	.word	0x08026030
 8012e18:	08026356 	.word	0x08026356
 8012e1c:	08026165 	.word	0x08026165
 8012e20:	08026068 	.word	0x08026068

08012e24 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8012e24:	b508      	push	{r3, lr}
 8012e26:	290d      	cmp	r1, #13
 8012e28:	d817      	bhi.n	8012e5a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8012e2a:	e8df f001 	tbb	[pc, r1]
 8012e2e:	090b      	.short	0x090b
 8012e30:	0d0d0d07 	.word	0x0d0d0d07
 8012e34:	1414140d 	.word	0x1414140d
 8012e38:	0d0d1414 	.word	0x0d0d1414
 8012e3c:	2020      	movs	r0, #32
 8012e3e:	bd08      	pop	{r3, pc}
 8012e40:	2018      	movs	r0, #24
 8012e42:	e7fc      	b.n	8012e3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012e44:	2010      	movs	r0, #16
 8012e46:	e7fa      	b.n	8012e3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012e48:	4b05      	ldr	r3, [pc, #20]	; (8012e60 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8012e4a:	f240 2177 	movw	r1, #631	; 0x277
 8012e4e:	4a05      	ldr	r2, [pc, #20]	; (8012e64 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8012e50:	4805      	ldr	r0, [pc, #20]	; (8012e68 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8012e52:	f010 f9d7 	bl	8023204 <__assert_func>
 8012e56:	2008      	movs	r0, #8
 8012e58:	e7f1      	b.n	8012e3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	e7ef      	b.n	8012e3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012e5e:	bf00      	nop
 8012e60:	080261e1 	.word	0x080261e1
 8012e64:	0802666f 	.word	0x0802666f
 8012e68:	08026165 	.word	0x08026165

08012e6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	460d      	mov	r5, r1
 8012e70:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8012e74:	4616      	mov	r6, r2
 8012e76:	461c      	mov	r4, r3
 8012e78:	f7ff ffd4 	bl	8012e24 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8012e7c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012e80:	10c0      	asrs	r0, r0, #3
 8012e82:	fb06 5101 	mla	r1, r6, r1, r5
 8012e86:	fb00 4001 	mla	r0, r0, r1, r4
 8012e8a:	bd70      	pop	{r4, r5, r6, pc}

08012e8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8012e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e90:	b08a      	sub	sp, #40	; 0x28
 8012e92:	f04f 0c00 	mov.w	ip, #0
 8012e96:	4604      	mov	r4, r0
 8012e98:	469a      	mov	sl, r3
 8012e9a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8012e9e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8012ea2:	2d0b      	cmp	r5, #11
 8012ea4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012ea8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012eac:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8012eb0:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8012eb4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8012eb8:	f8cd c014 	str.w	ip, [sp, #20]
 8012ebc:	d129      	bne.n	8012f12 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8012ebe:	2080      	movs	r0, #128	; 0x80
 8012ec0:	9204      	str	r2, [sp, #16]
 8012ec2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8012ec6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012eca:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012ece:	f8ad 701c 	strh.w	r7, [sp, #28]
 8012ed2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eda:	4620      	mov	r0, r4
 8012edc:	f7ff fef0 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012ee0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	4651      	mov	r1, sl
 8012ee8:	4620      	mov	r0, r4
 8012eea:	e9cd 9800 	strd	r9, r8, [sp]
 8012eee:	f7ff ffbd 	bl	8012e6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012ef2:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8012ef6:	9006      	str	r0, [sp, #24]
 8012ef8:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8012efc:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8012f00:	b107      	cbz	r7, 8012f04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8012f02:	b9d6      	cbnz	r6, 8012f3a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8012f04:	4b17      	ldr	r3, [pc, #92]	; (8012f64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8012f06:	f240 11cf 	movw	r1, #463	; 0x1cf
 8012f0a:	4a17      	ldr	r2, [pc, #92]	; (8012f68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8012f0c:	4817      	ldr	r0, [pc, #92]	; (8012f6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8012f0e:	f010 f979 	bl	8023204 <__assert_func>
 8012f12:	2d02      	cmp	r5, #2
 8012f14:	d108      	bne.n	8012f28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8012f16:	2bff      	cmp	r3, #255	; 0xff
 8012f18:	d104      	bne.n	8012f24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	bf14      	ite	ne
 8012f1e:	2040      	movne	r0, #64	; 0x40
 8012f20:	2020      	moveq	r0, #32
 8012f22:	e7cd      	b.n	8012ec0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8012f24:	2040      	movs	r0, #64	; 0x40
 8012f26:	e7cb      	b.n	8012ec0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8012f28:	2bff      	cmp	r3, #255	; 0xff
 8012f2a:	d104      	bne.n	8012f36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	bf14      	ite	ne
 8012f30:	2004      	movne	r0, #4
 8012f32:	2001      	moveq	r0, #1
 8012f34:	e7c4      	b.n	8012ec0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8012f36:	2004      	movs	r0, #4
 8012f38:	e7c2      	b.n	8012ec0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	9d02      	ldr	r5, [sp, #8]
 8012f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f42:	4798      	blx	r3
 8012f44:	4228      	tst	r0, r5
 8012f46:	d104      	bne.n	8012f52 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8012f48:	4b09      	ldr	r3, [pc, #36]	; (8012f70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 8012f4a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8012f4e:	4a06      	ldr	r2, [pc, #24]	; (8012f68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8012f50:	e7dc      	b.n	8012f0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 8012f52:	6860      	ldr	r0, [r4, #4]
 8012f54:	a902      	add	r1, sp, #8
 8012f56:	6803      	ldr	r3, [r0, #0]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	4798      	blx	r3
 8012f5c:	b00a      	add	sp, #40	; 0x28
 8012f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f62:	bf00      	nop
 8012f64:	08025fb3 	.word	0x08025fb3
 8012f68:	08026509 	.word	0x08026509
 8012f6c:	08026165 	.word	0x08026165
 8012f70:	08025feb 	.word	0x08025feb

08012f74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8012f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f78:	b08b      	sub	sp, #44	; 0x2c
 8012f7a:	469b      	mov	fp, r3
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	4692      	mov	sl, r2
 8012f80:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8012f84:	2600      	movs	r6, #0
 8012f86:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8012f8a:	4689      	mov	r9, r1
 8012f8c:	2fff      	cmp	r7, #255	; 0xff
 8012f8e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8012f92:	9605      	str	r6, [sp, #20]
 8012f94:	bf14      	ite	ne
 8012f96:	2308      	movne	r3, #8
 8012f98:	2302      	moveq	r3, #2
 8012f9a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8012f9e:	f7ff fe8f 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012fa2:	465a      	mov	r2, fp
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	4651      	mov	r1, sl
 8012fa8:	4620      	mov	r0, r4
 8012faa:	e9cd 8500 	strd	r8, r5, [sp]
 8012fae:	f7ff ff5d 	bl	8012e6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012fb2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012fb6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8012fba:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012fbe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012fc2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8012fc6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012fca:	6823      	ldr	r3, [r4, #0]
 8012fcc:	9d02      	ldr	r5, [sp, #8]
 8012fce:	9006      	str	r0, [sp, #24]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f8ad 6020 	strh.w	r6, [sp, #32]
 8012fd6:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8012fda:	f8cd 9014 	str.w	r9, [sp, #20]
 8012fde:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8012fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fe4:	4798      	blx	r3
 8012fe6:	4228      	tst	r0, r5
 8012fe8:	d106      	bne.n	8012ff8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8012fea:	4b07      	ldr	r3, [pc, #28]	; (8013008 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8012fec:	f240 212e 	movw	r1, #558	; 0x22e
 8012ff0:	4a06      	ldr	r2, [pc, #24]	; (801300c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8012ff2:	4807      	ldr	r0, [pc, #28]	; (8013010 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8012ff4:	f010 f906 	bl	8023204 <__assert_func>
 8012ff8:	6860      	ldr	r0, [r4, #4]
 8012ffa:	a902      	add	r1, sp, #8
 8012ffc:	6803      	ldr	r3, [r0, #0]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	4798      	blx	r3
 8013002:	b00b      	add	sp, #44	; 0x2c
 8013004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013008:	08025feb 	.word	0x08025feb
 801300c:	080265da 	.word	0x080265da
 8013010:	08026165 	.word	0x08026165

08013014 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013014:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013018:	461f      	mov	r7, r3
 801301a:	4b0b      	ldr	r3, [pc, #44]	; (8013048 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801301c:	460d      	mov	r5, r1
 801301e:	4616      	mov	r6, r2
 8013020:	f8b3 8000 	ldrh.w	r8, [r3]
 8013024:	4604      	mov	r4, r0
 8013026:	f7f1 fdc5 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 801302a:	6803      	ldr	r3, [r0, #0]
 801302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801302e:	4798      	blx	r3
 8013030:	463b      	mov	r3, r7
 8013032:	4632      	mov	r2, r6
 8013034:	4629      	mov	r1, r5
 8013036:	e9cd 8000 	strd	r8, r0, [sp]
 801303a:	4620      	mov	r0, r4
 801303c:	f7ff ff16 	bl	8012e6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013040:	b002      	add	sp, #8
 8013042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013046:	bf00      	nop
 8013048:	20056536 	.word	0x20056536

0801304c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013050:	4698      	mov	r8, r3
 8013052:	b088      	sub	sp, #32
 8013054:	2300      	movs	r3, #0
 8013056:	4617      	mov	r7, r2
 8013058:	4604      	mov	r4, r0
 801305a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801305e:	9303      	str	r3, [sp, #12]
 8013060:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013064:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013068:	f8ad 6014 	strh.w	r6, [sp, #20]
 801306c:	f8ad 5016 	strh.w	r5, [sp, #22]
 8013070:	e9cd 3100 	strd	r3, r1, [sp]
 8013074:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013078:	f8ad 3018 	strh.w	r3, [sp, #24]
 801307c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8013080:	f88d 301c 	strb.w	r3, [sp, #28]
 8013084:	f7ff fe1c 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013088:	4642      	mov	r2, r8
 801308a:	4603      	mov	r3, r0
 801308c:	4639      	mov	r1, r7
 801308e:	4620      	mov	r0, r4
 8013090:	f7ff ffc0 	bl	8013014 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013094:	4b16      	ldr	r3, [pc, #88]	; (80130f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8013096:	9004      	str	r0, [sp, #16]
 8013098:	881b      	ldrh	r3, [r3, #0]
 801309a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801309e:	f7f1 fd89 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80130a2:	6803      	ldr	r3, [r0, #0]
 80130a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a6:	4798      	blx	r3
 80130a8:	f88d 001e 	strb.w	r0, [sp, #30]
 80130ac:	f88d 001d 	strb.w	r0, [sp, #29]
 80130b0:	b106      	cbz	r6, 80130b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80130b2:	b935      	cbnz	r5, 80130c2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80130b4:	4b0f      	ldr	r3, [pc, #60]	; (80130f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80130b6:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80130ba:	4a0f      	ldr	r2, [pc, #60]	; (80130f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80130bc:	480f      	ldr	r0, [pc, #60]	; (80130fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80130be:	f010 f8a1 	bl	8023204 <__assert_func>
 80130c2:	6823      	ldr	r3, [r4, #0]
 80130c4:	4620      	mov	r0, r4
 80130c6:	9d00      	ldr	r5, [sp, #0]
 80130c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130ca:	4798      	blx	r3
 80130cc:	4228      	tst	r0, r5
 80130ce:	d104      	bne.n	80130da <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80130d0:	4b0b      	ldr	r3, [pc, #44]	; (8013100 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80130d2:	f240 11ed 	movw	r1, #493	; 0x1ed
 80130d6:	4a08      	ldr	r2, [pc, #32]	; (80130f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80130d8:	e7f0      	b.n	80130bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80130da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130dc:	4669      	mov	r1, sp
 80130de:	6860      	ldr	r0, [r4, #4]
 80130e0:	9303      	str	r3, [sp, #12]
 80130e2:	6803      	ldr	r3, [r0, #0]
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	4798      	blx	r3
 80130e8:	b008      	add	sp, #32
 80130ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ee:	bf00      	nop
 80130f0:	20056536 	.word	0x20056536
 80130f4:	08025fb3 	.word	0x08025fb3
 80130f8:	080263bb 	.word	0x080263bb
 80130fc:	08026165 	.word	0x08026165
 8013100:	08025feb 	.word	0x08025feb

08013104 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	b08a      	sub	sp, #40	; 0x28
 8013108:	4604      	mov	r4, r0
 801310a:	466b      	mov	r3, sp
 801310c:	e883 0006 	stmia.w	r3, {r1, r2}
 8013110:	4b1f      	ldr	r3, [pc, #124]	; (8013190 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	b933      	cbnz	r3, 8013124 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8013116:	4b1f      	ldr	r3, [pc, #124]	; (8013194 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8013118:	f240 213f 	movw	r1, #575	; 0x23f
 801311c:	4a1e      	ldr	r2, [pc, #120]	; (8013198 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801311e:	481f      	ldr	r0, [pc, #124]	; (801319c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8013120:	f010 f870 	bl	8023204 <__assert_func>
 8013124:	2300      	movs	r3, #0
 8013126:	f8bd 5000 	ldrh.w	r5, [sp]
 801312a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801312e:	9305      	str	r3, [sp, #20]
 8013130:	2301      	movs	r3, #1
 8013132:	9302      	str	r3, [sp, #8]
 8013134:	6803      	ldr	r3, [r0, #0]
 8013136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013138:	4798      	blx	r3
 801313a:	4632      	mov	r2, r6
 801313c:	4629      	mov	r1, r5
 801313e:	4603      	mov	r3, r0
 8013140:	4620      	mov	r0, r4
 8013142:	f7ff ff67 	bl	8013014 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013146:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013148:	9003      	str	r0, [sp, #12]
 801314a:	9306      	str	r3, [sp, #24]
 801314c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013150:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013154:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013158:	f8ad 301e 	strh.w	r3, [sp, #30]
 801315c:	4b10      	ldr	r3, [pc, #64]	; (80131a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801315e:	881b      	ldrh	r3, [r3, #0]
 8013160:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013164:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013168:	f7f1 fd24 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 801316c:	6803      	ldr	r3, [r0, #0]
 801316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013170:	4798      	blx	r3
 8013172:	23ff      	movs	r3, #255	; 0xff
 8013174:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013178:	a902      	add	r1, sp, #8
 801317a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801317e:	6860      	ldr	r0, [r4, #4]
 8013180:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013184:	6803      	ldr	r3, [r0, #0]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	4798      	blx	r3
 801318a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801318c:	b00a      	add	sp, #40	; 0x28
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	2005653b 	.word	0x2005653b
 8013194:	080260b2 	.word	0x080260b2
 8013198:	0802645f 	.word	0x0802645f
 801319c:	08026165 	.word	0x08026165
 80131a0:	20056536 	.word	0x20056536

080131a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80131a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a6:	b08b      	sub	sp, #44	; 0x2c
 80131a8:	4604      	mov	r4, r0
 80131aa:	466d      	mov	r5, sp
 80131ac:	e885 0006 	stmia.w	r5, {r1, r2}
 80131b0:	461d      	mov	r5, r3
 80131b2:	2300      	movs	r3, #0
 80131b4:	f8bd 6000 	ldrh.w	r6, [sp]
 80131b8:	9305      	str	r3, [sp, #20]
 80131ba:	2301      	movs	r3, #1
 80131bc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80131c0:	9302      	str	r3, [sp, #8]
 80131c2:	6803      	ldr	r3, [r0, #0]
 80131c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c6:	4798      	blx	r3
 80131c8:	463a      	mov	r2, r7
 80131ca:	4631      	mov	r1, r6
 80131cc:	4603      	mov	r3, r0
 80131ce:	4620      	mov	r0, r4
 80131d0:	f7ff ff20 	bl	8013014 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80131d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80131d8:	9003      	str	r0, [sp, #12]
 80131da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80131de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80131e2:	9506      	str	r5, [sp, #24]
 80131e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80131e8:	4b0d      	ldr	r3, [pc, #52]	; (8013220 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 80131f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80131f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80131f6:	f7f1 fcdd 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80131fa:	6803      	ldr	r3, [r0, #0]
 80131fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fe:	4798      	blx	r3
 8013200:	23ff      	movs	r3, #255	; 0xff
 8013202:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013206:	a902      	add	r1, sp, #8
 8013208:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801320c:	6860      	ldr	r0, [r4, #4]
 801320e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013212:	6803      	ldr	r3, [r0, #0]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	4798      	blx	r3
 8013218:	4628      	mov	r0, r5
 801321a:	b00b      	add	sp, #44	; 0x2c
 801321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801321e:	bf00      	nop
 8013220:	20056536 	.word	0x20056536

08013224 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013224:	b570      	push	{r4, r5, r6, lr}
 8013226:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801322a:	4604      	mov	r4, r0
 801322c:	b19b      	cbz	r3, 8013256 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801322e:	2002      	movs	r0, #2
 8013230:	f7ee ff80 	bl	8002134 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013234:	2300      	movs	r3, #0
 8013236:	4620      	mov	r0, r4
 8013238:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801323c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013240:	6823      	ldr	r3, [r4, #0]
 8013242:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8013246:	f7ff fd3b 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801324a:	4601      	mov	r1, r0
 801324c:	4620      	mov	r0, r4
 801324e:	462b      	mov	r3, r5
 8013250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013254:	4718      	bx	r3
 8013256:	bd70      	pop	{r4, r5, r6, pc}

08013258 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013258:	b538      	push	{r3, r4, r5, lr}
 801325a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801325e:	4604      	mov	r4, r0
 8013260:	460d      	mov	r5, r1
 8013262:	428a      	cmp	r2, r1
 8013264:	d008      	beq.n	8013278 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8013266:	2a01      	cmp	r2, #1
 8013268:	6803      	ldr	r3, [r0, #0]
 801326a:	d106      	bne.n	801327a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801326c:	b929      	cbnz	r1, 801327a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801326e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013272:	4798      	blx	r3
 8013274:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013278:	bd38      	pop	{r3, r4, r5, pc}
 801327a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801327e:	4620      	mov	r0, r4
 8013280:	e7f7      	b.n	8013272 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08013284 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013284:	4b0d      	ldr	r3, [pc, #52]	; (80132bc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013286:	b510      	push	{r4, lr}
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	4604      	mov	r4, r0
 801328c:	b95b      	cbnz	r3, 80132a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801328e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013292:	2b02      	cmp	r3, #2
 8013294:	d007      	beq.n	80132a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013296:	6840      	ldr	r0, [r0, #4]
 8013298:	f000 f93a 	bl	8013510 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801329c:	b118      	cbz	r0, 80132a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801329e:	6862      	ldr	r2, [r4, #4]
 80132a0:	7a53      	ldrb	r3, [r2, #9]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d0fc      	beq.n	80132a0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80132a6:	f7ef f991 	bl	80025cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80132aa:	4620      	mov	r0, r4
 80132ac:	2100      	movs	r1, #0
 80132ae:	f7ff ffd3 	bl	8013258 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80132b2:	4620      	mov	r0, r4
 80132b4:	f7ff fd04 	bl	8012cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80132b8:	bd10      	pop	{r4, pc}
 80132ba:	bf00      	nop
 80132bc:	2005653a 	.word	0x2005653a

080132c0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80132c0:	4770      	bx	lr

080132c2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80132c2:	2000      	movs	r0, #0
 80132c4:	4770      	bx	lr

080132c6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80132c6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80132ca:	1a13      	subs	r3, r2, r0
 80132cc:	4258      	negs	r0, r3
 80132ce:	4158      	adcs	r0, r3
 80132d0:	4770      	bx	lr

080132d2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80132d2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80132d6:	1a9b      	subs	r3, r3, r2
 80132d8:	2b00      	cmp	r3, #0
 80132da:	bfdc      	itt	le
 80132dc:	6882      	ldrle	r2, [r0, #8]
 80132de:	189b      	addle	r3, r3, r2
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	bfcc      	ite	gt
 80132e4:	2000      	movgt	r0, #0
 80132e6:	2001      	movle	r0, #1
 80132e8:	4770      	bx	lr

080132ea <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80132ea:	6902      	ldr	r2, [r0, #16]
 80132ec:	6840      	ldr	r0, [r0, #4]
 80132ee:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80132f2:	4770      	bx	lr

080132f4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80132f4:	6803      	ldr	r3, [r0, #0]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	4718      	bx	r3

080132fa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80132fa:	4770      	bx	lr

080132fc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80132fc:	4770      	bx	lr
	...

08013300 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013300:	2301      	movs	r3, #1
 8013302:	b570      	push	{r4, r5, r6, lr}
 8013304:	7203      	strb	r3, [r0, #8]
 8013306:	4604      	mov	r4, r0
 8013308:	6840      	ldr	r0, [r0, #4]
 801330a:	6803      	ldr	r3, [r0, #0]
 801330c:	699b      	ldr	r3, [r3, #24]
 801330e:	4798      	blx	r3
 8013310:	6803      	ldr	r3, [r0, #0]
 8013312:	4605      	mov	r5, r0
 8013314:	2b40      	cmp	r3, #64	; 0x40
 8013316:	d039      	beq.n	801338c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8013318:	d815      	bhi.n	8013346 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801331a:	2b04      	cmp	r3, #4
 801331c:	d022      	beq.n	8013364 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801331e:	d808      	bhi.n	8013332 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013320:	2b01      	cmp	r3, #1
 8013322:	d033      	beq.n	801338c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8013324:	2b02      	cmp	r3, #2
 8013326:	d108      	bne.n	801333a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	4620      	mov	r0, r4
 801332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801332e:	4798      	blx	r3
 8013330:	e025      	b.n	801337e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8013332:	2b08      	cmp	r3, #8
 8013334:	d01e      	beq.n	8013374 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8013336:	2b20      	cmp	r3, #32
 8013338:	d028      	beq.n	801338c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801333a:	4b17      	ldr	r3, [pc, #92]	; (8013398 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801333c:	218b      	movs	r1, #139	; 0x8b
 801333e:	4a17      	ldr	r2, [pc, #92]	; (801339c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8013340:	4817      	ldr	r0, [pc, #92]	; (80133a0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8013342:	f00f ff5f 	bl	8023204 <__assert_func>
 8013346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801334a:	d01f      	beq.n	801338c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801334c:	d804      	bhi.n	8013358 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801334e:	2b80      	cmp	r3, #128	; 0x80
 8013350:	d01c      	beq.n	801338c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8013352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013356:	e7ef      	b.n	8013338 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8013358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801335c:	d016      	beq.n	801338c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013362:	e7e0      	b.n	8013326 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	7f01      	ldrb	r1, [r0, #28]
 8013368:	4620      	mov	r0, r4
 801336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801336c:	4798      	blx	r3
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013372:	e006      	b.n	8013382 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	7f01      	ldrb	r1, [r0, #28]
 8013378:	4620      	mov	r0, r4
 801337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801337c:	4798      	blx	r3
 801337e:	6823      	ldr	r3, [r4, #0]
 8013380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013382:	4629      	mov	r1, r5
 8013384:	4620      	mov	r0, r4
 8013386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801338a:	4718      	bx	r3
 801338c:	6823      	ldr	r3, [r4, #0]
 801338e:	4620      	mov	r0, r4
 8013390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013392:	4798      	blx	r3
 8013394:	e7eb      	b.n	801336e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8013396:	bf00      	nop
 8013398:	080266b8 	.word	0x080266b8
 801339c:	080267c8 	.word	0x080267c8
 80133a0:	080266dd 	.word	0x080266dd

080133a4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80133a4:	b570      	push	{r4, r5, r6, lr}
 80133a6:	4604      	mov	r4, r0
 80133a8:	460e      	mov	r6, r1
 80133aa:	6860      	ldr	r0, [r4, #4]
 80133ac:	6803      	ldr	r3, [r0, #0]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	4798      	blx	r3
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d1f9      	bne.n	80133aa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80133b6:	4d0d      	ldr	r5, [pc, #52]	; (80133ec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80133b8:	6828      	ldr	r0, [r5, #0]
 80133ba:	6803      	ldr	r3, [r0, #0]
 80133bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133be:	4798      	blx	r3
 80133c0:	f7ef f91e 	bl	8002600 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80133c4:	6828      	ldr	r0, [r5, #0]
 80133c6:	2101      	movs	r1, #1
 80133c8:	f7ff ff46 	bl	8013258 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80133cc:	6860      	ldr	r0, [r4, #4]
 80133ce:	4631      	mov	r1, r6
 80133d0:	6803      	ldr	r3, [r0, #0]
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	4798      	blx	r3
 80133d6:	6823      	ldr	r3, [r4, #0]
 80133d8:	4620      	mov	r0, r4
 80133da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133dc:	4798      	blx	r3
 80133de:	6828      	ldr	r0, [r5, #0]
 80133e0:	6803      	ldr	r3, [r0, #0]
 80133e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133e8:	4718      	bx	r3
 80133ea:	bf00      	nop
 80133ec:	2005653c 	.word	0x2005653c

080133f0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80133f0:	b508      	push	{r3, lr}
 80133f2:	f7ef f8eb 	bl	80025cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80133f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80133fa:	f7ef b8f5 	b.w	80025e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080133fe <_ZN8touchgfx13DMA_Interface5startEv>:
 80133fe:	b510      	push	{r4, lr}
 8013400:	4604      	mov	r4, r0
 8013402:	6840      	ldr	r0, [r0, #4]
 8013404:	6803      	ldr	r3, [r0, #0]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4798      	blx	r3
 801340a:	b948      	cbnz	r0, 8013420 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801340c:	7a63      	ldrb	r3, [r4, #9]
 801340e:	b13b      	cbz	r3, 8013420 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013410:	7a23      	ldrb	r3, [r4, #8]
 8013412:	b92b      	cbnz	r3, 8013420 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013414:	6823      	ldr	r3, [r4, #0]
 8013416:	4620      	mov	r0, r4
 8013418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801341a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801341e:	4718      	bx	r3
 8013420:	bd10      	pop	{r4, pc}
	...

08013424 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013424:	b510      	push	{r4, lr}
 8013426:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801342a:	1b12      	subs	r2, r2, r4
 801342c:	2a00      	cmp	r2, #0
 801342e:	bfdc      	itt	le
 8013430:	6883      	ldrle	r3, [r0, #8]
 8013432:	18d2      	addle	r2, r2, r3
 8013434:	2a01      	cmp	r2, #1
 8013436:	dd18      	ble.n	801346a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8013438:	6843      	ldr	r3, [r0, #4]
 801343a:	f101 021c 	add.w	r2, r1, #28
 801343e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8013442:	f851 4b04 	ldr.w	r4, [r1], #4
 8013446:	4291      	cmp	r1, r2
 8013448:	f843 4b04 	str.w	r4, [r3], #4
 801344c:	d1f9      	bne.n	8013442 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801344e:	880a      	ldrh	r2, [r1, #0]
 8013450:	801a      	strh	r2, [r3, #0]
 8013452:	788a      	ldrb	r2, [r1, #2]
 8013454:	709a      	strb	r2, [r3, #2]
 8013456:	68c3      	ldr	r3, [r0, #12]
 8013458:	6882      	ldr	r2, [r0, #8]
 801345a:	f3bf 8f5b 	dmb	ish
 801345e:	3301      	adds	r3, #1
 8013460:	429a      	cmp	r2, r3
 8013462:	bfd8      	it	le
 8013464:	1a9b      	suble	r3, r3, r2
 8013466:	60c3      	str	r3, [r0, #12]
 8013468:	bd10      	pop	{r4, pc}
 801346a:	4b03      	ldr	r3, [pc, #12]	; (8013478 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801346c:	2139      	movs	r1, #57	; 0x39
 801346e:	4a03      	ldr	r2, [pc, #12]	; (801347c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8013470:	4803      	ldr	r0, [pc, #12]	; (8013480 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8013472:	f00f fec7 	bl	8023204 <__assert_func>
 8013476:	bf00      	nop
 8013478:	08026703 	.word	0x08026703
 801347c:	080267f8 	.word	0x080267f8
 8013480:	080266dd 	.word	0x080266dd

08013484 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013484:	b510      	push	{r4, lr}
 8013486:	6803      	ldr	r3, [r0, #0]
 8013488:	4604      	mov	r4, r0
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4798      	blx	r3
 801348e:	b128      	cbz	r0, 801349c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8013490:	4b07      	ldr	r3, [pc, #28]	; (80134b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8013492:	213f      	movs	r1, #63	; 0x3f
 8013494:	4a07      	ldr	r2, [pc, #28]	; (80134b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8013496:	4808      	ldr	r0, [pc, #32]	; (80134b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8013498:	f00f feb4 	bl	8023204 <__assert_func>
 801349c:	6923      	ldr	r3, [r4, #16]
 801349e:	68a2      	ldr	r2, [r4, #8]
 80134a0:	f3bf 8f5b 	dmb	ish
 80134a4:	3301      	adds	r3, #1
 80134a6:	429a      	cmp	r2, r3
 80134a8:	bfd8      	it	le
 80134aa:	1a9b      	suble	r3, r3, r2
 80134ac:	6123      	str	r3, [r4, #16]
 80134ae:	bd10      	pop	{r4, pc}
 80134b0:	08026726 	.word	0x08026726
 80134b4:	08026846 	.word	0x08026846
 80134b8:	080266dd 	.word	0x080266dd

080134bc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80134bc:	b570      	push	{r4, r5, r6, lr}
 80134be:	4604      	mov	r4, r0
 80134c0:	6840      	ldr	r0, [r0, #4]
 80134c2:	6803      	ldr	r3, [r0, #0]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4798      	blx	r3
 80134c8:	4605      	mov	r5, r0
 80134ca:	b930      	cbnz	r0, 80134da <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80134cc:	7a23      	ldrb	r3, [r4, #8]
 80134ce:	b123      	cbz	r3, 80134da <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80134d0:	6860      	ldr	r0, [r4, #4]
 80134d2:	6803      	ldr	r3, [r0, #0]
 80134d4:	695b      	ldr	r3, [r3, #20]
 80134d6:	4798      	blx	r3
 80134d8:	7225      	strb	r5, [r4, #8]
 80134da:	6860      	ldr	r0, [r4, #4]
 80134dc:	6803      	ldr	r3, [r0, #0]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4798      	blx	r3
 80134e2:	b928      	cbnz	r0, 80134f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80134e4:	6823      	ldr	r3, [r4, #0]
 80134e6:	4620      	mov	r0, r4
 80134e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134ee:	4718      	bx	r3
 80134f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134f4:	f7ef b890 	b.w	8002618 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080134f8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80134f8:	b510      	push	{r4, lr}
 80134fa:	6082      	str	r2, [r0, #8]
 80134fc:	2200      	movs	r2, #0
 80134fe:	4c03      	ldr	r4, [pc, #12]	; (801350c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013500:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013504:	e9c0 4100 	strd	r4, r1, [r0]
 8013508:	bd10      	pop	{r4, pc}
 801350a:	bf00      	nop
 801350c:	080267ac 	.word	0x080267ac

08013510 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013510:	6840      	ldr	r0, [r0, #4]
 8013512:	6803      	ldr	r3, [r0, #0]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4718      	bx	r3

08013518 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8013518:	2001      	movs	r0, #1
 801351a:	4770      	bx	lr

0801351c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801351c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013520:	460d      	mov	r5, r1
 8013522:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013526:	b085      	sub	sp, #20
 8013528:	4690      	mov	r8, r2
 801352a:	4411      	add	r1, r2
 801352c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013530:	4699      	mov	r9, r3
 8013532:	6803      	ldr	r3, [r0, #0]
 8013534:	60c1      	str	r1, [r0, #12]
 8013536:	4604      	mov	r4, r0
 8013538:	990c      	ldr	r1, [sp, #48]	; 0x30
 801353a:	440a      	add	r2, r1
 801353c:	6102      	str	r2, [r0, #16]
 801353e:	68db      	ldr	r3, [r3, #12]
 8013540:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8013544:	4798      	blx	r3
 8013546:	2800      	cmp	r0, #0
 8013548:	d03a      	beq.n	80135c0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 801354a:	44c8      	add	r8, r9
 801354c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013550:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013554:	4445      	add	r5, r8
 8013556:	442e      	add	r6, r5
 8013558:	6823      	ldr	r3, [r4, #0]
 801355a:	f10d 020f 	add.w	r2, sp, #15
 801355e:	a903      	add	r1, sp, #12
 8013560:	4620      	mov	r0, r4
 8013562:	9200      	str	r2, [sp, #0]
 8013564:	f10d 020d 	add.w	r2, sp, #13
 8013568:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801356c:	f10d 030e 	add.w	r3, sp, #14
 8013570:	47c0      	blx	r8
 8013572:	b1f0      	cbz	r0, 80135b2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 8013574:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013578:	7a20      	ldrb	r0, [r4, #8]
 801357a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801357e:	4358      	muls	r0, r3
 8013580:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8013584:	1c43      	adds	r3, r0, #1
 8013586:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801358a:	7838      	ldrb	r0, [r7, #0]
 801358c:	121b      	asrs	r3, r3, #8
 801358e:	fb10 f003 	smulbb	r0, r0, r3
 8013592:	b283      	uxth	r3, r0
 8013594:	1c58      	adds	r0, r3, #1
 8013596:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	1200      	asrs	r0, r0, #8
 801359e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80135a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80135a6:	28ff      	cmp	r0, #255	; 0xff
 80135a8:	d10d      	bne.n	80135c6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 80135aa:	9100      	str	r1, [sp, #0]
 80135ac:	4629      	mov	r1, r5
 80135ae:	4620      	mov	r0, r4
 80135b0:	47c0      	blx	r8
 80135b2:	68e3      	ldr	r3, [r4, #12]
 80135b4:	3503      	adds	r5, #3
 80135b6:	3701      	adds	r7, #1
 80135b8:	3301      	adds	r3, #1
 80135ba:	42ae      	cmp	r6, r5
 80135bc:	60e3      	str	r3, [r4, #12]
 80135be:	d8cb      	bhi.n	8013558 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 80135c0:	b005      	add	sp, #20
 80135c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135c6:	fa1f fc80 	uxth.w	ip, r0
 80135ca:	43c0      	mvns	r0, r0
 80135cc:	f895 e002 	ldrb.w	lr, [r5, #2]
 80135d0:	fb12 f20c 	smulbb	r2, r2, ip
 80135d4:	b2c0      	uxtb	r0, r0
 80135d6:	fb13 f30c 	smulbb	r3, r3, ip
 80135da:	fb0e 2200 	mla	r2, lr, r0, r2
 80135de:	f895 e001 	ldrb.w	lr, [r5, #1]
 80135e2:	fb11 f10c 	smulbb	r1, r1, ip
 80135e6:	fb0e 3300 	mla	r3, lr, r0, r3
 80135ea:	f895 e000 	ldrb.w	lr, [r5]
 80135ee:	b292      	uxth	r2, r2
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	fb0e 1000 	mla	r0, lr, r0, r1
 80135f6:	1c59      	adds	r1, r3, #1
 80135f8:	b280      	uxth	r0, r0
 80135fa:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80135fe:	1c51      	adds	r1, r2, #1
 8013600:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8013604:	1c41      	adds	r1, r0, #1
 8013606:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801360a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801360e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013612:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013616:	9000      	str	r0, [sp, #0]
 8013618:	e7c8      	b.n	80135ac <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801361a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801361a:	f89d 0000 	ldrb.w	r0, [sp]
 801361e:	704b      	strb	r3, [r1, #1]
 8013620:	7008      	strb	r0, [r1, #0]
 8013622:	708a      	strb	r2, [r1, #2]
 8013624:	4770      	bx	lr

08013626 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8013626:	4413      	add	r3, r2
 8013628:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801362e:	4419      	add	r1, r3
 8013630:	7a03      	ldrb	r3, [r0, #8]
 8013632:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8013636:	2bff      	cmp	r3, #255	; 0xff
 8013638:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801363c:	440e      	add	r6, r1
 801363e:	d13d      	bne.n	80136bc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8013640:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013644:	3103      	adds	r1, #3
 8013646:	7d87      	ldrb	r7, [r0, #22]
 8013648:	2bff      	cmp	r3, #255	; 0xff
 801364a:	d10a      	bne.n	8013662 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 801364c:	f801 7c03 	strb.w	r7, [r1, #-3]
 8013650:	7d43      	ldrb	r3, [r0, #21]
 8013652:	f801 3c02 	strb.w	r3, [r1, #-2]
 8013656:	7d03      	ldrb	r3, [r0, #20]
 8013658:	f801 3c01 	strb.w	r3, [r1, #-1]
 801365c:	428e      	cmp	r6, r1
 801365e:	d8ef      	bhi.n	8013640 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8013660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013662:	b29a      	uxth	r2, r3
 8013664:	43db      	mvns	r3, r3
 8013666:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801366a:	fb17 f702 	smulbb	r7, r7, r2
 801366e:	b2db      	uxtb	r3, r3
 8013670:	fb05 7503 	mla	r5, r5, r3, r7
 8013674:	b2ad      	uxth	r5, r5
 8013676:	1c6f      	adds	r7, r5, #1
 8013678:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801367c:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8013680:	fb17 f703 	smulbb	r7, r7, r3
 8013684:	122d      	asrs	r5, r5, #8
 8013686:	f801 5c03 	strb.w	r5, [r1, #-3]
 801368a:	7d45      	ldrb	r5, [r0, #21]
 801368c:	fb05 7502 	mla	r5, r5, r2, r7
 8013690:	b2ad      	uxth	r5, r5
 8013692:	1c6f      	adds	r7, r5, #1
 8013694:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8013698:	122d      	asrs	r5, r5, #8
 801369a:	f801 5c02 	strb.w	r5, [r1, #-2]
 801369e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80136a2:	7d07      	ldrb	r7, [r0, #20]
 80136a4:	fb15 f303 	smulbb	r3, r5, r3
 80136a8:	fb07 3202 	mla	r2, r7, r2, r3
 80136ac:	b292      	uxth	r2, r2
 80136ae:	1c53      	adds	r3, r2, #1
 80136b0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80136b4:	1212      	asrs	r2, r2, #8
 80136b6:	f801 2c01 	strb.w	r2, [r1, #-1]
 80136ba:	e7cf      	b.n	801365c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 80136bc:	3103      	adds	r1, #3
 80136be:	f814 2b01 	ldrb.w	r2, [r4], #1
 80136c2:	428e      	cmp	r6, r1
 80136c4:	7a03      	ldrb	r3, [r0, #8]
 80136c6:	f101 0103 	add.w	r1, r1, #3
 80136ca:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80136ce:	fb02 f303 	mul.w	r3, r2, r3
 80136d2:	f103 0201 	add.w	r2, r3, #1
 80136d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80136da:	ea4f 2222 	mov.w	r2, r2, asr #8
 80136de:	b295      	uxth	r5, r2
 80136e0:	ea6f 0202 	mvn.w	r2, r2
 80136e4:	b2d3      	uxtb	r3, r2
 80136e6:	7d82      	ldrb	r2, [r0, #22]
 80136e8:	fb1c fc03 	smulbb	ip, ip, r3
 80136ec:	fb02 c205 	mla	r2, r2, r5, ip
 80136f0:	b292      	uxth	r2, r2
 80136f2:	f102 0c01 	add.w	ip, r2, #1
 80136f6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80136fa:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80136fe:	fb1c fc03 	smulbb	ip, ip, r3
 8013702:	ea4f 2222 	mov.w	r2, r2, asr #8
 8013706:	f801 2c06 	strb.w	r2, [r1, #-6]
 801370a:	7d42      	ldrb	r2, [r0, #21]
 801370c:	fb02 c205 	mla	r2, r2, r5, ip
 8013710:	b292      	uxth	r2, r2
 8013712:	f102 0c01 	add.w	ip, r2, #1
 8013716:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801371a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801371e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8013722:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8013726:	f890 c014 	ldrb.w	ip, [r0, #20]
 801372a:	fb12 f303 	smulbb	r3, r2, r3
 801372e:	fb0c 3305 	mla	r3, ip, r5, r3
 8013732:	b29b      	uxth	r3, r3
 8013734:	f103 0201 	add.w	r2, r3, #1
 8013738:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801373c:	ea4f 2323 	mov.w	r3, r3, asr #8
 8013740:	f801 3c04 	strb.w	r3, [r1, #-4]
 8013744:	d8bb      	bhi.n	80136be <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8013746:	e78b      	b.n	8013660 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08013748 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8013748:	b510      	push	{r4, lr}
 801374a:	7d04      	ldrb	r4, [r0, #20]
 801374c:	700c      	strb	r4, [r1, #0]
 801374e:	7d41      	ldrb	r1, [r0, #21]
 8013750:	7011      	strb	r1, [r2, #0]
 8013752:	7d82      	ldrb	r2, [r0, #22]
 8013754:	2001      	movs	r0, #1
 8013756:	701a      	strb	r2, [r3, #0]
 8013758:	22ff      	movs	r2, #255	; 0xff
 801375a:	9b02      	ldr	r3, [sp, #8]
 801375c:	701a      	strb	r2, [r3, #0]
 801375e:	bd10      	pop	{r4, pc}

08013760 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8013760:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8013764:	4770      	bx	lr

08013766 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8013766:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801376a:	4770      	bx	lr

0801376c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801376c:	6281      	str	r1, [r0, #40]	; 0x28
 801376e:	4770      	bx	lr

08013770 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8013770:	b510      	push	{r4, lr}
 8013772:	2200      	movs	r2, #0
 8013774:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8013778:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801377c:	8002      	strh	r2, [r0, #0]
 801377e:	8042      	strh	r2, [r0, #2]
 8013780:	8084      	strh	r4, [r0, #4]
 8013782:	80c1      	strh	r1, [r0, #6]
 8013784:	bd10      	pop	{r4, pc}

08013786 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8013786:	2200      	movs	r2, #0
 8013788:	8002      	strh	r2, [r0, #0]
 801378a:	8042      	strh	r2, [r0, #2]
 801378c:	8082      	strh	r2, [r0, #4]
 801378e:	80c2      	strh	r2, [r0, #6]
 8013790:	4770      	bx	lr
	...

08013794 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8013794:	b508      	push	{r3, lr}
 8013796:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013798:	b928      	cbnz	r0, 80137a6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801379a:	4b03      	ldr	r3, [pc, #12]	; (80137a8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801379c:	2126      	movs	r1, #38	; 0x26
 801379e:	4a03      	ldr	r2, [pc, #12]	; (80137ac <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80137a0:	4803      	ldr	r0, [pc, #12]	; (80137b0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80137a2:	f00f fd2f 	bl	8023204 <__assert_func>
 80137a6:	bd08      	pop	{r3, pc}
 80137a8:	080268b8 	.word	0x080268b8
 80137ac:	08026998 	.word	0x08026998
 80137b0:	080268df 	.word	0x080268df

080137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80137b4:	b510      	push	{r4, lr}
 80137b6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80137ba:	888a      	ldrh	r2, [r1, #4]
 80137bc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80137c0:	4422      	add	r2, r4
 80137c2:	b212      	sxth	r2, r2
 80137c4:	4293      	cmp	r3, r2
 80137c6:	da15      	bge.n	80137f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80137c8:	8882      	ldrh	r2, [r0, #4]
 80137ca:	4413      	add	r3, r2
 80137cc:	b21b      	sxth	r3, r3
 80137ce:	429c      	cmp	r4, r3
 80137d0:	da10      	bge.n	80137f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80137d2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80137d6:	88c9      	ldrh	r1, [r1, #6]
 80137d8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80137dc:	4419      	add	r1, r3
 80137de:	b209      	sxth	r1, r1
 80137e0:	428a      	cmp	r2, r1
 80137e2:	da07      	bge.n	80137f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80137e4:	88c0      	ldrh	r0, [r0, #6]
 80137e6:	4410      	add	r0, r2
 80137e8:	b200      	sxth	r0, r0
 80137ea:	4283      	cmp	r3, r0
 80137ec:	bfac      	ite	ge
 80137ee:	2000      	movge	r0, #0
 80137f0:	2001      	movlt	r0, #1
 80137f2:	bd10      	pop	{r4, pc}
 80137f4:	2000      	movs	r0, #0
 80137f6:	e7fc      	b.n	80137f2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080137f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	b08b      	sub	sp, #44	; 0x2c
 80137fe:	4604      	mov	r4, r0
 8013800:	6808      	ldr	r0, [r1, #0]
 8013802:	f04f 0a00 	mov.w	sl, #0
 8013806:	6849      	ldr	r1, [r1, #4]
 8013808:	ab04      	add	r3, sp, #16
 801380a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801380e:	c303      	stmia	r3!, {r0, r1}
 8013810:	4b35      	ldr	r3, [pc, #212]	; (80138e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8013812:	4621      	mov	r1, r4
 8013814:	a806      	add	r0, sp, #24
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	2b01      	cmp	r3, #1
 801381a:	6823      	ldr	r3, [r4, #0]
 801381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381e:	bf1f      	itttt	ne
 8013820:	f10d 090e 	addne.w	r9, sp, #14
 8013824:	ae05      	addne	r6, sp, #20
 8013826:	f10d 0516 	addne.w	r5, sp, #22
 801382a:	f10d 0812 	addne.w	r8, sp, #18
 801382e:	bf01      	itttt	eq
 8013830:	f10d 0916 	addeq.w	r9, sp, #22
 8013834:	f10d 060e 	addeq.w	r6, sp, #14
 8013838:	ad05      	addeq	r5, sp, #20
 801383a:	f10d 0810 	addeq.w	r8, sp, #16
 801383e:	4798      	blx	r3
 8013840:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013844:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8013848:	2b00      	cmp	r3, #0
 801384a:	d042      	beq.n	80138d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 801384c:	4293      	cmp	r3, r2
 801384e:	bfa8      	it	ge
 8013850:	4613      	movge	r3, r2
 8013852:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013856:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801385a:	2f00      	cmp	r7, #0
 801385c:	dd21      	ble.n	80138a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 801385e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8013862:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8013866:	f9b6 2000 	ldrsh.w	r2, [r6]
 801386a:	f9b9 3000 	ldrsh.w	r3, [r9]
 801386e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8013872:	a808      	add	r0, sp, #32
 8013874:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8013878:	a906      	add	r1, sp, #24
 801387a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801387e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013882:	f7ff ff97 	bl	80137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013886:	9001      	str	r0, [sp, #4]
 8013888:	b1d0      	cbz	r0, 80138c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801388a:	6822      	ldr	r2, [r4, #0]
 801388c:	a908      	add	r1, sp, #32
 801388e:	4620      	mov	r0, r4
 8013890:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8013892:	4790      	blx	r2
 8013894:	b9a0      	cbnz	r0, 80138c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8013896:	107f      	asrs	r7, r7, #1
 8013898:	9b01      	ldr	r3, [sp, #4]
 801389a:	f8ad 700e 	strh.w	r7, [sp, #14]
 801389e:	469a      	mov	sl, r3
 80138a0:	e7d9      	b.n	8013856 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80138a2:	d10d      	bne.n	80138c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80138a4:	2301      	movs	r3, #1
 80138a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80138aa:	f8b8 2000 	ldrh.w	r2, [r8]
 80138ae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80138b2:	440a      	add	r2, r1
 80138b4:	f8a8 2000 	strh.w	r2, [r8]
 80138b8:	882b      	ldrh	r3, [r5, #0]
 80138ba:	1a5b      	subs	r3, r3, r1
 80138bc:	802b      	strh	r3, [r5, #0]
 80138be:	e7bf      	b.n	8013840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80138c0:	f1ba 0f00 	cmp.w	sl, #0
 80138c4:	d0f1      	beq.n	80138aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80138c6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80138ca:	455b      	cmp	r3, fp
 80138cc:	bf08      	it	eq
 80138ce:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80138d0:	e7eb      	b.n	80138aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80138d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80138d6:	429a      	cmp	r2, r3
 80138d8:	bf04      	itt	eq
 80138da:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80138de:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80138e0:	b00b      	add	sp, #44	; 0x2c
 80138e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e6:	bf00      	nop
 80138e8:	20056534 	.word	0x20056534

080138ec <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80138ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ee:	b085      	sub	sp, #20
 80138f0:	6803      	ldr	r3, [r0, #0]
 80138f2:	4604      	mov	r4, r0
 80138f4:	4601      	mov	r1, r0
 80138f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138f8:	4668      	mov	r0, sp
 80138fa:	4798      	blx	r3
 80138fc:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8013900:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8013904:	2300      	movs	r3, #0
 8013906:	a902      	add	r1, sp, #8
 8013908:	4668      	mov	r0, sp
 801390a:	9302      	str	r3, [sp, #8]
 801390c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8013910:	f8ad 500e 	strh.w	r5, [sp, #14]
 8013914:	f7ff ff4e 	bl	80137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013918:	b340      	cbz	r0, 801396c <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801391a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801391e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8013922:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8013926:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801392a:	443a      	add	r2, r7
 801392c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8013930:	f8ad 0000 	strh.w	r0, [sp]
 8013934:	b292      	uxth	r2, r2
 8013936:	f8ad 1002 	strh.w	r1, [sp, #2]
 801393a:	b217      	sxth	r7, r2
 801393c:	42be      	cmp	r6, r7
 801393e:	bfd8      	it	le
 8013940:	b2b2      	uxthle	r2, r6
 8013942:	1a12      	subs	r2, r2, r0
 8013944:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013948:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801394c:	4413      	add	r3, r2
 801394e:	b29b      	uxth	r3, r3
 8013950:	b21a      	sxth	r2, r3
 8013952:	4295      	cmp	r5, r2
 8013954:	bfd8      	it	le
 8013956:	b2ab      	uxthle	r3, r5
 8013958:	1a5b      	subs	r3, r3, r1
 801395a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	4669      	mov	r1, sp
 8013962:	4620      	mov	r0, r4
 8013964:	691b      	ldr	r3, [r3, #16]
 8013966:	4798      	blx	r3
 8013968:	b005      	add	sp, #20
 801396a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801396c:	e9cd 0000 	strd	r0, r0, [sp]
 8013970:	e7f5      	b.n	801395e <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08013974 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8013974:	2200      	movs	r2, #0
 8013976:	2101      	movs	r1, #1
 8013978:	8082      	strh	r2, [r0, #4]
 801397a:	80c2      	strh	r2, [r0, #6]
 801397c:	8102      	strh	r2, [r0, #8]
 801397e:	8142      	strh	r2, [r0, #10]
 8013980:	8182      	strh	r2, [r0, #12]
 8013982:	81c2      	strh	r2, [r0, #14]
 8013984:	8202      	strh	r2, [r0, #16]
 8013986:	8242      	strh	r2, [r0, #18]
 8013988:	61c2      	str	r2, [r0, #28]
 801398a:	8402      	strh	r2, [r0, #32]
 801398c:	8442      	strh	r2, [r0, #34]	; 0x22
 801398e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013992:	6282      	str	r2, [r0, #40]	; 0x28
 8013994:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013998:	4905      	ldr	r1, [pc, #20]	; (80139b0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 801399a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801399e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80139a2:	6001      	str	r1, [r0, #0]
 80139a4:	8582      	strh	r2, [r0, #44]	; 0x2c
 80139a6:	22ff      	movs	r2, #255	; 0xff
 80139a8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	08026924 	.word	0x08026924

080139b4 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80139b4:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80139b8:	4602      	mov	r2, r0
 80139ba:	cb03      	ldmia	r3!, {r0, r1}
 80139bc:	6010      	str	r0, [r2, #0]
 80139be:	4610      	mov	r0, r2
 80139c0:	6051      	str	r1, [r2, #4]
 80139c2:	4770      	bx	lr

080139c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80139c4:	b507      	push	{r0, r1, r2, lr}
 80139c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80139ca:	ab01      	add	r3, sp, #4
 80139cc:	6809      	ldr	r1, [r1, #0]
 80139ce:	6800      	ldr	r0, [r0, #0]
 80139d0:	f003 fc74 	bl	80172bc <_ZN8touchgfx6muldivElllRl>
 80139d4:	b003      	add	sp, #12
 80139d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080139dc <_ZN8touchgfx7CWRUtil4sineEi>:
 80139dc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80139e0:	fb90 f3f2 	sdiv	r3, r0, r2
 80139e4:	fb03 0312 	mls	r3, r3, r2, r0
 80139e8:	4413      	add	r3, r2
 80139ea:	fb93 f0f2 	sdiv	r0, r3, r2
 80139ee:	fb02 3010 	mls	r0, r2, r0, r3
 80139f2:	4b0a      	ldr	r3, [pc, #40]	; (8013a1c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80139f4:	285a      	cmp	r0, #90	; 0x5a
 80139f6:	dc02      	bgt.n	80139fe <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80139f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80139fc:	4770      	bx	lr
 80139fe:	28b4      	cmp	r0, #180	; 0xb4
 8013a00:	dc02      	bgt.n	8013a08 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8013a02:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8013a06:	e7f7      	b.n	80139f8 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8013a08:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8013a0c:	bfd4      	ite	le
 8013a0e:	38b4      	suble	r0, #180	; 0xb4
 8013a10:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8013a14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013a18:	4240      	negs	r0, r0
 8013a1a:	4770      	bx	lr
 8013a1c:	08026a42 	.word	0x08026a42

08013a20 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8013a20:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8013a24:	f04f 0300 	mov.w	r3, #0
 8013a28:	bf2c      	ite	cs
 8013a2a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8013a2e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8013a32:	1899      	adds	r1, r3, r2
 8013a34:	4288      	cmp	r0, r1
 8013a36:	bf24      	itt	cs
 8013a38:	1853      	addcs	r3, r2, r1
 8013a3a:	1a40      	subcs	r0, r0, r1
 8013a3c:	0892      	lsrs	r2, r2, #2
 8013a3e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013a42:	d1f6      	bne.n	8013a32 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8013a44:	4618      	mov	r0, r3
 8013a46:	4770      	bx	lr

08013a48 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8013a48:	b510      	push	{r4, lr}
 8013a4a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8013a4e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8013a52:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8013a56:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8013a5a:	139b      	asrs	r3, r3, #14
 8013a5c:	13a4      	asrs	r4, r4, #14
 8013a5e:	429c      	cmp	r4, r3
 8013a60:	bfb8      	it	lt
 8013a62:	461c      	movlt	r4, r3
 8013a64:	2c01      	cmp	r4, #1
 8013a66:	dd07      	ble.n	8013a78 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8013a68:	fb91 f1f4 	sdiv	r1, r1, r4
 8013a6c:	fb90 f0f4 	sdiv	r0, r0, r4
 8013a70:	f7ff ffea 	bl	8013a48 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013a74:	4360      	muls	r0, r4
 8013a76:	bd10      	pop	{r4, pc}
 8013a78:	4340      	muls	r0, r0
 8013a7a:	fb01 0001 	mla	r0, r1, r1, r0
 8013a7e:	f7ff ffcf 	bl	8013a20 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8013a82:	e7f8      	b.n	8013a76 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08013a84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8013a84:	2800      	cmp	r0, #0
 8013a86:	b508      	push	{r3, lr}
 8013a88:	da05      	bge.n	8013a96 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8013a8a:	4240      	negs	r0, r0
 8013a8c:	f7ff fffa 	bl	8013a84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013a90:	4240      	negs	r0, r0
 8013a92:	b240      	sxtb	r0, r0
 8013a94:	bd08      	pop	{r3, pc}
 8013a96:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013a9a:	dc11      	bgt.n	8013ac0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8013a9c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8013aa0:	dd09      	ble.n	8013ab6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8013aa2:	4340      	muls	r0, r0
 8013aa4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8013aa8:	f7ff ffba 	bl	8013a20 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8013aac:	f7ff ffea 	bl	8013a84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013ab0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8013ab4:	e7ed      	b.n	8013a92 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8013ab6:	3003      	adds	r0, #3
 8013ab8:	4b02      	ldr	r3, [pc, #8]	; (8013ac4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8013aba:	10c0      	asrs	r0, r0, #3
 8013abc:	5618      	ldrsb	r0, [r3, r0]
 8013abe:	e7e9      	b.n	8013a94 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	e7e7      	b.n	8013a94 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8013ac4:	080269e6 	.word	0x080269e6

08013ac8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8013ac8:	1e03      	subs	r3, r0, #0
 8013aca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013acc:	460c      	mov	r4, r1
 8013ace:	4615      	mov	r5, r2
 8013ad0:	db01      	blt.n	8013ad6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8013ad2:	2900      	cmp	r1, #0
 8013ad4:	da06      	bge.n	8013ae4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8013ad6:	4b10      	ldr	r3, [pc, #64]	; (8013b18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8013ad8:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8013adc:	4a0f      	ldr	r2, [pc, #60]	; (8013b1c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8013ade:	4810      	ldr	r0, [pc, #64]	; (8013b20 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8013ae0:	f00f fb90 	bl	8023204 <__assert_func>
 8013ae4:	4299      	cmp	r1, r3
 8013ae6:	dd07      	ble.n	8013af8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4620      	mov	r0, r4
 8013aec:	f7ff ffec 	bl	8013ac8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013af0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8013af4:	b003      	add	sp, #12
 8013af6:	bd30      	pop	{r4, r5, pc}
 8013af8:	f7ff ffa6 	bl	8013a48 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013afc:	6028      	str	r0, [r5, #0]
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d0f8      	beq.n	8013af4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8013b02:	4602      	mov	r2, r0
 8013b04:	ab01      	add	r3, sp, #4
 8013b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f003 fbd6 	bl	80172bc <_ZN8touchgfx6muldivElllRl>
 8013b10:	f7ff ffb8 	bl	8013a84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013b14:	e7ee      	b.n	8013af4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8013b16:	bf00      	nop
 8013b18:	08026af8 	.word	0x08026af8
 8013b1c:	08026bbc 	.word	0x08026bbc
 8013b20:	08026b09 	.word	0x08026b09

08013b24 <_ZN8touchgfx4LineC1Ev>:
 8013b24:	b510      	push	{r4, lr}
 8013b26:	4604      	mov	r4, r0
 8013b28:	f7ff ff24 	bl	8013974 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8013b2c:	4b0c      	ldr	r3, [pc, #48]	; (8013b60 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8013b2e:	2220      	movs	r2, #32
 8013b30:	4620      	mov	r0, r4
 8013b32:	6023      	str	r3, [r4, #0]
 8013b34:	2300      	movs	r3, #0
 8013b36:	6422      	str	r2, [r4, #64]	; 0x40
 8013b38:	2212      	movs	r2, #18
 8013b3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013b3e:	6722      	str	r2, [r4, #112]	; 0x70
 8013b40:	60a3      	str	r3, [r4, #8]
 8013b42:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8013b46:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8013b4a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b4e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8013b52:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8013b56:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8013b5a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8013b5e:	bd10      	pop	{r4, pc}
 8013b60:	08026b48 	.word	0x08026b48

08013b64 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8013b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b68:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013b6e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8013b70:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013b72:	1af6      	subs	r6, r6, r3
 8013b74:	eba5 0502 	sub.w	r5, r5, r2
 8013b78:	f040 808e 	bne.w	8013c98 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 8013b7c:	b955      	cbnz	r5, 8013b94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 8013b7e:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8013b82:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013b86:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8013b8a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8013b8e:	b003      	add	sp, #12
 8013b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b94:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8013b98:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8013b9c:	f04f 0802 	mov.w	r8, #2
 8013ba0:	463a      	mov	r2, r7
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013ba6:	f003 fba8 	bl	80172fa <_ZN8touchgfx6muldivElll>
 8013baa:	4631      	mov	r1, r6
 8013bac:	463a      	mov	r2, r7
 8013bae:	fb90 f5f8 	sdiv	r5, r0, r8
 8013bb2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013bb4:	f003 fba1 	bl	80172fa <_ZN8touchgfx6muldivElll>
 8013bb8:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8013bbc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8013bbe:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8013bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bc2:	fb90 f0f8 	sdiv	r0, r0, r8
 8013bc6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8013bca:	eba8 0305 	sub.w	r3, r8, r5
 8013bce:	f1ba 0f00 	cmp.w	sl, #0
 8013bd2:	f040 80b8 	bne.w	8013d46 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8013bd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8013bd8:	1843      	adds	r3, r0, r1
 8013bda:	65a3      	str	r3, [r4, #88]	; 0x58
 8013bdc:	1b7b      	subs	r3, r7, r5
 8013bde:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013be0:	1983      	adds	r3, r0, r6
 8013be2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013be4:	19eb      	adds	r3, r5, r7
 8013be6:	6523      	str	r3, [r4, #80]	; 0x50
 8013be8:	1a33      	subs	r3, r6, r0
 8013bea:	6623      	str	r3, [r4, #96]	; 0x60
 8013bec:	eb05 0308 	add.w	r3, r5, r8
 8013bf0:	6563      	str	r3, [r4, #84]	; 0x54
 8013bf2:	1a0b      	subs	r3, r1, r0
 8013bf4:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8013bf8:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8013bfc:	6663      	str	r3, [r4, #100]	; 0x64
 8013bfe:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8013c02:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8013c06:	4672      	mov	r2, lr
 8013c08:	9301      	str	r3, [sp, #4]
 8013c0a:	f8cd c000 	str.w	ip, [sp]
 8013c0e:	f859 bb04 	ldr.w	fp, [r9], #4
 8013c12:	9b00      	ldr	r3, [sp, #0]
 8013c14:	45de      	cmp	lr, fp
 8013c16:	bfa8      	it	ge
 8013c18:	46de      	movge	lr, fp
 8013c1a:	455a      	cmp	r2, fp
 8013c1c:	bfb8      	it	lt
 8013c1e:	465a      	movlt	r2, fp
 8013c20:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8013c24:	45dc      	cmp	ip, fp
 8013c26:	bfa8      	it	ge
 8013c28:	46dc      	movge	ip, fp
 8013c2a:	455b      	cmp	r3, fp
 8013c2c:	bfb8      	it	lt
 8013c2e:	465b      	movlt	r3, fp
 8013c30:	9300      	str	r3, [sp, #0]
 8013c32:	9b01      	ldr	r3, [sp, #4]
 8013c34:	454b      	cmp	r3, r9
 8013c36:	d1ea      	bne.n	8013c0e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 8013c38:	f04f 0920 	mov.w	r9, #32
 8013c3c:	9b00      	ldr	r3, [sp, #0]
 8013c3e:	f1ba 0f01 	cmp.w	sl, #1
 8013c42:	fb92 f2f9 	sdiv	r2, r2, r9
 8013c46:	fb93 f3f9 	sdiv	r3, r3, r9
 8013c4a:	fb9e fef9 	sdiv	lr, lr, r9
 8013c4e:	fb9c fcf9 	sdiv	ip, ip, r9
 8013c52:	f102 0201 	add.w	r2, r2, #1
 8013c56:	f103 0301 	add.w	r3, r3, #1
 8013c5a:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 8013c5e:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 8013c62:	eba2 0e0e 	sub.w	lr, r2, lr
 8013c66:	eba3 0c0c 	sub.w	ip, r3, ip
 8013c6a:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 8013c6e:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 8013c72:	d18c      	bne.n	8013b8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8013c74:	eba8 0305 	sub.w	r3, r8, r5
 8013c78:	64a3      	str	r3, [r4, #72]	; 0x48
 8013c7a:	1843      	adds	r3, r0, r1
 8013c7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8013c7e:	1b7b      	subs	r3, r7, r5
 8013c80:	442f      	add	r7, r5
 8013c82:	4445      	add	r5, r8
 8013c84:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013c86:	1983      	adds	r3, r0, r6
 8013c88:	1a36      	subs	r6, r6, r0
 8013c8a:	1a08      	subs	r0, r1, r0
 8013c8c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013c8e:	6527      	str	r7, [r4, #80]	; 0x50
 8013c90:	6626      	str	r6, [r4, #96]	; 0x60
 8013c92:	6565      	str	r5, [r4, #84]	; 0x54
 8013c94:	6660      	str	r0, [r4, #100]	; 0x64
 8013c96:	e77a      	b.n	8013b8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8013c98:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8013c9c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8013ca0:	2d00      	cmp	r5, #0
 8013ca2:	f43f af7b 	beq.w	8013b9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8013ca6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8013caa:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8013cae:	fb93 f2f7 	sdiv	r2, r3, r7
 8013cb2:	fb07 3312 	mls	r3, r7, r2, r3
 8013cb6:	b34b      	cbz	r3, 8013d0c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8013cb8:	fb97 f2f3 	sdiv	r2, r7, r3
 8013cbc:	fb03 7712 	mls	r7, r3, r2, r7
 8013cc0:	2f00      	cmp	r7, #0
 8013cc2:	d1f4      	bne.n	8013cae <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	f24b 5204 	movw	r2, #46340	; 0xb504
 8013cca:	bf18      	it	ne
 8013ccc:	fb96 f6f3 	sdivne	r6, r6, r3
 8013cd0:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8013cd4:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8013cd8:	bf18      	it	ne
 8013cda:	fb95 f5f3 	sdivne	r5, r5, r3
 8013cde:	4291      	cmp	r1, r2
 8013ce0:	dd16      	ble.n	8013d10 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8013ce2:	2d00      	cmp	r5, #0
 8013ce4:	da47      	bge.n	8013d76 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8013ce6:	4b26      	ldr	r3, [pc, #152]	; (8013d80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8013ce8:	429d      	cmp	r5, r3
 8013cea:	da25      	bge.n	8013d38 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 8013cec:	426a      	negs	r2, r5
 8013cee:	f24b 5304 	movw	r3, #46340	; 0xb504
 8013cf2:	fb91 f1f3 	sdiv	r1, r1, r3
 8013cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cfa:	4299      	cmp	r1, r3
 8013cfc:	bfcc      	ite	gt
 8013cfe:	1c4b      	addgt	r3, r1, #1
 8013d00:	3301      	addle	r3, #1
 8013d02:	fb96 f6f3 	sdiv	r6, r6, r3
 8013d06:	fb95 f5f3 	sdiv	r5, r5, r3
 8013d0a:	e00f      	b.n	8013d2c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8013d0c:	463b      	mov	r3, r7
 8013d0e:	e7d9      	b.n	8013cc4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8013d10:	2d00      	cmp	r5, #0
 8013d12:	fb92 f2f1 	sdiv	r2, r2, r1
 8013d16:	da11      	bge.n	8013d3c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8013d18:	4269      	negs	r1, r5
 8013d1a:	f24b 5304 	movw	r3, #46340	; 0xb504
 8013d1e:	fb93 f3f1 	sdiv	r3, r3, r1
 8013d22:	429a      	cmp	r2, r3
 8013d24:	bfa8      	it	ge
 8013d26:	461a      	movge	r2, r3
 8013d28:	4356      	muls	r6, r2
 8013d2a:	4355      	muls	r5, r2
 8013d2c:	4629      	mov	r1, r5
 8013d2e:	4630      	mov	r0, r6
 8013d30:	f7ff fe8a 	bl	8013a48 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013d34:	4607      	mov	r7, r0
 8013d36:	e731      	b.n	8013b9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8013d38:	2200      	movs	r2, #0
 8013d3a:	e7ed      	b.n	8013d18 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 8013d3c:	4629      	mov	r1, r5
 8013d3e:	e7ec      	b.n	8013d1a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8013d40:	4629      	mov	r1, r5
 8013d42:	2200      	movs	r2, #0
 8013d44:	e7e9      	b.n	8013d1a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8013d46:	1a1b      	subs	r3, r3, r0
 8013d48:	64a3      	str	r3, [r4, #72]	; 0x48
 8013d4a:	1843      	adds	r3, r0, r1
 8013d4c:	1b5b      	subs	r3, r3, r5
 8013d4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013d50:	1b7b      	subs	r3, r7, r5
 8013d52:	4403      	add	r3, r0
 8013d54:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013d56:	1983      	adds	r3, r0, r6
 8013d58:	442b      	add	r3, r5
 8013d5a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013d5c:	19eb      	adds	r3, r5, r7
 8013d5e:	4403      	add	r3, r0
 8013d60:	6523      	str	r3, [r4, #80]	; 0x50
 8013d62:	1a33      	subs	r3, r6, r0
 8013d64:	442b      	add	r3, r5
 8013d66:	6623      	str	r3, [r4, #96]	; 0x60
 8013d68:	eb05 0308 	add.w	r3, r5, r8
 8013d6c:	1a1b      	subs	r3, r3, r0
 8013d6e:	6563      	str	r3, [r4, #84]	; 0x54
 8013d70:	1a0b      	subs	r3, r1, r0
 8013d72:	1b5b      	subs	r3, r3, r5
 8013d74:	e73e      	b.n	8013bf4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 8013d76:	4295      	cmp	r5, r2
 8013d78:	dde2      	ble.n	8013d40 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	e7b7      	b.n	8013cee <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 8013d7e:	bf00      	nop
 8013d80:	ffff4afc 	.word	0xffff4afc

08013d84 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8013d84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013d86:	428b      	cmp	r3, r1
 8013d88:	d102      	bne.n	8013d90 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8013d8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d003      	beq.n	8013d98 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8013d90:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8013d94:	f7ff bee6 	b.w	8013b64 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8013d98:	4770      	bx	lr

08013d9a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8013d9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013d9c:	428b      	cmp	r3, r1
 8013d9e:	d102      	bne.n	8013da6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8013da0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8013da2:	4293      	cmp	r3, r2
 8013da4:	d003      	beq.n	8013dae <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8013da6:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8013daa:	f7ff bedb 	b.w	8013b64 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8013dae:	4770      	bx	lr

08013db0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8013db0:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8013db4:	f7ff bed6 	b.w	8013b64 <_ZN8touchgfx4Line17updateCachedShapeEv>

08013db8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8013db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013dbc:	b0b3      	sub	sp, #204	; 0xcc
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	460a      	mov	r2, r1
 8013dc2:	4601      	mov	r1, r0
 8013dc4:	a803      	add	r0, sp, #12
 8013dc6:	ad32      	add	r5, sp, #200	; 0xc8
 8013dc8:	f00d fd48 	bl	802185c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013dd0:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8013dd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013dd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013dd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013dda:	1ac0      	subs	r0, r0, r3
 8013ddc:	eba1 0102 	sub.w	r1, r1, r2
 8013de0:	d43c      	bmi.n	8013e5c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8013de2:	2900      	cmp	r1, #0
 8013de4:	462a      	mov	r2, r5
 8013de6:	db33      	blt.n	8013e50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8013de8:	f7ff fe6e 	bl	8013ac8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013dec:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8013df0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013df2:	a803      	add	r0, sp, #12
 8013df4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013df6:	f00d fefc 	bl	8021bf2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8013dfa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8013dfc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013dfe:	a803      	add	r0, sp, #12
 8013e00:	f00d fe86 	bl	8021b10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013e04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d137      	bne.n	8013e7c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8013e0c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8013e0e:	2eb3      	cmp	r6, #179	; 0xb3
 8013e10:	dc34      	bgt.n	8013e7c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8013e12:	eba7 0906 	sub.w	r9, r7, r6
 8013e16:	4648      	mov	r0, r9
 8013e18:	f7ff fde0 	bl	80139dc <_ZN8touchgfx7CWRUtil4sineEi>
 8013e1c:	a901      	add	r1, sp, #4
 8013e1e:	9001      	str	r0, [sp, #4]
 8013e20:	4628      	mov	r0, r5
 8013e22:	f7ff fdcf 	bl	80139c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013e26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013e28:	eb00 0801 	add.w	r8, r0, r1
 8013e2c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8013e30:	f7ff fdd4 	bl	80139dc <_ZN8touchgfx7CWRUtil4sineEi>
 8013e34:	a902      	add	r1, sp, #8
 8013e36:	9002      	str	r0, [sp, #8]
 8013e38:	4628      	mov	r0, r5
 8013e3a:	f7ff fdc3 	bl	80139c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013e3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8013e40:	4641      	mov	r1, r8
 8013e42:	1a12      	subs	r2, r2, r0
 8013e44:	a803      	add	r0, sp, #12
 8013e46:	f00d fe63 	bl	8021b10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013e4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013e4c:	441e      	add	r6, r3
 8013e4e:	e7de      	b.n	8013e0e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8013e50:	4249      	negs	r1, r1
 8013e52:	f7ff fe39 	bl	8013ac8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013e56:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8013e5a:	e7c9      	b.n	8013df0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8013e5c:	2900      	cmp	r1, #0
 8013e5e:	f1c0 0000 	rsb	r0, r0, #0
 8013e62:	462a      	mov	r2, r5
 8013e64:	db04      	blt.n	8013e70 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8013e66:	f7ff fe2f 	bl	8013ac8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013e6a:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8013e6e:	e7bf      	b.n	8013df0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8013e70:	4249      	negs	r1, r1
 8013e72:	f7ff fe29 	bl	8013ac8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013e76:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8013e7a:	e7b9      	b.n	8013df0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8013e7c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8013e7e:	a803      	add	r0, sp, #12
 8013e80:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8013e82:	f00d fe45 	bl	8021b10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8013e8a:	a803      	add	r0, sp, #12
 8013e8c:	f00d fe40 	bl	8021b10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013e90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d123      	bne.n	8013ee0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8013e98:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8013e9a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8013e9e:	2e00      	cmp	r6, #0
 8013ea0:	dd1e      	ble.n	8013ee0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8013ea2:	eb06 0907 	add.w	r9, r6, r7
 8013ea6:	4648      	mov	r0, r9
 8013ea8:	f7ff fd98 	bl	80139dc <_ZN8touchgfx7CWRUtil4sineEi>
 8013eac:	a901      	add	r1, sp, #4
 8013eae:	9001      	str	r0, [sp, #4]
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	f7ff fd87 	bl	80139c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013eb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013eb8:	eb00 0801 	add.w	r8, r0, r1
 8013ebc:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8013ec0:	f7ff fd8c 	bl	80139dc <_ZN8touchgfx7CWRUtil4sineEi>
 8013ec4:	a902      	add	r1, sp, #8
 8013ec6:	9002      	str	r0, [sp, #8]
 8013ec8:	4628      	mov	r0, r5
 8013eca:	f7ff fd7b 	bl	80139c4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ece:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013ed0:	4641      	mov	r1, r8
 8013ed2:	1a12      	subs	r2, r2, r0
 8013ed4:	a803      	add	r0, sp, #12
 8013ed6:	f00d fe1b 	bl	8021b10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013eda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013edc:	1af6      	subs	r6, r6, r3
 8013ede:	e7de      	b.n	8013e9e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8013ee0:	21ff      	movs	r1, #255	; 0xff
 8013ee2:	a803      	add	r0, sp, #12
 8013ee4:	f00d ff89 	bl	8021dfa <_ZN8touchgfx6Canvas6renderEh>
 8013ee8:	4604      	mov	r4, r0
 8013eea:	a803      	add	r0, sp, #12
 8013eec:	f00d ffc4 	bl	8021e78 <_ZN8touchgfx6CanvasD1Ev>
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	b033      	add	sp, #204	; 0xcc
 8013ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013ef8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8013ef8:	2200      	movs	r2, #0
 8013efa:	8002      	strh	r2, [r0, #0]
 8013efc:	8042      	strh	r2, [r0, #2]
 8013efe:	8082      	strh	r2, [r0, #4]
 8013f00:	80c2      	strh	r2, [r0, #6]
 8013f02:	4770      	bx	lr

08013f04 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8013f04:	b570      	push	{r4, r5, r6, lr}
 8013f06:	6803      	ldr	r3, [r0, #0]
 8013f08:	4604      	mov	r4, r0
 8013f0a:	4615      	mov	r5, r2
 8013f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f0e:	4798      	blx	r3
 8013f10:	6823      	ldr	r3, [r4, #0]
 8013f12:	4629      	mov	r1, r5
 8013f14:	4620      	mov	r0, r4
 8013f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f1c:	4718      	bx	r3
	...

08013f20 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f26:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013f28:	4299      	cmp	r1, r3
 8013f2a:	d029      	beq.n	8013f80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8013f2c:	4b15      	ldr	r3, [pc, #84]	; (8013f84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	b92b      	cbnz	r3, 8013f3e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8013f32:	4b15      	ldr	r3, [pc, #84]	; (8013f88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013f34:	21ae      	movs	r1, #174	; 0xae
 8013f36:	4a15      	ldr	r2, [pc, #84]	; (8013f8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013f38:	4815      	ldr	r0, [pc, #84]	; (8013f90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013f3a:	f00f f963 	bl	8023204 <__assert_func>
 8013f3e:	4a15      	ldr	r2, [pc, #84]	; (8013f94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8013f40:	8812      	ldrh	r2, [r2, #0]
 8013f42:	428a      	cmp	r2, r1
 8013f44:	d803      	bhi.n	8013f4e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8013f46:	4b14      	ldr	r3, [pc, #80]	; (8013f98 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8013f48:	21af      	movs	r1, #175	; 0xaf
 8013f4a:	4a10      	ldr	r2, [pc, #64]	; (8013f8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013f4c:	e7f4      	b.n	8013f38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8013f4e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013f52:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013f56:	4b11      	ldr	r3, [pc, #68]	; (8013f9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8013f58:	7854      	ldrb	r4, [r2, #1]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8013f60:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8013f64:	682b      	ldr	r3, [r5, #0]
 8013f66:	69de      	ldr	r6, [r3, #28]
 8013f68:	4b0d      	ldr	r3, [pc, #52]	; (8013fa0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8013f6a:	6818      	ldr	r0, [r3, #0]
 8013f6c:	f7f3 fc9a 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013f70:	2300      	movs	r3, #0
 8013f72:	4602      	mov	r2, r0
 8013f74:	4621      	mov	r1, r4
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	4628      	mov	r0, r5
 8013f7a:	47b0      	blx	r6
 8013f7c:	b002      	add	sp, #8
 8013f7e:	bd70      	pop	{r4, r5, r6, pc}
 8013f80:	2000      	movs	r0, #0
 8013f82:	e7fb      	b.n	8013f7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8013f84:	200565ac 	.word	0x200565ac
 8013f88:	08026c27 	.word	0x08026c27
 8013f8c:	08026d5c 	.word	0x08026d5c
 8013f90:	08026c69 	.word	0x08026c69
 8013f94:	200565b0 	.word	0x200565b0
 8013f98:	08026c92 	.word	0x08026c92
 8013f9c:	200565b4 	.word	0x200565b4
 8013fa0:	200565b8 	.word	0x200565b8

08013fa4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8013fa4:	b570      	push	{r4, r5, r6, lr}
 8013fa6:	6803      	ldr	r3, [r0, #0]
 8013fa8:	4604      	mov	r4, r0
 8013faa:	b28d      	uxth	r5, r1
 8013fac:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013fae:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8013fb0:	4b10      	ldr	r3, [pc, #64]	; (8013ff4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	b92b      	cbnz	r3, 8013fc2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8013fb6:	4b10      	ldr	r3, [pc, #64]	; (8013ff8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8013fb8:	21ae      	movs	r1, #174	; 0xae
 8013fba:	4a10      	ldr	r2, [pc, #64]	; (8013ffc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8013fbc:	4810      	ldr	r0, [pc, #64]	; (8014000 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8013fbe:	f00f f921 	bl	8023204 <__assert_func>
 8013fc2:	4910      	ldr	r1, [pc, #64]	; (8014004 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8013fc4:	8809      	ldrh	r1, [r1, #0]
 8013fc6:	4291      	cmp	r1, r2
 8013fc8:	d803      	bhi.n	8013fd2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8013fca:	4b0f      	ldr	r3, [pc, #60]	; (8014008 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8013fcc:	21af      	movs	r1, #175	; 0xaf
 8013fce:	4a0b      	ldr	r2, [pc, #44]	; (8013ffc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8013fd0:	e7f4      	b.n	8013fbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8013fd2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013fd6:	4b0d      	ldr	r3, [pc, #52]	; (801400c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013fde:	6803      	ldr	r3, [r0, #0]
 8013fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe2:	4798      	blx	r3
 8013fe4:	1a29      	subs	r1, r5, r0
 8013fe6:	4633      	mov	r3, r6
 8013fe8:	4620      	mov	r0, r4
 8013fea:	b209      	sxth	r1, r1
 8013fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ff0:	4718      	bx	r3
 8013ff2:	bf00      	nop
 8013ff4:	200565ac 	.word	0x200565ac
 8013ff8:	08026c27 	.word	0x08026c27
 8013ffc:	08026d5c 	.word	0x08026d5c
 8014000:	08026c69 	.word	0x08026c69
 8014004:	200565b0 	.word	0x200565b0
 8014008:	08026c92 	.word	0x08026c92
 801400c:	200565b4 	.word	0x200565b4

08014010 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014018:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801401a:	b08c      	sub	sp, #48	; 0x30
 801401c:	4604      	mov	r4, r0
 801401e:	4293      	cmp	r3, r2
 8014020:	4688      	mov	r8, r1
 8014022:	d05f      	beq.n	80140e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8014024:	4e31      	ldr	r6, [pc, #196]	; (80140ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8014026:	6832      	ldr	r2, [r6, #0]
 8014028:	b92a      	cbnz	r2, 8014036 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801402a:	4b31      	ldr	r3, [pc, #196]	; (80140f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801402c:	21ae      	movs	r1, #174	; 0xae
 801402e:	4a31      	ldr	r2, [pc, #196]	; (80140f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8014030:	4831      	ldr	r0, [pc, #196]	; (80140f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8014032:	f00f f8e7 	bl	8023204 <__assert_func>
 8014036:	4d31      	ldr	r5, [pc, #196]	; (80140fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8014038:	8829      	ldrh	r1, [r5, #0]
 801403a:	4299      	cmp	r1, r3
 801403c:	d803      	bhi.n	8014046 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801403e:	4b30      	ldr	r3, [pc, #192]	; (8014100 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8014040:	21af      	movs	r1, #175	; 0xaf
 8014042:	4a2c      	ldr	r2, [pc, #176]	; (80140f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8014044:	e7f4      	b.n	8014030 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8014046:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801404a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801404e:	4b2d      	ldr	r3, [pc, #180]	; (8014104 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014056:	2a00      	cmp	r2, #0
 8014058:	d044      	beq.n	80140e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801405a:	784b      	ldrb	r3, [r1, #1]
 801405c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8014060:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8014064:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014068:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801406c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8014070:	4b25      	ldr	r3, [pc, #148]	; (8014108 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8014072:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801407c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8014080:	9207      	str	r2, [sp, #28]
 8014082:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014084:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014088:	f88d a020 	strb.w	sl, [sp, #32]
 801408c:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8014090:	9009      	str	r0, [sp, #36]	; 0x24
 8014092:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8014096:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801409a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801409e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80140a2:	b10a      	cbz	r2, 80140a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80140a4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80140a6:	b907      	cbnz	r7, 80140aa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80140a8:	689f      	ldr	r7, [r3, #8]
 80140aa:	f10d 0914 	add.w	r9, sp, #20
 80140ae:	4621      	mov	r1, r4
 80140b0:	4648      	mov	r0, r9
 80140b2:	f002 fff5 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80140b6:	6833      	ldr	r3, [r6, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d0b6      	beq.n	801402a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80140bc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80140be:	882b      	ldrh	r3, [r5, #0]
 80140c0:	428b      	cmp	r3, r1
 80140c2:	d9bc      	bls.n	801403e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80140c4:	4b11      	ldr	r3, [pc, #68]	; (801410c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80140c6:	6818      	ldr	r0, [r3, #0]
 80140c8:	f7f3 fbec 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 80140cc:	2300      	movs	r3, #0
 80140ce:	9001      	str	r0, [sp, #4]
 80140d0:	4638      	mov	r0, r7
 80140d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80140d6:	ab07      	add	r3, sp, #28
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	4643      	mov	r3, r8
 80140dc:	e899 0006 	ldmia.w	r9, {r1, r2}
 80140e0:	f7f3 fb71 	bl	80077c6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80140e4:	b00c      	add	sp, #48	; 0x30
 80140e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ea:	bf00      	nop
 80140ec:	200565ac 	.word	0x200565ac
 80140f0:	08026c27 	.word	0x08026c27
 80140f4:	08026d5c 	.word	0x08026d5c
 80140f8:	08026c69 	.word	0x08026c69
 80140fc:	200565b0 	.word	0x200565b0
 8014100:	08026c92 	.word	0x08026c92
 8014104:	200565b4 	.word	0x200565b4
 8014108:	2005653c 	.word	0x2005653c
 801410c:	200565b8 	.word	0x200565b8

08014110 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014110:	b40e      	push	{r1, r2, r3}
 8014112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801411a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801411c:	b09a      	sub	sp, #104	; 0x68
 801411e:	4605      	mov	r5, r0
 8014120:	4293      	cmp	r3, r2
 8014122:	d067      	beq.n	80141f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8014124:	aa24      	add	r2, sp, #144	; 0x90
 8014126:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8014208 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 801412a:	9202      	str	r2, [sp, #8]
 801412c:	f8da 2000 	ldr.w	r2, [sl]
 8014130:	b92a      	cbnz	r2, 801413e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8014132:	4b31      	ldr	r3, [pc, #196]	; (80141f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8014134:	21ae      	movs	r1, #174	; 0xae
 8014136:	4a31      	ldr	r2, [pc, #196]	; (80141fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8014138:	4831      	ldr	r0, [pc, #196]	; (8014200 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801413a:	f00f f863 	bl	8023204 <__assert_func>
 801413e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 801420c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8014142:	f8b8 1000 	ldrh.w	r1, [r8]
 8014146:	4299      	cmp	r1, r3
 8014148:	d803      	bhi.n	8014152 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801414a:	4b2e      	ldr	r3, [pc, #184]	; (8014204 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801414c:	21af      	movs	r1, #175	; 0xaf
 801414e:	4a2b      	ldr	r2, [pc, #172]	; (80141fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8014150:	e7f2      	b.n	8014138 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8014152:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8014210 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8014156:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801415a:	f8d9 3000 	ldr.w	r3, [r9]
 801415e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8014162:	6823      	ldr	r3, [r4, #0]
 8014164:	4620      	mov	r0, r4
 8014166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014168:	4798      	blx	r3
 801416a:	4607      	mov	r7, r0
 801416c:	b206      	sxth	r6, r0
 801416e:	a803      	add	r0, sp, #12
 8014170:	f003 fc55 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	4620      	mov	r0, r4
 8014178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801417a:	4798      	blx	r3
 801417c:	6823      	ldr	r3, [r4, #0]
 801417e:	4683      	mov	fp, r0
 8014180:	4620      	mov	r0, r4
 8014182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014184:	4798      	blx	r3
 8014186:	465b      	mov	r3, fp
 8014188:	9000      	str	r0, [sp, #0]
 801418a:	a803      	add	r0, sp, #12
 801418c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801418e:	9a02      	ldr	r2, [sp, #8]
 8014190:	f003 fc92 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014194:	f8da 3000 	ldr.w	r3, [sl]
 8014198:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 801419c:	2b00      	cmp	r3, #0
 801419e:	d0c8      	beq.n	8014132 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80141a0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80141a2:	f8b8 0000 	ldrh.w	r0, [r8]
 80141a6:	4290      	cmp	r0, r2
 80141a8:	d9cf      	bls.n	801414a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80141aa:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 80141ae:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80141b2:	f8d9 3000 	ldr.w	r3, [r9]
 80141b6:	7862      	ldrb	r2, [r4, #1]
 80141b8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 80141bc:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80141c0:	9400      	str	r4, [sp, #0]
 80141c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80141c6:	a803      	add	r0, sp, #12
 80141c8:	f001 fad1 	bl	801576e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80141cc:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 80141d0:	b203      	sxth	r3, r0
 80141d2:	18b1      	adds	r1, r6, r2
 80141d4:	2900      	cmp	r1, #0
 80141d6:	dd0b      	ble.n	80141f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 80141d8:	3b01      	subs	r3, #1
 80141da:	fb13 f302 	smulbb	r3, r3, r2
 80141de:	fb17 3300 	smlabb	r3, r7, r0, r3
 80141e2:	b21e      	sxth	r6, r3
 80141e4:	4630      	mov	r0, r6
 80141e6:	b01a      	add	sp, #104	; 0x68
 80141e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ec:	b003      	add	sp, #12
 80141ee:	4770      	bx	lr
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	dcf7      	bgt.n	80141e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80141f4:	2600      	movs	r6, #0
 80141f6:	e7f5      	b.n	80141e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80141f8:	08026c27 	.word	0x08026c27
 80141fc:	08026d5c 	.word	0x08026d5c
 8014200:	08026c69 	.word	0x08026c69
 8014204:	08026c92 	.word	0x08026c92
 8014208:	200565ac 	.word	0x200565ac
 801420c:	200565b0 	.word	0x200565b0
 8014210:	200565b4 	.word	0x200565b4

08014214 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8014214:	b570      	push	{r4, r5, r6, lr}
 8014216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801421a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801421c:	4604      	mov	r4, r0
 801421e:	4299      	cmp	r1, r3
 8014220:	d01e      	beq.n	8014260 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8014222:	6803      	ldr	r3, [r0, #0]
 8014224:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8014226:	4b0f      	ldr	r3, [pc, #60]	; (8014264 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	b92b      	cbnz	r3, 8014238 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801422c:	4b0e      	ldr	r3, [pc, #56]	; (8014268 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801422e:	21ae      	movs	r1, #174	; 0xae
 8014230:	4a0e      	ldr	r2, [pc, #56]	; (801426c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8014232:	480f      	ldr	r0, [pc, #60]	; (8014270 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8014234:	f00e ffe6 	bl	8023204 <__assert_func>
 8014238:	4b0e      	ldr	r3, [pc, #56]	; (8014274 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801423a:	881b      	ldrh	r3, [r3, #0]
 801423c:	428b      	cmp	r3, r1
 801423e:	d803      	bhi.n	8014248 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8014240:	4b0d      	ldr	r3, [pc, #52]	; (8014278 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8014242:	21af      	movs	r1, #175	; 0xaf
 8014244:	4a09      	ldr	r2, [pc, #36]	; (801426c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8014246:	e7f4      	b.n	8014232 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8014248:	4b0c      	ldr	r3, [pc, #48]	; (801427c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801424a:	6818      	ldr	r0, [r3, #0]
 801424c:	f7f3 fb2a 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 8014250:	2300      	movs	r3, #0
 8014252:	4601      	mov	r1, r0
 8014254:	46ac      	mov	ip, r5
 8014256:	4620      	mov	r0, r4
 8014258:	461a      	mov	r2, r3
 801425a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801425e:	4760      	bx	ip
 8014260:	2000      	movs	r0, #0
 8014262:	bd70      	pop	{r4, r5, r6, pc}
 8014264:	200565ac 	.word	0x200565ac
 8014268:	08026c27 	.word	0x08026c27
 801426c:	08026d5c 	.word	0x08026d5c
 8014270:	08026c69 	.word	0x08026c69
 8014274:	200565b0 	.word	0x200565b0
 8014278:	08026c92 	.word	0x08026c92
 801427c:	200565b8 	.word	0x200565b8

08014280 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8014280:	b538      	push	{r3, r4, r5, lr}
 8014282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014286:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014288:	4604      	mov	r4, r0
 801428a:	429a      	cmp	r2, r3
 801428c:	d014      	beq.n	80142b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801428e:	6803      	ldr	r3, [r0, #0]
 8014290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014292:	4798      	blx	r3
 8014294:	6823      	ldr	r3, [r4, #0]
 8014296:	4605      	mov	r5, r0
 8014298:	4620      	mov	r0, r4
 801429a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801429c:	4798      	blx	r3
 801429e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80142a2:	b22d      	sxth	r5, r5
 80142a4:	4601      	mov	r1, r0
 80142a6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80142aa:	bf06      	itte	eq
 80142ac:	4602      	moveq	r2, r0
 80142ae:	4629      	moveq	r1, r5
 80142b0:	462a      	movne	r2, r5
 80142b2:	4620      	mov	r0, r4
 80142b4:	f7f1 fa7e 	bl	80057b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80142b8:	bd38      	pop	{r3, r4, r5, pc}

080142ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80142ba:	888a      	ldrh	r2, [r1, #4]
 80142bc:	8582      	strh	r2, [r0, #44]	; 0x2c
 80142be:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80142c2:	b922      	cbnz	r2, 80142ce <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80142c4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80142c8:	b90b      	cbnz	r3, 80142ce <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80142ca:	f7ff bfd9 	b.w	8014280 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80142ce:	4770      	bx	lr

080142d0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80142d0:	2300      	movs	r3, #0
 80142d2:	8083      	strh	r3, [r0, #4]
 80142d4:	80c3      	strh	r3, [r0, #6]
 80142d6:	8003      	strh	r3, [r0, #0]
 80142d8:	8043      	strh	r3, [r0, #2]
 80142da:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80142de:	2bff      	cmp	r3, #255	; 0xff
 80142e0:	bf01      	itttt	eq
 80142e2:	890b      	ldrheq	r3, [r1, #8]
 80142e4:	8083      	strheq	r3, [r0, #4]
 80142e6:	894b      	ldrheq	r3, [r1, #10]
 80142e8:	80c3      	strheq	r3, [r0, #6]
 80142ea:	4770      	bx	lr

080142ec <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80142ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142ee:	4604      	mov	r4, r0
 80142f0:	466b      	mov	r3, sp
 80142f2:	6808      	ldr	r0, [r1, #0]
 80142f4:	6849      	ldr	r1, [r1, #4]
 80142f6:	c303      	stmia	r3!, {r0, r1}
 80142f8:	6823      	ldr	r3, [r4, #0]
 80142fa:	4669      	mov	r1, sp
 80142fc:	4620      	mov	r0, r4
 80142fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014300:	4798      	blx	r3
 8014302:	4b08      	ldr	r3, [pc, #32]	; (8014324 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801430a:	b10a      	cbz	r2, 8014310 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801430c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801430e:	b900      	cbnz	r0, 8014312 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014310:	6898      	ldr	r0, [r3, #8]
 8014312:	6803      	ldr	r3, [r0, #0]
 8014314:	4669      	mov	r1, sp
 8014316:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014318:	699d      	ldr	r5, [r3, #24]
 801431a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801431e:	47a8      	blx	r5
 8014320:	b003      	add	sp, #12
 8014322:	bd30      	pop	{r4, r5, pc}
 8014324:	2005653c 	.word	0x2005653c

08014328 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8014328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801432a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801432e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014330:	4606      	mov	r6, r0
 8014332:	4299      	cmp	r1, r3
 8014334:	d02a      	beq.n	801438c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8014336:	4b16      	ldr	r3, [pc, #88]	; (8014390 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	b92b      	cbnz	r3, 8014348 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801433c:	4b15      	ldr	r3, [pc, #84]	; (8014394 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801433e:	21ae      	movs	r1, #174	; 0xae
 8014340:	4a15      	ldr	r2, [pc, #84]	; (8014398 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8014342:	4816      	ldr	r0, [pc, #88]	; (801439c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8014344:	f00e ff5e 	bl	8023204 <__assert_func>
 8014348:	4a15      	ldr	r2, [pc, #84]	; (80143a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801434a:	8812      	ldrh	r2, [r2, #0]
 801434c:	428a      	cmp	r2, r1
 801434e:	d803      	bhi.n	8014358 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8014350:	4b14      	ldr	r3, [pc, #80]	; (80143a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8014352:	21af      	movs	r1, #175	; 0xaf
 8014354:	4a10      	ldr	r2, [pc, #64]	; (8014398 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8014356:	e7f4      	b.n	8014342 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8014358:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801435c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014360:	4b11      	ldr	r3, [pc, #68]	; (80143a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8014362:	7854      	ldrb	r4, [r2, #1]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801436a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801436e:	682b      	ldr	r3, [r5, #0]
 8014370:	69df      	ldr	r7, [r3, #28]
 8014372:	4b0e      	ldr	r3, [pc, #56]	; (80143ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8014374:	6818      	ldr	r0, [r3, #0]
 8014376:	f7f3 fa95 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 801437a:	2300      	movs	r3, #0
 801437c:	4602      	mov	r2, r0
 801437e:	4621      	mov	r1, r4
 8014380:	9300      	str	r3, [sp, #0]
 8014382:	4628      	mov	r0, r5
 8014384:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8014386:	47b8      	blx	r7
 8014388:	b003      	add	sp, #12
 801438a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801438c:	2000      	movs	r0, #0
 801438e:	e7fb      	b.n	8014388 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8014390:	200565ac 	.word	0x200565ac
 8014394:	08026c27 	.word	0x08026c27
 8014398:	08026e68 	.word	0x08026e68
 801439c:	08026c69 	.word	0x08026c69
 80143a0:	200565b0 	.word	0x200565b0
 80143a4:	08026c92 	.word	0x08026c92
 80143a8:	200565b4 	.word	0x200565b4
 80143ac:	200565b8 	.word	0x200565b8

080143b0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80143b0:	b570      	push	{r4, r5, r6, lr}
 80143b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143b6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80143b8:	4604      	mov	r4, r0
 80143ba:	4299      	cmp	r1, r3
 80143bc:	d01e      	beq.n	80143fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 80143be:	6803      	ldr	r3, [r0, #0]
 80143c0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80143c2:	4b0f      	ldr	r3, [pc, #60]	; (8014400 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	b92b      	cbnz	r3, 80143d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 80143c8:	4b0e      	ldr	r3, [pc, #56]	; (8014404 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 80143ca:	21ae      	movs	r1, #174	; 0xae
 80143cc:	4a0e      	ldr	r2, [pc, #56]	; (8014408 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80143ce:	480f      	ldr	r0, [pc, #60]	; (801440c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 80143d0:	f00e ff18 	bl	8023204 <__assert_func>
 80143d4:	4b0e      	ldr	r3, [pc, #56]	; (8014410 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 80143d6:	881b      	ldrh	r3, [r3, #0]
 80143d8:	428b      	cmp	r3, r1
 80143da:	d803      	bhi.n	80143e4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80143dc:	4b0d      	ldr	r3, [pc, #52]	; (8014414 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80143de:	21af      	movs	r1, #175	; 0xaf
 80143e0:	4a09      	ldr	r2, [pc, #36]	; (8014408 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80143e2:	e7f4      	b.n	80143ce <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80143e4:	4b0c      	ldr	r3, [pc, #48]	; (8014418 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80143e6:	6818      	ldr	r0, [r3, #0]
 80143e8:	f7f3 fa5c 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 80143ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80143ee:	4601      	mov	r1, r0
 80143f0:	46ac      	mov	ip, r5
 80143f2:	4620      	mov	r0, r4
 80143f4:	2300      	movs	r3, #0
 80143f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143fa:	4760      	bx	ip
 80143fc:	2000      	movs	r0, #0
 80143fe:	bd70      	pop	{r4, r5, r6, pc}
 8014400:	200565ac 	.word	0x200565ac
 8014404:	08026c27 	.word	0x08026c27
 8014408:	08026e68 	.word	0x08026e68
 801440c:	08026c69 	.word	0x08026c69
 8014410:	200565b0 	.word	0x200565b0
 8014414:	08026c92 	.word	0x08026c92
 8014418:	200565b8 	.word	0x200565b8

0801441c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014424:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8014426:	b08c      	sub	sp, #48	; 0x30
 8014428:	4604      	mov	r4, r0
 801442a:	4293      	cmp	r3, r2
 801442c:	460e      	mov	r6, r1
 801442e:	d05d      	beq.n	80144ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8014430:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8014510 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8014434:	f8d8 2000 	ldr.w	r2, [r8]
 8014438:	b92a      	cbnz	r2, 8014446 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801443a:	4b2e      	ldr	r3, [pc, #184]	; (80144f4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801443c:	21ae      	movs	r1, #174	; 0xae
 801443e:	4a2e      	ldr	r2, [pc, #184]	; (80144f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8014440:	482e      	ldr	r0, [pc, #184]	; (80144fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8014442:	f00e fedf 	bl	8023204 <__assert_func>
 8014446:	4f2e      	ldr	r7, [pc, #184]	; (8014500 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8014448:	8839      	ldrh	r1, [r7, #0]
 801444a:	4299      	cmp	r1, r3
 801444c:	d803      	bhi.n	8014456 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801444e:	4b2d      	ldr	r3, [pc, #180]	; (8014504 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8014450:	21af      	movs	r1, #175	; 0xaf
 8014452:	4a29      	ldr	r2, [pc, #164]	; (80144f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8014454:	e7f4      	b.n	8014440 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8014456:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801445a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801445e:	4b2a      	ldr	r3, [pc, #168]	; (8014508 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014466:	2a00      	cmp	r2, #0
 8014468:	d040      	beq.n	80144ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801446a:	784b      	ldrb	r3, [r1, #1]
 801446c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8014470:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8014474:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8014478:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801447c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014480:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8014484:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8014488:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801448c:	ad05      	add	r5, sp, #20
 801448e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014490:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8014494:	9207      	str	r2, [sp, #28]
 8014496:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801449a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801449e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80144a2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80144a6:	f88d a020 	strb.w	sl, [sp, #32]
 80144aa:	9009      	str	r0, [sp, #36]	; 0x24
 80144ac:	f7f0 fb82 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80144b0:	4621      	mov	r1, r4
 80144b2:	4681      	mov	r9, r0
 80144b4:	4628      	mov	r0, r5
 80144b6:	f002 fdf3 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80144ba:	f8d8 3000 	ldr.w	r3, [r8]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d0bb      	beq.n	801443a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80144c2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80144c4:	883b      	ldrh	r3, [r7, #0]
 80144c6:	428b      	cmp	r3, r1
 80144c8:	d9c1      	bls.n	801444e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80144ca:	4b10      	ldr	r3, [pc, #64]	; (801450c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 80144cc:	6818      	ldr	r0, [r3, #0]
 80144ce:	f7f3 f9e9 	bl	80078a4 <_ZNK8touchgfx5Texts7getTextEt>
 80144d2:	2300      	movs	r3, #0
 80144d4:	9303      	str	r3, [sp, #12]
 80144d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80144d8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80144dc:	ab07      	add	r3, sp, #28
 80144de:	4648      	mov	r0, r9
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	4633      	mov	r3, r6
 80144e4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80144e8:	f7f3 f96d 	bl	80077c6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80144ec:	b00c      	add	sp, #48	; 0x30
 80144ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144f2:	bf00      	nop
 80144f4:	08026c27 	.word	0x08026c27
 80144f8:	08026e68 	.word	0x08026e68
 80144fc:	08026c69 	.word	0x08026c69
 8014500:	200565b0 	.word	0x200565b0
 8014504:	08026c92 	.word	0x08026c92
 8014508:	200565b4 	.word	0x200565b4
 801450c:	200565b8 	.word	0x200565b8
 8014510:	200565ac 	.word	0x200565ac

08014514 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8014514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014518:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801451a:	4604      	mov	r4, r0
 801451c:	460e      	mov	r6, r1
 801451e:	b08e      	sub	sp, #56	; 0x38
 8014520:	b218      	sxth	r0, r3
 8014522:	8921      	ldrh	r1, [r4, #8]
 8014524:	005b      	lsls	r3, r3, #1
 8014526:	8962      	ldrh	r2, [r4, #10]
 8014528:	f8ad 0000 	strh.w	r0, [sp]
 801452c:	b29b      	uxth	r3, r3
 801452e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8014532:	1ac9      	subs	r1, r1, r3
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	b209      	sxth	r1, r1
 8014538:	b21b      	sxth	r3, r3
 801453a:	2900      	cmp	r1, #0
 801453c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014540:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014544:	dd5e      	ble.n	8014604 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8014546:	2b00      	cmp	r3, #0
 8014548:	dd5c      	ble.n	8014604 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801454a:	6830      	ldr	r0, [r6, #0]
 801454c:	ab02      	add	r3, sp, #8
 801454e:	6871      	ldr	r1, [r6, #4]
 8014550:	c303      	stmia	r3!, {r0, r1}
 8014552:	4669      	mov	r1, sp
 8014554:	a802      	add	r0, sp, #8
 8014556:	f7fd ff21 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 801455a:	4620      	mov	r0, r4
 801455c:	a902      	add	r1, sp, #8
 801455e:	f7ff fec5 	bl	80142ec <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8014562:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014564:	2800      	cmp	r0, #0
 8014566:	d05f      	beq.n	8014628 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8014568:	8963      	ldrh	r3, [r4, #10]
 801456a:	b202      	sxth	r2, r0
 801456c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014570:	2500      	movs	r5, #0
 8014572:	1a1f      	subs	r7, r3, r0
 8014574:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8014578:	f8ad 101c 	strh.w	r1, [sp, #28]
 801457c:	b21b      	sxth	r3, r3
 801457e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8014582:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8014586:	af04      	add	r7, sp, #16
 8014588:	1a09      	subs	r1, r1, r0
 801458a:	9506      	str	r5, [sp, #24]
 801458c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014590:	f8ad 5020 	strh.w	r5, [sp, #32]
 8014594:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8014598:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801459c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80145a0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80145a4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80145a8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80145ac:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80145b0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80145b4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80145b8:	ab06      	add	r3, sp, #24
 80145ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80145be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145c2:	e887 0003 	stmia.w	r7, {r0, r1}
 80145c6:	4631      	mov	r1, r6
 80145c8:	4638      	mov	r0, r7
 80145ca:	f7fd fee7 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 80145ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	dd12      	ble.n	80145fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80145d6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	dd0e      	ble.n	80145fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80145de:	6823      	ldr	r3, [r4, #0]
 80145e0:	4639      	mov	r1, r7
 80145e2:	4620      	mov	r0, r4
 80145e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e6:	4798      	blx	r3
 80145e8:	f7f0 fae4 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80145ec:	6803      	ldr	r3, [r0, #0]
 80145ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145f0:	4639      	mov	r1, r7
 80145f2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80145f6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80145fa:	47c0      	blx	r8
 80145fc:	3501      	adds	r5, #1
 80145fe:	2d04      	cmp	r5, #4
 8014600:	d1da      	bne.n	80145b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8014602:	e011      	b.n	8014628 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8014604:	6830      	ldr	r0, [r6, #0]
 8014606:	ab06      	add	r3, sp, #24
 8014608:	6871      	ldr	r1, [r6, #4]
 801460a:	c303      	stmia	r3!, {r0, r1}
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	a906      	add	r1, sp, #24
 8014610:	4620      	mov	r0, r4
 8014612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014614:	4798      	blx	r3
 8014616:	f7f0 facd 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 801461a:	6803      	ldr	r3, [r0, #0]
 801461c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801461e:	a906      	add	r1, sp, #24
 8014620:	699d      	ldr	r5, [r3, #24]
 8014622:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014626:	47a8      	blx	r5
 8014628:	b00e      	add	sp, #56	; 0x38
 801462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014630 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8014630:	4b02      	ldr	r3, [pc, #8]	; (801463c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8014632:	6018      	str	r0, [r3, #0]
 8014634:	4b02      	ldr	r3, [pc, #8]	; (8014640 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014636:	6019      	str	r1, [r3, #0]
 8014638:	4770      	bx	lr
 801463a:	bf00      	nop
 801463c:	20056544 	.word	0x20056544
 8014640:	20056558 	.word	0x20056558

08014644 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8014644:	b538      	push	{r3, r4, r5, lr}
 8014646:	4c2b      	ldr	r4, [pc, #172]	; (80146f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8014648:	4b2b      	ldr	r3, [pc, #172]	; (80146f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801464a:	6821      	ldr	r1, [r4, #0]
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	4281      	cmp	r1, r0
 8014650:	4d2a      	ldr	r5, [pc, #168]	; (80146fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8014652:	492b      	ldr	r1, [pc, #172]	; (8014700 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8014654:	d108      	bne.n	8014668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8014656:	682b      	ldr	r3, [r5, #0]
 8014658:	4293      	cmp	r3, r2
 801465a:	d105      	bne.n	8014668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801465c:	6808      	ldr	r0, [r1, #0]
 801465e:	280f      	cmp	r0, #15
 8014660:	bf94      	ite	ls
 8014662:	2000      	movls	r0, #0
 8014664:	2001      	movhi	r0, #1
 8014666:	bd38      	pop	{r3, r4, r5, pc}
 8014668:	4b26      	ldr	r3, [pc, #152]	; (8014704 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801466a:	6020      	str	r0, [r4, #0]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	602a      	str	r2, [r5, #0]
 8014670:	4298      	cmp	r0, r3
 8014672:	d905      	bls.n	8014680 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8014674:	4b24      	ldr	r3, [pc, #144]	; (8014708 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8014676:	2137      	movs	r1, #55	; 0x37
 8014678:	4a24      	ldr	r2, [pc, #144]	; (801470c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801467a:	4825      	ldr	r0, [pc, #148]	; (8014710 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801467c:	f00e fdc2 	bl	8023204 <__assert_func>
 8014680:	f010 0403 	ands.w	r4, r0, #3
 8014684:	bf1f      	itttt	ne
 8014686:	f1c4 0504 	rsbne	r5, r4, #4
 801468a:	3b04      	subne	r3, #4
 801468c:	1952      	addne	r2, r2, r5
 801468e:	191b      	addne	r3, r3, r4
 8014690:	4d20      	ldr	r5, [pc, #128]	; (8014714 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8014692:	4402      	add	r2, r0
 8014694:	1a1b      	subs	r3, r3, r0
 8014696:	3001      	adds	r0, #1
 8014698:	602a      	str	r2, [r5, #0]
 801469a:	f020 0401 	bic.w	r4, r0, #1
 801469e:	42a3      	cmp	r3, r4
 80146a0:	d203      	bcs.n	80146aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 80146a2:	4b19      	ldr	r3, [pc, #100]	; (8014708 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80146a4:	214a      	movs	r1, #74	; 0x4a
 80146a6:	4a19      	ldr	r2, [pc, #100]	; (801470c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80146a8:	e7e7      	b.n	801467a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80146aa:	f010 0002 	ands.w	r0, r0, #2
 80146ae:	bf1f      	itttt	ne
 80146b0:	f1c0 0504 	rsbne	r5, r0, #4
 80146b4:	1952      	addne	r2, r2, r5
 80146b6:	1f05      	subne	r5, r0, #4
 80146b8:	195b      	addne	r3, r3, r5
 80146ba:	4422      	add	r2, r4
 80146bc:	4d16      	ldr	r5, [pc, #88]	; (8014718 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80146be:	1b1b      	subs	r3, r3, r4
 80146c0:	602a      	str	r2, [r5, #0]
 80146c2:	429c      	cmp	r4, r3
 80146c4:	d903      	bls.n	80146ce <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80146c6:	4b10      	ldr	r3, [pc, #64]	; (8014708 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80146c8:	215d      	movs	r1, #93	; 0x5d
 80146ca:	4a10      	ldr	r2, [pc, #64]	; (801470c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80146cc:	e7d5      	b.n	801467a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80146ce:	b120      	cbz	r0, 80146da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80146d0:	f1c0 0504 	rsb	r5, r0, #4
 80146d4:	3804      	subs	r0, #4
 80146d6:	442a      	add	r2, r5
 80146d8:	4403      	add	r3, r0
 80146da:	1b1b      	subs	r3, r3, r4
 80146dc:	4422      	add	r2, r4
 80146de:	480f      	ldr	r0, [pc, #60]	; (801471c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80146e0:	2b0f      	cmp	r3, #15
 80146e2:	600b      	str	r3, [r1, #0]
 80146e4:	6002      	str	r2, [r0, #0]
 80146e6:	d803      	bhi.n	80146f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80146e8:	4b0d      	ldr	r3, [pc, #52]	; (8014720 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80146ea:	2170      	movs	r1, #112	; 0x70
 80146ec:	4a07      	ldr	r2, [pc, #28]	; (801470c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80146ee:	e7c4      	b.n	801467a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80146f0:	2001      	movs	r0, #1
 80146f2:	e7b8      	b.n	8014666 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80146f4:	2005654c 	.word	0x2005654c
 80146f8:	20056544 	.word	0x20056544
 80146fc:	20056554 	.word	0x20056554
 8014700:	2005655c 	.word	0x2005655c
 8014704:	20056558 	.word	0x20056558
 8014708:	08026efc 	.word	0x08026efc
 801470c:	08026fc4 	.word	0x08026fc4
 8014710:	08026f35 	.word	0x08026f35
 8014714:	20056560 	.word	0x20056560
 8014718:	20056550 	.word	0x20056550
 801471c:	20056548 	.word	0x20056548
 8014720:	08026f7f 	.word	0x08026f7f

08014724 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8014724:	4b04      	ldr	r3, [pc, #16]	; (8014738 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8014726:	6818      	ldr	r0, [r3, #0]
 8014728:	b120      	cbz	r0, 8014734 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801472a:	4b04      	ldr	r3, [pc, #16]	; (801473c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801472c:	6818      	ldr	r0, [r3, #0]
 801472e:	3000      	adds	r0, #0
 8014730:	bf18      	it	ne
 8014732:	2001      	movne	r0, #1
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop
 8014738:	20056544 	.word	0x20056544
 801473c:	20056558 	.word	0x20056558

08014740 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8014740:	4b01      	ldr	r3, [pc, #4]	; (8014748 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8014742:	6818      	ldr	r0, [r3, #0]
 8014744:	4770      	bx	lr
 8014746:	bf00      	nop
 8014748:	2005654c 	.word	0x2005654c

0801474c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801474c:	4b01      	ldr	r3, [pc, #4]	; (8014754 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801474e:	6818      	ldr	r0, [r3, #0]
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	20056554 	.word	0x20056554

08014758 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8014758:	4b01      	ldr	r3, [pc, #4]	; (8014760 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801475a:	6818      	ldr	r0, [r3, #0]
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop
 8014760:	20056560 	.word	0x20056560

08014764 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8014764:	4b01      	ldr	r3, [pc, #4]	; (801476c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8014766:	6818      	ldr	r0, [r3, #0]
 8014768:	4770      	bx	lr
 801476a:	bf00      	nop
 801476c:	20056550 	.word	0x20056550

08014770 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014770:	4b01      	ldr	r3, [pc, #4]	; (8014778 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014772:	6818      	ldr	r0, [r3, #0]
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop
 8014778:	20056548 	.word	0x20056548

0801477c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801477c:	4b01      	ldr	r3, [pc, #4]	; (8014784 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801477e:	6818      	ldr	r0, [r3, #0]
 8014780:	4770      	bx	lr
 8014782:	bf00      	nop
 8014784:	2005655c 	.word	0x2005655c

08014788 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014788:	4b01      	ldr	r3, [pc, #4]	; (8014790 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801478a:	6019      	str	r1, [r3, #0]
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	20056564 	.word	0x20056564

08014794 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014798:	4696      	mov	lr, r2
 801479a:	b097      	sub	sp, #92	; 0x5c
 801479c:	4605      	mov	r5, r0
 801479e:	4614      	mov	r4, r2
 80147a0:	460e      	mov	r6, r1
 80147a2:	461f      	mov	r7, r3
 80147a4:	f10d 0c1c 	add.w	ip, sp, #28
 80147a8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80147ac:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80147b0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80147b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147bc:	f8de 3000 	ldr.w	r3, [lr]
 80147c0:	f104 0e14 	add.w	lr, r4, #20
 80147c4:	f8cc 3000 	str.w	r3, [ip]
 80147c8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80147cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147d4:	f8de 3000 	ldr.w	r3, [lr]
 80147d8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80147dc:	f8cc 3000 	str.w	r3, [ip]
 80147e0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80147e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147ec:	f8de 3000 	ldr.w	r3, [lr]
 80147f0:	4631      	mov	r1, r6
 80147f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147f4:	4628      	mov	r0, r5
 80147f6:	f8cc 3000 	str.w	r3, [ip]
 80147fa:	682b      	ldr	r3, [r5, #0]
 80147fc:	9201      	str	r2, [sp, #4]
 80147fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014800:	f8cd 8008 	str.w	r8, [sp, #8]
 8014804:	9200      	str	r2, [sp, #0]
 8014806:	aa07      	add	r2, sp, #28
 8014808:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801480c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8014810:	463b      	mov	r3, r7
 8014812:	47d8      	blx	fp
 8014814:	46a6      	mov	lr, r4
 8014816:	f10d 0c1c 	add.w	ip, sp, #28
 801481a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801481e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014822:	f8de 3000 	ldr.w	r3, [lr]
 8014826:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801482a:	343c      	adds	r4, #60	; 0x3c
 801482c:	f8cc 3000 	str.w	r3, [ip]
 8014830:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014834:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801483c:	f8de 3000 	ldr.w	r3, [lr]
 8014840:	f8cc 3000 	str.w	r3, [ip]
 8014844:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801484a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	4631      	mov	r1, r6
 8014852:	4628      	mov	r0, r5
 8014854:	f8cc 3000 	str.w	r3, [ip]
 8014858:	682b      	ldr	r3, [r5, #0]
 801485a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801485e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014860:	f8cd 8008 	str.w	r8, [sp, #8]
 8014864:	9201      	str	r2, [sp, #4]
 8014866:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014868:	9200      	str	r2, [sp, #0]
 801486a:	aa07      	add	r2, sp, #28
 801486c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 801486e:	463b      	mov	r3, r7
 8014870:	47a0      	blx	r4
 8014872:	b017      	add	sp, #92	; 0x5c
 8014874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014878 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014878:	2000      	movs	r0, #0
 801487a:	4770      	bx	lr

0801487c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014880:	b08d      	sub	sp, #52	; 0x34
 8014882:	4688      	mov	r8, r1
 8014884:	f8d3 c000 	ldr.w	ip, [r3]
 8014888:	9916      	ldr	r1, [sp, #88]	; 0x58
 801488a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801488e:	680f      	ldr	r7, [r1, #0]
 8014890:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014894:	eba7 070c 	sub.w	r7, r7, ip
 8014898:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801489c:	edd3 6a07 	vldr	s13, [r3, #28]
 80148a0:	42bc      	cmp	r4, r7
 80148a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80148a4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80148a8:	bfa8      	it	ge
 80148aa:	463c      	movge	r4, r7
 80148ac:	f9b1 9000 	ldrsh.w	r9, [r1]
 80148b0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80148b4:	ee07 4a90 	vmov	s15, r4
 80148b8:	eb09 0e0c 	add.w	lr, r9, ip
 80148bc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80148c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80148c4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80148c8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80148cc:	4571      	cmp	r1, lr
 80148ce:	ee25 4a04 	vmul.f32	s8, s10, s8
 80148d2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80148d6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80148da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80148de:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80148e2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80148e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80148ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 80148ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 80148f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80148f6:	f340 808c 	ble.w	8014a12 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80148fa:	eba1 060e 	sub.w	r6, r1, lr
 80148fe:	fb96 f5f4 	sdiv	r5, r6, r4
 8014902:	ee07 5a10 	vmov	s14, r5
 8014906:	2d00      	cmp	r5, #0
 8014908:	fb04 6615 	mls	r6, r4, r5, r6
 801490c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014910:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014914:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014918:	eea7 1a05 	vfma.f32	s2, s14, s10
 801491c:	dd12      	ble.n	8014944 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801491e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014922:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014926:	ee31 2a45 	vsub.f32	s4, s2, s10
 801492a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014932:	bf14      	ite	ne
 8014934:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014938:	eeb0 7a67 	vmoveq.f32	s14, s15
 801493c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014940:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014944:	fb05 f204 	mul.w	r2, r5, r4
 8014948:	1abf      	subs	r7, r7, r2
 801494a:	4494      	add	ip, r2
 801494c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014950:	4411      	add	r1, r2
 8014952:	eb09 020c 	add.w	r2, r9, ip
 8014956:	b209      	sxth	r1, r1
 8014958:	443a      	add	r2, r7
 801495a:	428a      	cmp	r2, r1
 801495c:	bfc4      	itt	gt
 801495e:	eba1 0209 	subgt.w	r2, r1, r9
 8014962:	eba2 070c 	subgt.w	r7, r2, ip
 8014966:	2f00      	cmp	r7, #0
 8014968:	dd50      	ble.n	8014a0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801496a:	fb97 f1f4 	sdiv	r1, r7, r4
 801496e:	fb04 7211 	mls	r2, r4, r1, r7
 8014972:	b90a      	cbnz	r2, 8014978 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014974:	3901      	subs	r1, #1
 8014976:	4622      	mov	r2, r4
 8014978:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801497c:	6840      	ldr	r0, [r0, #4]
 801497e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014982:	44b6      	add	lr, r6
 8014984:	f8d0 a000 	ldr.w	sl, [r0]
 8014988:	2900      	cmp	r1, #0
 801498a:	bfcc      	ite	gt
 801498c:	46a1      	movgt	r9, r4
 801498e:	4691      	movle	r9, r2
 8014990:	900b      	str	r0, [sp, #44]	; 0x2c
 8014992:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014994:	fb04 e505 	mla	r5, r4, r5, lr
 8014998:	eef0 6a42 	vmov.f32	s13, s4
 801499c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80149a0:	9008      	str	r0, [sp, #32]
 80149a2:	eeb0 7a61 	vmov.f32	s14, s3
 80149a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80149a8:	695b      	ldr	r3, [r3, #20]
 80149aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80149ae:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80149b2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80149b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149b8:	445b      	add	r3, fp
 80149ba:	9307      	str	r3, [sp, #28]
 80149bc:	ee16 3a90 	vmov	r3, s13
 80149c0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80149c4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80149c8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80149cc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80149d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80149d4:	ee17 7a90 	vmov	r7, s15
 80149d8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80149dc:	fb97 f7f4 	sdiv	r7, r7, r4
 80149e0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80149e4:	ee17 ca90 	vmov	ip, s15
 80149e8:	fb9c fcf4 	sdiv	ip, ip, r4
 80149ec:	fb0c 3306 	mla	r3, ip, r6, r3
 80149f0:	9302      	str	r3, [sp, #8]
 80149f2:	ee17 3a10 	vmov	r3, s14
 80149f6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80149fa:	fb07 3706 	mla	r7, r7, r6, r3
 80149fe:	eba9 0306 	sub.w	r3, r9, r6
 8014a02:	e9cd 4700 	strd	r4, r7, [sp]
 8014a06:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014a0a:	47a0      	blx	r4
 8014a0c:	b00d      	add	sp, #52	; 0x34
 8014a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a12:	2500      	movs	r5, #0
 8014a14:	462e      	mov	r6, r5
 8014a16:	e799      	b.n	801494c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a1c:	b0db      	sub	sp, #364	; 0x16c
 8014a1e:	461d      	mov	r5, r3
 8014a20:	4614      	mov	r4, r2
 8014a22:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014a26:	910f      	str	r1, [sp, #60]	; 0x3c
 8014a28:	4629      	mov	r1, r5
 8014a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014a2c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014a30:	9009      	str	r0, [sp, #36]	; 0x24
 8014a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a34:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014a38:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014a3c:	9310      	str	r3, [sp, #64]	; 0x40
 8014a3e:	6803      	ldr	r3, [r0, #0]
 8014a40:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8014a42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014a46:	47b8      	blx	r7
 8014a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a4a:	6058      	str	r0, [r3, #4]
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	f000 83a1 	beq.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a52:	682b      	ldr	r3, [r5, #0]
 8014a54:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014a58:	ed94 7a02 	vldr	s14, [r4, #8]
 8014a5c:	9314      	str	r3, [sp, #80]	; 0x50
 8014a5e:	686b      	ldr	r3, [r5, #4]
 8014a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a64:	9315      	str	r3, [sp, #84]	; 0x54
 8014a66:	4bc1      	ldr	r3, [pc, #772]	; (8014d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014a68:	7819      	ldrb	r1, [r3, #0]
 8014a6a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014a6e:	2900      	cmp	r1, #0
 8014a70:	bf16      	itet	ne
 8014a72:	4619      	movne	r1, r3
 8014a74:	4611      	moveq	r1, r2
 8014a76:	4613      	movne	r3, r2
 8014a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7c:	9116      	str	r1, [sp, #88]	; 0x58
 8014a7e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014a82:	f240 8387 	bls.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a86:	ed94 7a07 	vldr	s14, [r4, #28]
 8014a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a92:	f240 837f 	bls.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a96:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa2:	f240 8377 	bls.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014aa6:	6822      	ldr	r2, [r4, #0]
 8014aa8:	4bb1      	ldr	r3, [pc, #708]	; (8014d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	f2c0 8372 	blt.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ab0:	49b0      	ldr	r1, [pc, #704]	; (8014d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014ab2:	6963      	ldr	r3, [r4, #20]
 8014ab4:	428a      	cmp	r2, r1
 8014ab6:	f300 836d 	bgt.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014aba:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014abe:	48ae      	ldr	r0, [pc, #696]	; (8014d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014ac0:	33ff      	adds	r3, #255	; 0xff
 8014ac2:	4283      	cmp	r3, r0
 8014ac4:	f200 8366 	bhi.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ac8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014aca:	4dac      	ldr	r5, [pc, #688]	; (8014d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014acc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014ad0:	33ff      	adds	r3, #255	; 0xff
 8014ad2:	42ab      	cmp	r3, r5
 8014ad4:	f200 835e 	bhi.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ad8:	6862      	ldr	r2, [r4, #4]
 8014ada:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014ade:	33ff      	adds	r3, #255	; 0xff
 8014ae0:	4283      	cmp	r3, r0
 8014ae2:	f200 8357 	bhi.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ae6:	69a1      	ldr	r1, [r4, #24]
 8014ae8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014aec:	33ff      	adds	r3, #255	; 0xff
 8014aee:	4283      	cmp	r3, r0
 8014af0:	f200 8350 	bhi.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014af6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014afa:	30ff      	adds	r0, #255	; 0xff
 8014afc:	42a8      	cmp	r0, r5
 8014afe:	f200 8349 	bhi.w	8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014b02:	428a      	cmp	r2, r1
 8014b04:	f280 8110 	bge.w	8014d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	f300 8119 	bgt.w	8014d40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014b0e:	4299      	cmp	r1, r3
 8014b10:	f280 811d 	bge.w	8014d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014b14:	2502      	movs	r5, #2
 8014b16:	2701      	movs	r7, #1
 8014b18:	46a9      	mov	r9, r5
 8014b1a:	46b8      	mov	r8, r7
 8014b1c:	f04f 0a00 	mov.w	sl, #0
 8014b20:	4621      	mov	r1, r4
 8014b22:	a849      	add	r0, sp, #292	; 0x124
 8014b24:	f003 fd3e 	bl	80185a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014b28:	4622      	mov	r2, r4
 8014b2a:	4653      	mov	r3, sl
 8014b2c:	a949      	add	r1, sp, #292	; 0x124
 8014b2e:	f8cd 9000 	str.w	r9, [sp]
 8014b32:	a819      	add	r0, sp, #100	; 0x64
 8014b34:	f003 fe66 	bl	8018804 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014b38:	4622      	mov	r2, r4
 8014b3a:	4653      	mov	r3, sl
 8014b3c:	a949      	add	r1, sp, #292	; 0x124
 8014b3e:	f8cd 8000 	str.w	r8, [sp]
 8014b42:	a829      	add	r0, sp, #164	; 0xa4
 8014b44:	f003 fe5e 	bl	8018804 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014b48:	4643      	mov	r3, r8
 8014b4a:	4622      	mov	r2, r4
 8014b4c:	a949      	add	r1, sp, #292	; 0x124
 8014b4e:	f8cd 9000 	str.w	r9, [sp]
 8014b52:	a839      	add	r0, sp, #228	; 0xe4
 8014b54:	f003 fe56 	bl	8018804 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014b58:	42af      	cmp	r7, r5
 8014b5a:	af12      	add	r7, sp, #72	; 0x48
 8014b5c:	bfb7      	itett	lt
 8014b5e:	2300      	movlt	r3, #0
 8014b60:	2301      	movge	r3, #1
 8014b62:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014b64:	ac19      	addlt	r4, sp, #100	; 0x64
 8014b66:	bfb1      	iteee	lt
 8014b68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014b6a:	ad19      	addge	r5, sp, #100	; 0x64
 8014b6c:	930e      	strge	r3, [sp, #56]	; 0x38
 8014b6e:	ac29      	addge	r4, sp, #164	; 0xa4
 8014b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b76:	e887 0003 	stmia.w	r7, {r0, r1}
 8014b7a:	b928      	cbnz	r0, 8014b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014b7c:	4b80      	ldr	r3, [pc, #512]	; (8014d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014b7e:	6818      	ldr	r0, [r3, #0]
 8014b80:	6803      	ldr	r3, [r0, #0]
 8014b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b84:	4798      	blx	r3
 8014b86:	6038      	str	r0, [r7, #0]
 8014b88:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014b8a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b92:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014b94:	930c      	str	r3, [sp, #48]	; 0x30
 8014b96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014b98:	6963      	ldr	r3, [r4, #20]
 8014b9a:	440b      	add	r3, r1
 8014b9c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014ba0:	4408      	add	r0, r1
 8014ba2:	b200      	sxth	r0, r0
 8014ba4:	4283      	cmp	r3, r0
 8014ba6:	900d      	str	r0, [sp, #52]	; 0x34
 8014ba8:	f280 80dd 	bge.w	8014d66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014bac:	428b      	cmp	r3, r1
 8014bae:	da08      	bge.n	8014bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014bb0:	2a00      	cmp	r2, #0
 8014bb2:	dd06      	ble.n	8014bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014bb4:	1acb      	subs	r3, r1, r3
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	f2c0 80e4 	blt.w	8014d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f300 80e2 	bgt.w	8014d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014bc2:	6967      	ldr	r7, [r4, #20]
 8014bc4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bca:	443b      	add	r3, r7
 8014bcc:	461f      	mov	r7, r3
 8014bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bd0:	1bdf      	subs	r7, r3, r7
 8014bd2:	4297      	cmp	r7, r2
 8014bd4:	bfa8      	it	ge
 8014bd6:	4617      	movge	r7, r2
 8014bd8:	2f00      	cmp	r7, #0
 8014bda:	f340 8166 	ble.w	8014eaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014bde:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014be0:	6829      	ldr	r1, [r5, #0]
 8014be2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014be6:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014bea:	4411      	add	r1, r2
 8014bec:	6820      	ldr	r0, [r4, #0]
 8014bee:	4299      	cmp	r1, r3
 8014bf0:	dd1a      	ble.n	8014c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014bf2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014bf6:	4402      	add	r2, r0
 8014bf8:	440b      	add	r3, r1
 8014bfa:	b21b      	sxth	r3, r3
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	dc13      	bgt.n	8014c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014c00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c02:	a912      	add	r1, sp, #72	; 0x48
 8014c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	9206      	str	r2, [sp, #24]
 8014c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c0e:	9500      	str	r5, [sp, #0]
 8014c10:	9205      	str	r2, [sp, #20]
 8014c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c14:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014c18:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014c1a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014c1e:	aa49      	add	r2, sp, #292	; 0x124
 8014c20:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8014c24:	4623      	mov	r3, r4
 8014c26:	47c8      	blx	r9
 8014c28:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014c2c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014c30:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c38:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014c3c:	68a1      	ldr	r1, [r4, #8]
 8014c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014c42:	ed94 6a08 	vldr	s12, [r4, #32]
 8014c46:	edd4 6a07 	vldr	s13, [r4, #28]
 8014c4a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014c4e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014c52:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014c56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014c5a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014c5e:	441a      	add	r2, r3
 8014c60:	6963      	ldr	r3, [r4, #20]
 8014c62:	3301      	adds	r3, #1
 8014c64:	6022      	str	r2, [r4, #0]
 8014c66:	6163      	str	r3, [r4, #20]
 8014c68:	69a3      	ldr	r3, [r4, #24]
 8014c6a:	3b01      	subs	r3, #1
 8014c6c:	61a3      	str	r3, [r4, #24]
 8014c6e:	6923      	ldr	r3, [r4, #16]
 8014c70:	440b      	add	r3, r1
 8014c72:	68e1      	ldr	r1, [r4, #12]
 8014c74:	428b      	cmp	r3, r1
 8014c76:	6123      	str	r3, [r4, #16]
 8014c78:	db15      	blt.n	8014ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014c7a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014c7e:	3201      	adds	r2, #1
 8014c80:	1a5b      	subs	r3, r3, r1
 8014c82:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014c86:	6022      	str	r2, [r4, #0]
 8014c88:	6123      	str	r3, [r4, #16]
 8014c8a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014c8e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014c92:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014c96:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014c9a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ca2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014ca6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014caa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014cae:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014cb6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014cba:	68a9      	ldr	r1, [r5, #8]
 8014cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014cc0:	ed95 6a08 	vldr	s12, [r5, #32]
 8014cc4:	edd5 6a07 	vldr	s13, [r5, #28]
 8014cc8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014ccc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014cd0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014cd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014cd8:	edc5 6a07 	vstr	s13, [r5, #28]
 8014cdc:	441a      	add	r2, r3
 8014cde:	696b      	ldr	r3, [r5, #20]
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	602a      	str	r2, [r5, #0]
 8014ce4:	616b      	str	r3, [r5, #20]
 8014ce6:	69ab      	ldr	r3, [r5, #24]
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	61ab      	str	r3, [r5, #24]
 8014cec:	692b      	ldr	r3, [r5, #16]
 8014cee:	440b      	add	r3, r1
 8014cf0:	68e9      	ldr	r1, [r5, #12]
 8014cf2:	428b      	cmp	r3, r1
 8014cf4:	612b      	str	r3, [r5, #16]
 8014cf6:	db15      	blt.n	8014d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014cf8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014cfc:	3201      	adds	r2, #1
 8014cfe:	1a5b      	subs	r3, r3, r1
 8014d00:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014d04:	602a      	str	r2, [r5, #0]
 8014d06:	612b      	str	r3, [r5, #16]
 8014d08:	edc5 6a07 	vstr	s13, [r5, #28]
 8014d0c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014d10:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014d14:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014d18:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d20:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014d24:	3f01      	subs	r7, #1
 8014d26:	e757      	b.n	8014bd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014d28:	4299      	cmp	r1, r3
 8014d2a:	dc13      	bgt.n	8014d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	da14      	bge.n	8014d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014d30:	2502      	movs	r5, #2
 8014d32:	2703      	movs	r7, #3
 8014d34:	f04f 0800 	mov.w	r8, #0
 8014d38:	46a9      	mov	r9, r5
 8014d3a:	f04f 0a01 	mov.w	sl, #1
 8014d3e:	e6ef      	b.n	8014b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014d40:	2501      	movs	r5, #1
 8014d42:	2700      	movs	r7, #0
 8014d44:	46a9      	mov	r9, r5
 8014d46:	46b8      	mov	r8, r7
 8014d48:	f04f 0a02 	mov.w	sl, #2
 8014d4c:	e6e8      	b.n	8014b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014d4e:	2501      	movs	r5, #1
 8014d50:	2702      	movs	r7, #2
 8014d52:	e6e1      	b.n	8014b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014d54:	2500      	movs	r5, #0
 8014d56:	2701      	movs	r7, #1
 8014d58:	e7f4      	b.n	8014d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014d5a:	2702      	movs	r7, #2
 8014d5c:	2503      	movs	r5, #3
 8014d5e:	f04f 0900 	mov.w	r9, #0
 8014d62:	46b8      	mov	r8, r7
 8014d64:	e7e9      	b.n	8014d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014d66:	4613      	mov	r3, r2
 8014d68:	e728      	b.n	8014bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014d6a:	bf00      	nop
 8014d6c:	20056534 	.word	0x20056534
 8014d70:	fffd8f01 	.word	0xfffd8f01
 8014d74:	00027100 	.word	0x00027100
 8014d78:	0004e1ff 	.word	0x0004e1ff
 8014d7c:	0004e1fe 	.word	0x0004e1fe
 8014d80:	2005653c 	.word	0x2005653c
 8014d84:	4613      	mov	r3, r2
 8014d86:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014d88:	469e      	mov	lr, r3
 8014d8a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8014d8c:	469c      	mov	ip, r3
 8014d8e:	9111      	str	r1, [sp, #68]	; 0x44
 8014d90:	f04f 0900 	mov.w	r9, #0
 8014d94:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014d98:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014d9c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014da0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014da4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014da8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014dac:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014db0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014db4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014db8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014dbc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8014dc0:	f1bc 0f00 	cmp.w	ip, #0
 8014dc4:	d147      	bne.n	8014e56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014dc6:	eb03 0c07 	add.w	ip, r3, r7
 8014dca:	1ad7      	subs	r7, r2, r3
 8014dcc:	f1b9 0f00 	cmp.w	r9, #0
 8014dd0:	d009      	beq.n	8014de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014dd2:	9029      	str	r0, [sp, #164]	; 0xa4
 8014dd4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014dd8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014ddc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014de0:	912d      	str	r1, [sp, #180]	; 0xb4
 8014de2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014de6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014de8:	f04f 0800 	mov.w	r8, #0
 8014dec:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014df0:	9111      	str	r1, [sp, #68]	; 0x44
 8014df2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014df6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014dfa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014dfe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014e02:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014e06:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014e0a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014e0e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014e12:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014e16:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014e1a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014e1e:	f1be 0f00 	cmp.w	lr, #0
 8014e22:	d031      	beq.n	8014e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014e24:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014e26:	4450      	add	r0, sl
 8014e28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014e2c:	4431      	add	r1, r6
 8014e2e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014e32:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014e36:	4549      	cmp	r1, r9
 8014e38:	db08      	blt.n	8014e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014e3a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014e3e:	3001      	adds	r0, #1
 8014e40:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014e44:	eba1 0109 	sub.w	r1, r1, r9
 8014e48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014e4c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014e50:	f04f 0801 	mov.w	r8, #1
 8014e54:	e7e3      	b.n	8014e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014e56:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014e58:	4450      	add	r0, sl
 8014e5a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014e5e:	4431      	add	r1, r6
 8014e60:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014e64:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014e68:	4541      	cmp	r1, r8
 8014e6a:	db08      	blt.n	8014e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8014e6c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014e70:	3001      	adds	r0, #1
 8014e72:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014e76:	eba1 0108 	sub.w	r1, r1, r8
 8014e7a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014e7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014e82:	f04f 0901 	mov.w	r9, #1
 8014e86:	e79b      	b.n	8014dc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014e88:	449c      	add	ip, r3
 8014e8a:	1aff      	subs	r7, r7, r3
 8014e8c:	f1b8 0f00 	cmp.w	r8, #0
 8014e90:	d009      	beq.n	8014ea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014e92:	9019      	str	r0, [sp, #100]	; 0x64
 8014e94:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014e98:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014e9c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014ea0:	911d      	str	r1, [sp, #116]	; 0x74
 8014ea2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014ea6:	1ad2      	subs	r2, r2, r3
 8014ea8:	e68b      	b.n	8014bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eac:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	f000 80d1 	beq.w	8015056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014eb4:	ad19      	add	r5, sp, #100	; 0x64
 8014eb6:	ac39      	add	r4, sp, #228	; 0xe4
 8014eb8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014eba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8014ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ec6:	6963      	ldr	r3, [r4, #20]
 8014ec8:	440b      	add	r3, r1
 8014eca:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014ece:	4408      	add	r0, r1
 8014ed0:	b200      	sxth	r0, r0
 8014ed2:	4283      	cmp	r3, r0
 8014ed4:	900d      	str	r0, [sp, #52]	; 0x34
 8014ed6:	f280 80c1 	bge.w	801505c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014eda:	428b      	cmp	r3, r1
 8014edc:	da08      	bge.n	8014ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014ede:	2a00      	cmp	r2, #0
 8014ee0:	dd06      	ble.n	8014ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014ee2:	1acb      	subs	r3, r1, r3
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	f2c0 80bb 	blt.w	8015060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	f300 80b9 	bgt.w	8015062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014ef0:	6967      	ldr	r7, [r4, #20]
 8014ef2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ef8:	443b      	add	r3, r7
 8014efa:	461f      	mov	r7, r3
 8014efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014efe:	1bdf      	subs	r7, r3, r7
 8014f00:	4297      	cmp	r7, r2
 8014f02:	bfa8      	it	ge
 8014f04:	4617      	movge	r7, r2
 8014f06:	2f00      	cmp	r7, #0
 8014f08:	f340 813c 	ble.w	8015184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014f0c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014f0e:	6829      	ldr	r1, [r5, #0]
 8014f10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f14:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014f18:	4411      	add	r1, r2
 8014f1a:	6820      	ldr	r0, [r4, #0]
 8014f1c:	4299      	cmp	r1, r3
 8014f1e:	dd1a      	ble.n	8014f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014f20:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014f24:	4402      	add	r2, r0
 8014f26:	440b      	add	r3, r1
 8014f28:	b21b      	sxth	r3, r3
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	dc13      	bgt.n	8014f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014f2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f30:	a912      	add	r1, sp, #72	; 0x48
 8014f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	9206      	str	r2, [sp, #24]
 8014f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f3c:	9500      	str	r5, [sp, #0]
 8014f3e:	9205      	str	r2, [sp, #20]
 8014f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f42:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014f46:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014f48:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014f4c:	aa49      	add	r2, sp, #292	; 0x124
 8014f4e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8014f52:	4623      	mov	r3, r4
 8014f54:	47c8      	blx	r9
 8014f56:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014f5a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014f5e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f66:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014f6a:	68a1      	ldr	r1, [r4, #8]
 8014f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f70:	ed94 6a08 	vldr	s12, [r4, #32]
 8014f74:	edd4 6a07 	vldr	s13, [r4, #28]
 8014f78:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014f7c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014f80:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014f84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f88:	edc4 6a07 	vstr	s13, [r4, #28]
 8014f8c:	441a      	add	r2, r3
 8014f8e:	6963      	ldr	r3, [r4, #20]
 8014f90:	3301      	adds	r3, #1
 8014f92:	6022      	str	r2, [r4, #0]
 8014f94:	6163      	str	r3, [r4, #20]
 8014f96:	69a3      	ldr	r3, [r4, #24]
 8014f98:	3b01      	subs	r3, #1
 8014f9a:	61a3      	str	r3, [r4, #24]
 8014f9c:	6923      	ldr	r3, [r4, #16]
 8014f9e:	440b      	add	r3, r1
 8014fa0:	68e1      	ldr	r1, [r4, #12]
 8014fa2:	428b      	cmp	r3, r1
 8014fa4:	6123      	str	r3, [r4, #16]
 8014fa6:	db15      	blt.n	8014fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014fa8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014fac:	3201      	adds	r2, #1
 8014fae:	1a5b      	subs	r3, r3, r1
 8014fb0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014fb4:	6022      	str	r2, [r4, #0]
 8014fb6:	6123      	str	r3, [r4, #16]
 8014fb8:	edc4 6a07 	vstr	s13, [r4, #28]
 8014fbc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014fc0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014fc4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014fc8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fd0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014fd4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014fd8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014fdc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014fe4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014fe8:	68a9      	ldr	r1, [r5, #8]
 8014fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014fee:	ed95 6a08 	vldr	s12, [r5, #32]
 8014ff2:	edd5 6a07 	vldr	s13, [r5, #28]
 8014ff6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014ffa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014ffe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015002:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015006:	edc5 6a07 	vstr	s13, [r5, #28]
 801500a:	441a      	add	r2, r3
 801500c:	696b      	ldr	r3, [r5, #20]
 801500e:	3301      	adds	r3, #1
 8015010:	602a      	str	r2, [r5, #0]
 8015012:	616b      	str	r3, [r5, #20]
 8015014:	69ab      	ldr	r3, [r5, #24]
 8015016:	3b01      	subs	r3, #1
 8015018:	61ab      	str	r3, [r5, #24]
 801501a:	692b      	ldr	r3, [r5, #16]
 801501c:	440b      	add	r3, r1
 801501e:	68e9      	ldr	r1, [r5, #12]
 8015020:	428b      	cmp	r3, r1
 8015022:	612b      	str	r3, [r5, #16]
 8015024:	db15      	blt.n	8015052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015026:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801502a:	3201      	adds	r2, #1
 801502c:	1a5b      	subs	r3, r3, r1
 801502e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015032:	602a      	str	r2, [r5, #0]
 8015034:	612b      	str	r3, [r5, #16]
 8015036:	edc5 6a07 	vstr	s13, [r5, #28]
 801503a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801503e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015042:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015046:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801504a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801504e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015052:	3f01      	subs	r7, #1
 8015054:	e757      	b.n	8014f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015056:	ad39      	add	r5, sp, #228	; 0xe4
 8015058:	ac19      	add	r4, sp, #100	; 0x64
 801505a:	e72d      	b.n	8014eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801505c:	4613      	mov	r3, r2
 801505e:	e744      	b.n	8014eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015060:	4613      	mov	r3, r2
 8015062:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015064:	469e      	mov	lr, r3
 8015066:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801506a:	461f      	mov	r7, r3
 801506c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015070:	f04f 0900 	mov.w	r9, #0
 8015074:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015078:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801507c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015080:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015084:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015088:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801508a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801508e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015092:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015096:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801509a:	960e      	str	r6, [sp, #56]	; 0x38
 801509c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80150a0:	2f00      	cmp	r7, #0
 80150a2:	d146      	bne.n	8015132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80150a4:	449c      	add	ip, r3
 80150a6:	1ad7      	subs	r7, r2, r3
 80150a8:	f1b9 0f00 	cmp.w	r9, #0
 80150ac:	d009      	beq.n	80150c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80150ae:	9039      	str	r0, [sp, #228]	; 0xe4
 80150b0:	913d      	str	r1, [sp, #244]	; 0xf4
 80150b2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80150b6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80150ba:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80150be:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80150c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80150c4:	f04f 0800 	mov.w	r8, #0
 80150c8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80150cc:	910e      	str	r1, [sp, #56]	; 0x38
 80150ce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80150d2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80150d6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80150da:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80150de:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80150e2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80150e6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80150ea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80150ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80150f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80150f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80150fa:	f1be 0f00 	cmp.w	lr, #0
 80150fe:	d030      	beq.n	8015162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015100:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015102:	4450      	add	r0, sl
 8015104:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015108:	4431      	add	r1, r6
 801510a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801510e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015112:	4549      	cmp	r1, r9
 8015114:	db08      	blt.n	8015128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015116:	ee77 7a85 	vadd.f32	s15, s15, s10
 801511a:	3001      	adds	r0, #1
 801511c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015120:	eba1 0109 	sub.w	r1, r1, r9
 8015124:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015128:	f10e 3eff 	add.w	lr, lr, #4294967295
 801512c:	f04f 0801 	mov.w	r8, #1
 8015130:	e7e3      	b.n	80150fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015132:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015134:	4450      	add	r0, sl
 8015136:	ee37 7a24 	vadd.f32	s14, s14, s9
 801513a:	4431      	add	r1, r6
 801513c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015140:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015144:	4541      	cmp	r1, r8
 8015146:	db08      	blt.n	801515a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015148:	ee76 6a85 	vadd.f32	s13, s13, s10
 801514c:	3001      	adds	r0, #1
 801514e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015152:	eba1 0108 	sub.w	r1, r1, r8
 8015156:	ee77 7a86 	vadd.f32	s15, s15, s12
 801515a:	3f01      	subs	r7, #1
 801515c:	f04f 0901 	mov.w	r9, #1
 8015160:	e79e      	b.n	80150a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015162:	449c      	add	ip, r3
 8015164:	1aff      	subs	r7, r7, r3
 8015166:	f1b8 0f00 	cmp.w	r8, #0
 801516a:	d009      	beq.n	8015180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801516c:	9019      	str	r0, [sp, #100]	; 0x64
 801516e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015172:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015176:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801517a:	911d      	str	r1, [sp, #116]	; 0x74
 801517c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015180:	1ad2      	subs	r2, r2, r3
 8015182:	e6b5      	b.n	8014ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	b923      	cbnz	r3, 8015194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801518a:	4b04      	ldr	r3, [pc, #16]	; (801519c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801518c:	6818      	ldr	r0, [r3, #0]
 801518e:	6803      	ldr	r3, [r0, #0]
 8015190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015192:	4798      	blx	r3
 8015194:	b05b      	add	sp, #364	; 0x16c
 8015196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801519a:	bf00      	nop
 801519c:	2005653c 	.word	0x2005653c

080151a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80151a0:	b570      	push	{r4, r5, r6, lr}
 80151a2:	4604      	mov	r4, r0
 80151a4:	2500      	movs	r5, #0
 80151a6:	9804      	ldr	r0, [sp, #16]
 80151a8:	7223      	strb	r3, [r4, #8]
 80151aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80151ae:	8025      	strh	r5, [r4, #0]
 80151b0:	6061      	str	r1, [r4, #4]
 80151b2:	7263      	strb	r3, [r4, #9]
 80151b4:	60e0      	str	r0, [r4, #12]
 80151b6:	8222      	strh	r2, [r4, #16]
 80151b8:	8265      	strh	r5, [r4, #18]
 80151ba:	82a5      	strh	r5, [r4, #20]
 80151bc:	82e5      	strh	r5, [r4, #22]
 80151be:	8325      	strh	r5, [r4, #24]
 80151c0:	8365      	strh	r5, [r4, #26]
 80151c2:	83a5      	strh	r5, [r4, #28]
 80151c4:	77a5      	strb	r5, [r4, #30]
 80151c6:	6803      	ldr	r3, [r0, #0]
 80151c8:	695b      	ldr	r3, [r3, #20]
 80151ca:	4798      	blx	r3
 80151cc:	4606      	mov	r6, r0
 80151ce:	b1f8      	cbz	r0, 8015210 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80151d0:	68e0      	ldr	r0, [r4, #12]
 80151d2:	4631      	mov	r1, r6
 80151d4:	6803      	ldr	r3, [r0, #0]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	4798      	blx	r3
 80151da:	7b43      	ldrb	r3, [r0, #13]
 80151dc:	7a82      	ldrb	r2, [r0, #10]
 80151de:	4605      	mov	r5, r0
 80151e0:	005b      	lsls	r3, r3, #1
 80151e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151e6:	4313      	orrs	r3, r2
 80151e8:	83a3      	strh	r3, [r4, #28]
 80151ea:	7a63      	ldrb	r3, [r4, #9]
 80151ec:	2b04      	cmp	r3, #4
 80151ee:	d10f      	bne.n	8015210 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80151f0:	68e0      	ldr	r0, [r4, #12]
 80151f2:	462a      	mov	r2, r5
 80151f4:	4631      	mov	r1, r6
 80151f6:	6803      	ldr	r3, [r0, #0]
 80151f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151fa:	4798      	blx	r3
 80151fc:	7b6b      	ldrb	r3, [r5, #13]
 80151fe:	005b      	lsls	r3, r3, #1
 8015200:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015204:	7aab      	ldrb	r3, [r5, #10]
 8015206:	4313      	orrs	r3, r2
 8015208:	4418      	add	r0, r3
 801520a:	8ba3      	ldrh	r3, [r4, #28]
 801520c:	4418      	add	r0, r3
 801520e:	83a0      	strh	r0, [r4, #28]
 8015210:	4620      	mov	r0, r4
 8015212:	bd70      	pop	{r4, r5, r6, pc}

08015214 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015218:	2400      	movs	r4, #0
 801521a:	b085      	sub	sp, #20
 801521c:	4681      	mov	r9, r0
 801521e:	4688      	mov	r8, r1
 8015220:	4692      	mov	sl, r2
 8015222:	469b      	mov	fp, r3
 8015224:	4627      	mov	r7, r4
 8015226:	4625      	mov	r5, r4
 8015228:	4626      	mov	r6, r4
 801522a:	4554      	cmp	r4, sl
 801522c:	da2a      	bge.n	8015284 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801522e:	2300      	movs	r3, #0
 8015230:	9303      	str	r3, [sp, #12]
 8015232:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015236:	429d      	cmp	r5, r3
 8015238:	d004      	beq.n	8015244 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801523a:	f242 030b 	movw	r3, #8203	; 0x200b
 801523e:	429d      	cmp	r5, r3
 8015240:	bf18      	it	ne
 8015242:	462f      	movne	r7, r5
 8015244:	ab03      	add	r3, sp, #12
 8015246:	4642      	mov	r2, r8
 8015248:	4659      	mov	r1, fp
 801524a:	4648      	mov	r0, r9
 801524c:	f002 ff30 	bl	80180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015250:	4605      	mov	r5, r0
 8015252:	b1b8      	cbz	r0, 8015284 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015254:	280a      	cmp	r0, #10
 8015256:	d015      	beq.n	8015284 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015258:	9a03      	ldr	r2, [sp, #12]
 801525a:	b18a      	cbz	r2, 8015280 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801525c:	7b50      	ldrb	r0, [r2, #13]
 801525e:	4639      	mov	r1, r7
 8015260:	7a93      	ldrb	r3, [r2, #10]
 8015262:	0040      	lsls	r0, r0, #1
 8015264:	8895      	ldrh	r5, [r2, #4]
 8015266:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801526a:	4303      	orrs	r3, r0
 801526c:	4640      	mov	r0, r8
 801526e:	9301      	str	r3, [sp, #4]
 8015270:	f8d8 3000 	ldr.w	r3, [r8]
 8015274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015276:	4798      	blx	r3
 8015278:	9b01      	ldr	r3, [sp, #4]
 801527a:	4418      	add	r0, r3
 801527c:	4406      	add	r6, r0
 801527e:	b2b6      	uxth	r6, r6
 8015280:	3401      	adds	r4, #1
 8015282:	e7d2      	b.n	801522a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015284:	4630      	mov	r0, r6
 8015286:	b005      	add	sp, #20
 8015288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801528c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801528c:	2a02      	cmp	r2, #2
 801528e:	b530      	push	{r4, r5, lr}
 8015290:	d011      	beq.n	80152b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015292:	2a03      	cmp	r2, #3
 8015294:	d01c      	beq.n	80152d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015296:	2a01      	cmp	r2, #1
 8015298:	d10c      	bne.n	80152b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801529a:	888b      	ldrh	r3, [r1, #4]
 801529c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80152a0:	8801      	ldrh	r1, [r0, #0]
 80152a2:	1a9b      	subs	r3, r3, r2
 80152a4:	8844      	ldrh	r4, [r0, #2]
 80152a6:	1a5b      	subs	r3, r3, r1
 80152a8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80152ac:	8004      	strh	r4, [r0, #0]
 80152ae:	8043      	strh	r3, [r0, #2]
 80152b0:	8081      	strh	r1, [r0, #4]
 80152b2:	80c2      	strh	r2, [r0, #6]
 80152b4:	bd30      	pop	{r4, r5, pc}
 80152b6:	88cb      	ldrh	r3, [r1, #6]
 80152b8:	88c2      	ldrh	r2, [r0, #6]
 80152ba:	1a9b      	subs	r3, r3, r2
 80152bc:	8842      	ldrh	r2, [r0, #2]
 80152be:	1a9b      	subs	r3, r3, r2
 80152c0:	888a      	ldrh	r2, [r1, #4]
 80152c2:	8881      	ldrh	r1, [r0, #4]
 80152c4:	8043      	strh	r3, [r0, #2]
 80152c6:	1a52      	subs	r2, r2, r1
 80152c8:	8801      	ldrh	r1, [r0, #0]
 80152ca:	1a52      	subs	r2, r2, r1
 80152cc:	8002      	strh	r2, [r0, #0]
 80152ce:	e7f1      	b.n	80152b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80152d0:	88cb      	ldrh	r3, [r1, #6]
 80152d2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80152d6:	8841      	ldrh	r1, [r0, #2]
 80152d8:	1a9b      	subs	r3, r3, r2
 80152da:	f9b0 5000 	ldrsh.w	r5, [r0]
 80152de:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80152e2:	1a5b      	subs	r3, r3, r1
 80152e4:	8045      	strh	r5, [r0, #2]
 80152e6:	8082      	strh	r2, [r0, #4]
 80152e8:	8003      	strh	r3, [r0, #0]
 80152ea:	80c4      	strh	r4, [r0, #6]
 80152ec:	e7e2      	b.n	80152b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080152ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80152ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152f2:	b09f      	sub	sp, #124	; 0x7c
 80152f4:	9116      	str	r1, [sp, #88]	; 0x58
 80152f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80152f8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80152fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80152fc:	8809      	ldrh	r1, [r1, #0]
 80152fe:	889b      	ldrh	r3, [r3, #4]
 8015300:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8015304:	440b      	add	r3, r1
 8015306:	9212      	str	r2, [sp, #72]	; 0x48
 8015308:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801530c:	b21b      	sxth	r3, r3
 801530e:	9011      	str	r0, [sp, #68]	; 0x44
 8015310:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8015314:	9310      	str	r3, [sp, #64]	; 0x40
 8015316:	f8d8 3000 	ldr.w	r3, [r8]
 801531a:	7a59      	ldrb	r1, [r3, #9]
 801531c:	7a1b      	ldrb	r3, [r3, #8]
 801531e:	9114      	str	r1, [sp, #80]	; 0x50
 8015320:	9315      	str	r3, [sp, #84]	; 0x54
 8015322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015328:	2a00      	cmp	r2, #0
 801532a:	d067      	beq.n	80153fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801532c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015330:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015332:	2b04      	cmp	r3, #4
 8015334:	bf14      	ite	ne
 8015336:	2301      	movne	r3, #1
 8015338:	2302      	moveq	r3, #2
 801533a:	4413      	add	r3, r2
 801533c:	f04f 0900 	mov.w	r9, #0
 8015340:	930f      	str	r3, [sp, #60]	; 0x3c
 8015342:	464c      	mov	r4, r9
 8015344:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015348:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801534c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015350:	4293      	cmp	r3, r2
 8015352:	f280 808c 	bge.w	801546e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015356:	2300      	movs	r3, #0
 8015358:	931c      	str	r3, [sp, #112]	; 0x70
 801535a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801535e:	429c      	cmp	r4, r3
 8015360:	d006      	beq.n	8015370 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8015362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015364:	f242 020b 	movw	r2, #8203	; 0x200b
 8015368:	4294      	cmp	r4, r2
 801536a:	bf18      	it	ne
 801536c:	4623      	movne	r3, r4
 801536e:	930d      	str	r3, [sp, #52]	; 0x34
 8015370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015372:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8015374:	f8d8 2000 	ldr.w	r2, [r8]
 8015378:	428b      	cmp	r3, r1
 801537a:	db41      	blt.n	8015400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801537c:	6813      	ldr	r3, [r2, #0]
 801537e:	4610      	mov	r0, r2
 8015380:	695b      	ldr	r3, [r3, #20]
 8015382:	4798      	blx	r3
 8015384:	4604      	mov	r4, r0
 8015386:	f8d8 0000 	ldr.w	r0, [r8]
 801538a:	aa1d      	add	r2, sp, #116	; 0x74
 801538c:	4621      	mov	r1, r4
 801538e:	6803      	ldr	r3, [r0, #0]
 8015390:	689e      	ldr	r6, [r3, #8]
 8015392:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015396:	47b0      	blx	r6
 8015398:	901c      	str	r0, [sp, #112]	; 0x70
 801539a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801539e:	429c      	cmp	r4, r3
 80153a0:	f000 80ea 	beq.w	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80153a4:	f242 030b 	movw	r3, #8203	; 0x200b
 80153a8:	429c      	cmp	r4, r3
 80153aa:	f000 80e5 	beq.w	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80153ae:	2c00      	cmp	r4, #0
 80153b0:	f000 80f7 	beq.w	80155a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80153b4:	2c0a      	cmp	r4, #10
 80153b6:	d060      	beq.n	801547a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80153b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80153ba:	b36a      	cbz	r2, 8015418 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80153bc:	8894      	ldrh	r4, [r2, #4]
 80153be:	f1bb 0f00 	cmp.w	fp, #0
 80153c2:	d03b      	beq.n	801543c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80153c4:	f892 900d 	ldrb.w	r9, [r2, #13]
 80153c8:	f1bb 0f01 	cmp.w	fp, #1
 80153cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80153d0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80153d4:	f892 900a 	ldrb.w	r9, [r2, #10]
 80153d8:	ea49 0903 	orr.w	r9, r9, r3
 80153dc:	d134      	bne.n	8015448 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80153de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153e0:	eba5 0509 	sub.w	r5, r5, r9
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d14f      	bne.n	8015488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80153e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153ea:	eb09 0305 	add.w	r3, r9, r5
 80153ee:	4413      	add	r3, r2
 80153f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80153f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153f6:	4293      	cmp	r3, r2
 80153f8:	da51      	bge.n	801549e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80153fa:	e038      	b.n	801546e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80153fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153fe:	e79d      	b.n	801533c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8015400:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015404:	4659      	mov	r1, fp
 8015406:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015408:	9301      	str	r3, [sp, #4]
 801540a:	ab1d      	add	r3, sp, #116	; 0x74
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	ab1c      	add	r3, sp, #112	; 0x70
 8015410:	f002 fea6 	bl	8018160 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015414:	4604      	mov	r4, r0
 8015416:	e7c0      	b.n	801539a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8015418:	f8d8 0000 	ldr.w	r0, [r8]
 801541c:	6803      	ldr	r3, [r0, #0]
 801541e:	691b      	ldr	r3, [r3, #16]
 8015420:	4798      	blx	r3
 8015422:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015426:	4298      	cmp	r0, r3
 8015428:	f000 80a6 	beq.w	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801542c:	f242 030b 	movw	r3, #8203	; 0x200b
 8015430:	4298      	cmp	r0, r3
 8015432:	f000 80a1 	beq.w	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8015436:	f1bb 0f00 	cmp.w	fp, #0
 801543a:	d100      	bne.n	801543e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801543c:	444d      	add	r5, r9
 801543e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015440:	2a00      	cmp	r2, #0
 8015442:	d1bf      	bne.n	80153c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8015444:	4691      	mov	r9, r2
 8015446:	e097      	b.n	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8015448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801544a:	2b00      	cmp	r3, #0
 801544c:	f000 80ab 	beq.w	80155a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8015450:	f1bb 0f00 	cmp.w	fp, #0
 8015454:	d118      	bne.n	8015488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015456:	f8d8 0000 	ldr.w	r0, [r8]
 801545a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801545c:	6803      	ldr	r3, [r0, #0]
 801545e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015460:	4798      	blx	r3
 8015462:	4405      	add	r5, r0
 8015464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015466:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015468:	1aeb      	subs	r3, r5, r3
 801546a:	4293      	cmp	r3, r2
 801546c:	dd17      	ble.n	801549e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801546e:	2c00      	cmp	r4, #0
 8015470:	f000 8097 	beq.w	80155a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8015474:	2c0a      	cmp	r4, #10
 8015476:	f040 8085 	bne.w	8015584 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801547a:	240a      	movs	r4, #10
 801547c:	fab4 f084 	clz	r0, r4
 8015480:	0940      	lsrs	r0, r0, #5
 8015482:	b01f      	add	sp, #124	; 0x7c
 8015484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015488:	f8d8 0000 	ldr.w	r0, [r8]
 801548c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801548e:	6803      	ldr	r3, [r0, #0]
 8015490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015492:	4798      	blx	r3
 8015494:	f1bb 0f01 	cmp.w	fp, #1
 8015498:	eba5 0500 	sub.w	r5, r5, r0
 801549c:	d0a4      	beq.n	80153e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801549e:	981c      	ldr	r0, [sp, #112]	; 0x70
 80154a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80154a2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80154a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80154aa:	7b43      	ldrb	r3, [r0, #13]
 80154ac:	4429      	add	r1, r5
 80154ae:	015b      	lsls	r3, r3, #5
 80154b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80154b4:	7983      	ldrb	r3, [r0, #6]
 80154b6:	4313      	orrs	r3, r2
 80154b8:	440b      	add	r3, r1
 80154ba:	42b3      	cmp	r3, r6
 80154bc:	db5c      	blt.n	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80154be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154c0:	4299      	cmp	r1, r3
 80154c2:	da59      	bge.n	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80154c4:	f8d8 0000 	ldr.w	r0, [r8]
 80154c8:	42ae      	cmp	r6, r5
 80154ca:	6803      	ldr	r3, [r0, #0]
 80154cc:	bfcc      	ite	gt
 80154ce:	1b76      	subgt	r6, r6, r5
 80154d0:	2600      	movle	r6, #0
 80154d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154d4:	bfc8      	it	gt
 80154d6:	b2b6      	uxthgt	r6, r6
 80154d8:	4798      	blx	r3
 80154da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80154dc:	7b5a      	ldrb	r2, [r3, #13]
 80154de:	00d1      	lsls	r1, r2, #3
 80154e0:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80154e4:	7a19      	ldrb	r1, [r3, #8]
 80154e6:	4339      	orrs	r1, r7
 80154e8:	0657      	lsls	r7, r2, #25
 80154ea:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80154ec:	bf48      	it	mi
 80154ee:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80154f2:	4407      	add	r7, r0
 80154f4:	bf48      	it	mi
 80154f6:	b209      	sxthmi	r1, r1
 80154f8:	1a7f      	subs	r7, r7, r1
 80154fa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80154fc:	b2bf      	uxth	r7, r7
 80154fe:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015502:	fa0f fa87 	sxth.w	sl, r7
 8015506:	4551      	cmp	r1, sl
 8015508:	dd3a      	ble.n	8015580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801550a:	0112      	lsls	r2, r2, #4
 801550c:	79d8      	ldrb	r0, [r3, #7]
 801550e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015512:	4302      	orrs	r2, r0
 8015514:	4492      	add	sl, r2
 8015516:	4551      	cmp	r1, sl
 8015518:	dc2e      	bgt.n	8015578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801551a:	1bcf      	subs	r7, r1, r7
 801551c:	468a      	mov	sl, r1
 801551e:	b2bf      	uxth	r7, r7
 8015520:	9319      	str	r3, [sp, #100]	; 0x64
 8015522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015524:	f8d8 0000 	ldr.w	r0, [r8]
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	6801      	ldr	r1, [r0, #0]
 801552c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801552e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015530:	9313      	str	r3, [sp, #76]	; 0x4c
 8015532:	9218      	str	r2, [sp, #96]	; 0x60
 8015534:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8015536:	4788      	blx	r1
 8015538:	f898 1006 	ldrb.w	r1, [r8, #6]
 801553c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801553e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015540:	f898 100e 	ldrb.w	r1, [r8, #14]
 8015544:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015546:	910a      	str	r1, [sp, #40]	; 0x28
 8015548:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801554c:	9109      	str	r1, [sp, #36]	; 0x24
 801554e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015552:	9305      	str	r3, [sp, #20]
 8015554:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015556:	9206      	str	r2, [sp, #24]
 8015558:	e9cd a601 	strd	sl, r6, [sp, #4]
 801555c:	442e      	add	r6, r5
 801555e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8015562:	b236      	sxth	r6, r6
 8015564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015566:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801556a:	9600      	str	r6, [sp, #0]
 801556c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801556e:	681a      	ldr	r2, [r3, #0]
 8015570:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015572:	685b      	ldr	r3, [r3, #4]
 8015574:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015576:	47b0      	blx	r6
 8015578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801557a:	3301      	adds	r3, #1
 801557c:	930e      	str	r3, [sp, #56]	; 0x38
 801557e:	e6e5      	b.n	801534c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8015580:	2700      	movs	r7, #0
 8015582:	e7cd      	b.n	8015520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8015584:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015586:	3501      	adds	r5, #1
 8015588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801558a:	429d      	cmp	r5, r3
 801558c:	f6bf af76 	bge.w	801547c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015590:	4659      	mov	r1, fp
 8015592:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015594:	f7f2 f866 	bl	8007664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015598:	4604      	mov	r4, r0
 801559a:	b110      	cbz	r0, 80155a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801559c:	280a      	cmp	r0, #10
 801559e:	d1f2      	bne.n	8015586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80155a0:	e76b      	b.n	801547a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80155a2:	2400      	movs	r4, #0
 80155a4:	e76a      	b.n	801547c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80155a6:	f1bb 0f00 	cmp.w	fp, #0
 80155aa:	f43f af5b 	beq.w	8015464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80155ae:	e776      	b.n	801549e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080155b0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80155b0:	b530      	push	{r4, r5, lr}
 80155b2:	8a44      	ldrh	r4, [r0, #18]
 80155b4:	8ac5      	ldrh	r5, [r0, #22]
 80155b6:	82c3      	strh	r3, [r0, #22]
 80155b8:	442c      	add	r4, r5
 80155ba:	1ae4      	subs	r4, r4, r3
 80155bc:	8b03      	ldrh	r3, [r0, #24]
 80155be:	8244      	strh	r4, [r0, #18]
 80155c0:	8a84      	ldrh	r4, [r0, #20]
 80155c2:	4422      	add	r2, r4
 80155c4:	440c      	add	r4, r1
 80155c6:	1a59      	subs	r1, r3, r1
 80155c8:	8342      	strh	r2, [r0, #26]
 80155ca:	8284      	strh	r4, [r0, #20]
 80155cc:	8301      	strh	r1, [r0, #24]
 80155ce:	bd30      	pop	{r4, r5, pc}

080155d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80155d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d4:	7a43      	ldrb	r3, [r0, #9]
 80155d6:	b087      	sub	sp, #28
 80155d8:	4604      	mov	r4, r0
 80155da:	460f      	mov	r7, r1
 80155dc:	1eda      	subs	r2, r3, #3
 80155de:	b2d2      	uxtb	r2, r2
 80155e0:	2900      	cmp	r1, #0
 80155e2:	d036      	beq.n	8015652 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80155e4:	2a01      	cmp	r2, #1
 80155e6:	d932      	bls.n	801564e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80155e8:	1e58      	subs	r0, r3, #1
 80155ea:	f1d0 0b00 	rsbs	fp, r0, #0
 80155ee:	eb4b 0b00 	adc.w	fp, fp, r0
 80155f2:	1e99      	subs	r1, r3, #2
 80155f4:	424b      	negs	r3, r1
 80155f6:	414b      	adcs	r3, r1
 80155f8:	9303      	str	r3, [sp, #12]
 80155fa:	2300      	movs	r3, #0
 80155fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8015600:	2500      	movs	r5, #0
 8015602:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8015606:	46a9      	mov	r9, r5
 8015608:	8265      	strh	r5, [r4, #18]
 801560a:	82a5      	strh	r5, [r4, #20]
 801560c:	2300      	movs	r3, #0
 801560e:	9305      	str	r3, [sp, #20]
 8015610:	8823      	ldrh	r3, [r4, #0]
 8015612:	2b20      	cmp	r3, #32
 8015614:	d02b      	beq.n	801566e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8015616:	eba3 020a 	sub.w	r2, r3, sl
 801561a:	4256      	negs	r6, r2
 801561c:	4156      	adcs	r6, r2
 801561e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015622:	4293      	cmp	r3, r2
 8015624:	d004      	beq.n	8015630 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8015626:	4553      	cmp	r3, sl
 8015628:	bf16      	itet	ne
 801562a:	4699      	movne	r9, r3
 801562c:	2601      	moveq	r6, #1
 801562e:	2600      	movne	r6, #0
 8015630:	ab05      	add	r3, sp, #20
 8015632:	68e2      	ldr	r2, [r4, #12]
 8015634:	7a21      	ldrb	r1, [r4, #8]
 8015636:	6860      	ldr	r0, [r4, #4]
 8015638:	f002 fd3a 	bl	80180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801563c:	8020      	strh	r0, [r4, #0]
 801563e:	b9c8      	cbnz	r0, 8015674 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8015640:	8b22      	ldrh	r2, [r4, #24]
 8015642:	2300      	movs	r3, #0
 8015644:	4611      	mov	r1, r2
 8015646:	4620      	mov	r0, r4
 8015648:	f7ff ffb2 	bl	80155b0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801564c:	e066      	b.n	801571c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801564e:	468b      	mov	fp, r1
 8015650:	e7cf      	b.n	80155f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8015652:	3b01      	subs	r3, #1
 8015654:	2a01      	cmp	r2, #1
 8015656:	9103      	str	r1, [sp, #12]
 8015658:	468b      	mov	fp, r1
 801565a:	bf8c      	ite	hi
 801565c:	2200      	movhi	r2, #0
 801565e:	2201      	movls	r2, #1
 8015660:	2b01      	cmp	r3, #1
 8015662:	9202      	str	r2, [sp, #8]
 8015664:	bf8c      	ite	hi
 8015666:	2300      	movhi	r3, #0
 8015668:	2301      	movls	r3, #1
 801566a:	9301      	str	r3, [sp, #4]
 801566c:	e7c8      	b.n	8015600 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801566e:	4699      	mov	r9, r3
 8015670:	2601      	movs	r6, #1
 8015672:	e7dd      	b.n	8015630 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8015674:	8ae3      	ldrh	r3, [r4, #22]
 8015676:	280a      	cmp	r0, #10
 8015678:	f103 0301 	add.w	r3, r3, #1
 801567c:	82e3      	strh	r3, [r4, #22]
 801567e:	d0df      	beq.n	8015640 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8015680:	9a05      	ldr	r2, [sp, #20]
 8015682:	bb42      	cbnz	r2, 80156d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8015684:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015688:	4298      	cmp	r0, r3
 801568a:	d001      	beq.n	8015690 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801568c:	4550      	cmp	r0, sl
 801568e:	d1bd      	bne.n	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015690:	8823      	ldrh	r3, [r4, #0]
 8015692:	8b21      	ldrh	r1, [r4, #24]
 8015694:	2b20      	cmp	r3, #32
 8015696:	d001      	beq.n	801569c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8015698:	4553      	cmp	r3, sl
 801569a:	d131      	bne.n	8015700 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801569c:	2e00      	cmp	r6, #0
 801569e:	bf0a      	itet	eq
 80156a0:	460d      	moveq	r5, r1
 80156a2:	4630      	movne	r0, r6
 80156a4:	2001      	moveq	r0, #1
 80156a6:	440a      	add	r2, r1
 80156a8:	8aa3      	ldrh	r3, [r4, #20]
 80156aa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80156ae:	b292      	uxth	r2, r2
 80156b0:	8322      	strh	r2, [r4, #24]
 80156b2:	4413      	add	r3, r2
 80156b4:	2f00      	cmp	r7, #0
 80156b6:	d03a      	beq.n	801572e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80156b8:	f1bb 0f00 	cmp.w	fp, #0
 80156bc:	d102      	bne.n	80156c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80156be:	9903      	ldr	r1, [sp, #12]
 80156c0:	b301      	cbz	r1, 8015704 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80156c2:	b1f8      	cbz	r0, 8015704 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80156c4:	8ba1      	ldrh	r1, [r4, #28]
 80156c6:	4419      	add	r1, r3
 80156c8:	458c      	cmp	ip, r1
 80156ca:	da2a      	bge.n	8015722 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80156cc:	8a61      	ldrh	r1, [r4, #18]
 80156ce:	b341      	cbz	r1, 8015722 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80156d0:	4563      	cmp	r3, ip
 80156d2:	dd9b      	ble.n	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80156d4:	e01c      	b.n	8015710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80156d6:	8893      	ldrh	r3, [r2, #4]
 80156d8:	4649      	mov	r1, r9
 80156da:	8023      	strh	r3, [r4, #0]
 80156dc:	f892 800d 	ldrb.w	r8, [r2, #13]
 80156e0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80156e4:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80156e8:	f892 800a 	ldrb.w	r8, [r2, #10]
 80156ec:	ea48 0800 	orr.w	r8, r8, r0
 80156f0:	68e0      	ldr	r0, [r4, #12]
 80156f2:	6803      	ldr	r3, [r0, #0]
 80156f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156f6:	4798      	blx	r3
 80156f8:	eb08 0200 	add.w	r2, r8, r0
 80156fc:	b292      	uxth	r2, r2
 80156fe:	e7c7      	b.n	8015690 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8015700:	2000      	movs	r0, #0
 8015702:	e7d0      	b.n	80156a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8015704:	4563      	cmp	r3, ip
 8015706:	dd81      	ble.n	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015708:	8a63      	ldrh	r3, [r4, #18]
 801570a:	2b00      	cmp	r3, #0
 801570c:	f43f af7e 	beq.w	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015710:	2301      	movs	r3, #1
 8015712:	8ba2      	ldrh	r2, [r4, #28]
 8015714:	77a3      	strb	r3, [r4, #30]
 8015716:	8b63      	ldrh	r3, [r4, #26]
 8015718:	4413      	add	r3, r2
 801571a:	8363      	strh	r3, [r4, #26]
 801571c:	b007      	add	sp, #28
 801571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015722:	2300      	movs	r3, #0
 8015724:	4611      	mov	r1, r2
 8015726:	4620      	mov	r0, r4
 8015728:	f7ff ff42 	bl	80155b0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801572c:	e76e      	b.n	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801572e:	4563      	cmp	r3, ip
 8015730:	dd14      	ble.n	801575c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8015732:	9b02      	ldr	r3, [sp, #8]
 8015734:	b113      	cbz	r3, 801573c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8015736:	2301      	movs	r3, #1
 8015738:	460a      	mov	r2, r1
 801573a:	e783      	b.n	8015644 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801573c:	9b01      	ldr	r3, [sp, #4]
 801573e:	2b00      	cmp	r3, #0
 8015740:	f43f af64 	beq.w	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015744:	2800      	cmp	r0, #0
 8015746:	f47f af61 	bne.w	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801574a:	b116      	cbz	r6, 8015752 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801574c:	2301      	movs	r3, #1
 801574e:	462a      	mov	r2, r5
 8015750:	e779      	b.n	8015646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8015752:	8a63      	ldrh	r3, [r4, #18]
 8015754:	2b00      	cmp	r3, #0
 8015756:	f43f af59 	beq.w	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801575a:	e7df      	b.n	801571c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801575c:	2800      	cmp	r0, #0
 801575e:	f47f af55 	bne.w	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015762:	2e00      	cmp	r6, #0
 8015764:	f43f af52 	beq.w	801560c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015768:	2301      	movs	r3, #1
 801576a:	462a      	mov	r2, r5
 801576c:	e7db      	b.n	8015726 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801576e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801576e:	b530      	push	{r4, r5, lr}
 8015770:	4605      	mov	r5, r0
 8015772:	b08b      	sub	sp, #44	; 0x2c
 8015774:	b191      	cbz	r1, 801579c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8015776:	2401      	movs	r4, #1
 8015778:	e9cd 3100 	strd	r3, r1, [sp]
 801577c:	4613      	mov	r3, r2
 801577e:	4601      	mov	r1, r0
 8015780:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8015784:	a802      	add	r0, sp, #8
 8015786:	f7ff fd0b 	bl	80151a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801578a:	2100      	movs	r1, #0
 801578c:	a802      	add	r0, sp, #8
 801578e:	f7ff ff1f 	bl	80155d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015792:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015796:	b163      	cbz	r3, 80157b2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015798:	3401      	adds	r4, #1
 801579a:	e7f6      	b.n	801578a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801579c:	2401      	movs	r4, #1
 801579e:	f002 fd7f 	bl	80182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80157a2:	280a      	cmp	r0, #10
 80157a4:	4628      	mov	r0, r5
 80157a6:	bf08      	it	eq
 80157a8:	3401      	addeq	r4, #1
 80157aa:	f002 fd79 	bl	80182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	d1f7      	bne.n	80157a2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80157b2:	b2a0      	uxth	r0, r4
 80157b4:	b00b      	add	sp, #44	; 0x2c
 80157b6:	bd30      	pop	{r4, r5, pc}

080157b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80157b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157bc:	b0df      	sub	sp, #380	; 0x17c
 80157be:	4689      	mov	r9, r1
 80157c0:	461c      	mov	r4, r3
 80157c2:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 80157c6:	900a      	str	r0, [sp, #40]	; 0x28
 80157c8:	f1ba 0f00 	cmp.w	sl, #0
 80157cc:	f000 80b1 	beq.w	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	f000 80ad 	beq.w	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80157d8:	7ba3      	ldrb	r3, [r4, #14]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	f000 80a9 	beq.w	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80157e0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80157e4:	6810      	ldr	r0, [r2, #0]
 80157e6:	6851      	ldr	r1, [r2, #4]
 80157e8:	2500      	movs	r5, #0
 80157ea:	4643      	mov	r3, r8
 80157ec:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80157f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80157f2:	af19      	add	r7, sp, #100	; 0x64
 80157f4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80157f8:	79a2      	ldrb	r2, [r4, #6]
 80157fa:	c303      	stmia	r3!, {r0, r1}
 80157fc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8015800:	a90f      	add	r1, sp, #60	; 0x3c
 8015802:	4640      	mov	r0, r8
 8015804:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015808:	f7ff fd40 	bl	801528c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801580c:	a90f      	add	r1, sp, #60	; 0x3c
 801580e:	79a2      	ldrb	r2, [r4, #6]
 8015810:	4608      	mov	r0, r1
 8015812:	f7ff fd3b 	bl	801528c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015816:	4638      	mov	r0, r7
 8015818:	f002 f901 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 801581c:	6820      	ldr	r0, [r4, #0]
 801581e:	6803      	ldr	r3, [r0, #0]
 8015820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015822:	4798      	blx	r3
 8015824:	4606      	mov	r6, r0
 8015826:	6820      	ldr	r0, [r4, #0]
 8015828:	6803      	ldr	r3, [r0, #0]
 801582a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801582c:	4798      	blx	r3
 801582e:	4633      	mov	r3, r6
 8015830:	9000      	str	r0, [sp, #0]
 8015832:	4651      	mov	r1, sl
 8015834:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8015836:	4638      	mov	r0, r7
 8015838:	f002 f93e 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801583c:	7923      	ldrb	r3, [r4, #4]
 801583e:	6820      	ldr	r0, [r4, #0]
 8015840:	9308      	str	r3, [sp, #32]
 8015842:	6803      	ldr	r3, [r0, #0]
 8015844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015846:	4798      	blx	r3
 8015848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801584c:	181e      	adds	r6, r3, r0
 801584e:	42ae      	cmp	r6, r5
 8015850:	dd06      	ble.n	8015860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8015852:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8015856:	4282      	cmp	r2, r0
 8015858:	bfa4      	itt	ge
 801585a:	189d      	addge	r5, r3, r2
 801585c:	fb95 f5f6 	sdivge	r5, r5, r6
 8015860:	a830      	add	r0, sp, #192	; 0xc0
 8015862:	f002 f8dc 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 8015866:	7c23      	ldrb	r3, [r4, #16]
 8015868:	b17b      	cbz	r3, 801588a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801586a:	6820      	ldr	r0, [r4, #0]
 801586c:	6803      	ldr	r3, [r0, #0]
 801586e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015870:	4798      	blx	r3
 8015872:	4683      	mov	fp, r0
 8015874:	6820      	ldr	r0, [r4, #0]
 8015876:	6803      	ldr	r3, [r0, #0]
 8015878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801587a:	4798      	blx	r3
 801587c:	465b      	mov	r3, fp
 801587e:	9000      	str	r0, [sp, #0]
 8015880:	4651      	mov	r1, sl
 8015882:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8015884:	a830      	add	r0, sp, #192	; 0xc0
 8015886:	f002 f917 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801588a:	7c21      	ldrb	r1, [r4, #16]
 801588c:	a811      	add	r0, sp, #68	; 0x44
 801588e:	7963      	ldrb	r3, [r4, #5]
 8015890:	9101      	str	r1, [sp, #4]
 8015892:	6821      	ldr	r1, [r4, #0]
 8015894:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015898:	9100      	str	r1, [sp, #0]
 801589a:	a930      	add	r1, sp, #192	; 0xc0
 801589c:	f7ff fc80 	bl	80151a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80158a0:	7c23      	ldrb	r3, [r4, #16]
 80158a2:	b9bb      	cbnz	r3, 80158d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 80158a4:	fa1f fa86 	uxth.w	sl, r6
 80158a8:	2d00      	cmp	r5, #0
 80158aa:	dd45      	ble.n	8015938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80158ac:	4638      	mov	r0, r7
 80158ae:	f002 fcf7 	bl	80182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d03d      	beq.n	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80158b6:	280a      	cmp	r0, #10
 80158b8:	d1f6      	bne.n	80158a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80158ba:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80158be:	3d01      	subs	r5, #1
 80158c0:	4453      	add	r3, sl
 80158c2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80158c6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80158ca:	eba3 030a 	sub.w	r3, r3, sl
 80158ce:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80158d2:	e7e9      	b.n	80158a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 80158d4:	0073      	lsls	r3, r6, #1
 80158d6:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80158da:	fa1f fa86 	uxth.w	sl, r6
 80158de:	9309      	str	r3, [sp, #36]	; 0x24
 80158e0:	2d00      	cmp	r5, #0
 80158e2:	dd29      	ble.n	8015938 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80158e4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80158e8:	a811      	add	r0, sp, #68	; 0x44
 80158ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ec:	428b      	cmp	r3, r1
 80158ee:	bfd4      	ite	le
 80158f0:	2100      	movle	r1, #0
 80158f2:	2101      	movgt	r1, #1
 80158f4:	f7ff fe6c 	bl	80155d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80158f8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80158fc:	3b01      	subs	r3, #1
 80158fe:	b29b      	uxth	r3, r3
 8015900:	455b      	cmp	r3, fp
 8015902:	930b      	str	r3, [sp, #44]	; 0x2c
 8015904:	d005      	beq.n	8015912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8015906:	7961      	ldrb	r1, [r4, #5]
 8015908:	4638      	mov	r0, r7
 801590a:	f7f1 feab 	bl	8007664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801590e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015910:	e7f4      	b.n	80158fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015912:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015916:	3d01      	subs	r5, #1
 8015918:	4453      	add	r3, sl
 801591a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801591e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8015922:	eba3 030a 	sub.w	r3, r3, sl
 8015926:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801592a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801592e:	2b00      	cmp	r3, #0
 8015930:	d1d6      	bne.n	80158e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8015932:	b05f      	add	sp, #380	; 0x17c
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015938:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801593c:	ad47      	add	r5, sp, #284	; 0x11c
 801593e:	f04f 0b00 	mov.w	fp, #0
 8015942:	7c23      	ldrb	r3, [r4, #16]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d067      	beq.n	8015a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8015948:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801594c:	a811      	add	r0, sp, #68	; 0x44
 801594e:	458a      	cmp	sl, r1
 8015950:	bfd4      	ite	le
 8015952:	2100      	movle	r1, #0
 8015954:	2101      	movgt	r1, #1
 8015956:	f7ff fe3b 	bl	80155d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801595a:	9b08      	ldr	r3, [sp, #32]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d056      	beq.n	8015a0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015960:	7c23      	ldrb	r3, [r4, #16]
 8015962:	225c      	movs	r2, #92	; 0x5c
 8015964:	4639      	mov	r1, r7
 8015966:	4628      	mov	r0, r5
 8015968:	9309      	str	r3, [sp, #36]	; 0x24
 801596a:	f00d fcc9 	bl	8023300 <memcpy>
 801596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015970:	2b00      	cmp	r3, #0
 8015972:	d059      	beq.n	8015a28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8015974:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8015978:	7922      	ldrb	r2, [r4, #4]
 801597a:	2a01      	cmp	r2, #1
 801597c:	d13d      	bne.n	80159fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801597e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8015982:	1ac0      	subs	r0, r0, r3
 8015984:	2302      	movs	r3, #2
 8015986:	fb90 f0f3 	sdiv	r0, r0, r3
 801598a:	b200      	sxth	r0, r0
 801598c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015990:	4418      	add	r0, r3
 8015992:	7c23      	ldrb	r3, [r4, #16]
 8015994:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 8015998:	2b00      	cmp	r3, #0
 801599a:	d03a      	beq.n	8015a12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801599c:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80159a0:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80159a4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80159a8:	9500      	str	r5, [sp, #0]
 80159aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159ac:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80159b0:	e9cd b703 	strd	fp, r7, [sp, #12]
 80159b4:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80159b8:	464a      	mov	r2, r9
 80159ba:	2100      	movs	r1, #0
 80159bc:	f7ff fc97 	bl	80152ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	d1b6      	bne.n	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80159c4:	b2b2      	uxth	r2, r6
 80159c6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80159ca:	4611      	mov	r1, r2
 80159cc:	4413      	add	r3, r2
 80159ce:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80159d2:	b21b      	sxth	r3, r3
 80159d4:	1a52      	subs	r2, r2, r1
 80159d6:	7c21      	ldrb	r1, [r4, #16]
 80159d8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80159dc:	b212      	sxth	r2, r2
 80159de:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80159e2:	b109      	cbz	r1, 80159e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 80159e4:	42b2      	cmp	r2, r6
 80159e6:	dba4      	blt.n	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80159e8:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80159ec:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80159f0:	440a      	add	r2, r1
 80159f2:	b212      	sxth	r2, r2
 80159f4:	4293      	cmp	r3, r2
 80159f6:	dda4      	ble.n	8015942 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 80159f8:	e79b      	b.n	8015932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 80159fa:	2a02      	cmp	r2, #2
 80159fc:	d105      	bne.n	8015a0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80159fe:	7be2      	ldrb	r2, [r4, #15]
 8015a00:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8015a04:	1a80      	subs	r0, r0, r2
 8015a06:	1ac0      	subs	r0, r0, r3
 8015a08:	e7bf      	b.n	801598a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 8015a0a:	2000      	movs	r0, #0
 8015a0c:	e7be      	b.n	801598c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8015a0e:	7be0      	ldrb	r0, [r4, #15]
 8015a10:	e7bc      	b.n	801598c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8015a12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015a16:	e7c3      	b.n	80159a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8015a18:	9b08      	ldr	r3, [sp, #32]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d0f7      	beq.n	8015a0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015a1e:	225c      	movs	r2, #92	; 0x5c
 8015a20:	4639      	mov	r1, r7
 8015a22:	4628      	mov	r0, r5
 8015a24:	f00d fc6c 	bl	8023300 <memcpy>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015a2e:	6821      	ldr	r1, [r4, #0]
 8015a30:	4628      	mov	r0, r5
 8015a32:	f7ff fbef 	bl	8015214 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015a36:	b203      	sxth	r3, r0
 8015a38:	e79e      	b.n	8015978 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

08015a3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015a3a:	2b02      	cmp	r3, #2
 8015a3c:	b510      	push	{r4, lr}
 8015a3e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015a42:	d00b      	beq.n	8015a5c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8015a44:	2b03      	cmp	r3, #3
 8015a46:	d00e      	beq.n	8015a66 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d001      	beq.n	8015a50 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8015a4c:	1860      	adds	r0, r4, r1
 8015a4e:	bd10      	pop	{r4, pc}
 8015a50:	8880      	ldrh	r0, [r0, #4]
 8015a52:	4420      	add	r0, r4
 8015a54:	b200      	sxth	r0, r0
 8015a56:	1a80      	subs	r0, r0, r2
 8015a58:	3801      	subs	r0, #1
 8015a5a:	e7f8      	b.n	8015a4e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8015a5c:	8880      	ldrh	r0, [r0, #4]
 8015a5e:	4420      	add	r0, r4
 8015a60:	b200      	sxth	r0, r0
 8015a62:	1a40      	subs	r0, r0, r1
 8015a64:	e7f8      	b.n	8015a58 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015a66:	18a0      	adds	r0, r4, r2
 8015a68:	e7f1      	b.n	8015a4e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08015a6a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015a6a:	2b02      	cmp	r3, #2
 8015a6c:	b510      	push	{r4, lr}
 8015a6e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015a72:	d006      	beq.n	8015a82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8015a74:	2b03      	cmp	r3, #3
 8015a76:	d00a      	beq.n	8015a8e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	bf14      	ite	ne
 8015a7c:	18a0      	addne	r0, r4, r2
 8015a7e:	1860      	addeq	r0, r4, r1
 8015a80:	bd10      	pop	{r4, pc}
 8015a82:	88c0      	ldrh	r0, [r0, #6]
 8015a84:	4420      	add	r0, r4
 8015a86:	b200      	sxth	r0, r0
 8015a88:	1a80      	subs	r0, r0, r2
 8015a8a:	3801      	subs	r0, #1
 8015a8c:	e7f8      	b.n	8015a80 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8015a8e:	88c0      	ldrh	r0, [r0, #6]
 8015a90:	4420      	add	r0, r4
 8015a92:	b200      	sxth	r0, r0
 8015a94:	1a40      	subs	r0, r0, r1
 8015a96:	e7f8      	b.n	8015a8a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08015a98 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015a98:	4b01      	ldr	r3, [pc, #4]	; (8015aa0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	601a      	str	r2, [r3, #0]
 8015a9e:	4770      	bx	lr
 8015aa0:	20056564 	.word	0x20056564

08015aa4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	b1c8      	cbz	r0, 8015adc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015aa8:	0c02      	lsrs	r2, r0, #16
 8015aaa:	0412      	lsls	r2, r2, #16
 8015aac:	b9a2      	cbnz	r2, 8015ad8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015aae:	0403      	lsls	r3, r0, #16
 8015ab0:	2010      	movs	r0, #16
 8015ab2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015ab6:	bf04      	itt	eq
 8015ab8:	021b      	lsleq	r3, r3, #8
 8015aba:	3008      	addeq	r0, #8
 8015abc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015ac0:	bf04      	itt	eq
 8015ac2:	011b      	lsleq	r3, r3, #4
 8015ac4:	3004      	addeq	r0, #4
 8015ac6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015aca:	bf04      	itt	eq
 8015acc:	009b      	lsleq	r3, r3, #2
 8015ace:	3002      	addeq	r0, #2
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	db04      	blt.n	8015ade <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015ad4:	3001      	adds	r0, #1
 8015ad6:	4770      	bx	lr
 8015ad8:	2000      	movs	r0, #0
 8015ada:	e7ea      	b.n	8015ab2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015adc:	2020      	movs	r0, #32
 8015ade:	4770      	bx	lr

08015ae0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae4:	b087      	sub	sp, #28
 8015ae6:	4681      	mov	r9, r0
 8015ae8:	4698      	mov	r8, r3
 8015aea:	4610      	mov	r0, r2
 8015aec:	460d      	mov	r5, r1
 8015aee:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015af2:	b981      	cbnz	r1, 8015b16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015af4:	b14b      	cbz	r3, 8015b0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015af6:	460b      	mov	r3, r1
 8015af8:	464a      	mov	r2, r9
 8015afa:	4641      	mov	r1, r8
 8015afc:	e9cd 4700 	strd	r4, r7, [sp]
 8015b00:	f7ff ffee 	bl	8015ae0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015b04:	b007      	add	sp, #28
 8015b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015b12:	603b      	str	r3, [r7, #0]
 8015b14:	e7f6      	b.n	8015b04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015b16:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015b1a:	d107      	bne.n	8015b2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015b1c:	fb09 f602 	mul.w	r6, r9, r2
 8015b20:	fbb6 f0f4 	udiv	r0, r6, r4
 8015b24:	fb04 6610 	mls	r6, r4, r0, r6
 8015b28:	603e      	str	r6, [r7, #0]
 8015b2a:	e7eb      	b.n	8015b04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015b2c:	2601      	movs	r6, #1
 8015b2e:	fa09 fb01 	lsl.w	fp, r9, r1
 8015b32:	408e      	lsls	r6, r1
 8015b34:	fbbb f3f4 	udiv	r3, fp, r4
 8015b38:	3e01      	subs	r6, #1
 8015b3a:	9302      	str	r3, [sp, #8]
 8015b3c:	fb0a f303 	mul.w	r3, sl, r3
 8015b40:	4016      	ands	r6, r2
 8015b42:	9303      	str	r3, [sp, #12]
 8015b44:	4630      	mov	r0, r6
 8015b46:	f7ff ffad 	bl	8015aa4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015b4a:	464a      	mov	r2, r9
 8015b4c:	460b      	mov	r3, r1
 8015b4e:	4601      	mov	r1, r0
 8015b50:	4630      	mov	r0, r6
 8015b52:	e9cd 4700 	strd	r4, r7, [sp]
 8015b56:	f7ff ffc3 	bl	8015ae0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015b5a:	9b02      	ldr	r3, [sp, #8]
 8015b5c:	4606      	mov	r6, r0
 8015b5e:	eb05 0108 	add.w	r1, r5, r8
 8015b62:	fb04 bb13 	mls	fp, r4, r3, fp
 8015b66:	4658      	mov	r0, fp
 8015b68:	f7ff ff9c 	bl	8015aa4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015b6c:	ab05      	add	r3, sp, #20
 8015b6e:	465a      	mov	r2, fp
 8015b70:	e9cd 4300 	strd	r4, r3, [sp]
 8015b74:	4603      	mov	r3, r0
 8015b76:	4650      	mov	r0, sl
 8015b78:	f7ff ffb2 	bl	8015ae0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015b7c:	6839      	ldr	r1, [r7, #0]
 8015b7e:	9a05      	ldr	r2, [sp, #20]
 8015b80:	9b03      	ldr	r3, [sp, #12]
 8015b82:	4411      	add	r1, r2
 8015b84:	fbb1 f2f4 	udiv	r2, r1, r4
 8015b88:	18d3      	adds	r3, r2, r3
 8015b8a:	fb04 1412 	mls	r4, r4, r2, r1
 8015b8e:	441e      	add	r6, r3
 8015b90:	603c      	str	r4, [r7, #0]
 8015b92:	4430      	add	r0, r6
 8015b94:	e7b6      	b.n	8015b04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015b96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015b96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b9a:	b085      	sub	sp, #20
 8015b9c:	f1b0 0900 	subs.w	r9, r0, #0
 8015ba0:	461d      	mov	r5, r3
 8015ba2:	4617      	mov	r7, r2
 8015ba4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ba6:	bfbb      	ittet	lt
 8015ba8:	f1c9 0900 	rsblt	r9, r9, #0
 8015bac:	f04f 36ff 	movlt.w	r6, #4294967295
 8015bb0:	2601      	movge	r6, #1
 8015bb2:	6823      	ldrlt	r3, [r4, #0]
 8015bb4:	bfbc      	itt	lt
 8015bb6:	425b      	neglt	r3, r3
 8015bb8:	6023      	strlt	r3, [r4, #0]
 8015bba:	2a00      	cmp	r2, #0
 8015bbc:	da04      	bge.n	8015bc8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015bbe:	6823      	ldr	r3, [r4, #0]
 8015bc0:	4257      	negs	r7, r2
 8015bc2:	4276      	negs	r6, r6
 8015bc4:	425b      	negs	r3, r3
 8015bc6:	6023      	str	r3, [r4, #0]
 8015bc8:	2d00      	cmp	r5, #0
 8015bca:	4638      	mov	r0, r7
 8015bcc:	bfba      	itte	lt
 8015bce:	426d      	neglt	r5, r5
 8015bd0:	f04f 38ff 	movlt.w	r8, #4294967295
 8015bd4:	f04f 0801 	movge.w	r8, #1
 8015bd8:	f7ff ff64 	bl	8015aa4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015bdc:	ab03      	add	r3, sp, #12
 8015bde:	463a      	mov	r2, r7
 8015be0:	e9cd 5300 	strd	r5, r3, [sp]
 8015be4:	4603      	mov	r3, r0
 8015be6:	4648      	mov	r0, r9
 8015be8:	f7ff ff7a 	bl	8015ae0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015bec:	6823      	ldr	r3, [r4, #0]
 8015bee:	9a03      	ldr	r2, [sp, #12]
 8015bf0:	4546      	cmp	r6, r8
 8015bf2:	441a      	add	r2, r3
 8015bf4:	fb92 f3f5 	sdiv	r3, r2, r5
 8015bf8:	4418      	add	r0, r3
 8015bfa:	fb05 2313 	mls	r3, r5, r3, r2
 8015bfe:	bf18      	it	ne
 8015c00:	4240      	negne	r0, r0
 8015c02:	1c72      	adds	r2, r6, #1
 8015c04:	6023      	str	r3, [r4, #0]
 8015c06:	d105      	bne.n	8015c14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	f1c3 0200 	rsb	r2, r3, #0
 8015c0e:	db0b      	blt.n	8015c28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015c10:	6022      	str	r2, [r4, #0]
 8015c12:	e006      	b.n	8015c22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015c14:	2e01      	cmp	r6, #1
 8015c16:	d104      	bne.n	8015c22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	da02      	bge.n	8015c22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015c1c:	442b      	add	r3, r5
 8015c1e:	3801      	subs	r0, #1
 8015c20:	6023      	str	r3, [r4, #0]
 8015c22:	b005      	add	sp, #20
 8015c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c28:	3801      	subs	r0, #1
 8015c2a:	1b52      	subs	r2, r2, r5
 8015c2c:	e7f0      	b.n	8015c10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015c30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015c30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015c34:	4c1c      	ldr	r4, [pc, #112]	; (8015ca8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015c36:	4605      	mov	r5, r0
 8015c38:	6807      	ldr	r7, [r0, #0]
 8015c3a:	69a3      	ldr	r3, [r4, #24]
 8015c3c:	b92b      	cbnz	r3, 8015c4a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015c3e:	6840      	ldr	r0, [r0, #4]
 8015c40:	e9c5 7000 	strd	r7, r0, [r5]
 8015c44:	b004      	add	sp, #16
 8015c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4a:	f04f 0802 	mov.w	r8, #2
 8015c4e:	68a2      	ldr	r2, [r4, #8]
 8015c50:	ae04      	add	r6, sp, #16
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	fb93 f1f8 	sdiv	r1, r3, r8
 8015c58:	440a      	add	r2, r1
 8015c5a:	69e1      	ldr	r1, [r4, #28]
 8015c5c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015c60:	463a      	mov	r2, r7
 8015c62:	9600      	str	r6, [sp, #0]
 8015c64:	f7ff ff97 	bl	8015b96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015c68:	69a3      	ldr	r3, [r4, #24]
 8015c6a:	4607      	mov	r7, r0
 8015c6c:	686a      	ldr	r2, [r5, #4]
 8015c6e:	6a21      	ldr	r1, [r4, #32]
 8015c70:	9600      	str	r6, [sp, #0]
 8015c72:	6860      	ldr	r0, [r4, #4]
 8015c74:	f7ff ff8f 	bl	8015b96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015c78:	69a3      	ldr	r3, [r4, #24]
 8015c7a:	6962      	ldr	r2, [r4, #20]
 8015c7c:	4407      	add	r7, r0
 8015c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015c80:	9600      	str	r6, [sp, #0]
 8015c82:	68e0      	ldr	r0, [r4, #12]
 8015c84:	fb93 f8f8 	sdiv	r8, r3, r8
 8015c88:	4442      	add	r2, r8
 8015c8a:	9203      	str	r2, [sp, #12]
 8015c8c:	682a      	ldr	r2, [r5, #0]
 8015c8e:	f7ff ff82 	bl	8015b96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015c92:	4680      	mov	r8, r0
 8015c94:	9600      	str	r6, [sp, #0]
 8015c96:	69a3      	ldr	r3, [r4, #24]
 8015c98:	686a      	ldr	r2, [r5, #4]
 8015c9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015c9c:	6920      	ldr	r0, [r4, #16]
 8015c9e:	f7ff ff7a 	bl	8015b96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015ca2:	4440      	add	r0, r8
 8015ca4:	e7cc      	b.n	8015c40 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015ca6:	bf00      	nop
 8015ca8:	20056568 	.word	0x20056568

08015cac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015cac:	4b07      	ldr	r3, [pc, #28]	; (8015ccc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015cae:	b510      	push	{r4, lr}
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d108      	bne.n	8015cc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015cb6:	4b06      	ldr	r3, [pc, #24]	; (8015cd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015cb8:	880c      	ldrh	r4, [r1, #0]
 8015cba:	881b      	ldrh	r3, [r3, #0]
 8015cbc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015cc0:	3b01      	subs	r3, #1
 8015cc2:	1b1b      	subs	r3, r3, r4
 8015cc4:	8003      	strh	r3, [r0, #0]
 8015cc6:	800a      	strh	r2, [r1, #0]
 8015cc8:	bd10      	pop	{r4, pc}
 8015cca:	bf00      	nop
 8015ccc:	20056534 	.word	0x20056534
 8015cd0:	20056538 	.word	0x20056538

08015cd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015cd4:	4b0a      	ldr	r3, [pc, #40]	; (8015d00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015cd6:	b510      	push	{r4, lr}
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	2b01      	cmp	r3, #1
 8015cdc:	d10e      	bne.n	8015cfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015cde:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015ce2:	8843      	ldrh	r3, [r0, #2]
 8015ce4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015ce8:	18ca      	adds	r2, r1, r3
 8015cea:	4b06      	ldr	r3, [pc, #24]	; (8015d04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015cec:	8044      	strh	r4, [r0, #2]
 8015cee:	881b      	ldrh	r3, [r3, #0]
 8015cf0:	1a9b      	subs	r3, r3, r2
 8015cf2:	8003      	strh	r3, [r0, #0]
 8015cf4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015cf8:	8081      	strh	r1, [r0, #4]
 8015cfa:	80c3      	strh	r3, [r0, #6]
 8015cfc:	bd10      	pop	{r4, pc}
 8015cfe:	bf00      	nop
 8015d00:	20056534 	.word	0x20056534
 8015d04:	20056530 	.word	0x20056530

08015d08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015d08:	4b07      	ldr	r3, [pc, #28]	; (8015d28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015d0a:	b510      	push	{r4, lr}
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	2b01      	cmp	r3, #1
 8015d10:	d108      	bne.n	8015d24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015d12:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015d16:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015d1a:	8003      	strh	r3, [r0, #0]
 8015d1c:	8893      	ldrh	r3, [r2, #4]
 8015d1e:	3b01      	subs	r3, #1
 8015d20:	1b1b      	subs	r3, r3, r4
 8015d22:	800b      	strh	r3, [r1, #0]
 8015d24:	bd10      	pop	{r4, pc}
 8015d26:	bf00      	nop
 8015d28:	20056534 	.word	0x20056534

08015d2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015d2c:	4b08      	ldr	r3, [pc, #32]	; (8015d50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015d2e:	b513      	push	{r0, r1, r4, lr}
 8015d30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d34:	2400      	movs	r4, #0
 8015d36:	4b07      	ldr	r3, [pc, #28]	; (8015d54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8015d38:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015d3c:	466a      	mov	r2, sp
 8015d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d42:	9400      	str	r4, [sp, #0]
 8015d44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015d48:	f7ff ffde 	bl	8015d08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015d4c:	b002      	add	sp, #8
 8015d4e:	bd10      	pop	{r4, pc}
 8015d50:	20056530 	.word	0x20056530
 8015d54:	20056532 	.word	0x20056532

08015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015d58:	4b0a      	ldr	r3, [pc, #40]	; (8015d84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015d5a:	460a      	mov	r2, r1
 8015d5c:	b510      	push	{r4, lr}
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d10d      	bne.n	8015d80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015d64:	8881      	ldrh	r1, [r0, #4]
 8015d66:	8803      	ldrh	r3, [r0, #0]
 8015d68:	440b      	add	r3, r1
 8015d6a:	4601      	mov	r1, r0
 8015d6c:	3b01      	subs	r3, #1
 8015d6e:	f821 3b02 	strh.w	r3, [r1], #2
 8015d72:	f7ff ffc9 	bl	8015d08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015d76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015d7a:	88c2      	ldrh	r2, [r0, #6]
 8015d7c:	80c3      	strh	r3, [r0, #6]
 8015d7e:	8082      	strh	r2, [r0, #4]
 8015d80:	bd10      	pop	{r4, pc}
 8015d82:	bf00      	nop
 8015d84:	20056534 	.word	0x20056534

08015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015d88:	4b09      	ldr	r3, [pc, #36]	; (8015db0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015d8a:	b507      	push	{r0, r1, r2, lr}
 8015d8c:	2100      	movs	r1, #0
 8015d8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d92:	4b08      	ldr	r3, [pc, #32]	; (8015db4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8015d94:	9100      	str	r1, [sp, #0]
 8015d96:	4669      	mov	r1, sp
 8015d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d9c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015da0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015da4:	f7ff ffd8 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015da8:	b003      	add	sp, #12
 8015daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dae:	bf00      	nop
 8015db0:	20056530 	.word	0x20056530
 8015db4:	20056532 	.word	0x20056532

08015db8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015db8:	4b06      	ldr	r3, [pc, #24]	; (8015dd4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015dba:	2100      	movs	r1, #0
 8015dbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015dc0:	4b05      	ldr	r3, [pc, #20]	; (8015dd8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015dc2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8015dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dca:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8015dce:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8015dd2:	4770      	bx	lr
 8015dd4:	20056530 	.word	0x20056530
 8015dd8:	20056532 	.word	0x20056532

08015ddc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015ddc:	4b03      	ldr	r3, [pc, #12]	; (8015dec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015dde:	6818      	ldr	r0, [r3, #0]
 8015de0:	b110      	cbz	r0, 8015de8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015de2:	6803      	ldr	r3, [r0, #0]
 8015de4:	699b      	ldr	r3, [r3, #24]
 8015de6:	4718      	bx	r3
 8015de8:	4770      	bx	lr
 8015dea:	bf00      	nop
 8015dec:	20056598 	.word	0x20056598

08015df0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015df0:	4770      	bx	lr
	...

08015df4 <_ZN8touchgfx11Application4drawEv>:
 8015df4:	4b09      	ldr	r3, [pc, #36]	; (8015e1c <_ZN8touchgfx11Application4drawEv+0x28>)
 8015df6:	b507      	push	{r0, r1, r2, lr}
 8015df8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	4b08      	ldr	r3, [pc, #32]	; (8015e20 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015e00:	9100      	str	r1, [sp, #0]
 8015e02:	4669      	mov	r1, sp
 8015e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e08:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015e0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015e10:	6803      	ldr	r3, [r0, #0]
 8015e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e14:	4798      	blx	r3
 8015e16:	b003      	add	sp, #12
 8015e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e1c:	20056530 	.word	0x20056530
 8015e20:	20056532 	.word	0x20056532

08015e24 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015e24:	4b03      	ldr	r3, [pc, #12]	; (8015e34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015e26:	6818      	ldr	r0, [r3, #0]
 8015e28:	b110      	cbz	r0, 8015e30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015e2a:	6803      	ldr	r3, [r0, #0]
 8015e2c:	69db      	ldr	r3, [r3, #28]
 8015e2e:	4718      	bx	r3
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop
 8015e34:	20056598 	.word	0x20056598

08015e38 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015e38:	4b03      	ldr	r3, [pc, #12]	; (8015e48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015e3a:	6818      	ldr	r0, [r3, #0]
 8015e3c:	b110      	cbz	r0, 8015e44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	6a1b      	ldr	r3, [r3, #32]
 8015e42:	4718      	bx	r3
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop
 8015e48:	20056598 	.word	0x20056598

08015e4c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015e4c:	4b03      	ldr	r3, [pc, #12]	; (8015e5c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015e4e:	6818      	ldr	r0, [r3, #0]
 8015e50:	b110      	cbz	r0, 8015e58 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015e52:	6803      	ldr	r3, [r0, #0]
 8015e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e56:	4718      	bx	r3
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop
 8015e5c:	20056598 	.word	0x20056598

08015e60 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015e60:	b570      	push	{r4, r5, r6, lr}
 8015e62:	4d34      	ldr	r5, [pc, #208]	; (8015f34 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8015e64:	4604      	mov	r4, r0
 8015e66:	6828      	ldr	r0, [r5, #0]
 8015e68:	b140      	cbz	r0, 8015e7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015e6a:	7a03      	ldrb	r3, [r0, #8]
 8015e6c:	b933      	cbnz	r3, 8015e7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015e6e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	689b      	ldr	r3, [r3, #8]
 8015e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e7a:	4718      	bx	r3
 8015e7c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8015e80:	b97b      	cbnz	r3, 8015ea2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015e82:	b170      	cbz	r0, 8015ea2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015e84:	7a03      	ldrb	r3, [r0, #8]
 8015e86:	b163      	cbz	r3, 8015ea2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015e88:	4b2b      	ldr	r3, [pc, #172]	; (8015f38 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8015e8a:	6818      	ldr	r0, [r3, #0]
 8015e8c:	b110      	cbz	r0, 8015e94 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015e8e:	6803      	ldr	r3, [r0, #0]
 8015e90:	691b      	ldr	r3, [r3, #16]
 8015e92:	4798      	blx	r3
 8015e94:	6828      	ldr	r0, [r5, #0]
 8015e96:	6803      	ldr	r3, [r0, #0]
 8015e98:	68db      	ldr	r3, [r3, #12]
 8015e9a:	4798      	blx	r3
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8015ea2:	2500      	movs	r5, #0
 8015ea4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8015ea8:	42a8      	cmp	r0, r5
 8015eaa:	dd0c      	ble.n	8015ec6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8015eac:	1963      	adds	r3, r4, r5
 8015eae:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8015eb2:	b132      	cbz	r2, 8015ec2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8015eb4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8015eb8:	4413      	add	r3, r2
 8015eba:	6858      	ldr	r0, [r3, #4]
 8015ebc:	6803      	ldr	r3, [r0, #0]
 8015ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015ec0:	4798      	blx	r3
 8015ec2:	3501      	adds	r5, #1
 8015ec4:	e7ee      	b.n	8015ea4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	461a      	mov	r2, r3
 8015eca:	4298      	cmp	r0, r3
 8015ecc:	d114      	bne.n	8015ef8 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8015ece:	1d25      	adds	r5, r4, #4
 8015ed0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8015ed4:	1e48      	subs	r0, r1, #1
 8015ed6:	b280      	uxth	r0, r0
 8015ed8:	4291      	cmp	r1, r2
 8015eda:	dd24      	ble.n	8015f26 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8015edc:	4288      	cmp	r0, r1
 8015ede:	d2fb      	bcs.n	8015ed8 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8015ee0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8015ee4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8015ee8:	3304      	adds	r3, #4
 8015eea:	428b      	cmp	r3, r1
 8015eec:	d018      	beq.n	8015f20 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8015eee:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8015ef2:	f843 6c04 	str.w	r6, [r3, #-4]
 8015ef6:	e7f8      	b.n	8015eea <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8015ef8:	18e1      	adds	r1, r4, r3
 8015efa:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8015efe:	b16d      	cbz	r5, 8015f1c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d00a      	beq.n	8015f1a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8015f04:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8015f08:	4431      	add	r1, r6
 8015f0a:	684e      	ldr	r6, [r1, #4]
 8015f0c:	b291      	uxth	r1, r2
 8015f0e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8015f12:	604e      	str	r6, [r1, #4]
 8015f14:	18a1      	adds	r1, r4, r2
 8015f16:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8015f1a:	3201      	adds	r2, #1
 8015f1c:	3301      	adds	r3, #1
 8015f1e:	e7d4      	b.n	8015eca <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8015f20:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8015f24:	e7d4      	b.n	8015ed0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8015f26:	4b04      	ldr	r3, [pc, #16]	; (8015f38 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8015f28:	6818      	ldr	r0, [r3, #0]
 8015f2a:	b110      	cbz	r0, 8015f32 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8015f2c:	6803      	ldr	r3, [r0, #0]
 8015f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f30:	e7a1      	b.n	8015e76 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015f32:	bd70      	pop	{r4, r5, r6, pc}
 8015f34:	2005659c 	.word	0x2005659c
 8015f38:	20056598 	.word	0x20056598

08015f3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	4606      	mov	r6, r0
 8015f40:	460c      	mov	r4, r1
 8015f42:	b929      	cbnz	r1, 8015f50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8015f44:	4b0c      	ldr	r3, [pc, #48]	; (8015f78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8015f46:	2167      	movs	r1, #103	; 0x67
 8015f48:	4a0c      	ldr	r2, [pc, #48]	; (8015f7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8015f4a:	480d      	ldr	r0, [pc, #52]	; (8015f80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8015f4c:	f00d f95a 	bl	8023204 <__assert_func>
 8015f50:	2300      	movs	r3, #0
 8015f52:	4d0c      	ldr	r5, [pc, #48]	; (8015f84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8015f54:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8015f58:	6828      	ldr	r0, [r5, #0]
 8015f5a:	b110      	cbz	r0, 8015f62 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8015f5c:	6803      	ldr	r3, [r0, #0]
 8015f5e:	695b      	ldr	r3, [r3, #20]
 8015f60:	4798      	blx	r3
 8015f62:	602c      	str	r4, [r5, #0]
 8015f64:	4620      	mov	r0, r4
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	68db      	ldr	r3, [r3, #12]
 8015f6a:	4798      	blx	r3
 8015f6c:	6833      	ldr	r3, [r6, #0]
 8015f6e:	4630      	mov	r0, r6
 8015f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f76:	4718      	bx	r3
 8015f78:	0802705c 	.word	0x0802705c
 8015f7c:	0802712c 	.word	0x0802712c
 8015f80:	08027066 	.word	0x08027066
 8015f84:	20056598 	.word	0x20056598

08015f88 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015f88:	b570      	push	{r4, r5, r6, lr}
 8015f8a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015f8e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015f92:	42ac      	cmp	r4, r5
 8015f94:	db18      	blt.n	8015fc8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015f96:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8015f9a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	db12      	blt.n	8015fc8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015fa2:	8886      	ldrh	r6, [r0, #4]
 8015fa4:	4435      	add	r5, r6
 8015fa6:	888e      	ldrh	r6, [r1, #4]
 8015fa8:	4434      	add	r4, r6
 8015faa:	b22d      	sxth	r5, r5
 8015fac:	b224      	sxth	r4, r4
 8015fae:	42a5      	cmp	r5, r4
 8015fb0:	db0a      	blt.n	8015fc8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015fb2:	88c0      	ldrh	r0, [r0, #6]
 8015fb4:	4418      	add	r0, r3
 8015fb6:	88cb      	ldrh	r3, [r1, #6]
 8015fb8:	441a      	add	r2, r3
 8015fba:	b200      	sxth	r0, r0
 8015fbc:	b212      	sxth	r2, r2
 8015fbe:	4290      	cmp	r0, r2
 8015fc0:	bfb4      	ite	lt
 8015fc2:	2000      	movlt	r0, #0
 8015fc4:	2001      	movge	r0, #1
 8015fc6:	bd70      	pop	{r4, r5, r6, pc}
 8015fc8:	2000      	movs	r0, #0
 8015fca:	e7fc      	b.n	8015fc6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08015fcc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fce:	4604      	mov	r4, r0
 8015fd0:	4608      	mov	r0, r1
 8015fd2:	460d      	mov	r5, r1
 8015fd4:	f7fc fa25 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015fd8:	b978      	cbnz	r0, 8015ffa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f7fc fa21 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015fe0:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015fe4:	b150      	cbz	r0, 8015ffc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015fe6:	8026      	strh	r6, [r4, #0]
 8015fe8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015fec:	8063      	strh	r3, [r4, #2]
 8015fee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015ff2:	80a3      	strh	r3, [r4, #4]
 8015ff4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015ff8:	80e3      	strh	r3, [r4, #6]
 8015ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ffc:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016000:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016004:	42b1      	cmp	r1, r6
 8016006:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801600a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801600e:	460f      	mov	r7, r1
 8016010:	88ed      	ldrh	r5, [r5, #6]
 8016012:	bfa8      	it	ge
 8016014:	4637      	movge	r7, r6
 8016016:	4293      	cmp	r3, r2
 8016018:	4618      	mov	r0, r3
 801601a:	4466      	add	r6, ip
 801601c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016020:	bfa8      	it	ge
 8016022:	4610      	movge	r0, r2
 8016024:	442a      	add	r2, r5
 8016026:	88e5      	ldrh	r5, [r4, #6]
 8016028:	4461      	add	r1, ip
 801602a:	b236      	sxth	r6, r6
 801602c:	8027      	strh	r7, [r4, #0]
 801602e:	442b      	add	r3, r5
 8016030:	b209      	sxth	r1, r1
 8016032:	b212      	sxth	r2, r2
 8016034:	8060      	strh	r0, [r4, #2]
 8016036:	b21b      	sxth	r3, r3
 8016038:	428e      	cmp	r6, r1
 801603a:	bfac      	ite	ge
 801603c:	ebc7 0106 	rsbge	r1, r7, r6
 8016040:	ebc7 0101 	rsblt	r1, r7, r1
 8016044:	429a      	cmp	r2, r3
 8016046:	bfac      	ite	ge
 8016048:	ebc0 0202 	rsbge	r2, r0, r2
 801604c:	ebc0 0203 	rsblt	r2, r0, r3
 8016050:	80a1      	strh	r1, [r4, #4]
 8016052:	80e2      	strh	r2, [r4, #6]
 8016054:	e7d1      	b.n	8015ffa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016058 <_ZN8touchgfx11Application11getInstanceEv>:
 8016058:	4b01      	ldr	r3, [pc, #4]	; (8016060 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801605a:	6818      	ldr	r0, [r3, #0]
 801605c:	4770      	bx	lr
 801605e:	bf00      	nop
 8016060:	200565a8 	.word	0x200565a8

08016064 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8016064:	2300      	movs	r3, #0
 8016066:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801606a:	30a8      	adds	r0, #168	; 0xa8
 801606c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016070:	f802 3b01 	strb.w	r3, [r2], #1
 8016074:	4282      	cmp	r2, r0
 8016076:	d1fb      	bne.n	8016070 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8016078:	4770      	bx	lr

0801607a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801607a:	4603      	mov	r3, r0
 801607c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016080:	2200      	movs	r2, #0
 8016082:	801a      	strh	r2, [r3, #0]
 8016084:	3308      	adds	r3, #8
 8016086:	f823 2c06 	strh.w	r2, [r3, #-6]
 801608a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801608e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016092:	428b      	cmp	r3, r1
 8016094:	d1f5      	bne.n	8016082 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016096:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801609a:	4770      	bx	lr

0801609c <_ZN8touchgfx11ApplicationC1Ev>:
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	4b1a      	ldr	r3, [pc, #104]	; (8016108 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80160a0:	2500      	movs	r5, #0
 80160a2:	4604      	mov	r4, r0
 80160a4:	30a8      	adds	r0, #168	; 0xa8
 80160a6:	f840 3ca8 	str.w	r3, [r0, #-168]
 80160aa:	f820 5c24 	strh.w	r5, [r0, #-36]
 80160ae:	f7ff ffe4 	bl	801607a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80160b2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80160b6:	f7ff ffe0 	bl	801607a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80160ba:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80160be:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80160c2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80160c6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80160ca:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80160ce:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80160d2:	490e      	ldr	r1, [pc, #56]	; (801610c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80160d4:	480e      	ldr	r0, [pc, #56]	; (8016110 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80160d6:	f00b fa69 	bl	80215ac <CRC_Lock>
 80160da:	4e0e      	ldr	r6, [pc, #56]	; (8016114 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80160dc:	4b0e      	ldr	r3, [pc, #56]	; (8016118 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80160de:	b158      	cbz	r0, 80160f8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80160e0:	801d      	strh	r5, [r3, #0]
 80160e2:	2300      	movs	r3, #0
 80160e4:	4a0d      	ldr	r2, [pc, #52]	; (801611c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80160e6:	4620      	mov	r0, r4
 80160e8:	6013      	str	r3, [r2, #0]
 80160ea:	4a0d      	ldr	r2, [pc, #52]	; (8016120 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80160ec:	6033      	str	r3, [r6, #0]
 80160ee:	6013      	str	r3, [r2, #0]
 80160f0:	f7ff ffb8 	bl	8016064 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80160f4:	4620      	mov	r0, r4
 80160f6:	bd70      	pop	{r4, r5, r6, pc}
 80160f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160fc:	2002      	movs	r0, #2
 80160fe:	801a      	strh	r2, [r3, #0]
 8016100:	6030      	str	r0, [r6, #0]
 8016102:	f001 fb41 	bl	8017788 <_ZN8touchgfx6Screen4drawEv>
 8016106:	e7ec      	b.n	80160e2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8016108:	080270f0 	.word	0x080270f0
 801610c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016110:	f407a5c2 	.word	0xf407a5c2
 8016114:	20056598 	.word	0x20056598
 8016118:	2000001c 	.word	0x2000001c
 801611c:	200565a8 	.word	0x200565a8
 8016120:	2005659c 	.word	0x2005659c

08016124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016124:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016128:	428b      	cmp	r3, r1
 801612a:	b510      	push	{r4, lr}
 801612c:	d90e      	bls.n	801614c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801612e:	3b01      	subs	r3, #1
 8016130:	b29b      	uxth	r3, r3
 8016132:	428b      	cmp	r3, r1
 8016134:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016138:	d908      	bls.n	801614c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801613a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801613e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016148:	685a      	ldr	r2, [r3, #4]
 801614a:	6062      	str	r2, [r4, #4]
 801614c:	bd10      	pop	{r4, pc}
	...

08016150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8016150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016152:	466b      	mov	r3, sp
 8016154:	4604      	mov	r4, r0
 8016156:	e883 0006 	stmia.w	r3, {r1, r2}
 801615a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801615e:	2a07      	cmp	r2, #7
 8016160:	d906      	bls.n	8016170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8016162:	4b09      	ldr	r3, [pc, #36]	; (8016188 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8016164:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8016168:	4a08      	ldr	r2, [pc, #32]	; (801618c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801616a:	4809      	ldr	r0, [pc, #36]	; (8016190 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801616c:	f00d f84a 	bl	8023204 <__assert_func>
 8016170:	1c51      	adds	r1, r2, #1
 8016172:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016176:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801617a:	cb03      	ldmia	r3!, {r0, r1}
 801617c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8016180:	6069      	str	r1, [r5, #4]
 8016182:	b003      	add	sp, #12
 8016184:	bd30      	pop	{r4, r5, pc}
 8016186:	bf00      	nop
 8016188:	08027090 	.word	0x08027090
 801618c:	08027170 	.word	0x08027170
 8016190:	080270bf 	.word	0x080270bf

08016194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016198:	b08d      	sub	sp, #52	; 0x34
 801619a:	4683      	mov	fp, r0
 801619c:	ac08      	add	r4, sp, #32
 801619e:	4620      	mov	r0, r4
 80161a0:	e884 0006 	stmia.w	r4, {r1, r2}
 80161a4:	f7fc f93d 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d16a      	bne.n	8016282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80161ac:	9402      	str	r4, [sp, #8]
 80161ae:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80161b2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80161b6:	2400      	movs	r4, #0
 80161b8:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80161bc:	9301      	str	r3, [sp, #4]
 80161be:	36a0      	adds	r6, #160	; 0xa0
 80161c0:	42a5      	cmp	r5, r4
 80161c2:	d00d      	beq.n	80161e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 80161c4:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80161c8:	9802      	ldr	r0, [sp, #8]
 80161ca:	f7ff fedd 	bl	8015f88 <_ZNK8touchgfx4Rect8includesERKS0_>
 80161ce:	b128      	cbz	r0, 80161dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80161d0:	1e69      	subs	r1, r5, #1
 80161d2:	9801      	ldr	r0, [sp, #4]
 80161d4:	1b09      	subs	r1, r1, r4
 80161d6:	b289      	uxth	r1, r1
 80161d8:	f7ff ffa4 	bl	8016124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80161dc:	3401      	adds	r4, #1
 80161de:	e7ef      	b.n	80161c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80161e0:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80161e4:	1e7b      	subs	r3, r7, #1
 80161e6:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80161ea:	9703      	str	r7, [sp, #12]
 80161ec:	9300      	str	r3, [sp, #0]
 80161ee:	2400      	movs	r4, #0
 80161f0:	4655      	mov	r5, sl
 80161f2:	9704      	str	r7, [sp, #16]
 80161f4:	4626      	mov	r6, r4
 80161f6:	9b04      	ldr	r3, [sp, #16]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d078      	beq.n	80162ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 80161fc:	9902      	ldr	r1, [sp, #8]
 80161fe:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016202:	f7fd fad7 	bl	80137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016206:	b360      	cbz	r0, 8016262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8016208:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801620c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8016210:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8016214:	45e6      	cmp	lr, ip
 8016216:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801621a:	db35      	blt.n	8016288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801621c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016220:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8016224:	4472      	add	r2, lr
 8016226:	4463      	add	r3, ip
 8016228:	b212      	sxth	r2, r2
 801622a:	b21b      	sxth	r3, r3
 801622c:	429a      	cmp	r2, r3
 801622e:	dc2b      	bgt.n	8016288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8016230:	fa1f f288 	uxth.w	r2, r8
 8016234:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016238:	45c1      	cmp	r9, r8
 801623a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801623e:	4413      	add	r3, r2
 8016240:	fa1f fc89 	uxth.w	ip, r9
 8016244:	b29b      	uxth	r3, r3
 8016246:	fa0f fe83 	sxth.w	lr, r3
 801624a:	db0f      	blt.n	801626c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801624c:	eba3 030c 	sub.w	r3, r3, ip
 8016250:	1ac9      	subs	r1, r1, r3
 8016252:	b209      	sxth	r1, r1
 8016254:	2900      	cmp	r1, #0
 8016256:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801625a:	dd12      	ble.n	8016282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801625c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8016260:	4604      	mov	r4, r0
 8016262:	9b04      	ldr	r3, [sp, #16]
 8016264:	3d08      	subs	r5, #8
 8016266:	3b01      	subs	r3, #1
 8016268:	9304      	str	r3, [sp, #16]
 801626a:	e7c4      	b.n	80161f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801626c:	4461      	add	r1, ip
 801626e:	b209      	sxth	r1, r1
 8016270:	4571      	cmp	r1, lr
 8016272:	dc3a      	bgt.n	80162ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8016274:	eba2 020c 	sub.w	r2, r2, ip
 8016278:	b212      	sxth	r2, r2
 801627a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801627e:	2a00      	cmp	r2, #0
 8016280:	dcee      	bgt.n	8016260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8016282:	b00d      	add	sp, #52	; 0x34
 8016284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016288:	45c1      	cmp	r9, r8
 801628a:	db2e      	blt.n	80162ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801628c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8016290:	4499      	add	r9, r3
 8016292:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016296:	4498      	add	r8, r3
 8016298:	fa0f f989 	sxth.w	r9, r9
 801629c:	fa0f f888 	sxth.w	r8, r8
 80162a0:	45c1      	cmp	r9, r8
 80162a2:	dc22      	bgt.n	80162ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80162a4:	fa1f f28c 	uxth.w	r2, ip
 80162a8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80162ac:	45e6      	cmp	lr, ip
 80162ae:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80162b2:	4413      	add	r3, r2
 80162b4:	fa1f f88e 	uxth.w	r8, lr
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	fa0f f983 	sxth.w	r9, r3
 80162be:	db0a      	blt.n	80162d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 80162c0:	eba3 0308 	sub.w	r3, r3, r8
 80162c4:	1ac9      	subs	r1, r1, r3
 80162c6:	b209      	sxth	r1, r1
 80162c8:	2900      	cmp	r1, #0
 80162ca:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80162ce:	ddd8      	ble.n	8016282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80162d0:	f8ad 9020 	strh.w	r9, [sp, #32]
 80162d4:	e7c4      	b.n	8016260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80162d6:	4441      	add	r1, r8
 80162d8:	b209      	sxth	r1, r1
 80162da:	4549      	cmp	r1, r9
 80162dc:	dc05      	bgt.n	80162ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80162de:	eba2 0208 	sub.w	r2, r2, r8
 80162e2:	b212      	sxth	r2, r2
 80162e4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80162e8:	e7c9      	b.n	801627e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80162ea:	4606      	mov	r6, r0
 80162ec:	e7b9      	b.n	8016262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80162ee:	2c00      	cmp	r4, #0
 80162f0:	f47f af7d 	bne.w	80161ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80162f4:	2e00      	cmp	r6, #0
 80162f6:	f000 81dc 	beq.w	80166b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80162fa:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 80162fe:	4655      	mov	r5, sl
 8016300:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8016304:	b2b9      	uxth	r1, r7
 8016306:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801630a:	b2b3      	uxth	r3, r6
 801630c:	9104      	str	r1, [sp, #16]
 801630e:	9804      	ldr	r0, [sp, #16]
 8016310:	441a      	add	r2, r3
 8016312:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8016316:	b292      	uxth	r2, r2
 8016318:	4401      	add	r1, r0
 801631a:	fa0f f882 	sxth.w	r8, r2
 801631e:	b289      	uxth	r1, r1
 8016320:	9105      	str	r1, [sp, #20]
 8016322:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8016326:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801632a:	9b03      	ldr	r3, [sp, #12]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d054      	beq.n	80163da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8016330:	9902      	ldr	r1, [sp, #8]
 8016332:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016336:	f7fd fa3d 	bl	80137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801633a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801633e:	b1d8      	cbz	r0, 8016378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016340:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8016344:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8016348:	4576      	cmp	r6, lr
 801634a:	dc26      	bgt.n	801639a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801634c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8016350:	44f4      	add	ip, lr
 8016352:	fa0f fc8c 	sxth.w	ip, ip
 8016356:	45e0      	cmp	r8, ip
 8016358:	db1f      	blt.n	801639a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801635a:	428f      	cmp	r7, r1
 801635c:	fa1f fc81 	uxth.w	ip, r1
 8016360:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8016364:	dc0f      	bgt.n	8016386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8016366:	9805      	ldr	r0, [sp, #20]
 8016368:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801636c:	eba0 0c0c 	sub.w	ip, r0, ip
 8016370:	eba1 010c 	sub.w	r1, r1, ip
 8016374:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8016378:	4620      	mov	r0, r4
 801637a:	9903      	ldr	r1, [sp, #12]
 801637c:	3d08      	subs	r5, #8
 801637e:	4604      	mov	r4, r0
 8016380:	3901      	subs	r1, #1
 8016382:	9103      	str	r1, [sp, #12]
 8016384:	e7cf      	b.n	8016326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8016386:	4461      	add	r1, ip
 8016388:	b209      	sxth	r1, r1
 801638a:	4549      	cmp	r1, r9
 801638c:	dcf5      	bgt.n	801637a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801638e:	9904      	ldr	r1, [sp, #16]
 8016390:	eba1 0c0c 	sub.w	ip, r1, ip
 8016394:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8016398:	e7ee      	b.n	8016378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801639a:	428f      	cmp	r7, r1
 801639c:	dced      	bgt.n	801637a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801639e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80163a2:	4461      	add	r1, ip
 80163a4:	b209      	sxth	r1, r1
 80163a6:	4589      	cmp	r9, r1
 80163a8:	dbe7      	blt.n	801637a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80163aa:	4576      	cmp	r6, lr
 80163ac:	fa1f fc8e 	uxth.w	ip, lr
 80163b0:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80163b4:	dc08      	bgt.n	80163c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 80163b6:	eba2 0c0c 	sub.w	ip, r2, ip
 80163ba:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80163be:	eba1 010c 	sub.w	r1, r1, ip
 80163c2:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80163c6:	e7d7      	b.n	8016378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80163c8:	4461      	add	r1, ip
 80163ca:	b209      	sxth	r1, r1
 80163cc:	4588      	cmp	r8, r1
 80163ce:	dbd4      	blt.n	801637a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80163d0:	eba3 0c0c 	sub.w	ip, r3, ip
 80163d4:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80163d8:	e7ce      	b.n	8016378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80163da:	2c00      	cmp	r4, #0
 80163dc:	f000 8169 	beq.w	80166b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80163e0:	9b00      	ldr	r3, [sp, #0]
 80163e2:	3301      	adds	r3, #1
 80163e4:	f000 8165 	beq.w	80166b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80163e8:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80163ec:	9802      	ldr	r0, [sp, #8]
 80163ee:	4621      	mov	r1, r4
 80163f0:	f7ff fdca 	bl	8015f88 <_ZNK8touchgfx4Rect8includesERKS0_>
 80163f4:	b120      	cbz	r0, 8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 80163f6:	f8bd 1000 	ldrh.w	r1, [sp]
 80163fa:	9801      	ldr	r0, [sp, #4]
 80163fc:	f7ff fe92 	bl	8016124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016400:	9902      	ldr	r1, [sp, #8]
 8016402:	4620      	mov	r0, r4
 8016404:	f7fd f9d6 	bl	80137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016408:	2800      	cmp	r0, #0
 801640a:	f000 809b 	beq.w	8016544 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801640e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8016412:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8016416:	fa1f f288 	uxth.w	r2, r8
 801641a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801641e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8016422:	19d5      	adds	r5, r2, r7
 8016424:	b2a1      	uxth	r1, r4
 8016426:	45a0      	cmp	r8, r4
 8016428:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801642c:	fa1f f985 	uxth.w	r9, r5
 8016430:	440b      	add	r3, r1
 8016432:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8016436:	fa0f f589 	sxth.w	r5, r9
 801643a:	b29b      	uxth	r3, r3
 801643c:	9503      	str	r5, [sp, #12]
 801643e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016442:	9507      	str	r5, [sp, #28]
 8016444:	f340 809d 	ble.w	8016582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016448:	1a52      	subs	r2, r2, r1
 801644a:	4584      	cmp	ip, r0
 801644c:	fa0f fe83 	sxth.w	lr, r3
 8016450:	b292      	uxth	r2, r2
 8016452:	b215      	sxth	r5, r2
 8016454:	dd2f      	ble.n	80164b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8016456:	9e00      	ldr	r6, [sp, #0]
 8016458:	fa1f fc8c 	uxth.w	ip, ip
 801645c:	b280      	uxth	r0, r0
 801645e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8016462:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8016466:	9e03      	ldr	r6, [sp, #12]
 8016468:	ebac 0300 	sub.w	r3, ip, r0
 801646c:	448c      	add	ip, r1
 801646e:	eba6 060e 	sub.w	r6, r6, lr
 8016472:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8016476:	b29b      	uxth	r3, r3
 8016478:	4470      	add	r0, lr
 801647a:	fa0f fc8c 	sxth.w	ip, ip
 801647e:	b21c      	sxth	r4, r3
 8016480:	b200      	sxth	r0, r0
 8016482:	4366      	muls	r6, r4
 8016484:	ebac 0000 	sub.w	r0, ip, r0
 8016488:	4368      	muls	r0, r5
 801648a:	4286      	cmp	r6, r0
 801648c:	db09      	blt.n	80164a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801648e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8016492:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8016496:	4417      	add	r7, r2
 8016498:	f8ad 3020 	strh.w	r3, [sp, #32]
 801649c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80164a0:	e685      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80164a2:	440b      	add	r3, r1
 80164a4:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80164a8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80164ac:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80164b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80164b4:	e67b      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80164b6:	9e03      	ldr	r6, [sp, #12]
 80164b8:	45b6      	cmp	lr, r6
 80164ba:	da28      	bge.n	801650e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 80164bc:	9b00      	ldr	r3, [sp, #0]
 80164be:	eba6 060e 	sub.w	r6, r6, lr
 80164c2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80164c6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80164ca:	eb04 030c 	add.w	r3, r4, ip
 80164ce:	fa1f f883 	uxth.w	r8, r3
 80164d2:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80164d6:	4403      	add	r3, r0
 80164d8:	fa0f f988 	sxth.w	r9, r8
 80164dc:	eba0 000c 	sub.w	r0, r0, ip
 80164e0:	eba3 0308 	sub.w	r3, r3, r8
 80164e4:	4368      	muls	r0, r5
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	fa0f f883 	sxth.w	r8, r3
 80164ec:	fb08 f606 	mul.w	r6, r8, r6
 80164f0:	42b0      	cmp	r0, r6
 80164f2:	dc06      	bgt.n	8016502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 80164f4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 80164f8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 80164fc:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8016500:	e7c9      	b.n	8016496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8016502:	4423      	add	r3, r4
 8016504:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8016508:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801650c:	e64f      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801650e:	eba3 0309 	sub.w	r3, r3, r9
 8016512:	9807      	ldr	r0, [sp, #28]
 8016514:	b29b      	uxth	r3, r3
 8016516:	2806      	cmp	r0, #6
 8016518:	fa0f fc83 	sxth.w	ip, r3
 801651c:	d818      	bhi.n	8016550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801651e:	4652      	mov	r2, sl
 8016520:	ab0a      	add	r3, sp, #40	; 0x28
 8016522:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8016526:	6851      	ldr	r1, [r2, #4]
 8016528:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801652c:	c303      	stmia	r3!, {r0, r1}
 801652e:	9b03      	ldr	r3, [sp, #12]
 8016530:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8016534:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8016538:	ab0a      	add	r3, sp, #40	; 0x28
 801653a:	9801      	ldr	r0, [sp, #4]
 801653c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8016540:	f7ff fe06 	bl	8016150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016544:	9b00      	ldr	r3, [sp, #0]
 8016546:	f1aa 0a08 	sub.w	sl, sl, #8
 801654a:	3b01      	subs	r3, #1
 801654c:	9300      	str	r3, [sp, #0]
 801654e:	e747      	b.n	80163e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016550:	9800      	ldr	r0, [sp, #0]
 8016552:	45ac      	cmp	ip, r5
 8016554:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8016558:	db0c      	blt.n	8016574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801655a:	4417      	add	r7, r2
 801655c:	4458      	add	r0, fp
 801655e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016562:	b2bf      	uxth	r7, r7
 8016564:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8016568:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801656c:	440f      	add	r7, r1
 801656e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8016572:	e61c      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8016574:	4458      	add	r0, fp
 8016576:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801657a:	443b      	add	r3, r7
 801657c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016580:	e615      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8016582:	fa1f f18c 	uxth.w	r1, ip
 8016586:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801658a:	b282      	uxth	r2, r0
 801658c:	4584      	cmp	ip, r0
 801658e:	eb01 0e05 	add.w	lr, r1, r5
 8016592:	9204      	str	r2, [sp, #16]
 8016594:	fa1f fe8e 	uxth.w	lr, lr
 8016598:	9e04      	ldr	r6, [sp, #16]
 801659a:	fa0f f28e 	sxth.w	r2, lr
 801659e:	9205      	str	r2, [sp, #20]
 80165a0:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80165a4:	4432      	add	r2, r6
 80165a6:	b292      	uxth	r2, r2
 80165a8:	9206      	str	r2, [sp, #24]
 80165aa:	da26      	bge.n	80165fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 80165ac:	eba3 0309 	sub.w	r3, r3, r9
 80165b0:	eba2 020e 	sub.w	r2, r2, lr
 80165b4:	eba0 000c 	sub.w	r0, r0, ip
 80165b8:	eba4 0408 	sub.w	r4, r4, r8
 80165bc:	b29b      	uxth	r3, r3
 80165be:	b292      	uxth	r2, r2
 80165c0:	fa0f fa83 	sxth.w	sl, r3
 80165c4:	b211      	sxth	r1, r2
 80165c6:	fb0a f000 	mul.w	r0, sl, r0
 80165ca:	434c      	muls	r4, r1
 80165cc:	42a0      	cmp	r0, r4
 80165ce:	9800      	ldr	r0, [sp, #0]
 80165d0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80165d4:	dc06      	bgt.n	80165e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80165d6:	4458      	add	r0, fp
 80165d8:	9a05      	ldr	r2, [sp, #20]
 80165da:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80165de:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80165e2:	e7ca      	b.n	801657a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80165e4:	eb0b 0300 	add.w	r3, fp, r0
 80165e8:	9903      	ldr	r1, [sp, #12]
 80165ea:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 80165ee:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 80165f2:	442a      	add	r2, r5
 80165f4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80165f8:	e5d9      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80165fa:	9e04      	ldr	r6, [sp, #16]
 80165fc:	9a03      	ldr	r2, [sp, #12]
 80165fe:	1b89      	subs	r1, r1, r6
 8016600:	b21e      	sxth	r6, r3
 8016602:	b289      	uxth	r1, r1
 8016604:	4296      	cmp	r6, r2
 8016606:	fa0f fc81 	sxth.w	ip, r1
 801660a:	dd25      	ble.n	8016658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801660c:	eba3 0309 	sub.w	r3, r3, r9
 8016610:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8016614:	9e05      	ldr	r6, [sp, #20]
 8016616:	eba4 0408 	sub.w	r4, r4, r8
 801661a:	b29b      	uxth	r3, r3
 801661c:	eba6 0902 	sub.w	r9, r6, r2
 8016620:	fb0c f404 	mul.w	r4, ip, r4
 8016624:	b218      	sxth	r0, r3
 8016626:	9a00      	ldr	r2, [sp, #0]
 8016628:	fb00 f909 	mul.w	r9, r0, r9
 801662c:	00d2      	lsls	r2, r2, #3
 801662e:	454c      	cmp	r4, r9
 8016630:	db03      	blt.n	801663a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8016632:	445a      	add	r2, fp
 8016634:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8016638:	e79f      	b.n	801657a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801663a:	eb0b 0302 	add.w	r3, fp, r2
 801663e:	9a03      	ldr	r2, [sp, #12]
 8016640:	4429      	add	r1, r5
 8016642:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8016646:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801664a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801664e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8016652:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016656:	e5aa      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8016658:	9b06      	ldr	r3, [sp, #24]
 801665a:	9c07      	ldr	r4, [sp, #28]
 801665c:	eba3 020e 	sub.w	r2, r3, lr
 8016660:	2c06      	cmp	r4, #6
 8016662:	b292      	uxth	r2, r2
 8016664:	b213      	sxth	r3, r2
 8016666:	d80d      	bhi.n	8016684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8016668:	4651      	mov	r1, sl
 801666a:	aa0a      	add	r2, sp, #40	; 0x28
 801666c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8016670:	6849      	ldr	r1, [r1, #4]
 8016672:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8016676:	9b05      	ldr	r3, [sp, #20]
 8016678:	c203      	stmia	r2!, {r0, r1}
 801667a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801667e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8016682:	e759      	b.n	8016538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8016684:	9c00      	ldr	r4, [sp, #0]
 8016686:	4563      	cmp	r3, ip
 8016688:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801668c:	db0d      	blt.n	80166aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801668e:	4429      	add	r1, r5
 8016690:	9a04      	ldr	r2, [sp, #16]
 8016692:	445c      	add	r4, fp
 8016694:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016698:	b289      	uxth	r1, r1
 801669a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801669e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80166a2:	4411      	add	r1, r2
 80166a4:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80166a8:	e581      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80166aa:	445c      	add	r4, fp
 80166ac:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80166b0:	e79f      	b.n	80165f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 80166b2:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80166b6:	2f07      	cmp	r7, #7
 80166b8:	d806      	bhi.n	80166c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80166ba:	ab08      	add	r3, sp, #32
 80166bc:	9801      	ldr	r0, [sp, #4]
 80166be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80166c2:	f7ff fd45 	bl	8016150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80166c6:	e5dc      	b.n	8016282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80166c8:	f107 39ff 	add.w	r9, r7, #4294967295
 80166cc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80166d0:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80166d4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80166d8:	f04f 35ff 	mov.w	r5, #4294967295
 80166dc:	2400      	movs	r4, #0
 80166de:	9304      	str	r3, [sp, #16]
 80166e0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80166e4:	f109 32ff 	add.w	r2, r9, #4294967295
 80166e8:	9300      	str	r3, [sp, #0]
 80166ea:	4690      	mov	r8, r2
 80166ec:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80166f0:	9303      	str	r3, [sp, #12]
 80166f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80166f6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80166fa:	6818      	ldr	r0, [r3, #0]
 80166fc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016700:	9206      	str	r2, [sp, #24]
 8016702:	bf16      	itet	ne
 8016704:	9904      	ldrne	r1, [sp, #16]
 8016706:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801670a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801670e:	9305      	str	r3, [sp, #20]
 8016710:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016714:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8016718:	fb16 f601 	smulbb	r6, r6, r1
 801671c:	6859      	ldr	r1, [r3, #4]
 801671e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016722:	4671      	mov	r1, lr
 8016724:	a80a      	add	r0, sp, #40	; 0x28
 8016726:	f7ff fc51 	bl	8015fcc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801672a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801672e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016732:	9b03      	ldr	r3, [sp, #12]
 8016734:	9a00      	ldr	r2, [sp, #0]
 8016736:	fb11 f100 	smulbb	r1, r1, r0
 801673a:	2008      	movs	r0, #8
 801673c:	fb02 6603 	mla	r6, r2, r3, r6
 8016740:	1b8e      	subs	r6, r1, r6
 8016742:	fb91 f1f0 	sdiv	r1, r1, r0
 8016746:	42b1      	cmp	r1, r6
 8016748:	dc21      	bgt.n	801678e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801674a:	4556      	cmp	r6, sl
 801674c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8016750:	da03      	bge.n	801675a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8016752:	b1e6      	cbz	r6, 801678e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8016754:	46b2      	mov	sl, r6
 8016756:	4645      	mov	r5, r8
 8016758:	464c      	mov	r4, r9
 801675a:	f108 38ff 	add.w	r8, r8, #4294967295
 801675e:	f118 0f02 	cmn.w	r8, #2
 8016762:	d1c8      	bne.n	80166f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8016764:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016768:	f1a7 0708 	sub.w	r7, r7, #8
 801676c:	4691      	mov	r9, r2
 801676e:	d1b7      	bne.n	80166e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8016770:	9b01      	ldr	r3, [sp, #4]
 8016772:	b2a6      	uxth	r6, r4
 8016774:	00e4      	lsls	r4, r4, #3
 8016776:	1918      	adds	r0, r3, r4
 8016778:	1c6b      	adds	r3, r5, #1
 801677a:	d10b      	bne.n	8016794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801677c:	4601      	mov	r1, r0
 801677e:	9802      	ldr	r0, [sp, #8]
 8016780:	f7ff fc24 	bl	8015fcc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016784:	4631      	mov	r1, r6
 8016786:	9801      	ldr	r0, [sp, #4]
 8016788:	f7ff fccc 	bl	8016124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801678c:	e50f      	b.n	80161ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801678e:	4645      	mov	r5, r8
 8016790:	464c      	mov	r4, r9
 8016792:	e7ed      	b.n	8016770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8016794:	9b01      	ldr	r3, [sp, #4]
 8016796:	00ed      	lsls	r5, r5, #3
 8016798:	445c      	add	r4, fp
 801679a:	1959      	adds	r1, r3, r5
 801679c:	445d      	add	r5, fp
 801679e:	f7ff fc15 	bl	8015fcc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80167a2:	9b02      	ldr	r3, [sp, #8]
 80167a4:	cb03      	ldmia	r3!, {r0, r1}
 80167a6:	9b02      	ldr	r3, [sp, #8]
 80167a8:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80167ac:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80167b0:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 80167b4:	6861      	ldr	r1, [r4, #4]
 80167b6:	c303      	stmia	r3!, {r0, r1}
 80167b8:	e7e4      	b.n	8016784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

080167bc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80167bc:	4b1d      	ldr	r3, [pc, #116]	; (8016834 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80167be:	b530      	push	{r4, r5, lr}
 80167c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80167c4:	b085      	sub	sp, #20
 80167c6:	4b1c      	ldr	r3, [pc, #112]	; (8016838 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80167c8:	460c      	mov	r4, r1
 80167ca:	2100      	movs	r1, #0
 80167cc:	4605      	mov	r5, r0
 80167ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167d2:	6820      	ldr	r0, [r4, #0]
 80167d4:	9100      	str	r1, [sp, #0]
 80167d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80167da:	ab02      	add	r3, sp, #8
 80167dc:	6861      	ldr	r1, [r4, #4]
 80167de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80167e2:	c303      	stmia	r3!, {r0, r1}
 80167e4:	4669      	mov	r1, sp
 80167e6:	a802      	add	r0, sp, #8
 80167e8:	f7fb fdd8 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 80167ec:	ab02      	add	r3, sp, #8
 80167ee:	cb03      	ldmia	r3!, {r0, r1}
 80167f0:	4b12      	ldr	r3, [pc, #72]	; (801683c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80167f2:	6020      	str	r0, [r4, #0]
 80167f4:	6818      	ldr	r0, [r3, #0]
 80167f6:	6061      	str	r1, [r4, #4]
 80167f8:	b138      	cbz	r0, 801680a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80167fa:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 80167fe:	b133      	cbz	r3, 801680e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8016800:	6821      	ldr	r1, [r4, #0]
 8016802:	4628      	mov	r0, r5
 8016804:	6862      	ldr	r2, [r4, #4]
 8016806:	f7ff fcc5 	bl	8016194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801680a:	b005      	add	sp, #20
 801680c:	bd30      	pop	{r4, r5, pc}
 801680e:	6803      	ldr	r3, [r0, #0]
 8016810:	4621      	mov	r1, r4
 8016812:	689b      	ldr	r3, [r3, #8]
 8016814:	4798      	blx	r3
 8016816:	4b0a      	ldr	r3, [pc, #40]	; (8016840 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8016818:	6818      	ldr	r0, [r3, #0]
 801681a:	b118      	cbz	r0, 8016824 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801681c:	6803      	ldr	r3, [r0, #0]
 801681e:	4621      	mov	r1, r4
 8016820:	689b      	ldr	r3, [r3, #8]
 8016822:	4798      	blx	r3
 8016824:	4b07      	ldr	r3, [pc, #28]	; (8016844 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8016826:	4621      	mov	r1, r4
 8016828:	6818      	ldr	r0, [r3, #0]
 801682a:	6803      	ldr	r3, [r0, #0]
 801682c:	699b      	ldr	r3, [r3, #24]
 801682e:	4798      	blx	r3
 8016830:	e7eb      	b.n	801680a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016832:	bf00      	nop
 8016834:	20056530 	.word	0x20056530
 8016838:	20056532 	.word	0x20056532
 801683c:	20056598 	.word	0x20056598
 8016840:	20056594 	.word	0x20056594
 8016844:	2005653c 	.word	0x2005653c

08016848 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8016848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684c:	4604      	mov	r4, r0
 801684e:	b09b      	sub	sp, #108	; 0x6c
 8016850:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8016854:	b129      	cbz	r1, 8016862 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8016856:	2300      	movs	r3, #0
 8016858:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801685c:	b01b      	add	sp, #108	; 0x6c
 801685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016862:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8016866:	4630      	mov	r0, r6
 8016868:	f7fb fddb 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 801686c:	4605      	mov	r5, r0
 801686e:	b940      	cbnz	r0, 8016882 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8016870:	4620      	mov	r0, r4
 8016872:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016876:	f7ff fc8d 	bl	8016194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801687a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801687e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016882:	4ba6      	ldr	r3, [pc, #664]	; (8016b1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	b33b      	cbz	r3, 80168d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8016888:	4da5      	ldr	r5, [pc, #660]	; (8016b20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801688a:	4628      	mov	r0, r5
 801688c:	f7fb fdc9 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016890:	4606      	mov	r6, r0
 8016892:	bb08      	cbnz	r0, 80168d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8016894:	4628      	mov	r0, r5
 8016896:	f7ff fa1d 	bl	8015cd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801689a:	6829      	ldr	r1, [r5, #0]
 801689c:	686a      	ldr	r2, [r5, #4]
 801689e:	4620      	mov	r0, r4
 80168a0:	f7ff fc78 	bl	8016194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80168a4:	802e      	strh	r6, [r5, #0]
 80168a6:	806e      	strh	r6, [r5, #2]
 80168a8:	80ae      	strh	r6, [r5, #4]
 80168aa:	80ee      	strh	r6, [r5, #6]
 80168ac:	4f9d      	ldr	r7, [pc, #628]	; (8016b24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80168ae:	a809      	add	r0, sp, #36	; 0x24
 80168b0:	f7ff fbe3 	bl	801607a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80168b4:	883d      	ldrh	r5, [r7, #0]
 80168b6:	462e      	mov	r6, r5
 80168b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80168bc:	42b3      	cmp	r3, r6
 80168be:	d910      	bls.n	80168e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80168c0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80168c4:	3601      	adds	r6, #1
 80168c6:	a809      	add	r0, sp, #36	; 0x24
 80168c8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80168cc:	b2b6      	uxth	r6, r6
 80168ce:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80168d2:	f7ff fc3d 	bl	8016150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80168d6:	e7ef      	b.n	80168b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80168d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d1e5      	bne.n	80168ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80168e0:	e7bc      	b.n	801685c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80168e2:	462e      	mov	r6, r5
 80168e4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80168e8:	42b3      	cmp	r3, r6
 80168ea:	d90b      	bls.n	8016904 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80168ec:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80168f0:	3601      	adds	r6, #1
 80168f2:	4620      	mov	r0, r4
 80168f4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80168f8:	b2b6      	uxth	r6, r6
 80168fa:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80168fe:	f7ff fc49 	bl	8016194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016902:	e7ef      	b.n	80168e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8016904:	4a88      	ldr	r2, [pc, #544]	; (8016b28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8016906:	6813      	ldr	r3, [r2, #0]
 8016908:	4690      	mov	r8, r2
 801690a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801690e:	2b01      	cmp	r3, #1
 8016910:	f040 8094 	bne.w	8016a3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8016914:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016918:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801691c:	f04f 0900 	mov.w	r9, #0
 8016920:	33aa      	adds	r3, #170	; 0xaa
 8016922:	42a8      	cmp	r0, r5
 8016924:	f103 0308 	add.w	r3, r3, #8
 8016928:	dd0a      	ble.n	8016940 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801692a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801692e:	3501      	adds	r5, #1
 8016930:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8016934:	440a      	add	r2, r1
 8016936:	b212      	sxth	r2, r2
 8016938:	4591      	cmp	r9, r2
 801693a:	bfb8      	it	lt
 801693c:	4691      	movlt	r9, r2
 801693e:	e7f0      	b.n	8016922 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8016940:	4b7a      	ldr	r3, [pc, #488]	; (8016b2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8016942:	4e7b      	ldr	r6, [pc, #492]	; (8016b30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8016944:	881d      	ldrh	r5, [r3, #0]
 8016946:	2300      	movs	r3, #0
 8016948:	2d0f      	cmp	r5, #15
 801694a:	bf8c      	ite	hi
 801694c:	08ed      	lsrhi	r5, r5, #3
 801694e:	2501      	movls	r5, #1
 8016950:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016954:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016958:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801695c:	f8d8 0000 	ldr.w	r0, [r8]
 8016960:	440b      	add	r3, r1
 8016962:	6802      	ldr	r2, [r0, #0]
 8016964:	b21b      	sxth	r3, r3
 8016966:	4599      	cmp	r9, r3
 8016968:	dd4b      	ble.n	8016a02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801696a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801696e:	4798      	blx	r3
 8016970:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016974:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016978:	4413      	add	r3, r2
 801697a:	b21b      	sxth	r3, r3
 801697c:	195a      	adds	r2, r3, r5
 801697e:	4290      	cmp	r0, r2
 8016980:	da07      	bge.n	8016992 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8016982:	4581      	cmp	r9, r0
 8016984:	dd05      	ble.n	8016992 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8016986:	4298      	cmp	r0, r3
 8016988:	da33      	bge.n	80169f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801698a:	2b00      	cmp	r3, #0
 801698c:	dd31      	ble.n	80169f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801698e:	4648      	mov	r0, r9
 8016990:	e004      	b.n	801699c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8016992:	4298      	cmp	r0, r3
 8016994:	dbfb      	blt.n	801698e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8016996:	4548      	cmp	r0, r9
 8016998:	bfa8      	it	ge
 801699a:	4648      	movge	r0, r9
 801699c:	f9b6 2000 	ldrsh.w	r2, [r6]
 80169a0:	2100      	movs	r1, #0
 80169a2:	1ac0      	subs	r0, r0, r3
 80169a4:	f8b7 a000 	ldrh.w	sl, [r7]
 80169a8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80169ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80169b0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80169b4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80169b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80169bc:	4553      	cmp	r3, sl
 80169be:	d9c9      	bls.n	8016954 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80169c0:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80169c4:	ab07      	add	r3, sp, #28
 80169c6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80169ca:	6851      	ldr	r1, [r2, #4]
 80169cc:	c303      	stmia	r3!, {r0, r1}
 80169ce:	a807      	add	r0, sp, #28
 80169d0:	a905      	add	r1, sp, #20
 80169d2:	f7fb fce3 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 80169d6:	a807      	add	r0, sp, #28
 80169d8:	f7fb fd23 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 80169dc:	b920      	cbnz	r0, 80169e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	a907      	add	r1, sp, #28
 80169e2:	4620      	mov	r0, r4
 80169e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169e6:	4798      	blx	r3
 80169e8:	f10a 0a01 	add.w	sl, sl, #1
 80169ec:	fa1f fa8a 	uxth.w	sl, sl
 80169f0:	e7e2      	b.n	80169b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80169f2:	f8d8 0000 	ldr.w	r0, [r8]
 80169f6:	2101      	movs	r1, #1
 80169f8:	6803      	ldr	r3, [r0, #0]
 80169fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80169fe:	4798      	blx	r3
 8016a00:	e7a8      	b.n	8016954 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8016a02:	6a13      	ldr	r3, [r2, #32]
 8016a04:	4798      	blx	r3
 8016a06:	4b4b      	ldr	r3, [pc, #300]	; (8016b34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f43f af26 	beq.w	801685c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016a10:	2300      	movs	r3, #0
 8016a12:	883d      	ldrh	r5, [r7, #0]
 8016a14:	34ea      	adds	r4, #234	; 0xea
 8016a16:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8016a1a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8016a1e:	42ab      	cmp	r3, r5
 8016a20:	f67f af1c 	bls.w	801685c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016a24:	ab1a      	add	r3, sp, #104	; 0x68
 8016a26:	4620      	mov	r0, r4
 8016a28:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016a2c:	3501      	adds	r5, #1
 8016a2e:	3b44      	subs	r3, #68	; 0x44
 8016a30:	b2ad      	uxth	r5, r5
 8016a32:	e893 0006 	ldmia.w	r3, {r1, r2}
 8016a36:	f7ff fb8b 	bl	8016150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016a3a:	e7ee      	b.n	8016a1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	f040 813d 	bne.w	8016cbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8016a42:	4b3d      	ldr	r3, [pc, #244]	; (8016b38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d02c      	beq.n	8016aa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8016a4a:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8016a4e:	883a      	ldrh	r2, [r7, #0]
 8016a50:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8016a54:	3201      	adds	r2, #1
 8016a56:	b292      	uxth	r2, r2
 8016a58:	2900      	cmp	r1, #0
 8016a5a:	d0d4      	beq.n	8016a06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8016a5c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8016a60:	4610      	mov	r0, r2
 8016a62:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8016a66:	f04f 0a00 	mov.w	sl, #0
 8016a6a:	441d      	add	r5, r3
 8016a6c:	b22d      	sxth	r5, r5
 8016a6e:	b283      	uxth	r3, r0
 8016a70:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8016a74:	4299      	cmp	r1, r3
 8016a76:	f240 80c3 	bls.w	8016c00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8016a7a:	4426      	add	r6, r4
 8016a7c:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8016a80:	4684      	mov	ip, r0
 8016a82:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8016a86:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8016a8a:	4573      	cmp	r3, lr
 8016a8c:	f340 80a5 	ble.w	8016bda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8016a90:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8016a94:	4475      	add	r5, lr
 8016a96:	b22d      	sxth	r5, r5
 8016a98:	429d      	cmp	r5, r3
 8016a9a:	bfa8      	it	ge
 8016a9c:	461d      	movge	r5, r3
 8016a9e:	3001      	adds	r0, #1
 8016aa0:	46e2      	mov	sl, ip
 8016aa2:	e7e4      	b.n	8016a6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8016aa4:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8016aa8:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8016aac:	f1bb 0f00 	cmp.w	fp, #0
 8016ab0:	d0a9      	beq.n	8016a06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8016ab2:	883b      	ldrh	r3, [r7, #0]
 8016ab4:	2600      	movs	r6, #0
 8016ab6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8016aba:	3301      	adds	r3, #1
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	b299      	uxth	r1, r3
 8016ac0:	00f5      	lsls	r5, r6, #3
 8016ac2:	458b      	cmp	fp, r1
 8016ac4:	d93a      	bls.n	8016b3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8016ac6:	4425      	add	r5, r4
 8016ac8:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016acc:	469c      	mov	ip, r3
 8016ace:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8016ad2:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8016ad6:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8016ada:	4408      	add	r0, r1
 8016adc:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8016ae0:	4471      	add	r1, lr
 8016ae2:	b200      	sxth	r0, r0
 8016ae4:	b209      	sxth	r1, r1
 8016ae6:	4288      	cmp	r0, r1
 8016ae8:	da06      	bge.n	8016af8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8016aea:	4586      	cmp	lr, r0
 8016aec:	4672      	mov	r2, lr
 8016aee:	bfb8      	it	lt
 8016af0:	4602      	movlt	r2, r0
 8016af2:	3301      	adds	r3, #1
 8016af4:	4666      	mov	r6, ip
 8016af6:	e7e2      	b.n	8016abe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8016af8:	d10b      	bne.n	8016b12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8016afa:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8016afe:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8016b02:	458c      	cmp	ip, r1
 8016b04:	bfb4      	ite	lt
 8016b06:	469c      	movlt	ip, r3
 8016b08:	46b4      	movge	ip, r6
 8016b0a:	4572      	cmp	r2, lr
 8016b0c:	bfb8      	it	lt
 8016b0e:	4672      	movlt	r2, lr
 8016b10:	e7ef      	b.n	8016af2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8016b12:	428a      	cmp	r2, r1
 8016b14:	46b4      	mov	ip, r6
 8016b16:	bfb8      	it	lt
 8016b18:	460a      	movlt	r2, r1
 8016b1a:	e7ea      	b.n	8016af2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8016b1c:	20056594 	.word	0x20056594
 8016b20:	200565a0 	.word	0x200565a0
 8016b24:	2000001c 	.word	0x2000001c
 8016b28:	2005653c 	.word	0x2005653c
 8016b2c:	20056532 	.word	0x20056532
 8016b30:	20056530 	.word	0x20056530
 8016b34:	2005653a 	.word	0x2005653a
 8016b38:	20056534 	.word	0x20056534
 8016b3c:	1961      	adds	r1, r4, r5
 8016b3e:	ab07      	add	r3, sp, #28
 8016b40:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8016b44:	6849      	ldr	r1, [r1, #4]
 8016b46:	c303      	stmia	r3!, {r0, r1}
 8016b48:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016b4c:	a807      	add	r0, sp, #28
 8016b4e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016b52:	2b13      	cmp	r3, #19
 8016b54:	440b      	add	r3, r1
 8016b56:	bfd8      	it	le
 8016b58:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016b5c:	1a9b      	subs	r3, r3, r2
 8016b5e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016b62:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016b66:	f7ff f90f 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016b6a:	a807      	add	r0, sp, #28
 8016b6c:	f7fb fc59 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b70:	2800      	cmp	r0, #0
 8016b72:	d199      	bne.n	8016aa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8016b74:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016b78:	4425      	add	r5, r4
 8016b7a:	f8d8 0000 	ldr.w	r0, [r8]
 8016b7e:	f1bc 0f14 	cmp.w	ip, #20
 8016b82:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016b86:	f8d0 e000 	ldr.w	lr, [r0]
 8016b8a:	bfa8      	it	ge
 8016b8c:	f04f 0c14 	movge.w	ip, #20
 8016b90:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016b94:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016b98:	fa1f fc8c 	uxth.w	ip, ip
 8016b9c:	f8cd c000 	str.w	ip, [sp]
 8016ba0:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 8016ba4:	47d0      	blx	sl
 8016ba6:	4682      	mov	sl, r0
 8016ba8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016bac:	a807      	add	r0, sp, #28
 8016bae:	f7ff f891 	bl	8015cd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	a907      	add	r1, sp, #28
 8016bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bba:	4798      	blx	r3
 8016bbc:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8016bc0:	eba0 000a 	sub.w	r0, r0, sl
 8016bc4:	b200      	sxth	r0, r0
 8016bc6:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8016bca:	2800      	cmp	r0, #0
 8016bcc:	f47f af6c 	bne.w	8016aa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8016bd0:	b2b1      	uxth	r1, r6
 8016bd2:	4648      	mov	r0, r9
 8016bd4:	f7ff faa6 	bl	8016124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016bd8:	e766      	b.n	8016aa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8016bda:	d10c      	bne.n	8016bf6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8016bdc:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8016be0:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8016be4:	45b4      	cmp	ip, r6
 8016be6:	bfb4      	ite	lt
 8016be8:	4684      	movlt	ip, r0
 8016bea:	46d4      	movge	ip, sl
 8016bec:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8016bf0:	4433      	add	r3, r6
 8016bf2:	b21b      	sxth	r3, r3
 8016bf4:	e750      	b.n	8016a98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8016bf6:	4575      	cmp	r5, lr
 8016bf8:	46d4      	mov	ip, sl
 8016bfa:	bfa8      	it	ge
 8016bfc:	4675      	movge	r5, lr
 8016bfe:	e74e      	b.n	8016a9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8016c00:	eb0b 0006 	add.w	r0, fp, r6
 8016c04:	4426      	add	r6, r4
 8016c06:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8016c0a:	f1b9 0f13 	cmp.w	r9, #19
 8016c0e:	bfdc      	itt	le
 8016c10:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8016c14:	444d      	addle	r5, r9
 8016c16:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8016c1a:	bfd8      	it	le
 8016c1c:	b22d      	sxthle	r5, r5
 8016c1e:	f7fb fc00 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c22:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016c26:	2800      	cmp	r0, #0
 8016c28:	f47f af16 	bne.w	8016a58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8016c2c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8016c30:	fa1f f989 	uxth.w	r9, r9
 8016c34:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016c38:	eba5 050c 	sub.w	r5, r5, ip
 8016c3c:	fa1f f28c 	uxth.w	r2, ip
 8016c40:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8016c44:	eb02 0009 	add.w	r0, r2, r9
 8016c48:	2d14      	cmp	r5, #20
 8016c4a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8016c4e:	bfa8      	it	ge
 8016c50:	2514      	movge	r5, #20
 8016c52:	b200      	sxth	r0, r0
 8016c54:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016c58:	b289      	uxth	r1, r1
 8016c5a:	fa1f fe85 	uxth.w	lr, r5
 8016c5e:	eba0 000c 	sub.w	r0, r0, ip
 8016c62:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016c66:	4586      	cmp	lr, r0
 8016c68:	f8d8 0000 	ldr.w	r0, [r8]
 8016c6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	bfb8      	it	lt
 8016c74:	46f1      	movlt	r9, lr
 8016c76:	6805      	ldr	r5, [r0, #0]
 8016c78:	f8cd 9000 	str.w	r9, [sp]
 8016c7c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 8016c80:	47a8      	blx	r5
 8016c82:	6823      	ldr	r3, [r4, #0]
 8016c84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016c88:	a907      	add	r1, sp, #28
 8016c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	4798      	blx	r3
 8016c90:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016c94:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8016c98:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8016c9c:	1a5b      	subs	r3, r3, r1
 8016c9e:	440a      	add	r2, r1
 8016ca0:	b21b      	sxth	r3, r3
 8016ca2:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8016ca6:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	f47f aecf 	bne.w	8016a4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8016cb0:	fa1f f18a 	uxth.w	r1, sl
 8016cb4:	4658      	mov	r0, fp
 8016cb6:	f7ff fa35 	bl	8016124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016cba:	e6c8      	b.n	8016a4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8016cbc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016cc0:	42ab      	cmp	r3, r5
 8016cc2:	f67f aea0 	bls.w	8016a06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8016cc6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016cca:	ab07      	add	r3, sp, #28
 8016ccc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016cd0:	6851      	ldr	r1, [r2, #4]
 8016cd2:	c303      	stmia	r3!, {r0, r1}
 8016cd4:	a807      	add	r0, sp, #28
 8016cd6:	f7fb fba4 	bl	8012422 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016cda:	b920      	cbnz	r0, 8016ce6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	a907      	add	r1, sp, #28
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ce4:	4798      	blx	r3
 8016ce6:	3501      	adds	r5, #1
 8016ce8:	b2ad      	uxth	r5, r5
 8016cea:	e7e7      	b.n	8016cbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08016cec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016cec:	4b03      	ldr	r3, [pc, #12]	; (8016cfc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016cee:	2200      	movs	r2, #0
 8016cf0:	801a      	strh	r2, [r3, #0]
 8016cf2:	805a      	strh	r2, [r3, #2]
 8016cf4:	809a      	strh	r2, [r3, #4]
 8016cf6:	80da      	strh	r2, [r3, #6]
 8016cf8:	4770      	bx	lr
 8016cfa:	bf00      	nop
 8016cfc:	200565a0 	.word	0x200565a0

08016d00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d04:	b09b      	sub	sp, #108	; 0x6c
 8016d06:	4606      	mov	r6, r0
 8016d08:	4614      	mov	r4, r2
 8016d0a:	468a      	mov	sl, r1
 8016d0c:	a803      	add	r0, sp, #12
 8016d0e:	461d      	mov	r5, r3
 8016d10:	f000 fe85 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 8016d14:	6833      	ldr	r3, [r6, #0]
 8016d16:	4630      	mov	r0, r6
 8016d18:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8016d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d1e:	4798      	blx	r3
 8016d20:	6833      	ldr	r3, [r6, #0]
 8016d22:	4607      	mov	r7, r0
 8016d24:	4630      	mov	r0, r6
 8016d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d28:	4798      	blx	r3
 8016d2a:	462a      	mov	r2, r5
 8016d2c:	2500      	movs	r5, #0
 8016d2e:	4621      	mov	r1, r4
 8016d30:	9000      	str	r0, [sp, #0]
 8016d32:	463b      	mov	r3, r7
 8016d34:	462c      	mov	r4, r5
 8016d36:	46a9      	mov	r9, r5
 8016d38:	46a8      	mov	r8, r5
 8016d3a:	a803      	add	r0, sp, #12
 8016d3c:	f000 febc 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016d40:	2300      	movs	r3, #0
 8016d42:	9302      	str	r3, [sp, #8]
 8016d44:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016d48:	429c      	cmp	r4, r3
 8016d4a:	d002      	beq.n	8016d52 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016d4c:	455c      	cmp	r4, fp
 8016d4e:	bf18      	it	ne
 8016d50:	4625      	movne	r5, r4
 8016d52:	ab02      	add	r3, sp, #8
 8016d54:	4632      	mov	r2, r6
 8016d56:	4651      	mov	r1, sl
 8016d58:	a803      	add	r0, sp, #12
 8016d5a:	f001 f9a9 	bl	80180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016d5e:	4604      	mov	r4, r0
 8016d60:	b108      	cbz	r0, 8016d66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016d62:	280a      	cmp	r0, #10
 8016d64:	d10a      	bne.n	8016d7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016d66:	45c1      	cmp	r9, r8
 8016d68:	bf38      	it	cc
 8016d6a:	46c1      	movcc	r9, r8
 8016d6c:	f04f 0800 	mov.w	r8, #0
 8016d70:	2c00      	cmp	r4, #0
 8016d72:	d1e5      	bne.n	8016d40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016d74:	4648      	mov	r0, r9
 8016d76:	b01b      	add	sp, #108	; 0x6c
 8016d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d7c:	9a02      	ldr	r2, [sp, #8]
 8016d7e:	2a00      	cmp	r2, #0
 8016d80:	d0de      	beq.n	8016d40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016d82:	7b57      	ldrb	r7, [r2, #13]
 8016d84:	4629      	mov	r1, r5
 8016d86:	6833      	ldr	r3, [r6, #0]
 8016d88:	007f      	lsls	r7, r7, #1
 8016d8a:	8894      	ldrh	r4, [r2, #4]
 8016d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d8e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016d92:	7a97      	ldrb	r7, [r2, #10]
 8016d94:	4307      	orrs	r7, r0
 8016d96:	4630      	mov	r0, r6
 8016d98:	4798      	blx	r3
 8016d9a:	4438      	add	r0, r7
 8016d9c:	4480      	add	r8, r0
 8016d9e:	fa1f f888 	uxth.w	r8, r8
 8016da2:	e7e5      	b.n	8016d70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016da4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016da4:	b508      	push	{r3, lr}
 8016da6:	6803      	ldr	r3, [r0, #0]
 8016da8:	68db      	ldr	r3, [r3, #12]
 8016daa:	4798      	blx	r3
 8016dac:	b128      	cbz	r0, 8016dba <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016dae:	7b43      	ldrb	r3, [r0, #13]
 8016db0:	7a80      	ldrb	r0, [r0, #10]
 8016db2:	005b      	lsls	r3, r3, #1
 8016db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016db8:	4318      	orrs	r0, r3
 8016dba:	bd08      	pop	{r3, pc}

08016dbc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016dbc:	b40e      	push	{r1, r2, r3}
 8016dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dc0:	b09c      	sub	sp, #112	; 0x70
 8016dc2:	4605      	mov	r5, r0
 8016dc4:	ab21      	add	r3, sp, #132	; 0x84
 8016dc6:	a805      	add	r0, sp, #20
 8016dc8:	f853 4b04 	ldr.w	r4, [r3], #4
 8016dcc:	9303      	str	r3, [sp, #12]
 8016dce:	f000 fe26 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 8016dd2:	682b      	ldr	r3, [r5, #0]
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dd8:	4798      	blx	r3
 8016dda:	682b      	ldr	r3, [r5, #0]
 8016ddc:	4606      	mov	r6, r0
 8016dde:	4628      	mov	r0, r5
 8016de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016de2:	4798      	blx	r3
 8016de4:	4633      	mov	r3, r6
 8016de6:	4621      	mov	r1, r4
 8016de8:	ae1c      	add	r6, sp, #112	; 0x70
 8016dea:	2400      	movs	r4, #0
 8016dec:	9000      	str	r0, [sp, #0]
 8016dee:	9a03      	ldr	r2, [sp, #12]
 8016df0:	a805      	add	r0, sp, #20
 8016df2:	f000 fe61 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016df6:	f846 4d60 	str.w	r4, [r6, #-96]!
 8016dfa:	462a      	mov	r2, r5
 8016dfc:	4633      	mov	r3, r6
 8016dfe:	4621      	mov	r1, r4
 8016e00:	a805      	add	r0, sp, #20
 8016e02:	f001 f955 	bl	80180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016e06:	b300      	cbz	r0, 8016e4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8016e08:	280a      	cmp	r0, #10
 8016e0a:	d01a      	beq.n	8016e42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016e0c:	9f04      	ldr	r7, [sp, #16]
 8016e0e:	b1c7      	cbz	r7, 8016e42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016e10:	7b78      	ldrb	r0, [r7, #13]
 8016e12:	7a3b      	ldrb	r3, [r7, #8]
 8016e14:	00c1      	lsls	r1, r0, #3
 8016e16:	88aa      	ldrh	r2, [r5, #4]
 8016e18:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016e1c:	4319      	orrs	r1, r3
 8016e1e:	0643      	lsls	r3, r0, #25
 8016e20:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8016e24:	bf48      	it	mi
 8016e26:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8016e2a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016e2e:	bf48      	it	mi
 8016e30:	b219      	sxthmi	r1, r3
 8016e32:	79fb      	ldrb	r3, [r7, #7]
 8016e34:	4303      	orrs	r3, r0
 8016e36:	4413      	add	r3, r2
 8016e38:	1a5b      	subs	r3, r3, r1
 8016e3a:	b29b      	uxth	r3, r3
 8016e3c:	42a3      	cmp	r3, r4
 8016e3e:	bfc8      	it	gt
 8016e40:	b21c      	sxthgt	r4, r3
 8016e42:	4633      	mov	r3, r6
 8016e44:	462a      	mov	r2, r5
 8016e46:	2100      	movs	r1, #0
 8016e48:	e7da      	b.n	8016e00 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8016e4a:	b2a0      	uxth	r0, r4
 8016e4c:	b01c      	add	sp, #112	; 0x70
 8016e4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016e52:	b003      	add	sp, #12
 8016e54:	4770      	bx	lr

08016e56 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016e56:	b40e      	push	{r1, r2, r3}
 8016e58:	b570      	push	{r4, r5, r6, lr}
 8016e5a:	b09b      	sub	sp, #108	; 0x6c
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016e60:	a803      	add	r0, sp, #12
 8016e62:	f853 5b04 	ldr.w	r5, [r3], #4
 8016e66:	9302      	str	r3, [sp, #8]
 8016e68:	f000 fdd9 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	4620      	mov	r0, r4
 8016e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e72:	4798      	blx	r3
 8016e74:	6823      	ldr	r3, [r4, #0]
 8016e76:	4606      	mov	r6, r0
 8016e78:	4620      	mov	r0, r4
 8016e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e7c:	2401      	movs	r4, #1
 8016e7e:	4798      	blx	r3
 8016e80:	4633      	mov	r3, r6
 8016e82:	9000      	str	r0, [sp, #0]
 8016e84:	4629      	mov	r1, r5
 8016e86:	9a02      	ldr	r2, [sp, #8]
 8016e88:	a803      	add	r0, sp, #12
 8016e8a:	f000 fe15 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016e8e:	a803      	add	r0, sp, #12
 8016e90:	f001 fa06 	bl	80182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016e94:	b2a3      	uxth	r3, r4
 8016e96:	b138      	cbz	r0, 8016ea8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8016e98:	280a      	cmp	r0, #10
 8016e9a:	a803      	add	r0, sp, #12
 8016e9c:	bf04      	itt	eq
 8016e9e:	3301      	addeq	r3, #1
 8016ea0:	b21c      	sxtheq	r4, r3
 8016ea2:	f001 f9fd 	bl	80182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016ea6:	e7f5      	b.n	8016e94 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	b01b      	add	sp, #108	; 0x6c
 8016eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eb0:	b003      	add	sp, #12
 8016eb2:	4770      	bx	lr

08016eb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016eb4:	b40e      	push	{r1, r2, r3}
 8016eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eb8:	b09c      	sub	sp, #112	; 0x70
 8016eba:	4604      	mov	r4, r0
 8016ebc:	ab21      	add	r3, sp, #132	; 0x84
 8016ebe:	a805      	add	r0, sp, #20
 8016ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8016ec4:	9303      	str	r3, [sp, #12]
 8016ec6:	f000 fdaa 	bl	8017a1e <_ZN8touchgfx12TextProviderC1Ev>
 8016eca:	6823      	ldr	r3, [r4, #0]
 8016ecc:	4620      	mov	r0, r4
 8016ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ed0:	4798      	blx	r3
 8016ed2:	6823      	ldr	r3, [r4, #0]
 8016ed4:	4606      	mov	r6, r0
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016eda:	4798      	blx	r3
 8016edc:	4633      	mov	r3, r6
 8016ede:	4629      	mov	r1, r5
 8016ee0:	9000      	str	r0, [sp, #0]
 8016ee2:	9a03      	ldr	r2, [sp, #12]
 8016ee4:	a805      	add	r0, sp, #20
 8016ee6:	f000 fde7 	bl	8017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016eea:	ad1c      	add	r5, sp, #112	; 0x70
 8016eec:	2100      	movs	r1, #0
 8016eee:	26ff      	movs	r6, #255	; 0xff
 8016ef0:	4622      	mov	r2, r4
 8016ef2:	a805      	add	r0, sp, #20
 8016ef4:	f845 1d60 	str.w	r1, [r5, #-96]!
 8016ef8:	462b      	mov	r3, r5
 8016efa:	f001 f8d9 	bl	80180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016efe:	b1d8      	cbz	r0, 8016f38 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8016f00:	280a      	cmp	r0, #10
 8016f02:	d012      	beq.n	8016f2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8016f04:	9804      	ldr	r0, [sp, #16]
 8016f06:	b180      	cbz	r0, 8016f2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8016f08:	7b47      	ldrb	r7, [r0, #13]
 8016f0a:	7922      	ldrb	r2, [r4, #4]
 8016f0c:	00fb      	lsls	r3, r7, #3
 8016f0e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016f12:	7a03      	ldrb	r3, [r0, #8]
 8016f14:	430b      	orrs	r3, r1
 8016f16:	0679      	lsls	r1, r7, #25
 8016f18:	bf44      	itt	mi
 8016f1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016f1e:	b21b      	sxthmi	r3, r3
 8016f20:	1ad3      	subs	r3, r2, r3
 8016f22:	b2db      	uxtb	r3, r3
 8016f24:	429e      	cmp	r6, r3
 8016f26:	bf28      	it	cs
 8016f28:	461e      	movcs	r6, r3
 8016f2a:	462b      	mov	r3, r5
 8016f2c:	4622      	mov	r2, r4
 8016f2e:	2100      	movs	r1, #0
 8016f30:	a805      	add	r0, sp, #20
 8016f32:	f001 f8bd 	bl	80180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016f36:	e7e2      	b.n	8016efe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8016f38:	4630      	mov	r0, r6
 8016f3a:	b01c      	add	sp, #112	; 0x70
 8016f3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016f40:	b003      	add	sp, #12
 8016f42:	4770      	bx	lr

08016f44 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016f44:	b513      	push	{r0, r1, r4, lr}
 8016f46:	1d01      	adds	r1, r0, #4
 8016f48:	4603      	mov	r3, r0
 8016f4a:	466a      	mov	r2, sp
 8016f4c:	c903      	ldmia	r1, {r0, r1}
 8016f4e:	e882 0003 	stmia.w	r2, {r0, r1}
 8016f52:	2100      	movs	r1, #0
 8016f54:	4618      	mov	r0, r3
 8016f56:	9100      	str	r1, [sp, #0]
 8016f58:	6819      	ldr	r1, [r3, #0]
 8016f5a:	690c      	ldr	r4, [r1, #16]
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	47a0      	blx	r4
 8016f60:	b002      	add	sp, #8
 8016f62:	bd10      	pop	{r4, pc}

08016f64 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016f64:	b538      	push	{r3, r4, r5, lr}
 8016f66:	680b      	ldr	r3, [r1, #0]
 8016f68:	460c      	mov	r4, r1
 8016f6a:	4605      	mov	r5, r0
 8016f6c:	68db      	ldr	r3, [r3, #12]
 8016f6e:	4798      	blx	r3
 8016f70:	6823      	ldr	r3, [r4, #0]
 8016f72:	4620      	mov	r0, r4
 8016f74:	4629      	mov	r1, r5
 8016f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f78:	4798      	blx	r3
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	bd38      	pop	{r3, r4, r5, pc}

08016f7e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016f7e:	b410      	push	{r4}
 8016f80:	880a      	ldrh	r2, [r1, #0]
 8016f82:	8884      	ldrh	r4, [r0, #4]
 8016f84:	4422      	add	r2, r4
 8016f86:	800a      	strh	r2, [r1, #0]
 8016f88:	884a      	ldrh	r2, [r1, #2]
 8016f8a:	88c4      	ldrh	r4, [r0, #6]
 8016f8c:	4422      	add	r2, r4
 8016f8e:	804a      	strh	r2, [r1, #2]
 8016f90:	6940      	ldr	r0, [r0, #20]
 8016f92:	b120      	cbz	r0, 8016f9e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016f94:	6803      	ldr	r3, [r0, #0]
 8016f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f9c:	4718      	bx	r3
 8016f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fa2:	4770      	bx	lr

08016fa4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fa6:	460b      	mov	r3, r1
 8016fa8:	b085      	sub	sp, #20
 8016faa:	4604      	mov	r4, r0
 8016fac:	b901      	cbnz	r1, 8016fb0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016fae:	b322      	cbz	r2, 8016ffa <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8016fb0:	1d27      	adds	r7, r4, #4
 8016fb2:	466e      	mov	r6, sp
 8016fb4:	88e5      	ldrh	r5, [r4, #6]
 8016fb6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016fba:	442a      	add	r2, r5
 8016fbc:	e886 0003 	stmia.w	r6, {r0, r1}
 8016fc0:	88a1      	ldrh	r1, [r4, #4]
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	b215      	sxth	r5, r2
 8016fc6:	4419      	add	r1, r3
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	b209      	sxth	r1, r1
 8016fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fce:	4798      	blx	r3
 8016fd0:	6823      	ldr	r3, [r4, #0]
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fd8:	ad02      	add	r5, sp, #8
 8016fda:	4798      	blx	r3
 8016fdc:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016fe0:	e885 0003 	stmia.w	r5, {r0, r1}
 8016fe4:	6960      	ldr	r0, [r4, #20]
 8016fe6:	b150      	cbz	r0, 8016ffe <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8016fe8:	6803      	ldr	r3, [r0, #0]
 8016fea:	4631      	mov	r1, r6
 8016fec:	691b      	ldr	r3, [r3, #16]
 8016fee:	4798      	blx	r3
 8016ff0:	6960      	ldr	r0, [r4, #20]
 8016ff2:	6803      	ldr	r3, [r0, #0]
 8016ff4:	691b      	ldr	r3, [r3, #16]
 8016ff6:	4629      	mov	r1, r5
 8016ff8:	4798      	blx	r3
 8016ffa:	b005      	add	sp, #20
 8016ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ffe:	f7ff f82b 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 8017002:	6803      	ldr	r3, [r0, #0]
 8017004:	4631      	mov	r1, r6
 8017006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017008:	4798      	blx	r3
 801700a:	f7ff f825 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 801700e:	6803      	ldr	r3, [r0, #0]
 8017010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017012:	e7f0      	b.n	8016ff6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08017014 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017016:	8882      	ldrh	r2, [r0, #4]
 8017018:	4605      	mov	r5, r0
 801701a:	880b      	ldrh	r3, [r1, #0]
 801701c:	460c      	mov	r4, r1
 801701e:	4413      	add	r3, r2
 8017020:	800b      	strh	r3, [r1, #0]
 8017022:	884b      	ldrh	r3, [r1, #2]
 8017024:	88c2      	ldrh	r2, [r0, #6]
 8017026:	4413      	add	r3, r2
 8017028:	4602      	mov	r2, r0
 801702a:	804b      	strh	r3, [r1, #2]
 801702c:	466b      	mov	r3, sp
 801702e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017032:	6851      	ldr	r1, [r2, #4]
 8017034:	c303      	stmia	r3!, {r0, r1}
 8017036:	4621      	mov	r1, r4
 8017038:	4668      	mov	r0, sp
 801703a:	f7fb f9af 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 801703e:	466b      	mov	r3, sp
 8017040:	cb03      	ldmia	r3!, {r0, r1}
 8017042:	6020      	str	r0, [r4, #0]
 8017044:	6061      	str	r1, [r4, #4]
 8017046:	6968      	ldr	r0, [r5, #20]
 8017048:	b128      	cbz	r0, 8017056 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801704a:	6803      	ldr	r3, [r0, #0]
 801704c:	691b      	ldr	r3, [r3, #16]
 801704e:	4621      	mov	r1, r4
 8017050:	4798      	blx	r3
 8017052:	b003      	add	sp, #12
 8017054:	bd30      	pop	{r4, r5, pc}
 8017056:	f7fe ffff 	bl	8016058 <_ZN8touchgfx11Application11getInstanceEv>
 801705a:	6803      	ldr	r3, [r0, #0]
 801705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801705e:	e7f6      	b.n	801704e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08017060 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017060:	b570      	push	{r4, r5, r6, lr}
 8017062:	8882      	ldrh	r2, [r0, #4]
 8017064:	460c      	mov	r4, r1
 8017066:	880b      	ldrh	r3, [r1, #0]
 8017068:	4605      	mov	r5, r0
 801706a:	4413      	add	r3, r2
 801706c:	800b      	strh	r3, [r1, #0]
 801706e:	884b      	ldrh	r3, [r1, #2]
 8017070:	88c2      	ldrh	r2, [r0, #6]
 8017072:	4413      	add	r3, r2
 8017074:	804b      	strh	r3, [r1, #2]
 8017076:	1d01      	adds	r1, r0, #4
 8017078:	4620      	mov	r0, r4
 801707a:	f7fb f98f 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 801707e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017082:	2b00      	cmp	r3, #0
 8017084:	dd0b      	ble.n	801709e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017086:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801708a:	2b00      	cmp	r3, #0
 801708c:	dd07      	ble.n	801709e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801708e:	6968      	ldr	r0, [r5, #20]
 8017090:	b128      	cbz	r0, 801709e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017092:	6803      	ldr	r3, [r0, #0]
 8017094:	4621      	mov	r1, r4
 8017096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801709c:	4718      	bx	r3
 801709e:	bd70      	pop	{r4, r5, r6, pc}

080170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80170a0:	b510      	push	{r4, lr}
 80170a2:	2300      	movs	r3, #0
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80170ac:	8023      	strh	r3, [r4, #0]
 80170ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80170b2:	8063      	strh	r3, [r4, #2]
 80170b4:	6803      	ldr	r3, [r0, #0]
 80170b6:	80a1      	strh	r1, [r4, #4]
 80170b8:	4621      	mov	r1, r4
 80170ba:	80e2      	strh	r2, [r4, #6]
 80170bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170be:	4798      	blx	r3
 80170c0:	4620      	mov	r0, r4
 80170c2:	bd10      	pop	{r4, pc}

080170c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80170c4:	b530      	push	{r4, r5, lr}
 80170c6:	8083      	strh	r3, [r0, #4]
 80170c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80170cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80170d0:	7183      	strb	r3, [r0, #6]
 80170d2:	79c3      	ldrb	r3, [r0, #7]
 80170d4:	6101      	str	r1, [r0, #16]
 80170d6:	f365 0306 	bfi	r3, r5, #0, #7
 80170da:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80170de:	8282      	strh	r2, [r0, #20]
 80170e0:	f365 13c7 	bfi	r3, r5, #7, #1
 80170e4:	71c3      	strb	r3, [r0, #7]
 80170e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80170ea:	7203      	strb	r3, [r0, #8]
 80170ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80170f0:	7243      	strb	r3, [r0, #9]
 80170f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80170f6:	8143      	strh	r3, [r0, #10]
 80170f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80170fc:	8183      	strh	r3, [r0, #12]
 80170fe:	4b01      	ldr	r3, [pc, #4]	; (8017104 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017100:	6003      	str	r3, [r0, #0]
 8017102:	bd30      	pop	{r4, r5, pc}
 8017104:	08027244 	.word	0x08027244

08017108 <_ZNK8touchgfx9ConstFont4findEt>:
 8017108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801710a:	6904      	ldr	r4, [r0, #16]
 801710c:	b3bc      	cbz	r4, 801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801710e:	88a3      	ldrh	r3, [r4, #4]
 8017110:	8a82      	ldrh	r2, [r0, #20]
 8017112:	1acb      	subs	r3, r1, r3
 8017114:	f102 32ff 	add.w	r2, r2, #4294967295
 8017118:	d431      	bmi.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801711a:	4293      	cmp	r3, r2
 801711c:	dd0c      	ble.n	8017138 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801711e:	230e      	movs	r3, #14
 8017120:	fb03 4302 	mla	r3, r3, r2, r4
 8017124:	889b      	ldrh	r3, [r3, #4]
 8017126:	1a5b      	subs	r3, r3, r1
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	429a      	cmp	r2, r3
 801712c:	db27      	blt.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801712e:	2b00      	cmp	r3, #0
 8017130:	bfbc      	itt	lt
 8017132:	2302      	movlt	r3, #2
 8017134:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017138:	2500      	movs	r5, #0
 801713a:	260e      	movs	r6, #14
 801713c:	4295      	cmp	r5, r2
 801713e:	dc1e      	bgt.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017140:	fb06 4003 	mla	r0, r6, r3, r4
 8017144:	8887      	ldrh	r7, [r0, #4]
 8017146:	42b9      	cmp	r1, r7
 8017148:	d01a      	beq.n	8017180 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801714a:	d20d      	bcs.n	8017168 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801714c:	1e5a      	subs	r2, r3, #1
 801714e:	4295      	cmp	r5, r2
 8017150:	dc15      	bgt.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017152:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017156:	1a5b      	subs	r3, r3, r1
 8017158:	1ad3      	subs	r3, r2, r3
 801715a:	429a      	cmp	r2, r3
 801715c:	db0f      	blt.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801715e:	429d      	cmp	r5, r3
 8017160:	ddec      	ble.n	801713c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017162:	1953      	adds	r3, r2, r5
 8017164:	105b      	asrs	r3, r3, #1
 8017166:	e7e9      	b.n	801713c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017168:	1c5d      	adds	r5, r3, #1
 801716a:	42aa      	cmp	r2, r5
 801716c:	db07      	blt.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801716e:	8a43      	ldrh	r3, [r0, #18]
 8017170:	1acb      	subs	r3, r1, r3
 8017172:	442b      	add	r3, r5
 8017174:	429d      	cmp	r5, r3
 8017176:	dc02      	bgt.n	801717e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017178:	429a      	cmp	r2, r3
 801717a:	dadf      	bge.n	801713c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801717c:	e7f1      	b.n	8017162 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801717e:	2000      	movs	r0, #0
 8017180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017182 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017184:	4604      	mov	r4, r0
 8017186:	4617      	mov	r7, r2
 8017188:	461e      	mov	r6, r3
 801718a:	b911      	cbnz	r1, 8017192 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801718c:	2500      	movs	r5, #0
 801718e:	4628      	mov	r0, r5
 8017190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017192:	290a      	cmp	r1, #10
 8017194:	d0fa      	beq.n	801718c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017196:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801719a:	4291      	cmp	r1, r2
 801719c:	d0f6      	beq.n	801718c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801719e:	f242 020b 	movw	r2, #8203	; 0x200b
 80171a2:	4291      	cmp	r1, r2
 80171a4:	d0f2      	beq.n	801718c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80171a6:	f7ff ffaf 	bl	8017108 <_ZNK8touchgfx9ConstFont4findEt>
 80171aa:	4605      	mov	r5, r0
 80171ac:	b950      	cbnz	r0, 80171c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80171ae:	6823      	ldr	r3, [r4, #0]
 80171b0:	4620      	mov	r0, r4
 80171b2:	691b      	ldr	r3, [r3, #16]
 80171b4:	4798      	blx	r3
 80171b6:	4601      	mov	r1, r0
 80171b8:	4620      	mov	r0, r4
 80171ba:	f7ff ffa5 	bl	8017108 <_ZNK8touchgfx9ConstFont4findEt>
 80171be:	4605      	mov	r5, r0
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d0e3      	beq.n	801718c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	4629      	mov	r1, r5
 80171c8:	4620      	mov	r0, r4
 80171ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171cc:	4798      	blx	r3
 80171ce:	6038      	str	r0, [r7, #0]
 80171d0:	6823      	ldr	r3, [r4, #0]
 80171d2:	4620      	mov	r0, r4
 80171d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171d6:	4798      	blx	r3
 80171d8:	7030      	strb	r0, [r6, #0]
 80171da:	e7d8      	b.n	801718e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080171dc <_ZN8touchgfx6memsetEPvhm>:
 80171dc:	4402      	add	r2, r0
 80171de:	4290      	cmp	r0, r2
 80171e0:	d002      	beq.n	80171e8 <_ZN8touchgfx6memsetEPvhm+0xc>
 80171e2:	f800 1b01 	strb.w	r1, [r0], #1
 80171e6:	e7fa      	b.n	80171de <_ZN8touchgfx6memsetEPvhm+0x2>
 80171e8:	4770      	bx	lr

080171ea <_ZN8touchgfx4clzuEm>:
 80171ea:	4603      	mov	r3, r0
 80171ec:	b1c8      	cbz	r0, 8017222 <_ZN8touchgfx4clzuEm+0x38>
 80171ee:	0c02      	lsrs	r2, r0, #16
 80171f0:	0412      	lsls	r2, r2, #16
 80171f2:	b9a2      	cbnz	r2, 801721e <_ZN8touchgfx4clzuEm+0x34>
 80171f4:	0403      	lsls	r3, r0, #16
 80171f6:	2010      	movs	r0, #16
 80171f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80171fc:	bf04      	itt	eq
 80171fe:	021b      	lsleq	r3, r3, #8
 8017200:	3008      	addeq	r0, #8
 8017202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017206:	bf04      	itt	eq
 8017208:	011b      	lsleq	r3, r3, #4
 801720a:	3004      	addeq	r0, #4
 801720c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017210:	bf04      	itt	eq
 8017212:	009b      	lsleq	r3, r3, #2
 8017214:	3002      	addeq	r0, #2
 8017216:	2b00      	cmp	r3, #0
 8017218:	db04      	blt.n	8017224 <_ZN8touchgfx4clzuEm+0x3a>
 801721a:	3001      	adds	r0, #1
 801721c:	4770      	bx	lr
 801721e:	2000      	movs	r0, #0
 8017220:	e7ea      	b.n	80171f8 <_ZN8touchgfx4clzuEm+0xe>
 8017222:	2020      	movs	r0, #32
 8017224:	4770      	bx	lr

08017226 <_ZN8touchgfx7muldivuEmmmRm>:
 8017226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801722a:	4680      	mov	r8, r0
 801722c:	460f      	mov	r7, r1
 801722e:	4615      	mov	r5, r2
 8017230:	461e      	mov	r6, r3
 8017232:	f7ff ffda 	bl	80171ea <_ZN8touchgfx4clzuEm>
 8017236:	b998      	cbnz	r0, 8017260 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017238:	4608      	mov	r0, r1
 801723a:	f7ff ffd6 	bl	80171ea <_ZN8touchgfx4clzuEm>
 801723e:	2800      	cmp	r0, #0
 8017240:	dd08      	ble.n	8017254 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8017242:	4633      	mov	r3, r6
 8017244:	462a      	mov	r2, r5
 8017246:	4641      	mov	r1, r8
 8017248:	4638      	mov	r0, r7
 801724a:	f7ff ffec 	bl	8017226 <_ZN8touchgfx7muldivuEmmmRm>
 801724e:	b003      	add	sp, #12
 8017250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017254:	f04f 33ff 	mov.w	r3, #4294967295
 8017258:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801725c:	6033      	str	r3, [r6, #0]
 801725e:	e7f6      	b.n	801724e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017260:	fa31 f900 	lsrs.w	r9, r1, r0
 8017264:	fb01 f308 	mul.w	r3, r1, r8
 8017268:	d105      	bne.n	8017276 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801726a:	fbb3 f0f5 	udiv	r0, r3, r5
 801726e:	fb05 3510 	mls	r5, r5, r0, r3
 8017272:	6035      	str	r5, [r6, #0]
 8017274:	e7eb      	b.n	801724e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017276:	2301      	movs	r3, #1
 8017278:	fa08 fb00 	lsl.w	fp, r8, r0
 801727c:	462a      	mov	r2, r5
 801727e:	4641      	mov	r1, r8
 8017280:	fa03 f000 	lsl.w	r0, r3, r0
 8017284:	4633      	mov	r3, r6
 8017286:	fbbb faf5 	udiv	sl, fp, r5
 801728a:	3801      	subs	r0, #1
 801728c:	fb09 f40a 	mul.w	r4, r9, sl
 8017290:	4038      	ands	r0, r7
 8017292:	f7ff ffc8 	bl	8017226 <_ZN8touchgfx7muldivuEmmmRm>
 8017296:	462a      	mov	r2, r5
 8017298:	4607      	mov	r7, r0
 801729a:	ab01      	add	r3, sp, #4
 801729c:	fb05 b11a 	mls	r1, r5, sl, fp
 80172a0:	4648      	mov	r0, r9
 80172a2:	f7ff ffc0 	bl	8017226 <_ZN8touchgfx7muldivuEmmmRm>
 80172a6:	9b01      	ldr	r3, [sp, #4]
 80172a8:	6832      	ldr	r2, [r6, #0]
 80172aa:	441a      	add	r2, r3
 80172ac:	fbb2 f3f5 	udiv	r3, r2, r5
 80172b0:	441c      	add	r4, r3
 80172b2:	fb05 2513 	mls	r5, r5, r3, r2
 80172b6:	443c      	add	r4, r7
 80172b8:	4420      	add	r0, r4
 80172ba:	e7da      	b.n	8017272 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080172bc <_ZN8touchgfx6muldivElllRl>:
 80172bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172be:	2800      	cmp	r0, #0
 80172c0:	461e      	mov	r6, r3
 80172c2:	bfba      	itte	lt
 80172c4:	4240      	neglt	r0, r0
 80172c6:	f04f 34ff 	movlt.w	r4, #4294967295
 80172ca:	2401      	movge	r4, #1
 80172cc:	2900      	cmp	r1, #0
 80172ce:	bfbc      	itt	lt
 80172d0:	4249      	neglt	r1, r1
 80172d2:	4264      	neglt	r4, r4
 80172d4:	2a00      	cmp	r2, #0
 80172d6:	bfb6      	itet	lt
 80172d8:	4265      	neglt	r5, r4
 80172da:	4625      	movge	r5, r4
 80172dc:	4252      	neglt	r2, r2
 80172de:	4288      	cmp	r0, r1
 80172e0:	bfc2      	ittt	gt
 80172e2:	4603      	movgt	r3, r0
 80172e4:	4608      	movgt	r0, r1
 80172e6:	4619      	movgt	r1, r3
 80172e8:	ab01      	add	r3, sp, #4
 80172ea:	f7ff ff9c 	bl	8017226 <_ZN8touchgfx7muldivuEmmmRm>
 80172ee:	9b01      	ldr	r3, [sp, #4]
 80172f0:	4368      	muls	r0, r5
 80172f2:	435c      	muls	r4, r3
 80172f4:	6034      	str	r4, [r6, #0]
 80172f6:	b002      	add	sp, #8
 80172f8:	bd70      	pop	{r4, r5, r6, pc}

080172fa <_ZN8touchgfx6muldivElll>:
 80172fa:	b513      	push	{r0, r1, r4, lr}
 80172fc:	4614      	mov	r4, r2
 80172fe:	ab01      	add	r3, sp, #4
 8017300:	f7ff ffdc 	bl	80172bc <_ZN8touchgfx6muldivElllRl>
 8017304:	2800      	cmp	r0, #0
 8017306:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801730a:	9b01      	ldr	r3, [sp, #4]
 801730c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8017310:	db0a      	blt.n	8017328 <_ZN8touchgfx6muldivElll+0x2e>
 8017312:	2b00      	cmp	r3, #0
 8017314:	f102 0201 	add.w	r2, r2, #1
 8017318:	bfb8      	it	lt
 801731a:	425b      	neglt	r3, r3
 801731c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8017320:	db00      	blt.n	8017324 <_ZN8touchgfx6muldivElll+0x2a>
 8017322:	3001      	adds	r0, #1
 8017324:	b002      	add	sp, #8
 8017326:	bd10      	pop	{r4, pc}
 8017328:	2b00      	cmp	r3, #0
 801732a:	bfb8      	it	lt
 801732c:	425b      	neglt	r3, r3
 801732e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8017332:	bfc8      	it	gt
 8017334:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8017338:	e7f4      	b.n	8017324 <_ZN8touchgfx6muldivElll+0x2a>

0801733a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801733a:	2000      	movs	r0, #0
 801733c:	4770      	bx	lr

0801733e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801733e:	2001      	movs	r0, #1
 8017340:	4770      	bx	lr

08017342 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8017342:	2002      	movs	r0, #2
 8017344:	4770      	bx	lr

08017346 <_ZN8touchgfx12GestureEventD1Ev>:
 8017346:	4770      	bx	lr

08017348 <_ZN8touchgfx9DragEventD1Ev>:
 8017348:	4770      	bx	lr

0801734a <_ZN8touchgfx10ClickEventD1Ev>:
 801734a:	4770      	bx	lr

0801734c <_ZN8touchgfx10ClickEventD0Ev>:
 801734c:	b510      	push	{r4, lr}
 801734e:	4604      	mov	r4, r0
 8017350:	210c      	movs	r1, #12
 8017352:	f00b fe50 	bl	8022ff6 <_ZdlPvj>
 8017356:	4620      	mov	r0, r4
 8017358:	bd10      	pop	{r4, pc}

0801735a <_ZN8touchgfx9DragEventD0Ev>:
 801735a:	b510      	push	{r4, lr}
 801735c:	4604      	mov	r4, r0
 801735e:	2110      	movs	r1, #16
 8017360:	f00b fe49 	bl	8022ff6 <_ZdlPvj>
 8017364:	4620      	mov	r0, r4
 8017366:	bd10      	pop	{r4, pc}

08017368 <_ZN8touchgfx12GestureEventD0Ev>:
 8017368:	b510      	push	{r4, lr}
 801736a:	4604      	mov	r4, r0
 801736c:	210c      	movs	r1, #12
 801736e:	f00b fe42 	bl	8022ff6 <_ZdlPvj>
 8017372:	4620      	mov	r0, r4
 8017374:	bd10      	pop	{r4, pc}
	...

08017378 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017378:	b530      	push	{r4, r5, lr}
 801737a:	460d      	mov	r5, r1
 801737c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801737e:	b087      	sub	sp, #28
 8017380:	4604      	mov	r4, r0
 8017382:	b301      	cbz	r1, 80173c6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017384:	a801      	add	r0, sp, #4
 8017386:	f7ff fe8b 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801738a:	892a      	ldrh	r2, [r5, #8]
 801738c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017390:	7928      	ldrb	r0, [r5, #4]
 8017392:	1ad2      	subs	r2, r2, r3
 8017394:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017396:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801739a:	441a      	add	r2, r3
 801739c:	896b      	ldrh	r3, [r5, #10]
 801739e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80173a2:	f88d 0010 	strb.w	r0, [sp, #16]
 80173a6:	1b5b      	subs	r3, r3, r5
 80173a8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80173aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80173ac:	442b      	add	r3, r5
 80173ae:	4d07      	ldr	r5, [pc, #28]	; (80173cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80173b0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80173b4:	a903      	add	r1, sp, #12
 80173b6:	9503      	str	r5, [sp, #12]
 80173b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80173bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173c0:	6803      	ldr	r3, [r0, #0]
 80173c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173c4:	4798      	blx	r3
 80173c6:	b007      	add	sp, #28
 80173c8:	bd30      	pop	{r4, r5, pc}
 80173ca:	bf00      	nop
 80173cc:	080272c4 	.word	0x080272c4

080173d0 <_ZNK8touchgfx4Rect9intersectEss>:
 80173d0:	b510      	push	{r4, lr}
 80173d2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80173d6:	428b      	cmp	r3, r1
 80173d8:	dc10      	bgt.n	80173fc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80173da:	8884      	ldrh	r4, [r0, #4]
 80173dc:	4423      	add	r3, r4
 80173de:	b21b      	sxth	r3, r3
 80173e0:	4299      	cmp	r1, r3
 80173e2:	da0b      	bge.n	80173fc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80173e4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80173e8:	4293      	cmp	r3, r2
 80173ea:	dc07      	bgt.n	80173fc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80173ec:	88c0      	ldrh	r0, [r0, #6]
 80173ee:	4418      	add	r0, r3
 80173f0:	b200      	sxth	r0, r0
 80173f2:	4282      	cmp	r2, r0
 80173f4:	bfac      	ite	ge
 80173f6:	2000      	movge	r0, #0
 80173f8:	2001      	movlt	r0, #1
 80173fa:	bd10      	pop	{r4, pc}
 80173fc:	2000      	movs	r0, #0
 80173fe:	e7fc      	b.n	80173fa <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08017400 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017402:	460c      	mov	r4, r1
 8017404:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017406:	b089      	sub	sp, #36	; 0x24
 8017408:	4605      	mov	r5, r0
 801740a:	2900      	cmp	r1, #0
 801740c:	d054      	beq.n	80174b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801740e:	4668      	mov	r0, sp
 8017410:	f7ff fe46 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017414:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8017416:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8017418:	4668      	mov	r0, sp
 801741a:	8922      	ldrh	r2, [r4, #8]
 801741c:	88e1      	ldrh	r1, [r4, #6]
 801741e:	443a      	add	r2, r7
 8017420:	4431      	add	r1, r6
 8017422:	b212      	sxth	r2, r2
 8017424:	b209      	sxth	r1, r1
 8017426:	f7ff ffd3 	bl	80173d0 <_ZNK8touchgfx4Rect9intersectEss>
 801742a:	b1d0      	cbz	r0, 8017462 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801742c:	89a2      	ldrh	r2, [r4, #12]
 801742e:	4668      	mov	r0, sp
 8017430:	8961      	ldrh	r1, [r4, #10]
 8017432:	443a      	add	r2, r7
 8017434:	4431      	add	r1, r6
 8017436:	b212      	sxth	r2, r2
 8017438:	b209      	sxth	r1, r1
 801743a:	f7ff ffc9 	bl	80173d0 <_ZNK8touchgfx4Rect9intersectEss>
 801743e:	4603      	mov	r3, r0
 8017440:	b978      	cbnz	r0, 8017462 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8017442:	4a1e      	ldr	r2, [pc, #120]	; (80174bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8017444:	a904      	add	r1, sp, #16
 8017446:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017448:	9204      	str	r2, [sp, #16]
 801744a:	2202      	movs	r2, #2
 801744c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017450:	f88d 2014 	strb.w	r2, [sp, #20]
 8017454:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017458:	f8ad 301a 	strh.w	r3, [sp, #26]
 801745c:	6803      	ldr	r3, [r0, #0]
 801745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017460:	4798      	blx	r3
 8017462:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8017464:	a802      	add	r0, sp, #8
 8017466:	f7ff fe1b 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801746a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801746e:	88e0      	ldrh	r0, [r4, #6]
 8017470:	8961      	ldrh	r1, [r4, #10]
 8017472:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017476:	1a80      	subs	r0, r0, r2
 8017478:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801747c:	1a89      	subs	r1, r1, r2
 801747e:	8923      	ldrh	r3, [r4, #8]
 8017480:	4460      	add	r0, ip
 8017482:	89a2      	ldrh	r2, [r4, #12]
 8017484:	4461      	add	r1, ip
 8017486:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8017488:	eba3 030e 	sub.w	r3, r3, lr
 801748c:	eba2 020e 	sub.w	r2, r2, lr
 8017490:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017494:	7927      	ldrb	r7, [r4, #4]
 8017496:	4433      	add	r3, r6
 8017498:	4432      	add	r2, r6
 801749a:	4c09      	ldr	r4, [pc, #36]	; (80174c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801749c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801749e:	f8ad 101a 	strh.w	r1, [sp, #26]
 80174a2:	a904      	add	r1, sp, #16
 80174a4:	9404      	str	r4, [sp, #16]
 80174a6:	f88d 7014 	strb.w	r7, [sp, #20]
 80174aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174ae:	f8ad 201c 	strh.w	r2, [sp, #28]
 80174b2:	6803      	ldr	r3, [r0, #0]
 80174b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174b6:	4798      	blx	r3
 80174b8:	b009      	add	sp, #36	; 0x24
 80174ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174bc:	0802729c 	.word	0x0802729c
 80174c0:	080272b0 	.word	0x080272b0

080174c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80174c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80174cc:	b0a1      	sub	sp, #132	; 0x84
 80174ce:	4604      	mov	r4, r0
 80174d0:	460d      	mov	r5, r1
 80174d2:	790b      	ldrb	r3, [r1, #4]
 80174d4:	f1b9 0f00 	cmp.w	r9, #0
 80174d8:	d00f      	beq.n	80174fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80174da:	2b00      	cmp	r3, #0
 80174dc:	f040 80a2 	bne.w	8017624 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 80174e0:	b021      	add	sp, #132	; 0x84
 80174e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80174ea:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80174ee:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80174f2:	1d20      	adds	r0, r4, #4
 80174f4:	f7fa fea0 	bl	8012238 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80174f8:	e094      	b.n	8017624 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d1f0      	bne.n	80174e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80174fe:	4b5f      	ldr	r3, [pc, #380]	; (801767c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8017506:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801750a:	f1ba 0f03 	cmp.w	sl, #3
 801750e:	ddea      	ble.n	80174e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8017510:	f1ba 0f0c 	cmp.w	sl, #12
 8017514:	f04f 0303 	mov.w	r3, #3
 8017518:	f04f 0600 	mov.w	r6, #0
 801751c:	4958      	ldr	r1, [pc, #352]	; (8017680 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801751e:	bfd8      	it	le
 8017520:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8017524:	960a      	str	r6, [sp, #40]	; 0x28
 8017526:	bfd8      	it	le
 8017528:	fb92 f3f3 	sdivle	r3, r2, r3
 801752c:	9301      	str	r3, [sp, #4]
 801752e:	4b55      	ldr	r3, [pc, #340]	; (8017684 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8017530:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017534:	4b54      	ldr	r3, [pc, #336]	; (8017688 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8017536:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801753a:	2248      	movs	r2, #72	; 0x48
 801753c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017540:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017544:	ab0e      	add	r3, sp, #56	; 0x38
 8017546:	4618      	mov	r0, r3
 8017548:	f00b feda 	bl	8023300 <memcpy>
 801754c:	f04f 32ff 	mov.w	r2, #4294967295
 8017550:	f8cd a008 	str.w	sl, [sp, #8]
 8017554:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8017558:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801755c:	46b3      	mov	fp, r6
 801755e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017562:	b29b      	uxth	r3, r3
 8017564:	9303      	str	r3, [sp, #12]
 8017566:	2300      	movs	r3, #0
 8017568:	9a03      	ldr	r2, [sp, #12]
 801756a:	88ef      	ldrh	r7, [r5, #6]
 801756c:	a80a      	add	r0, sp, #40	; 0x28
 801756e:	9309      	str	r3, [sp, #36]	; 0x24
 8017570:	9b07      	ldr	r3, [sp, #28]
 8017572:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8017576:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801757a:	fb13 f302 	smulbb	r3, r3, r2
 801757e:	b29b      	uxth	r3, r3
 8017580:	9304      	str	r3, [sp, #16]
 8017582:	9b07      	ldr	r3, [sp, #28]
 8017584:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017588:	685b      	ldr	r3, [r3, #4]
 801758a:	fb13 f302 	smulbb	r3, r3, r2
 801758e:	b29b      	uxth	r3, r3
 8017590:	9305      	str	r3, [sp, #20]
 8017592:	9b04      	ldr	r3, [sp, #16]
 8017594:	441f      	add	r7, r3
 8017596:	9b05      	ldr	r3, [sp, #20]
 8017598:	4498      	add	r8, r3
 801759a:	b23f      	sxth	r7, r7
 801759c:	fa0f f888 	sxth.w	r8, r8
 80175a0:	4639      	mov	r1, r7
 80175a2:	4642      	mov	r2, r8
 80175a4:	f7ff ff14 	bl	80173d0 <_ZNK8touchgfx4Rect9intersectEss>
 80175a8:	b380      	cbz	r0, 801760c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80175aa:	4639      	mov	r1, r7
 80175ac:	ab09      	add	r3, sp, #36	; 0x24
 80175ae:	4642      	mov	r2, r8
 80175b0:	1d20      	adds	r0, r4, #4
 80175b2:	f7fa fe41 	bl	8012238 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80175b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175b8:	b341      	cbz	r1, 801760c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80175ba:	4549      	cmp	r1, r9
 80175bc:	d026      	beq.n	801760c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80175be:	a80c      	add	r0, sp, #48	; 0x30
 80175c0:	f7ff fd6e 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175c4:	2002      	movs	r0, #2
 80175c6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80175ca:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80175ce:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80175d2:	fb92 f2f0 	sdiv	r2, r2, r0
 80175d6:	440a      	add	r2, r1
 80175d8:	1a99      	subs	r1, r3, r2
 80175da:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80175de:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80175e2:	fb93 f3f0 	sdiv	r3, r3, r0
 80175e6:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80175ea:	4403      	add	r3, r0
 80175ec:	1ad3      	subs	r3, r2, r3
 80175ee:	9a06      	ldr	r2, [sp, #24]
 80175f0:	435b      	muls	r3, r3
 80175f2:	fb01 3301 	mla	r3, r1, r1, r3
 80175f6:	4293      	cmp	r3, r2
 80175f8:	d208      	bcs.n	801760c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80175fa:	9a04      	ldr	r2, [sp, #16]
 80175fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017600:	86a2      	strh	r2, [r4, #52]	; 0x34
 8017602:	9a05      	ldr	r2, [sp, #20]
 8017604:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8017608:	86e2      	strh	r2, [r4, #54]	; 0x36
 801760a:	9306      	str	r3, [sp, #24]
 801760c:	f10b 0b02 	add.w	fp, fp, #2
 8017610:	f1bb 0f08 	cmp.w	fp, #8
 8017614:	dda7      	ble.n	8017566 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8017616:	9b02      	ldr	r3, [sp, #8]
 8017618:	3601      	adds	r6, #1
 801761a:	4453      	add	r3, sl
 801761c:	9302      	str	r3, [sp, #8]
 801761e:	9b01      	ldr	r3, [sp, #4]
 8017620:	42b3      	cmp	r3, r6
 8017622:	d199      	bne.n	8017558 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8017624:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017626:	2900      	cmp	r1, #0
 8017628:	f43f af5a 	beq.w	80174e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801762c:	a80c      	add	r0, sp, #48	; 0x30
 801762e:	2600      	movs	r6, #0
 8017630:	f7ff fd36 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017634:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8017638:	88ea      	ldrh	r2, [r5, #6]
 801763a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801763e:	1ad2      	subs	r2, r2, r3
 8017640:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017642:	7929      	ldrb	r1, [r5, #4]
 8017644:	441a      	add	r2, r3
 8017646:	892b      	ldrh	r3, [r5, #8]
 8017648:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801764c:	a90e      	add	r1, sp, #56	; 0x38
 801764e:	1a1b      	subs	r3, r3, r0
 8017650:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8017652:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8017656:	4403      	add	r3, r0
 8017658:	480c      	ldr	r0, [pc, #48]	; (801768c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801765a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801765e:	900e      	str	r0, [sp, #56]	; 0x38
 8017660:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017662:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017666:	6803      	ldr	r3, [r0, #0]
 8017668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801766a:	4798      	blx	r3
 801766c:	792b      	ldrb	r3, [r5, #4]
 801766e:	2b00      	cmp	r3, #0
 8017670:	f43f af36 	beq.w	80174e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017674:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8017678:	e732      	b.n	80174e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801767a:	bf00      	nop
 801767c:	2005653c 	.word	0x2005653c
 8017680:	0802526c 	.word	0x0802526c
 8017684:	20056530 	.word	0x20056530
 8017688:	20056532 	.word	0x20056532
 801768c:	0802729c 	.word	0x0802729c

08017690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017692:	4604      	mov	r4, r0
 8017694:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017698:	3201      	adds	r2, #1
 801769a:	d112      	bne.n	80176c2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801769c:	2500      	movs	r5, #0
 801769e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80176a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80176a6:	6803      	ldr	r3, [r0, #0]
 80176a8:	9500      	str	r5, [sp, #0]
 80176aa:	466d      	mov	r5, sp
 80176ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 80176b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80176b4:	4629      	mov	r1, r5
 80176b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b8:	4798      	blx	r3
 80176ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80176be:	e884 0003 	stmia.w	r4, {r0, r1}
 80176c2:	4620      	mov	r0, r4
 80176c4:	b003      	add	sp, #12
 80176c6:	bd30      	pop	{r4, r5, pc}

080176c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80176c8:	b513      	push	{r0, r1, r4, lr}
 80176ca:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80176ce:	4604      	mov	r4, r0
 80176d0:	3301      	adds	r3, #1
 80176d2:	d109      	bne.n	80176e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80176d4:	4601      	mov	r1, r0
 80176d6:	4668      	mov	r0, sp
 80176d8:	f7ff fce2 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80176e0:	8423      	strh	r3, [r4, #32]
 80176e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80176e6:	8463      	strh	r3, [r4, #34]	; 0x22
 80176e8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80176ec:	b002      	add	sp, #8
 80176ee:	bd10      	pop	{r4, pc}

080176f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80176f0:	b513      	push	{r0, r1, r4, lr}
 80176f2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80176f6:	4604      	mov	r4, r0
 80176f8:	3301      	adds	r3, #1
 80176fa:	d109      	bne.n	8017710 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80176fc:	4601      	mov	r1, r0
 80176fe:	4668      	mov	r0, sp
 8017700:	f7ff fcce 	bl	80170a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017704:	f8bd 3000 	ldrh.w	r3, [sp]
 8017708:	8423      	strh	r3, [r4, #32]
 801770a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801770e:	8463      	strh	r3, [r4, #34]	; 0x22
 8017710:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017714:	b002      	add	sp, #8
 8017716:	bd10      	pop	{r4, pc}

08017718 <_ZN8touchgfx6ScreenC1Ev>:
 8017718:	b570      	push	{r4, r5, r6, lr}
 801771a:	4b17      	ldr	r3, [pc, #92]	; (8017778 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801771c:	4605      	mov	r5, r0
 801771e:	4a17      	ldr	r2, [pc, #92]	; (801777c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017720:	2101      	movs	r1, #1
 8017722:	f845 3b04 	str.w	r3, [r5], #4
 8017726:	2300      	movs	r3, #0
 8017728:	6042      	str	r2, [r0, #4]
 801772a:	4604      	mov	r4, r0
 801772c:	8103      	strh	r3, [r0, #8]
 801772e:	8143      	strh	r3, [r0, #10]
 8017730:	8183      	strh	r3, [r0, #12]
 8017732:	81c3      	strh	r3, [r0, #14]
 8017734:	8203      	strh	r3, [r0, #16]
 8017736:	8243      	strh	r3, [r0, #18]
 8017738:	8283      	strh	r3, [r0, #20]
 801773a:	82c3      	strh	r3, [r0, #22]
 801773c:	6203      	str	r3, [r0, #32]
 801773e:	8483      	strh	r3, [r0, #36]	; 0x24
 8017740:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017742:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8017746:	6343      	str	r3, [r0, #52]	; 0x34
 8017748:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801774c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017750:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017754:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8017758:	4b09      	ldr	r3, [pc, #36]	; (8017780 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801775a:	4628      	mov	r0, r5
 801775c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017760:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8017762:	4a08      	ldr	r2, [pc, #32]	; (8017784 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017764:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017768:	4798      	blx	r3
 801776a:	6863      	ldr	r3, [r4, #4]
 801776c:	4628      	mov	r0, r5
 801776e:	4631      	mov	r1, r6
 8017770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017772:	4798      	blx	r3
 8017774:	4620      	mov	r0, r4
 8017776:	bd70      	pop	{r4, r5, r6, pc}
 8017778:	080272d8 	.word	0x080272d8
 801777c:	08025ef8 	.word	0x08025ef8
 8017780:	20056532 	.word	0x20056532
 8017784:	20056530 	.word	0x20056530

08017788 <_ZN8touchgfx6Screen4drawEv>:
 8017788:	4b09      	ldr	r3, [pc, #36]	; (80177b0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801778a:	b507      	push	{r0, r1, r2, lr}
 801778c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017790:	2100      	movs	r1, #0
 8017792:	4b08      	ldr	r3, [pc, #32]	; (80177b4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017794:	9100      	str	r1, [sp, #0]
 8017796:	4669      	mov	r1, sp
 8017798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801779c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80177a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80177a4:	6803      	ldr	r3, [r0, #0]
 80177a6:	689b      	ldr	r3, [r3, #8]
 80177a8:	4798      	blx	r3
 80177aa:	b003      	add	sp, #12
 80177ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80177b0:	20056530 	.word	0x20056530
 80177b4:	20056532 	.word	0x20056532

080177b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80177b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80177c0:	b089      	sub	sp, #36	; 0x24
 80177c2:	4680      	mov	r8, r0
 80177c4:	460c      	mov	r4, r1
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	4615      	mov	r5, r2
 80177ca:	dd0e      	ble.n	80177ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80177cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	dd0a      	ble.n	80177ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80177d4:	4628      	mov	r0, r5
 80177d6:	f7ff ff5b 	bl	8017690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80177da:	4621      	mov	r1, r4
 80177dc:	f7fb ffea 	bl	80137b4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80177e0:	69eb      	ldr	r3, [r5, #28]
 80177e2:	b928      	cbnz	r0, 80177f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80177e4:	461d      	mov	r5, r3
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d1f4      	bne.n	80177d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80177ea:	b009      	add	sp, #36	; 0x24
 80177ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f0:	ae04      	add	r6, sp, #16
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	f000 80b5 	beq.w	8017962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80177f8:	682b      	ldr	r3, [r5, #0]
 80177fa:	4629      	mov	r1, r5
 80177fc:	a802      	add	r0, sp, #8
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	4798      	blx	r3
 8017802:	4628      	mov	r0, r5
 8017804:	f7ff ff60 	bl	80176c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017808:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801780c:	4407      	add	r7, r0
 801780e:	4628      	mov	r0, r5
 8017810:	f7ff ff6e 	bl	80176f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017814:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017818:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801781c:	b23f      	sxth	r7, r7
 801781e:	4418      	add	r0, r3
 8017820:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017824:	4621      	mov	r1, r4
 8017826:	f8ad 2014 	strh.w	r2, [sp, #20]
 801782a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801782e:	4630      	mov	r0, r6
 8017830:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017834:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017838:	f7fa fdb0 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 801783c:	4628      	mov	r0, r5
 801783e:	f7ff ff27 	bl	8017690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017842:	ab06      	add	r3, sp, #24
 8017844:	4602      	mov	r2, r0
 8017846:	e896 0003 	ldmia.w	r6, {r0, r1}
 801784a:	e883 0003 	stmia.w	r3, {r0, r1}
 801784e:	4611      	mov	r1, r2
 8017850:	4618      	mov	r0, r3
 8017852:	f7fa fda3 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 8017856:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801785a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801785e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017862:	4299      	cmp	r1, r3
 8017864:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017868:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801786c:	d10b      	bne.n	8017886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801786e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017872:	4552      	cmp	r2, sl
 8017874:	d107      	bne.n	8017886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017876:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801787a:	455a      	cmp	r2, fp
 801787c:	d103      	bne.n	8017886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801787e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017882:	454a      	cmp	r2, r9
 8017884:	d06d      	beq.n	8017962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017886:	f1bb 0f00 	cmp.w	fp, #0
 801788a:	dd65      	ble.n	8017958 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801788c:	f1b9 0f00 	cmp.w	r9, #0
 8017890:	dd62      	ble.n	8017958 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017892:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017896:	fa1f f08a 	uxth.w	r0, sl
 801789a:	4552      	cmp	r2, sl
 801789c:	9000      	str	r0, [sp, #0]
 801789e:	da12      	bge.n	80178c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80178a0:	9301      	str	r3, [sp, #4]
 80178a2:	9b00      	ldr	r3, [sp, #0]
 80178a4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80178a8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80178ac:	1a9a      	subs	r2, r3, r2
 80178ae:	f8ad 1010 	strh.w	r1, [sp, #16]
 80178b2:	4631      	mov	r1, r6
 80178b4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80178b8:	4640      	mov	r0, r8
 80178ba:	f8ad 2016 	strh.w	r2, [sp, #22]
 80178be:	69ea      	ldr	r2, [r5, #28]
 80178c0:	f7ff ff7a 	bl	80177b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80178c4:	9b01      	ldr	r3, [sp, #4]
 80178c6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80178ca:	b29f      	uxth	r7, r3
 80178cc:	429a      	cmp	r2, r3
 80178ce:	da0d      	bge.n	80178ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80178d0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80178d4:	1aba      	subs	r2, r7, r2
 80178d6:	f8ad a012 	strh.w	sl, [sp, #18]
 80178da:	4631      	mov	r1, r6
 80178dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80178e0:	4640      	mov	r0, r8
 80178e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80178e6:	69ea      	ldr	r2, [r5, #28]
 80178e8:	f7ff ff66 	bl	80177b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80178ec:	8822      	ldrh	r2, [r4, #0]
 80178ee:	445f      	add	r7, fp
 80178f0:	88a3      	ldrh	r3, [r4, #4]
 80178f2:	b2bf      	uxth	r7, r7
 80178f4:	4413      	add	r3, r2
 80178f6:	b23a      	sxth	r2, r7
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	b219      	sxth	r1, r3
 80178fc:	4291      	cmp	r1, r2
 80178fe:	dd0d      	ble.n	801791c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017900:	1bdb      	subs	r3, r3, r7
 8017902:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017906:	f8ad a012 	strh.w	sl, [sp, #18]
 801790a:	4631      	mov	r1, r6
 801790c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017910:	4640      	mov	r0, r8
 8017912:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017916:	69ea      	ldr	r2, [r5, #28]
 8017918:	f7ff ff4e 	bl	80177b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801791c:	88e2      	ldrh	r2, [r4, #6]
 801791e:	8863      	ldrh	r3, [r4, #2]
 8017920:	4413      	add	r3, r2
 8017922:	9a00      	ldr	r2, [sp, #0]
 8017924:	444a      	add	r2, r9
 8017926:	b29b      	uxth	r3, r3
 8017928:	fa1f f982 	uxth.w	r9, r2
 801792c:	b219      	sxth	r1, r3
 801792e:	fa0f f289 	sxth.w	r2, r9
 8017932:	428a      	cmp	r2, r1
 8017934:	da15      	bge.n	8017962 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017936:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801793a:	eba3 0309 	sub.w	r3, r3, r9
 801793e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017942:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017946:	4631      	mov	r1, r6
 8017948:	f8ad 0010 	strh.w	r0, [sp, #16]
 801794c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017950:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017954:	69ea      	ldr	r2, [r5, #28]
 8017956:	e001      	b.n	801795c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017958:	69ea      	ldr	r2, [r5, #28]
 801795a:	4621      	mov	r1, r4
 801795c:	4640      	mov	r0, r8
 801795e:	f7ff ff2b 	bl	80177b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017962:	4628      	mov	r0, r5
 8017964:	f7ff fe94 	bl	8017690 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017968:	6861      	ldr	r1, [r4, #4]
 801796a:	4602      	mov	r2, r0
 801796c:	4633      	mov	r3, r6
 801796e:	6820      	ldr	r0, [r4, #0]
 8017970:	c303      	stmia	r3!, {r0, r1}
 8017972:	4611      	mov	r1, r2
 8017974:	4630      	mov	r0, r6
 8017976:	f7fa fd11 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 801797a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801797e:	2b00      	cmp	r3, #0
 8017980:	f77f af33 	ble.w	80177ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017984:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017988:	2b00      	cmp	r3, #0
 801798a:	f77f af2e 	ble.w	80177ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801798e:	4628      	mov	r0, r5
 8017990:	f7ff fe9a 	bl	80176c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017994:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017998:	1a18      	subs	r0, r3, r0
 801799a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801799e:	4628      	mov	r0, r5
 80179a0:	f7ff fea6 	bl	80176f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80179a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80179a8:	4631      	mov	r1, r6
 80179aa:	1a18      	subs	r0, r3, r0
 80179ac:	f8ad 0012 	strh.w	r0, [sp, #18]
 80179b0:	4628      	mov	r0, r5
 80179b2:	682b      	ldr	r3, [r5, #0]
 80179b4:	689b      	ldr	r3, [r3, #8]
 80179b6:	4798      	blx	r3
 80179b8:	e717      	b.n	80177ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080179ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80179ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179bc:	2300      	movs	r3, #0
 80179be:	aa02      	add	r2, sp, #8
 80179c0:	4604      	mov	r4, r0
 80179c2:	3004      	adds	r0, #4
 80179c4:	f842 3d04 	str.w	r3, [r2, #-4]!
 80179c8:	460d      	mov	r5, r1
 80179ca:	f7fa fdbf 	bl	801254c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80179ce:	9a01      	ldr	r2, [sp, #4]
 80179d0:	b11a      	cbz	r2, 80179da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80179d2:	4629      	mov	r1, r5
 80179d4:	4620      	mov	r0, r4
 80179d6:	f7ff feef 	bl	80177b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179da:	b003      	add	sp, #12
 80179dc:	bd30      	pop	{r4, r5, pc}

080179de <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80179de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179e0:	4602      	mov	r2, r0
 80179e2:	4604      	mov	r4, r0
 80179e4:	460d      	mov	r5, r1
 80179e6:	466b      	mov	r3, sp
 80179e8:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80179ec:	6851      	ldr	r1, [r2, #4]
 80179ee:	c303      	stmia	r3!, {r0, r1}
 80179f0:	4629      	mov	r1, r5
 80179f2:	4668      	mov	r0, sp
 80179f4:	f7fa fcd2 	bl	801239c <_ZN8touchgfx4RectaNERKS0_>
 80179f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80179fc:	4669      	mov	r1, sp
 80179fe:	b123      	cbz	r3, 8017a0a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8017a00:	4620      	mov	r0, r4
 8017a02:	f7ff ffda 	bl	80179ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017a06:	b003      	add	sp, #12
 8017a08:	bd30      	pop	{r4, r5, pc}
 8017a0a:	1d20      	adds	r0, r4, #4
 8017a0c:	f7fa fd65 	bl	80124da <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017a10:	e7f9      	b.n	8017a06 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08017a12 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017a12:	460b      	mov	r3, r1
 8017a14:	680a      	ldr	r2, [r1, #0]
 8017a16:	1d01      	adds	r1, r0, #4
 8017a18:	6992      	ldr	r2, [r2, #24]
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	4710      	bx	r2

08017a1e <_ZN8touchgfx12TextProviderC1Ev>:
 8017a1e:	b538      	push	{r3, r4, r5, lr}
 8017a20:	2500      	movs	r5, #0
 8017a22:	4604      	mov	r4, r0
 8017a24:	220e      	movs	r2, #14
 8017a26:	7405      	strb	r5, [r0, #16]
 8017a28:	4629      	mov	r1, r5
 8017a2a:	82c5      	strh	r5, [r0, #22]
 8017a2c:	8305      	strh	r5, [r0, #24]
 8017a2e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8017a30:	8605      	strh	r5, [r0, #48]	; 0x30
 8017a32:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017a34:	8705      	strh	r5, [r0, #56]	; 0x38
 8017a36:	e9c0 5500 	strd	r5, r5, [r0]
 8017a3a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8017a3e:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 8017a42:	3044      	adds	r0, #68	; 0x44
 8017a44:	f00b fc6a 	bl	802331c <memset>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8017a50:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8017a54:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8017a58:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8017a5c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8017a60:	f7ef fea6 	bl	80077b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017a64:	4620      	mov	r0, r4
 8017a66:	bd38      	pop	{r3, r4, r5, pc}

08017a68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017a68:	b530      	push	{r4, r5, lr}
 8017a6a:	2500      	movs	r5, #0
 8017a6c:	2401      	movs	r4, #1
 8017a6e:	6843      	ldr	r3, [r0, #4]
 8017a70:	b913      	cbnz	r3, 8017a78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017a72:	6803      	ldr	r3, [r0, #0]
 8017a74:	b1f3      	cbz	r3, 8017ab4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017a76:	6043      	str	r3, [r0, #4]
 8017a78:	7c03      	ldrb	r3, [r0, #16]
 8017a7a:	b143      	cbz	r3, 8017a8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017a7c:	68c3      	ldr	r3, [r0, #12]
 8017a7e:	b12b      	cbz	r3, 8017a8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017a80:	881a      	ldrh	r2, [r3, #0]
 8017a82:	b11a      	cbz	r2, 8017a8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017a84:	1c9a      	adds	r2, r3, #2
 8017a86:	60c2      	str	r2, [r0, #12]
 8017a88:	8818      	ldrh	r0, [r3, #0]
 8017a8a:	bd30      	pop	{r4, r5, pc}
 8017a8c:	7405      	strb	r5, [r0, #16]
 8017a8e:	6843      	ldr	r3, [r0, #4]
 8017a90:	8819      	ldrh	r1, [r3, #0]
 8017a92:	b179      	cbz	r1, 8017ab4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017a94:	1c9a      	adds	r2, r3, #2
 8017a96:	2902      	cmp	r1, #2
 8017a98:	6042      	str	r2, [r0, #4]
 8017a9a:	d1f5      	bne.n	8017a88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017a9c:	6883      	ldr	r3, [r0, #8]
 8017a9e:	1d1a      	adds	r2, r3, #4
 8017aa0:	6082      	str	r2, [r0, #8]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	60c3      	str	r3, [r0, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d0e1      	beq.n	8017a6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017aaa:	881b      	ldrh	r3, [r3, #0]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d0de      	beq.n	8017a6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017ab0:	7404      	strb	r4, [r0, #16]
 8017ab2:	e7dc      	b.n	8017a6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017ab4:	2000      	movs	r0, #0
 8017ab6:	e7e8      	b.n	8017a8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017ab8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017ab8:	b410      	push	{r4}
 8017aba:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017abc:	9b01      	ldr	r3, [sp, #4]
 8017abe:	6082      	str	r2, [r0, #8]
 8017ac0:	6403      	str	r3, [r0, #64]	; 0x40
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	6001      	str	r1, [r0, #0]
 8017ac6:	6043      	str	r3, [r0, #4]
 8017ac8:	60c3      	str	r3, [r0, #12]
 8017aca:	7403      	strb	r3, [r0, #16]
 8017acc:	8603      	strh	r3, [r0, #48]	; 0x30
 8017ace:	8303      	strh	r3, [r0, #24]
 8017ad0:	8703      	strh	r3, [r0, #56]	; 0x38
 8017ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ad6:	f7ef be6b 	b.w	80077b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017ada <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017adc:	4605      	mov	r5, r0
 8017ade:	4608      	mov	r0, r1
 8017ae0:	b1f1      	cbz	r1, 8017b20 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017ae2:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8017ae6:	460b      	mov	r3, r1
 8017ae8:	f101 0708 	add.w	r7, r1, #8
 8017aec:	4622      	mov	r2, r4
 8017aee:	6818      	ldr	r0, [r3, #0]
 8017af0:	3308      	adds	r3, #8
 8017af2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017af6:	4626      	mov	r6, r4
 8017af8:	42bb      	cmp	r3, r7
 8017afa:	c603      	stmia	r6!, {r0, r1}
 8017afc:	4634      	mov	r4, r6
 8017afe:	d1f6      	bne.n	8017aee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017b00:	6818      	ldr	r0, [r3, #0]
 8017b02:	6030      	str	r0, [r6, #0]
 8017b04:	4610      	mov	r0, r2
 8017b06:	889b      	ldrh	r3, [r3, #4]
 8017b08:	80b3      	strh	r3, [r6, #4]
 8017b0a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8017b0e:	015b      	lsls	r3, r3, #5
 8017b10:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017b14:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8017b18:	430b      	orrs	r3, r1
 8017b1a:	425b      	negs	r3, r3
 8017b1c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 8017b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017b22 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017b22:	b538      	push	{r3, r4, r5, lr}
 8017b24:	460c      	mov	r4, r1
 8017b26:	6811      	ldr	r1, [r2, #0]
 8017b28:	4610      	mov	r0, r2
 8017b2a:	68cd      	ldr	r5, [r1, #12]
 8017b2c:	4619      	mov	r1, r3
 8017b2e:	47a8      	blx	r5
 8017b30:	2800      	cmp	r0, #0
 8017b32:	bf08      	it	eq
 8017b34:	4620      	moveq	r0, r4
 8017b36:	bd38      	pop	{r3, r4, r5, pc}

08017b38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	4615      	mov	r5, r2
 8017b3e:	4608      	mov	r0, r1
 8017b40:	b93a      	cbnz	r2, 8017b52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017b42:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8017b46:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 8017b4a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8017b4e:	4628      	mov	r0, r5
 8017b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b52:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017b56:	8893      	ldrh	r3, [r2, #4]
 8017b58:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017b5c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017b60:	79ee      	ldrb	r6, [r5, #7]
 8017b62:	4316      	orrs	r6, r2
 8017b64:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8017b68:	189a      	adds	r2, r3, r2
 8017b6a:	b2b7      	uxth	r7, r6
 8017b6c:	b291      	uxth	r1, r2
 8017b6e:	291d      	cmp	r1, #29
 8017b70:	f200 8084 	bhi.w	8017c7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8017b74:	2201      	movs	r2, #1
 8017b76:	10f6      	asrs	r6, r6, #3
 8017b78:	408a      	lsls	r2, r1
 8017b7a:	4978      	ldr	r1, [pc, #480]	; (8017d5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8017b7c:	420a      	tst	r2, r1
 8017b7e:	d12e      	bne.n	8017bde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8017b80:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017b84:	d07a      	beq.n	8017c7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8017b86:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8017b8a:	462b      	mov	r3, r5
 8017b8c:	f105 0e08 	add.w	lr, r5, #8
 8017b90:	4615      	mov	r5, r2
 8017b92:	6818      	ldr	r0, [r3, #0]
 8017b94:	3308      	adds	r3, #8
 8017b96:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017b9a:	4694      	mov	ip, r2
 8017b9c:	4573      	cmp	r3, lr
 8017b9e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017ba2:	4662      	mov	r2, ip
 8017ba4:	d1f5      	bne.n	8017b92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8017ba6:	6818      	ldr	r0, [r3, #0]
 8017ba8:	f8cc 0000 	str.w	r0, [ip]
 8017bac:	889b      	ldrh	r3, [r3, #4]
 8017bae:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017bb2:	b2b3      	uxth	r3, r6
 8017bb4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 8017bb8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8017bbc:	1aca      	subs	r2, r1, r3
 8017bbe:	1bcf      	subs	r7, r1, r7
 8017bc0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017bc4:	b292      	uxth	r2, r2
 8017bc6:	1afb      	subs	r3, r7, r3
 8017bc8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 8017bcc:	10d2      	asrs	r2, r2, #3
 8017bce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017bd2:	4302      	orrs	r2, r0
 8017bd4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8017bd8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8017bdc:	e7b7      	b.n	8017b4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017bde:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017be0:	b92b      	cbnz	r3, 8017bee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8017be2:	4b5f      	ldr	r3, [pc, #380]	; (8017d60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8017be4:	21bf      	movs	r1, #191	; 0xbf
 8017be6:	4a5f      	ldr	r2, [pc, #380]	; (8017d64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8017be8:	485f      	ldr	r0, [pc, #380]	; (8017d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8017bea:	f00b fb0b 	bl	8023204 <__assert_func>
 8017bee:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8017bf0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017bf4:	8b59      	ldrh	r1, [r3, #26]
 8017bf6:	f640 6333 	movw	r3, #3635	; 0xe33
 8017bfa:	4299      	cmp	r1, r3
 8017bfc:	d110      	bne.n	8017c20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8017bfe:	6803      	ldr	r3, [r0, #0]
 8017c00:	68db      	ldr	r3, [r3, #12]
 8017c02:	4798      	blx	r3
 8017c04:	7b41      	ldrb	r1, [r0, #13]
 8017c06:	00cb      	lsls	r3, r1, #3
 8017c08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017c0c:	7a03      	ldrb	r3, [r0, #8]
 8017c0e:	0648      	lsls	r0, r1, #25
 8017c10:	ea43 0302 	orr.w	r3, r3, r2
 8017c14:	bf44      	itt	mi
 8017c16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017c1a:	b21b      	sxthmi	r3, r3
 8017c1c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017c20:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8017c24:	462a      	mov	r2, r5
 8017c26:	f105 0c08 	add.w	ip, r5, #8
 8017c2a:	443b      	add	r3, r7
 8017c2c:	4433      	add	r3, r6
 8017c2e:	f104 0644 	add.w	r6, r4, #68	; 0x44
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	4635      	mov	r5, r6
 8017c36:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017c3a:	6810      	ldr	r0, [r2, #0]
 8017c3c:	3208      	adds	r2, #8
 8017c3e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017c42:	4637      	mov	r7, r6
 8017c44:	4562      	cmp	r2, ip
 8017c46:	c703      	stmia	r7!, {r0, r1}
 8017c48:	463e      	mov	r6, r7
 8017c4a:	d1f6      	bne.n	8017c3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8017c4c:	6810      	ldr	r0, [r2, #0]
 8017c4e:	6038      	str	r0, [r7, #0]
 8017c50:	8892      	ldrh	r2, [r2, #4]
 8017c52:	80ba      	strh	r2, [r7, #4]
 8017c54:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8017c58:	10db      	asrs	r3, r3, #3
 8017c5a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8017c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017c66:	4313      	orrs	r3, r2
 8017c68:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8017c6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8017c70:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8017c74:	1a9b      	subs	r3, r3, r2
 8017c76:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8017c7a:	e768      	b.n	8017b4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017c7c:	f023 0204 	bic.w	r2, r3, #4
 8017c80:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017c84:	428a      	cmp	r2, r1
 8017c86:	d003      	beq.n	8017c90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8017c88:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d120      	bne.n	8017cd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8017c90:	3b01      	subs	r3, #1
 8017c92:	4602      	mov	r2, r0
 8017c94:	4629      	mov	r1, r5
 8017c96:	4620      	mov	r0, r4
 8017c98:	b29b      	uxth	r3, r3
 8017c9a:	f7ff ff42 	bl	8017b22 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017c9e:	7b41      	ldrb	r1, [r0, #13]
 8017ca0:	00cb      	lsls	r3, r1, #3
 8017ca2:	0649      	lsls	r1, r1, #25
 8017ca4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017ca8:	7a03      	ldrb	r3, [r0, #8]
 8017caa:	ea43 0302 	orr.w	r3, r3, r2
 8017cae:	bf44      	itt	mi
 8017cb0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017cb4:	b21b      	sxthmi	r3, r3
 8017cb6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017cba:	7b6b      	ldrb	r3, [r5, #13]
 8017cbc:	7aaa      	ldrb	r2, [r5, #10]
 8017cbe:	005b      	lsls	r3, r3, #1
 8017cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cc4:	4313      	orrs	r3, r2
 8017cc6:	115a      	asrs	r2, r3, #5
 8017cc8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017ccc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8017cd0:	e035      	b.n	8017d3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8017cd2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017cd6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017cda:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017cde:	7a2a      	ldrb	r2, [r5, #8]
 8017ce0:	ea42 0201 	orr.w	r2, r2, r1
 8017ce4:	f640 6109 	movw	r1, #3593	; 0xe09
 8017ce8:	bf1c      	itt	ne
 8017cea:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017cee:	b212      	sxthne	r2, r2
 8017cf0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8017cf4:	f023 0210 	bic.w	r2, r3, #16
 8017cf8:	428a      	cmp	r2, r1
 8017cfa:	d003      	beq.n	8017d04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8017cfc:	f640 6213 	movw	r2, #3603	; 0xe13
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d129      	bne.n	8017d58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8017d04:	7b6e      	ldrb	r6, [r5, #13]
 8017d06:	4629      	mov	r1, r5
 8017d08:	0076      	lsls	r6, r6, #1
 8017d0a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017d0e:	7aae      	ldrb	r6, [r5, #10]
 8017d10:	4316      	orrs	r6, r2
 8017d12:	f640 6213 	movw	r2, #3603	; 0xe13
 8017d16:	4293      	cmp	r3, r2
 8017d18:	4602      	mov	r2, r0
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	bf16      	itet	ne
 8017d1e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017d22:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017d26:	b29b      	uxthne	r3, r3
 8017d28:	f7ff fefb 	bl	8017b22 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017d2c:	7b43      	ldrb	r3, [r0, #13]
 8017d2e:	7a82      	ldrb	r2, [r0, #10]
 8017d30:	005b      	lsls	r3, r3, #1
 8017d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d36:	4313      	orrs	r3, r2
 8017d38:	1af6      	subs	r6, r6, r3
 8017d3a:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 8017d3e:	7b69      	ldrb	r1, [r5, #13]
 8017d40:	00cb      	lsls	r3, r1, #3
 8017d42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017d46:	7a2b      	ldrb	r3, [r5, #8]
 8017d48:	4313      	orrs	r3, r2
 8017d4a:	064a      	lsls	r2, r1, #25
 8017d4c:	bf44      	itt	mi
 8017d4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017d52:	b21b      	sxthmi	r3, r3
 8017d54:	1bdb      	subs	r3, r3, r7
 8017d56:	e73f      	b.n	8017bd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8017d58:	2300      	movs	r3, #0
 8017d5a:	e7b7      	b.n	8017ccc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8017d5c:	3fc00079 	.word	0x3fc00079
 8017d60:	08027304 	.word	0x08027304
 8017d64:	08027576 	.word	0x08027576
 8017d68:	0802730d 	.word	0x0802730d

08017d6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d70:	4604      	mov	r4, r0
 8017d72:	b942      	cbnz	r2, 8017d86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017d78:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8017d7c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8017d80:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8017d84:	e046      	b.n	8017e14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8017d86:	7b51      	ldrb	r1, [r2, #13]
 8017d88:	8893      	ldrh	r3, [r2, #4]
 8017d8a:	010f      	lsls	r7, r1, #4
 8017d8c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017d90:	79d7      	ldrb	r7, [r2, #7]
 8017d92:	4307      	orrs	r7, r0
 8017d94:	2f04      	cmp	r7, #4
 8017d96:	b2bd      	uxth	r5, r7
 8017d98:	bfcc      	ite	gt
 8017d9a:	08bf      	lsrgt	r7, r7, #2
 8017d9c:	2701      	movle	r7, #1
 8017d9e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017da2:	f200 80ab 	bhi.w	8017efc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8017da6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017daa:	4283      	cmp	r3, r0
 8017dac:	d216      	bcs.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017dae:	f240 605b 	movw	r0, #1627	; 0x65b
 8017db2:	4283      	cmp	r3, r0
 8017db4:	d859      	bhi.n	8017e6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8017db6:	f240 6057 	movw	r0, #1623	; 0x657
 8017dba:	4283      	cmp	r3, r0
 8017dbc:	d20e      	bcs.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017dbe:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017dc2:	d24a      	bcs.n	8017e5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8017dc4:	f240 604e 	movw	r0, #1614	; 0x64e
 8017dc8:	4283      	cmp	r3, r0
 8017dca:	d207      	bcs.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017dcc:	f240 601a 	movw	r0, #1562	; 0x61a
 8017dd0:	4283      	cmp	r3, r0
 8017dd2:	d02a      	beq.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017dd4:	d821      	bhi.n	8017e1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8017dd6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017dda:	d35b      	bcc.n	8017e94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017ddc:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 8017de0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017de4:	f040 80d0 	bne.w	8017f88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8017de8:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 8017dec:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017df0:	f040 80ca 	bne.w	8017f88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8017df4:	00cb      	lsls	r3, r1, #3
 8017df6:	0649      	lsls	r1, r1, #25
 8017df8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017dfc:	7a13      	ldrb	r3, [r2, #8]
 8017dfe:	ea43 0300 	orr.w	r3, r3, r0
 8017e02:	bf44      	itt	mi
 8017e04:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e08:	b21b      	sxthmi	r3, r3
 8017e0a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017e0e:	1b5d      	subs	r5, r3, r5
 8017e10:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8017e14:	4610      	mov	r0, r2
 8017e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e1a:	f240 604b 	movw	r0, #1611	; 0x64b
 8017e1e:	4283      	cmp	r3, r0
 8017e20:	d338      	bcc.n	8017e94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017e22:	f240 604c 	movw	r0, #1612	; 0x64c
 8017e26:	4283      	cmp	r3, r0
 8017e28:	d9d8      	bls.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e2a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8017e2e:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8017e32:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017e36:	f040 80f2 	bne.w	801801e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8017e3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017e3e:	f040 80ee 	bne.w	801801e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8017e42:	00cb      	lsls	r3, r1, #3
 8017e44:	064e      	lsls	r6, r1, #25
 8017e46:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017e4a:	7a13      	ldrb	r3, [r2, #8]
 8017e4c:	ea43 0300 	orr.w	r3, r3, r0
 8017e50:	bf44      	itt	mi
 8017e52:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e56:	b21b      	sxthmi	r3, r3
 8017e58:	e7d9      	b.n	8017e0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8017e5a:	f240 6054 	movw	r0, #1620	; 0x654
 8017e5e:	4283      	cmp	r3, r0
 8017e60:	d8e3      	bhi.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017e62:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017e66:	d9e0      	bls.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017e68:	e7b8      	b.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e6a:	f240 6074 	movw	r0, #1652	; 0x674
 8017e6e:	4283      	cmp	r3, r0
 8017e70:	d0b4      	beq.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e72:	d82d      	bhi.n	8017ed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8017e74:	f240 605e 	movw	r0, #1630	; 0x65e
 8017e78:	4283      	cmp	r3, r0
 8017e7a:	d804      	bhi.n	8017e86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8017e7c:	f240 605d 	movw	r0, #1629	; 0x65d
 8017e80:	4283      	cmp	r3, r0
 8017e82:	d3d2      	bcc.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017e84:	e7aa      	b.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e86:	f240 605f 	movw	r0, #1631	; 0x65f
 8017e8a:	4283      	cmp	r3, r0
 8017e8c:	d0cd      	beq.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017e8e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8017e92:	d0a3      	beq.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017e94:	00cb      	lsls	r3, r1, #3
 8017e96:	0649      	lsls	r1, r1, #25
 8017e98:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017e9c:	7a13      	ldrb	r3, [r2, #8]
 8017e9e:	ea43 0300 	orr.w	r3, r3, r0
 8017ea2:	bf44      	itt	mi
 8017ea4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017ea8:	b21b      	sxthmi	r3, r3
 8017eaa:	1b5d      	subs	r5, r3, r5
 8017eac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017eb0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8017eb4:	7b53      	ldrb	r3, [r2, #13]
 8017eb6:	015b      	lsls	r3, r3, #5
 8017eb8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017ebc:	7993      	ldrb	r3, [r2, #6]
 8017ebe:	430b      	orrs	r3, r1
 8017ec0:	2105      	movs	r1, #5
 8017ec2:	005b      	lsls	r3, r3, #1
 8017ec4:	fb93 f3f1 	sdiv	r3, r3, r1
 8017ec8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017ecc:	440b      	add	r3, r1
 8017ece:	e757      	b.n	8017d80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017ed0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8017ed4:	4283      	cmp	r3, r0
 8017ed6:	d809      	bhi.n	8017eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8017ed8:	f240 60df 	movw	r0, #1759	; 0x6df
 8017edc:	4283      	cmp	r3, r0
 8017ede:	f4bf af7d 	bcs.w	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017ee2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017ee6:	2b05      	cmp	r3, #5
 8017ee8:	d8d4      	bhi.n	8017e94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017eea:	e777      	b.n	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017eec:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017ef0:	4283      	cmp	r3, r0
 8017ef2:	d09a      	beq.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017ef4:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8017ef8:	4283      	cmp	r3, r0
 8017efa:	e7ca      	b.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8017efc:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017f00:	d22b      	bcs.n	8017f5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8017f02:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8017f06:	4283      	cmp	r3, r0
 8017f08:	d28f      	bcs.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f0a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017f0e:	4283      	cmp	r3, r0
 8017f10:	d816      	bhi.n	8017f40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8017f12:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8017f16:	4283      	cmp	r3, r0
 8017f18:	f4bf af60 	bcs.w	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f1c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017f20:	4283      	cmp	r3, r0
 8017f22:	d80a      	bhi.n	8017f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8017f24:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8017f28:	4283      	cmp	r3, r0
 8017f2a:	f4bf af57 	bcs.w	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f2e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017f32:	4283      	cmp	r3, r0
 8017f34:	f43f af79 	beq.w	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f38:	e7ac      	b.n	8017e94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017f3a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017f3e:	e7f8      	b.n	8017f32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8017f40:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8017f44:	4283      	cmp	r3, r0
 8017f46:	d802      	bhi.n	8017f4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8017f48:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017f4c:	e798      	b.n	8017e80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8017f4e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8017f52:	4283      	cmp	r3, r0
 8017f54:	f47f af42 	bne.w	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f58:	e767      	b.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f5a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8017f5e:	4283      	cmp	r3, r0
 8017f60:	f43f af63 	beq.w	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f64:	d802      	bhi.n	8017f6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8017f66:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8017f6a:	e7f2      	b.n	8017f52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8017f6c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017f70:	4283      	cmp	r3, r0
 8017f72:	d805      	bhi.n	8017f80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8017f74:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8017f78:	4283      	cmp	r3, r0
 8017f7a:	f4ff af2f 	bcc.w	8017ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8017f7e:	e754      	b.n	8017e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8017f80:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8017f84:	4283      	cmp	r3, r0
 8017f86:	e7af      	b.n	8017ee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8017f88:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 8017f8c:	4617      	mov	r7, r2
 8017f8e:	f102 0808 	add.w	r8, r2, #8
 8017f92:	4666      	mov	r6, ip
 8017f94:	6838      	ldr	r0, [r7, #0]
 8017f96:	3708      	adds	r7, #8
 8017f98:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017f9c:	46e6      	mov	lr, ip
 8017f9e:	4547      	cmp	r7, r8
 8017fa0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017fa4:	46f4      	mov	ip, lr
 8017fa6:	d1f5      	bne.n	8017f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8017fa8:	6838      	ldr	r0, [r7, #0]
 8017faa:	f8ce 0000 	str.w	r0, [lr]
 8017fae:	88b9      	ldrh	r1, [r7, #4]
 8017fb0:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017fb4:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8017fb8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017fbc:	d009      	beq.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8017fbe:	7b51      	ldrb	r1, [r2, #13]
 8017fc0:	7992      	ldrb	r2, [r2, #6]
 8017fc2:	0149      	lsls	r1, r1, #5
 8017fc4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017fc8:	4311      	orrs	r1, r2
 8017fca:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017fce:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8017fd2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017fd6:	d00d      	beq.n	8017ff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8017fd8:	442b      	add	r3, r5
 8017fda:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8017fde:	b29b      	uxth	r3, r3
 8017fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017fe4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8017fe8:	10db      	asrs	r3, r3, #3
 8017fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017fee:	4313      	orrs	r3, r2
 8017ff0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8017ff4:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8017ff8:	00cb      	lsls	r3, r1, #3
 8017ffa:	064f      	lsls	r7, r1, #25
 8017ffc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018000:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8018004:	ea43 0302 	orr.w	r3, r3, r2
 8018008:	bf44      	itt	mi
 801800a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801800e:	b21b      	sxthmi	r3, r3
 8018010:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018014:	1b5d      	subs	r5, r3, r5
 8018016:	4632      	mov	r2, r6
 8018018:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801801c:	e6fa      	b.n	8017e14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801801e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 8018022:	4694      	mov	ip, r2
 8018024:	f102 0908 	add.w	r9, r2, #8
 8018028:	4676      	mov	r6, lr
 801802a:	f8dc 0000 	ldr.w	r0, [ip]
 801802e:	f10c 0c08 	add.w	ip, ip, #8
 8018032:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8018036:	46f0      	mov	r8, lr
 8018038:	45cc      	cmp	ip, r9
 801803a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801803e:	46c6      	mov	lr, r8
 8018040:	d1f3      	bne.n	801802a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8018042:	f8dc 0000 	ldr.w	r0, [ip]
 8018046:	f8c8 0000 	str.w	r0, [r8]
 801804a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801804e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018052:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8018056:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801805a:	d009      	beq.n	8018070 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801805c:	7b51      	ldrb	r1, [r2, #13]
 801805e:	7992      	ldrb	r2, [r2, #6]
 8018060:	0149      	lsls	r1, r1, #5
 8018062:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018066:	4311      	orrs	r1, r2
 8018068:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801806c:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8018070:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018074:	d00d      	beq.n	8018092 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8018076:	1bdb      	subs	r3, r3, r7
 8018078:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801807c:	b29b      	uxth	r3, r3
 801807e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018082:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8018086:	10db      	asrs	r3, r3, #3
 8018088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801808c:	4313      	orrs	r3, r2
 801808e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8018092:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8018096:	00cb      	lsls	r3, r1, #3
 8018098:	0648      	lsls	r0, r1, #25
 801809a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801809e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80180a2:	ea43 0302 	orr.w	r3, r3, r2
 80180a6:	bf44      	itt	mi
 80180a8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80180ac:	b21b      	sxthmi	r3, r3
 80180ae:	e7b1      	b.n	8018014 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080180b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80180b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b4:	461e      	mov	r6, r3
 80180b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80180b8:	4604      	mov	r4, r0
 80180ba:	4617      	mov	r7, r2
 80180bc:	b92b      	cbnz	r3, 80180ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80180be:	4b25      	ldr	r3, [pc, #148]	; (8018154 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80180c0:	21bf      	movs	r1, #191	; 0xbf
 80180c2:	4a25      	ldr	r2, [pc, #148]	; (8018158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80180c4:	4825      	ldr	r0, [pc, #148]	; (801815c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80180c6:	f00b f89d 	bl	8023204 <__assert_func>
 80180ca:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80180cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80180d0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80180d4:	f7ef fac6 	bl	8007664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80180d8:	4605      	mov	r5, r0
 80180da:	b918      	cbnz	r0, 80180e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80180dc:	6030      	str	r0, [r6, #0]
 80180de:	4628      	mov	r0, r5
 80180e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	4601      	mov	r1, r0
 80180e8:	4638      	mov	r0, r7
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	4798      	blx	r3
 80180ee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80180f2:	4602      	mov	r2, r0
 80180f4:	6030      	str	r0, [r6, #0]
 80180f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80180fa:	d213      	bcs.n	8018124 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80180fc:	4643      	mov	r3, r8
 80180fe:	4639      	mov	r1, r7
 8018100:	4620      	mov	r0, r4
 8018102:	f7ff fe33 	bl	8017d6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018106:	6030      	str	r0, [r6, #0]
 8018108:	6833      	ldr	r3, [r6, #0]
 801810a:	b143      	cbz	r3, 801811e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801810c:	7b5a      	ldrb	r2, [r3, #13]
 801810e:	7a9b      	ldrb	r3, [r3, #10]
 8018110:	0052      	lsls	r2, r2, #1
 8018112:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018116:	4313      	orrs	r3, r2
 8018118:	bf0c      	ite	eq
 801811a:	2301      	moveq	r3, #1
 801811c:	2300      	movne	r3, #0
 801811e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018122:	e7dc      	b.n	80180de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8018124:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018128:	b29b      	uxth	r3, r3
 801812a:	2b7f      	cmp	r3, #127	; 0x7f
 801812c:	d804      	bhi.n	8018138 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801812e:	4639      	mov	r1, r7
 8018130:	4620      	mov	r0, r4
 8018132:	f7ff fd01 	bl	8017b38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018136:	e7e6      	b.n	8018106 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018138:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801813c:	2b00      	cmp	r3, #0
 801813e:	d0e3      	beq.n	8018108 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018140:	f640 1302 	movw	r3, #2306	; 0x902
 8018144:	429d      	cmp	r5, r3
 8018146:	d1df      	bne.n	8018108 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8018148:	4601      	mov	r1, r0
 801814a:	4620      	mov	r0, r4
 801814c:	f7ff fcc5 	bl	8017ada <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018150:	e7d9      	b.n	8018106 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8018152:	bf00      	nop
 8018154:	08027304 	.word	0x08027304
 8018158:	08027576 	.word	0x08027576
 801815c:	0802730d 	.word	0x0802730d

08018160 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018164:	461e      	mov	r6, r3
 8018166:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018168:	4604      	mov	r4, r0
 801816a:	4617      	mov	r7, r2
 801816c:	b92b      	cbnz	r3, 801817a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801816e:	4b26      	ldr	r3, [pc, #152]	; (8018208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8018170:	21bf      	movs	r1, #191	; 0xbf
 8018172:	4a26      	ldr	r2, [pc, #152]	; (801820c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8018174:	4826      	ldr	r0, [pc, #152]	; (8018210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8018176:	f00b f845 	bl	8023204 <__assert_func>
 801817a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801817c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018180:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8018184:	f7ef fa6e 	bl	8007664 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018188:	4605      	mov	r5, r0
 801818a:	b918      	cbnz	r0, 8018194 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801818c:	6030      	str	r0, [r6, #0]
 801818e:	4628      	mov	r0, r5
 8018190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	4601      	mov	r1, r0
 8018198:	4638      	mov	r0, r7
 801819a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801819e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80181a2:	47c8      	blx	r9
 80181a4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80181a8:	4602      	mov	r2, r0
 80181aa:	6030      	str	r0, [r6, #0]
 80181ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80181b0:	d213      	bcs.n	80181da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80181b2:	4643      	mov	r3, r8
 80181b4:	4639      	mov	r1, r7
 80181b6:	4620      	mov	r0, r4
 80181b8:	f7ff fdd8 	bl	8017d6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80181bc:	6030      	str	r0, [r6, #0]
 80181be:	6833      	ldr	r3, [r6, #0]
 80181c0:	b143      	cbz	r3, 80181d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80181c2:	7b5a      	ldrb	r2, [r3, #13]
 80181c4:	7a9b      	ldrb	r3, [r3, #10]
 80181c6:	0052      	lsls	r2, r2, #1
 80181c8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80181cc:	4313      	orrs	r3, r2
 80181ce:	bf0c      	ite	eq
 80181d0:	2301      	moveq	r3, #1
 80181d2:	2300      	movne	r3, #0
 80181d4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80181d8:	e7d9      	b.n	801818e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80181da:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80181de:	b29b      	uxth	r3, r3
 80181e0:	2b7f      	cmp	r3, #127	; 0x7f
 80181e2:	d804      	bhi.n	80181ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80181e4:	4639      	mov	r1, r7
 80181e6:	4620      	mov	r0, r4
 80181e8:	f7ff fca6 	bl	8017b38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80181ec:	e7e6      	b.n	80181bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80181ee:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d0e3      	beq.n	80181be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80181f6:	f640 1302 	movw	r3, #2306	; 0x902
 80181fa:	429d      	cmp	r5, r3
 80181fc:	d1df      	bne.n	80181be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80181fe:	4601      	mov	r1, r0
 8018200:	4620      	mov	r0, r4
 8018202:	f7ff fc6a 	bl	8017ada <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018206:	e7d9      	b.n	80181bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8018208:	08027304 	.word	0x08027304
 801820c:	08027576 	.word	0x08027576
 8018210:	0802730d 	.word	0x0802730d

08018214 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018214:	b510      	push	{r4, lr}
 8018216:	4604      	mov	r4, r0
 8018218:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801821a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801821c:	b9d9      	cbnz	r1, 8018256 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801821e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018220:	2b0a      	cmp	r3, #10
 8018222:	d036      	beq.n	8018292 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8018224:	4620      	mov	r0, r4
 8018226:	f7ff fc1f 	bl	8017a68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801822a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801822c:	2b09      	cmp	r3, #9
 801822e:	d906      	bls.n	801823e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8018230:	4b18      	ldr	r3, [pc, #96]	; (8018294 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8018232:	f240 1103 	movw	r1, #259	; 0x103
 8018236:	4a18      	ldr	r2, [pc, #96]	; (8018298 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8018238:	4818      	ldr	r0, [pc, #96]	; (801829c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801823a:	f00a ffe3 	bl	8023204 <__assert_func>
 801823e:	1c5a      	adds	r2, r3, #1
 8018240:	8622      	strh	r2, [r4, #48]	; 0x30
 8018242:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8018244:	4413      	add	r3, r2
 8018246:	b29b      	uxth	r3, r3
 8018248:	2b09      	cmp	r3, #9
 801824a:	bf88      	it	hi
 801824c:	3b0a      	subhi	r3, #10
 801824e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018252:	8358      	strh	r0, [r3, #26]
 8018254:	e7e3      	b.n	801821e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8018256:	2b0a      	cmp	r3, #10
 8018258:	d01b      	beq.n	8018292 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801825a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801825c:	3901      	subs	r1, #1
 801825e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018262:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8018264:	8721      	strh	r1, [r4, #56]	; 0x38
 8018266:	1c51      	adds	r1, r2, #1
 8018268:	b289      	uxth	r1, r1
 801826a:	2901      	cmp	r1, #1
 801826c:	bf8a      	itet	hi
 801826e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018272:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8018274:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8018276:	2b09      	cmp	r3, #9
 8018278:	d8da      	bhi.n	8018230 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801827a:	1c5a      	adds	r2, r3, #1
 801827c:	8622      	strh	r2, [r4, #48]	; 0x30
 801827e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8018280:	4413      	add	r3, r2
 8018282:	b29b      	uxth	r3, r3
 8018284:	2b09      	cmp	r3, #9
 8018286:	bf88      	it	hi
 8018288:	3b0a      	subhi	r3, #10
 801828a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801828e:	8358      	strh	r0, [r3, #26]
 8018290:	e7c2      	b.n	8018218 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018292:	bd10      	pop	{r4, pc}
 8018294:	08027339 	.word	0x08027339
 8018298:	080276cc 	.word	0x080276cc
 801829c:	0802730d 	.word	0x0802730d

080182a0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80182a0:	b538      	push	{r3, r4, r5, lr}
 80182a2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80182a4:	4604      	mov	r4, r0
 80182a6:	b92a      	cbnz	r2, 80182b4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80182a8:	4b13      	ldr	r3, [pc, #76]	; (80182f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80182aa:	21d4      	movs	r1, #212	; 0xd4
 80182ac:	4a13      	ldr	r2, [pc, #76]	; (80182fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80182ae:	4814      	ldr	r0, [pc, #80]	; (8018300 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80182b0:	f00a ffa8 	bl	8023204 <__assert_func>
 80182b4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80182b6:	3a01      	subs	r2, #1
 80182b8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80182bc:	8b4d      	ldrh	r5, [r1, #26]
 80182be:	8602      	strh	r2, [r0, #48]	; 0x30
 80182c0:	1c5a      	adds	r2, r3, #1
 80182c2:	b292      	uxth	r2, r2
 80182c4:	2a09      	cmp	r2, #9
 80182c6:	bf8a      	itet	hi
 80182c8:	3b09      	subhi	r3, #9
 80182ca:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 80182cc:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 80182ce:	f7ff ffa1 	bl	8018214 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80182d2:	8b23      	ldrh	r3, [r4, #24]
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	bf9c      	itt	ls
 80182d8:	3301      	addls	r3, #1
 80182da:	8323      	strhls	r3, [r4, #24]
 80182dc:	8ae3      	ldrh	r3, [r4, #22]
 80182de:	b90b      	cbnz	r3, 80182e4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80182e0:	2302      	movs	r3, #2
 80182e2:	82e3      	strh	r3, [r4, #22]
 80182e4:	8ae3      	ldrh	r3, [r4, #22]
 80182e6:	4628      	mov	r0, r5
 80182e8:	3b01      	subs	r3, #1
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	82e3      	strh	r3, [r4, #22]
 80182ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80182f2:	8265      	strh	r5, [r4, #18]
 80182f4:	bd38      	pop	{r3, r4, r5, pc}
 80182f6:	bf00      	nop
 80182f8:	08027304 	.word	0x08027304
 80182fc:	08027621 	.word	0x08027621
 8018300:	0802730d 	.word	0x0802730d

08018304 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018304:	428a      	cmp	r2, r1
 8018306:	b538      	push	{r3, r4, r5, lr}
 8018308:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801830a:	d90c      	bls.n	8018326 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801830c:	b92c      	cbnz	r4, 801831a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801830e:	4b1c      	ldr	r3, [pc, #112]	; (8018380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8018310:	21e0      	movs	r1, #224	; 0xe0
 8018312:	4a1c      	ldr	r2, [pc, #112]	; (8018384 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8018314:	481c      	ldr	r0, [pc, #112]	; (8018388 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8018316:	f00a ff75 	bl	8023204 <__assert_func>
 801831a:	3c01      	subs	r4, #1
 801831c:	4b1b      	ldr	r3, [pc, #108]	; (801838c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801831e:	4a1c      	ldr	r2, [pc, #112]	; (8018390 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8018320:	21c4      	movs	r1, #196	; 0xc4
 8018322:	8604      	strh	r4, [r0, #48]	; 0x30
 8018324:	e7f6      	b.n	8018314 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8018326:	428c      	cmp	r4, r1
 8018328:	d203      	bcs.n	8018332 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801832a:	4b1a      	ldr	r3, [pc, #104]	; (8018394 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801832c:	21ca      	movs	r1, #202	; 0xca
 801832e:	4a1a      	ldr	r2, [pc, #104]	; (8018398 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8018330:	e7f0      	b.n	8018314 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8018332:	1a64      	subs	r4, r4, r1
 8018334:	250a      	movs	r5, #10
 8018336:	8604      	strh	r4, [r0, #48]	; 0x30
 8018338:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801833a:	4421      	add	r1, r4
 801833c:	b289      	uxth	r1, r1
 801833e:	2909      	cmp	r1, #9
 8018340:	bf88      	it	hi
 8018342:	390a      	subhi	r1, #10
 8018344:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8018346:	b1ba      	cbz	r2, 8018378 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8018348:	3a01      	subs	r2, #1
 801834a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801834c:	b292      	uxth	r2, r2
 801834e:	2909      	cmp	r1, #9
 8018350:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018354:	d903      	bls.n	801835e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8018356:	4b11      	ldr	r3, [pc, #68]	; (801839c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8018358:	21e5      	movs	r1, #229	; 0xe5
 801835a:	4a11      	ldr	r2, [pc, #68]	; (80183a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801835c:	e7da      	b.n	8018314 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801835e:	3101      	adds	r1, #1
 8018360:	8601      	strh	r1, [r0, #48]	; 0x30
 8018362:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8018364:	b901      	cbnz	r1, 8018368 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8018366:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8018368:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801836a:	3901      	subs	r1, #1
 801836c:	b289      	uxth	r1, r1
 801836e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8018370:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018374:	834c      	strh	r4, [r1, #26]
 8018376:	e7e6      	b.n	8018346 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8018378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801837c:	f7ff bf4a 	b.w	8018214 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018380:	08027304 	.word	0x08027304
 8018384:	080273fa 	.word	0x080273fa
 8018388:	0802730d 	.word	0x0802730d
 801838c:	08027345 	.word	0x08027345
 8018390:	080274a4 	.word	0x080274a4
 8018394:	08027353 	.word	0x08027353
 8018398:	0802777b 	.word	0x0802777b
 801839c:	0802735f 	.word	0x0802735f
 80183a0:	08027372 	.word	0x08027372

080183a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80183a4:	3a01      	subs	r2, #1
 80183a6:	b570      	push	{r4, r5, r6, lr}
 80183a8:	b292      	uxth	r2, r2
 80183aa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80183ae:	42b2      	cmp	r2, r6
 80183b0:	d019      	beq.n	80183e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80183b2:	8b04      	ldrh	r4, [r0, #24]
 80183b4:	f831 5b02 	ldrh.w	r5, [r1], #2
 80183b8:	4294      	cmp	r4, r2
 80183ba:	d805      	bhi.n	80183c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80183bc:	4b19      	ldr	r3, [pc, #100]	; (8018424 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80183be:	4a1a      	ldr	r2, [pc, #104]	; (8018428 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80183c0:	21c4      	movs	r1, #196	; 0xc4
 80183c2:	481a      	ldr	r0, [pc, #104]	; (801842c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80183c4:	f00a ff1e 	bl	8023204 <__assert_func>
 80183c8:	8ac4      	ldrh	r4, [r0, #22]
 80183ca:	4414      	add	r4, r2
 80183cc:	3a01      	subs	r2, #1
 80183ce:	b2a4      	uxth	r4, r4
 80183d0:	b292      	uxth	r2, r2
 80183d2:	2c01      	cmp	r4, #1
 80183d4:	bf88      	it	hi
 80183d6:	3c02      	subhi	r4, #2
 80183d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80183dc:	8a64      	ldrh	r4, [r4, #18]
 80183de:	42ac      	cmp	r4, r5
 80183e0:	d0e5      	beq.n	80183ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80183e2:	2000      	movs	r0, #0
 80183e4:	bd70      	pop	{r4, r5, r6, pc}
 80183e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80183ea:	2400      	movs	r4, #0
 80183ec:	4413      	add	r3, r2
 80183ee:	b2a2      	uxth	r2, r4
 80183f0:	429a      	cmp	r2, r3
 80183f2:	da14      	bge.n	801841e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80183f4:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 80183f6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80183fa:	4296      	cmp	r6, r2
 80183fc:	d802      	bhi.n	8018404 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80183fe:	4b09      	ldr	r3, [pc, #36]	; (8018424 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8018400:	4a0b      	ldr	r2, [pc, #44]	; (8018430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8018402:	e7dd      	b.n	80183c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8018404:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8018406:	3401      	adds	r4, #1
 8018408:	4432      	add	r2, r6
 801840a:	b292      	uxth	r2, r2
 801840c:	2a09      	cmp	r2, #9
 801840e:	bf88      	it	hi
 8018410:	3a0a      	subhi	r2, #10
 8018412:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018416:	8b52      	ldrh	r2, [r2, #26]
 8018418:	42aa      	cmp	r2, r5
 801841a:	d0e8      	beq.n	80183ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801841c:	e7e1      	b.n	80183e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801841e:	2001      	movs	r0, #1
 8018420:	e7e0      	b.n	80183e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8018422:	bf00      	nop
 8018424:	08027345 	.word	0x08027345
 8018428:	080277ff 	.word	0x080277ff
 801842c:	0802730d 	.word	0x0802730d
 8018430:	080274a4 	.word	0x080274a4

08018434 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018438:	4605      	mov	r5, r0
 801843a:	4616      	mov	r6, r2
 801843c:	1c8c      	adds	r4, r1, #2
 801843e:	8809      	ldrh	r1, [r1, #0]
 8018440:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018444:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018448:	42b3      	cmp	r3, r6
 801844a:	d124      	bne.n	8018496 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801844c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018450:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018454:	f001 070f 	and.w	r7, r1, #15
 8018458:	4652      	mov	r2, sl
 801845a:	f8cd 8000 	str.w	r8, [sp]
 801845e:	464b      	mov	r3, r9
 8018460:	4621      	mov	r1, r4
 8018462:	4628      	mov	r0, r5
 8018464:	f7ff ff9e 	bl	80183a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018468:	4683      	mov	fp, r0
 801846a:	b168      	cbz	r0, 8018488 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801846c:	eb0a 0109 	add.w	r1, sl, r9
 8018470:	463a      	mov	r2, r7
 8018472:	4628      	mov	r0, r5
 8018474:	4441      	add	r1, r8
 8018476:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801847a:	4649      	mov	r1, r9
 801847c:	f7ff ff42 	bl	8018304 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018480:	4658      	mov	r0, fp
 8018482:	b003      	add	sp, #12
 8018484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018488:	eb07 010a 	add.w	r1, r7, sl
 801848c:	4449      	add	r1, r9
 801848e:	4441      	add	r1, r8
 8018490:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018494:	e7d2      	b.n	801843c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018496:	f04f 0b00 	mov.w	fp, #0
 801849a:	e7f1      	b.n	8018480 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801849c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801849c:	b570      	push	{r4, r5, r6, lr}
 801849e:	8810      	ldrh	r0, [r2, #0]
 80184a0:	4298      	cmp	r0, r3
 80184a2:	d817      	bhi.n	80184d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80184a4:	1e48      	subs	r0, r1, #1
 80184a6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80184aa:	4298      	cmp	r0, r3
 80184ac:	d312      	bcc.n	80184d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80184ae:	2400      	movs	r4, #0
 80184b0:	428c      	cmp	r4, r1
 80184b2:	d20f      	bcs.n	80184d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80184b4:	1860      	adds	r0, r4, r1
 80184b6:	1040      	asrs	r0, r0, #1
 80184b8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80184bc:	0085      	lsls	r5, r0, #2
 80184be:	42b3      	cmp	r3, r6
 80184c0:	d902      	bls.n	80184c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80184c2:	3001      	adds	r0, #1
 80184c4:	b284      	uxth	r4, r0
 80184c6:	e7f3      	b.n	80184b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80184c8:	d201      	bcs.n	80184ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80184ca:	b281      	uxth	r1, r0
 80184cc:	e7f0      	b.n	80184b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80184ce:	442a      	add	r2, r5
 80184d0:	8850      	ldrh	r0, [r2, #2]
 80184d2:	bd70      	pop	{r4, r5, r6, pc}
 80184d4:	2000      	movs	r0, #0
 80184d6:	e7fc      	b.n	80184d2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080184d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80184d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184dc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80184de:	4604      	mov	r4, r0
 80184e0:	260b      	movs	r6, #11
 80184e2:	886f      	ldrh	r7, [r5, #2]
 80184e4:	087f      	lsrs	r7, r7, #1
 80184e6:	3e01      	subs	r6, #1
 80184e8:	d01b      	beq.n	8018522 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80184ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80184ec:	b92b      	cbnz	r3, 80184fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80184ee:	4b0e      	ldr	r3, [pc, #56]	; (8018528 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80184f0:	21bf      	movs	r1, #191	; 0xbf
 80184f2:	4a0e      	ldr	r2, [pc, #56]	; (801852c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80184f4:	480e      	ldr	r0, [pc, #56]	; (8018530 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80184f6:	f00a fe85 	bl	8023204 <__assert_func>
 80184fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80184fc:	462a      	mov	r2, r5
 80184fe:	4639      	mov	r1, r7
 8018500:	4620      	mov	r0, r4
 8018502:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018506:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801850a:	4643      	mov	r3, r8
 801850c:	f7ff ffc6 	bl	801849c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018510:	b138      	cbz	r0, 8018522 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8018512:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018516:	4642      	mov	r2, r8
 8018518:	4620      	mov	r0, r4
 801851a:	f7ff ff8b 	bl	8018434 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801851e:	2800      	cmp	r0, #0
 8018520:	d1e1      	bne.n	80184e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018526:	bf00      	nop
 8018528:	08027304 	.word	0x08027304
 801852c:	08027576 	.word	0x08027576
 8018530:	0802730d 	.word	0x0802730d

08018534 <_ZN8touchgfx8ceil28_4El>:
 8018534:	f110 030f 	adds.w	r3, r0, #15
 8018538:	d401      	bmi.n	801853e <_ZN8touchgfx8ceil28_4El+0xa>
 801853a:	1118      	asrs	r0, r3, #4
 801853c:	4770      	bx	lr
 801853e:	2210      	movs	r2, #16
 8018540:	f1c0 0001 	rsb	r0, r0, #1
 8018544:	fb93 f3f2 	sdiv	r3, r3, r2
 8018548:	f010 000f 	ands.w	r0, r0, #15
 801854c:	bf18      	it	ne
 801854e:	2001      	movne	r0, #1
 8018550:	1a18      	subs	r0, r3, r0
 8018552:	4770      	bx	lr

08018554 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8018554:	2900      	cmp	r1, #0
 8018556:	b538      	push	{r3, r4, r5, lr}
 8018558:	dc05      	bgt.n	8018566 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801855a:	4b0f      	ldr	r3, [pc, #60]	; (8018598 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801855c:	21f7      	movs	r1, #247	; 0xf7
 801855e:	4a0f      	ldr	r2, [pc, #60]	; (801859c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8018560:	480f      	ldr	r0, [pc, #60]	; (80185a0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8018562:	f00a fe4f 	bl	8023204 <__assert_func>
 8018566:	2800      	cmp	r0, #0
 8018568:	db06      	blt.n	8018578 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801856a:	fb90 f4f1 	sdiv	r4, r0, r1
 801856e:	fb01 0114 	mls	r1, r1, r4, r0
 8018572:	6014      	str	r4, [r2, #0]
 8018574:	6019      	str	r1, [r3, #0]
 8018576:	bd38      	pop	{r3, r4, r5, pc}
 8018578:	4240      	negs	r0, r0
 801857a:	fb90 f4f1 	sdiv	r4, r0, r1
 801857e:	4265      	negs	r5, r4
 8018580:	fb01 0014 	mls	r0, r1, r4, r0
 8018584:	6015      	str	r5, [r2, #0]
 8018586:	6018      	str	r0, [r3, #0]
 8018588:	2800      	cmp	r0, #0
 801858a:	d0f4      	beq.n	8018576 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801858c:	6810      	ldr	r0, [r2, #0]
 801858e:	3801      	subs	r0, #1
 8018590:	6010      	str	r0, [r2, #0]
 8018592:	6818      	ldr	r0, [r3, #0]
 8018594:	1a09      	subs	r1, r1, r0
 8018596:	e7ed      	b.n	8018574 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8018598:	080278d0 	.word	0x080278d0
 801859c:	0802790f 	.word	0x0802790f
 80185a0:	080278e0 	.word	0x080278e0

080185a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80185a4:	b570      	push	{r4, r5, r6, lr}
 80185a6:	694a      	ldr	r2, [r1, #20]
 80185a8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80185aa:	684b      	ldr	r3, [r1, #4]
 80185ac:	1b54      	subs	r4, r2, r5
 80185ae:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80185b0:	f000 8106 	beq.w	80187c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80185b4:	1b9b      	subs	r3, r3, r6
 80185b6:	d003      	beq.n	80185c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80185b8:	4363      	muls	r3, r4
 80185ba:	2210      	movs	r2, #16
 80185bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80185c0:	680c      	ldr	r4, [r1, #0]
 80185c2:	698a      	ldr	r2, [r1, #24]
 80185c4:	1b65      	subs	r5, r4, r5
 80185c6:	f000 80fd 	beq.w	80187c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80185ca:	1b92      	subs	r2, r2, r6
 80185cc:	d003      	beq.n	80185d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80185ce:	436a      	muls	r2, r5
 80185d0:	2410      	movs	r4, #16
 80185d2:	fb92 f2f4 	sdiv	r2, r2, r4
 80185d6:	1a9b      	subs	r3, r3, r2
 80185d8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018800 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80185dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80185e0:	460a      	mov	r2, r1
 80185e2:	ee07 3a90 	vmov	s15, r3
 80185e6:	f100 040c 	add.w	r4, r0, #12
 80185ea:	4603      	mov	r3, r0
 80185ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185f0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80185f4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80185f8:	eeb1 6a43 	vneg.f32	s12, s6
 80185fc:	edd2 7a02 	vldr	s15, [r2, #8]
 8018600:	3214      	adds	r2, #20
 8018602:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018606:	ece3 6a01 	vstmia	r3!, {s13}
 801860a:	429c      	cmp	r4, r3
 801860c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018614:	edc3 7a02 	vstr	s15, [r3, #8]
 8018618:	ed52 7a01 	vldr	s15, [r2, #-4]
 801861c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018620:	edc3 7a05 	vstr	s15, [r3, #20]
 8018624:	d1ea      	bne.n	80185fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018626:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018628:	698b      	ldr	r3, [r1, #24]
 801862a:	edd0 4a02 	vldr	s9, [r0, #8]
 801862e:	1a9b      	subs	r3, r3, r2
 8018630:	edd0 3a00 	vldr	s7, [r0]
 8018634:	edd0 6a01 	vldr	s13, [r0, #4]
 8018638:	ee07 3a90 	vmov	s15, r3
 801863c:	684b      	ldr	r3, [r1, #4]
 801863e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018642:	ed90 5a05 	vldr	s10, [r0, #20]
 8018646:	1a9b      	subs	r3, r3, r2
 8018648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801864c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018650:	ed90 2a03 	vldr	s4, [r0, #12]
 8018654:	ee07 3a10 	vmov	s14, r3
 8018658:	edd0 5a04 	vldr	s11, [r0, #16]
 801865c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018660:	ed90 1a07 	vldr	s2, [r0, #28]
 8018664:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018668:	edd0 2a06 	vldr	s5, [r0, #24]
 801866c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018670:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018674:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018678:	ee32 5a45 	vsub.f32	s10, s4, s10
 801867c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018680:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018684:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018688:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801868a:	694a      	ldr	r2, [r1, #20]
 801868c:	1b13      	subs	r3, r2, r4
 801868e:	ee07 3a10 	vmov	s14, r3
 8018692:	680b      	ldr	r3, [r1, #0]
 8018694:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018698:	1b1b      	subs	r3, r3, r4
 801869a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801869e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80186a2:	ee07 3a10 	vmov	s14, r3
 80186a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80186ae:	eee6 4a87 	vfma.f32	s9, s13, s14
 80186b2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80186b6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80186ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80186bc:	698b      	ldr	r3, [r1, #24]
 80186be:	1a9b      	subs	r3, r3, r2
 80186c0:	ee06 3a90 	vmov	s13, r3
 80186c4:	684b      	ldr	r3, [r1, #4]
 80186c6:	1a9b      	subs	r3, r3, r2
 80186c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80186cc:	ee07 3a10 	vmov	s14, r3
 80186d0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80186d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186d8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80186dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80186e0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80186e4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80186e8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80186ec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80186ee:	694a      	ldr	r2, [r1, #20]
 80186f0:	1b13      	subs	r3, r2, r4
 80186f2:	ee07 3a10 	vmov	s14, r3
 80186f6:	680b      	ldr	r3, [r1, #0]
 80186f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186fc:	1b1b      	subs	r3, r3, r4
 80186fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018702:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018706:	ee07 3a10 	vmov	s14, r3
 801870a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801870e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018712:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018716:	edd0 5a08 	vldr	s11, [r0, #32]
 801871a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801871e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018722:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018726:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801872a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801872c:	698b      	ldr	r3, [r1, #24]
 801872e:	1a9b      	subs	r3, r3, r2
 8018730:	ee07 3a10 	vmov	s14, r3
 8018734:	684b      	ldr	r3, [r1, #4]
 8018736:	1a9b      	subs	r3, r3, r2
 8018738:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801873c:	ee01 3a90 	vmov	s3, r3
 8018740:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018744:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018748:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801874c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018750:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018754:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018758:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801875c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801875e:	694a      	ldr	r2, [r1, #20]
 8018760:	1b13      	subs	r3, r2, r4
 8018762:	ee03 3a10 	vmov	s6, r3
 8018766:	680b      	ldr	r3, [r1, #0]
 8018768:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801876c:	1b1b      	subs	r3, r3, r4
 801876e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018772:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018776:	ee03 3a10 	vmov	s6, r3
 801877a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801877e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018782:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018786:	ee25 6a86 	vmul.f32	s12, s11, s12
 801878a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801878e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018792:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018796:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801879a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879e:	dd13      	ble.n	80187c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80187a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80187a4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80187a8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80187aa:	eee3 7a87 	vfma.f32	s15, s7, s14
 80187ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80187b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b6:	dd15      	ble.n	80187e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80187b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80187bc:	6403      	str	r3, [r0, #64]	; 0x40
 80187be:	bd70      	pop	{r4, r5, r6, pc}
 80187c0:	4623      	mov	r3, r4
 80187c2:	e6fd      	b.n	80185c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80187c4:	462a      	mov	r2, r5
 80187c6:	e706      	b.n	80185d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80187c8:	d502      	bpl.n	80187d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80187ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80187ce:	e7e9      	b.n	80187a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80187d0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80187d4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80187d8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80187dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e0:	dade      	bge.n	80187a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80187e2:	e7f2      	b.n	80187ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80187e4:	d502      	bpl.n	80187ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80187e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80187ea:	e7e7      	b.n	80187bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80187ec:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80187f0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80187f4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80187f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fc:	dadc      	bge.n	80187b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80187fe:	e7f2      	b.n	80187e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018800:	3d800000 	.word	0x3d800000

08018804 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018808:	f04f 0814 	mov.w	r8, #20
 801880c:	4604      	mov	r4, r0
 801880e:	4617      	mov	r7, r2
 8018810:	460d      	mov	r5, r1
 8018812:	fb08 f903 	mul.w	r9, r8, r3
 8018816:	461e      	mov	r6, r3
 8018818:	eb02 0a09 	add.w	sl, r2, r9
 801881c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8018820:	f7ff fe88 	bl	8018534 <_ZN8touchgfx8ceil28_4El>
 8018824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018826:	6160      	str	r0, [r4, #20]
 8018828:	fb08 f803 	mul.w	r8, r8, r3
 801882c:	9001      	str	r0, [sp, #4]
 801882e:	eb07 0b08 	add.w	fp, r7, r8
 8018832:	f8db 0004 	ldr.w	r0, [fp, #4]
 8018836:	f7ff fe7d 	bl	8018534 <_ZN8touchgfx8ceil28_4El>
 801883a:	9a01      	ldr	r2, [sp, #4]
 801883c:	1a80      	subs	r0, r0, r2
 801883e:	61a0      	str	r0, [r4, #24]
 8018840:	2800      	cmp	r0, #0
 8018842:	f000 8088 	beq.w	8018956 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8018846:	f857 3009 	ldr.w	r3, [r7, r9]
 801884a:	f857 c008 	ldr.w	ip, [r7, r8]
 801884e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8018852:	ebac 0c03 	sub.w	ip, ip, r3
 8018856:	f8da 1004 	ldr.w	r1, [sl, #4]
 801885a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801885e:	1a40      	subs	r0, r0, r1
 8018860:	fb0b f202 	mul.w	r2, fp, r2
 8018864:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8018868:	fb0c 2211 	mls	r2, ip, r1, r2
 801886c:	4641      	mov	r1, r8
 801886e:	fb00 2003 	mla	r0, r0, r3, r2
 8018872:	f104 0310 	add.w	r3, r4, #16
 8018876:	4622      	mov	r2, r4
 8018878:	3801      	subs	r0, #1
 801887a:	4440      	add	r0, r8
 801887c:	f7ff fe6a 	bl	8018554 <_ZN8touchgfx11floorDivModEllRlS0_>
 8018880:	f104 0308 	add.w	r3, r4, #8
 8018884:	1d22      	adds	r2, r4, #4
 8018886:	4641      	mov	r1, r8
 8018888:	4658      	mov	r0, fp
 801888a:	f7ff fe63 	bl	8018554 <_ZN8touchgfx11floorDivModEllRlS0_>
 801888e:	f8c4 800c 	str.w	r8, [r4, #12]
 8018892:	6962      	ldr	r2, [r4, #20]
 8018894:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018898:	eddf 6a31 	vldr	s13, [pc, #196]	; 8018960 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801889c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80188a0:	6822      	ldr	r2, [r4, #0]
 80188a2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80188a6:	ee07 3a10 	vmov	s14, r3
 80188aa:	f857 3009 	ldr.w	r3, [r7, r9]
 80188ae:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80188b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188b6:	ee07 3a90 	vmov	s15, r3
 80188ba:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80188be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80188c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80188ca:	edd3 6a00 	vldr	s13, [r3]
 80188ce:	eee6 6a07 	vfma.f32	s13, s12, s14
 80188d2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80188d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80188da:	edc4 6a07 	vstr	s13, [r4, #28]
 80188de:	edd4 6a01 	vldr	s13, [r4, #4]
 80188e2:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 80188e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80188ea:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80188ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80188f2:	ed84 6a08 	vstr	s12, [r4, #32]
 80188f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80188f8:	6262      	str	r2, [r4, #36]	; 0x24
 80188fa:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80188fe:	ed93 6a03 	vldr	s12, [r3, #12]
 8018902:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018906:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801890a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801890e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8018912:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8018916:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801891a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801891e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8018922:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8018924:	6322      	str	r2, [r4, #48]	; 0x30
 8018926:	ed93 6a06 	vldr	s12, [r3, #24]
 801892a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801892e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018932:	eeb0 7a46 	vmov.f32	s14, s12
 8018936:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801893a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801893e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8018942:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8018946:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801894a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801894e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8018952:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8018954:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018956:	4620      	mov	r0, r4
 8018958:	b003      	add	sp, #12
 801895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895e:	bf00      	nop
 8018960:	3d800000 	.word	0x3d800000

08018964 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018964:	4602      	mov	r2, r0
 8018966:	b148      	cbz	r0, 801897c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018968:	2300      	movs	r3, #0
 801896a:	b298      	uxth	r0, r3
 801896c:	3301      	adds	r3, #1
 801896e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018972:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018976:	2900      	cmp	r1, #0
 8018978:	d1f7      	bne.n	801896a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801897a:	4770      	bx	lr
 801897c:	4770      	bx	lr

0801897e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801897e:	b530      	push	{r4, r5, lr}
 8018980:	4604      	mov	r4, r0
 8018982:	b159      	cbz	r1, 801899c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018984:	b148      	cbz	r0, 801899a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018986:	2300      	movs	r3, #0
 8018988:	b298      	uxth	r0, r3
 801898a:	4282      	cmp	r2, r0
 801898c:	d905      	bls.n	801899a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801898e:	5ccd      	ldrb	r5, [r1, r3]
 8018990:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018994:	3301      	adds	r3, #1
 8018996:	2d00      	cmp	r5, #0
 8018998:	d1f6      	bne.n	8018988 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801899a:	bd30      	pop	{r4, r5, pc}
 801899c:	4608      	mov	r0, r1
 801899e:	e7fc      	b.n	801899a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080189a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 80189a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189a2:	468c      	mov	ip, r1
 80189a4:	b08b      	sub	sp, #44	; 0x2c
 80189a6:	2100      	movs	r1, #0
 80189a8:	ae01      	add	r6, sp, #4
 80189aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80189ae:	211f      	movs	r1, #31
 80189b0:	fbb0 f7f3 	udiv	r7, r0, r3
 80189b4:	fb03 0517 	mls	r5, r3, r7, r0
 80189b8:	4638      	mov	r0, r7
 80189ba:	b2ec      	uxtb	r4, r5
 80189bc:	2d09      	cmp	r5, #9
 80189be:	bfd4      	ite	le
 80189c0:	3430      	addle	r4, #48	; 0x30
 80189c2:	3457      	addgt	r4, #87	; 0x57
 80189c4:	b2e4      	uxtb	r4, r4
 80189c6:	558c      	strb	r4, [r1, r6]
 80189c8:	1e4c      	subs	r4, r1, #1
 80189ca:	b92f      	cbnz	r7, 80189d8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 80189cc:	4431      	add	r1, r6
 80189ce:	4660      	mov	r0, ip
 80189d0:	f7ff ffd5 	bl	801897e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80189d4:	b00b      	add	sp, #44	; 0x2c
 80189d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189d8:	4621      	mov	r1, r4
 80189da:	e7e9      	b.n	80189b0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

080189dc <_ZN8touchgfx7Unicode4itoaElPtti>:
 80189dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189de:	4607      	mov	r7, r0
 80189e0:	b08b      	sub	sp, #44	; 0x2c
 80189e2:	4608      	mov	r0, r1
 80189e4:	b341      	cbz	r1, 8018a38 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80189e6:	1e99      	subs	r1, r3, #2
 80189e8:	2922      	cmp	r1, #34	; 0x22
 80189ea:	d825      	bhi.n	8018a38 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80189ec:	2100      	movs	r1, #0
 80189ee:	463c      	mov	r4, r7
 80189f0:	261f      	movs	r6, #31
 80189f2:	f10d 0c04 	add.w	ip, sp, #4
 80189f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80189fa:	1e71      	subs	r1, r6, #1
 80189fc:	fb94 fef3 	sdiv	lr, r4, r3
 8018a00:	fb03 441e 	mls	r4, r3, lr, r4
 8018a04:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018a08:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018a0c:	b2ec      	uxtb	r4, r5
 8018a0e:	2d09      	cmp	r5, #9
 8018a10:	bfd4      	ite	le
 8018a12:	3430      	addle	r4, #48	; 0x30
 8018a14:	3457      	addgt	r4, #87	; 0x57
 8018a16:	b2e4      	uxtb	r4, r4
 8018a18:	f80c 4006 	strb.w	r4, [ip, r6]
 8018a1c:	4674      	mov	r4, lr
 8018a1e:	b96c      	cbnz	r4, 8018a3c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018a20:	2f00      	cmp	r7, #0
 8018a22:	da05      	bge.n	8018a30 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018a24:	ab0a      	add	r3, sp, #40	; 0x28
 8018a26:	4419      	add	r1, r3
 8018a28:	232d      	movs	r3, #45	; 0x2d
 8018a2a:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018a2e:	1eb1      	subs	r1, r6, #2
 8018a30:	3101      	adds	r1, #1
 8018a32:	4461      	add	r1, ip
 8018a34:	f7ff ffa3 	bl	801897e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018a38:	b00b      	add	sp, #44	; 0x2c
 8018a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a3c:	460e      	mov	r6, r1
 8018a3e:	e7dc      	b.n	80189fa <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018a40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a44:	b085      	sub	sp, #20
 8018a46:	4691      	mov	r9, r2
 8018a48:	6802      	ldr	r2, [r0, #0]
 8018a4a:	4688      	mov	r8, r1
 8018a4c:	461c      	mov	r4, r3
 8018a4e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018a52:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018a56:	4683      	mov	fp, r0
 8018a58:	4610      	mov	r0, r2
 8018a5a:	9103      	str	r1, [sp, #12]
 8018a5c:	9302      	str	r3, [sp, #8]
 8018a5e:	9201      	str	r2, [sp, #4]
 8018a60:	f7ff ff80 	bl	8018964 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018a64:	f1b8 0f00 	cmp.w	r8, #0
 8018a68:	bf0c      	ite	eq
 8018a6a:	4684      	moveq	ip, r0
 8018a6c:	f100 0c01 	addne.w	ip, r0, #1
 8018a70:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018a74:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018a78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018a7a:	fa1f fc8c 	uxth.w	ip, ip
 8018a7e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018a80:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018a84:	9903      	ldr	r1, [sp, #12]
 8018a86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018a8a:	d041      	beq.n	8018b10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018a8c:	d834      	bhi.n	8018af8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018a8e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018a92:	d059      	beq.n	8018b48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018a94:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018a98:	d03a      	beq.n	8018b10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018a9a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018a9e:	d034      	beq.n	8018b0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018aa0:	2400      	movs	r4, #0
 8018aa2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018aa6:	3a01      	subs	r2, #1
 8018aa8:	b169      	cbz	r1, 8018ac6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018aaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018aac:	458c      	cmp	ip, r1
 8018aae:	da09      	bge.n	8018ac4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018ab0:	eba1 010c 	sub.w	r1, r1, ip
 8018ab4:	b289      	uxth	r1, r1
 8018ab6:	b933      	cbnz	r3, 8018ac6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018ab8:	2e00      	cmp	r6, #0
 8018aba:	d051      	beq.n	8018b60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018abc:	2800      	cmp	r0, #0
 8018abe:	d04f      	beq.n	8018b60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018ac0:	440c      	add	r4, r1
 8018ac2:	b2a4      	uxth	r4, r4
 8018ac4:	2100      	movs	r1, #0
 8018ac6:	682b      	ldr	r3, [r5, #0]
 8018ac8:	4293      	cmp	r3, r2
 8018aca:	da07      	bge.n	8018adc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018acc:	f1b8 0f00 	cmp.w	r8, #0
 8018ad0:	d004      	beq.n	8018adc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018ad2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018ad6:	682b      	ldr	r3, [r5, #0]
 8018ad8:	3301      	adds	r3, #1
 8018ada:	602b      	str	r3, [r5, #0]
 8018adc:	2730      	movs	r7, #48	; 0x30
 8018ade:	2c00      	cmp	r4, #0
 8018ae0:	d04e      	beq.n	8018b80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018ae2:	682e      	ldr	r6, [r5, #0]
 8018ae4:	3c01      	subs	r4, #1
 8018ae6:	42b2      	cmp	r2, r6
 8018ae8:	b2a4      	uxth	r4, r4
 8018aea:	dd49      	ble.n	8018b80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018aec:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018af0:	682b      	ldr	r3, [r5, #0]
 8018af2:	3301      	adds	r3, #1
 8018af4:	602b      	str	r3, [r5, #0]
 8018af6:	e7f2      	b.n	8018ade <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018af8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8018afc:	d01d      	beq.n	8018b3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018afe:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8018b02:	d002      	beq.n	8018b0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018b04:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8018b08:	e7c9      	b.n	8018a9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018b0a:	4684      	mov	ip, r0
 8018b0c:	f04f 0800 	mov.w	r8, #0
 8018b10:	2c00      	cmp	r4, #0
 8018b12:	d0c6      	beq.n	8018aa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018b14:	b947      	cbnz	r7, 8018b28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018b16:	2801      	cmp	r0, #1
 8018b18:	d106      	bne.n	8018b28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018b1a:	8814      	ldrh	r4, [r2, #0]
 8018b1c:	2c30      	cmp	r4, #48	; 0x30
 8018b1e:	bf02      	ittt	eq
 8018b20:	3202      	addeq	r2, #2
 8018b22:	4638      	moveq	r0, r7
 8018b24:	f8cb 2000 	streq.w	r2, [fp]
 8018b28:	45bc      	cmp	ip, r7
 8018b2a:	da14      	bge.n	8018b56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018b2c:	b2bf      	uxth	r7, r7
 8018b2e:	eba7 040c 	sub.w	r4, r7, ip
 8018b32:	46bc      	mov	ip, r7
 8018b34:	b2a4      	uxth	r4, r4
 8018b36:	2600      	movs	r6, #0
 8018b38:	e7b3      	b.n	8018aa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018b3a:	4684      	mov	ip, r0
 8018b3c:	b16c      	cbz	r4, 8018b5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018b3e:	42b8      	cmp	r0, r7
 8018b40:	dd00      	ble.n	8018b44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018b42:	b2b8      	uxth	r0, r7
 8018b44:	2400      	movs	r4, #0
 8018b46:	e003      	b.n	8018b50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018b48:	f04f 0c01 	mov.w	ip, #1
 8018b4c:	2400      	movs	r4, #0
 8018b4e:	4660      	mov	r0, ip
 8018b50:	4626      	mov	r6, r4
 8018b52:	46a0      	mov	r8, r4
 8018b54:	e7a5      	b.n	8018aa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018b56:	2400      	movs	r4, #0
 8018b58:	e7ed      	b.n	8018b36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018b5a:	4626      	mov	r6, r4
 8018b5c:	46a0      	mov	r8, r4
 8018b5e:	e7a0      	b.n	8018aa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018b60:	2900      	cmp	r1, #0
 8018b62:	d0b0      	beq.n	8018ac6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018b64:	2720      	movs	r7, #32
 8018b66:	682e      	ldr	r6, [r5, #0]
 8018b68:	2900      	cmp	r1, #0
 8018b6a:	d0ac      	beq.n	8018ac6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018b6c:	3901      	subs	r1, #1
 8018b6e:	4296      	cmp	r6, r2
 8018b70:	b289      	uxth	r1, r1
 8018b72:	daa7      	bge.n	8018ac4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018b74:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018b78:	682b      	ldr	r3, [r5, #0]
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	602b      	str	r3, [r5, #0]
 8018b7e:	e7f2      	b.n	8018b66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018b80:	b188      	cbz	r0, 8018ba6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018b82:	682b      	ldr	r3, [r5, #0]
 8018b84:	3801      	subs	r0, #1
 8018b86:	429a      	cmp	r2, r3
 8018b88:	b280      	uxth	r0, r0
 8018b8a:	dd0c      	ble.n	8018ba6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018b8c:	f8db 3000 	ldr.w	r3, [fp]
 8018b90:	1c9c      	adds	r4, r3, #2
 8018b92:	f8cb 4000 	str.w	r4, [fp]
 8018b96:	881c      	ldrh	r4, [r3, #0]
 8018b98:	682b      	ldr	r3, [r5, #0]
 8018b9a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018b9e:	682b      	ldr	r3, [r5, #0]
 8018ba0:	3301      	adds	r3, #1
 8018ba2:	602b      	str	r3, [r5, #0]
 8018ba4:	e7ec      	b.n	8018b80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018ba6:	2620      	movs	r6, #32
 8018ba8:	b151      	cbz	r1, 8018bc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018baa:	6828      	ldr	r0, [r5, #0]
 8018bac:	3901      	subs	r1, #1
 8018bae:	4282      	cmp	r2, r0
 8018bb0:	b289      	uxth	r1, r1
 8018bb2:	dd05      	ble.n	8018bc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018bb4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018bb8:	682b      	ldr	r3, [r5, #0]
 8018bba:	3301      	adds	r3, #1
 8018bbc:	602b      	str	r3, [r5, #0]
 8018bbe:	e7f3      	b.n	8018ba8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018bc0:	b005      	add	sp, #20
 8018bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bca:	2400      	movs	r4, #0
 8018bcc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018bd0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018bd4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018bd8:	8014      	strh	r4, [r2, #0]
 8018bda:	701c      	strb	r4, [r3, #0]
 8018bdc:	f888 4000 	strb.w	r4, [r8]
 8018be0:	f88c 4000 	strb.w	r4, [ip]
 8018be4:	f88e 4000 	strb.w	r4, [lr]
 8018be8:	703c      	strb	r4, [r7, #0]
 8018bea:	6804      	ldr	r4, [r0, #0]
 8018bec:	b1a4      	cbz	r4, 8018c18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018bee:	8824      	ldrh	r4, [r4, #0]
 8018bf0:	f04f 0901 	mov.w	r9, #1
 8018bf4:	b314      	cbz	r4, 8018c3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018bf6:	2c2b      	cmp	r4, #43	; 0x2b
 8018bf8:	d001      	beq.n	8018bfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018bfa:	2c20      	cmp	r4, #32
 8018bfc:	d110      	bne.n	8018c20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018bfe:	8014      	strh	r4, [r2, #0]
 8018c00:	6804      	ldr	r4, [r0, #0]
 8018c02:	b10c      	cbz	r4, 8018c08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018c04:	3402      	adds	r4, #2
 8018c06:	6004      	str	r4, [r0, #0]
 8018c08:	680c      	ldr	r4, [r1, #0]
 8018c0a:	b10c      	cbz	r4, 8018c10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018c0c:	3401      	adds	r4, #1
 8018c0e:	600c      	str	r4, [r1, #0]
 8018c10:	6804      	ldr	r4, [r0, #0]
 8018c12:	b17c      	cbz	r4, 8018c34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018c14:	8824      	ldrh	r4, [r4, #0]
 8018c16:	e7ed      	b.n	8018bf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018c18:	680c      	ldr	r4, [r1, #0]
 8018c1a:	b17c      	cbz	r4, 8018c3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018c1c:	7824      	ldrb	r4, [r4, #0]
 8018c1e:	e7e7      	b.n	8018bf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018c20:	2c2d      	cmp	r4, #45	; 0x2d
 8018c22:	d102      	bne.n	8018c2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018c24:	f883 9000 	strb.w	r9, [r3]
 8018c28:	e7ea      	b.n	8018c00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018c2a:	2c23      	cmp	r4, #35	; 0x23
 8018c2c:	d107      	bne.n	8018c3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018c2e:	f888 9000 	strb.w	r9, [r8]
 8018c32:	e7e5      	b.n	8018c00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018c34:	680c      	ldr	r4, [r1, #0]
 8018c36:	b10c      	cbz	r4, 8018c3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018c38:	7824      	ldrb	r4, [r4, #0]
 8018c3a:	e7db      	b.n	8018bf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018c3c:	2400      	movs	r4, #0
 8018c3e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018c42:	2b09      	cmp	r3, #9
 8018c44:	d901      	bls.n	8018c4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018c46:	2c2a      	cmp	r4, #42	; 0x2a
 8018c48:	d122      	bne.n	8018c90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018c4a:	2301      	movs	r3, #1
 8018c4c:	2c30      	cmp	r4, #48	; 0x30
 8018c4e:	f88e 3000 	strb.w	r3, [lr]
 8018c52:	d10d      	bne.n	8018c70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018c54:	f88c 3000 	strb.w	r3, [ip]
 8018c58:	6803      	ldr	r3, [r0, #0]
 8018c5a:	b10b      	cbz	r3, 8018c60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018c5c:	3302      	adds	r3, #2
 8018c5e:	6003      	str	r3, [r0, #0]
 8018c60:	680b      	ldr	r3, [r1, #0]
 8018c62:	b10b      	cbz	r3, 8018c68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018c64:	3301      	adds	r3, #1
 8018c66:	600b      	str	r3, [r1, #0]
 8018c68:	6803      	ldr	r3, [r0, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d02f      	beq.n	8018cce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018c6e:	881c      	ldrh	r4, [r3, #0]
 8018c70:	2c2a      	cmp	r4, #42	; 0x2a
 8018c72:	d135      	bne.n	8018ce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018c74:	f04f 33ff 	mov.w	r3, #4294967295
 8018c78:	6033      	str	r3, [r6, #0]
 8018c7a:	6803      	ldr	r3, [r0, #0]
 8018c7c:	b10b      	cbz	r3, 8018c82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018c7e:	3302      	adds	r3, #2
 8018c80:	6003      	str	r3, [r0, #0]
 8018c82:	680b      	ldr	r3, [r1, #0]
 8018c84:	b10b      	cbz	r3, 8018c8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018c86:	3301      	adds	r3, #1
 8018c88:	600b      	str	r3, [r1, #0]
 8018c8a:	6803      	ldr	r3, [r0, #0]
 8018c8c:	b31b      	cbz	r3, 8018cd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018c8e:	881c      	ldrh	r4, [r3, #0]
 8018c90:	2c2e      	cmp	r4, #46	; 0x2e
 8018c92:	d11a      	bne.n	8018cca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018c94:	2301      	movs	r3, #1
 8018c96:	703b      	strb	r3, [r7, #0]
 8018c98:	6803      	ldr	r3, [r0, #0]
 8018c9a:	b10b      	cbz	r3, 8018ca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018c9c:	3302      	adds	r3, #2
 8018c9e:	6003      	str	r3, [r0, #0]
 8018ca0:	680b      	ldr	r3, [r1, #0]
 8018ca2:	b10b      	cbz	r3, 8018ca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	600b      	str	r3, [r1, #0]
 8018ca8:	6803      	ldr	r3, [r0, #0]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d036      	beq.n	8018d1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8018cb2:	d137      	bne.n	8018d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8018cb8:	602b      	str	r3, [r5, #0]
 8018cba:	6803      	ldr	r3, [r0, #0]
 8018cbc:	b10b      	cbz	r3, 8018cc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018cbe:	3302      	adds	r3, #2
 8018cc0:	6003      	str	r3, [r0, #0]
 8018cc2:	680b      	ldr	r3, [r1, #0]
 8018cc4:	b10b      	cbz	r3, 8018cca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	600b      	str	r3, [r1, #0]
 8018cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cce:	680c      	ldr	r4, [r1, #0]
 8018cd0:	b134      	cbz	r4, 8018ce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018cd2:	7824      	ldrb	r4, [r4, #0]
 8018cd4:	e7cc      	b.n	8018c70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018cd6:	680b      	ldr	r3, [r1, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d0f6      	beq.n	8018cca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018cdc:	781c      	ldrb	r4, [r3, #0]
 8018cde:	e7d7      	b.n	8018c90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	220a      	movs	r2, #10
 8018ce4:	6033      	str	r3, [r6, #0]
 8018ce6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018cea:	fa1f f38c 	uxth.w	r3, ip
 8018cee:	2b09      	cmp	r3, #9
 8018cf0:	d8ce      	bhi.n	8018c90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018cf2:	6833      	ldr	r3, [r6, #0]
 8018cf4:	fb02 c303 	mla	r3, r2, r3, ip
 8018cf8:	6033      	str	r3, [r6, #0]
 8018cfa:	6803      	ldr	r3, [r0, #0]
 8018cfc:	b10b      	cbz	r3, 8018d02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8018cfe:	3302      	adds	r3, #2
 8018d00:	6003      	str	r3, [r0, #0]
 8018d02:	680b      	ldr	r3, [r1, #0]
 8018d04:	b10b      	cbz	r3, 8018d0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018d06:	3301      	adds	r3, #1
 8018d08:	600b      	str	r3, [r1, #0]
 8018d0a:	6803      	ldr	r3, [r0, #0]
 8018d0c:	b10b      	cbz	r3, 8018d12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8018d0e:	881c      	ldrh	r4, [r3, #0]
 8018d10:	e7e9      	b.n	8018ce6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018d12:	680c      	ldr	r4, [r1, #0]
 8018d14:	2c00      	cmp	r4, #0
 8018d16:	d0e6      	beq.n	8018ce6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018d18:	7824      	ldrb	r4, [r4, #0]
 8018d1a:	e7e4      	b.n	8018ce6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018d1c:	680b      	ldr	r3, [r1, #0]
 8018d1e:	b10b      	cbz	r3, 8018d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	e7c5      	b.n	8018cb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018d24:	2200      	movs	r2, #0
 8018d26:	240a      	movs	r4, #10
 8018d28:	602a      	str	r2, [r5, #0]
 8018d2a:	3b30      	subs	r3, #48	; 0x30
 8018d2c:	682a      	ldr	r2, [r5, #0]
 8018d2e:	b29e      	uxth	r6, r3
 8018d30:	2e09      	cmp	r6, #9
 8018d32:	d813      	bhi.n	8018d5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8018d34:	fb04 3302 	mla	r3, r4, r2, r3
 8018d38:	602b      	str	r3, [r5, #0]
 8018d3a:	6803      	ldr	r3, [r0, #0]
 8018d3c:	b10b      	cbz	r3, 8018d42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8018d3e:	3302      	adds	r3, #2
 8018d40:	6003      	str	r3, [r0, #0]
 8018d42:	680b      	ldr	r3, [r1, #0]
 8018d44:	b10b      	cbz	r3, 8018d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8018d46:	3301      	adds	r3, #1
 8018d48:	600b      	str	r3, [r1, #0]
 8018d4a:	6803      	ldr	r3, [r0, #0]
 8018d4c:	b10b      	cbz	r3, 8018d52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8018d4e:	881b      	ldrh	r3, [r3, #0]
 8018d50:	e7eb      	b.n	8018d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018d52:	680b      	ldr	r3, [r1, #0]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d0e8      	beq.n	8018d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018d58:	781b      	ldrb	r3, [r3, #0]
 8018d5a:	e7e6      	b.n	8018d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018d5c:	2a06      	cmp	r2, #6
 8018d5e:	bfa8      	it	ge
 8018d60:	2206      	movge	r2, #6
 8018d62:	602a      	str	r2, [r5, #0]
 8018d64:	e7b1      	b.n	8018cca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018d66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d6a:	b0a3      	sub	sp, #140	; 0x8c
 8018d6c:	2600      	movs	r6, #0
 8018d6e:	4607      	mov	r7, r0
 8018d70:	4688      	mov	r8, r1
 8018d72:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018d76:	4631      	mov	r1, r6
 8018d78:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018d7a:	4648      	mov	r0, r9
 8018d7c:	960d      	str	r6, [sp, #52]	; 0x34
 8018d7e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018d82:	2242      	movs	r2, #66	; 0x42
 8018d84:	f00a faca 	bl	802331c <memset>
 8018d88:	b15f      	cbz	r7, 8018da2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8018d8a:	f108 3aff 	add.w	sl, r8, #4294967295
 8018d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d92:	b152      	cbz	r2, 8018daa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018d94:	8812      	ldrh	r2, [r2, #0]
 8018d96:	b10a      	cbz	r2, 8018d9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018d98:	459a      	cmp	sl, r3
 8018d9a:	dc2e      	bgt.n	8018dfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018da2:	4638      	mov	r0, r7
 8018da4:	b023      	add	sp, #140	; 0x8c
 8018da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018daa:	9a08      	ldr	r2, [sp, #32]
 8018dac:	2a00      	cmp	r2, #0
 8018dae:	d0f5      	beq.n	8018d9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018db0:	7812      	ldrb	r2, [r2, #0]
 8018db2:	e7f0      	b.n	8018d96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018db4:	2d00      	cmp	r5, #0
 8018db6:	d0ea      	beq.n	8018d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018db8:	782a      	ldrb	r2, [r5, #0]
 8018dba:	b142      	cbz	r2, 8018dce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8018dbc:	2a25      	cmp	r2, #37	; 0x25
 8018dbe:	d001      	beq.n	8018dc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018dc0:	459a      	cmp	sl, r3
 8018dc2:	dc08      	bgt.n	8018dd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018dc4:	f1bb 0f00 	cmp.w	fp, #0
 8018dc8:	d121      	bne.n	8018e0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8018dca:	2d00      	cmp	r5, #0
 8018dcc:	d0df      	beq.n	8018d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018dce:	782a      	ldrb	r2, [r5, #0]
 8018dd0:	f04f 0b00 	mov.w	fp, #0
 8018dd4:	e01d      	b.n	8018e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018dd6:	f1bb 0f00 	cmp.w	fp, #0
 8018dda:	d077      	beq.n	8018ecc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8018ddc:	f8bb 2000 	ldrh.w	r2, [fp]
 8018de0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018de4:	f1bb 0f00 	cmp.w	fp, #0
 8018de8:	d002      	beq.n	8018df0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8018dea:	f10b 0202 	add.w	r2, fp, #2
 8018dee:	9209      	str	r2, [sp, #36]	; 0x24
 8018df0:	b10d      	cbz	r5, 8018df6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8018df2:	3501      	adds	r5, #1
 8018df4:	9508      	str	r5, [sp, #32]
 8018df6:	3301      	adds	r3, #1
 8018df8:	930d      	str	r3, [sp, #52]	; 0x34
 8018dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018dfc:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8018e00:	f1bb 0f00 	cmp.w	fp, #0
 8018e04:	d0d6      	beq.n	8018db4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8018e06:	f8bb 2000 	ldrh.w	r2, [fp]
 8018e0a:	2a00      	cmp	r2, #0
 8018e0c:	d1d6      	bne.n	8018dbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8018e0e:	f8bb 2000 	ldrh.w	r2, [fp]
 8018e12:	2a00      	cmp	r2, #0
 8018e14:	d0bb      	beq.n	8018d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018e16:	459a      	cmp	sl, r3
 8018e18:	ddb9      	ble.n	8018d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018e1a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8018e1e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018e22:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8018e26:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8018e2a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8018e2e:	960e      	str	r6, [sp, #56]	; 0x38
 8018e30:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8018e34:	960f      	str	r6, [sp, #60]	; 0x3c
 8018e36:	f1bb 0f00 	cmp.w	fp, #0
 8018e3a:	d002      	beq.n	8018e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8018e3c:	f10b 0302 	add.w	r3, fp, #2
 8018e40:	9309      	str	r3, [sp, #36]	; 0x24
 8018e42:	b10d      	cbz	r5, 8018e48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8018e44:	1c6b      	adds	r3, r5, #1
 8018e46:	9308      	str	r3, [sp, #32]
 8018e48:	ab0f      	add	r3, sp, #60	; 0x3c
 8018e4a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018e4e:	a908      	add	r1, sp, #32
 8018e50:	a809      	add	r0, sp, #36	; 0x24
 8018e52:	9305      	str	r3, [sp, #20]
 8018e54:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8018e58:	9304      	str	r3, [sp, #16]
 8018e5a:	ab0e      	add	r3, sp, #56	; 0x38
 8018e5c:	9303      	str	r3, [sp, #12]
 8018e5e:	ab0c      	add	r3, sp, #48	; 0x30
 8018e60:	9302      	str	r3, [sp, #8]
 8018e62:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018e66:	9301      	str	r3, [sp, #4]
 8018e68:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018e6c:	9300      	str	r3, [sp, #0]
 8018e6e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8018e72:	f7ff fea8 	bl	8018bc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	bfbf      	itttt	lt
 8018e7c:	6823      	ldrlt	r3, [r4, #0]
 8018e7e:	3404      	addlt	r4, #4
 8018e80:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018e84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	bfbe      	ittt	lt
 8018e8c:	6823      	ldrlt	r3, [r4, #0]
 8018e8e:	3404      	addlt	r4, #4
 8018e90:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018e94:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018e98:	bfb8      	it	lt
 8018e9a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8018e9c:	b1d9      	cbz	r1, 8018ed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8018e9e:	880b      	ldrh	r3, [r1, #0]
 8018ea0:	2b69      	cmp	r3, #105	; 0x69
 8018ea2:	d01f      	beq.n	8018ee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018ea4:	d82f      	bhi.n	8018f06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8018ea6:	2b58      	cmp	r3, #88	; 0x58
 8018ea8:	d01c      	beq.n	8018ee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018eaa:	d818      	bhi.n	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8018eac:	2b25      	cmp	r3, #37	; 0x25
 8018eae:	d034      	beq.n	8018f1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8018eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018eb2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8018eb6:	f1bb 0f00 	cmp.w	fp, #0
 8018eba:	f000 80b7 	beq.w	801902c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8018ebe:	f8bb 5000 	ldrh.w	r5, [fp]
 8018ec2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8018ec6:	3301      	adds	r3, #1
 8018ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8018eca:	e029      	b.n	8018f20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8018ecc:	b10d      	cbz	r5, 8018ed2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8018ece:	782a      	ldrb	r2, [r5, #0]
 8018ed0:	e786      	b.n	8018de0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018ed2:	462a      	mov	r2, r5
 8018ed4:	e784      	b.n	8018de0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018ed6:	2a00      	cmp	r2, #0
 8018ed8:	d0ea      	beq.n	8018eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8018eda:	7813      	ldrb	r3, [r2, #0]
 8018edc:	e7e0      	b.n	8018ea0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8018ede:	3b63      	subs	r3, #99	; 0x63
 8018ee0:	2b01      	cmp	r3, #1
 8018ee2:	d8e5      	bhi.n	8018eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8018ee4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8018ee8:	b329      	cbz	r1, 8018f36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8018eea:	880b      	ldrh	r3, [r1, #0]
 8018eec:	2b69      	cmp	r3, #105	; 0x69
 8018eee:	d063      	beq.n	8018fb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8018ef0:	d825      	bhi.n	8018f3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8018ef2:	2b63      	cmp	r3, #99	; 0x63
 8018ef4:	d038      	beq.n	8018f68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8018ef6:	2b64      	cmp	r3, #100	; 0x64
 8018ef8:	d05e      	beq.n	8018fb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8018efa:	2b58      	cmp	r3, #88	; 0x58
 8018efc:	d07a      	beq.n	8018ff4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8018efe:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018f02:	4625      	mov	r5, r4
 8018f04:	e036      	b.n	8018f74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018f06:	2b73      	cmp	r3, #115	; 0x73
 8018f08:	d0ec      	beq.n	8018ee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018f0a:	d802      	bhi.n	8018f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8018f0c:	2b6f      	cmp	r3, #111	; 0x6f
 8018f0e:	d1cf      	bne.n	8018eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8018f10:	e7e8      	b.n	8018ee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018f12:	2b75      	cmp	r3, #117	; 0x75
 8018f14:	d0e6      	beq.n	8018ee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018f16:	2b78      	cmp	r3, #120	; 0x78
 8018f18:	e7f9      	b.n	8018f0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8018f1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f1c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8018f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f22:	b10b      	cbz	r3, 8018f28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8018f24:	3302      	adds	r3, #2
 8018f26:	9309      	str	r3, [sp, #36]	; 0x24
 8018f28:	9b08      	ldr	r3, [sp, #32]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	f43f af2f 	beq.w	8018d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f30:	3301      	adds	r3, #1
 8018f32:	9308      	str	r3, [sp, #32]
 8018f34:	e72b      	b.n	8018d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f36:	2a00      	cmp	r2, #0
 8018f38:	d0e1      	beq.n	8018efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018f3a:	7813      	ldrb	r3, [r2, #0]
 8018f3c:	e7d6      	b.n	8018eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8018f3e:	2b73      	cmp	r3, #115	; 0x73
 8018f40:	d036      	beq.n	8018fb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8018f42:	d807      	bhi.n	8018f54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8018f44:	2b6f      	cmp	r3, #111	; 0x6f
 8018f46:	d1da      	bne.n	8018efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f4a:	1d25      	adds	r5, r4, #4
 8018f4c:	2308      	movs	r3, #8
 8018f4e:	eba8 0202 	sub.w	r2, r8, r2
 8018f52:	e049      	b.n	8018fe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8018f54:	2b75      	cmp	r3, #117	; 0x75
 8018f56:	d042      	beq.n	8018fde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8018f58:	2b78      	cmp	r3, #120	; 0x78
 8018f5a:	d1d0      	bne.n	8018efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f5e:	1d25      	adds	r5, r4, #4
 8018f60:	2310      	movs	r3, #16
 8018f62:	eba8 0202 	sub.w	r2, r8, r2
 8018f66:	e03f      	b.n	8018fe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8018f68:	7823      	ldrb	r3, [r4, #0]
 8018f6a:	1d25      	adds	r5, r4, #4
 8018f6c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8018f70:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f76:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d051      	beq.n	8019022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8018f7e:	881a      	ldrh	r2, [r3, #0]
 8018f80:	a80d      	add	r0, sp, #52	; 0x34
 8018f82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8018f86:	462c      	mov	r4, r5
 8018f88:	9005      	str	r0, [sp, #20]
 8018f8a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8018f8e:	9004      	str	r0, [sp, #16]
 8018f90:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018f92:	9003      	str	r0, [sp, #12]
 8018f94:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8018f98:	9002      	str	r0, [sp, #8]
 8018f9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018f9c:	9001      	str	r0, [sp, #4]
 8018f9e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8018fa2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8018fa6:	9000      	str	r0, [sp, #0]
 8018fa8:	a810      	add	r0, sp, #64	; 0x40
 8018faa:	f7ff fd49 	bl	8018a40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8018fae:	e7b7      	b.n	8018f20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8018fb0:	1d25      	adds	r5, r4, #4
 8018fb2:	6823      	ldr	r3, [r4, #0]
 8018fb4:	9310      	str	r3, [sp, #64]	; 0x40
 8018fb6:	e7dd      	b.n	8018f74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018fb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fba:	230a      	movs	r3, #10
 8018fbc:	4649      	mov	r1, r9
 8018fbe:	6820      	ldr	r0, [r4, #0]
 8018fc0:	eba8 0202 	sub.w	r2, r8, r2
 8018fc4:	1d25      	adds	r5, r4, #4
 8018fc6:	b292      	uxth	r2, r2
 8018fc8:	f7ff fd08 	bl	80189dc <_ZN8touchgfx7Unicode4itoaElPtti>
 8018fcc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018fd0:	2b2d      	cmp	r3, #45	; 0x2d
 8018fd2:	d1cf      	bne.n	8018f74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018fd4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fda:	3302      	adds	r3, #2
 8018fdc:	e7ea      	b.n	8018fb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8018fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fe0:	1d25      	adds	r5, r4, #4
 8018fe2:	230a      	movs	r3, #10
 8018fe4:	eba8 0202 	sub.w	r2, r8, r2
 8018fe8:	b292      	uxth	r2, r2
 8018fea:	4649      	mov	r1, r9
 8018fec:	6820      	ldr	r0, [r4, #0]
 8018fee:	f7ff fcd7 	bl	80189a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8018ff2:	e7bf      	b.n	8018f74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ff6:	2310      	movs	r3, #16
 8018ff8:	4649      	mov	r1, r9
 8018ffa:	6820      	ldr	r0, [r4, #0]
 8018ffc:	eba8 0202 	sub.w	r2, r8, r2
 8019000:	1d25      	adds	r5, r4, #4
 8019002:	b292      	uxth	r2, r2
 8019004:	f7ff fccc 	bl	80189a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019008:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801900c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019010:	2b00      	cmp	r3, #0
 8019012:	d0af      	beq.n	8018f74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019014:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019018:	2919      	cmp	r1, #25
 801901a:	d8f7      	bhi.n	801900c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801901c:	3b20      	subs	r3, #32
 801901e:	8013      	strh	r3, [r2, #0]
 8019020:	e7f4      	b.n	801900c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019022:	9a08      	ldr	r2, [sp, #32]
 8019024:	2a00      	cmp	r2, #0
 8019026:	d0ab      	beq.n	8018f80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019028:	7812      	ldrb	r2, [r2, #0]
 801902a:	e7a9      	b.n	8018f80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801902c:	2d00      	cmp	r5, #0
 801902e:	f43f af48 	beq.w	8018ec2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8019032:	782d      	ldrb	r5, [r5, #0]
 8019034:	e745      	b.n	8018ec2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08019036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8019036:	b507      	push	{r0, r1, r2, lr}
 8019038:	9300      	str	r3, [sp, #0]
 801903a:	4613      	mov	r3, r2
 801903c:	2200      	movs	r2, #0
 801903e:	f7ff fe92 	bl	8018d66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8019042:	b003      	add	sp, #12
 8019044:	f85d fb04 	ldr.w	pc, [sp], #4

08019048 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019048:	b40c      	push	{r2, r3}
 801904a:	b507      	push	{r0, r1, r2, lr}
 801904c:	ab04      	add	r3, sp, #16
 801904e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019052:	9301      	str	r3, [sp, #4]
 8019054:	f7ff ffef 	bl	8019036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019058:	b003      	add	sp, #12
 801905a:	f85d eb04 	ldr.w	lr, [sp], #4
 801905e:	b002      	add	sp, #8
 8019060:	4770      	bx	lr
	...

08019064 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019064:	4b01      	ldr	r3, [pc, #4]	; (801906c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019066:	6018      	str	r0, [r3, #0]
 8019068:	4770      	bx	lr
 801906a:	bf00      	nop
 801906c:	200565bc 	.word	0x200565bc

08019070 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019070:	4b06      	ldr	r3, [pc, #24]	; (801908c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019072:	881a      	ldrh	r2, [r3, #0]
 8019074:	4282      	cmp	r2, r0
 8019076:	d807      	bhi.n	8019088 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019078:	4b05      	ldr	r3, [pc, #20]	; (8019090 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801907a:	881b      	ldrh	r3, [r3, #0]
 801907c:	4413      	add	r3, r2
 801907e:	4298      	cmp	r0, r3
 8019080:	bfac      	ite	ge
 8019082:	2000      	movge	r0, #0
 8019084:	2001      	movlt	r0, #1
 8019086:	4770      	bx	lr
 8019088:	2000      	movs	r0, #0
 801908a:	4770      	bx	lr
 801908c:	200565dc 	.word	0x200565dc
 8019090:	200565e0 	.word	0x200565e0

08019094 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019094:	b508      	push	{r3, lr}
 8019096:	4601      	mov	r1, r0
 8019098:	f7ff ffea 	bl	8019070 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801909c:	b118      	cbz	r0, 80190a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801909e:	4b02      	ldr	r3, [pc, #8]	; (80190a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80190a6:	bd08      	pop	{r3, pc}
 80190a8:	200565c0 	.word	0x200565c0

080190ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80190ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190b0:	4d28      	ldr	r5, [pc, #160]	; (8019154 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80190b2:	682b      	ldr	r3, [r5, #0]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d04a      	beq.n	801914e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80190b8:	4a27      	ldr	r2, [pc, #156]	; (8019158 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80190ba:	4e28      	ldr	r6, [pc, #160]	; (801915c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80190bc:	8810      	ldrh	r0, [r2, #0]
 80190be:	f8b6 8000 	ldrh.w	r8, [r6]
 80190c2:	4c27      	ldr	r4, [pc, #156]	; (8019160 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80190c4:	4440      	add	r0, r8
 80190c6:	4f27      	ldr	r7, [pc, #156]	; (8019164 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80190c8:	1c41      	adds	r1, r0, #1
 80190ca:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80190ce:	f021 0101 	bic.w	r1, r1, #1
 80190d2:	eb03 020e 	add.w	r2, r3, lr
 80190d6:	0409      	lsls	r1, r1, #16
 80190d8:	6022      	str	r2, [r4, #0]
 80190da:	0c09      	lsrs	r1, r1, #16
 80190dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80190e0:	eb0e 010c 	add.w	r1, lr, ip
 80190e4:	185a      	adds	r2, r3, r1
 80190e6:	603a      	str	r2, [r7, #0]
 80190e8:	220e      	movs	r2, #14
 80190ea:	fb02 f208 	mul.w	r2, r2, r8
 80190ee:	3203      	adds	r2, #3
 80190f0:	f022 0203 	bic.w	r2, r2, #3
 80190f4:	4411      	add	r1, r2
 80190f6:	440b      	add	r3, r1
 80190f8:	491b      	ldr	r1, [pc, #108]	; (8019168 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80190fa:	600b      	str	r3, [r1, #0]
 80190fc:	2300      	movs	r3, #0
 80190fe:	491b      	ldr	r1, [pc, #108]	; (801916c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8019100:	800b      	strh	r3, [r1, #0]
 8019102:	491b      	ldr	r1, [pc, #108]	; (8019170 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8019104:	6809      	ldr	r1, [r1, #0]
 8019106:	eba1 010e 	sub.w	r1, r1, lr
 801910a:	eba1 010c 	sub.w	r1, r1, ip
 801910e:	469c      	mov	ip, r3
 8019110:	1a8a      	subs	r2, r1, r2
 8019112:	4918      	ldr	r1, [pc, #96]	; (8019174 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8019114:	600a      	str	r2, [r1, #0]
 8019116:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801911a:	4a17      	ldr	r2, [pc, #92]	; (8019178 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801911c:	8013      	strh	r3, [r2, #0]
 801911e:	4283      	cmp	r3, r0
 8019120:	d10d      	bne.n	801913e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8019122:	8835      	ldrh	r5, [r6, #0]
 8019124:	2300      	movs	r3, #0
 8019126:	6838      	ldr	r0, [r7, #0]
 8019128:	240e      	movs	r4, #14
 801912a:	429d      	cmp	r5, r3
 801912c:	d90f      	bls.n	801914e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801912e:	fb04 0203 	mla	r2, r4, r3, r0
 8019132:	3301      	adds	r3, #1
 8019134:	7b11      	ldrb	r1, [r2, #12]
 8019136:	f36f 1145 	bfc	r1, #5, #1
 801913a:	7311      	strb	r1, [r2, #12]
 801913c:	e7f5      	b.n	801912a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801913e:	682a      	ldr	r2, [r5, #0]
 8019140:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019144:	6822      	ldr	r2, [r4, #0]
 8019146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801914a:	3301      	adds	r3, #1
 801914c:	e7e7      	b.n	801911e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801914e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019152:	bf00      	nop
 8019154:	200565c0 	.word	0x200565c0
 8019158:	200565dc 	.word	0x200565dc
 801915c:	200565e0 	.word	0x200565e0
 8019160:	200565d4 	.word	0x200565d4
 8019164:	200565c4 	.word	0x200565c4
 8019168:	200565cc 	.word	0x200565cc
 801916c:	200565de 	.word	0x200565de
 8019170:	200565c8 	.word	0x200565c8
 8019174:	200565d8 	.word	0x200565d8
 8019178:	200565d0 	.word	0x200565d0

0801917c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801917c:	4b10      	ldr	r3, [pc, #64]	; (80191c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801917e:	b510      	push	{r4, lr}
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	b9db      	cbnz	r3, 80191bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019184:	b1d1      	cbz	r1, 80191bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019186:	4b0f      	ldr	r3, [pc, #60]	; (80191c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019188:	240e      	movs	r4, #14
 801918a:	801a      	strh	r2, [r3, #0]
 801918c:	b292      	uxth	r2, r2
 801918e:	4b0e      	ldr	r3, [pc, #56]	; (80191c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8019190:	881b      	ldrh	r3, [r3, #0]
 8019192:	4413      	add	r3, r2
 8019194:	4362      	muls	r2, r4
 8019196:	2406      	movs	r4, #6
 8019198:	fb04 2203 	mla	r2, r4, r3, r2
 801919c:	428a      	cmp	r2, r1
 801919e:	d305      	bcc.n	80191ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80191a0:	4b0a      	ldr	r3, [pc, #40]	; (80191cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80191a2:	2135      	movs	r1, #53	; 0x35
 80191a4:	4a0a      	ldr	r2, [pc, #40]	; (80191d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80191a6:	480b      	ldr	r0, [pc, #44]	; (80191d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80191a8:	f00a f82c 	bl	8023204 <__assert_func>
 80191ac:	4b0a      	ldr	r3, [pc, #40]	; (80191d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80191ae:	6019      	str	r1, [r3, #0]
 80191b0:	4b0a      	ldr	r3, [pc, #40]	; (80191dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80191b2:	6018      	str	r0, [r3, #0]
 80191b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191b8:	f7ff bf78 	b.w	80190ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 80191bc:	bd10      	pop	{r4, pc}
 80191be:	bf00      	nop
 80191c0:	200565cc 	.word	0x200565cc
 80191c4:	200565e0 	.word	0x200565e0
 80191c8:	200565dc 	.word	0x200565dc
 80191cc:	080279ad 	.word	0x080279ad
 80191d0:	08027a42 	.word	0x08027a42
 80191d4:	08027988 	.word	0x08027988
 80191d8:	200565c8 	.word	0x200565c8
 80191dc:	200565c0 	.word	0x200565c0

080191e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80191e0:	b470      	push	{r4, r5, r6}
 80191e2:	4c07      	ldr	r4, [pc, #28]	; (8019200 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80191e4:	4605      	mov	r5, r0
 80191e6:	4610      	mov	r0, r2
 80191e8:	9a03      	ldr	r2, [sp, #12]
 80191ea:	6826      	ldr	r6, [r4, #0]
 80191ec:	b936      	cbnz	r6, 80191fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80191ee:	6025      	str	r5, [r4, #0]
 80191f0:	4c04      	ldr	r4, [pc, #16]	; (8019204 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80191f2:	8021      	strh	r1, [r4, #0]
 80191f4:	4619      	mov	r1, r3
 80191f6:	bc70      	pop	{r4, r5, r6}
 80191f8:	f7ff bfc0 	b.w	801917c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80191fc:	bc70      	pop	{r4, r5, r6}
 80191fe:	4770      	bx	lr
 8019200:	200565e4 	.word	0x200565e4
 8019204:	200565dc 	.word	0x200565dc

08019208 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019208:	b508      	push	{r3, lr}
 801920a:	4b14      	ldr	r3, [pc, #80]	; (801925c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801920c:	6819      	ldr	r1, [r3, #0]
 801920e:	b931      	cbnz	r1, 801921e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019210:	4b13      	ldr	r3, [pc, #76]	; (8019260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019212:	f240 4186 	movw	r1, #1158	; 0x486
 8019216:	4a13      	ldr	r2, [pc, #76]	; (8019264 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019218:	4813      	ldr	r0, [pc, #76]	; (8019268 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801921a:	f009 fff3 	bl	8023204 <__assert_func>
 801921e:	4a13      	ldr	r2, [pc, #76]	; (801926c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019220:	8803      	ldrh	r3, [r0, #0]
 8019222:	8812      	ldrh	r2, [r2, #0]
 8019224:	4293      	cmp	r3, r2
 8019226:	d204      	bcs.n	8019232 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8019228:	2214      	movs	r2, #20
 801922a:	fb02 1303 	mla	r3, r2, r3, r1
 801922e:	8918      	ldrh	r0, [r3, #8]
 8019230:	bd08      	pop	{r3, pc}
 8019232:	490f      	ldr	r1, [pc, #60]	; (8019270 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8019234:	8809      	ldrh	r1, [r1, #0]
 8019236:	4411      	add	r1, r2
 8019238:	428b      	cmp	r3, r1
 801923a:	da06      	bge.n	801924a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801923c:	1a9b      	subs	r3, r3, r2
 801923e:	4a0d      	ldr	r2, [pc, #52]	; (8019274 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8019240:	210e      	movs	r1, #14
 8019242:	6812      	ldr	r2, [r2, #0]
 8019244:	fb01 2303 	mla	r3, r1, r3, r2
 8019248:	e7f1      	b.n	801922e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801924a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801924e:	4293      	cmp	r3, r2
 8019250:	bf0a      	itet	eq
 8019252:	4b09      	ldreq	r3, [pc, #36]	; (8019278 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8019254:	2000      	movne	r0, #0
 8019256:	8818      	ldrheq	r0, [r3, #0]
 8019258:	e7ea      	b.n	8019230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801925a:	bf00      	nop
 801925c:	200565e4 	.word	0x200565e4
 8019260:	08027a06 	.word	0x08027a06
 8019264:	08027ab9 	.word	0x08027ab9
 8019268:	08027988 	.word	0x08027988
 801926c:	200565dc 	.word	0x200565dc
 8019270:	200565e0 	.word	0x200565e0
 8019274:	200565c4 	.word	0x200565c4
 8019278:	20056530 	.word	0x20056530

0801927c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801927c:	b508      	push	{r3, lr}
 801927e:	4b14      	ldr	r3, [pc, #80]	; (80192d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019280:	6819      	ldr	r1, [r3, #0]
 8019282:	b931      	cbnz	r1, 8019292 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8019284:	4b13      	ldr	r3, [pc, #76]	; (80192d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019286:	f240 419a 	movw	r1, #1178	; 0x49a
 801928a:	4a13      	ldr	r2, [pc, #76]	; (80192d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801928c:	4813      	ldr	r0, [pc, #76]	; (80192dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801928e:	f009 ffb9 	bl	8023204 <__assert_func>
 8019292:	4a13      	ldr	r2, [pc, #76]	; (80192e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019294:	8803      	ldrh	r3, [r0, #0]
 8019296:	8812      	ldrh	r2, [r2, #0]
 8019298:	4293      	cmp	r3, r2
 801929a:	d204      	bcs.n	80192a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801929c:	2214      	movs	r2, #20
 801929e:	fb02 1303 	mla	r3, r2, r3, r1
 80192a2:	8958      	ldrh	r0, [r3, #10]
 80192a4:	bd08      	pop	{r3, pc}
 80192a6:	490f      	ldr	r1, [pc, #60]	; (80192e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80192a8:	8809      	ldrh	r1, [r1, #0]
 80192aa:	4411      	add	r1, r2
 80192ac:	428b      	cmp	r3, r1
 80192ae:	da06      	bge.n	80192be <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80192b0:	1a9b      	subs	r3, r3, r2
 80192b2:	4a0d      	ldr	r2, [pc, #52]	; (80192e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80192b4:	210e      	movs	r1, #14
 80192b6:	6812      	ldr	r2, [r2, #0]
 80192b8:	fb01 2303 	mla	r3, r1, r3, r2
 80192bc:	e7f1      	b.n	80192a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80192be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80192c2:	4293      	cmp	r3, r2
 80192c4:	bf0a      	itet	eq
 80192c6:	4b09      	ldreq	r3, [pc, #36]	; (80192ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80192c8:	2000      	movne	r0, #0
 80192ca:	8818      	ldrheq	r0, [r3, #0]
 80192cc:	e7ea      	b.n	80192a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80192ce:	bf00      	nop
 80192d0:	200565e4 	.word	0x200565e4
 80192d4:	08027a06 	.word	0x08027a06
 80192d8:	08027ae5 	.word	0x08027ae5
 80192dc:	08027988 	.word	0x08027988
 80192e0:	200565dc 	.word	0x200565dc
 80192e4:	200565e0 	.word	0x200565e0
 80192e8:	200565c4 	.word	0x200565c4
 80192ec:	20056532 	.word	0x20056532

080192f0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80192f0:	b508      	push	{r3, lr}
 80192f2:	4b12      	ldr	r3, [pc, #72]	; (801933c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80192f4:	6819      	ldr	r1, [r3, #0]
 80192f6:	b931      	cbnz	r1, 8019306 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80192f8:	4b11      	ldr	r3, [pc, #68]	; (8019340 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80192fa:	f240 41d2 	movw	r1, #1234	; 0x4d2
 80192fe:	4a11      	ldr	r2, [pc, #68]	; (8019344 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019300:	4811      	ldr	r0, [pc, #68]	; (8019348 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019302:	f009 ff7f 	bl	8023204 <__assert_func>
 8019306:	8803      	ldrh	r3, [r0, #0]
 8019308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801930c:	4293      	cmp	r3, r2
 801930e:	d012      	beq.n	8019336 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019310:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019314:	4293      	cmp	r3, r2
 8019316:	d103      	bne.n	8019320 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019318:	4b0c      	ldr	r3, [pc, #48]	; (801934c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801931e:	bd08      	pop	{r3, pc}
 8019320:	4a0b      	ldr	r2, [pc, #44]	; (8019350 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8019322:	6812      	ldr	r2, [r2, #0]
 8019324:	b11a      	cbz	r2, 801932e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019326:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801932a:	2800      	cmp	r0, #0
 801932c:	d1f7      	bne.n	801931e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801932e:	2214      	movs	r2, #20
 8019330:	4353      	muls	r3, r2
 8019332:	58c8      	ldr	r0, [r1, r3]
 8019334:	e7f3      	b.n	801931e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019336:	2000      	movs	r0, #0
 8019338:	e7f1      	b.n	801931e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801933a:	bf00      	nop
 801933c:	200565e4 	.word	0x200565e4
 8019340:	08027a06 	.word	0x08027a06
 8019344:	08027a88 	.word	0x08027a88
 8019348:	08027988 	.word	0x08027988
 801934c:	2005653c 	.word	0x2005653c
 8019350:	200565c0 	.word	0x200565c0

08019354 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019354:	8802      	ldrh	r2, [r0, #0]
 8019356:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801935a:	429a      	cmp	r2, r3
 801935c:	d845      	bhi.n	80193ea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801935e:	4b24      	ldr	r3, [pc, #144]	; (80193f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019360:	8818      	ldrh	r0, [r3, #0]
 8019362:	4282      	cmp	r2, r0
 8019364:	d221      	bcs.n	80193aa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8019366:	4b23      	ldr	r3, [pc, #140]	; (80193f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019368:	6819      	ldr	r1, [r3, #0]
 801936a:	2314      	movs	r3, #20
 801936c:	fb03 1302 	mla	r3, r3, r2, r1
 8019370:	6858      	ldr	r0, [r3, #4]
 8019372:	2800      	cmp	r0, #0
 8019374:	d03a      	beq.n	80193ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019376:	4920      	ldr	r1, [pc, #128]	; (80193f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019378:	6809      	ldr	r1, [r1, #0]
 801937a:	2900      	cmp	r1, #0
 801937c:	d036      	beq.n	80193ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801937e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019382:	2900      	cmp	r1, #0
 8019384:	d032      	beq.n	80193ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019386:	891a      	ldrh	r2, [r3, #8]
 8019388:	8958      	ldrh	r0, [r3, #10]
 801938a:	4350      	muls	r0, r2
 801938c:	7c5a      	ldrb	r2, [r3, #17]
 801938e:	7cdb      	ldrb	r3, [r3, #19]
 8019390:	0952      	lsrs	r2, r2, #5
 8019392:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019396:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801939a:	2b0b      	cmp	r3, #11
 801939c:	bf18      	it	ne
 801939e:	0040      	lslne	r0, r0, #1
 80193a0:	3003      	adds	r0, #3
 80193a2:	f020 0003 	bic.w	r0, r0, #3
 80193a6:	4408      	add	r0, r1
 80193a8:	4770      	bx	lr
 80193aa:	4b14      	ldr	r3, [pc, #80]	; (80193fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	4403      	add	r3, r0
 80193b0:	429a      	cmp	r2, r3
 80193b2:	da1a      	bge.n	80193ea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80193b4:	4b12      	ldr	r3, [pc, #72]	; (8019400 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80193b6:	1a10      	subs	r0, r2, r0
 80193b8:	210e      	movs	r1, #14
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	fb01 3000 	mla	r0, r1, r0, r3
 80193c0:	7b03      	ldrb	r3, [r0, #12]
 80193c2:	f003 031f 	and.w	r3, r3, #31
 80193c6:	2b0b      	cmp	r3, #11
 80193c8:	d10b      	bne.n	80193e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80193ca:	8903      	ldrh	r3, [r0, #8]
 80193cc:	8940      	ldrh	r0, [r0, #10]
 80193ce:	4358      	muls	r0, r3
 80193d0:	4b09      	ldr	r3, [pc, #36]	; (80193f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80193d2:	3003      	adds	r0, #3
 80193d4:	6819      	ldr	r1, [r3, #0]
 80193d6:	f020 0303 	bic.w	r3, r0, #3
 80193da:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80193de:	4418      	add	r0, r3
 80193e0:	4770      	bx	lr
 80193e2:	2b0d      	cmp	r3, #13
 80193e4:	d101      	bne.n	80193ea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80193e6:	300d      	adds	r0, #13
 80193e8:	4770      	bx	lr
 80193ea:	2000      	movs	r0, #0
 80193ec:	4770      	bx	lr
 80193ee:	bf00      	nop
 80193f0:	200565dc 	.word	0x200565dc
 80193f4:	200565e4 	.word	0x200565e4
 80193f8:	200565c0 	.word	0x200565c0
 80193fc:	200565e0 	.word	0x200565e0
 8019400:	200565c4 	.word	0x200565c4

08019404 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019404:	4b17      	ldr	r3, [pc, #92]	; (8019464 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019406:	b510      	push	{r4, lr}
 8019408:	6819      	ldr	r1, [r3, #0]
 801940a:	8803      	ldrh	r3, [r0, #0]
 801940c:	b1e9      	cbz	r1, 801944a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801940e:	4a16      	ldr	r2, [pc, #88]	; (8019468 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019410:	8812      	ldrh	r2, [r2, #0]
 8019412:	429a      	cmp	r2, r3
 8019414:	d90a      	bls.n	801942c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8019416:	2214      	movs	r2, #20
 8019418:	fb02 1303 	mla	r3, r2, r3, r1
 801941c:	7c58      	ldrb	r0, [r3, #17]
 801941e:	0942      	lsrs	r2, r0, #5
 8019420:	7cd8      	ldrb	r0, [r3, #19]
 8019422:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019426:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801942a:	bd10      	pop	{r4, pc}
 801942c:	490f      	ldr	r1, [pc, #60]	; (801946c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801942e:	8809      	ldrh	r1, [r1, #0]
 8019430:	4411      	add	r1, r2
 8019432:	428b      	cmp	r3, r1
 8019434:	da09      	bge.n	801944a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8019436:	1a9b      	subs	r3, r3, r2
 8019438:	4a0d      	ldr	r2, [pc, #52]	; (8019470 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801943a:	210e      	movs	r1, #14
 801943c:	6812      	ldr	r2, [r2, #0]
 801943e:	fb01 2303 	mla	r3, r1, r3, r2
 8019442:	7b18      	ldrb	r0, [r3, #12]
 8019444:	f000 001f 	and.w	r0, r0, #31
 8019448:	e7ef      	b.n	801942a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801944a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801944e:	4293      	cmp	r3, r2
 8019450:	d106      	bne.n	8019460 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8019452:	f7eb fbaf 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 8019456:	6803      	ldr	r3, [r0, #0]
 8019458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801945e:	4718      	bx	r3
 8019460:	2000      	movs	r0, #0
 8019462:	e7e2      	b.n	801942a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019464:	200565e4 	.word	0x200565e4
 8019468:	200565dc 	.word	0x200565dc
 801946c:	200565e0 	.word	0x200565e0
 8019470:	200565c4 	.word	0x200565c4

08019474 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019474:	2018      	movs	r0, #24
 8019476:	4770      	bx	lr

08019478 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019478:	2001      	movs	r0, #1
 801947a:	4770      	bx	lr

0801947c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019480:	b085      	sub	sp, #20
 8019482:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019484:	9203      	str	r2, [sp, #12]
 8019486:	6870      	ldr	r0, [r6, #4]
 8019488:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801948c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019490:	9101      	str	r1, [sp, #4]
 8019492:	fa1f f885 	uxth.w	r8, r5
 8019496:	43ed      	mvns	r5, r5
 8019498:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801949c:	b2ed      	uxtb	r5, r5
 801949e:	fb00 2404 	mla	r4, r0, r4, r2
 80194a2:	6832      	ldr	r2, [r6, #0]
 80194a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80194a8:	4414      	add	r4, r2
 80194aa:	f8dc 2000 	ldr.w	r2, [ip]
 80194ae:	9202      	str	r2, [sp, #8]
 80194b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80194b4:	f102 0e04 	add.w	lr, r2, #4
 80194b8:	9a01      	ldr	r2, [sp, #4]
 80194ba:	2a00      	cmp	r2, #0
 80194bc:	dc03      	bgt.n	80194c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80194be:	9a03      	ldr	r2, [sp, #12]
 80194c0:	2a00      	cmp	r2, #0
 80194c2:	f340 8116 	ble.w	80196f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80194c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194c8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80194cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80194d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80194d2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80194d6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80194da:	2b00      	cmp	r3, #0
 80194dc:	dd0e      	ble.n	80194fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80194de:	1406      	asrs	r6, r0, #16
 80194e0:	d405      	bmi.n	80194ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80194e2:	4556      	cmp	r6, sl
 80194e4:	da03      	bge.n	80194ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80194e6:	1416      	asrs	r6, r2, #16
 80194e8:	d401      	bmi.n	80194ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80194ea:	454e      	cmp	r6, r9
 80194ec:	db07      	blt.n	80194fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80194ee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80194f0:	3b01      	subs	r3, #1
 80194f2:	3403      	adds	r4, #3
 80194f4:	4430      	add	r0, r6
 80194f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80194f8:	4432      	add	r2, r6
 80194fa:	e7ee      	b.n	80194da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80194fc:	d063      	beq.n	80195c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80194fe:	1e5e      	subs	r6, r3, #1
 8019500:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8019502:	fb07 0706 	mla	r7, r7, r6, r0
 8019506:	143f      	asrs	r7, r7, #16
 8019508:	d454      	bmi.n	80195b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801950a:	4557      	cmp	r7, sl
 801950c:	da52      	bge.n	80195b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801950e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8019510:	fb07 2606 	mla	r6, r7, r6, r2
 8019514:	1436      	asrs	r6, r6, #16
 8019516:	d44d      	bmi.n	80195b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019518:	454e      	cmp	r6, r9
 801951a:	da4b      	bge.n	80195b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801951c:	1ce6      	adds	r6, r4, #3
 801951e:	4699      	mov	r9, r3
 8019520:	f1b9 0f00 	cmp.w	r9, #0
 8019524:	f106 0603 	add.w	r6, r6, #3
 8019528:	dd48      	ble.n	80195bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801952a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801952e:	1417      	asrs	r7, r2, #16
 8019530:	9902      	ldr	r1, [sp, #8]
 8019532:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019536:	f109 39ff 	add.w	r9, r9, #4294967295
 801953a:	fb0b 1707 	mla	r7, fp, r7, r1
 801953e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019542:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019544:	f817 700a 	ldrb.w	r7, [r7, sl]
 8019548:	fb1b fb05 	smulbb	fp, fp, r5
 801954c:	4408      	add	r0, r1
 801954e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019550:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019554:	440a      	add	r2, r1
 8019556:	eb0e 0a07 	add.w	sl, lr, r7
 801955a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801955e:	fb07 b708 	mla	r7, r7, r8, fp
 8019562:	b2bf      	uxth	r7, r7
 8019564:	f107 0b01 	add.w	fp, r7, #1
 8019568:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801956c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019570:	fb1b fb05 	smulbb	fp, fp, r5
 8019574:	123f      	asrs	r7, r7, #8
 8019576:	f806 7c06 	strb.w	r7, [r6, #-6]
 801957a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801957e:	fb07 b708 	mla	r7, r7, r8, fp
 8019582:	b2bf      	uxth	r7, r7
 8019584:	f107 0b01 	add.w	fp, r7, #1
 8019588:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801958c:	123f      	asrs	r7, r7, #8
 801958e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019592:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019596:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801959a:	fb1a fa05 	smulbb	sl, sl, r5
 801959e:	fb07 a708 	mla	r7, r7, r8, sl
 80195a2:	b2bf      	uxth	r7, r7
 80195a4:	f107 0a01 	add.w	sl, r7, #1
 80195a8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80195ac:	123f      	asrs	r7, r7, #8
 80195ae:	f806 7c04 	strb.w	r7, [r6, #-4]
 80195b2:	e7b5      	b.n	8019520 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80195b4:	2700      	movs	r7, #0
 80195b6:	1bde      	subs	r6, r3, r7
 80195b8:	2e00      	cmp	r6, #0
 80195ba:	dc42      	bgt.n	8019642 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80195bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80195c4:	441c      	add	r4, r3
 80195c6:	9b01      	ldr	r3, [sp, #4]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	f340 8092 	ble.w	80196f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80195ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195dc:	eef0 6a62 	vmov.f32	s13, s5
 80195e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195ec:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80195f0:	eef0 6a43 	vmov.f32	s13, s6
 80195f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195f8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80195fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019600:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019604:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019608:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801960c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019610:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019614:	ee12 2a90 	vmov	r2, s5
 8019618:	eef0 2a47 	vmov.f32	s5, s14
 801961c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019620:	ee13 2a10 	vmov	r2, s6
 8019624:	9311      	str	r3, [sp, #68]	; 0x44
 8019626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019628:	eeb0 3a67 	vmov.f32	s6, s15
 801962c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019630:	9312      	str	r3, [sp, #72]	; 0x48
 8019632:	9b01      	ldr	r3, [sp, #4]
 8019634:	9a03      	ldr	r2, [sp, #12]
 8019636:	3b01      	subs	r3, #1
 8019638:	9301      	str	r3, [sp, #4]
 801963a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801963c:	bf08      	it	eq
 801963e:	4613      	moveq	r3, r2
 8019640:	e73a      	b.n	80194b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019642:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019646:	d44e      	bmi.n	80196e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019648:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801964c:	4556      	cmp	r6, sl
 801964e:	dd4a      	ble.n	80196e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019650:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8019654:	d447      	bmi.n	80196e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019656:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801965a:	4559      	cmp	r1, fp
 801965c:	dd43      	ble.n	80196e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801965e:	fa0f f986 	sxth.w	r9, r6
 8019662:	9902      	ldr	r1, [sp, #8]
 8019664:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019668:	fb0b 1909 	mla	r9, fp, r9, r1
 801966c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019670:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019674:	fb1b fb05 	smulbb	fp, fp, r5
 8019678:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801967c:	eb0e 0a09 	add.w	sl, lr, r9
 8019680:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8019684:	fb09 b908 	mla	r9, r9, r8, fp
 8019688:	fa1f f989 	uxth.w	r9, r9
 801968c:	f109 0b01 	add.w	fp, r9, #1
 8019690:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019694:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019698:	f804 9006 	strb.w	r9, [r4, r6]
 801969c:	4426      	add	r6, r4
 801969e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80196a2:	f896 b001 	ldrb.w	fp, [r6, #1]
 80196a6:	fb1b fb05 	smulbb	fp, fp, r5
 80196aa:	fb09 b908 	mla	r9, r9, r8, fp
 80196ae:	fa1f f989 	uxth.w	r9, r9
 80196b2:	f109 0b01 	add.w	fp, r9, #1
 80196b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80196ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196be:	f886 9001 	strb.w	r9, [r6, #1]
 80196c2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80196c6:	f896 a002 	ldrb.w	sl, [r6, #2]
 80196ca:	fb1a fa05 	smulbb	sl, sl, r5
 80196ce:	fb09 a908 	mla	r9, r9, r8, sl
 80196d2:	fa1f f989 	uxth.w	r9, r9
 80196d6:	f109 0a01 	add.w	sl, r9, #1
 80196da:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80196de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80196e2:	f886 9002 	strb.w	r9, [r6, #2]
 80196e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80196e8:	3701      	adds	r7, #1
 80196ea:	4408      	add	r0, r1
 80196ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80196ee:	440a      	add	r2, r1
 80196f0:	e761      	b.n	80195b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80196f2:	b005      	add	sp, #20
 80196f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80196f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196fc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80196fe:	4693      	mov	fp, r2
 8019700:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019706:	6868      	ldr	r0, [r5, #4]
 8019708:	6877      	ldr	r7, [r6, #4]
 801970a:	9100      	str	r1, [sp, #0]
 801970c:	3704      	adds	r7, #4
 801970e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019712:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8019716:	fb00 2404 	mla	r4, r0, r4, r2
 801971a:	682a      	ldr	r2, [r5, #0]
 801971c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019720:	4414      	add	r4, r2
 8019722:	6832      	ldr	r2, [r6, #0]
 8019724:	9201      	str	r2, [sp, #4]
 8019726:	9a00      	ldr	r2, [sp, #0]
 8019728:	2a00      	cmp	r2, #0
 801972a:	dc03      	bgt.n	8019734 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801972c:	f1bb 0f00 	cmp.w	fp, #0
 8019730:	f340 80bc 	ble.w	80198ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019736:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801973a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801973e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019740:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8019744:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019748:	2b00      	cmp	r3, #0
 801974a:	dd0c      	ble.n	8019766 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801974c:	1405      	asrs	r5, r0, #16
 801974e:	d405      	bmi.n	801975c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019750:	4555      	cmp	r5, sl
 8019752:	da03      	bge.n	801975c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019754:	1415      	asrs	r5, r2, #16
 8019756:	d401      	bmi.n	801975c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019758:	454d      	cmp	r5, r9
 801975a:	db05      	blt.n	8019768 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801975c:	4440      	add	r0, r8
 801975e:	4472      	add	r2, lr
 8019760:	3b01      	subs	r3, #1
 8019762:	3403      	adds	r4, #3
 8019764:	e7f0      	b.n	8019748 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019766:	d03f      	beq.n	80197e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8019768:	1e5d      	subs	r5, r3, #1
 801976a:	fb08 0c05 	mla	ip, r8, r5, r0
 801976e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8019772:	d42e      	bmi.n	80197d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019774:	45d4      	cmp	ip, sl
 8019776:	da2c      	bge.n	80197d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019778:	fb0e 2505 	mla	r5, lr, r5, r2
 801977c:	142d      	asrs	r5, r5, #16
 801977e:	d428      	bmi.n	80197d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019780:	454d      	cmp	r5, r9
 8019782:	da26      	bge.n	80197d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019784:	1ce5      	adds	r5, r4, #3
 8019786:	469c      	mov	ip, r3
 8019788:	f1bc 0f00 	cmp.w	ip, #0
 801978c:	f105 0503 	add.w	r5, r5, #3
 8019790:	dd25      	ble.n	80197de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8019792:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019796:	ea4f 4922 	mov.w	r9, r2, asr #16
 801979a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801979e:	4472      	add	r2, lr
 80197a0:	468a      	mov	sl, r1
 80197a2:	9901      	ldr	r1, [sp, #4]
 80197a4:	fb0a 1909 	mla	r9, sl, r9, r1
 80197a8:	1401      	asrs	r1, r0, #16
 80197aa:	4440      	add	r0, r8
 80197ac:	f819 9001 	ldrb.w	r9, [r9, r1]
 80197b0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80197b4:	eb07 0a09 	add.w	sl, r7, r9
 80197b8:	f817 9009 	ldrb.w	r9, [r7, r9]
 80197bc:	f805 9c06 	strb.w	r9, [r5, #-6]
 80197c0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80197c4:	f805 9c05 	strb.w	r9, [r5, #-5]
 80197c8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80197cc:	f805 9c04 	strb.w	r9, [r5, #-4]
 80197d0:	e7da      	b.n	8019788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80197d2:	2500      	movs	r5, #0
 80197d4:	eba3 0c05 	sub.w	ip, r3, r5
 80197d8:	f1bc 0f00 	cmp.w	ip, #0
 80197dc:	dc3b      	bgt.n	8019856 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80197de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80197e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197e6:	441c      	add	r4, r3
 80197e8:	9b00      	ldr	r3, [sp, #0]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	dd5e      	ble.n	80198ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80197ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80197f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197f8:	eeb0 6a62 	vmov.f32	s12, s5
 80197fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019800:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019804:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019808:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801980c:	eeb0 6a43 	vmov.f32	s12, s6
 8019810:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019814:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019818:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801981c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019820:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019824:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019828:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801982c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019830:	ee12 2a90 	vmov	r2, s5
 8019834:	eef0 2a47 	vmov.f32	s5, s14
 8019838:	fb92 f8f3 	sdiv	r8, r2, r3
 801983c:	ee13 2a10 	vmov	r2, s6
 8019840:	eeb0 3a67 	vmov.f32	s6, s15
 8019844:	fb92 fef3 	sdiv	lr, r2, r3
 8019848:	9b00      	ldr	r3, [sp, #0]
 801984a:	3b01      	subs	r3, #1
 801984c:	9300      	str	r3, [sp, #0]
 801984e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019850:	bf08      	it	eq
 8019852:	465b      	moveq	r3, fp
 8019854:	e767      	b.n	8019726 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019856:	ea5f 4920 	movs.w	r9, r0, asr #16
 801985a:	d423      	bmi.n	80198a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801985c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8019860:	45cc      	cmp	ip, r9
 8019862:	dd1f      	ble.n	80198a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019864:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019868:	d41c      	bmi.n	80198a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801986a:	68f1      	ldr	r1, [r6, #12]
 801986c:	4551      	cmp	r1, sl
 801986e:	dd19      	ble.n	80198a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019870:	fa0f fc8c 	sxth.w	ip, ip
 8019874:	9901      	ldr	r1, [sp, #4]
 8019876:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801987a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801987e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019882:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8019886:	eb07 090c 	add.w	r9, r7, ip
 801988a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801988e:	f804 a00c 	strb.w	sl, [r4, ip]
 8019892:	44a4      	add	ip, r4
 8019894:	f899 a001 	ldrb.w	sl, [r9, #1]
 8019898:	f88c a001 	strb.w	sl, [ip, #1]
 801989c:	f899 9002 	ldrb.w	r9, [r9, #2]
 80198a0:	f88c 9002 	strb.w	r9, [ip, #2]
 80198a4:	4440      	add	r0, r8
 80198a6:	4472      	add	r2, lr
 80198a8:	3501      	adds	r5, #1
 80198aa:	e793      	b.n	80197d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80198ac:	b003      	add	sp, #12
 80198ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080198b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80198b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198b6:	b085      	sub	sp, #20
 80198b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80198bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80198be:	9202      	str	r2, [sp, #8]
 80198c0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80198c4:	6860      	ldr	r0, [r4, #4]
 80198c6:	9203      	str	r2, [sp, #12]
 80198c8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80198cc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80198d0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80198d4:	fb00 2505 	mla	r5, r0, r5, r2
 80198d8:	6822      	ldr	r2, [r4, #0]
 80198da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198de:	4415      	add	r5, r2
 80198e0:	f8dc 2000 	ldr.w	r2, [ip]
 80198e4:	9200      	str	r2, [sp, #0]
 80198e6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80198ea:	3204      	adds	r2, #4
 80198ec:	9201      	str	r2, [sp, #4]
 80198ee:	2900      	cmp	r1, #0
 80198f0:	dc03      	bgt.n	80198fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80198f2:	9a02      	ldr	r2, [sp, #8]
 80198f4:	2a00      	cmp	r2, #0
 80198f6:	f340 8127 	ble.w	8019b48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80198fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80198fc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019900:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019906:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801990a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801990e:	2b00      	cmp	r3, #0
 8019910:	dd0d      	ble.n	801992e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019912:	1422      	asrs	r2, r4, #16
 8019914:	d405      	bmi.n	8019922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019916:	4542      	cmp	r2, r8
 8019918:	da03      	bge.n	8019922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801991a:	1402      	asrs	r2, r0, #16
 801991c:	d401      	bmi.n	8019922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801991e:	42ba      	cmp	r2, r7
 8019920:	db06      	blt.n	8019930 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019924:	4474      	add	r4, lr
 8019926:	3b01      	subs	r3, #1
 8019928:	3503      	adds	r5, #3
 801992a:	4410      	add	r0, r2
 801992c:	e7ef      	b.n	801990e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801992e:	d075      	beq.n	8019a1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019930:	1e5a      	subs	r2, r3, #1
 8019932:	fb0e 4602 	mla	r6, lr, r2, r4
 8019936:	1436      	asrs	r6, r6, #16
 8019938:	d465      	bmi.n	8019a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801993a:	4546      	cmp	r6, r8
 801993c:	da63      	bge.n	8019a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801993e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019940:	fb06 0202 	mla	r2, r6, r2, r0
 8019944:	1412      	asrs	r2, r2, #16
 8019946:	d45e      	bmi.n	8019a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019948:	42ba      	cmp	r2, r7
 801994a:	da5c      	bge.n	8019a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801994c:	1cef      	adds	r7, r5, #3
 801994e:	4699      	mov	r9, r3
 8019950:	f1b9 0f00 	cmp.w	r9, #0
 8019954:	dd5d      	ble.n	8019a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8019956:	1402      	asrs	r2, r0, #16
 8019958:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801995c:	1426      	asrs	r6, r4, #16
 801995e:	4692      	mov	sl, r2
 8019960:	9a00      	ldr	r2, [sp, #0]
 8019962:	fb08 220a 	mla	r2, r8, sl, r2
 8019966:	5d92      	ldrb	r2, [r2, r6]
 8019968:	9e01      	ldr	r6, [sp, #4]
 801996a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801996e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019972:	d041      	beq.n	80199f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019974:	9a03      	ldr	r2, [sp, #12]
 8019976:	fa5f fb86 	uxtb.w	fp, r6
 801997a:	fb02 f808 	mul.w	r8, r2, r8
 801997e:	f108 0201 	add.w	r2, r8, #1
 8019982:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019986:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801998a:	1212      	asrs	r2, r2, #8
 801998c:	fa1f fa82 	uxth.w	sl, r2
 8019990:	43d2      	mvns	r2, r2
 8019992:	fb1b fb0a 	smulbb	fp, fp, sl
 8019996:	b2d2      	uxtb	r2, r2
 8019998:	fb08 b802 	mla	r8, r8, r2, fp
 801999c:	fa1f f888 	uxth.w	r8, r8
 80199a0:	f108 0b01 	add.w	fp, r8, #1
 80199a4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80199a8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80199ac:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80199b0:	fb1b fb0a 	smulbb	fp, fp, sl
 80199b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80199b8:	fb16 fa0a 	smulbb	sl, r6, sl
 80199bc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80199c0:	f807 8c03 	strb.w	r8, [r7, #-3]
 80199c4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80199c8:	fb06 aa02 	mla	sl, r6, r2, sl
 80199cc:	fb08 b802 	mla	r8, r8, r2, fp
 80199d0:	fa1f fa8a 	uxth.w	sl, sl
 80199d4:	fa1f f888 	uxth.w	r8, r8
 80199d8:	f10a 0601 	add.w	r6, sl, #1
 80199dc:	f108 0b01 	add.w	fp, r8, #1
 80199e0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80199e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80199e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80199ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80199f0:	f807 ac01 	strb.w	sl, [r7, #-1]
 80199f4:	f807 8c02 	strb.w	r8, [r7, #-2]
 80199f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80199fa:	4474      	add	r4, lr
 80199fc:	3703      	adds	r7, #3
 80199fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8019a02:	4410      	add	r0, r2
 8019a04:	e7a4      	b.n	8019950 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019a06:	f04f 0800 	mov.w	r8, #0
 8019a0a:	eba3 0208 	sub.w	r2, r3, r8
 8019a0e:	2a00      	cmp	r2, #0
 8019a10:	dc3b      	bgt.n	8019a8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8019a12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a1a:	441d      	add	r5, r3
 8019a1c:	2900      	cmp	r1, #0
 8019a1e:	f340 8093 	ble.w	8019b48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8019a22:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a2c:	3901      	subs	r1, #1
 8019a2e:	eeb0 6a62 	vmov.f32	s12, s5
 8019a32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019a36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a3e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019a42:	eeb0 6a43 	vmov.f32	s12, s6
 8019a46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a4a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019a4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a66:	ee12 2a90 	vmov	r2, s5
 8019a6a:	eef0 2a47 	vmov.f32	s5, s14
 8019a6e:	fb92 fef3 	sdiv	lr, r2, r3
 8019a72:	ee13 2a10 	vmov	r2, s6
 8019a76:	eeb0 3a67 	vmov.f32	s6, s15
 8019a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a7e:	9a02      	ldr	r2, [sp, #8]
 8019a80:	9312      	str	r3, [sp, #72]	; 0x48
 8019a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a84:	bf08      	it	eq
 8019a86:	4613      	moveq	r3, r2
 8019a88:	e731      	b.n	80198ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019a8a:	1427      	asrs	r7, r4, #16
 8019a8c:	d456      	bmi.n	8019b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019a8e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019a92:	42be      	cmp	r6, r7
 8019a94:	dd52      	ble.n	8019b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019a96:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019a9a:	d44f      	bmi.n	8019b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019a9c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019aa0:	454a      	cmp	r2, r9
 8019aa2:	dd4b      	ble.n	8019b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019aa4:	9a00      	ldr	r2, [sp, #0]
 8019aa6:	b236      	sxth	r6, r6
 8019aa8:	fb09 2606 	mla	r6, r9, r6, r2
 8019aac:	5df2      	ldrb	r2, [r6, r7]
 8019aae:	9e01      	ldr	r6, [sp, #4]
 8019ab0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8019ab4:	0e3a      	lsrs	r2, r7, #24
 8019ab6:	d041      	beq.n	8019b3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019ab8:	9e03      	ldr	r6, [sp, #12]
 8019aba:	fa5f fb87 	uxtb.w	fp, r7
 8019abe:	4372      	muls	r2, r6
 8019ac0:	1c56      	adds	r6, r2, #1
 8019ac2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019ac6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019aca:	1212      	asrs	r2, r2, #8
 8019acc:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019ad0:	fa1f fa82 	uxth.w	sl, r2
 8019ad4:	43d2      	mvns	r2, r2
 8019ad6:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ada:	b2d2      	uxtb	r2, r2
 8019adc:	fb09 b902 	mla	r9, r9, r2, fp
 8019ae0:	fa1f f989 	uxth.w	r9, r9
 8019ae4:	f109 0b01 	add.w	fp, r9, #1
 8019ae8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019aec:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019af0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019af4:	fb1b fb0a 	smulbb	fp, fp, sl
 8019af8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019afc:	fb17 fa0a 	smulbb	sl, r7, sl
 8019b00:	f805 9006 	strb.w	r9, [r5, r6]
 8019b04:	442e      	add	r6, r5
 8019b06:	78b7      	ldrb	r7, [r6, #2]
 8019b08:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019b0c:	fb07 aa02 	mla	sl, r7, r2, sl
 8019b10:	fb09 b902 	mla	r9, r9, r2, fp
 8019b14:	fa1f fa8a 	uxth.w	sl, sl
 8019b18:	fa1f f989 	uxth.w	r9, r9
 8019b1c:	f10a 0701 	add.w	r7, sl, #1
 8019b20:	f109 0b01 	add.w	fp, r9, #1
 8019b24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019b28:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019b2c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019b30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019b34:	f886 a002 	strb.w	sl, [r6, #2]
 8019b38:	f886 9001 	strb.w	r9, [r6, #1]
 8019b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b3e:	4474      	add	r4, lr
 8019b40:	f108 0801 	add.w	r8, r8, #1
 8019b44:	4410      	add	r0, r2
 8019b46:	e760      	b.n	8019a0a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8019b48:	b005      	add	sp, #20
 8019b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b52:	b085      	sub	sp, #20
 8019b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019b5a:	9203      	str	r2, [sp, #12]
 8019b5c:	6868      	ldr	r0, [r5, #4]
 8019b5e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019b62:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8019b66:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019b6a:	fb00 2404 	mla	r4, r0, r4, r2
 8019b6e:	682a      	ldr	r2, [r5, #0]
 8019b70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b74:	4414      	add	r4, r2
 8019b76:	f8dc 2000 	ldr.w	r2, [ip]
 8019b7a:	9201      	str	r2, [sp, #4]
 8019b7c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019b80:	3204      	adds	r2, #4
 8019b82:	9202      	str	r2, [sp, #8]
 8019b84:	2900      	cmp	r1, #0
 8019b86:	dc03      	bgt.n	8019b90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019b88:	9a03      	ldr	r2, [sp, #12]
 8019b8a:	2a00      	cmp	r2, #0
 8019b8c:	f340 8137 	ble.w	8019dfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b92:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019b96:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019b9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019b9c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019ba0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	dd0d      	ble.n	8019bc4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019ba8:	1405      	asrs	r5, r0, #16
 8019baa:	d405      	bmi.n	8019bb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019bac:	4545      	cmp	r5, r8
 8019bae:	da03      	bge.n	8019bb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019bb0:	1415      	asrs	r5, r2, #16
 8019bb2:	d401      	bmi.n	8019bb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019bb4:	42bd      	cmp	r5, r7
 8019bb6:	db06      	blt.n	8019bc6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019bb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019bba:	4470      	add	r0, lr
 8019bbc:	3b01      	subs	r3, #1
 8019bbe:	3403      	adds	r4, #3
 8019bc0:	442a      	add	r2, r5
 8019bc2:	e7ef      	b.n	8019ba4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8019bc4:	d070      	beq.n	8019ca8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019bc6:	1e5d      	subs	r5, r3, #1
 8019bc8:	fb0e 0605 	mla	r6, lr, r5, r0
 8019bcc:	1436      	asrs	r6, r6, #16
 8019bce:	d462      	bmi.n	8019c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019bd0:	4546      	cmp	r6, r8
 8019bd2:	da60      	bge.n	8019c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019bd4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019bd6:	fb06 2505 	mla	r5, r6, r5, r2
 8019bda:	142d      	asrs	r5, r5, #16
 8019bdc:	d45b      	bmi.n	8019c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019bde:	42bd      	cmp	r5, r7
 8019be0:	da59      	bge.n	8019c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019be2:	1ce5      	adds	r5, r4, #3
 8019be4:	469a      	mov	sl, r3
 8019be6:	f1ba 0f00 	cmp.w	sl, #0
 8019bea:	dd58      	ble.n	8019c9e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8019bec:	1416      	asrs	r6, r2, #16
 8019bee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019bf2:	1407      	asrs	r7, r0, #16
 8019bf4:	46b1      	mov	r9, r6
 8019bf6:	9e01      	ldr	r6, [sp, #4]
 8019bf8:	fb08 6609 	mla	r6, r8, r9, r6
 8019bfc:	5df6      	ldrb	r6, [r6, r7]
 8019bfe:	9f02      	ldr	r7, [sp, #8]
 8019c00:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8019c04:	0e37      	lsrs	r7, r6, #24
 8019c06:	2fff      	cmp	r7, #255	; 0xff
 8019c08:	f000 80f0 	beq.w	8019dec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8019c0c:	fa5f f887 	uxtb.w	r8, r7
 8019c10:	b3d7      	cbz	r7, 8019c88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019c12:	fa1f f788 	uxth.w	r7, r8
 8019c16:	ea6f 0808 	mvn.w	r8, r8
 8019c1a:	fa5f fb86 	uxtb.w	fp, r6
 8019c1e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8019c22:	fa5f f888 	uxtb.w	r8, r8
 8019c26:	fb1b fb07 	smulbb	fp, fp, r7
 8019c2a:	fb09 b908 	mla	r9, r9, r8, fp
 8019c2e:	fa1f f989 	uxth.w	r9, r9
 8019c32:	f109 0b01 	add.w	fp, r9, #1
 8019c36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c3a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8019c3e:	fb1b fb08 	smulbb	fp, fp, r8
 8019c42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c46:	f805 9c03 	strb.w	r9, [r5, #-3]
 8019c4a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8019c4e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019c52:	fb09 b907 	mla	r9, r9, r7, fp
 8019c56:	fa1f f989 	uxth.w	r9, r9
 8019c5a:	f109 0b01 	add.w	fp, r9, #1
 8019c5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c66:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019c6a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8019c6e:	fb19 f808 	smulbb	r8, r9, r8
 8019c72:	fb06 8607 	mla	r6, r6, r7, r8
 8019c76:	b2b6      	uxth	r6, r6
 8019c78:	f106 0801 	add.w	r8, r6, #1
 8019c7c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019c80:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c84:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019c88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019c8a:	4470      	add	r0, lr
 8019c8c:	3503      	adds	r5, #3
 8019c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c92:	4432      	add	r2, r6
 8019c94:	e7a7      	b.n	8019be6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019c96:	2600      	movs	r6, #0
 8019c98:	1b9d      	subs	r5, r3, r6
 8019c9a:	2d00      	cmp	r5, #0
 8019c9c:	dc3b      	bgt.n	8019d16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019c9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ca2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ca6:	441c      	add	r4, r3
 8019ca8:	2900      	cmp	r1, #0
 8019caa:	f340 80a8 	ble.w	8019dfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019cae:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cb8:	3901      	subs	r1, #1
 8019cba:	eeb0 6a62 	vmov.f32	s12, s5
 8019cbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019cc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019cce:	eeb0 6a43 	vmov.f32	s12, s6
 8019cd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cd6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019cda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cde:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ce2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ce6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019cea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019cee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cf2:	ee12 2a90 	vmov	r2, s5
 8019cf6:	eef0 2a47 	vmov.f32	s5, s14
 8019cfa:	fb92 fef3 	sdiv	lr, r2, r3
 8019cfe:	ee13 2a10 	vmov	r2, s6
 8019d02:	eeb0 3a67 	vmov.f32	s6, s15
 8019d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d0a:	9a03      	ldr	r2, [sp, #12]
 8019d0c:	9312      	str	r3, [sp, #72]	; 0x48
 8019d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d10:	bf08      	it	eq
 8019d12:	4613      	moveq	r3, r2
 8019d14:	e736      	b.n	8019b84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019d16:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019d1a:	d457      	bmi.n	8019dcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019d1c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8019d20:	4547      	cmp	r7, r8
 8019d22:	dd53      	ble.n	8019dcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019d24:	ea5f 4922 	movs.w	r9, r2, asr #16
 8019d28:	d450      	bmi.n	8019dcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019d2a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8019d2e:	454d      	cmp	r5, r9
 8019d30:	dd4c      	ble.n	8019dcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019d32:	9d01      	ldr	r5, [sp, #4]
 8019d34:	b23f      	sxth	r7, r7
 8019d36:	fb09 5707 	mla	r7, r9, r7, r5
 8019d3a:	f817 5008 	ldrb.w	r5, [r7, r8]
 8019d3e:	9f02      	ldr	r7, [sp, #8]
 8019d40:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8019d44:	0e2f      	lsrs	r7, r5, #24
 8019d46:	2fff      	cmp	r7, #255	; 0xff
 8019d48:	d045      	beq.n	8019dd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019d4a:	fa5f f987 	uxtb.w	r9, r7
 8019d4e:	b3ef      	cbz	r7, 8019dcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019d50:	fa1f f889 	uxth.w	r8, r9
 8019d54:	ea6f 0909 	mvn.w	r9, r9
 8019d58:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019d5c:	fa5f fb85 	uxtb.w	fp, r5
 8019d60:	f814 a007 	ldrb.w	sl, [r4, r7]
 8019d64:	fa5f f989 	uxtb.w	r9, r9
 8019d68:	fb1b fb08 	smulbb	fp, fp, r8
 8019d6c:	fb0a ba09 	mla	sl, sl, r9, fp
 8019d70:	fa1f fa8a 	uxth.w	sl, sl
 8019d74:	f10a 0b01 	add.w	fp, sl, #1
 8019d78:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019d7c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019d80:	f804 a007 	strb.w	sl, [r4, r7]
 8019d84:	4427      	add	r7, r4
 8019d86:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019d8a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8019d8e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019d92:	fb1b fb09 	smulbb	fp, fp, r9
 8019d96:	fb0a ba08 	mla	sl, sl, r8, fp
 8019d9a:	fa1f fa8a 	uxth.w	sl, sl
 8019d9e:	f10a 0b01 	add.w	fp, sl, #1
 8019da2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019da6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019daa:	f887 a001 	strb.w	sl, [r7, #1]
 8019dae:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019db2:	fb1a f909 	smulbb	r9, sl, r9
 8019db6:	fb05 9508 	mla	r5, r5, r8, r9
 8019dba:	b2ad      	uxth	r5, r5
 8019dbc:	f105 0901 	add.w	r9, r5, #1
 8019dc0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8019dc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019dc8:	f887 9002 	strb.w	r9, [r7, #2]
 8019dcc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019dce:	4470      	add	r0, lr
 8019dd0:	3601      	adds	r6, #1
 8019dd2:	442a      	add	r2, r5
 8019dd4:	e760      	b.n	8019c98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019dd6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019dda:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8019dde:	55e5      	strb	r5, [r4, r7]
 8019de0:	4427      	add	r7, r4
 8019de2:	0c2d      	lsrs	r5, r5, #16
 8019de4:	f887 8001 	strb.w	r8, [r7, #1]
 8019de8:	70bd      	strb	r5, [r7, #2]
 8019dea:	e7ef      	b.n	8019dcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019dec:	0a37      	lsrs	r7, r6, #8
 8019dee:	f805 6c03 	strb.w	r6, [r5, #-3]
 8019df2:	0c36      	lsrs	r6, r6, #16
 8019df4:	f805 7c02 	strb.w	r7, [r5, #-2]
 8019df8:	f805 6c01 	strb.w	r6, [r5, #-1]
 8019dfc:	e744      	b.n	8019c88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019dfe:	b005      	add	sp, #20
 8019e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e04 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e08:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019e0a:	9201      	str	r2, [sp, #4]
 8019e0c:	6870      	ldr	r0, [r6, #4]
 8019e0e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8019e12:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8019e16:	fa1f fe85 	uxth.w	lr, r5
 8019e1a:	43ed      	mvns	r5, r5
 8019e1c:	f8dc 8000 	ldr.w	r8, [ip]
 8019e20:	b2ed      	uxtb	r5, r5
 8019e22:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019e26:	fb00 2404 	mla	r4, r0, r4, r2
 8019e2a:	6832      	ldr	r2, [r6, #0]
 8019e2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019e30:	4414      	add	r4, r2
 8019e32:	2900      	cmp	r1, #0
 8019e34:	dc03      	bgt.n	8019e3e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019e36:	9a01      	ldr	r2, [sp, #4]
 8019e38:	2a00      	cmp	r2, #0
 8019e3a:	f340 810d 	ble.w	801a058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019e40:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019e44:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e4a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019e4e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	dd0e      	ble.n	8019e74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019e56:	1406      	asrs	r6, r0, #16
 8019e58:	d405      	bmi.n	8019e66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019e5a:	4556      	cmp	r6, sl
 8019e5c:	da03      	bge.n	8019e66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019e5e:	1416      	asrs	r6, r2, #16
 8019e60:	d401      	bmi.n	8019e66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019e62:	454e      	cmp	r6, r9
 8019e64:	db07      	blt.n	8019e76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019e68:	3b01      	subs	r3, #1
 8019e6a:	3403      	adds	r4, #3
 8019e6c:	4430      	add	r0, r6
 8019e6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019e70:	4432      	add	r2, r6
 8019e72:	e7ee      	b.n	8019e52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8019e74:	d060      	beq.n	8019f38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8019e76:	1e5e      	subs	r6, r3, #1
 8019e78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019e7a:	fb07 0706 	mla	r7, r7, r6, r0
 8019e7e:	143f      	asrs	r7, r7, #16
 8019e80:	d451      	bmi.n	8019f26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019e82:	4557      	cmp	r7, sl
 8019e84:	da4f      	bge.n	8019f26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019e86:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019e88:	fb07 2606 	mla	r6, r7, r6, r2
 8019e8c:	1436      	asrs	r6, r6, #16
 8019e8e:	d44a      	bmi.n	8019f26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019e90:	454e      	cmp	r6, r9
 8019e92:	da48      	bge.n	8019f26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019e94:	1ce6      	adds	r6, r4, #3
 8019e96:	4699      	mov	r9, r3
 8019e98:	f1b9 0f00 	cmp.w	r9, #0
 8019e9c:	f106 0603 	add.w	r6, r6, #3
 8019ea0:	dd45      	ble.n	8019f2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8019ea2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019ea6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019eaa:	1417      	asrs	r7, r2, #16
 8019eac:	f109 39ff 	add.w	r9, r9, #4294967295
 8019eb0:	fb0b a707 	mla	r7, fp, r7, sl
 8019eb4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019eb8:	fb1b fb05 	smulbb	fp, fp, r5
 8019ebc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019ec0:	eb08 0a07 	add.w	sl, r8, r7
 8019ec4:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019ec8:	fb07 b70e 	mla	r7, r7, lr, fp
 8019ecc:	b2bf      	uxth	r7, r7
 8019ece:	f107 0b01 	add.w	fp, r7, #1
 8019ed2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019ed6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019eda:	fb1b fb05 	smulbb	fp, fp, r5
 8019ede:	123f      	asrs	r7, r7, #8
 8019ee0:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019ee4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019ee8:	fb07 b70e 	mla	r7, r7, lr, fp
 8019eec:	b2bf      	uxth	r7, r7
 8019eee:	f107 0b01 	add.w	fp, r7, #1
 8019ef2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019ef6:	123f      	asrs	r7, r7, #8
 8019ef8:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019efc:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019f00:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019f04:	fb1a fa05 	smulbb	sl, sl, r5
 8019f08:	fb07 a70e 	mla	r7, r7, lr, sl
 8019f0c:	b2bf      	uxth	r7, r7
 8019f0e:	f107 0a01 	add.w	sl, r7, #1
 8019f12:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019f16:	123f      	asrs	r7, r7, #8
 8019f18:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019f1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019f1e:	4438      	add	r0, r7
 8019f20:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019f22:	443a      	add	r2, r7
 8019f24:	e7b8      	b.n	8019e98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f26:	2700      	movs	r7, #0
 8019f28:	1bde      	subs	r6, r3, r7
 8019f2a:	2e00      	cmp	r6, #0
 8019f2c:	dc3f      	bgt.n	8019fae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8019f2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f36:	441c      	add	r4, r3
 8019f38:	2900      	cmp	r1, #0
 8019f3a:	f340 808d 	ble.w	801a058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f48:	3901      	subs	r1, #1
 8019f4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f4e:	eef0 6a62 	vmov.f32	s13, s5
 8019f52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f5e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8019f62:	eef0 6a43 	vmov.f32	s13, s6
 8019f66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f6a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8019f6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f86:	ee12 2a90 	vmov	r2, s5
 8019f8a:	eef0 2a47 	vmov.f32	s5, s14
 8019f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f92:	ee13 2a10 	vmov	r2, s6
 8019f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f9a:	eeb0 3a67 	vmov.f32	s6, s15
 8019f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fa2:	9a01      	ldr	r2, [sp, #4]
 8019fa4:	9310      	str	r3, [sp, #64]	; 0x40
 8019fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fa8:	bf08      	it	eq
 8019faa:	4613      	moveq	r3, r2
 8019fac:	e741      	b.n	8019e32 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019fae:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019fb2:	d44b      	bmi.n	801a04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019fb4:	f8dc b008 	ldr.w	fp, [ip, #8]
 8019fb8:	45cb      	cmp	fp, r9
 8019fba:	dd47      	ble.n	801a04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019fbc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019fc0:	d444      	bmi.n	801a04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019fc2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8019fc6:	4556      	cmp	r6, sl
 8019fc8:	dd40      	ble.n	801a04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019fca:	fa0f f68b 	sxth.w	r6, fp
 8019fce:	fb0a 9906 	mla	r9, sl, r6, r9
 8019fd2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019fd6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019fda:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019fde:	fb1b fb05 	smulbb	fp, fp, r5
 8019fe2:	eb08 0a09 	add.w	sl, r8, r9
 8019fe6:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019fea:	fb09 b90e 	mla	r9, r9, lr, fp
 8019fee:	fa1f f989 	uxth.w	r9, r9
 8019ff2:	f109 0b01 	add.w	fp, r9, #1
 8019ff6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019ffa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019ffe:	f804 9006 	strb.w	r9, [r4, r6]
 801a002:	4426      	add	r6, r4
 801a004:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a008:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a00c:	fb1b fb05 	smulbb	fp, fp, r5
 801a010:	fb09 b90e 	mla	r9, r9, lr, fp
 801a014:	fa1f f989 	uxth.w	r9, r9
 801a018:	f109 0b01 	add.w	fp, r9, #1
 801a01c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a020:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a024:	f886 9001 	strb.w	r9, [r6, #1]
 801a028:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a02c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a030:	fb1a fa05 	smulbb	sl, sl, r5
 801a034:	fb09 a90e 	mla	r9, r9, lr, sl
 801a038:	fa1f f989 	uxth.w	r9, r9
 801a03c:	f109 0a01 	add.w	sl, r9, #1
 801a040:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a044:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a048:	f886 9002 	strb.w	r9, [r6, #2]
 801a04c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a04e:	3701      	adds	r7, #1
 801a050:	4430      	add	r0, r6
 801a052:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a054:	4432      	add	r2, r6
 801a056:	e767      	b.n	8019f28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a058:	b003      	add	sp, #12
 801a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a05e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a05e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a062:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a068:	9201      	str	r2, [sp, #4]
 801a06a:	6868      	ldr	r0, [r5, #4]
 801a06c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801a06e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a072:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801a076:	fb00 2404 	mla	r4, r0, r4, r2
 801a07a:	682a      	ldr	r2, [r5, #0]
 801a07c:	f8d7 8000 	ldr.w	r8, [r7]
 801a080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a084:	4414      	add	r4, r2
 801a086:	2900      	cmp	r1, #0
 801a088:	dc03      	bgt.n	801a092 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a08a:	9a01      	ldr	r2, [sp, #4]
 801a08c:	2a00      	cmp	r2, #0
 801a08e:	f340 80af 	ble.w	801a1f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a094:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801a098:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a09c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a09e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801a0a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	dd0c      	ble.n	801a0c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a0aa:	1405      	asrs	r5, r0, #16
 801a0ac:	d405      	bmi.n	801a0ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a0ae:	4555      	cmp	r5, sl
 801a0b0:	da03      	bge.n	801a0ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a0b2:	1415      	asrs	r5, r2, #16
 801a0b4:	d401      	bmi.n	801a0ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a0b6:	454d      	cmp	r5, r9
 801a0b8:	db05      	blt.n	801a0c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a0ba:	4470      	add	r0, lr
 801a0bc:	4462      	add	r2, ip
 801a0be:	3b01      	subs	r3, #1
 801a0c0:	3403      	adds	r4, #3
 801a0c2:	e7f0      	b.n	801a0a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a0c4:	d038      	beq.n	801a138 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a0c6:	1e5d      	subs	r5, r3, #1
 801a0c8:	fb0e 0605 	mla	r6, lr, r5, r0
 801a0cc:	1436      	asrs	r6, r6, #16
 801a0ce:	d42a      	bmi.n	801a126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a0d0:	4556      	cmp	r6, sl
 801a0d2:	da28      	bge.n	801a126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a0d4:	fb0c 2505 	mla	r5, ip, r5, r2
 801a0d8:	142d      	asrs	r5, r5, #16
 801a0da:	d424      	bmi.n	801a126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a0dc:	454d      	cmp	r5, r9
 801a0de:	da22      	bge.n	801a126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a0e0:	1ce6      	adds	r6, r4, #3
 801a0e2:	4699      	mov	r9, r3
 801a0e4:	f1b9 0f00 	cmp.w	r9, #0
 801a0e8:	f106 0603 	add.w	r6, r6, #3
 801a0ec:	dd1f      	ble.n	801a12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801a0ee:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801a0f2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a0f6:	1415      	asrs	r5, r2, #16
 801a0f8:	4470      	add	r0, lr
 801a0fa:	4462      	add	r2, ip
 801a0fc:	f109 39ff 	add.w	r9, r9, #4294967295
 801a100:	fb0b a505 	mla	r5, fp, r5, sl
 801a104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a108:	eb08 0a05 	add.w	sl, r8, r5
 801a10c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801a110:	f806 5c06 	strb.w	r5, [r6, #-6]
 801a114:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a118:	f806 5c05 	strb.w	r5, [r6, #-5]
 801a11c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801a120:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a124:	e7de      	b.n	801a0e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a126:	2600      	movs	r6, #0
 801a128:	1b9d      	subs	r5, r3, r6
 801a12a:	2d00      	cmp	r5, #0
 801a12c:	dc38      	bgt.n	801a1a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a12e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a136:	441c      	add	r4, r3
 801a138:	2900      	cmp	r1, #0
 801a13a:	dd59      	ble.n	801a1f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a13c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a142:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a146:	3901      	subs	r1, #1
 801a148:	eeb0 6a62 	vmov.f32	s12, s5
 801a14c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a150:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a154:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a158:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a15c:	eeb0 6a43 	vmov.f32	s12, s6
 801a160:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a164:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a168:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a16c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a170:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a174:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a178:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a17c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a180:	ee12 2a90 	vmov	r2, s5
 801a184:	eef0 2a47 	vmov.f32	s5, s14
 801a188:	fb92 fef3 	sdiv	lr, r2, r3
 801a18c:	ee13 2a10 	vmov	r2, s6
 801a190:	eeb0 3a67 	vmov.f32	s6, s15
 801a194:	fb92 fcf3 	sdiv	ip, r2, r3
 801a198:	9a01      	ldr	r2, [sp, #4]
 801a19a:	bf08      	it	eq
 801a19c:	4613      	moveq	r3, r2
 801a19e:	e772      	b.n	801a086 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a1a0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a1a4:	d420      	bmi.n	801a1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a1a6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801a1aa:	45cb      	cmp	fp, r9
 801a1ac:	dd1c      	ble.n	801a1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a1ae:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a1b2:	d419      	bmi.n	801a1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a1b4:	68fd      	ldr	r5, [r7, #12]
 801a1b6:	4555      	cmp	r5, sl
 801a1b8:	dd16      	ble.n	801a1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a1ba:	fa0f f58b 	sxth.w	r5, fp
 801a1be:	fb0a 9505 	mla	r5, sl, r5, r9
 801a1c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a1c6:	f818 9005 	ldrb.w	r9, [r8, r5]
 801a1ca:	eb08 0b05 	add.w	fp, r8, r5
 801a1ce:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801a1d2:	f804 9005 	strb.w	r9, [r4, r5]
 801a1d6:	4425      	add	r5, r4
 801a1d8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801a1dc:	f885 9001 	strb.w	r9, [r5, #1]
 801a1e0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a1e4:	f885 9002 	strb.w	r9, [r5, #2]
 801a1e8:	4470      	add	r0, lr
 801a1ea:	4462      	add	r2, ip
 801a1ec:	3601      	adds	r6, #1
 801a1ee:	e79b      	b.n	801a128 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801a1f0:	b003      	add	sp, #12
 801a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a1f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1fa:	b085      	sub	sp, #20
 801a1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a200:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a202:	9202      	str	r2, [sp, #8]
 801a204:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a208:	6860      	ldr	r0, [r4, #4]
 801a20a:	9203      	str	r2, [sp, #12]
 801a20c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a210:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a214:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a218:	fb00 2505 	mla	r5, r0, r5, r2
 801a21c:	6822      	ldr	r2, [r4, #0]
 801a21e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a222:	4415      	add	r5, r2
 801a224:	f8dc 2000 	ldr.w	r2, [ip]
 801a228:	9201      	str	r2, [sp, #4]
 801a22a:	2900      	cmp	r1, #0
 801a22c:	dc03      	bgt.n	801a236 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a22e:	9a02      	ldr	r2, [sp, #8]
 801a230:	2a00      	cmp	r2, #0
 801a232:	f340 8122 	ble.w	801a47a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a238:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a23c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a242:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a246:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	dd0d      	ble.n	801a26a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a24e:	1422      	asrs	r2, r4, #16
 801a250:	d405      	bmi.n	801a25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a252:	4542      	cmp	r2, r8
 801a254:	da03      	bge.n	801a25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a256:	1402      	asrs	r2, r0, #16
 801a258:	d401      	bmi.n	801a25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a25a:	42ba      	cmp	r2, r7
 801a25c:	db06      	blt.n	801a26c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a25e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a260:	4474      	add	r4, lr
 801a262:	3b01      	subs	r3, #1
 801a264:	3503      	adds	r5, #3
 801a266:	4410      	add	r0, r2
 801a268:	e7ef      	b.n	801a24a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a26a:	d072      	beq.n	801a352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a26c:	1e5a      	subs	r2, r3, #1
 801a26e:	fb0e 4602 	mla	r6, lr, r2, r4
 801a272:	1436      	asrs	r6, r6, #16
 801a274:	d462      	bmi.n	801a33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a276:	4546      	cmp	r6, r8
 801a278:	da60      	bge.n	801a33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a27a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a27c:	fb06 0202 	mla	r2, r6, r2, r0
 801a280:	1412      	asrs	r2, r2, #16
 801a282:	d45b      	bmi.n	801a33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a284:	42ba      	cmp	r2, r7
 801a286:	da59      	bge.n	801a33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a288:	1cef      	adds	r7, r5, #3
 801a28a:	4699      	mov	r9, r3
 801a28c:	f1b9 0f00 	cmp.w	r9, #0
 801a290:	dd5a      	ble.n	801a348 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a292:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a296:	1426      	asrs	r6, r4, #16
 801a298:	1402      	asrs	r2, r0, #16
 801a29a:	fb08 6202 	mla	r2, r8, r2, r6
 801a29e:	9e01      	ldr	r6, [sp, #4]
 801a2a0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a2a4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a2a8:	d041      	beq.n	801a32e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a2aa:	9a03      	ldr	r2, [sp, #12]
 801a2ac:	fa5f fb86 	uxtb.w	fp, r6
 801a2b0:	fb02 f808 	mul.w	r8, r2, r8
 801a2b4:	f108 0201 	add.w	r2, r8, #1
 801a2b8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a2bc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a2c0:	1212      	asrs	r2, r2, #8
 801a2c2:	fa1f fa82 	uxth.w	sl, r2
 801a2c6:	43d2      	mvns	r2, r2
 801a2c8:	fb1b fb0a 	smulbb	fp, fp, sl
 801a2cc:	b2d2      	uxtb	r2, r2
 801a2ce:	fb08 b802 	mla	r8, r8, r2, fp
 801a2d2:	fa1f f888 	uxth.w	r8, r8
 801a2d6:	f108 0b01 	add.w	fp, r8, #1
 801a2da:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a2de:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a2e2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a2e6:	fb1b fb0a 	smulbb	fp, fp, sl
 801a2ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a2ee:	fb16 fa0a 	smulbb	sl, r6, sl
 801a2f2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a2f6:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a2fa:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a2fe:	fb06 aa02 	mla	sl, r6, r2, sl
 801a302:	fb08 b802 	mla	r8, r8, r2, fp
 801a306:	fa1f fa8a 	uxth.w	sl, sl
 801a30a:	fa1f f888 	uxth.w	r8, r8
 801a30e:	f10a 0601 	add.w	r6, sl, #1
 801a312:	f108 0b01 	add.w	fp, r8, #1
 801a316:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a31a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a31e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a322:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a326:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a32a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a32e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a330:	4474      	add	r4, lr
 801a332:	3703      	adds	r7, #3
 801a334:	f109 39ff 	add.w	r9, r9, #4294967295
 801a338:	4410      	add	r0, r2
 801a33a:	e7a7      	b.n	801a28c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a33c:	f04f 0800 	mov.w	r8, #0
 801a340:	eba3 0208 	sub.w	r2, r3, r8
 801a344:	2a00      	cmp	r2, #0
 801a346:	dc3b      	bgt.n	801a3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801a348:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a34c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a350:	441d      	add	r5, r3
 801a352:	2900      	cmp	r1, #0
 801a354:	f340 8091 	ble.w	801a47a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a358:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a35e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a362:	3901      	subs	r1, #1
 801a364:	eeb0 6a62 	vmov.f32	s12, s5
 801a368:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a36c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a370:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a374:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a378:	eeb0 6a43 	vmov.f32	s12, s6
 801a37c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a380:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a384:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a388:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a38c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a390:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a394:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a398:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a39c:	ee12 2a90 	vmov	r2, s5
 801a3a0:	eef0 2a47 	vmov.f32	s5, s14
 801a3a4:	fb92 fef3 	sdiv	lr, r2, r3
 801a3a8:	ee13 2a10 	vmov	r2, s6
 801a3ac:	eeb0 3a67 	vmov.f32	s6, s15
 801a3b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3b4:	9a02      	ldr	r2, [sp, #8]
 801a3b6:	9312      	str	r3, [sp, #72]	; 0x48
 801a3b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3ba:	bf08      	it	eq
 801a3bc:	4613      	moveq	r3, r2
 801a3be:	e734      	b.n	801a22a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a3c0:	1427      	asrs	r7, r4, #16
 801a3c2:	d454      	bmi.n	801a46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a3c4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a3c8:	42be      	cmp	r6, r7
 801a3ca:	dd50      	ble.n	801a46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a3cc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a3d0:	d44d      	bmi.n	801a46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a3d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a3d6:	454a      	cmp	r2, r9
 801a3d8:	dd49      	ble.n	801a46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a3da:	b236      	sxth	r6, r6
 801a3dc:	9a01      	ldr	r2, [sp, #4]
 801a3de:	fb09 7606 	mla	r6, r9, r6, r7
 801a3e2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801a3e6:	0e3a      	lsrs	r2, r7, #24
 801a3e8:	d041      	beq.n	801a46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a3ea:	9e03      	ldr	r6, [sp, #12]
 801a3ec:	fa5f fb87 	uxtb.w	fp, r7
 801a3f0:	4372      	muls	r2, r6
 801a3f2:	1c56      	adds	r6, r2, #1
 801a3f4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a3f8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a3fc:	1212      	asrs	r2, r2, #8
 801a3fe:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a402:	fa1f fa82 	uxth.w	sl, r2
 801a406:	43d2      	mvns	r2, r2
 801a408:	fb1b fb0a 	smulbb	fp, fp, sl
 801a40c:	b2d2      	uxtb	r2, r2
 801a40e:	fb09 b902 	mla	r9, r9, r2, fp
 801a412:	fa1f f989 	uxth.w	r9, r9
 801a416:	f109 0b01 	add.w	fp, r9, #1
 801a41a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a41e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a422:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a426:	fb1b fb0a 	smulbb	fp, fp, sl
 801a42a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a42e:	fb17 fa0a 	smulbb	sl, r7, sl
 801a432:	f805 9006 	strb.w	r9, [r5, r6]
 801a436:	442e      	add	r6, r5
 801a438:	78b7      	ldrb	r7, [r6, #2]
 801a43a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a43e:	fb07 aa02 	mla	sl, r7, r2, sl
 801a442:	fb09 b902 	mla	r9, r9, r2, fp
 801a446:	fa1f fa8a 	uxth.w	sl, sl
 801a44a:	fa1f f989 	uxth.w	r9, r9
 801a44e:	f10a 0701 	add.w	r7, sl, #1
 801a452:	f109 0b01 	add.w	fp, r9, #1
 801a456:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a45a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a45e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a462:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a466:	f886 a002 	strb.w	sl, [r6, #2]
 801a46a:	f886 9001 	strb.w	r9, [r6, #1]
 801a46e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a470:	4474      	add	r4, lr
 801a472:	f108 0801 	add.w	r8, r8, #1
 801a476:	4410      	add	r0, r2
 801a478:	e762      	b.n	801a340 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a47a:	b005      	add	sp, #20
 801a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a48a:	9201      	str	r2, [sp, #4]
 801a48c:	6860      	ldr	r0, [r4, #4]
 801a48e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801a492:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801a496:	fb00 2505 	mla	r5, r0, r5, r2
 801a49a:	6822      	ldr	r2, [r4, #0]
 801a49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a4a0:	4415      	add	r5, r2
 801a4a2:	f8dc 2000 	ldr.w	r2, [ip]
 801a4a6:	9200      	str	r2, [sp, #0]
 801a4a8:	2900      	cmp	r1, #0
 801a4aa:	dc03      	bgt.n	801a4b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a4ac:	9a01      	ldr	r2, [sp, #4]
 801a4ae:	2a00      	cmp	r2, #0
 801a4b0:	f340 812b 	ble.w	801a70a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4b6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a4ba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a4be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4c0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a4c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	dd0e      	ble.n	801a4ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a4cc:	1422      	asrs	r2, r4, #16
 801a4ce:	d405      	bmi.n	801a4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a4d0:	4572      	cmp	r2, lr
 801a4d2:	da03      	bge.n	801a4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a4d4:	1402      	asrs	r2, r0, #16
 801a4d6:	d401      	bmi.n	801a4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a4d8:	42ba      	cmp	r2, r7
 801a4da:	db07      	blt.n	801a4ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a4dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a4de:	3b01      	subs	r3, #1
 801a4e0:	3503      	adds	r5, #3
 801a4e2:	4414      	add	r4, r2
 801a4e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a4e6:	4410      	add	r0, r2
 801a4e8:	e7ee      	b.n	801a4c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a4ea:	d06f      	beq.n	801a5cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a4ec:	1e5a      	subs	r2, r3, #1
 801a4ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a4f0:	fb06 4602 	mla	r6, r6, r2, r4
 801a4f4:	1436      	asrs	r6, r6, #16
 801a4f6:	d45e      	bmi.n	801a5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a4f8:	4576      	cmp	r6, lr
 801a4fa:	da5c      	bge.n	801a5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a4fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a4fe:	fb06 0202 	mla	r2, r6, r2, r0
 801a502:	1412      	asrs	r2, r2, #16
 801a504:	d457      	bmi.n	801a5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a506:	42ba      	cmp	r2, r7
 801a508:	da55      	bge.n	801a5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a50a:	1cee      	adds	r6, r5, #3
 801a50c:	469a      	mov	sl, r3
 801a50e:	f1ba 0f00 	cmp.w	sl, #0
 801a512:	dd56      	ble.n	801a5c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a514:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a518:	1427      	asrs	r7, r4, #16
 801a51a:	1402      	asrs	r2, r0, #16
 801a51c:	fb0e 7202 	mla	r2, lr, r2, r7
 801a520:	9f00      	ldr	r7, [sp, #0]
 801a522:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801a526:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801a52a:	d03c      	beq.n	801a5a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a52c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a530:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a534:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a538:	fa5f f28e 	uxtb.w	r2, lr
 801a53c:	b2ff      	uxtb	r7, r7
 801a53e:	f000 80dd 	beq.w	801a6fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a542:	fa1f f882 	uxth.w	r8, r2
 801a546:	43d2      	mvns	r2, r2
 801a548:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801a54c:	fb17 f708 	smulbb	r7, r7, r8
 801a550:	b2d2      	uxtb	r2, r2
 801a552:	fb19 f908 	smulbb	r9, r9, r8
 801a556:	fb0e 7702 	mla	r7, lr, r2, r7
 801a55a:	fb1b f808 	smulbb	r8, fp, r8
 801a55e:	b2bf      	uxth	r7, r7
 801a560:	f107 0e01 	add.w	lr, r7, #1
 801a564:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a568:	123f      	asrs	r7, r7, #8
 801a56a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a56e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801a572:	fb07 9902 	mla	r9, r7, r2, r9
 801a576:	fa1f f989 	uxth.w	r9, r9
 801a57a:	f109 0701 	add.w	r7, r9, #1
 801a57e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a582:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a586:	fb07 8802 	mla	r8, r7, r2, r8
 801a58a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a58e:	fa1f f888 	uxth.w	r8, r8
 801a592:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a596:	f108 0201 	add.w	r2, r8, #1
 801a59a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a59e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a5a2:	f806 8c01 	strb.w	r8, [r6, #-1]
 801a5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a5a8:	3603      	adds	r6, #3
 801a5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a5ae:	4414      	add	r4, r2
 801a5b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a5b2:	4410      	add	r0, r2
 801a5b4:	e7ab      	b.n	801a50e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a5b6:	f04f 0e00 	mov.w	lr, #0
 801a5ba:	eba3 020e 	sub.w	r2, r3, lr
 801a5be:	2a00      	cmp	r2, #0
 801a5c0:	dc3d      	bgt.n	801a63e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801a5c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5ca:	441d      	add	r5, r3
 801a5cc:	2900      	cmp	r1, #0
 801a5ce:	f340 809c 	ble.w	801a70a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a5d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a5dc:	3901      	subs	r1, #1
 801a5de:	eeb0 6a62 	vmov.f32	s12, s5
 801a5e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a5e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a5ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a5ee:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a5f2:	eeb0 6a43 	vmov.f32	s12, s6
 801a5f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a5fa:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a5fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a602:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a606:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a60a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a60e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a612:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a616:	ee12 2a90 	vmov	r2, s5
 801a61a:	eef0 2a47 	vmov.f32	s5, s14
 801a61e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a622:	ee13 2a10 	vmov	r2, s6
 801a626:	930f      	str	r3, [sp, #60]	; 0x3c
 801a628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a62a:	eeb0 3a67 	vmov.f32	s6, s15
 801a62e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a632:	9a01      	ldr	r2, [sp, #4]
 801a634:	9310      	str	r3, [sp, #64]	; 0x40
 801a636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a638:	bf08      	it	eq
 801a63a:	4613      	moveq	r3, r2
 801a63c:	e734      	b.n	801a4a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a63e:	1427      	asrs	r7, r4, #16
 801a640:	d44d      	bmi.n	801a6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a642:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a646:	42be      	cmp	r6, r7
 801a648:	dd49      	ble.n	801a6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a64a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a64e:	d446      	bmi.n	801a6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a650:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a654:	4542      	cmp	r2, r8
 801a656:	dd42      	ble.n	801a6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a658:	b236      	sxth	r6, r6
 801a65a:	9a00      	ldr	r2, [sp, #0]
 801a65c:	fb08 7606 	mla	r6, r8, r6, r7
 801a660:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801a664:	0e3a      	lsrs	r2, r7, #24
 801a666:	d03a      	beq.n	801a6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a668:	2aff      	cmp	r2, #255	; 0xff
 801a66a:	b2d6      	uxtb	r6, r2
 801a66c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a670:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801a674:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801a678:	b2ff      	uxtb	r7, r7
 801a67a:	d037      	beq.n	801a6ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801a67c:	fa1f f986 	uxth.w	r9, r6
 801a680:	4472      	add	r2, lr
 801a682:	43f6      	mvns	r6, r6
 801a684:	f815 8002 	ldrb.w	r8, [r5, r2]
 801a688:	fb17 f709 	smulbb	r7, r7, r9
 801a68c:	fb1a fa09 	smulbb	sl, sl, r9
 801a690:	b2f6      	uxtb	r6, r6
 801a692:	fb1b f909 	smulbb	r9, fp, r9
 801a696:	fb08 7706 	mla	r7, r8, r6, r7
 801a69a:	b2bf      	uxth	r7, r7
 801a69c:	f107 0801 	add.w	r8, r7, #1
 801a6a0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801a6a4:	123f      	asrs	r7, r7, #8
 801a6a6:	54af      	strb	r7, [r5, r2]
 801a6a8:	442a      	add	r2, r5
 801a6aa:	7857      	ldrb	r7, [r2, #1]
 801a6ac:	fb07 aa06 	mla	sl, r7, r6, sl
 801a6b0:	fa1f fa8a 	uxth.w	sl, sl
 801a6b4:	f10a 0701 	add.w	r7, sl, #1
 801a6b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a6bc:	7897      	ldrb	r7, [r2, #2]
 801a6be:	fb07 9906 	mla	r9, r7, r6, r9
 801a6c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a6c6:	fa1f f989 	uxth.w	r9, r9
 801a6ca:	f882 a001 	strb.w	sl, [r2, #1]
 801a6ce:	f109 0601 	add.w	r6, r9, #1
 801a6d2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801a6d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a6da:	f882 9002 	strb.w	r9, [r2, #2]
 801a6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6e0:	f10e 0e01 	add.w	lr, lr, #1
 801a6e4:	4414      	add	r4, r2
 801a6e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6e8:	4410      	add	r0, r2
 801a6ea:	e766      	b.n	801a5ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a6ec:	4472      	add	r2, lr
 801a6ee:	54af      	strb	r7, [r5, r2]
 801a6f0:	442a      	add	r2, r5
 801a6f2:	f882 a001 	strb.w	sl, [r2, #1]
 801a6f6:	f882 b002 	strb.w	fp, [r2, #2]
 801a6fa:	e7f0      	b.n	801a6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a6fc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a700:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a704:	f806 bc01 	strb.w	fp, [r6, #-1]
 801a708:	e74d      	b.n	801a5a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a70a:	b003      	add	sp, #12
 801a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a710 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a714:	b087      	sub	sp, #28
 801a716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a71a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a71c:	9204      	str	r2, [sp, #16]
 801a71e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a722:	6860      	ldr	r0, [r4, #4]
 801a724:	9205      	str	r2, [sp, #20]
 801a726:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a72a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801a72e:	9101      	str	r1, [sp, #4]
 801a730:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a734:	fb00 2505 	mla	r5, r0, r5, r2
 801a738:	6822      	ldr	r2, [r4, #0]
 801a73a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a73e:	4415      	add	r5, r2
 801a740:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a744:	3201      	adds	r2, #1
 801a746:	f022 0201 	bic.w	r2, r2, #1
 801a74a:	9202      	str	r2, [sp, #8]
 801a74c:	f8dc 2000 	ldr.w	r2, [ip]
 801a750:	9203      	str	r2, [sp, #12]
 801a752:	9a01      	ldr	r2, [sp, #4]
 801a754:	2a00      	cmp	r2, #0
 801a756:	dc03      	bgt.n	801a760 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a758:	9a04      	ldr	r2, [sp, #16]
 801a75a:	2a00      	cmp	r2, #0
 801a75c:	f340 8135 	ble.w	801a9ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a760:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a762:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a766:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a76a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a76c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a770:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a774:	2b00      	cmp	r3, #0
 801a776:	dd0d      	ble.n	801a794 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a778:	1422      	asrs	r2, r4, #16
 801a77a:	d405      	bmi.n	801a788 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a77c:	4542      	cmp	r2, r8
 801a77e:	da03      	bge.n	801a788 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a780:	1402      	asrs	r2, r0, #16
 801a782:	d401      	bmi.n	801a788 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a784:	42ba      	cmp	r2, r7
 801a786:	db06      	blt.n	801a796 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a78a:	4474      	add	r4, lr
 801a78c:	3b01      	subs	r3, #1
 801a78e:	3503      	adds	r5, #3
 801a790:	4410      	add	r0, r2
 801a792:	e7ef      	b.n	801a774 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a794:	d077      	beq.n	801a886 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801a796:	1e5a      	subs	r2, r3, #1
 801a798:	fb0e 4602 	mla	r6, lr, r2, r4
 801a79c:	1436      	asrs	r6, r6, #16
 801a79e:	d469      	bmi.n	801a874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a7a0:	4546      	cmp	r6, r8
 801a7a2:	da67      	bge.n	801a874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a7a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a7a6:	fb06 0202 	mla	r2, r6, r2, r0
 801a7aa:	1412      	asrs	r2, r2, #16
 801a7ac:	d462      	bmi.n	801a874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a7ae:	42ba      	cmp	r2, r7
 801a7b0:	da60      	bge.n	801a874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a7b2:	1cee      	adds	r6, r5, #3
 801a7b4:	4699      	mov	r9, r3
 801a7b6:	f1b9 0f00 	cmp.w	r9, #0
 801a7ba:	dd5f      	ble.n	801a87c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a7bc:	1422      	asrs	r2, r4, #16
 801a7be:	9902      	ldr	r1, [sp, #8]
 801a7c0:	1407      	asrs	r7, r0, #16
 801a7c2:	fb01 2707 	mla	r7, r1, r7, r2
 801a7c6:	9903      	ldr	r1, [sp, #12]
 801a7c8:	087a      	lsrs	r2, r7, #1
 801a7ca:	5c8a      	ldrb	r2, [r1, r2]
 801a7cc:	07f9      	lsls	r1, r7, #31
 801a7ce:	bf54      	ite	pl
 801a7d0:	f002 020f 	andpl.w	r2, r2, #15
 801a7d4:	1112      	asrmi	r2, r2, #4
 801a7d6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a7da:	b2d2      	uxtb	r2, r2
 801a7dc:	2a00      	cmp	r2, #0
 801a7de:	d042      	beq.n	801a866 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a7e0:	497b      	ldr	r1, [pc, #492]	; (801a9d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801a7e2:	680f      	ldr	r7, [r1, #0]
 801a7e4:	9905      	ldr	r1, [sp, #20]
 801a7e6:	fa5f fb87 	uxtb.w	fp, r7
 801a7ea:	434a      	muls	r2, r1
 801a7ec:	f102 0801 	add.w	r8, r2, #1
 801a7f0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801a7f4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801a7f8:	1212      	asrs	r2, r2, #8
 801a7fa:	fa1f fa82 	uxth.w	sl, r2
 801a7fe:	43d2      	mvns	r2, r2
 801a800:	fb1b fb0a 	smulbb	fp, fp, sl
 801a804:	b2d2      	uxtb	r2, r2
 801a806:	fb08 b802 	mla	r8, r8, r2, fp
 801a80a:	fa1f f888 	uxth.w	r8, r8
 801a80e:	f108 0b01 	add.w	fp, r8, #1
 801a812:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a816:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a81a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a81e:	fb1b fb0a 	smulbb	fp, fp, sl
 801a822:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a826:	fb17 fa0a 	smulbb	sl, r7, sl
 801a82a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a82e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801a832:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801a836:	fb07 aa02 	mla	sl, r7, r2, sl
 801a83a:	fb08 b802 	mla	r8, r8, r2, fp
 801a83e:	fa1f fa8a 	uxth.w	sl, sl
 801a842:	fa1f f888 	uxth.w	r8, r8
 801a846:	f10a 0701 	add.w	r7, sl, #1
 801a84a:	f108 0b01 	add.w	fp, r8, #1
 801a84e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a852:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a856:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a85a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a85e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801a862:	f806 8c02 	strb.w	r8, [r6, #-2]
 801a866:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a868:	4474      	add	r4, lr
 801a86a:	3603      	adds	r6, #3
 801a86c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a870:	4410      	add	r0, r2
 801a872:	e7a0      	b.n	801a7b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a874:	2700      	movs	r7, #0
 801a876:	1bda      	subs	r2, r3, r7
 801a878:	2a00      	cmp	r2, #0
 801a87a:	dc3e      	bgt.n	801a8fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801a87c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a884:	441d      	add	r5, r3
 801a886:	9b01      	ldr	r3, [sp, #4]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f340 809e 	ble.w	801a9ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a88e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a894:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a898:	eeb0 6a62 	vmov.f32	s12, s5
 801a89c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8a8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a8ac:	eeb0 6a43 	vmov.f32	s12, s6
 801a8b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8b4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a8b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a8bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8d0:	ee12 2a90 	vmov	r2, s5
 801a8d4:	eef0 2a47 	vmov.f32	s5, s14
 801a8d8:	fb92 fef3 	sdiv	lr, r2, r3
 801a8dc:	ee13 2a10 	vmov	r2, s6
 801a8e0:	eeb0 3a67 	vmov.f32	s6, s15
 801a8e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8e8:	9314      	str	r3, [sp, #80]	; 0x50
 801a8ea:	9b01      	ldr	r3, [sp, #4]
 801a8ec:	9a04      	ldr	r2, [sp, #16]
 801a8ee:	3b01      	subs	r3, #1
 801a8f0:	9301      	str	r3, [sp, #4]
 801a8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8f4:	bf08      	it	eq
 801a8f6:	4613      	moveq	r3, r2
 801a8f8:	e72b      	b.n	801a752 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a8fa:	1426      	asrs	r6, r4, #16
 801a8fc:	d460      	bmi.n	801a9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a8fe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a902:	42b2      	cmp	r2, r6
 801a904:	dd5c      	ble.n	801a9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a906:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a90a:	d459      	bmi.n	801a9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a90c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a910:	4542      	cmp	r2, r8
 801a912:	dd55      	ble.n	801a9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a914:	9a02      	ldr	r2, [sp, #8]
 801a916:	9903      	ldr	r1, [sp, #12]
 801a918:	fb08 6602 	mla	r6, r8, r2, r6
 801a91c:	0872      	lsrs	r2, r6, #1
 801a91e:	07f6      	lsls	r6, r6, #31
 801a920:	5c8a      	ldrb	r2, [r1, r2]
 801a922:	bf54      	ite	pl
 801a924:	f002 020f 	andpl.w	r2, r2, #15
 801a928:	1112      	asrmi	r2, r2, #4
 801a92a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a92e:	b2d2      	uxtb	r2, r2
 801a930:	2a00      	cmp	r2, #0
 801a932:	d045      	beq.n	801a9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a934:	4926      	ldr	r1, [pc, #152]	; (801a9d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801a936:	f8d1 8000 	ldr.w	r8, [r1]
 801a93a:	9905      	ldr	r1, [sp, #20]
 801a93c:	fa5f fb88 	uxtb.w	fp, r8
 801a940:	434a      	muls	r2, r1
 801a942:	1c56      	adds	r6, r2, #1
 801a944:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a948:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a94c:	1212      	asrs	r2, r2, #8
 801a94e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a952:	fa1f fa82 	uxth.w	sl, r2
 801a956:	43d2      	mvns	r2, r2
 801a958:	fb1b fb0a 	smulbb	fp, fp, sl
 801a95c:	b2d2      	uxtb	r2, r2
 801a95e:	fb09 b902 	mla	r9, r9, r2, fp
 801a962:	fa1f f989 	uxth.w	r9, r9
 801a966:	f109 0b01 	add.w	fp, r9, #1
 801a96a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a96e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801a972:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801a976:	fb1b fb0a 	smulbb	fp, fp, sl
 801a97a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a97e:	fb18 fa0a 	smulbb	sl, r8, sl
 801a982:	f805 9006 	strb.w	r9, [r5, r6]
 801a986:	442e      	add	r6, r5
 801a988:	f896 8002 	ldrb.w	r8, [r6, #2]
 801a98c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a990:	fb08 aa02 	mla	sl, r8, r2, sl
 801a994:	fb09 b902 	mla	r9, r9, r2, fp
 801a998:	fa1f fa8a 	uxth.w	sl, sl
 801a99c:	fa1f f989 	uxth.w	r9, r9
 801a9a0:	f10a 0801 	add.w	r8, sl, #1
 801a9a4:	f109 0b01 	add.w	fp, r9, #1
 801a9a8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801a9ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a9b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a9b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a9b8:	f886 a002 	strb.w	sl, [r6, #2]
 801a9bc:	f886 9001 	strb.w	r9, [r6, #1]
 801a9c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a9c2:	4474      	add	r4, lr
 801a9c4:	3701      	adds	r7, #1
 801a9c6:	4410      	add	r0, r2
 801a9c8:	e755      	b.n	801a876 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801a9ca:	b007      	add	sp, #28
 801a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9d0:	20056564 	.word	0x20056564

0801a9d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d8:	b085      	sub	sp, #20
 801a9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9e0:	9203      	str	r2, [sp, #12]
 801a9e2:	6860      	ldr	r0, [r4, #4]
 801a9e4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a9e8:	9100      	str	r1, [sp, #0]
 801a9ea:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801a9ee:	fb00 2606 	mla	r6, r0, r6, r2
 801a9f2:	6822      	ldr	r2, [r4, #0]
 801a9f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a9f8:	4416      	add	r6, r2
 801a9fa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a9fe:	3201      	adds	r2, #1
 801aa00:	f022 0201 	bic.w	r2, r2, #1
 801aa04:	9201      	str	r2, [sp, #4]
 801aa06:	f8dc 2000 	ldr.w	r2, [ip]
 801aa0a:	9202      	str	r2, [sp, #8]
 801aa0c:	9a00      	ldr	r2, [sp, #0]
 801aa0e:	2a00      	cmp	r2, #0
 801aa10:	dc03      	bgt.n	801aa1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801aa12:	9a03      	ldr	r2, [sp, #12]
 801aa14:	2a00      	cmp	r2, #0
 801aa16:	f340 8140 	ble.w	801ac9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801aa1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa1c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801aa20:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801aa24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa26:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801aa2a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	dd0e      	ble.n	801aa50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aa32:	142a      	asrs	r2, r5, #16
 801aa34:	d405      	bmi.n	801aa42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa36:	4572      	cmp	r2, lr
 801aa38:	da03      	bge.n	801aa42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa3a:	1422      	asrs	r2, r4, #16
 801aa3c:	d401      	bmi.n	801aa42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa3e:	42ba      	cmp	r2, r7
 801aa40:	db07      	blt.n	801aa52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aa42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa44:	3b01      	subs	r3, #1
 801aa46:	3603      	adds	r6, #3
 801aa48:	4415      	add	r5, r2
 801aa4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa4c:	4414      	add	r4, r2
 801aa4e:	e7ee      	b.n	801aa2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801aa50:	d072      	beq.n	801ab38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aa52:	1e5a      	subs	r2, r3, #1
 801aa54:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aa56:	fb00 5002 	mla	r0, r0, r2, r5
 801aa5a:	1400      	asrs	r0, r0, #16
 801aa5c:	d463      	bmi.n	801ab26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa5e:	4570      	cmp	r0, lr
 801aa60:	da61      	bge.n	801ab26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa62:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aa64:	fb00 4202 	mla	r2, r0, r2, r4
 801aa68:	1412      	asrs	r2, r2, #16
 801aa6a:	d45c      	bmi.n	801ab26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa6c:	42ba      	cmp	r2, r7
 801aa6e:	da5a      	bge.n	801ab26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa70:	1cf0      	adds	r0, r6, #3
 801aa72:	469a      	mov	sl, r3
 801aa74:	f1ba 0f00 	cmp.w	sl, #0
 801aa78:	dd59      	ble.n	801ab2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801aa7a:	142a      	asrs	r2, r5, #16
 801aa7c:	9901      	ldr	r1, [sp, #4]
 801aa7e:	1427      	asrs	r7, r4, #16
 801aa80:	fb01 2707 	mla	r7, r1, r7, r2
 801aa84:	9902      	ldr	r1, [sp, #8]
 801aa86:	087a      	lsrs	r2, r7, #1
 801aa88:	5c8a      	ldrb	r2, [r1, r2]
 801aa8a:	07f9      	lsls	r1, r7, #31
 801aa8c:	bf54      	ite	pl
 801aa8e:	f002 020f 	andpl.w	r2, r2, #15
 801aa92:	1112      	asrmi	r2, r2, #4
 801aa94:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aa98:	b2d2      	uxtb	r2, r2
 801aa9a:	2a00      	cmp	r2, #0
 801aa9c:	d03b      	beq.n	801ab16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801aa9e:	4980      	ldr	r1, [pc, #512]	; (801aca0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801aaa0:	2aff      	cmp	r2, #255	; 0xff
 801aaa2:	680f      	ldr	r7, [r1, #0]
 801aaa4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801aaa8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801aaac:	b2ff      	uxtb	r7, r7
 801aaae:	f000 80ed 	beq.w	801ac8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801aab2:	fa1f f882 	uxth.w	r8, r2
 801aab6:	43d2      	mvns	r2, r2
 801aab8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801aabc:	fb17 f708 	smulbb	r7, r7, r8
 801aac0:	b2d2      	uxtb	r2, r2
 801aac2:	fb19 f908 	smulbb	r9, r9, r8
 801aac6:	fb0e 7702 	mla	r7, lr, r2, r7
 801aaca:	fb1b f808 	smulbb	r8, fp, r8
 801aace:	b2bf      	uxth	r7, r7
 801aad0:	f107 0e01 	add.w	lr, r7, #1
 801aad4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801aad8:	123f      	asrs	r7, r7, #8
 801aada:	f800 7c03 	strb.w	r7, [r0, #-3]
 801aade:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801aae2:	fb07 9902 	mla	r9, r7, r2, r9
 801aae6:	fa1f f989 	uxth.w	r9, r9
 801aaea:	f109 0701 	add.w	r7, r9, #1
 801aaee:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801aaf2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801aaf6:	fb07 8802 	mla	r8, r7, r2, r8
 801aafa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aafe:	fa1f f888 	uxth.w	r8, r8
 801ab02:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ab06:	f108 0201 	add.w	r2, r8, #1
 801ab0a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ab0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ab12:	f800 8c01 	strb.w	r8, [r0, #-1]
 801ab16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab18:	3003      	adds	r0, #3
 801ab1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ab1e:	4415      	add	r5, r2
 801ab20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab22:	4414      	add	r4, r2
 801ab24:	e7a6      	b.n	801aa74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ab26:	2700      	movs	r7, #0
 801ab28:	1bda      	subs	r2, r3, r7
 801ab2a:	2a00      	cmp	r2, #0
 801ab2c:	dc40      	bgt.n	801abb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ab2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab36:	441e      	add	r6, r3
 801ab38:	9b00      	ldr	r3, [sp, #0]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	f340 80ad 	ble.w	801ac9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ab40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab4a:	eeb0 6a62 	vmov.f32	s12, s5
 801ab4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab5a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ab5e:	eeb0 6a43 	vmov.f32	s12, s6
 801ab62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab66:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ab6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab72:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab82:	ee12 2a90 	vmov	r2, s5
 801ab86:	eef0 2a47 	vmov.f32	s5, s14
 801ab8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab8e:	ee13 2a10 	vmov	r2, s6
 801ab92:	9311      	str	r3, [sp, #68]	; 0x44
 801ab94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab96:	eeb0 3a67 	vmov.f32	s6, s15
 801ab9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab9e:	9312      	str	r3, [sp, #72]	; 0x48
 801aba0:	9b00      	ldr	r3, [sp, #0]
 801aba2:	9a03      	ldr	r2, [sp, #12]
 801aba4:	3b01      	subs	r3, #1
 801aba6:	9300      	str	r3, [sp, #0]
 801aba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abaa:	bf08      	it	eq
 801abac:	4613      	moveq	r3, r2
 801abae:	e72d      	b.n	801aa0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801abb0:	1428      	asrs	r0, r5, #16
 801abb2:	d45c      	bmi.n	801ac6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801abb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801abb8:	4282      	cmp	r2, r0
 801abba:	dd58      	ble.n	801ac6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801abbc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801abc0:	d455      	bmi.n	801ac6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801abc2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801abc6:	4572      	cmp	r2, lr
 801abc8:	dd51      	ble.n	801ac6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801abca:	9a01      	ldr	r2, [sp, #4]
 801abcc:	9902      	ldr	r1, [sp, #8]
 801abce:	fb0e 0002 	mla	r0, lr, r2, r0
 801abd2:	0842      	lsrs	r2, r0, #1
 801abd4:	07c0      	lsls	r0, r0, #31
 801abd6:	5c8a      	ldrb	r2, [r1, r2]
 801abd8:	bf54      	ite	pl
 801abda:	f002 020f 	andpl.w	r2, r2, #15
 801abde:	1112      	asrmi	r2, r2, #4
 801abe0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801abe4:	b2d2      	uxtb	r2, r2
 801abe6:	2a00      	cmp	r2, #0
 801abe8:	d041      	beq.n	801ac6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801abea:	492d      	ldr	r1, [pc, #180]	; (801aca0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801abec:	2aff      	cmp	r2, #255	; 0xff
 801abee:	6808      	ldr	r0, [r1, #0]
 801abf0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801abf4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801abf8:	fa5f fe80 	uxtb.w	lr, r0
 801abfc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ac00:	d03b      	beq.n	801ac7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ac02:	fa1f f982 	uxth.w	r9, r2
 801ac06:	4438      	add	r0, r7
 801ac08:	43d2      	mvns	r2, r2
 801ac0a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ac0e:	fb1e fe09 	smulbb	lr, lr, r9
 801ac12:	fb1a fa09 	smulbb	sl, sl, r9
 801ac16:	b2d2      	uxtb	r2, r2
 801ac18:	fb1b f909 	smulbb	r9, fp, r9
 801ac1c:	fb08 ee02 	mla	lr, r8, r2, lr
 801ac20:	fa1f fe8e 	uxth.w	lr, lr
 801ac24:	f10e 0801 	add.w	r8, lr, #1
 801ac28:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801ac2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ac30:	f806 e000 	strb.w	lr, [r6, r0]
 801ac34:	4430      	add	r0, r6
 801ac36:	f890 e001 	ldrb.w	lr, [r0, #1]
 801ac3a:	fb0e aa02 	mla	sl, lr, r2, sl
 801ac3e:	fa1f fa8a 	uxth.w	sl, sl
 801ac42:	f10a 0e01 	add.w	lr, sl, #1
 801ac46:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801ac4a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ac4e:	fb0e 9902 	mla	r9, lr, r2, r9
 801ac52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ac56:	fa1f f989 	uxth.w	r9, r9
 801ac5a:	f880 a001 	strb.w	sl, [r0, #1]
 801ac5e:	f109 0201 	add.w	r2, r9, #1
 801ac62:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ac66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac6a:	f880 9002 	strb.w	r9, [r0, #2]
 801ac6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ac70:	3701      	adds	r7, #1
 801ac72:	4415      	add	r5, r2
 801ac74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac76:	4414      	add	r4, r2
 801ac78:	e756      	b.n	801ab28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ac7a:	4438      	add	r0, r7
 801ac7c:	f806 e000 	strb.w	lr, [r6, r0]
 801ac80:	4430      	add	r0, r6
 801ac82:	f880 a001 	strb.w	sl, [r0, #1]
 801ac86:	f880 b002 	strb.w	fp, [r0, #2]
 801ac8a:	e7f0      	b.n	801ac6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ac8c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ac90:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ac94:	f800 bc01 	strb.w	fp, [r0, #-1]
 801ac98:	e73d      	b.n	801ab16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ac9a:	b005      	add	sp, #20
 801ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aca0:	20056564 	.word	0x20056564

0801aca4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801aca4:	4770      	bx	lr

0801aca6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801aca6:	4770      	bx	lr

0801aca8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801aca8:	4770      	bx	lr

0801acaa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801acaa:	4770      	bx	lr

0801acac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801acac:	4770      	bx	lr

0801acae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801acae:	4770      	bx	lr

0801acb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801acb0:	4770      	bx	lr

0801acb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801acb2:	4770      	bx	lr

0801acb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801acb4:	4770      	bx	lr

0801acb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801acb6:	4770      	bx	lr

0801acb8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801acb8:	4770      	bx	lr

0801acba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801acba:	4770      	bx	lr

0801acbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801acbc:	4770      	bx	lr

0801acbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801acbe:	4770      	bx	lr

0801acc0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801acc0:	4770      	bx	lr

0801acc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801acc2:	4770      	bx	lr

0801acc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801acc4:	4770      	bx	lr

0801acc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801acc6:	4770      	bx	lr

0801acc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801acc8:	4770      	bx	lr

0801acca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801acca:	4770      	bx	lr

0801accc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801accc:	2bff      	cmp	r3, #255	; 0xff
 801acce:	b508      	push	{r3, lr}
 801acd0:	d04f      	beq.n	801ad72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801acd2:	2a2c      	cmp	r2, #44	; 0x2c
 801acd4:	d032      	beq.n	801ad3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801acd6:	d80f      	bhi.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801acd8:	2a08      	cmp	r2, #8
 801acda:	d046      	beq.n	801ad6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801acdc:	d805      	bhi.n	801acea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801acde:	2a04      	cmp	r2, #4
 801ace0:	d041      	beq.n	801ad66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ace2:	2a05      	cmp	r2, #5
 801ace4:	d03d      	beq.n	801ad62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ace6:	2000      	movs	r0, #0
 801ace8:	e027      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801acea:	2a0a      	cmp	r2, #10
 801acec:	d03d      	beq.n	801ad6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801acee:	d301      	bcc.n	801acf4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801acf0:	2a0b      	cmp	r2, #11
 801acf2:	d1f8      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801acf4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801acf6:	e020      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801acf8:	2a30      	cmp	r2, #48	; 0x30
 801acfa:	d038      	beq.n	801ad6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801acfc:	d808      	bhi.n	801ad10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801acfe:	2a2e      	cmp	r2, #46	; 0x2e
 801ad00:	684b      	ldr	r3, [r1, #4]
 801ad02:	d029      	beq.n	801ad58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801ad04:	d90b      	bls.n	801ad1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ad06:	781b      	ldrb	r3, [r3, #0]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d1ec      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad0c:	6a00      	ldr	r0, [r0, #32]
 801ad0e:	e014      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad10:	2a32      	cmp	r2, #50	; 0x32
 801ad12:	d02c      	beq.n	801ad6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ad14:	d301      	bcc.n	801ad1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801ad16:	2a33      	cmp	r2, #51	; 0x33
 801ad18:	d1e5      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad1a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ad1c:	e00d      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad1e:	781b      	ldrb	r3, [r3, #0]
 801ad20:	2b01      	cmp	r3, #1
 801ad22:	d009      	beq.n	801ad38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ad24:	d3f2      	bcc.n	801ad0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801ad26:	2b02      	cmp	r3, #2
 801ad28:	d1dd      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad2a:	4b39      	ldr	r3, [pc, #228]	; (801ae10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ad2c:	f240 4186 	movw	r1, #1158	; 0x486
 801ad30:	4a38      	ldr	r2, [pc, #224]	; (801ae14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ad32:	4839      	ldr	r0, [pc, #228]	; (801ae18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801ad34:	f008 fa66 	bl	8023204 <__assert_func>
 801ad38:	6900      	ldr	r0, [r0, #16]
 801ad3a:	bd08      	pop	{r3, pc}
 801ad3c:	684b      	ldr	r3, [r1, #4]
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d007      	beq.n	801ad54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801ad44:	d30b      	bcc.n	801ad5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ad46:	2b02      	cmp	r3, #2
 801ad48:	d1cd      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad4a:	4b31      	ldr	r3, [pc, #196]	; (801ae10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ad4c:	f240 4192 	movw	r1, #1170	; 0x492
 801ad50:	4a30      	ldr	r2, [pc, #192]	; (801ae14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ad52:	e7ee      	b.n	801ad32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad54:	6880      	ldr	r0, [r0, #8]
 801ad56:	e7f0      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad58:	781b      	ldrb	r3, [r3, #0]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d1c3      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad5e:	6980      	ldr	r0, [r0, #24]
 801ad60:	e7eb      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ad64:	e7e9      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad66:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ad68:	e7e7      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ad6c:	e7e5      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ad70:	e7e3      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad72:	2a2c      	cmp	r2, #44	; 0x2c
 801ad74:	d030      	beq.n	801add8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801ad76:	d80f      	bhi.n	801ad98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801ad78:	2a08      	cmp	r2, #8
 801ad7a:	d044      	beq.n	801ae06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ad7c:	d805      	bhi.n	801ad8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ad7e:	2a04      	cmp	r2, #4
 801ad80:	d03f      	beq.n	801ae02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801ad82:	2a05      	cmp	r2, #5
 801ad84:	d1af      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801ad88:	e7d7      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad8a:	2a0a      	cmp	r2, #10
 801ad8c:	d03b      	beq.n	801ae06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ad8e:	d301      	bcc.n	801ad94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ad90:	2a0b      	cmp	r2, #11
 801ad92:	d1a8      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ad94:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801ad96:	e7d0      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ad98:	2a30      	cmp	r2, #48	; 0x30
 801ad9a:	d036      	beq.n	801ae0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ad9c:	d808      	bhi.n	801adb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801ad9e:	2a2e      	cmp	r2, #46	; 0x2e
 801ada0:	684b      	ldr	r3, [r1, #4]
 801ada2:	d028      	beq.n	801adf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801ada4:	d90b      	bls.n	801adbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d19c      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801adac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801adae:	e7c4      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801adb0:	2a32      	cmp	r2, #50	; 0x32
 801adb2:	d02a      	beq.n	801ae0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801adb4:	d301      	bcc.n	801adba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801adb6:	2a33      	cmp	r2, #51	; 0x33
 801adb8:	d195      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801adba:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801adbc:	e7bd      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801adbe:	781b      	ldrb	r3, [r3, #0]
 801adc0:	2b01      	cmp	r3, #1
 801adc2:	d007      	beq.n	801add4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801adc4:	d3f2      	bcc.n	801adac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801adc6:	2b02      	cmp	r3, #2
 801adc8:	d18d      	bne.n	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801adca:	4b11      	ldr	r3, [pc, #68]	; (801ae10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801adcc:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801add0:	4a10      	ldr	r2, [pc, #64]	; (801ae14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801add2:	e7ae      	b.n	801ad32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801add4:	6940      	ldr	r0, [r0, #20]
 801add6:	e7b0      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801add8:	684b      	ldr	r3, [r1, #4]
 801adda:	781b      	ldrb	r3, [r3, #0]
 801addc:	2b01      	cmp	r3, #1
 801adde:	d008      	beq.n	801adf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801ade0:	d30d      	bcc.n	801adfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ade2:	2b02      	cmp	r3, #2
 801ade4:	f47f af7f 	bne.w	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ade8:	4b09      	ldr	r3, [pc, #36]	; (801ae10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801adea:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801adee:	4a09      	ldr	r2, [pc, #36]	; (801ae14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801adf0:	e79f      	b.n	801ad32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801adf2:	68c0      	ldr	r0, [r0, #12]
 801adf4:	e7a1      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801adf6:	781b      	ldrb	r3, [r3, #0]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	f47f af74 	bne.w	801ace6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801adfe:	69c0      	ldr	r0, [r0, #28]
 801ae00:	e79b      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ae02:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ae04:	e799      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ae06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ae08:	e797      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ae0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ae0c:	e795      	b.n	801ad3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ae0e:	bf00      	nop
 801ae10:	08027c41 	.word	0x08027c41
 801ae14:	08028464 	.word	0x08028464
 801ae18:	08027c8d 	.word	0x08027c8d

0801ae1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae20:	b085      	sub	sp, #20
 801ae22:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801ae26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ae28:	f1be 0f00 	cmp.w	lr, #0
 801ae2c:	f000 8114 	beq.w	801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801ae30:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801ae34:	f1bc 0f00 	cmp.w	ip, #0
 801ae38:	f340 810e 	ble.w	801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801ae3c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ae40:	2800      	cmp	r0, #0
 801ae42:	f340 8109 	ble.w	801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801ae46:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801ae4a:	4350      	muls	r0, r2
 801ae4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae50:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801ae54:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801ae58:	eba2 060c 	sub.w	r6, r2, ip
 801ae5c:	fb02 3305 	mla	r3, r2, r5, r3
 801ae60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae64:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ae68:	fa5f f88b 	uxtb.w	r8, fp
 801ae6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae70:	fa5f f78a 	uxtb.w	r7, sl
 801ae74:	4419      	add	r1, r3
 801ae76:	fa5f f984 	uxtb.w	r9, r4
 801ae7a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ae7e:	4408      	add	r0, r1
 801ae80:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801ae84:	d03e      	beq.n	801af04 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801ae86:	fa1f f58e 	uxth.w	r5, lr
 801ae8a:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801ae8e:	4463      	add	r3, ip
 801ae90:	fb08 f405 	mul.w	r4, r8, r5
 801ae94:	b292      	uxth	r2, r2
 801ae96:	436f      	muls	r7, r5
 801ae98:	fb09 f505 	mul.w	r5, r9, r5
 801ae9c:	4281      	cmp	r1, r0
 801ae9e:	f080 80db 	bcs.w	801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801aea2:	eb01 0c03 	add.w	ip, r1, r3
 801aea6:	458c      	cmp	ip, r1
 801aea8:	f101 0e03 	add.w	lr, r1, #3
 801aeac:	d928      	bls.n	801af00 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801aeae:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801aeb2:	fb11 f102 	smulbb	r1, r1, r2
 801aeb6:	4429      	add	r1, r5
 801aeb8:	b289      	uxth	r1, r1
 801aeba:	f101 0801 	add.w	r8, r1, #1
 801aebe:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aec2:	1209      	asrs	r1, r1, #8
 801aec4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801aec8:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801aecc:	fb11 f102 	smulbb	r1, r1, r2
 801aed0:	4439      	add	r1, r7
 801aed2:	b289      	uxth	r1, r1
 801aed4:	f101 0801 	add.w	r8, r1, #1
 801aed8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aedc:	1209      	asrs	r1, r1, #8
 801aede:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801aee2:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801aee6:	fb11 f102 	smulbb	r1, r1, r2
 801aeea:	4421      	add	r1, r4
 801aeec:	b289      	uxth	r1, r1
 801aeee:	f101 0801 	add.w	r8, r1, #1
 801aef2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aef6:	1209      	asrs	r1, r1, #8
 801aef8:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801aefc:	4671      	mov	r1, lr
 801aefe:	e7d2      	b.n	801aea6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801af00:	4431      	add	r1, r6
 801af02:	e7cb      	b.n	801ae9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801af04:	f012 0503 	ands.w	r5, r2, #3
 801af08:	d00f      	beq.n	801af2a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801af0a:	4463      	add	r3, ip
 801af0c:	4281      	cmp	r1, r0
 801af0e:	f080 80a3 	bcs.w	801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801af12:	18ca      	adds	r2, r1, r3
 801af14:	4291      	cmp	r1, r2
 801af16:	f080 809d 	bcs.w	801b054 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801af1a:	f881 9000 	strb.w	r9, [r1]
 801af1e:	3103      	adds	r1, #3
 801af20:	f801 7c02 	strb.w	r7, [r1, #-2]
 801af24:	f801 8c01 	strb.w	r8, [r1, #-1]
 801af28:	e7f4      	b.n	801af14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801af2a:	f001 0603 	and.w	r6, r1, #3
 801af2e:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801af32:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801af36:	4463      	add	r3, ip
 801af38:	2e02      	cmp	r6, #2
 801af3a:	b2bf      	uxth	r7, r7
 801af3c:	fa1f fa8a 	uxth.w	sl, sl
 801af40:	d017      	beq.n	801af72 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801af42:	2e03      	cmp	r6, #3
 801af44:	d00c      	beq.n	801af60 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801af46:	2e01      	cmp	r6, #1
 801af48:	d11f      	bne.n	801af8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801af4a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801af4e:	460d      	mov	r5, r1
 801af50:	4285      	cmp	r5, r0
 801af52:	d230      	bcs.n	801afb6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801af54:	f885 9000 	strb.w	r9, [r5]
 801af58:	f8a5 7001 	strh.w	r7, [r5, #1]
 801af5c:	4435      	add	r5, r6
 801af5e:	e7f7      	b.n	801af50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801af60:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801af64:	460d      	mov	r5, r1
 801af66:	4285      	cmp	r5, r0
 801af68:	d20c      	bcs.n	801af84 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801af6a:	f885 9000 	strb.w	r9, [r5]
 801af6e:	4435      	add	r5, r6
 801af70:	e7f9      	b.n	801af66 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801af72:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801af76:	460d      	mov	r5, r1
 801af78:	4285      	cmp	r5, r0
 801af7a:	d218      	bcs.n	801afae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801af7c:	f8a5 a000 	strh.w	sl, [r5]
 801af80:	4435      	add	r5, r6
 801af82:	e7f9      	b.n	801af78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801af84:	3b01      	subs	r3, #1
 801af86:	3101      	adds	r1, #1
 801af88:	2501      	movs	r5, #1
 801af8a:	f003 0603 	and.w	r6, r3, #3
 801af8e:	2e02      	cmp	r6, #2
 801af90:	d021      	beq.n	801afd6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801af92:	2e03      	cmp	r6, #3
 801af94:	d013      	beq.n	801afbe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801af96:	2e01      	cmp	r6, #1
 801af98:	d126      	bne.n	801afe8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801af9a:	3b01      	subs	r3, #1
 801af9c:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801afa0:	18ce      	adds	r6, r1, r3
 801afa2:	4286      	cmp	r6, r0
 801afa4:	d220      	bcs.n	801afe8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801afa6:	f886 8000 	strb.w	r8, [r6]
 801afaa:	443e      	add	r6, r7
 801afac:	e7f9      	b.n	801afa2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801afae:	3b02      	subs	r3, #2
 801afb0:	3102      	adds	r1, #2
 801afb2:	2502      	movs	r5, #2
 801afb4:	e7e9      	b.n	801af8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801afb6:	3b03      	subs	r3, #3
 801afb8:	3103      	adds	r1, #3
 801afba:	2500      	movs	r5, #0
 801afbc:	e7e5      	b.n	801af8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801afbe:	3b03      	subs	r3, #3
 801afc0:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801afc4:	18ce      	adds	r6, r1, r3
 801afc6:	4286      	cmp	r6, r0
 801afc8:	d20e      	bcs.n	801afe8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801afca:	f8a6 a000 	strh.w	sl, [r6]
 801afce:	f886 8002 	strb.w	r8, [r6, #2]
 801afd2:	443e      	add	r6, r7
 801afd4:	e7f7      	b.n	801afc6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801afd6:	3b02      	subs	r3, #2
 801afd8:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801afdc:	18ce      	adds	r6, r1, r3
 801afde:	4286      	cmp	r6, r0
 801afe0:	d202      	bcs.n	801afe8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801afe2:	8037      	strh	r7, [r6, #0]
 801afe4:	4466      	add	r6, ip
 801afe6:	e7fa      	b.n	801afde <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801afe8:	079e      	lsls	r6, r3, #30
 801afea:	d006      	beq.n	801affa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801afec:	4b1c      	ldr	r3, [pc, #112]	; (801b060 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801afee:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801aff2:	4a1c      	ldr	r2, [pc, #112]	; (801b064 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801aff4:	481c      	ldr	r0, [pc, #112]	; (801b068 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801aff6:	f008 f905 	bl	8023204 <__assert_func>
 801affa:	b36b      	cbz	r3, 801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801affc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801b000:	109b      	asrs	r3, r3, #2
 801b002:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b006:	2703      	movs	r7, #3
 801b008:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801b00c:	9601      	str	r6, [sp, #4]
 801b00e:	0426      	lsls	r6, r4, #16
 801b010:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801b014:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801b018:	9602      	str	r6, [sp, #8]
 801b01a:	009e      	lsls	r6, r3, #2
 801b01c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801b020:	9403      	str	r4, [sp, #12]
 801b022:	009b      	lsls	r3, r3, #2
 801b024:	4281      	cmp	r1, r0
 801b026:	d217      	bcs.n	801b058 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801b028:	eb01 0c06 	add.w	ip, r1, r6
 801b02c:	462a      	mov	r2, r5
 801b02e:	4561      	cmp	r1, ip
 801b030:	d20e      	bcs.n	801b050 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801b032:	f10d 0e10 	add.w	lr, sp, #16
 801b036:	1c54      	adds	r4, r2, #1
 801b038:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801b03c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801b040:	f841 2b04 	str.w	r2, [r1], #4
 801b044:	fb94 f2f7 	sdiv	r2, r4, r7
 801b048:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b04c:	1aa2      	subs	r2, r4, r2
 801b04e:	e7ee      	b.n	801b02e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801b050:	4419      	add	r1, r3
 801b052:	e7e7      	b.n	801b024 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801b054:	4431      	add	r1, r6
 801b056:	e759      	b.n	801af0c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801b058:	b005      	add	sp, #20
 801b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b05e:	bf00      	nop
 801b060:	08027b5d 	.word	0x08027b5d
 801b064:	080281ae 	.word	0x080281ae
 801b068:	08027c8d 	.word	0x08027c8d

0801b06c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801b06c:	b508      	push	{r3, lr}
 801b06e:	4b06      	ldr	r3, [pc, #24]	; (801b088 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801b070:	8818      	ldrh	r0, [r3, #0]
 801b072:	b928      	cbnz	r0, 801b080 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801b074:	4b05      	ldr	r3, [pc, #20]	; (801b08c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801b076:	214d      	movs	r1, #77	; 0x4d
 801b078:	4a05      	ldr	r2, [pc, #20]	; (801b090 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801b07a:	4806      	ldr	r0, [pc, #24]	; (801b094 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801b07c:	f008 f8c2 	bl	8023204 <__assert_func>
 801b080:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b084:	b280      	uxth	r0, r0
 801b086:	bd08      	pop	{r3, pc}
 801b088:	20056536 	.word	0x20056536
 801b08c:	08027eda 	.word	0x08027eda
 801b090:	08028429 	.word	0x08028429
 801b094:	08027f1c 	.word	0x08027f1c

0801b098 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b09c:	b08b      	sub	sp, #44	; 0x2c
 801b09e:	460d      	mov	r5, r1
 801b0a0:	4616      	mov	r6, r2
 801b0a2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801b0a6:	f1b8 0f00 	cmp.w	r8, #0
 801b0aa:	d045      	beq.n	801b138 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801b0ac:	6810      	ldr	r0, [r2, #0]
 801b0ae:	ac06      	add	r4, sp, #24
 801b0b0:	6851      	ldr	r1, [r2, #4]
 801b0b2:	4f50      	ldr	r7, [pc, #320]	; (801b1f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801b0b4:	c403      	stmia	r4!, {r0, r1}
 801b0b6:	6818      	ldr	r0, [r3, #0]
 801b0b8:	ac08      	add	r4, sp, #32
 801b0ba:	6859      	ldr	r1, [r3, #4]
 801b0bc:	c403      	stmia	r4!, {r0, r1}
 801b0be:	a806      	add	r0, sp, #24
 801b0c0:	f7fa fe62 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b0c4:	4631      	mov	r1, r6
 801b0c6:	a808      	add	r0, sp, #32
 801b0c8:	f7fa fe46 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b0cc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b0d0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b0d4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b0d8:	6838      	ldr	r0, [r7, #0]
 801b0da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b0de:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801b0e2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801b0e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b0ea:	440d      	add	r5, r1
 801b0ec:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b0f0:	440a      	add	r2, r1
 801b0f2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b0f6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b0fa:	4413      	add	r3, r2
 801b0fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b100:	6803      	ldr	r3, [r0, #0]
 801b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b104:	4798      	blx	r3
 801b106:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b10a:	d018      	beq.n	801b13e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801b10c:	f010 0f04 	tst.w	r0, #4
 801b110:	6838      	ldr	r0, [r7, #0]
 801b112:	d017      	beq.n	801b144 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b114:	2700      	movs	r7, #0
 801b116:	6801      	ldr	r1, [r0, #0]
 801b118:	b2a4      	uxth	r4, r4
 801b11a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b11e:	b2b6      	uxth	r6, r6
 801b120:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b124:	9401      	str	r4, [sp, #4]
 801b126:	9600      	str	r6, [sp, #0]
 801b128:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801b12c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801b130:	9702      	str	r7, [sp, #8]
 801b132:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801b134:	4629      	mov	r1, r5
 801b136:	47a0      	blx	r4
 801b138:	b00b      	add	sp, #44	; 0x2c
 801b13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b13e:	f010 0f01 	tst.w	r0, #1
 801b142:	e7e5      	b.n	801b110 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801b144:	6803      	ldr	r3, [r0, #0]
 801b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b148:	4798      	blx	r3
 801b14a:	4a2b      	ldr	r2, [pc, #172]	; (801b1f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801b14c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b150:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b154:	8813      	ldrh	r3, [r2, #0]
 801b156:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801b15a:	fb03 f404 	mul.w	r4, r3, r4
 801b15e:	fb03 c101 	mla	r1, r3, r1, ip
 801b162:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b166:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b16a:	4408      	add	r0, r1
 801b16c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801b170:	4404      	add	r4, r0
 801b172:	d02e      	beq.n	801b1d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801b174:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b178:	1b9b      	subs	r3, r3, r6
 801b17a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801b17e:	1b96      	subs	r6, r2, r6
 801b180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b184:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b188:	42a0      	cmp	r0, r4
 801b18a:	d22d      	bcs.n	801b1e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801b18c:	eb00 0e01 	add.w	lr, r0, r1
 801b190:	4570      	cmp	r0, lr
 801b192:	d210      	bcs.n	801b1b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801b194:	f890 9000 	ldrb.w	r9, [r0]
 801b198:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b19c:	fb19 f90c 	smulbb	r9, r9, ip
 801b1a0:	fb02 9208 	mla	r2, r2, r8, r9
 801b1a4:	b292      	uxth	r2, r2
 801b1a6:	f102 0901 	add.w	r9, r2, #1
 801b1aa:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801b1ae:	1212      	asrs	r2, r2, #8
 801b1b0:	f800 2b01 	strb.w	r2, [r0], #1
 801b1b4:	e7ec      	b.n	801b190 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801b1b6:	4418      	add	r0, r3
 801b1b8:	4435      	add	r5, r6
 801b1ba:	e7e5      	b.n	801b188 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801b1bc:	8813      	ldrh	r3, [r2, #0]
 801b1be:	1b9b      	subs	r3, r3, r6
 801b1c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1c4:	4418      	add	r0, r3
 801b1c6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b1ca:	1b9b      	subs	r3, r3, r6
 801b1cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1d0:	441d      	add	r5, r3
 801b1d2:	42a0      	cmp	r0, r4
 801b1d4:	d208      	bcs.n	801b1e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801b1d6:	eb00 0c01 	add.w	ip, r0, r1
 801b1da:	4560      	cmp	r0, ip
 801b1dc:	d2ee      	bcs.n	801b1bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801b1de:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b1e2:	f800 3b01 	strb.w	r3, [r0], #1
 801b1e6:	e7f8      	b.n	801b1da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801b1e8:	6838      	ldr	r0, [r7, #0]
 801b1ea:	6803      	ldr	r3, [r0, #0]
 801b1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1ee:	4798      	blx	r3
 801b1f0:	e7a2      	b.n	801b138 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801b1f2:	bf00      	nop
 801b1f4:	2005653c 	.word	0x2005653c
 801b1f8:	20056536 	.word	0x20056536

0801b1fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b1fc:	b510      	push	{r4, lr}
 801b1fe:	4604      	mov	r4, r0
 801b200:	2104      	movs	r1, #4
 801b202:	f007 fef8 	bl	8022ff6 <_ZdlPvj>
 801b206:	4620      	mov	r0, r4
 801b208:	bd10      	pop	{r4, pc}

0801b20a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b20a:	b510      	push	{r4, lr}
 801b20c:	4604      	mov	r4, r0
 801b20e:	2104      	movs	r1, #4
 801b210:	f007 fef1 	bl	8022ff6 <_ZdlPvj>
 801b214:	4620      	mov	r0, r4
 801b216:	bd10      	pop	{r4, pc}

0801b218 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b218:	b510      	push	{r4, lr}
 801b21a:	4604      	mov	r4, r0
 801b21c:	2104      	movs	r1, #4
 801b21e:	f007 feea 	bl	8022ff6 <_ZdlPvj>
 801b222:	4620      	mov	r0, r4
 801b224:	bd10      	pop	{r4, pc}

0801b226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b226:	b510      	push	{r4, lr}
 801b228:	4604      	mov	r4, r0
 801b22a:	2104      	movs	r1, #4
 801b22c:	f007 fee3 	bl	8022ff6 <_ZdlPvj>
 801b230:	4620      	mov	r0, r4
 801b232:	bd10      	pop	{r4, pc}

0801b234 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b234:	b510      	push	{r4, lr}
 801b236:	4604      	mov	r4, r0
 801b238:	2104      	movs	r1, #4
 801b23a:	f007 fedc 	bl	8022ff6 <_ZdlPvj>
 801b23e:	4620      	mov	r0, r4
 801b240:	bd10      	pop	{r4, pc}

0801b242 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b242:	b510      	push	{r4, lr}
 801b244:	4604      	mov	r4, r0
 801b246:	2104      	movs	r1, #4
 801b248:	f007 fed5 	bl	8022ff6 <_ZdlPvj>
 801b24c:	4620      	mov	r0, r4
 801b24e:	bd10      	pop	{r4, pc}

0801b250 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b250:	b510      	push	{r4, lr}
 801b252:	4604      	mov	r4, r0
 801b254:	2104      	movs	r1, #4
 801b256:	f007 fece 	bl	8022ff6 <_ZdlPvj>
 801b25a:	4620      	mov	r0, r4
 801b25c:	bd10      	pop	{r4, pc}

0801b25e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b25e:	b510      	push	{r4, lr}
 801b260:	4604      	mov	r4, r0
 801b262:	2104      	movs	r1, #4
 801b264:	f007 fec7 	bl	8022ff6 <_ZdlPvj>
 801b268:	4620      	mov	r0, r4
 801b26a:	bd10      	pop	{r4, pc}

0801b26c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b26c:	b510      	push	{r4, lr}
 801b26e:	4604      	mov	r4, r0
 801b270:	2104      	movs	r1, #4
 801b272:	f007 fec0 	bl	8022ff6 <_ZdlPvj>
 801b276:	4620      	mov	r0, r4
 801b278:	bd10      	pop	{r4, pc}

0801b27a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b27a:	b510      	push	{r4, lr}
 801b27c:	4604      	mov	r4, r0
 801b27e:	2104      	movs	r1, #4
 801b280:	f007 feb9 	bl	8022ff6 <_ZdlPvj>
 801b284:	4620      	mov	r0, r4
 801b286:	bd10      	pop	{r4, pc}

0801b288 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b288:	b510      	push	{r4, lr}
 801b28a:	4604      	mov	r4, r0
 801b28c:	2104      	movs	r1, #4
 801b28e:	f007 feb2 	bl	8022ff6 <_ZdlPvj>
 801b292:	4620      	mov	r0, r4
 801b294:	bd10      	pop	{r4, pc}

0801b296 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b296:	b510      	push	{r4, lr}
 801b298:	4604      	mov	r4, r0
 801b29a:	2104      	movs	r1, #4
 801b29c:	f007 feab 	bl	8022ff6 <_ZdlPvj>
 801b2a0:	4620      	mov	r0, r4
 801b2a2:	bd10      	pop	{r4, pc}

0801b2a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b2a4:	b510      	push	{r4, lr}
 801b2a6:	4604      	mov	r4, r0
 801b2a8:	2104      	movs	r1, #4
 801b2aa:	f007 fea4 	bl	8022ff6 <_ZdlPvj>
 801b2ae:	4620      	mov	r0, r4
 801b2b0:	bd10      	pop	{r4, pc}

0801b2b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b2b2:	b510      	push	{r4, lr}
 801b2b4:	4604      	mov	r4, r0
 801b2b6:	2104      	movs	r1, #4
 801b2b8:	f007 fe9d 	bl	8022ff6 <_ZdlPvj>
 801b2bc:	4620      	mov	r0, r4
 801b2be:	bd10      	pop	{r4, pc}

0801b2c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b2c0:	b510      	push	{r4, lr}
 801b2c2:	4604      	mov	r4, r0
 801b2c4:	2104      	movs	r1, #4
 801b2c6:	f007 fe96 	bl	8022ff6 <_ZdlPvj>
 801b2ca:	4620      	mov	r0, r4
 801b2cc:	bd10      	pop	{r4, pc}

0801b2ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b2ce:	b510      	push	{r4, lr}
 801b2d0:	4604      	mov	r4, r0
 801b2d2:	2104      	movs	r1, #4
 801b2d4:	f007 fe8f 	bl	8022ff6 <_ZdlPvj>
 801b2d8:	4620      	mov	r0, r4
 801b2da:	bd10      	pop	{r4, pc}

0801b2dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b2dc:	b510      	push	{r4, lr}
 801b2de:	4604      	mov	r4, r0
 801b2e0:	2104      	movs	r1, #4
 801b2e2:	f007 fe88 	bl	8022ff6 <_ZdlPvj>
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	bd10      	pop	{r4, pc}

0801b2ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b2ea:	b510      	push	{r4, lr}
 801b2ec:	4604      	mov	r4, r0
 801b2ee:	2104      	movs	r1, #4
 801b2f0:	f007 fe81 	bl	8022ff6 <_ZdlPvj>
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	bd10      	pop	{r4, pc}

0801b2f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b2f8:	b510      	push	{r4, lr}
 801b2fa:	4604      	mov	r4, r0
 801b2fc:	2104      	movs	r1, #4
 801b2fe:	f007 fe7a 	bl	8022ff6 <_ZdlPvj>
 801b302:	4620      	mov	r0, r4
 801b304:	bd10      	pop	{r4, pc}

0801b306 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b306:	b510      	push	{r4, lr}
 801b308:	4604      	mov	r4, r0
 801b30a:	2104      	movs	r1, #4
 801b30c:	f007 fe73 	bl	8022ff6 <_ZdlPvj>
 801b310:	4620      	mov	r0, r4
 801b312:	bd10      	pop	{r4, pc}

0801b314 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b316:	4606      	mov	r6, r0
 801b318:	b087      	sub	sp, #28
 801b31a:	4615      	mov	r5, r2
 801b31c:	461f      	mov	r7, r3
 801b31e:	b343      	cbz	r3, 801b372 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801b320:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b324:	2b00      	cmp	r3, #0
 801b326:	dd24      	ble.n	801b372 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801b328:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	dd20      	ble.n	801b372 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801b330:	6808      	ldr	r0, [r1, #0]
 801b332:	aa04      	add	r2, sp, #16
 801b334:	6849      	ldr	r1, [r1, #4]
 801b336:	4c1a      	ldr	r4, [pc, #104]	; (801b3a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801b338:	c203      	stmia	r2!, {r0, r1}
 801b33a:	a804      	add	r0, sp, #16
 801b33c:	f7fa fd24 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b340:	6820      	ldr	r0, [r4, #0]
 801b342:	6803      	ldr	r3, [r0, #0]
 801b344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b346:	4798      	blx	r3
 801b348:	2fff      	cmp	r7, #255	; 0xff
 801b34a:	d014      	beq.n	801b376 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b34c:	f010 0f08 	tst.w	r0, #8
 801b350:	6820      	ldr	r0, [r4, #0]
 801b352:	d013      	beq.n	801b37c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801b354:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b358:	6801      	ldr	r1, [r0, #0]
 801b35a:	9401      	str	r4, [sp, #4]
 801b35c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b360:	9702      	str	r7, [sp, #8]
 801b362:	9400      	str	r4, [sp, #0]
 801b364:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b368:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801b36a:	4629      	mov	r1, r5
 801b36c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b370:	47a0      	blx	r4
 801b372:	b007      	add	sp, #28
 801b374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b376:	f010 0f02 	tst.w	r0, #2
 801b37a:	e7e9      	b.n	801b350 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801b37c:	6803      	ldr	r3, [r0, #0]
 801b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b380:	4798      	blx	r3
 801b382:	4b08      	ldr	r3, [pc, #32]	; (801b3a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801b384:	4601      	mov	r1, r0
 801b386:	4630      	mov	r0, r6
 801b388:	881a      	ldrh	r2, [r3, #0]
 801b38a:	6833      	ldr	r3, [r6, #0]
 801b38c:	e9cd 5700 	strd	r5, r7, [sp]
 801b390:	69dd      	ldr	r5, [r3, #28]
 801b392:	ab04      	add	r3, sp, #16
 801b394:	47a8      	blx	r5
 801b396:	6820      	ldr	r0, [r4, #0]
 801b398:	6803      	ldr	r3, [r0, #0]
 801b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b39c:	4798      	blx	r3
 801b39e:	e7e8      	b.n	801b372 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801b3a0:	2005653c 	.word	0x2005653c
 801b3a4:	20056536 	.word	0x20056536

0801b3a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ac:	4db4      	ldr	r5, [pc, #720]	; (801b680 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801b3ae:	4690      	mov	r8, r2
 801b3b0:	b08d      	sub	sp, #52	; 0x34
 801b3b2:	4604      	mov	r4, r0
 801b3b4:	682a      	ldr	r2, [r5, #0]
 801b3b6:	4689      	mov	r9, r1
 801b3b8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801b3bc:	2a02      	cmp	r2, #2
 801b3be:	d106      	bne.n	801b3ce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801b3c0:	4bb0      	ldr	r3, [pc, #704]	; (801b684 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801b3c2:	f240 11ed 	movw	r1, #493	; 0x1ed
 801b3c6:	4ab0      	ldr	r2, [pc, #704]	; (801b688 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801b3c8:	48b0      	ldr	r0, [pc, #704]	; (801b68c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801b3ca:	f007 ff1b 	bl	8023204 <__assert_func>
 801b3ce:	ae0c      	add	r6, sp, #48	; 0x30
 801b3d0:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801b3d4:	4630      	mov	r0, r6
 801b3d6:	f7fe f815 	bl	8019404 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b3da:	6823      	ldr	r3, [r4, #0]
 801b3dc:	4607      	mov	r7, r0
 801b3de:	4620      	mov	r0, r4
 801b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3e2:	4798      	blx	r3
 801b3e4:	4287      	cmp	r7, r0
 801b3e6:	d004      	beq.n	801b3f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801b3e8:	4ba9      	ldr	r3, [pc, #676]	; (801b690 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801b3ea:	f240 11ef 	movw	r1, #495	; 0x1ef
 801b3ee:	4aa6      	ldr	r2, [pc, #664]	; (801b688 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801b3f0:	e7ea      	b.n	801b3c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b3f2:	4630      	mov	r0, r6
 801b3f4:	f7fd ff7c 	bl	80192f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b3f8:	4607      	mov	r7, r0
 801b3fa:	b920      	cbnz	r0, 801b406 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801b3fc:	4ba5      	ldr	r3, [pc, #660]	; (801b694 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801b3fe:	f240 11f1 	movw	r1, #497	; 0x1f1
 801b402:	4aa1      	ldr	r2, [pc, #644]	; (801b688 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801b404:	e7e0      	b.n	801b3c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b406:	f8d8 0000 	ldr.w	r0, [r8]
 801b40a:	ab06      	add	r3, sp, #24
 801b40c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b410:	f9b8 a000 	ldrsh.w	sl, [r8]
 801b414:	c303      	stmia	r3!, {r0, r1}
 801b416:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b41a:	ab08      	add	r3, sp, #32
 801b41c:	f8d9 0000 	ldr.w	r0, [r9]
 801b420:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801b424:	c303      	stmia	r3!, {r0, r1}
 801b426:	4630      	mov	r0, r6
 801b428:	f7fd feee 	bl	8019208 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b42c:	4680      	mov	r8, r0
 801b42e:	4630      	mov	r0, r6
 801b430:	f7fd ff24 	bl	801927c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b434:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801b438:	f10d 0920 	add.w	r9, sp, #32
 801b43c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801b440:	a806      	add	r0, sp, #24
 801b442:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b446:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801b44a:	f7fa fc9d 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b44e:	4648      	mov	r0, r9
 801b450:	f7fa fc9a 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b454:	a80a      	add	r0, sp, #40	; 0x28
 801b456:	f7fa fc97 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b45a:	4b8f      	ldr	r3, [pc, #572]	; (801b698 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801b45c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b460:	881e      	ldrh	r6, [r3, #0]
 801b462:	4b8e      	ldr	r3, [pc, #568]	; (801b69c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801b464:	fa0f fb86 	sxth.w	fp, r6
 801b468:	8819      	ldrh	r1, [r3, #0]
 801b46a:	4593      	cmp	fp, r2
 801b46c:	dd75      	ble.n	801b55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801b46e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801b472:	4494      	add	ip, r2
 801b474:	fa1f fc8c 	uxth.w	ip, ip
 801b478:	fa0f fa8c 	sxth.w	sl, ip
 801b47c:	f1ba 0f00 	cmp.w	sl, #0
 801b480:	dd6b      	ble.n	801b55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801b482:	fa0f f881 	sxth.w	r8, r1
 801b486:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b48a:	4598      	cmp	r8, r3
 801b48c:	dd65      	ble.n	801b55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801b48e:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801b492:	4418      	add	r0, r3
 801b494:	b280      	uxth	r0, r0
 801b496:	fa0f fe80 	sxth.w	lr, r0
 801b49a:	f1be 0f00 	cmp.w	lr, #0
 801b49e:	dd5c      	ble.n	801b55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801b4a0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801b4a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b4a8:	45d3      	cmp	fp, sl
 801b4aa:	bfc8      	it	gt
 801b4ac:	4666      	movgt	r6, ip
 801b4ae:	45f0      	cmp	r8, lr
 801b4b0:	bfc8      	it	gt
 801b4b2:	4601      	movgt	r1, r0
 801b4b4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b4b8:	1ab6      	subs	r6, r6, r2
 801b4ba:	1ac9      	subs	r1, r1, r3
 801b4bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b4c0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801b4c4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b4c8:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801b4cc:	f1bc 0f00 	cmp.w	ip, #0
 801b4d0:	f340 80aa 	ble.w	801b628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801b4d4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801b4d8:	2e00      	cmp	r6, #0
 801b4da:	f340 80a5 	ble.w	801b628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801b4de:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801b4e2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801b4e6:	4288      	cmp	r0, r1
 801b4e8:	db3b      	blt.n	801b562 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801b4ea:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801b4ee:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	db35      	blt.n	801b562 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801b4f6:	4460      	add	r0, ip
 801b4f8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801b4fc:	4461      	add	r1, ip
 801b4fe:	b200      	sxth	r0, r0
 801b500:	b209      	sxth	r1, r1
 801b502:	4288      	cmp	r0, r1
 801b504:	dc2d      	bgt.n	801b562 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801b506:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801b50a:	4432      	add	r2, r6
 801b50c:	440b      	add	r3, r1
 801b50e:	b212      	sxth	r2, r2
 801b510:	b21b      	sxth	r3, r3
 801b512:	429a      	cmp	r2, r3
 801b514:	dc25      	bgt.n	801b562 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801b516:	6823      	ldr	r3, [r4, #0]
 801b518:	4620      	mov	r0, r4
 801b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b51c:	4798      	blx	r3
 801b51e:	4682      	mov	sl, r0
 801b520:	6828      	ldr	r0, [r5, #0]
 801b522:	6803      	ldr	r3, [r0, #0]
 801b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b526:	4798      	blx	r3
 801b528:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801b52c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801b530:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b534:	9303      	str	r3, [sp, #12]
 801b536:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b53a:	1a9b      	subs	r3, r3, r2
 801b53c:	b29b      	uxth	r3, r3
 801b53e:	b21c      	sxth	r4, r3
 801b540:	2c00      	cmp	r4, #0
 801b542:	dc13      	bgt.n	801b56c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801b544:	bf18      	it	ne
 801b546:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801b54a:	463c      	mov	r4, r7
 801b54c:	bf1e      	ittt	ne
 801b54e:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801b552:	189b      	addne	r3, r3, r2
 801b554:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801b558:	e00f      	b.n	801b57a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801b55a:	2300      	movs	r3, #0
 801b55c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801b560:	e7b2      	b.n	801b4c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801b562:	4b4f      	ldr	r3, [pc, #316]	; (801b6a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801b564:	f240 11ff 	movw	r1, #511	; 0x1ff
 801b568:	4a47      	ldr	r2, [pc, #284]	; (801b688 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801b56a:	e72d      	b.n	801b3c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b56c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b570:	ebab 0303 	sub.w	r3, fp, r3
 801b574:	443c      	add	r4, r7
 801b576:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b57a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b57e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b582:	1a9b      	subs	r3, r3, r2
 801b584:	b29b      	uxth	r3, r3
 801b586:	b219      	sxth	r1, r3
 801b588:	2900      	cmp	r1, #0
 801b58a:	dd51      	ble.n	801b630 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801b58c:	9a03      	ldr	r2, [sp, #12]
 801b58e:	fb02 4401 	mla	r4, r2, r1, r4
 801b592:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801b596:	1ad3      	subs	r3, r2, r3
 801b598:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b59c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	dd41      	ble.n	801b628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801b5a4:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801b5a8:	2e00      	cmp	r6, #0
 801b5aa:	dd3d      	ble.n	801b628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801b5ac:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b5b0:	f04f 0803 	mov.w	r8, #3
 801b5b4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b5b8:	fb0a f10c 	mul.w	r1, sl, ip
 801b5bc:	fb12 1808 	smlabb	r8, r2, r8, r1
 801b5c0:	4935      	ldr	r1, [pc, #212]	; (801b698 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801b5c2:	4480      	add	r8, r0
 801b5c4:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801b5c8:	8809      	ldrh	r1, [r1, #0]
 801b5ca:	4283      	cmp	r3, r0
 801b5cc:	eba1 0202 	sub.w	r2, r1, r2
 801b5d0:	bfa8      	it	ge
 801b5d2:	4603      	movge	r3, r0
 801b5d4:	4293      	cmp	r3, r2
 801b5d6:	bfa8      	it	ge
 801b5d8:	4613      	movge	r3, r2
 801b5da:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801b5de:	4296      	cmp	r6, r2
 801b5e0:	bfa8      	it	ge
 801b5e2:	4616      	movge	r6, r2
 801b5e4:	4a2d      	ldr	r2, [pc, #180]	; (801b69c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801b5e6:	8812      	ldrh	r2, [r2, #0]
 801b5e8:	eba2 0c0c 	sub.w	ip, r2, ip
 801b5ec:	4632      	mov	r2, r6
 801b5ee:	4566      	cmp	r6, ip
 801b5f0:	bfa8      	it	ge
 801b5f2:	4662      	movge	r2, ip
 801b5f4:	4299      	cmp	r1, r3
 801b5f6:	9202      	str	r2, [sp, #8]
 801b5f8:	d12d      	bne.n	801b656 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801b5fa:	4559      	cmp	r1, fp
 801b5fc:	d12b      	bne.n	801b656 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801b5fe:	6828      	ldr	r0, [r5, #0]
 801b600:	6803      	ldr	r3, [r0, #0]
 801b602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b604:	4798      	blx	r3
 801b606:	07c3      	lsls	r3, r0, #31
 801b608:	d51b      	bpl.n	801b642 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801b60a:	6828      	ldr	r0, [r5, #0]
 801b60c:	9b02      	ldr	r3, [sp, #8]
 801b60e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801b612:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b616:	6803      	ldr	r3, [r0, #0]
 801b618:	f8cd b000 	str.w	fp, [sp]
 801b61c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801b61e:	4623      	mov	r3, r4
 801b620:	e899 0006 	ldmia.w	r9, {r1, r2}
 801b624:	47a8      	blx	r5
 801b626:	4607      	mov	r7, r0
 801b628:	4638      	mov	r0, r7
 801b62a:	b00d      	add	sp, #52	; 0x34
 801b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b630:	bf1f      	itttt	ne
 801b632:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801b636:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801b63a:	189b      	addne	r3, r3, r2
 801b63c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801b640:	e7ac      	b.n	801b59c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801b642:	6828      	ldr	r0, [r5, #0]
 801b644:	4642      	mov	r2, r8
 801b646:	4621      	mov	r1, r4
 801b648:	6803      	ldr	r3, [r0, #0]
 801b64a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801b64c:	9b02      	ldr	r3, [sp, #8]
 801b64e:	fb03 f30a 	mul.w	r3, r3, sl
 801b652:	47a8      	blx	r5
 801b654:	e7e8      	b.n	801b628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801b656:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801b65a:	f04f 0900 	mov.w	r9, #0
 801b65e:	9b02      	ldr	r3, [sp, #8]
 801b660:	454b      	cmp	r3, r9
 801b662:	dde1      	ble.n	801b628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801b664:	6828      	ldr	r0, [r5, #0]
 801b666:	4642      	mov	r2, r8
 801b668:	4621      	mov	r1, r4
 801b66a:	44d0      	add	r8, sl
 801b66c:	6803      	ldr	r3, [r0, #0]
 801b66e:	f109 0901 	add.w	r9, r9, #1
 801b672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b674:	461e      	mov	r6, r3
 801b676:	465b      	mov	r3, fp
 801b678:	47b0      	blx	r6
 801b67a:	9b03      	ldr	r3, [sp, #12]
 801b67c:	441c      	add	r4, r3
 801b67e:	e7ee      	b.n	801b65e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801b680:	2005653c 	.word	0x2005653c
 801b684:	08027cbf 	.word	0x08027cbf
 801b688:	0802850e 	.word	0x0802850e
 801b68c:	08027c8d 	.word	0x08027c8d
 801b690:	08027d71 	.word	0x08027d71
 801b694:	08027dc6 	.word	0x08027dc6
 801b698:	20056536 	.word	0x20056536
 801b69c:	20056538 	.word	0x20056538
 801b6a0:	08027e04 	.word	0x08027e04

0801b6a4 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	490c      	ldr	r1, [pc, #48]	; (801b6d8 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801b6a8:	6042      	str	r2, [r0, #4]
 801b6aa:	6001      	str	r1, [r0, #0]
 801b6ac:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801b6b0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801b6b4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b6b8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801b6bc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801b6c0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801b6c4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801b6c8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801b6cc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801b6d0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801b6d4:	4770      	bx	lr
 801b6d6:	bf00      	nop
 801b6d8:	080280e8 	.word	0x080280e8

0801b6dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6e0:	4616      	mov	r6, r2
 801b6e2:	b091      	sub	sp, #68	; 0x44
 801b6e4:	880a      	ldrh	r2, [r1, #0]
 801b6e6:	4607      	mov	r7, r0
 801b6e8:	4688      	mov	r8, r1
 801b6ea:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801b6ee:	b12a      	cbz	r2, 801b6fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801b6f0:	4b67      	ldr	r3, [pc, #412]	; (801b890 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801b6f2:	2160      	movs	r1, #96	; 0x60
 801b6f4:	4a67      	ldr	r2, [pc, #412]	; (801b894 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801b6f6:	4868      	ldr	r0, [pc, #416]	; (801b898 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801b6f8:	f007 fd84 	bl	8023204 <__assert_func>
 801b6fc:	6830      	ldr	r0, [r6, #0]
 801b6fe:	ac0c      	add	r4, sp, #48	; 0x30
 801b700:	6871      	ldr	r1, [r6, #4]
 801b702:	4d66      	ldr	r5, [pc, #408]	; (801b89c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801b704:	f8df a198 	ldr.w	sl, [pc, #408]	; 801b8a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801b708:	c403      	stmia	r4!, {r0, r1}
 801b70a:	6818      	ldr	r0, [r3, #0]
 801b70c:	ac0e      	add	r4, sp, #56	; 0x38
 801b70e:	6859      	ldr	r1, [r3, #4]
 801b710:	c403      	stmia	r4!, {r0, r1}
 801b712:	a80c      	add	r0, sp, #48	; 0x30
 801b714:	f7fa fb38 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b718:	4631      	mov	r1, r6
 801b71a:	a80e      	add	r0, sp, #56	; 0x38
 801b71c:	f7fa fb1c 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b720:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b724:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b728:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b72c:	6828      	ldr	r0, [r5, #0]
 801b72e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b732:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801b736:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801b73a:	440f      	add	r7, r1
 801b73c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b740:	440a      	add	r2, r1
 801b742:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b746:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b74a:	4413      	add	r3, r2
 801b74c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b750:	6803      	ldr	r3, [r0, #0]
 801b752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b754:	4798      	blx	r3
 801b756:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b75a:	6828      	ldr	r0, [r5, #0]
 801b75c:	d01d      	beq.n	801b79a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801b75e:	2201      	movs	r2, #1
 801b760:	250b      	movs	r5, #11
 801b762:	6801      	ldr	r1, [r0, #0]
 801b764:	b2a4      	uxth	r4, r4
 801b766:	b2b6      	uxth	r6, r6
 801b768:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b76c:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801b770:	f8ba 5000 	ldrh.w	r5, [sl]
 801b774:	f8cd 9010 	str.w	r9, [sp, #16]
 801b778:	9602      	str	r6, [sp, #8]
 801b77a:	9401      	str	r4, [sp, #4]
 801b77c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801b780:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b784:	9203      	str	r2, [sp, #12]
 801b786:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b78a:	9200      	str	r2, [sp, #0]
 801b78c:	4642      	mov	r2, r8
 801b78e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801b790:	4639      	mov	r1, r7
 801b792:	47a0      	blx	r4
 801b794:	b011      	add	sp, #68	; 0x44
 801b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b79a:	6803      	ldr	r3, [r0, #0]
 801b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b79e:	4798      	blx	r3
 801b7a0:	f8ba 5000 	ldrh.w	r5, [sl]
 801b7a4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b7a8:	f04f 0e04 	mov.w	lr, #4
 801b7ac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b7b0:	436e      	muls	r6, r5
 801b7b2:	fb05 2303 	mla	r3, r5, r3, r2
 801b7b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b7ba:	1b2d      	subs	r5, r5, r4
 801b7bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7c4:	4418      	add	r0, r3
 801b7c6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b7ca:	1982      	adds	r2, r0, r6
 801b7cc:	1b1b      	subs	r3, r3, r4
 801b7ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801b7d4:	4290      	cmp	r0, r2
 801b7d6:	d254      	bcs.n	801b882 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801b7d8:	eb00 0a04 	add.w	sl, r0, r4
 801b7dc:	4550      	cmp	r0, sl
 801b7de:	d24c      	bcs.n	801b87a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801b7e0:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b7e4:	fb1e e101 	smlabb	r1, lr, r1, lr
 801b7e8:	eb08 0c01 	add.w	ip, r8, r1
 801b7ec:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b7f0:	b173      	cbz	r3, 801b810 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801b7f2:	2bff      	cmp	r3, #255	; 0xff
 801b7f4:	f818 b001 	ldrb.w	fp, [r8, r1]
 801b7f8:	d10c      	bne.n	801b814 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801b7fa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b7fe:	d109      	bne.n	801b814 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801b800:	f880 b000 	strb.w	fp, [r0]
 801b804:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b808:	7043      	strb	r3, [r0, #1]
 801b80a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b80e:	7083      	strb	r3, [r0, #2]
 801b810:	3003      	adds	r0, #3
 801b812:	e7e3      	b.n	801b7dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801b814:	fb09 f103 	mul.w	r1, r9, r3
 801b818:	1c4b      	adds	r3, r1, #1
 801b81a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b81e:	7801      	ldrb	r1, [r0, #0]
 801b820:	121b      	asrs	r3, r3, #8
 801b822:	b29e      	uxth	r6, r3
 801b824:	43db      	mvns	r3, r3
 801b826:	fb1b fb06 	smulbb	fp, fp, r6
 801b82a:	b2db      	uxtb	r3, r3
 801b82c:	fb01 b103 	mla	r1, r1, r3, fp
 801b830:	b289      	uxth	r1, r1
 801b832:	f101 0b01 	add.w	fp, r1, #1
 801b836:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b83a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b83e:	fb1b fb03 	smulbb	fp, fp, r3
 801b842:	1209      	asrs	r1, r1, #8
 801b844:	7001      	strb	r1, [r0, #0]
 801b846:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b84a:	fb01 b106 	mla	r1, r1, r6, fp
 801b84e:	b289      	uxth	r1, r1
 801b850:	f101 0b01 	add.w	fp, r1, #1
 801b854:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b858:	1209      	asrs	r1, r1, #8
 801b85a:	7041      	strb	r1, [r0, #1]
 801b85c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801b860:	f890 c002 	ldrb.w	ip, [r0, #2]
 801b864:	fb1c f303 	smulbb	r3, ip, r3
 801b868:	fb01 3606 	mla	r6, r1, r6, r3
 801b86c:	b2b6      	uxth	r6, r6
 801b86e:	1c73      	adds	r3, r6, #1
 801b870:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b874:	1236      	asrs	r6, r6, #8
 801b876:	7086      	strb	r6, [r0, #2]
 801b878:	e7ca      	b.n	801b810 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801b87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b87c:	4428      	add	r0, r5
 801b87e:	441f      	add	r7, r3
 801b880:	e7a8      	b.n	801b7d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801b882:	4b06      	ldr	r3, [pc, #24]	; (801b89c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801b884:	6818      	ldr	r0, [r3, #0]
 801b886:	6803      	ldr	r3, [r0, #0]
 801b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b88a:	4798      	blx	r3
 801b88c:	e782      	b.n	801b794 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b88e:	bf00      	nop
 801b890:	08027bf1 	.word	0x08027bf1
 801b894:	08028330 	.word	0x08028330
 801b898:	08027c8d 	.word	0x08027c8d
 801b89c:	2005653c 	.word	0x2005653c
 801b8a0:	20056536 	.word	0x20056536

0801b8a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a8:	f8b1 9000 	ldrh.w	r9, [r1]
 801b8ac:	b091      	sub	sp, #68	; 0x44
 801b8ae:	4604      	mov	r4, r0
 801b8b0:	460e      	mov	r6, r1
 801b8b2:	f1b9 0f01 	cmp.w	r9, #1
 801b8b6:	4690      	mov	r8, r2
 801b8b8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b8bc:	d005      	beq.n	801b8ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801b8be:	4b68      	ldr	r3, [pc, #416]	; (801ba60 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801b8c0:	21ae      	movs	r1, #174	; 0xae
 801b8c2:	4a68      	ldr	r2, [pc, #416]	; (801ba64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801b8c4:	4868      	ldr	r0, [pc, #416]	; (801ba68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801b8c6:	f007 fc9d 	bl	8023204 <__assert_func>
 801b8ca:	6810      	ldr	r0, [r2, #0]
 801b8cc:	ad0c      	add	r5, sp, #48	; 0x30
 801b8ce:	6851      	ldr	r1, [r2, #4]
 801b8d0:	f8df a198 	ldr.w	sl, [pc, #408]	; 801ba6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801b8d4:	f8df b198 	ldr.w	fp, [pc, #408]	; 801ba70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801b8d8:	c503      	stmia	r5!, {r0, r1}
 801b8da:	6818      	ldr	r0, [r3, #0]
 801b8dc:	ad0e      	add	r5, sp, #56	; 0x38
 801b8de:	6859      	ldr	r1, [r3, #4]
 801b8e0:	c503      	stmia	r5!, {r0, r1}
 801b8e2:	a80c      	add	r0, sp, #48	; 0x30
 801b8e4:	f7fa fa50 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b8e8:	4641      	mov	r1, r8
 801b8ea:	a80e      	add	r0, sp, #56	; 0x38
 801b8ec:	f7fa fa34 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b8f0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b8f4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b8f8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b8fc:	f8da 0000 	ldr.w	r0, [sl]
 801b900:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b904:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801b908:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801b90c:	440c      	add	r4, r1
 801b90e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b912:	440a      	add	r2, r1
 801b914:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b918:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b91c:	4413      	add	r3, r2
 801b91e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b922:	6803      	ldr	r3, [r0, #0]
 801b924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b926:	4798      	blx	r3
 801b928:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b92c:	f8da 0000 	ldr.w	r0, [sl]
 801b930:	d01e      	beq.n	801b970 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801b932:	220b      	movs	r2, #11
 801b934:	6801      	ldr	r1, [r0, #0]
 801b936:	f8cd 9020 	str.w	r9, [sp, #32]
 801b93a:	b2ad      	uxth	r5, r5
 801b93c:	9207      	str	r2, [sp, #28]
 801b93e:	f8bb 2000 	ldrh.w	r2, [fp]
 801b942:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b946:	9206      	str	r2, [sp, #24]
 801b948:	2200      	movs	r2, #0
 801b94a:	9502      	str	r5, [sp, #8]
 801b94c:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801b950:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b954:	9203      	str	r2, [sp, #12]
 801b956:	fa1f f288 	uxth.w	r2, r8
 801b95a:	9201      	str	r2, [sp, #4]
 801b95c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b960:	9200      	str	r2, [sp, #0]
 801b962:	4632      	mov	r2, r6
 801b964:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801b966:	4621      	mov	r1, r4
 801b968:	47a8      	blx	r5
 801b96a:	b011      	add	sp, #68	; 0x44
 801b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b970:	6803      	ldr	r3, [r0, #0]
 801b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b974:	4798      	blx	r3
 801b976:	f8bb 2000 	ldrh.w	r2, [fp]
 801b97a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b97e:	f04f 0e03 	mov.w	lr, #3
 801b982:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b986:	4355      	muls	r5, r2
 801b988:	fa1f fc87 	uxth.w	ip, r7
 801b98c:	fb02 1303 	mla	r3, r2, r3, r1
 801b990:	eba2 0208 	sub.w	r2, r2, r8
 801b994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b99c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b9a0:	4418      	add	r0, r3
 801b9a2:	920b      	str	r2, [sp, #44]	; 0x2c
 801b9a4:	1943      	adds	r3, r0, r5
 801b9a6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b9aa:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801b9ae:	eba2 0208 	sub.w	r2, r2, r8
 801b9b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b9b6:	b2ad      	uxth	r5, r5
 801b9b8:	4298      	cmp	r0, r3
 801b9ba:	d24a      	bcs.n	801ba52 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801b9bc:	eb00 0908 	add.w	r9, r0, r8
 801b9c0:	4621      	mov	r1, r4
 801b9c2:	4548      	cmp	r0, r9
 801b9c4:	460c      	mov	r4, r1
 801b9c6:	d240      	bcs.n	801ba4a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801b9c8:	f04f 0a04 	mov.w	sl, #4
 801b9cc:	7824      	ldrb	r4, [r4, #0]
 801b9ce:	2fff      	cmp	r7, #255	; 0xff
 801b9d0:	f101 0101 	add.w	r1, r1, #1
 801b9d4:	fb1e a404 	smlabb	r4, lr, r4, sl
 801b9d8:	eb06 0a04 	add.w	sl, r6, r4
 801b9dc:	f816 b004 	ldrb.w	fp, [r6, r4]
 801b9e0:	d02b      	beq.n	801ba3a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801b9e2:	7804      	ldrb	r4, [r0, #0]
 801b9e4:	fb14 f405 	smulbb	r4, r4, r5
 801b9e8:	fb0b 440c 	mla	r4, fp, ip, r4
 801b9ec:	b2a4      	uxth	r4, r4
 801b9ee:	f104 0b01 	add.w	fp, r4, #1
 801b9f2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801b9f6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b9fa:	fb1b fb05 	smulbb	fp, fp, r5
 801b9fe:	1224      	asrs	r4, r4, #8
 801ba00:	7004      	strb	r4, [r0, #0]
 801ba02:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ba06:	fb04 b40c 	mla	r4, r4, ip, fp
 801ba0a:	b2a4      	uxth	r4, r4
 801ba0c:	f104 0b01 	add.w	fp, r4, #1
 801ba10:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ba14:	1224      	asrs	r4, r4, #8
 801ba16:	7044      	strb	r4, [r0, #1]
 801ba18:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ba1c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ba20:	fb1a fa05 	smulbb	sl, sl, r5
 801ba24:	fb04 a40c 	mla	r4, r4, ip, sl
 801ba28:	b2a4      	uxth	r4, r4
 801ba2a:	f104 0a01 	add.w	sl, r4, #1
 801ba2e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ba32:	1224      	asrs	r4, r4, #8
 801ba34:	7084      	strb	r4, [r0, #2]
 801ba36:	3003      	adds	r0, #3
 801ba38:	e7c3      	b.n	801b9c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801ba3a:	f880 b000 	strb.w	fp, [r0]
 801ba3e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ba42:	7044      	strb	r4, [r0, #1]
 801ba44:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ba48:	e7f4      	b.n	801ba34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801ba4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ba4c:	4420      	add	r0, r4
 801ba4e:	188c      	adds	r4, r1, r2
 801ba50:	e7b2      	b.n	801b9b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801ba52:	4b06      	ldr	r3, [pc, #24]	; (801ba6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ba54:	6818      	ldr	r0, [r3, #0]
 801ba56:	6803      	ldr	r3, [r0, #0]
 801ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba5a:	4798      	blx	r3
 801ba5c:	e785      	b.n	801b96a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801ba5e:	bf00      	nop
 801ba60:	08027b70 	.word	0x08027b70
 801ba64:	08028223 	.word	0x08028223
 801ba68:	08027c8d 	.word	0x08027c8d
 801ba6c:	2005653c 	.word	0x2005653c
 801ba70:	20056536 	.word	0x20056536

0801ba74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ba74:	b570      	push	{r4, r5, r6, lr}
 801ba76:	780d      	ldrb	r5, [r1, #0]
 801ba78:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801ba7c:	2d01      	cmp	r5, #1
 801ba7e:	d00d      	beq.n	801ba9c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801ba80:	d307      	bcc.n	801ba92 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801ba82:	2d02      	cmp	r5, #2
 801ba84:	d10f      	bne.n	801baa6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801ba86:	4b08      	ldr	r3, [pc, #32]	; (801baa8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801ba88:	2153      	movs	r1, #83	; 0x53
 801ba8a:	4a08      	ldr	r2, [pc, #32]	; (801baac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801ba8c:	4808      	ldr	r0, [pc, #32]	; (801bab0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801ba8e:	f007 fbb9 	bl	8023204 <__assert_func>
 801ba92:	9404      	str	r4, [sp, #16]
 801ba94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba98:	f7ff be20 	b.w	801b6dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ba9c:	9404      	str	r4, [sp, #16]
 801ba9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801baa2:	f7ff beff 	b.w	801b8a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801baa6:	bd70      	pop	{r4, r5, r6, pc}
 801baa8:	08027b12 	.word	0x08027b12
 801baac:	0802812c 	.word	0x0802812c
 801bab0:	08027c8d 	.word	0x08027c8d

0801bab4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801bab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bab8:	4605      	mov	r5, r0
 801baba:	b08d      	sub	sp, #52	; 0x34
 801babc:	460c      	mov	r4, r1
 801babe:	461f      	mov	r7, r3
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d051      	beq.n	801bb68 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801bac4:	6808      	ldr	r0, [r1, #0]
 801bac6:	ab08      	add	r3, sp, #32
 801bac8:	6849      	ldr	r1, [r1, #4]
 801baca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801bc94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801bace:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801bc98 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801bad2:	c303      	stmia	r3!, {r0, r1}
 801bad4:	6810      	ldr	r0, [r2, #0]
 801bad6:	ab0a      	add	r3, sp, #40	; 0x28
 801bad8:	6851      	ldr	r1, [r2, #4]
 801bada:	c303      	stmia	r3!, {r0, r1}
 801badc:	a808      	add	r0, sp, #32
 801bade:	f7fa f953 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bae2:	4621      	mov	r1, r4
 801bae4:	a80a      	add	r0, sp, #40	; 0x28
 801bae6:	f7fa f937 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801baea:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801baee:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801baf2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801baf6:	f8d8 0000 	ldr.w	r0, [r8]
 801bafa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bafe:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801bb02:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801bb06:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801bb0a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801bb0e:	440a      	add	r2, r1
 801bb10:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bb14:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bb18:	4413      	add	r3, r2
 801bb1a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bb1e:	6803      	ldr	r3, [r0, #0]
 801bb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb22:	4798      	blx	r3
 801bb24:	2fff      	cmp	r7, #255	; 0xff
 801bb26:	d022      	beq.n	801bb6e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801bb28:	f010 0f04 	tst.w	r0, #4
 801bb2c:	f8d8 0000 	ldr.w	r0, [r8]
 801bb30:	d020      	beq.n	801bb74 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801bb32:	2100      	movs	r1, #0
 801bb34:	f04f 0e01 	mov.w	lr, #1
 801bb38:	f8d0 c000 	ldr.w	ip, [r0]
 801bb3c:	b2a4      	uxth	r4, r4
 801bb3e:	b2b6      	uxth	r6, r6
 801bb40:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bb44:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801bb48:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801bb4c:	f8b9 e000 	ldrh.w	lr, [r9]
 801bb50:	9703      	str	r7, [sp, #12]
 801bb52:	9401      	str	r4, [sp, #4]
 801bb54:	9600      	str	r6, [sp, #0]
 801bb56:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801bb5a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801bb5e:	9102      	str	r1, [sp, #8]
 801bb60:	4629      	mov	r1, r5
 801bb62:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801bb66:	47a0      	blx	r4
 801bb68:	b00d      	add	sp, #52	; 0x34
 801bb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb6e:	f010 0f01 	tst.w	r0, #1
 801bb72:	e7db      	b.n	801bb2c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801bb74:	6803      	ldr	r3, [r0, #0]
 801bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb78:	4798      	blx	r3
 801bb7a:	f8b9 1000 	ldrh.w	r1, [r9]
 801bb7e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801bb82:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801bb86:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801bb8a:	434c      	muls	r4, r1
 801bb8c:	2fff      	cmp	r7, #255	; 0xff
 801bb8e:	fb01 2303 	mla	r3, r1, r3, r2
 801bb92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bb96:	eba1 0106 	sub.w	r1, r1, r6
 801bb9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bba2:	4418      	add	r0, r3
 801bba4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801bba8:	eba3 0606 	sub.w	r6, r3, r6
 801bbac:	4404      	add	r4, r0
 801bbae:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801bbb2:	d04a      	beq.n	801bc4a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801bbb4:	43fa      	mvns	r2, r7
 801bbb6:	b2bb      	uxth	r3, r7
 801bbb8:	b2d7      	uxtb	r7, r2
 801bbba:	42a0      	cmp	r0, r4
 801bbbc:	d263      	bcs.n	801bc86 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801bbbe:	eb00 0e0c 	add.w	lr, r0, ip
 801bbc2:	4586      	cmp	lr, r0
 801bbc4:	f100 0803 	add.w	r8, r0, #3
 801bbc8:	d93a      	bls.n	801bc40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801bbca:	f835 2b02 	ldrh.w	r2, [r5], #2
 801bbce:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801bbd2:	00d0      	lsls	r0, r2, #3
 801bbd4:	fb19 f907 	smulbb	r9, r9, r7
 801bbd8:	b2c0      	uxtb	r0, r0
 801bbda:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801bbde:	fb00 9003 	mla	r0, r0, r3, r9
 801bbe2:	b280      	uxth	r0, r0
 801bbe4:	f100 0901 	add.w	r9, r0, #1
 801bbe8:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bbec:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801bbf0:	fb19 f907 	smulbb	r9, r9, r7
 801bbf4:	1200      	asrs	r0, r0, #8
 801bbf6:	f808 0c03 	strb.w	r0, [r8, #-3]
 801bbfa:	10d0      	asrs	r0, r2, #3
 801bbfc:	1212      	asrs	r2, r2, #8
 801bbfe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bc02:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801bc06:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801bc0a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bc0e:	fb00 9003 	mla	r0, r0, r3, r9
 801bc12:	b280      	uxth	r0, r0
 801bc14:	f100 0901 	add.w	r9, r0, #1
 801bc18:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bc1c:	1200      	asrs	r0, r0, #8
 801bc1e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801bc22:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801bc26:	fb10 f007 	smulbb	r0, r0, r7
 801bc2a:	fb02 0203 	mla	r2, r2, r3, r0
 801bc2e:	b292      	uxth	r2, r2
 801bc30:	1c50      	adds	r0, r2, #1
 801bc32:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bc36:	4640      	mov	r0, r8
 801bc38:	1212      	asrs	r2, r2, #8
 801bc3a:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bc3e:	e7c0      	b.n	801bbc2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801bc40:	4408      	add	r0, r1
 801bc42:	4435      	add	r5, r6
 801bc44:	e7b9      	b.n	801bbba <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801bc46:	4408      	add	r0, r1
 801bc48:	4435      	add	r5, r6
 801bc4a:	42a0      	cmp	r0, r4
 801bc4c:	d21b      	bcs.n	801bc86 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801bc4e:	eb00 070c 	add.w	r7, r0, ip
 801bc52:	42b8      	cmp	r0, r7
 801bc54:	d2f7      	bcs.n	801bc46 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801bc56:	f835 3b02 	ldrh.w	r3, [r5], #2
 801bc5a:	3003      	adds	r0, #3
 801bc5c:	00da      	lsls	r2, r3, #3
 801bc5e:	b2d2      	uxtb	r2, r2
 801bc60:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bc64:	f800 2c03 	strb.w	r2, [r0, #-3]
 801bc68:	10da      	asrs	r2, r3, #3
 801bc6a:	121b      	asrs	r3, r3, #8
 801bc6c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801bc70:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801bc74:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801bc78:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801bc7c:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bc80:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bc84:	e7e5      	b.n	801bc52 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801bc86:	4b03      	ldr	r3, [pc, #12]	; (801bc94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801bc88:	6818      	ldr	r0, [r3, #0]
 801bc8a:	6803      	ldr	r3, [r0, #0]
 801bc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc8e:	4798      	blx	r3
 801bc90:	e76a      	b.n	801bb68 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801bc92:	bf00      	nop
 801bc94:	2005653c 	.word	0x2005653c
 801bc98:	20056536 	.word	0x20056536

0801bc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bca0:	b088      	sub	sp, #32
 801bca2:	460d      	mov	r5, r1
 801bca4:	4604      	mov	r4, r0
 801bca6:	461e      	mov	r6, r3
 801bca8:	6808      	ldr	r0, [r1, #0]
 801bcaa:	ab04      	add	r3, sp, #16
 801bcac:	6849      	ldr	r1, [r1, #4]
 801bcae:	4f5c      	ldr	r7, [pc, #368]	; (801be20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801bcb0:	c303      	stmia	r3!, {r0, r1}
 801bcb2:	6810      	ldr	r0, [r2, #0]
 801bcb4:	ab06      	add	r3, sp, #24
 801bcb6:	6851      	ldr	r1, [r2, #4]
 801bcb8:	c303      	stmia	r3!, {r0, r1}
 801bcba:	a804      	add	r0, sp, #16
 801bcbc:	f7fa f864 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bcc0:	4629      	mov	r1, r5
 801bcc2:	a806      	add	r0, sp, #24
 801bcc4:	f7fa f848 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bcc8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801bccc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801bcd0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801bcd4:	6838      	ldr	r0, [r7, #0]
 801bcd6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bcda:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801bcde:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801bce2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bce6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801bcea:	440a      	add	r2, r1
 801bcec:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bcf0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801bcf4:	4413      	add	r3, r2
 801bcf6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bcfa:	6803      	ldr	r3, [r0, #0]
 801bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcfe:	4798      	blx	r3
 801bd00:	2eff      	cmp	r6, #255	; 0xff
 801bd02:	d117      	bne.n	801bd34 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801bd04:	f010 0f20 	tst.w	r0, #32
 801bd08:	6838      	ldr	r0, [r7, #0]
 801bd0a:	d016      	beq.n	801bd3a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801bd0c:	b2ad      	uxth	r5, r5
 801bd0e:	6801      	ldr	r1, [r0, #0]
 801bd10:	9603      	str	r6, [sp, #12]
 801bd12:	9501      	str	r5, [sp, #4]
 801bd14:	fa1f f588 	uxth.w	r5, r8
 801bd18:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801bd1c:	9500      	str	r5, [sp, #0]
 801bd1e:	9602      	str	r6, [sp, #8]
 801bd20:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801bd24:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801bd26:	4621      	mov	r1, r4
 801bd28:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801bd2c:	47a8      	blx	r5
 801bd2e:	b008      	add	sp, #32
 801bd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd34:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bd38:	e7e6      	b.n	801bd08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801bd3a:	6803      	ldr	r3, [r0, #0]
 801bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd3e:	4798      	blx	r3
 801bd40:	4b38      	ldr	r3, [pc, #224]	; (801be24 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801bd42:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801bd46:	f8b3 c000 	ldrh.w	ip, [r3]
 801bd4a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801bd4e:	fb0c f505 	mul.w	r5, ip, r5
 801bd52:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801bd56:	fb0c 2303 	mla	r3, ip, r3, r2
 801bd5a:	ebac 0c08 	sub.w	ip, ip, r8
 801bd5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd62:	ebae 0e08 	sub.w	lr, lr, r8
 801bd66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd6a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bd6e:	4418      	add	r0, r3
 801bd70:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801bd74:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801bd78:	4405      	add	r5, r0
 801bd7a:	42a8      	cmp	r0, r5
 801bd7c:	d24a      	bcs.n	801be14 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801bd7e:	eb00 0803 	add.w	r8, r0, r3
 801bd82:	4540      	cmp	r0, r8
 801bd84:	d243      	bcs.n	801be0e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801bd86:	78e2      	ldrb	r2, [r4, #3]
 801bd88:	b15a      	cbz	r2, 801bda2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801bd8a:	2aff      	cmp	r2, #255	; 0xff
 801bd8c:	f894 9000 	ldrb.w	r9, [r4]
 801bd90:	d10a      	bne.n	801bda8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801bd92:	2eff      	cmp	r6, #255	; 0xff
 801bd94:	d108      	bne.n	801bda8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801bd96:	f880 9000 	strb.w	r9, [r0]
 801bd9a:	7862      	ldrb	r2, [r4, #1]
 801bd9c:	7042      	strb	r2, [r0, #1]
 801bd9e:	78a2      	ldrb	r2, [r4, #2]
 801bda0:	7082      	strb	r2, [r0, #2]
 801bda2:	3003      	adds	r0, #3
 801bda4:	3404      	adds	r4, #4
 801bda6:	e7ec      	b.n	801bd82 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801bda8:	4372      	muls	r2, r6
 801bdaa:	1c51      	adds	r1, r2, #1
 801bdac:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801bdb0:	1209      	asrs	r1, r1, #8
 801bdb2:	fa1f fa81 	uxth.w	sl, r1
 801bdb6:	43c9      	mvns	r1, r1
 801bdb8:	fb19 f90a 	smulbb	r9, r9, sl
 801bdbc:	b2ca      	uxtb	r2, r1
 801bdbe:	7801      	ldrb	r1, [r0, #0]
 801bdc0:	fb01 9902 	mla	r9, r1, r2, r9
 801bdc4:	fa1f f989 	uxth.w	r9, r9
 801bdc8:	f109 0101 	add.w	r1, r9, #1
 801bdcc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801bdd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdd4:	f880 9000 	strb.w	r9, [r0]
 801bdd8:	f890 9001 	ldrb.w	r9, [r0, #1]
 801bddc:	7861      	ldrb	r1, [r4, #1]
 801bdde:	fb19 f902 	smulbb	r9, r9, r2
 801bde2:	fb01 910a 	mla	r1, r1, sl, r9
 801bde6:	b289      	uxth	r1, r1
 801bde8:	f101 0901 	add.w	r9, r1, #1
 801bdec:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801bdf0:	1209      	asrs	r1, r1, #8
 801bdf2:	7041      	strb	r1, [r0, #1]
 801bdf4:	7881      	ldrb	r1, [r0, #2]
 801bdf6:	f894 9002 	ldrb.w	r9, [r4, #2]
 801bdfa:	fb11 f202 	smulbb	r2, r1, r2
 801bdfe:	fb09 220a 	mla	r2, r9, sl, r2
 801be02:	b292      	uxth	r2, r2
 801be04:	1c51      	adds	r1, r2, #1
 801be06:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801be0a:	1212      	asrs	r2, r2, #8
 801be0c:	e7c8      	b.n	801bda0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801be0e:	4460      	add	r0, ip
 801be10:	4474      	add	r4, lr
 801be12:	e7b2      	b.n	801bd7a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801be14:	6838      	ldr	r0, [r7, #0]
 801be16:	6803      	ldr	r3, [r0, #0]
 801be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be1a:	4798      	blx	r3
 801be1c:	e787      	b.n	801bd2e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801be1e:	bf00      	nop
 801be20:	2005653c 	.word	0x2005653c
 801be24:	20056536 	.word	0x20056536

0801be28 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801be28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be2c:	b085      	sub	sp, #20
 801be2e:	4606      	mov	r6, r0
 801be30:	460c      	mov	r4, r1
 801be32:	4691      	mov	r9, r2
 801be34:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801be38:	4698      	mov	r8, r3
 801be3a:	b31d      	cbz	r5, 801be84 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801be3c:	4608      	mov	r0, r1
 801be3e:	f7fd f9e3 	bl	8019208 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801be42:	4607      	mov	r7, r0
 801be44:	4620      	mov	r0, r4
 801be46:	f7fd fa19 	bl	801927c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801be4a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801be4e:	4620      	mov	r0, r4
 801be50:	f8ad 9008 	strh.w	r9, [sp, #8]
 801be54:	f8ad 800a 	strh.w	r8, [sp, #10]
 801be58:	f8ad 700c 	strh.w	r7, [sp, #12]
 801be5c:	f7fd fad2 	bl	8019404 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801be60:	280b      	cmp	r0, #11
 801be62:	d838      	bhi.n	801bed6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801be64:	e8df f000 	tbb	[pc, r0]
 801be68:	37062920 	.word	0x37062920
 801be6c:	37373737 	.word	0x37373737
 801be70:	11373737 	.word	0x11373737
 801be74:	4620      	mov	r0, r4
 801be76:	f7fd fa3b 	bl	80192f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801be7a:	462b      	mov	r3, r5
 801be7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801be7e:	a902      	add	r1, sp, #8
 801be80:	f7ff ff0c 	bl	801bc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801be84:	b005      	add	sp, #20
 801be86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be8a:	4620      	mov	r0, r4
 801be8c:	f7fd fa30 	bl	80192f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801be90:	4606      	mov	r6, r0
 801be92:	4620      	mov	r0, r4
 801be94:	f7fd fa5e 	bl	8019354 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801be98:	9500      	str	r5, [sp, #0]
 801be9a:	4601      	mov	r1, r0
 801be9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be9e:	aa02      	add	r2, sp, #8
 801bea0:	4630      	mov	r0, r6
 801bea2:	f7ff fde7 	bl	801ba74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801bea6:	e7ed      	b.n	801be84 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bea8:	4620      	mov	r0, r4
 801beaa:	f7fd fa21 	bl	80192f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801beae:	462b      	mov	r3, r5
 801beb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801beb2:	a902      	add	r1, sp, #8
 801beb4:	f7ff fdfe 	bl	801bab4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801beb8:	e7e4      	b.n	801be84 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801beba:	6833      	ldr	r3, [r6, #0]
 801bebc:	4620      	mov	r0, r4
 801bebe:	68df      	ldr	r7, [r3, #12]
 801bec0:	f7fd fa16 	bl	80192f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bec4:	2300      	movs	r3, #0
 801bec6:	4601      	mov	r1, r0
 801bec8:	aa02      	add	r2, sp, #8
 801beca:	4630      	mov	r0, r6
 801becc:	e9cd 5300 	strd	r5, r3, [sp]
 801bed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bed2:	47b8      	blx	r7
 801bed4:	e7d6      	b.n	801be84 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bed6:	4b03      	ldr	r3, [pc, #12]	; (801bee4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801bed8:	2147      	movs	r1, #71	; 0x47
 801beda:	4a03      	ldr	r2, [pc, #12]	; (801bee8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801bedc:	4803      	ldr	r0, [pc, #12]	; (801beec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801bede:	f007 f991 	bl	8023204 <__assert_func>
 801bee2:	bf00      	nop
 801bee4:	08027bbe 	.word	0x08027bbe
 801bee8:	080282ac 	.word	0x080282ac
 801beec:	08027c8d 	.word	0x08027c8d

0801bef0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801bef0:	b570      	push	{r4, r5, r6, lr}
 801bef2:	9d04      	ldr	r5, [sp, #16]
 801bef4:	460c      	mov	r4, r1
 801bef6:	4619      	mov	r1, r3
 801bef8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801befc:	2a0d      	cmp	r2, #13
 801befe:	d826      	bhi.n	801bf4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801bf00:	e8df f002 	tbb	[pc, r2]
 801bf04:	200e1407 	.word	0x200e1407
 801bf08:	20202020 	.word	0x20202020
 801bf0c:	20202020 	.word	0x20202020
 801bf10:	2020      	.short	0x2020
 801bf12:	4b0f      	ldr	r3, [pc, #60]	; (801bf50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801bf14:	f240 11d3 	movw	r1, #467	; 0x1d3
 801bf18:	4a0e      	ldr	r2, [pc, #56]	; (801bf54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801bf1a:	480f      	ldr	r0, [pc, #60]	; (801bf58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801bf1c:	f007 f972 	bl	8023204 <__assert_func>
 801bf20:	462a      	mov	r2, r5
 801bf22:	4620      	mov	r0, r4
 801bf24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf28:	f7ff beb8 	b.w	801bc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801bf2c:	6802      	ldr	r2, [r0, #0]
 801bf2e:	2600      	movs	r6, #0
 801bf30:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801bf34:	68d6      	ldr	r6, [r2, #12]
 801bf36:	462b      	mov	r3, r5
 801bf38:	460a      	mov	r2, r1
 801bf3a:	4621      	mov	r1, r4
 801bf3c:	46b4      	mov	ip, r6
 801bf3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf42:	4760      	bx	ip
 801bf44:	4b05      	ldr	r3, [pc, #20]	; (801bf5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801bf46:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801bf4a:	4a02      	ldr	r2, [pc, #8]	; (801bf54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801bf4c:	e7e5      	b.n	801bf1a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801bf4e:	bd70      	pop	{r4, r5, r6, pc}
 801bf50:	08027e64 	.word	0x08027e64
 801bf54:	08028594 	.word	0x08028594
 801bf58:	08027c8d 	.word	0x08027c8d
 801bf5c:	08027ea5 	.word	0x08027ea5

0801bf60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801bf60:	b158      	cbz	r0, 801bf7a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801bf62:	2902      	cmp	r1, #2
 801bf64:	d00f      	beq.n	801bf86 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801bf66:	2903      	cmp	r1, #3
 801bf68:	d010      	beq.n	801bf8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801bf6a:	2901      	cmp	r1, #1
 801bf6c:	d101      	bne.n	801bf72 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801bf6e:	2001      	movs	r0, #1
 801bf70:	4770      	bx	lr
 801bf72:	4b08      	ldr	r3, [pc, #32]	; (801bf94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801bf74:	8819      	ldrh	r1, [r3, #0]
 801bf76:	4248      	negs	r0, r1
 801bf78:	4770      	bx	lr
 801bf7a:	2902      	cmp	r1, #2
 801bf7c:	d006      	beq.n	801bf8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801bf7e:	2903      	cmp	r1, #3
 801bf80:	d0f7      	beq.n	801bf72 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801bf82:	2901      	cmp	r1, #1
 801bf84:	d1f3      	bne.n	801bf6e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801bf86:	4b03      	ldr	r3, [pc, #12]	; (801bf94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801bf88:	8818      	ldrh	r0, [r3, #0]
 801bf8a:	4770      	bx	lr
 801bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf90:	4770      	bx	lr
 801bf92:	bf00      	nop
 801bf94:	20056536 	.word	0x20056536

0801bf98 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801bf98:	b170      	cbz	r0, 801bfb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801bf9a:	2902      	cmp	r1, #2
 801bf9c:	d012      	beq.n	801bfc4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801bf9e:	2903      	cmp	r1, #3
 801bfa0:	d006      	beq.n	801bfb0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801bfa2:	2901      	cmp	r1, #1
 801bfa4:	d001      	beq.n	801bfaa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801bfa6:	2001      	movs	r0, #1
 801bfa8:	4770      	bx	lr
 801bfaa:	4b08      	ldr	r3, [pc, #32]	; (801bfcc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801bfac:	8818      	ldrh	r0, [r3, #0]
 801bfae:	4770      	bx	lr
 801bfb0:	4b06      	ldr	r3, [pc, #24]	; (801bfcc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801bfb2:	8818      	ldrh	r0, [r3, #0]
 801bfb4:	4240      	negs	r0, r0
 801bfb6:	4770      	bx	lr
 801bfb8:	2902      	cmp	r1, #2
 801bfba:	d0f9      	beq.n	801bfb0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801bfbc:	2903      	cmp	r1, #3
 801bfbe:	d0f2      	beq.n	801bfa6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801bfc0:	2901      	cmp	r1, #1
 801bfc2:	d1f2      	bne.n	801bfaa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 801bfc8:	4770      	bx	lr
 801bfca:	bf00      	nop
 801bfcc:	20056536 	.word	0x20056536

0801bfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd4:	b095      	sub	sp, #84	; 0x54
 801bfd6:	9109      	str	r1, [sp, #36]	; 0x24
 801bfd8:	a910      	add	r1, sp, #64	; 0x40
 801bfda:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801bfde:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801bfe2:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801bfe6:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801bfea:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801bfee:	e881 000c 	stmia.w	r1, {r2, r3}
 801bff2:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801bff6:	9308      	str	r3, [sp, #32]
 801bff8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801bffc:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801c000:	930f      	str	r3, [sp, #60]	; 0x3c
 801c002:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801c006:	798d      	ldrb	r5, [r1, #6]
 801c008:	930a      	str	r3, [sp, #40]	; 0x28
 801c00a:	7b4b      	ldrb	r3, [r1, #13]
 801c00c:	0158      	lsls	r0, r3, #5
 801c00e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c012:	4328      	orrs	r0, r5
 801c014:	9007      	str	r0, [sp, #28]
 801c016:	f000 817a 	beq.w	801c30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801c01a:	011b      	lsls	r3, r3, #4
 801c01c:	79c8      	ldrb	r0, [r1, #7]
 801c01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c022:	4303      	orrs	r3, r0
 801c024:	930c      	str	r3, [sp, #48]	; 0x30
 801c026:	f000 8172 	beq.w	801c30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801c02a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c02e:	b29b      	uxth	r3, r3
 801c030:	2f00      	cmp	r7, #0
 801c032:	f000 8117 	beq.w	801c264 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801c036:	1aff      	subs	r7, r7, r3
 801c038:	b2bf      	uxth	r7, r7
 801c03a:	043b      	lsls	r3, r7, #16
 801c03c:	d502      	bpl.n	801c044 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c03e:	1bf6      	subs	r6, r6, r7
 801c040:	2700      	movs	r7, #0
 801c042:	b236      	sxth	r6, r6
 801c044:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c048:	a810      	add	r0, sp, #64	; 0x40
 801c04a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c04e:	428e      	cmp	r6, r1
 801c050:	b28b      	uxth	r3, r1
 801c052:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801c056:	bfbf      	itttt	lt
 801c058:	18ff      	addlt	r7, r7, r3
 801c05a:	1bbe      	sublt	r6, r7, r6
 801c05c:	b2b7      	uxthlt	r7, r6
 801c05e:	460e      	movlt	r6, r1
 801c060:	8891      	ldrh	r1, [r2, #4]
 801c062:	440b      	add	r3, r1
 801c064:	4631      	mov	r1, r6
 801c066:	b21b      	sxth	r3, r3
 801c068:	930e      	str	r3, [sp, #56]	; 0x38
 801c06a:	88d3      	ldrh	r3, [r2, #6]
 801c06c:	9a08      	ldr	r2, [sp, #32]
 801c06e:	449a      	add	sl, r3
 801c070:	fa0f f38a 	sxth.w	r3, sl
 801c074:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801c078:	930d      	str	r3, [sp, #52]	; 0x34
 801c07a:	4bb4      	ldr	r3, [pc, #720]	; (801c34c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801c07c:	f893 b000 	ldrb.w	fp, [r3]
 801c080:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c084:	f1dc 0300 	rsbs	r3, ip, #0
 801c088:	eb43 030c 	adc.w	r3, r3, ip
 801c08c:	930b      	str	r3, [sp, #44]	; 0x2c
 801c08e:	464b      	mov	r3, r9
 801c090:	f7f9 fcd3 	bl	8015a3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c094:	4631      	mov	r1, r6
 801c096:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801c09a:	464b      	mov	r3, r9
 801c09c:	9a08      	ldr	r2, [sp, #32]
 801c09e:	a810      	add	r0, sp, #64	; 0x40
 801c0a0:	f7f9 fce3 	bl	8015a6a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c0a4:	a914      	add	r1, sp, #80	; 0x50
 801c0a6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c0aa:	a813      	add	r0, sp, #76	; 0x4c
 801c0ac:	f7f9 fe3e 	bl	8015d2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c0b0:	f1b9 0f00 	cmp.w	r9, #0
 801c0b4:	f040 80d9 	bne.w	801c26a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801c0b8:	f1bb 0f01 	cmp.w	fp, #1
 801c0bc:	f040 80dd 	bne.w	801c27a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801c0c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c0c2:	b153      	cbz	r3, 801c0da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c0c4:	2508      	movs	r5, #8
 801c0c6:	9a07      	ldr	r2, [sp, #28]
 801c0c8:	fb95 f3f8 	sdiv	r3, r5, r8
 801c0cc:	1e5d      	subs	r5, r3, #1
 801c0ce:	4415      	add	r5, r2
 801c0d0:	fb95 f5f3 	sdiv	r5, r5, r3
 801c0d4:	fb15 f503 	smulbb	r5, r5, r3
 801c0d8:	b2ad      	uxth	r5, r5
 801c0da:	b907      	cbnz	r7, 801c0de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c0dc:	b16c      	cbz	r4, 801c0fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c0de:	fb04 7305 	mla	r3, r4, r5, r7
 801c0e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c0e4:	ebaa 0a04 	sub.w	sl, sl, r4
 801c0e8:	fb08 f303 	mul.w	r3, r8, r3
 801c0ec:	fa1f fa8a 	uxth.w	sl, sl
 801c0f0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c0f4:	f003 0407 	and.w	r4, r3, #7
 801c0f8:	9224      	str	r2, [sp, #144]	; 0x90
 801c0fa:	4649      	mov	r1, r9
 801c0fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c0fe:	f7ff ff2f 	bl	801bf60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c102:	4649      	mov	r1, r9
 801c104:	4683      	mov	fp, r0
 801c106:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c108:	f7ff ff46 	bl	801bf98 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c10e:	9a08      	ldr	r2, [sp, #32]
 801c110:	4681      	mov	r9, r0
 801c112:	1a9b      	subs	r3, r3, r2
 801c114:	459a      	cmp	sl, r3
 801c116:	bfa8      	it	ge
 801c118:	469a      	movge	sl, r3
 801c11a:	f1ba 0f00 	cmp.w	sl, #0
 801c11e:	f340 80f6 	ble.w	801c30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801c122:	1bf6      	subs	r6, r6, r7
 801c124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c126:	1b9e      	subs	r6, r3, r6
 801c128:	9b07      	ldr	r3, [sp, #28]
 801c12a:	429e      	cmp	r6, r3
 801c12c:	bfd4      	ite	le
 801c12e:	ebc7 0706 	rsble	r7, r7, r6
 801c132:	ebc7 0703 	rsbgt	r7, r7, r3
 801c136:	2f00      	cmp	r7, #0
 801c138:	f340 80e9 	ble.w	801c30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801c13c:	1bed      	subs	r5, r5, r7
 801c13e:	fb08 f305 	mul.w	r3, r8, r5
 801c142:	930b      	str	r3, [sp, #44]	; 0x2c
 801c144:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c146:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c14a:	930c      	str	r3, [sp, #48]	; 0x30
 801c14c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c14e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c152:	930d      	str	r3, [sp, #52]	; 0x34
 801c154:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c156:	b2db      	uxtb	r3, r3
 801c158:	930e      	str	r3, [sp, #56]	; 0x38
 801c15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	f040 80db 	bne.w	801c318 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c162:	4b7b      	ldr	r3, [pc, #492]	; (801c350 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c164:	6818      	ldr	r0, [r3, #0]
 801c166:	6803      	ldr	r3, [r0, #0]
 801c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c16a:	4798      	blx	r3
 801c16c:	2301      	movs	r3, #1
 801c16e:	4a79      	ldr	r2, [pc, #484]	; (801c354 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c170:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c174:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c178:	fa03 f308 	lsl.w	r3, r3, r8
 801c17c:	8811      	ldrh	r1, [r2, #0]
 801c17e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801c182:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c186:	3b01      	subs	r3, #1
 801c188:	fb06 bb07 	mla	fp, r6, r7, fp
 801c18c:	b2db      	uxtb	r3, r3
 801c18e:	9308      	str	r3, [sp, #32]
 801c190:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801c194:	fb01 2303 	mla	r3, r1, r3, r2
 801c198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c19c:	18c3      	adds	r3, r0, r3
 801c19e:	9307      	str	r3, [sp, #28]
 801c1a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c1a2:	781a      	ldrb	r2, [r3, #0]
 801c1a4:	4122      	asrs	r2, r4
 801c1a6:	b2d2      	uxtb	r2, r2
 801c1a8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c1ac:	f0c0 80d4 	bcc.w	801c358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801c1b0:	46be      	mov	lr, r7
 801c1b2:	9907      	ldr	r1, [sp, #28]
 801c1b4:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c1b8:	f0c0 80b7 	bcc.w	801c32a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801c1bc:	9b08      	ldr	r3, [sp, #32]
 801c1be:	4013      	ands	r3, r2
 801c1c0:	d041      	beq.n	801c246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801c1c2:	20ff      	movs	r0, #255	; 0xff
 801c1c4:	9d08      	ldr	r5, [sp, #32]
 801c1c6:	fb90 f5f5 	sdiv	r5, r0, r5
 801c1ca:	436b      	muls	r3, r5
 801c1cc:	2bfe      	cmp	r3, #254	; 0xfe
 801c1ce:	dd03      	ble.n	801c1d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801c1d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c1d2:	4285      	cmp	r5, r0
 801c1d4:	f000 80a2 	beq.w	801c31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c1d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c1da:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c1dc:	fb15 f303 	smulbb	r3, r5, r3
 801c1e0:	b29b      	uxth	r3, r3
 801c1e2:	1c5d      	adds	r5, r3, #1
 801c1e4:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c1e8:	780d      	ldrb	r5, [r1, #0]
 801c1ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c1ee:	fa1f fc83 	uxth.w	ip, r3
 801c1f2:	43db      	mvns	r3, r3
 801c1f4:	fb10 f90c 	smulbb	r9, r0, ip
 801c1f8:	b2db      	uxtb	r3, r3
 801c1fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c1fc:	fb05 9503 	mla	r5, r5, r3, r9
 801c200:	b2ad      	uxth	r5, r5
 801c202:	f105 0901 	add.w	r9, r5, #1
 801c206:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c20a:	fb10 f90c 	smulbb	r9, r0, ip
 801c20e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c210:	122d      	asrs	r5, r5, #8
 801c212:	fb10 fc0c 	smulbb	ip, r0, ip
 801c216:	700d      	strb	r5, [r1, #0]
 801c218:	784d      	ldrb	r5, [r1, #1]
 801c21a:	fb05 9503 	mla	r5, r5, r3, r9
 801c21e:	b2ad      	uxth	r5, r5
 801c220:	f105 0901 	add.w	r9, r5, #1
 801c224:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c228:	122d      	asrs	r5, r5, #8
 801c22a:	704d      	strb	r5, [r1, #1]
 801c22c:	788d      	ldrb	r5, [r1, #2]
 801c22e:	fb05 cc03 	mla	ip, r5, r3, ip
 801c232:	fa1f fc8c 	uxth.w	ip, ip
 801c236:	f10c 0301 	add.w	r3, ip, #1
 801c23a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c23e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c242:	f881 c002 	strb.w	ip, [r1, #2]
 801c246:	4444      	add	r4, r8
 801c248:	4431      	add	r1, r6
 801c24a:	b2a4      	uxth	r4, r4
 801c24c:	2c07      	cmp	r4, #7
 801c24e:	bf89      	itett	hi
 801c250:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801c252:	fa42 f208 	asrls.w	r2, r2, r8
 801c256:	2400      	movhi	r4, #0
 801c258:	785a      	ldrbhi	r2, [r3, #1]
 801c25a:	bf8a      	itet	hi
 801c25c:	3301      	addhi	r3, #1
 801c25e:	b2d2      	uxtbls	r2, r2
 801c260:	9324      	strhi	r3, [sp, #144]	; 0x90
 801c262:	e7a7      	b.n	801c1b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801c264:	441e      	add	r6, r3
 801c266:	b236      	sxth	r6, r6
 801c268:	e6ec      	b.n	801c044 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c26a:	f1b9 0f01 	cmp.w	r9, #1
 801c26e:	f47f af27 	bne.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c272:	f1bb 0f01 	cmp.w	fp, #1
 801c276:	f47f af23 	bne.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c27a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801c350 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801c27e:	f8db 0000 	ldr.w	r0, [fp]
 801c282:	6803      	ldr	r3, [r0, #0]
 801c284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c286:	4798      	blx	r3
 801c288:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801c28c:	465a      	mov	r2, fp
 801c28e:	d006      	beq.n	801c29e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801c290:	f1b8 0f04 	cmp.w	r8, #4
 801c294:	d13e      	bne.n	801c314 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801c296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c298:	3300      	adds	r3, #0
 801c29a:	bf18      	it	ne
 801c29c:	2301      	movne	r3, #1
 801c29e:	0580      	lsls	r0, r0, #22
 801c2a0:	d563      	bpl.n	801c36a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801c2a2:	f1b8 0f08 	cmp.w	r8, #8
 801c2a6:	d160      	bne.n	801c36a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	bf0c      	ite	eq
 801c2ac:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801c2b0:	f44f 7180 	movne.w	r1, #256	; 0x100
 801c2b4:	2f00      	cmp	r7, #0
 801c2b6:	f47f af03 	bne.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2ba:	2c00      	cmp	r4, #0
 801c2bc:	f47f af00 	bne.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2c0:	9b07      	ldr	r3, [sp, #28]
 801c2c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c2c4:	18f3      	adds	r3, r6, r3
 801c2c6:	4283      	cmp	r3, r0
 801c2c8:	f73f aefa 	bgt.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2cc:	9808      	ldr	r0, [sp, #32]
 801c2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2d0:	4403      	add	r3, r0
 801c2d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c2d4:	4283      	cmp	r3, r0
 801c2d6:	f73f aef3 	bgt.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2da:	f1b8 0f08 	cmp.w	r8, #8
 801c2de:	6810      	ldr	r0, [r2, #0]
 801c2e0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801c2e4:	bf18      	it	ne
 801c2e6:	3501      	addne	r5, #1
 801c2e8:	6804      	ldr	r4, [r0, #0]
 801c2ea:	9105      	str	r1, [sp, #20]
 801c2ec:	bf18      	it	ne
 801c2ee:	f025 0501 	bicne.w	r5, r5, #1
 801c2f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c2f4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801c2f8:	bf18      	it	ne
 801c2fa:	b2ad      	uxthne	r5, r5
 801c2fc:	9104      	str	r1, [sp, #16]
 801c2fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c300:	e9cd 5a00 	strd	r5, sl, [sp]
 801c304:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c308:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c30a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801c30c:	47a0      	blx	r4
 801c30e:	b015      	add	sp, #84	; 0x54
 801c310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c314:	2300      	movs	r3, #0
 801c316:	e7c2      	b.n	801c29e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801c318:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c31a:	e727      	b.n	801c16c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801c31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c31e:	700b      	strb	r3, [r1, #0]
 801c320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c322:	704b      	strb	r3, [r1, #1]
 801c324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c326:	708b      	strb	r3, [r1, #2]
 801c328:	e78d      	b.n	801c246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801c32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c32c:	b153      	cbz	r3, 801c344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801c32e:	441c      	add	r4, r3
 801c330:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c332:	b2a4      	uxth	r4, r4
 801c334:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c338:	f004 0407 	and.w	r4, r4, #7
 801c33c:	781a      	ldrb	r2, [r3, #0]
 801c33e:	9324      	str	r3, [sp, #144]	; 0x90
 801c340:	4122      	asrs	r2, r4
 801c342:	b2d2      	uxtb	r2, r2
 801c344:	9b07      	ldr	r3, [sp, #28]
 801c346:	445b      	add	r3, fp
 801c348:	9307      	str	r3, [sp, #28]
 801c34a:	e72d      	b.n	801c1a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801c34c:	20056534 	.word	0x20056534
 801c350:	2005653c 	.word	0x2005653c
 801c354:	20056536 	.word	0x20056536
 801c358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d1d7      	bne.n	801c30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801c35e:	4b06      	ldr	r3, [pc, #24]	; (801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801c360:	6818      	ldr	r0, [r3, #0]
 801c362:	6803      	ldr	r3, [r0, #0]
 801c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c366:	4798      	blx	r3
 801c368:	e7d1      	b.n	801c30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	f43f aea8 	beq.w	801c0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c370:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c374:	e79e      	b.n	801c2b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801c376:	bf00      	nop
 801c378:	2005653c 	.word	0x2005653c

0801c37c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c37c:	b538      	push	{r3, r4, r5, lr}
 801c37e:	4c15      	ldr	r4, [pc, #84]	; (801c3d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c380:	4605      	mov	r5, r0
 801c382:	7823      	ldrb	r3, [r4, #0]
 801c384:	f3bf 8f5b 	dmb	ish
 801c388:	07da      	lsls	r2, r3, #31
 801c38a:	d40b      	bmi.n	801c3a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c38c:	4620      	mov	r0, r4
 801c38e:	f006 fe34 	bl	8022ffa <__cxa_guard_acquire>
 801c392:	b138      	cbz	r0, 801c3a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c394:	4620      	mov	r0, r4
 801c396:	f006 fe3c 	bl	8023012 <__cxa_guard_release>
 801c39a:	4a0f      	ldr	r2, [pc, #60]	; (801c3d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c39c:	490f      	ldr	r1, [pc, #60]	; (801c3dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c39e:	4810      	ldr	r0, [pc, #64]	; (801c3e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c3a0:	f006 fe24 	bl	8022fec <__aeabi_atexit>
 801c3a4:	4c0f      	ldr	r4, [pc, #60]	; (801c3e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c3a6:	7823      	ldrb	r3, [r4, #0]
 801c3a8:	f3bf 8f5b 	dmb	ish
 801c3ac:	07db      	lsls	r3, r3, #31
 801c3ae:	d40b      	bmi.n	801c3c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c3b0:	4620      	mov	r0, r4
 801c3b2:	f006 fe22 	bl	8022ffa <__cxa_guard_acquire>
 801c3b6:	b138      	cbz	r0, 801c3c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f006 fe2a 	bl	8023012 <__cxa_guard_release>
 801c3be:	4a06      	ldr	r2, [pc, #24]	; (801c3d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c3c0:	4909      	ldr	r1, [pc, #36]	; (801c3e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c3c2:	480a      	ldr	r0, [pc, #40]	; (801c3ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c3c4:	f006 fe12 	bl	8022fec <__aeabi_atexit>
 801c3c8:	4b05      	ldr	r3, [pc, #20]	; (801c3e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c3ca:	612b      	str	r3, [r5, #16]
 801c3cc:	4b07      	ldr	r3, [pc, #28]	; (801c3ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c3ce:	616b      	str	r3, [r5, #20]
 801c3d0:	bd38      	pop	{r3, r4, r5, pc}
 801c3d2:	bf00      	nop
 801c3d4:	20056628 	.word	0x20056628
 801c3d8:	20000000 	.word	0x20000000
 801c3dc:	0801acc7 	.word	0x0801acc7
 801c3e0:	20000060 	.word	0x20000060
 801c3e4:	2005662c 	.word	0x2005662c
 801c3e8:	0801acc5 	.word	0x0801acc5
 801c3ec:	20000064 	.word	0x20000064

0801c3f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c3f0:	b538      	push	{r3, r4, r5, lr}
 801c3f2:	4c15      	ldr	r4, [pc, #84]	; (801c448 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c3f4:	4605      	mov	r5, r0
 801c3f6:	7823      	ldrb	r3, [r4, #0]
 801c3f8:	f3bf 8f5b 	dmb	ish
 801c3fc:	07da      	lsls	r2, r3, #31
 801c3fe:	d40b      	bmi.n	801c418 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c400:	4620      	mov	r0, r4
 801c402:	f006 fdfa 	bl	8022ffa <__cxa_guard_acquire>
 801c406:	b138      	cbz	r0, 801c418 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c408:	4620      	mov	r0, r4
 801c40a:	f006 fe02 	bl	8023012 <__cxa_guard_release>
 801c40e:	4a0f      	ldr	r2, [pc, #60]	; (801c44c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c410:	490f      	ldr	r1, [pc, #60]	; (801c450 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c412:	4810      	ldr	r0, [pc, #64]	; (801c454 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c414:	f006 fdea 	bl	8022fec <__aeabi_atexit>
 801c418:	4c0f      	ldr	r4, [pc, #60]	; (801c458 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c41a:	7823      	ldrb	r3, [r4, #0]
 801c41c:	f3bf 8f5b 	dmb	ish
 801c420:	07db      	lsls	r3, r3, #31
 801c422:	d40b      	bmi.n	801c43c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c424:	4620      	mov	r0, r4
 801c426:	f006 fde8 	bl	8022ffa <__cxa_guard_acquire>
 801c42a:	b138      	cbz	r0, 801c43c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c42c:	4620      	mov	r0, r4
 801c42e:	f006 fdf0 	bl	8023012 <__cxa_guard_release>
 801c432:	4a06      	ldr	r2, [pc, #24]	; (801c44c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c434:	4909      	ldr	r1, [pc, #36]	; (801c45c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c436:	480a      	ldr	r0, [pc, #40]	; (801c460 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c438:	f006 fdd8 	bl	8022fec <__aeabi_atexit>
 801c43c:	4b05      	ldr	r3, [pc, #20]	; (801c454 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c43e:	60ab      	str	r3, [r5, #8]
 801c440:	4b07      	ldr	r3, [pc, #28]	; (801c460 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c442:	60eb      	str	r3, [r5, #12]
 801c444:	bd38      	pop	{r3, r4, r5, pc}
 801c446:	bf00      	nop
 801c448:	20056608 	.word	0x20056608
 801c44c:	20000000 	.word	0x20000000
 801c450:	0801accb 	.word	0x0801accb
 801c454:	20000040 	.word	0x20000040
 801c458:	2005660c 	.word	0x2005660c
 801c45c:	0801acc9 	.word	0x0801acc9
 801c460:	20000044 	.word	0x20000044

0801c464 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c464:	b510      	push	{r4, lr}
 801c466:	4604      	mov	r4, r0
 801c468:	f7ff ff88 	bl	801c37c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c46c:	4620      	mov	r0, r4
 801c46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c472:	f7ff bfbd 	b.w	801c3f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c478 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c478:	b538      	push	{r3, r4, r5, lr}
 801c47a:	4c15      	ldr	r4, [pc, #84]	; (801c4d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c47c:	4605      	mov	r5, r0
 801c47e:	7823      	ldrb	r3, [r4, #0]
 801c480:	f3bf 8f5b 	dmb	ish
 801c484:	07da      	lsls	r2, r3, #31
 801c486:	d40b      	bmi.n	801c4a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c488:	4620      	mov	r0, r4
 801c48a:	f006 fdb6 	bl	8022ffa <__cxa_guard_acquire>
 801c48e:	b138      	cbz	r0, 801c4a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c490:	4620      	mov	r0, r4
 801c492:	f006 fdbe 	bl	8023012 <__cxa_guard_release>
 801c496:	4a0f      	ldr	r2, [pc, #60]	; (801c4d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c498:	490f      	ldr	r1, [pc, #60]	; (801c4d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c49a:	4810      	ldr	r0, [pc, #64]	; (801c4dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c49c:	f006 fda6 	bl	8022fec <__aeabi_atexit>
 801c4a0:	4c0f      	ldr	r4, [pc, #60]	; (801c4e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c4a2:	7823      	ldrb	r3, [r4, #0]
 801c4a4:	f3bf 8f5b 	dmb	ish
 801c4a8:	07db      	lsls	r3, r3, #31
 801c4aa:	d40b      	bmi.n	801c4c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	f006 fda4 	bl	8022ffa <__cxa_guard_acquire>
 801c4b2:	b138      	cbz	r0, 801c4c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c4b4:	4620      	mov	r0, r4
 801c4b6:	f006 fdac 	bl	8023012 <__cxa_guard_release>
 801c4ba:	4a06      	ldr	r2, [pc, #24]	; (801c4d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c4bc:	4909      	ldr	r1, [pc, #36]	; (801c4e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c4be:	480a      	ldr	r0, [pc, #40]	; (801c4e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c4c0:	f006 fd94 	bl	8022fec <__aeabi_atexit>
 801c4c4:	4b05      	ldr	r3, [pc, #20]	; (801c4dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c4c6:	622b      	str	r3, [r5, #32]
 801c4c8:	4b07      	ldr	r3, [pc, #28]	; (801c4e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c4ca:	626b      	str	r3, [r5, #36]	; 0x24
 801c4cc:	bd38      	pop	{r3, r4, r5, pc}
 801c4ce:	bf00      	nop
 801c4d0:	20056630 	.word	0x20056630
 801c4d4:	20000000 	.word	0x20000000
 801c4d8:	0801acbf 	.word	0x0801acbf
 801c4dc:	20000068 	.word	0x20000068
 801c4e0:	20056634 	.word	0x20056634
 801c4e4:	0801acbd 	.word	0x0801acbd
 801c4e8:	2000006c 	.word	0x2000006c

0801c4ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c4ec:	b538      	push	{r3, r4, r5, lr}
 801c4ee:	4c15      	ldr	r4, [pc, #84]	; (801c544 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c4f0:	4605      	mov	r5, r0
 801c4f2:	7823      	ldrb	r3, [r4, #0]
 801c4f4:	f3bf 8f5b 	dmb	ish
 801c4f8:	07da      	lsls	r2, r3, #31
 801c4fa:	d40b      	bmi.n	801c514 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c4fc:	4620      	mov	r0, r4
 801c4fe:	f006 fd7c 	bl	8022ffa <__cxa_guard_acquire>
 801c502:	b138      	cbz	r0, 801c514 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c504:	4620      	mov	r0, r4
 801c506:	f006 fd84 	bl	8023012 <__cxa_guard_release>
 801c50a:	4a0f      	ldr	r2, [pc, #60]	; (801c548 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c50c:	490f      	ldr	r1, [pc, #60]	; (801c54c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c50e:	4810      	ldr	r0, [pc, #64]	; (801c550 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c510:	f006 fd6c 	bl	8022fec <__aeabi_atexit>
 801c514:	4c0f      	ldr	r4, [pc, #60]	; (801c554 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c516:	7823      	ldrb	r3, [r4, #0]
 801c518:	f3bf 8f5b 	dmb	ish
 801c51c:	07db      	lsls	r3, r3, #31
 801c51e:	d40b      	bmi.n	801c538 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c520:	4620      	mov	r0, r4
 801c522:	f006 fd6a 	bl	8022ffa <__cxa_guard_acquire>
 801c526:	b138      	cbz	r0, 801c538 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c528:	4620      	mov	r0, r4
 801c52a:	f006 fd72 	bl	8023012 <__cxa_guard_release>
 801c52e:	4a06      	ldr	r2, [pc, #24]	; (801c548 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c530:	4909      	ldr	r1, [pc, #36]	; (801c558 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c532:	480a      	ldr	r0, [pc, #40]	; (801c55c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c534:	f006 fd5a 	bl	8022fec <__aeabi_atexit>
 801c538:	4b05      	ldr	r3, [pc, #20]	; (801c550 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c53a:	61ab      	str	r3, [r5, #24]
 801c53c:	4b07      	ldr	r3, [pc, #28]	; (801c55c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c53e:	61eb      	str	r3, [r5, #28]
 801c540:	bd38      	pop	{r3, r4, r5, pc}
 801c542:	bf00      	nop
 801c544:	20056610 	.word	0x20056610
 801c548:	20000000 	.word	0x20000000
 801c54c:	0801acc3 	.word	0x0801acc3
 801c550:	20000048 	.word	0x20000048
 801c554:	20056614 	.word	0x20056614
 801c558:	0801acc1 	.word	0x0801acc1
 801c55c:	2000004c 	.word	0x2000004c

0801c560 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c560:	b510      	push	{r4, lr}
 801c562:	4604      	mov	r4, r0
 801c564:	f7ff ff88 	bl	801c478 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c568:	4620      	mov	r0, r4
 801c56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c56e:	f7ff bfbd 	b.w	801c4ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c574 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c574:	b538      	push	{r3, r4, r5, lr}
 801c576:	4c15      	ldr	r4, [pc, #84]	; (801c5cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c578:	4605      	mov	r5, r0
 801c57a:	7823      	ldrb	r3, [r4, #0]
 801c57c:	f3bf 8f5b 	dmb	ish
 801c580:	07da      	lsls	r2, r3, #31
 801c582:	d40b      	bmi.n	801c59c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c584:	4620      	mov	r0, r4
 801c586:	f006 fd38 	bl	8022ffa <__cxa_guard_acquire>
 801c58a:	b138      	cbz	r0, 801c59c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c58c:	4620      	mov	r0, r4
 801c58e:	f006 fd40 	bl	8023012 <__cxa_guard_release>
 801c592:	4a0f      	ldr	r2, [pc, #60]	; (801c5d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c594:	490f      	ldr	r1, [pc, #60]	; (801c5d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c596:	4810      	ldr	r0, [pc, #64]	; (801c5d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c598:	f006 fd28 	bl	8022fec <__aeabi_atexit>
 801c59c:	4c0f      	ldr	r4, [pc, #60]	; (801c5dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c59e:	7823      	ldrb	r3, [r4, #0]
 801c5a0:	f3bf 8f5b 	dmb	ish
 801c5a4:	07db      	lsls	r3, r3, #31
 801c5a6:	d40b      	bmi.n	801c5c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c5a8:	4620      	mov	r0, r4
 801c5aa:	f006 fd26 	bl	8022ffa <__cxa_guard_acquire>
 801c5ae:	b138      	cbz	r0, 801c5c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c5b0:	4620      	mov	r0, r4
 801c5b2:	f006 fd2e 	bl	8023012 <__cxa_guard_release>
 801c5b6:	4a06      	ldr	r2, [pc, #24]	; (801c5d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c5b8:	4909      	ldr	r1, [pc, #36]	; (801c5e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c5ba:	480a      	ldr	r0, [pc, #40]	; (801c5e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c5bc:	f006 fd16 	bl	8022fec <__aeabi_atexit>
 801c5c0:	4b05      	ldr	r3, [pc, #20]	; (801c5d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c5c2:	632b      	str	r3, [r5, #48]	; 0x30
 801c5c4:	4b07      	ldr	r3, [pc, #28]	; (801c5e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c5c6:	636b      	str	r3, [r5, #52]	; 0x34
 801c5c8:	bd38      	pop	{r3, r4, r5, pc}
 801c5ca:	bf00      	nop
 801c5cc:	20056618 	.word	0x20056618
 801c5d0:	20000000 	.word	0x20000000
 801c5d4:	0801acb7 	.word	0x0801acb7
 801c5d8:	20000050 	.word	0x20000050
 801c5dc:	2005661c 	.word	0x2005661c
 801c5e0:	0801acb5 	.word	0x0801acb5
 801c5e4:	20000054 	.word	0x20000054

0801c5e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c5e8:	b538      	push	{r3, r4, r5, lr}
 801c5ea:	4c15      	ldr	r4, [pc, #84]	; (801c640 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c5ec:	4605      	mov	r5, r0
 801c5ee:	7823      	ldrb	r3, [r4, #0]
 801c5f0:	f3bf 8f5b 	dmb	ish
 801c5f4:	07da      	lsls	r2, r3, #31
 801c5f6:	d40b      	bmi.n	801c610 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	f006 fcfe 	bl	8022ffa <__cxa_guard_acquire>
 801c5fe:	b138      	cbz	r0, 801c610 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c600:	4620      	mov	r0, r4
 801c602:	f006 fd06 	bl	8023012 <__cxa_guard_release>
 801c606:	4a0f      	ldr	r2, [pc, #60]	; (801c644 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c608:	490f      	ldr	r1, [pc, #60]	; (801c648 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c60a:	4810      	ldr	r0, [pc, #64]	; (801c64c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c60c:	f006 fcee 	bl	8022fec <__aeabi_atexit>
 801c610:	4c0f      	ldr	r4, [pc, #60]	; (801c650 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c612:	7823      	ldrb	r3, [r4, #0]
 801c614:	f3bf 8f5b 	dmb	ish
 801c618:	07db      	lsls	r3, r3, #31
 801c61a:	d40b      	bmi.n	801c634 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c61c:	4620      	mov	r0, r4
 801c61e:	f006 fcec 	bl	8022ffa <__cxa_guard_acquire>
 801c622:	b138      	cbz	r0, 801c634 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c624:	4620      	mov	r0, r4
 801c626:	f006 fcf4 	bl	8023012 <__cxa_guard_release>
 801c62a:	4a06      	ldr	r2, [pc, #24]	; (801c644 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c62c:	4909      	ldr	r1, [pc, #36]	; (801c654 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c62e:	480a      	ldr	r0, [pc, #40]	; (801c658 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c630:	f006 fcdc 	bl	8022fec <__aeabi_atexit>
 801c634:	4b05      	ldr	r3, [pc, #20]	; (801c64c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c636:	62ab      	str	r3, [r5, #40]	; 0x28
 801c638:	4b07      	ldr	r3, [pc, #28]	; (801c658 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c63a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c63c:	bd38      	pop	{r3, r4, r5, pc}
 801c63e:	bf00      	nop
 801c640:	200565f0 	.word	0x200565f0
 801c644:	20000000 	.word	0x20000000
 801c648:	0801acbb 	.word	0x0801acbb
 801c64c:	20000028 	.word	0x20000028
 801c650:	200565f4 	.word	0x200565f4
 801c654:	0801acb9 	.word	0x0801acb9
 801c658:	2000002c 	.word	0x2000002c

0801c65c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c65c:	b510      	push	{r4, lr}
 801c65e:	4604      	mov	r4, r0
 801c660:	f7ff ff88 	bl	801c574 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c664:	4620      	mov	r0, r4
 801c666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c66a:	f7ff bfbd 	b.w	801c5e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c670 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c670:	b538      	push	{r3, r4, r5, lr}
 801c672:	4c15      	ldr	r4, [pc, #84]	; (801c6c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c674:	4605      	mov	r5, r0
 801c676:	7823      	ldrb	r3, [r4, #0]
 801c678:	f3bf 8f5b 	dmb	ish
 801c67c:	07da      	lsls	r2, r3, #31
 801c67e:	d40b      	bmi.n	801c698 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c680:	4620      	mov	r0, r4
 801c682:	f006 fcba 	bl	8022ffa <__cxa_guard_acquire>
 801c686:	b138      	cbz	r0, 801c698 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c688:	4620      	mov	r0, r4
 801c68a:	f006 fcc2 	bl	8023012 <__cxa_guard_release>
 801c68e:	4a0f      	ldr	r2, [pc, #60]	; (801c6cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c690:	490f      	ldr	r1, [pc, #60]	; (801c6d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c692:	4810      	ldr	r0, [pc, #64]	; (801c6d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c694:	f006 fcaa 	bl	8022fec <__aeabi_atexit>
 801c698:	4c0f      	ldr	r4, [pc, #60]	; (801c6d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c69a:	7823      	ldrb	r3, [r4, #0]
 801c69c:	f3bf 8f5b 	dmb	ish
 801c6a0:	07db      	lsls	r3, r3, #31
 801c6a2:	d40b      	bmi.n	801c6bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	f006 fca8 	bl	8022ffa <__cxa_guard_acquire>
 801c6aa:	b138      	cbz	r0, 801c6bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	f006 fcb0 	bl	8023012 <__cxa_guard_release>
 801c6b2:	4a06      	ldr	r2, [pc, #24]	; (801c6cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c6b4:	4909      	ldr	r1, [pc, #36]	; (801c6dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c6b6:	480a      	ldr	r0, [pc, #40]	; (801c6e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c6b8:	f006 fc98 	bl	8022fec <__aeabi_atexit>
 801c6bc:	4b05      	ldr	r3, [pc, #20]	; (801c6d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c6be:	642b      	str	r3, [r5, #64]	; 0x40
 801c6c0:	4b07      	ldr	r3, [pc, #28]	; (801c6e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c6c2:	646b      	str	r3, [r5, #68]	; 0x44
 801c6c4:	bd38      	pop	{r3, r4, r5, pc}
 801c6c6:	bf00      	nop
 801c6c8:	20056620 	.word	0x20056620
 801c6cc:	20000000 	.word	0x20000000
 801c6d0:	0801acaf 	.word	0x0801acaf
 801c6d4:	20000058 	.word	0x20000058
 801c6d8:	20056624 	.word	0x20056624
 801c6dc:	0801acad 	.word	0x0801acad
 801c6e0:	2000005c 	.word	0x2000005c

0801c6e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c6e4:	b538      	push	{r3, r4, r5, lr}
 801c6e6:	4c15      	ldr	r4, [pc, #84]	; (801c73c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c6e8:	4605      	mov	r5, r0
 801c6ea:	7823      	ldrb	r3, [r4, #0]
 801c6ec:	f3bf 8f5b 	dmb	ish
 801c6f0:	07da      	lsls	r2, r3, #31
 801c6f2:	d40b      	bmi.n	801c70c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	f006 fc80 	bl	8022ffa <__cxa_guard_acquire>
 801c6fa:	b138      	cbz	r0, 801c70c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	f006 fc88 	bl	8023012 <__cxa_guard_release>
 801c702:	4a0f      	ldr	r2, [pc, #60]	; (801c740 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c704:	490f      	ldr	r1, [pc, #60]	; (801c744 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c706:	4810      	ldr	r0, [pc, #64]	; (801c748 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c708:	f006 fc70 	bl	8022fec <__aeabi_atexit>
 801c70c:	4c0f      	ldr	r4, [pc, #60]	; (801c74c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c70e:	7823      	ldrb	r3, [r4, #0]
 801c710:	f3bf 8f5b 	dmb	ish
 801c714:	07db      	lsls	r3, r3, #31
 801c716:	d40b      	bmi.n	801c730 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c718:	4620      	mov	r0, r4
 801c71a:	f006 fc6e 	bl	8022ffa <__cxa_guard_acquire>
 801c71e:	b138      	cbz	r0, 801c730 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c720:	4620      	mov	r0, r4
 801c722:	f006 fc76 	bl	8023012 <__cxa_guard_release>
 801c726:	4a06      	ldr	r2, [pc, #24]	; (801c740 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c728:	4909      	ldr	r1, [pc, #36]	; (801c750 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c72a:	480a      	ldr	r0, [pc, #40]	; (801c754 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c72c:	f006 fc5e 	bl	8022fec <__aeabi_atexit>
 801c730:	4b05      	ldr	r3, [pc, #20]	; (801c748 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c732:	63ab      	str	r3, [r5, #56]	; 0x38
 801c734:	4b07      	ldr	r3, [pc, #28]	; (801c754 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c736:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c738:	bd38      	pop	{r3, r4, r5, pc}
 801c73a:	bf00      	nop
 801c73c:	20056600 	.word	0x20056600
 801c740:	20000000 	.word	0x20000000
 801c744:	0801acb3 	.word	0x0801acb3
 801c748:	20000038 	.word	0x20000038
 801c74c:	20056604 	.word	0x20056604
 801c750:	0801acb1 	.word	0x0801acb1
 801c754:	2000003c 	.word	0x2000003c

0801c758 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c758:	b510      	push	{r4, lr}
 801c75a:	4604      	mov	r4, r0
 801c75c:	f7ff ff88 	bl	801c670 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c760:	4620      	mov	r0, r4
 801c762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c766:	f7ff bfbd 	b.w	801c6e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c76c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c76c:	b538      	push	{r3, r4, r5, lr}
 801c76e:	4c15      	ldr	r4, [pc, #84]	; (801c7c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c770:	4605      	mov	r5, r0
 801c772:	7823      	ldrb	r3, [r4, #0]
 801c774:	f3bf 8f5b 	dmb	ish
 801c778:	07da      	lsls	r2, r3, #31
 801c77a:	d40b      	bmi.n	801c794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c77c:	4620      	mov	r0, r4
 801c77e:	f006 fc3c 	bl	8022ffa <__cxa_guard_acquire>
 801c782:	b138      	cbz	r0, 801c794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c784:	4620      	mov	r0, r4
 801c786:	f006 fc44 	bl	8023012 <__cxa_guard_release>
 801c78a:	4a0f      	ldr	r2, [pc, #60]	; (801c7c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c78c:	490f      	ldr	r1, [pc, #60]	; (801c7cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c78e:	4810      	ldr	r0, [pc, #64]	; (801c7d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c790:	f006 fc2c 	bl	8022fec <__aeabi_atexit>
 801c794:	4c0f      	ldr	r4, [pc, #60]	; (801c7d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c796:	7823      	ldrb	r3, [r4, #0]
 801c798:	f3bf 8f5b 	dmb	ish
 801c79c:	07db      	lsls	r3, r3, #31
 801c79e:	d40b      	bmi.n	801c7b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c7a0:	4620      	mov	r0, r4
 801c7a2:	f006 fc2a 	bl	8022ffa <__cxa_guard_acquire>
 801c7a6:	b138      	cbz	r0, 801c7b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c7a8:	4620      	mov	r0, r4
 801c7aa:	f006 fc32 	bl	8023012 <__cxa_guard_release>
 801c7ae:	4a06      	ldr	r2, [pc, #24]	; (801c7c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c7b0:	4909      	ldr	r1, [pc, #36]	; (801c7d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c7b2:	480a      	ldr	r0, [pc, #40]	; (801c7dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c7b4:	f006 fc1a 	bl	8022fec <__aeabi_atexit>
 801c7b8:	4b05      	ldr	r3, [pc, #20]	; (801c7d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c7ba:	652b      	str	r3, [r5, #80]	; 0x50
 801c7bc:	4b07      	ldr	r3, [pc, #28]	; (801c7dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c7be:	656b      	str	r3, [r5, #84]	; 0x54
 801c7c0:	bd38      	pop	{r3, r4, r5, pc}
 801c7c2:	bf00      	nop
 801c7c4:	200565f8 	.word	0x200565f8
 801c7c8:	20000000 	.word	0x20000000
 801c7cc:	0801aca7 	.word	0x0801aca7
 801c7d0:	20000030 	.word	0x20000030
 801c7d4:	200565fc 	.word	0x200565fc
 801c7d8:	0801aca5 	.word	0x0801aca5
 801c7dc:	20000034 	.word	0x20000034

0801c7e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c7e0:	b538      	push	{r3, r4, r5, lr}
 801c7e2:	4c15      	ldr	r4, [pc, #84]	; (801c838 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c7e4:	4605      	mov	r5, r0
 801c7e6:	7823      	ldrb	r3, [r4, #0]
 801c7e8:	f3bf 8f5b 	dmb	ish
 801c7ec:	07da      	lsls	r2, r3, #31
 801c7ee:	d40b      	bmi.n	801c808 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c7f0:	4620      	mov	r0, r4
 801c7f2:	f006 fc02 	bl	8022ffa <__cxa_guard_acquire>
 801c7f6:	b138      	cbz	r0, 801c808 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c7f8:	4620      	mov	r0, r4
 801c7fa:	f006 fc0a 	bl	8023012 <__cxa_guard_release>
 801c7fe:	4a0f      	ldr	r2, [pc, #60]	; (801c83c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c800:	490f      	ldr	r1, [pc, #60]	; (801c840 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c802:	4810      	ldr	r0, [pc, #64]	; (801c844 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c804:	f006 fbf2 	bl	8022fec <__aeabi_atexit>
 801c808:	4c0f      	ldr	r4, [pc, #60]	; (801c848 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c80a:	7823      	ldrb	r3, [r4, #0]
 801c80c:	f3bf 8f5b 	dmb	ish
 801c810:	07db      	lsls	r3, r3, #31
 801c812:	d40b      	bmi.n	801c82c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c814:	4620      	mov	r0, r4
 801c816:	f006 fbf0 	bl	8022ffa <__cxa_guard_acquire>
 801c81a:	b138      	cbz	r0, 801c82c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c81c:	4620      	mov	r0, r4
 801c81e:	f006 fbf8 	bl	8023012 <__cxa_guard_release>
 801c822:	4a06      	ldr	r2, [pc, #24]	; (801c83c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c824:	4909      	ldr	r1, [pc, #36]	; (801c84c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c826:	480a      	ldr	r0, [pc, #40]	; (801c850 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c828:	f006 fbe0 	bl	8022fec <__aeabi_atexit>
 801c82c:	4b05      	ldr	r3, [pc, #20]	; (801c844 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c82e:	64ab      	str	r3, [r5, #72]	; 0x48
 801c830:	4b07      	ldr	r3, [pc, #28]	; (801c850 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c832:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c834:	bd38      	pop	{r3, r4, r5, pc}
 801c836:	bf00      	nop
 801c838:	200565e8 	.word	0x200565e8
 801c83c:	20000000 	.word	0x20000000
 801c840:	0801acab 	.word	0x0801acab
 801c844:	20000020 	.word	0x20000020
 801c848:	200565ec 	.word	0x200565ec
 801c84c:	0801aca9 	.word	0x0801aca9
 801c850:	20000024 	.word	0x20000024

0801c854 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801c854:	b510      	push	{r4, lr}
 801c856:	4604      	mov	r4, r0
 801c858:	f7ff ff88 	bl	801c76c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c85c:	4620      	mov	r0, r4
 801c85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c862:	f7ff bfbd 	b.w	801c7e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801c866 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801c866:	b510      	push	{r4, lr}
 801c868:	4604      	mov	r4, r0
 801c86a:	f7ff fff3 	bl	801c854 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c86e:	4620      	mov	r0, r4
 801c870:	f7ff ff72 	bl	801c758 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c874:	4620      	mov	r0, r4
 801c876:	f7ff fe73 	bl	801c560 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c87a:	4620      	mov	r0, r4
 801c87c:	f7ff fdf2 	bl	801c464 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c880:	4620      	mov	r0, r4
 801c882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c886:	f7ff bee9 	b.w	801c65c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801c88c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c890:	b087      	sub	sp, #28
 801c892:	7888      	ldrb	r0, [r1, #2]
 801c894:	4616      	mov	r6, r2
 801c896:	9001      	str	r0, [sp, #4]
 801c898:	7848      	ldrb	r0, [r1, #1]
 801c89a:	9100      	str	r1, [sp, #0]
 801c89c:	9002      	str	r0, [sp, #8]
 801c89e:	7808      	ldrb	r0, [r1, #0]
 801c8a0:	9901      	ldr	r1, [sp, #4]
 801c8a2:	9003      	str	r0, [sp, #12]
 801c8a4:	9802      	ldr	r0, [sp, #8]
 801c8a6:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801c8aa:	0200      	lsls	r0, r0, #8
 801c8ac:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801c8b0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801c8b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801c8b8:	9903      	ldr	r1, [sp, #12]
 801c8ba:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c8be:	4308      	orrs	r0, r1
 801c8c0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801c8c4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801c8c8:	9005      	str	r0, [sp, #20]
 801c8ca:	fb05 ca0e 	mla	sl, r5, lr, ip
 801c8ce:	2d00      	cmp	r5, #0
 801c8d0:	eb06 080a 	add.w	r8, r6, sl
 801c8d4:	db4a      	blt.n	801c96c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801c8d6:	45a9      	cmp	r9, r5
 801c8d8:	dd48      	ble.n	801c96c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801c8da:	f1bc 0f00 	cmp.w	ip, #0
 801c8de:	db43      	blt.n	801c968 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801c8e0:	45e6      	cmp	lr, ip
 801c8e2:	dd41      	ble.n	801c968 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801c8e4:	f816 600a 	ldrb.w	r6, [r6, sl]
 801c8e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c8ec:	441e      	add	r6, r3
 801c8ee:	f11c 0001 	adds.w	r0, ip, #1
 801c8f2:	d43e      	bmi.n	801c972 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801c8f4:	4586      	cmp	lr, r0
 801c8f6:	dd3c      	ble.n	801c972 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801c8f8:	2a00      	cmp	r2, #0
 801c8fa:	d03a      	beq.n	801c972 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801c8fc:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c904:	4418      	add	r0, r3
 801c906:	3501      	adds	r5, #1
 801c908:	d437      	bmi.n	801c97a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801c90a:	45a9      	cmp	r9, r5
 801c90c:	dd35      	ble.n	801c97a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801c90e:	b3a4      	cbz	r4, 801c97a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801c910:	f1bc 0f00 	cmp.w	ip, #0
 801c914:	db2f      	blt.n	801c976 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801c916:	45e6      	cmp	lr, ip
 801c918:	dd2d      	ble.n	801c976 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801c91a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c91e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c922:	441d      	add	r5, r3
 801c924:	f11c 0c01 	adds.w	ip, ip, #1
 801c928:	d42a      	bmi.n	801c980 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801c92a:	45e6      	cmp	lr, ip
 801c92c:	dd28      	ble.n	801c980 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801c92e:	b33a      	cbz	r2, 801c980 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801c930:	44c6      	add	lr, r8
 801c932:	f89e c001 	ldrb.w	ip, [lr, #1]
 801c936:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c93a:	4463      	add	r3, ip
 801c93c:	ea6f 0c07 	mvn.w	ip, r7
 801c940:	2a0f      	cmp	r2, #15
 801c942:	f896 a000 	ldrb.w	sl, [r6]
 801c946:	fa5f fc8c 	uxtb.w	ip, ip
 801c94a:	f890 b000 	ldrb.w	fp, [r0]
 801c94e:	f895 9000 	ldrb.w	r9, [r5]
 801c952:	7819      	ldrb	r1, [r3, #0]
 801c954:	d801      	bhi.n	801c95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801c956:	2c0f      	cmp	r4, #15
 801c958:	d914      	bls.n	801c984 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801c95a:	4b40      	ldr	r3, [pc, #256]	; (801ca5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801c95c:	f240 1157 	movw	r1, #343	; 0x157
 801c960:	4a3f      	ldr	r2, [pc, #252]	; (801ca60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801c962:	4840      	ldr	r0, [pc, #256]	; (801ca64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801c964:	f006 fc4e 	bl	8023204 <__assert_func>
 801c968:	ae05      	add	r6, sp, #20
 801c96a:	e7c0      	b.n	801c8ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801c96c:	a805      	add	r0, sp, #20
 801c96e:	4606      	mov	r6, r0
 801c970:	e7c9      	b.n	801c906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801c972:	a805      	add	r0, sp, #20
 801c974:	e7c7      	b.n	801c906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801c976:	ad05      	add	r5, sp, #20
 801c978:	e7d4      	b.n	801c924 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801c97a:	ab05      	add	r3, sp, #20
 801c97c:	461d      	mov	r5, r3
 801c97e:	e7dd      	b.n	801c93c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801c980:	ab05      	add	r3, sp, #20
 801c982:	e7db      	b.n	801c93c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801c984:	b292      	uxth	r2, r2
 801c986:	b2a4      	uxth	r4, r4
 801c988:	fa1f fc8c 	uxth.w	ip, ip
 801c98c:	fb02 f804 	mul.w	r8, r2, r4
 801c990:	0112      	lsls	r2, r2, #4
 801c992:	b2bf      	uxth	r7, r7
 801c994:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801c998:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801c99c:	eba2 0208 	sub.w	r2, r2, r8
 801c9a0:	b2a4      	uxth	r4, r4
 801c9a2:	b292      	uxth	r2, r2
 801c9a4:	ebae 0e04 	sub.w	lr, lr, r4
 801c9a8:	fb02 fb0b 	mul.w	fp, r2, fp
 801c9ac:	fa1f fe8e 	uxth.w	lr, lr
 801c9b0:	fb0e ba0a 	mla	sl, lr, sl, fp
 801c9b4:	fb04 aa09 	mla	sl, r4, r9, sl
 801c9b8:	fb08 aa01 	mla	sl, r8, r1, sl
 801c9bc:	9903      	ldr	r1, [sp, #12]
 801c9be:	fb11 f90c 	smulbb	r9, r1, ip
 801c9c2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801c9c6:	9900      	ldr	r1, [sp, #0]
 801c9c8:	fb0a 9a07 	mla	sl, sl, r7, r9
 801c9cc:	fa1f fa8a 	uxth.w	sl, sl
 801c9d0:	f10a 0901 	add.w	r9, sl, #1
 801c9d4:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801c9d8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9dc:	f881 a000 	strb.w	sl, [r1]
 801c9e0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c9e4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c9e8:	fb02 fa0a 	mul.w	sl, r2, sl
 801c9ec:	9902      	ldr	r1, [sp, #8]
 801c9ee:	fb0e aa09 	mla	sl, lr, r9, sl
 801c9f2:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c9f6:	fb04 aa09 	mla	sl, r4, r9, sl
 801c9fa:	f893 9001 	ldrb.w	r9, [r3, #1]
 801c9fe:	fb08 a909 	mla	r9, r8, r9, sl
 801ca02:	fb11 fa0c 	smulbb	sl, r1, ip
 801ca06:	9900      	ldr	r1, [sp, #0]
 801ca08:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ca0c:	fb09 a907 	mla	r9, r9, r7, sl
 801ca10:	fa1f f989 	uxth.w	r9, r9
 801ca14:	f109 0a01 	add.w	sl, r9, #1
 801ca18:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ca1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca20:	f881 9001 	strb.w	r9, [r1, #1]
 801ca24:	7880      	ldrb	r0, [r0, #2]
 801ca26:	78b6      	ldrb	r6, [r6, #2]
 801ca28:	4342      	muls	r2, r0
 801ca2a:	78a8      	ldrb	r0, [r5, #2]
 801ca2c:	789b      	ldrb	r3, [r3, #2]
 801ca2e:	fb0e 2206 	mla	r2, lr, r6, r2
 801ca32:	fb04 2400 	mla	r4, r4, r0, r2
 801ca36:	fb08 4803 	mla	r8, r8, r3, r4
 801ca3a:	9b01      	ldr	r3, [sp, #4]
 801ca3c:	fb13 fc0c 	smulbb	ip, r3, ip
 801ca40:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ca44:	fb08 c707 	mla	r7, r8, r7, ip
 801ca48:	b2bf      	uxth	r7, r7
 801ca4a:	f107 0c01 	add.w	ip, r7, #1
 801ca4e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ca52:	123f      	asrs	r7, r7, #8
 801ca54:	708f      	strb	r7, [r1, #2]
 801ca56:	b007      	add	sp, #28
 801ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca5c:	08027e53 	.word	0x08027e53
 801ca60:	080283bb 	.word	0x080283bb
 801ca64:	08027f1c 	.word	0x08027f1c

0801ca68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca6c:	ed2d 8b08 	vpush	{d8-d11}
 801ca70:	b093      	sub	sp, #76	; 0x4c
 801ca72:	eeb0 aa40 	vmov.f32	s20, s0
 801ca76:	eef0 9a60 	vmov.f32	s19, s1
 801ca7a:	9210      	str	r2, [sp, #64]	; 0x40
 801ca7c:	eeb0 9a41 	vmov.f32	s18, s2
 801ca80:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ca82:	eeb0 8a62 	vmov.f32	s16, s5
 801ca86:	9309      	str	r3, [sp, #36]	; 0x24
 801ca88:	eef0 8a43 	vmov.f32	s17, s6
 801ca8c:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801ca90:	eef0 ba44 	vmov.f32	s23, s8
 801ca94:	9011      	str	r0, [sp, #68]	; 0x44
 801ca96:	eeb0 ba64 	vmov.f32	s22, s9
 801ca9a:	930e      	str	r3, [sp, #56]	; 0x38
 801ca9c:	eef0 aa45 	vmov.f32	s21, s10
 801caa0:	6850      	ldr	r0, [r2, #4]
 801caa2:	910d      	str	r1, [sp, #52]	; 0x34
 801caa4:	6812      	ldr	r2, [r2, #0]
 801caa6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801caaa:	fb00 1303 	mla	r3, r0, r3, r1
 801caae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cab2:	18d3      	adds	r3, r2, r3
 801cab4:	930a      	str	r3, [sp, #40]	; 0x28
 801cab6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	930c      	str	r3, [sp, #48]	; 0x30
 801cabc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cabe:	685c      	ldr	r4, [r3, #4]
 801cac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cac2:	3404      	adds	r4, #4
 801cac4:	43db      	mvns	r3, r3
 801cac6:	b2db      	uxtb	r3, r3
 801cac8:	930b      	str	r3, [sp, #44]	; 0x2c
 801caca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cacc:	2b00      	cmp	r3, #0
 801cace:	dc03      	bgt.n	801cad8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	f340 8250 	ble.w	801cf78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801cad8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cada:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cade:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cae2:	1e48      	subs	r0, r1, #1
 801cae4:	1e55      	subs	r5, r2, #1
 801cae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cae8:	2b00      	cmp	r3, #0
 801caea:	f340 80ee 	ble.w	801ccca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801caee:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801caf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801caf2:	1436      	asrs	r6, r6, #16
 801caf4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801caf8:	d406      	bmi.n	801cb08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cafa:	4286      	cmp	r6, r0
 801cafc:	da04      	bge.n	801cb08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	db02      	blt.n	801cb08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cb02:	42ab      	cmp	r3, r5
 801cb04:	f2c0 80e2 	blt.w	801cccc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801cb08:	3601      	adds	r6, #1
 801cb0a:	f100 80cf 	bmi.w	801ccac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801cb0e:	42b1      	cmp	r1, r6
 801cb10:	f2c0 80cc 	blt.w	801ccac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801cb14:	3301      	adds	r3, #1
 801cb16:	f100 80c9 	bmi.w	801ccac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	f2c0 80c6 	blt.w	801ccac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801cb20:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801cb24:	f1bb 0f00 	cmp.w	fp, #0
 801cb28:	f340 80f1 	ble.w	801cd0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cb2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cb2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cb30:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801cb32:	141d      	asrs	r5, r3, #16
 801cb34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cb36:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cb3a:	68c7      	ldr	r7, [r0, #12]
 801cb3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801cb3e:	1418      	asrs	r0, r3, #16
 801cb40:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801cb44:	6892      	ldr	r2, [r2, #8]
 801cb46:	f100 8137 	bmi.w	801cdb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801cb4a:	f102 3cff 	add.w	ip, r2, #4294967295
 801cb4e:	4560      	cmp	r0, ip
 801cb50:	f280 8132 	bge.w	801cdb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801cb54:	2d00      	cmp	r5, #0
 801cb56:	f2c0 812f 	blt.w	801cdb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801cb5a:	f107 3cff 	add.w	ip, r7, #4294967295
 801cb5e:	4565      	cmp	r5, ip
 801cb60:	f280 812a 	bge.w	801cdb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801cb64:	b212      	sxth	r2, r2
 801cb66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801cb68:	fb05 0002 	mla	r0, r5, r2, r0
 801cb6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cb6e:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cb72:	4405      	add	r5, r0
 801cb74:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cb78:	eb04 0e0c 	add.w	lr, r4, ip
 801cb7c:	f1b8 0f00 	cmp.w	r8, #0
 801cb80:	f000 810c 	beq.w	801cd9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801cb84:	786f      	ldrb	r7, [r5, #1]
 801cb86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb8a:	4427      	add	r7, r4
 801cb8c:	2900      	cmp	r1, #0
 801cb8e:	f000 810d 	beq.w	801cdac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cb92:	18a8      	adds	r0, r5, r2
 801cb94:	5caa      	ldrb	r2, [r5, r2]
 801cb96:	7840      	ldrb	r0, [r0, #1]
 801cb98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cba0:	4422      	add	r2, r4
 801cba2:	4420      	add	r0, r4
 801cba4:	fa1f f388 	uxth.w	r3, r8
 801cba8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801cbac:	b289      	uxth	r1, r1
 801cbae:	f897 c000 	ldrb.w	ip, [r7]
 801cbb2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801cbb6:	fb03 f901 	mul.w	r9, r3, r1
 801cbba:	011b      	lsls	r3, r3, #4
 801cbbc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cbc0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801cbc4:	eba3 0309 	sub.w	r3, r3, r9
 801cbc8:	b289      	uxth	r1, r1
 801cbca:	b29b      	uxth	r3, r3
 801cbcc:	eba8 0801 	sub.w	r8, r8, r1
 801cbd0:	fb03 fc0c 	mul.w	ip, r3, ip
 801cbd4:	fa1f f888 	uxth.w	r8, r8
 801cbd8:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbdc:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cbe0:	f892 a000 	ldrb.w	sl, [r2]
 801cbe4:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cbe8:	f890 a000 	ldrb.w	sl, [r0]
 801cbec:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cbf0:	f896 a000 	ldrb.w	sl, [r6]
 801cbf4:	fb1a fa03 	smulbb	sl, sl, r3
 801cbf8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cbfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbfe:	fb0c ac05 	mla	ip, ip, r5, sl
 801cc02:	fa1f fc8c 	uxth.w	ip, ip
 801cc06:	f10c 0a01 	add.w	sl, ip, #1
 801cc0a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cc0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc12:	f886 a000 	strb.w	sl, [r6]
 801cc16:	f897 c001 	ldrb.w	ip, [r7, #1]
 801cc1a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801cc1e:	fb03 fc0c 	mul.w	ip, r3, ip
 801cc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc24:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cc28:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cc2c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cc30:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cc34:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cc38:	f896 a001 	ldrb.w	sl, [r6, #1]
 801cc3c:	fb1a fa03 	smulbb	sl, sl, r3
 801cc40:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cc44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc46:	fb0c ac05 	mla	ip, ip, r5, sl
 801cc4a:	fa1f fc8c 	uxth.w	ip, ip
 801cc4e:	f10c 0a01 	add.w	sl, ip, #1
 801cc52:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801cc56:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cc5a:	f886 c001 	strb.w	ip, [r6, #1]
 801cc5e:	78bf      	ldrb	r7, [r7, #2]
 801cc60:	f89e c002 	ldrb.w	ip, [lr, #2]
 801cc64:	437b      	muls	r3, r7
 801cc66:	fb08 330c 	mla	r3, r8, ip, r3
 801cc6a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801cc6e:	7882      	ldrb	r2, [r0, #2]
 801cc70:	fb01 310c 	mla	r1, r1, ip, r3
 801cc74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc76:	fb09 1902 	mla	r9, r9, r2, r1
 801cc7a:	78b1      	ldrb	r1, [r6, #2]
 801cc7c:	fb11 f103 	smulbb	r1, r1, r3
 801cc80:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cc84:	fb09 1505 	mla	r5, r9, r5, r1
 801cc88:	b2ad      	uxth	r5, r5
 801cc8a:	1c6b      	adds	r3, r5, #1
 801cc8c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cc90:	122d      	asrs	r5, r5, #8
 801cc92:	70b5      	strb	r5, [r6, #2]
 801cc94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cc96:	3603      	adds	r6, #3
 801cc98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801cc9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc9e:	4413      	add	r3, r2
 801cca0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801cca2:	9325      	str	r3, [sp, #148]	; 0x94
 801cca4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cca6:	4413      	add	r3, r2
 801cca8:	9326      	str	r3, [sp, #152]	; 0x98
 801ccaa:	e73b      	b.n	801cb24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801ccac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ccae:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801ccb0:	4433      	add	r3, r6
 801ccb2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801ccb4:	9325      	str	r3, [sp, #148]	; 0x94
 801ccb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ccb8:	4433      	add	r3, r6
 801ccba:	9326      	str	r3, [sp, #152]	; 0x98
 801ccbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccbe:	3b01      	subs	r3, #1
 801ccc0:	9309      	str	r3, [sp, #36]	; 0x24
 801ccc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccc4:	3303      	adds	r3, #3
 801ccc6:	930a      	str	r3, [sp, #40]	; 0x28
 801ccc8:	e70d      	b.n	801cae6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ccca:	d028      	beq.n	801cd1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccce:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ccd0:	3b01      	subs	r3, #1
 801ccd2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801ccd4:	fb00 5003 	mla	r0, r0, r3, r5
 801ccd8:	1400      	asrs	r0, r0, #16
 801ccda:	f53f af21 	bmi.w	801cb20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ccde:	3901      	subs	r1, #1
 801cce0:	4288      	cmp	r0, r1
 801cce2:	f6bf af1d 	bge.w	801cb20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801cce6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801cce8:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ccea:	fb01 0303 	mla	r3, r1, r3, r0
 801ccee:	141b      	asrs	r3, r3, #16
 801ccf0:	f53f af16 	bmi.w	801cb20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ccf4:	3a01      	subs	r2, #1
 801ccf6:	4293      	cmp	r3, r2
 801ccf8:	f6bf af12 	bge.w	801cb20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ccfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccfe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cd02:	1cdf      	adds	r7, r3, #3
 801cd04:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801cd08:	f1b9 0f00 	cmp.w	r9, #0
 801cd0c:	dc73      	bgt.n	801cdf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801cd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd1a:	441a      	add	r2, r3
 801cd1c:	920a      	str	r2, [sp, #40]	; 0x28
 801cd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	f340 8129 	ble.w	801cf78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801cd26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd2c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cd30:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cd34:	eef0 6a48 	vmov.f32	s13, s16
 801cd38:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cd3c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cd40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd44:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801cd48:	eef0 6a68 	vmov.f32	s13, s17
 801cd4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd50:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801cd54:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cd58:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cd5c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cd60:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cd64:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cd68:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cd6c:	ee18 2a10 	vmov	r2, s16
 801cd70:	eeb0 8a47 	vmov.f32	s16, s14
 801cd74:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd78:	ee18 2a90 	vmov	r2, s17
 801cd7c:	9327      	str	r3, [sp, #156]	; 0x9c
 801cd7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd80:	eef0 8a67 	vmov.f32	s17, s15
 801cd84:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd88:	9328      	str	r3, [sp, #160]	; 0xa0
 801cd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd8e:	3b01      	subs	r3, #1
 801cd90:	930d      	str	r3, [sp, #52]	; 0x34
 801cd92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd94:	bf08      	it	eq
 801cd96:	4613      	moveq	r3, r2
 801cd98:	9309      	str	r3, [sp, #36]	; 0x24
 801cd9a:	e696      	b.n	801caca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cd9c:	b149      	cbz	r1, 801cdb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cd9e:	5caa      	ldrb	r2, [r5, r2]
 801cda0:	4670      	mov	r0, lr
 801cda2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cda6:	4422      	add	r2, r4
 801cda8:	4677      	mov	r7, lr
 801cdaa:	e6fb      	b.n	801cba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801cdac:	4670      	mov	r0, lr
 801cdae:	4672      	mov	r2, lr
 801cdb0:	e6f8      	b.n	801cba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801cdb2:	4670      	mov	r0, lr
 801cdb4:	4672      	mov	r2, lr
 801cdb6:	e7f7      	b.n	801cda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801cdb8:	f110 0c01 	adds.w	ip, r0, #1
 801cdbc:	f53f af6a 	bmi.w	801cc94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801cdc0:	4562      	cmp	r2, ip
 801cdc2:	f6ff af67 	blt.w	801cc94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801cdc6:	f115 0c01 	adds.w	ip, r5, #1
 801cdca:	f53f af63 	bmi.w	801cc94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801cdce:	4567      	cmp	r7, ip
 801cdd0:	f6ff af60 	blt.w	801cc94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801cdd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdd6:	b23f      	sxth	r7, r7
 801cdd8:	b212      	sxth	r2, r2
 801cdda:	9002      	str	r0, [sp, #8]
 801cddc:	9701      	str	r7, [sp, #4]
 801cdde:	9200      	str	r2, [sp, #0]
 801cde0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cde2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cde4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801cde8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801cdec:	4623      	mov	r3, r4
 801cdee:	4631      	mov	r1, r6
 801cdf0:	f7ff fd4c 	bl	801c88c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801cdf4:	e74e      	b.n	801cc94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801cdf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cdf8:	9826      	ldr	r0, [sp, #152]	; 0x98
 801cdfa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cdfe:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801ce00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ce02:	1400      	asrs	r0, r0, #16
 801ce04:	142d      	asrs	r5, r5, #16
 801ce06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ce08:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ce0c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ce10:	fb02 5000 	mla	r0, r2, r0, r5
 801ce14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ce16:	f815 e000 	ldrb.w	lr, [r5, r0]
 801ce1a:	eb05 0c00 	add.w	ip, r5, r0
 801ce1e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ce22:	eb04 060e 	add.w	r6, r4, lr
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	f000 8097 	beq.w	801cf5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801ce2c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ce30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce34:	4425      	add	r5, r4
 801ce36:	2900      	cmp	r1, #0
 801ce38:	f000 8098 	beq.w	801cf6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801ce3c:	eb0c 0002 	add.w	r0, ip, r2
 801ce40:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ce44:	7840      	ldrb	r0, [r0, #1]
 801ce46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ce4e:	4422      	add	r2, r4
 801ce50:	4420      	add	r0, r4
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ce58:	b289      	uxth	r1, r1
 801ce5a:	f895 e000 	ldrb.w	lr, [r5]
 801ce5e:	3703      	adds	r7, #3
 801ce60:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce64:	fb03 f801 	mul.w	r8, r3, r1
 801ce68:	011b      	lsls	r3, r3, #4
 801ce6a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ce6e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ce72:	eba3 0308 	sub.w	r3, r3, r8
 801ce76:	b289      	uxth	r1, r1
 801ce78:	b29b      	uxth	r3, r3
 801ce7a:	ebac 0c01 	sub.w	ip, ip, r1
 801ce7e:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce82:	fa1f fc8c 	uxth.w	ip, ip
 801ce86:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce8a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ce8e:	f892 b000 	ldrb.w	fp, [r2]
 801ce92:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce96:	f890 b000 	ldrb.w	fp, [r0]
 801ce9a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ce9e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801cea2:	fb1b fb03 	smulbb	fp, fp, r3
 801cea6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ceaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ceac:	fb0e be0a 	mla	lr, lr, sl, fp
 801ceb0:	fa1f fe8e 	uxth.w	lr, lr
 801ceb4:	f10e 0b01 	add.w	fp, lr, #1
 801ceb8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cebc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cec0:	f807 ec06 	strb.w	lr, [r7, #-6]
 801cec4:	f895 e001 	ldrb.w	lr, [r5, #1]
 801cec8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cecc:	fb03 fe0e 	mul.w	lr, r3, lr
 801ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ced2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ced6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ceda:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cede:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cee2:	fb08 ee0b 	mla	lr, r8, fp, lr
 801cee6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ceea:	fb1b fb03 	smulbb	fp, fp, r3
 801ceee:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801cef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cef4:	fb0e be0a 	mla	lr, lr, sl, fp
 801cef8:	fa1f fe8e 	uxth.w	lr, lr
 801cefc:	f10e 0b01 	add.w	fp, lr, #1
 801cf00:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cf04:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cf08:	f807 ec05 	strb.w	lr, [r7, #-5]
 801cf0c:	78ad      	ldrb	r5, [r5, #2]
 801cf0e:	78b6      	ldrb	r6, [r6, #2]
 801cf10:	436b      	muls	r3, r5
 801cf12:	7895      	ldrb	r5, [r2, #2]
 801cf14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cf16:	fb0c 3306 	mla	r3, ip, r6, r3
 801cf1a:	fb01 3305 	mla	r3, r1, r5, r3
 801cf1e:	7885      	ldrb	r5, [r0, #2]
 801cf20:	fb08 3805 	mla	r8, r8, r5, r3
 801cf24:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801cf28:	fb13 f302 	smulbb	r3, r3, r2
 801cf2c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801cf30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801cf32:	fb08 380a 	mla	r8, r8, sl, r3
 801cf36:	fa1f f888 	uxth.w	r8, r8
 801cf3a:	f108 0301 	add.w	r3, r8, #1
 801cf3e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801cf42:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cf44:	4413      	add	r3, r2
 801cf46:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801cf48:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf4c:	9325      	str	r3, [sp, #148]	; 0x94
 801cf4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf50:	f807 8c04 	strb.w	r8, [r7, #-4]
 801cf54:	4413      	add	r3, r2
 801cf56:	9326      	str	r3, [sp, #152]	; 0x98
 801cf58:	e6d6      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cf5a:	b151      	cbz	r1, 801cf72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801cf5c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cf60:	4630      	mov	r0, r6
 801cf62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf66:	4422      	add	r2, r4
 801cf68:	4635      	mov	r5, r6
 801cf6a:	e772      	b.n	801ce52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801cf6c:	4630      	mov	r0, r6
 801cf6e:	4632      	mov	r2, r6
 801cf70:	e76f      	b.n	801ce52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801cf72:	4630      	mov	r0, r6
 801cf74:	4632      	mov	r2, r6
 801cf76:	e7f7      	b.n	801cf68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801cf78:	b013      	add	sp, #76	; 0x4c
 801cf7a:	ecbd 8b08 	vpop	{d8-d11}
 801cf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cf84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801cf84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf88:	784d      	ldrb	r5, [r1, #1]
 801cf8a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801cf8e:	022d      	lsls	r5, r5, #8
 801cf90:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801cf94:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801cf98:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801cf9c:	f891 9000 	ldrb.w	r9, [r1]
 801cfa0:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801cfa4:	ea45 0509 	orr.w	r5, r5, r9
 801cfa8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801cfac:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801cfb0:	9501      	str	r5, [sp, #4]
 801cfb2:	fb06 470c 	mla	r7, r6, ip, r4
 801cfb6:	2e00      	cmp	r6, #0
 801cfb8:	eb02 0e07 	add.w	lr, r2, r7
 801cfbc:	db46      	blt.n	801d04c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801cfbe:	45b0      	cmp	r8, r6
 801cfc0:	dd44      	ble.n	801d04c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801cfc2:	2c00      	cmp	r4, #0
 801cfc4:	db40      	blt.n	801d048 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801cfc6:	45a4      	cmp	ip, r4
 801cfc8:	dd3e      	ble.n	801d048 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801cfca:	5dd7      	ldrb	r7, [r2, r7]
 801cfcc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cfd0:	441f      	add	r7, r3
 801cfd2:	1c62      	adds	r2, r4, #1
 801cfd4:	d43d      	bmi.n	801d052 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801cfd6:	4594      	cmp	ip, r2
 801cfd8:	dd3b      	ble.n	801d052 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801cfda:	f1ba 0f00 	cmp.w	sl, #0
 801cfde:	d038      	beq.n	801d052 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801cfe0:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801cfe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfe8:	441d      	add	r5, r3
 801cfea:	3601      	adds	r6, #1
 801cfec:	d435      	bmi.n	801d05a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801cfee:	45b0      	cmp	r8, r6
 801cff0:	dd33      	ble.n	801d05a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801cff2:	b390      	cbz	r0, 801d05a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801cff4:	2c00      	cmp	r4, #0
 801cff6:	db2e      	blt.n	801d056 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801cff8:	45a4      	cmp	ip, r4
 801cffa:	dd2c      	ble.n	801d056 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801cffc:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801d000:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d004:	441e      	add	r6, r3
 801d006:	1c62      	adds	r2, r4, #1
 801d008:	d42a      	bmi.n	801d060 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801d00a:	4594      	cmp	ip, r2
 801d00c:	dd28      	ble.n	801d060 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801d00e:	f1ba 0f00 	cmp.w	sl, #0
 801d012:	d025      	beq.n	801d060 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801d014:	44f4      	add	ip, lr
 801d016:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d01a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d01e:	4413      	add	r3, r2
 801d020:	f1ba 0f0f 	cmp.w	sl, #15
 801d024:	f897 8000 	ldrb.w	r8, [r7]
 801d028:	f895 9000 	ldrb.w	r9, [r5]
 801d02c:	f896 e000 	ldrb.w	lr, [r6]
 801d030:	f893 c000 	ldrb.w	ip, [r3]
 801d034:	d801      	bhi.n	801d03a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801d036:	280f      	cmp	r0, #15
 801d038:	d914      	bls.n	801d064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801d03a:	4b29      	ldr	r3, [pc, #164]	; (801d0e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801d03c:	f240 1157 	movw	r1, #343	; 0x157
 801d040:	4a28      	ldr	r2, [pc, #160]	; (801d0e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801d042:	4829      	ldr	r0, [pc, #164]	; (801d0e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801d044:	f006 f8de 	bl	8023204 <__assert_func>
 801d048:	af01      	add	r7, sp, #4
 801d04a:	e7c2      	b.n	801cfd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801d04c:	ad01      	add	r5, sp, #4
 801d04e:	462f      	mov	r7, r5
 801d050:	e7cb      	b.n	801cfea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801d052:	ad01      	add	r5, sp, #4
 801d054:	e7c9      	b.n	801cfea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801d056:	ae01      	add	r6, sp, #4
 801d058:	e7d5      	b.n	801d006 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801d05a:	ab01      	add	r3, sp, #4
 801d05c:	461e      	mov	r6, r3
 801d05e:	e7df      	b.n	801d020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801d060:	ab01      	add	r3, sp, #4
 801d062:	e7dd      	b.n	801d020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801d064:	fa1f f48a 	uxth.w	r4, sl
 801d068:	b280      	uxth	r0, r0
 801d06a:	fb04 fa00 	mul.w	sl, r4, r0
 801d06e:	0124      	lsls	r4, r4, #4
 801d070:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d074:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801d078:	b282      	uxth	r2, r0
 801d07a:	eba4 000a 	sub.w	r0, r4, sl
 801d07e:	ebab 0b02 	sub.w	fp, fp, r2
 801d082:	b280      	uxth	r0, r0
 801d084:	fa1f fb8b 	uxth.w	fp, fp
 801d088:	fb00 f909 	mul.w	r9, r0, r9
 801d08c:	fb0b 9808 	mla	r8, fp, r8, r9
 801d090:	fb02 8e0e 	mla	lr, r2, lr, r8
 801d094:	fb0a ec0c 	mla	ip, sl, ip, lr
 801d098:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d09c:	f881 c000 	strb.w	ip, [r1]
 801d0a0:	786c      	ldrb	r4, [r5, #1]
 801d0a2:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d0a6:	4344      	muls	r4, r0
 801d0a8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801d0ac:	7874      	ldrb	r4, [r6, #1]
 801d0ae:	fb02 cc04 	mla	ip, r2, r4, ip
 801d0b2:	785c      	ldrb	r4, [r3, #1]
 801d0b4:	fb0a c404 	mla	r4, sl, r4, ip
 801d0b8:	1224      	asrs	r4, r4, #8
 801d0ba:	704c      	strb	r4, [r1, #1]
 801d0bc:	78ad      	ldrb	r5, [r5, #2]
 801d0be:	78bc      	ldrb	r4, [r7, #2]
 801d0c0:	4368      	muls	r0, r5
 801d0c2:	fb0b 0b04 	mla	fp, fp, r4, r0
 801d0c6:	78b0      	ldrb	r0, [r6, #2]
 801d0c8:	fb02 b000 	mla	r0, r2, r0, fp
 801d0cc:	789a      	ldrb	r2, [r3, #2]
 801d0ce:	fb0a 0a02 	mla	sl, sl, r2, r0
 801d0d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0d6:	f881 a002 	strb.w	sl, [r1, #2]
 801d0da:	b003      	add	sp, #12
 801d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0e0:	08027e53 	.word	0x08027e53
 801d0e4:	080283bb 	.word	0x080283bb
 801d0e8:	08027f1c 	.word	0x08027f1c

0801d0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f0:	ed2d 8b0a 	vpush	{d8-d12}
 801d0f4:	b08d      	sub	sp, #52	; 0x34
 801d0f6:	eeb0 aa40 	vmov.f32	s20, s0
 801d0fa:	eef0 9a60 	vmov.f32	s19, s1
 801d0fe:	900b      	str	r0, [sp, #44]	; 0x2c
 801d100:	eeb0 9a41 	vmov.f32	s18, s2
 801d104:	9306      	str	r3, [sp, #24]
 801d106:	eeb0 8a62 	vmov.f32	s16, s5
 801d10a:	eef0 8a43 	vmov.f32	s17, s6
 801d10e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801d110:	eeb0 ca44 	vmov.f32	s24, s8
 801d114:	eef0 ba64 	vmov.f32	s23, s9
 801d118:	eeb0 ba45 	vmov.f32	s22, s10
 801d11c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801d120:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801d124:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d126:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801d12a:	6850      	ldr	r0, [r2, #4]
 801d12c:	6812      	ldr	r2, [r2, #0]
 801d12e:	fb00 1303 	mla	r3, r0, r3, r1
 801d132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d136:	18d3      	adds	r3, r2, r3
 801d138:	9307      	str	r3, [sp, #28]
 801d13a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	9308      	str	r3, [sp, #32]
 801d140:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d142:	685d      	ldr	r5, [r3, #4]
 801d144:	3504      	adds	r5, #4
 801d146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d148:	2b00      	cmp	r3, #0
 801d14a:	dc03      	bgt.n	801d154 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d14e:	2b00      	cmp	r3, #0
 801d150:	f340 81e6 	ble.w	801d520 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d154:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d156:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d15a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d15e:	1e48      	subs	r0, r1, #1
 801d160:	1e56      	subs	r6, r2, #1
 801d162:	9b06      	ldr	r3, [sp, #24]
 801d164:	2b00      	cmp	r3, #0
 801d166:	f340 80bd 	ble.w	801d2e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801d16a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d16c:	1427      	asrs	r7, r4, #16
 801d16e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d172:	d406      	bmi.n	801d182 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d174:	4287      	cmp	r7, r0
 801d176:	da04      	bge.n	801d182 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d178:	2b00      	cmp	r3, #0
 801d17a:	db02      	blt.n	801d182 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d17c:	42b3      	cmp	r3, r6
 801d17e:	f2c0 80b2 	blt.w	801d2e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d182:	3701      	adds	r7, #1
 801d184:	f100 80a1 	bmi.w	801d2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d188:	42b9      	cmp	r1, r7
 801d18a:	f2c0 809e 	blt.w	801d2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d18e:	3301      	adds	r3, #1
 801d190:	f100 809b 	bmi.w	801d2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d194:	429a      	cmp	r2, r3
 801d196:	f2c0 8098 	blt.w	801d2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d19a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d19e:	f1bb 0f00 	cmp.w	fp, #0
 801d1a2:	f340 80bf 	ble.w	801d324 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d1a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d1a8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d1aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d1ac:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d1b0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d1b4:	1420      	asrs	r0, r4, #16
 801d1b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d1b8:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d1bc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d1c0:	6892      	ldr	r2, [r2, #8]
 801d1c2:	f100 8103 	bmi.w	801d3cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d1c6:	f102 3eff 	add.w	lr, r2, #4294967295
 801d1ca:	4570      	cmp	r0, lr
 801d1cc:	f280 80fe 	bge.w	801d3cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d1d0:	2f00      	cmp	r7, #0
 801d1d2:	f2c0 80fb 	blt.w	801d3cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d1d6:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d1da:	4577      	cmp	r7, lr
 801d1dc:	f280 80f6 	bge.w	801d3cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d1e0:	b212      	sxth	r2, r2
 801d1e2:	fb07 0002 	mla	r0, r7, r2, r0
 801d1e6:	9f08      	ldr	r7, [sp, #32]
 801d1e8:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d1ec:	eb07 0e00 	add.w	lr, r7, r0
 801d1f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d1f4:	eb05 0c08 	add.w	ip, r5, r8
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	f000 80d8 	beq.w	801d3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801d1fe:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d202:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d206:	442f      	add	r7, r5
 801d208:	2900      	cmp	r1, #0
 801d20a:	f000 80d9 	beq.w	801d3c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801d20e:	eb0e 0002 	add.w	r0, lr, r2
 801d212:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d216:	7840      	ldrb	r0, [r0, #1]
 801d218:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d21c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d220:	442a      	add	r2, r5
 801d222:	4428      	add	r0, r5
 801d224:	b29b      	uxth	r3, r3
 801d226:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d22a:	b289      	uxth	r1, r1
 801d22c:	f897 8000 	ldrb.w	r8, [r7]
 801d230:	fb03 f901 	mul.w	r9, r3, r1
 801d234:	011b      	lsls	r3, r3, #4
 801d236:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d23a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d23e:	eba3 0309 	sub.w	r3, r3, r9
 801d242:	b289      	uxth	r1, r1
 801d244:	b29b      	uxth	r3, r3
 801d246:	ebae 0e01 	sub.w	lr, lr, r1
 801d24a:	fb03 f808 	mul.w	r8, r3, r8
 801d24e:	fa1f fe8e 	uxth.w	lr, lr
 801d252:	fb0e 880a 	mla	r8, lr, sl, r8
 801d256:	f892 a000 	ldrb.w	sl, [r2]
 801d25a:	fb01 880a 	mla	r8, r1, sl, r8
 801d25e:	f890 a000 	ldrb.w	sl, [r0]
 801d262:	fb09 880a 	mla	r8, r9, sl, r8
 801d266:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d26a:	f886 8000 	strb.w	r8, [r6]
 801d26e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d272:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d276:	fb03 f808 	mul.w	r8, r3, r8
 801d27a:	fb0e 880a 	mla	r8, lr, sl, r8
 801d27e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d282:	fb01 880a 	mla	r8, r1, sl, r8
 801d286:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d28a:	fb09 880a 	mla	r8, r9, sl, r8
 801d28e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d292:	f886 8001 	strb.w	r8, [r6, #1]
 801d296:	78bf      	ldrb	r7, [r7, #2]
 801d298:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d29c:	437b      	muls	r3, r7
 801d29e:	7892      	ldrb	r2, [r2, #2]
 801d2a0:	fb0e 330c 	mla	r3, lr, ip, r3
 801d2a4:	fb01 3102 	mla	r1, r1, r2, r3
 801d2a8:	7882      	ldrb	r2, [r0, #2]
 801d2aa:	fb09 1902 	mla	r9, r9, r2, r1
 801d2ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d2b2:	f886 9002 	strb.w	r9, [r6, #2]
 801d2b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d2b8:	3603      	adds	r6, #3
 801d2ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d2bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d2c0:	441c      	add	r4, r3
 801d2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d2c4:	4413      	add	r3, r2
 801d2c6:	9322      	str	r3, [sp, #136]	; 0x88
 801d2c8:	e769      	b.n	801d19e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d2ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d2cc:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801d2ce:	441c      	add	r4, r3
 801d2d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d2d2:	443b      	add	r3, r7
 801d2d4:	9322      	str	r3, [sp, #136]	; 0x88
 801d2d6:	9b06      	ldr	r3, [sp, #24]
 801d2d8:	3b01      	subs	r3, #1
 801d2da:	9306      	str	r3, [sp, #24]
 801d2dc:	9b07      	ldr	r3, [sp, #28]
 801d2de:	3303      	adds	r3, #3
 801d2e0:	9307      	str	r3, [sp, #28]
 801d2e2:	e73e      	b.n	801d162 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d2e4:	d026      	beq.n	801d334 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d2e6:	9b06      	ldr	r3, [sp, #24]
 801d2e8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d2ea:	3b01      	subs	r3, #1
 801d2ec:	fb00 4003 	mla	r0, r0, r3, r4
 801d2f0:	1400      	asrs	r0, r0, #16
 801d2f2:	f53f af52 	bmi.w	801d19a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d2f6:	3901      	subs	r1, #1
 801d2f8:	4288      	cmp	r0, r1
 801d2fa:	f6bf af4e 	bge.w	801d19a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d2fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d300:	9822      	ldr	r0, [sp, #136]	; 0x88
 801d302:	fb01 0303 	mla	r3, r1, r3, r0
 801d306:	141b      	asrs	r3, r3, #16
 801d308:	f53f af47 	bmi.w	801d19a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d30c:	3a01      	subs	r2, #1
 801d30e:	4293      	cmp	r3, r2
 801d310:	f6bf af43 	bge.w	801d19a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d314:	9b07      	ldr	r3, [sp, #28]
 801d316:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d31a:	f103 0803 	add.w	r8, r3, #3
 801d31e:	f1ba 0f00 	cmp.w	sl, #0
 801d322:	dc71      	bgt.n	801d408 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d324:	9b06      	ldr	r3, [sp, #24]
 801d326:	9a07      	ldr	r2, [sp, #28]
 801d328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d32c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d330:	441a      	add	r2, r3
 801d332:	9207      	str	r2, [sp, #28]
 801d334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d336:	2b00      	cmp	r3, #0
 801d338:	f340 80f2 	ble.w	801d520 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d33c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801d340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d342:	ee79 9aab 	vadd.f32	s19, s19, s23
 801d346:	eef0 6a48 	vmov.f32	s13, s16
 801d34a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801d34e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801d352:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d356:	ee16 4a90 	vmov	r4, s13
 801d35a:	eef0 6a68 	vmov.f32	s13, s17
 801d35e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d362:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801d366:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d36a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d36e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d372:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d376:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d37a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d37e:	ee18 2a10 	vmov	r2, s16
 801d382:	eeb0 8a47 	vmov.f32	s16, s14
 801d386:	fb92 f3f3 	sdiv	r3, r2, r3
 801d38a:	ee18 2a90 	vmov	r2, s17
 801d38e:	9323      	str	r3, [sp, #140]	; 0x8c
 801d390:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d392:	eef0 8a67 	vmov.f32	s17, s15
 801d396:	fb92 f3f3 	sdiv	r3, r2, r3
 801d39a:	9324      	str	r3, [sp, #144]	; 0x90
 801d39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3a0:	3b01      	subs	r3, #1
 801d3a2:	9309      	str	r3, [sp, #36]	; 0x24
 801d3a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d3a6:	bf08      	it	eq
 801d3a8:	4613      	moveq	r3, r2
 801d3aa:	9306      	str	r3, [sp, #24]
 801d3ac:	e6cb      	b.n	801d146 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d3ae:	b151      	cbz	r1, 801d3c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801d3b0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d3b4:	4660      	mov	r0, ip
 801d3b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3ba:	442a      	add	r2, r5
 801d3bc:	4667      	mov	r7, ip
 801d3be:	e731      	b.n	801d224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d3c0:	4660      	mov	r0, ip
 801d3c2:	4662      	mov	r2, ip
 801d3c4:	e72e      	b.n	801d224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d3c6:	4660      	mov	r0, ip
 801d3c8:	4662      	mov	r2, ip
 801d3ca:	e7f7      	b.n	801d3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801d3cc:	f110 0e01 	adds.w	lr, r0, #1
 801d3d0:	f53f af71 	bmi.w	801d2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d3d4:	4572      	cmp	r2, lr
 801d3d6:	f6ff af6e 	blt.w	801d2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d3da:	f117 0e01 	adds.w	lr, r7, #1
 801d3de:	f53f af6a 	bmi.w	801d2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d3e2:	45f4      	cmp	ip, lr
 801d3e4:	f6ff af67 	blt.w	801d2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d3e8:	b212      	sxth	r2, r2
 801d3ea:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d3ee:	fa0f f38c 	sxth.w	r3, ip
 801d3f2:	9200      	str	r2, [sp, #0]
 801d3f4:	4631      	mov	r1, r6
 801d3f6:	9a08      	ldr	r2, [sp, #32]
 801d3f8:	9301      	str	r3, [sp, #4]
 801d3fa:	462b      	mov	r3, r5
 801d3fc:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d400:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d402:	f7ff fdbf 	bl	801cf84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d406:	e756      	b.n	801d2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d408:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d40a:	1426      	asrs	r6, r4, #16
 801d40c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801d40e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d412:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d416:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d418:	1400      	asrs	r0, r0, #16
 801d41a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d41e:	fb02 6000 	mla	r0, r2, r0, r6
 801d422:	9e08      	ldr	r6, [sp, #32]
 801d424:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d428:	eb06 0c00 	add.w	ip, r6, r0
 801d42c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d430:	eb05 070e 	add.w	r7, r5, lr
 801d434:	2b00      	cmp	r3, #0
 801d436:	d064      	beq.n	801d502 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 801d438:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d43c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d440:	442e      	add	r6, r5
 801d442:	2900      	cmp	r1, #0
 801d444:	d066      	beq.n	801d514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 801d446:	eb0c 0002 	add.w	r0, ip, r2
 801d44a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d44e:	7840      	ldrb	r0, [r0, #1]
 801d450:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d454:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d458:	442a      	add	r2, r5
 801d45a:	4428      	add	r0, r5
 801d45c:	b29b      	uxth	r3, r3
 801d45e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d462:	b289      	uxth	r1, r1
 801d464:	f896 e000 	ldrb.w	lr, [r6]
 801d468:	f108 0803 	add.w	r8, r8, #3
 801d46c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d470:	fb03 f901 	mul.w	r9, r3, r1
 801d474:	011b      	lsls	r3, r3, #4
 801d476:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d47a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d47e:	eba3 0309 	sub.w	r3, r3, r9
 801d482:	b289      	uxth	r1, r1
 801d484:	b29b      	uxth	r3, r3
 801d486:	ebac 0c01 	sub.w	ip, ip, r1
 801d48a:	fb03 fe0e 	mul.w	lr, r3, lr
 801d48e:	fa1f fc8c 	uxth.w	ip, ip
 801d492:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d496:	f892 b000 	ldrb.w	fp, [r2]
 801d49a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d49e:	f890 b000 	ldrb.w	fp, [r0]
 801d4a2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d4a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d4aa:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d4ae:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d4b2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d4b6:	fb03 fe0e 	mul.w	lr, r3, lr
 801d4ba:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d4be:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d4c2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d4c6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d4ca:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d4ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d4d2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d4d6:	78b6      	ldrb	r6, [r6, #2]
 801d4d8:	78bf      	ldrb	r7, [r7, #2]
 801d4da:	4373      	muls	r3, r6
 801d4dc:	7896      	ldrb	r6, [r2, #2]
 801d4de:	7882      	ldrb	r2, [r0, #2]
 801d4e0:	fb0c 3307 	mla	r3, ip, r7, r3
 801d4e4:	fb01 3306 	mla	r3, r1, r6, r3
 801d4e8:	fb09 3902 	mla	r9, r9, r2, r3
 801d4ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d4ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d4f0:	441c      	add	r4, r3
 801d4f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d4f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4f8:	4413      	add	r3, r2
 801d4fa:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d4fe:	9322      	str	r3, [sp, #136]	; 0x88
 801d500:	e70d      	b.n	801d31e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d502:	b151      	cbz	r1, 801d51a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801d504:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d508:	4638      	mov	r0, r7
 801d50a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d50e:	442a      	add	r2, r5
 801d510:	463e      	mov	r6, r7
 801d512:	e7a3      	b.n	801d45c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801d514:	4638      	mov	r0, r7
 801d516:	463a      	mov	r2, r7
 801d518:	e7a0      	b.n	801d45c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801d51a:	4638      	mov	r0, r7
 801d51c:	463a      	mov	r2, r7
 801d51e:	e7f7      	b.n	801d510 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801d520:	b00d      	add	sp, #52	; 0x34
 801d522:	ecbd 8b0a 	vpop	{d8-d12}
 801d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d52c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d530:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 801d534:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d538:	2d00      	cmp	r5, #0
 801d53a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d53e:	fb05 040e 	mla	r4, r5, lr, r0
 801d542:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801d546:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801d54a:	eb02 0804 	add.w	r8, r2, r4
 801d54e:	db40      	blt.n	801d5d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 801d550:	45a9      	cmp	r9, r5
 801d552:	dd3e      	ble.n	801d5d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 801d554:	2800      	cmp	r0, #0
 801d556:	db3a      	blt.n	801d5ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801d558:	4586      	cmp	lr, r0
 801d55a:	dd38      	ble.n	801d5ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801d55c:	5d12      	ldrb	r2, [r2, r4]
 801d55e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d562:	1c42      	adds	r2, r0, #1
 801d564:	d438      	bmi.n	801d5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801d566:	4596      	cmp	lr, r2
 801d568:	dd36      	ble.n	801d5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801d56a:	b3bf      	cbz	r7, 801d5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 801d56c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d570:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801d574:	3501      	adds	r5, #1
 801d576:	d435      	bmi.n	801d5e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801d578:	45a9      	cmp	r9, r5
 801d57a:	dd33      	ble.n	801d5e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801d57c:	f1bc 0f00 	cmp.w	ip, #0
 801d580:	d033      	beq.n	801d5ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 801d582:	2800      	cmp	r0, #0
 801d584:	db2c      	blt.n	801d5e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801d586:	4586      	cmp	lr, r0
 801d588:	dd2a      	ble.n	801d5e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801d58a:	f818 200e 	ldrb.w	r2, [r8, lr]
 801d58e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d592:	3001      	adds	r0, #1
 801d594:	d42c      	bmi.n	801d5f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801d596:	4586      	cmp	lr, r0
 801d598:	dd2a      	ble.n	801d5f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801d59a:	b35f      	cbz	r7, 801d5f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 801d59c:	44c6      	add	lr, r8
 801d59e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d5a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d5a6:	2f0f      	cmp	r7, #15
 801d5a8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d5ac:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801d5b0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d5b4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d5b8:	d802      	bhi.n	801d5c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 801d5ba:	f1bc 0f0f 	cmp.w	ip, #15
 801d5be:	d91b      	bls.n	801d5f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 801d5c0:	4b77      	ldr	r3, [pc, #476]	; (801d7a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 801d5c2:	f240 1157 	movw	r1, #343	; 0x157
 801d5c6:	4a77      	ldr	r2, [pc, #476]	; (801d7a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 801d5c8:	4877      	ldr	r0, [pc, #476]	; (801d7a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 801d5ca:	f005 fe1b 	bl	8023204 <__assert_func>
 801d5ce:	2600      	movs	r6, #0
 801d5d0:	e7c7      	b.n	801d562 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 801d5d2:	2400      	movs	r4, #0
 801d5d4:	4626      	mov	r6, r4
 801d5d6:	e7cd      	b.n	801d574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801d5d8:	2400      	movs	r4, #0
 801d5da:	e7cb      	b.n	801d574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801d5dc:	463c      	mov	r4, r7
 801d5de:	e7c9      	b.n	801d574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801d5e0:	2500      	movs	r5, #0
 801d5e2:	e7d6      	b.n	801d592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 801d5e4:	2200      	movs	r2, #0
 801d5e6:	4615      	mov	r5, r2
 801d5e8:	e7dd      	b.n	801d5a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801d5ea:	4662      	mov	r2, ip
 801d5ec:	4665      	mov	r5, ip
 801d5ee:	e7da      	b.n	801d5a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	e7d8      	b.n	801d5a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801d5f4:	463a      	mov	r2, r7
 801d5f6:	e7d6      	b.n	801d5a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801d5f8:	b2bf      	uxth	r7, r7
 801d5fa:	fa1f f08c 	uxth.w	r0, ip
 801d5fe:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 801d602:	fb00 fe07 	mul.w	lr, r0, r7
 801d606:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801d60a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801d60e:	ebac 070e 	sub.w	r7, ip, lr
 801d612:	b280      	uxth	r0, r0
 801d614:	b2bf      	uxth	r7, r7
 801d616:	1a1b      	subs	r3, r3, r0
 801d618:	fb07 fc0a 	mul.w	ip, r7, sl
 801d61c:	b29b      	uxth	r3, r3
 801d61e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d622:	9300      	str	r3, [sp, #0]
 801d624:	fb00 cc09 	mla	ip, r0, r9, ip
 801d628:	fb0e cc08 	mla	ip, lr, r8, ip
 801d62c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d630:	9301      	str	r3, [sp, #4]
 801d632:	2b00      	cmp	r3, #0
 801d634:	f000 80b0 	beq.w	801d798 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 801d638:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d63c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d640:	fb0b fc0c 	mul.w	ip, fp, ip
 801d644:	fb0b f606 	mul.w	r6, fp, r6
 801d648:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d64c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d650:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d654:	44dc      	add	ip, fp
 801d656:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d65a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d65e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d662:	fb0a fb0b 	mul.w	fp, sl, fp
 801d666:	fb0a fa04 	mul.w	sl, sl, r4
 801d66a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801d66e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d672:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 801d676:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d67a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d67e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d682:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 801d686:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d68a:	0a36      	lsrs	r6, r6, #8
 801d68c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d690:	44dc      	add	ip, fp
 801d692:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d696:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d69a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d69e:	fb09 fb0b 	mul.w	fp, r9, fp
 801d6a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6a6:	fb09 f905 	mul.w	r9, r9, r5
 801d6aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d6ae:	ea4f 241b 	mov.w	r4, fp, lsr #8
 801d6b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6b6:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801d6ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d6be:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d6c2:	fb0c fc07 	mul.w	ip, ip, r7
 801d6c6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d6ca:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801d6ce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d6d2:	445c      	add	r4, fp
 801d6d4:	fb08 f505 	mul.w	r5, r8, r5
 801d6d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d6dc:	fb08 f802 	mul.w	r8, r8, r2
 801d6e0:	0a24      	lsrs	r4, r4, #8
 801d6e2:	0a2a      	lsrs	r2, r5, #8
 801d6e4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d6e8:	fb07 f70a 	mul.w	r7, r7, sl
 801d6ec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d6f0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d6f4:	4415      	add	r5, r2
 801d6f6:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d6fa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d6fe:	9a00      	ldr	r2, [sp, #0]
 801d700:	0a2d      	lsrs	r5, r5, #8
 801d702:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d706:	fb03 cc02 	mla	ip, r3, r2, ip
 801d70a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d70e:	fb02 7306 	mla	r3, r2, r6, r7
 801d712:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d716:	9a01      	ldr	r2, [sp, #4]
 801d718:	fb05 c50e 	mla	r5, r5, lr, ip
 801d71c:	fb0e 3e08 	mla	lr, lr, r8, r3
 801d720:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 801d724:	fb04 5400 	mla	r4, r4, r0, r5
 801d728:	fb00 e303 	mla	r3, r0, r3, lr
 801d72c:	0a24      	lsrs	r4, r4, #8
 801d72e:	0a1b      	lsrs	r3, r3, #8
 801d730:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d738:	431c      	orrs	r4, r3
 801d73a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d73e:	b29b      	uxth	r3, r3
 801d740:	b2e0      	uxtb	r0, r4
 801d742:	435a      	muls	r2, r3
 801d744:	fb10 f003 	smulbb	r0, r0, r3
 801d748:	1c55      	adds	r5, r2, #1
 801d74a:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801d74e:	780a      	ldrb	r2, [r1, #0]
 801d750:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 801d754:	b2ed      	uxtb	r5, r5
 801d756:	fb02 0205 	mla	r2, r2, r5, r0
 801d75a:	b292      	uxth	r2, r2
 801d75c:	1c50      	adds	r0, r2, #1
 801d75e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d762:	7848      	ldrb	r0, [r1, #1]
 801d764:	fb10 f005 	smulbb	r0, r0, r5
 801d768:	1212      	asrs	r2, r2, #8
 801d76a:	700a      	strb	r2, [r1, #0]
 801d76c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801d770:	0c24      	lsrs	r4, r4, #16
 801d772:	fb02 0203 	mla	r2, r2, r3, r0
 801d776:	b292      	uxth	r2, r2
 801d778:	1c50      	adds	r0, r2, #1
 801d77a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d77e:	1212      	asrs	r2, r2, #8
 801d780:	704a      	strb	r2, [r1, #1]
 801d782:	788a      	ldrb	r2, [r1, #2]
 801d784:	fb12 f505 	smulbb	r5, r2, r5
 801d788:	fb04 5303 	mla	r3, r4, r3, r5
 801d78c:	b29b      	uxth	r3, r3
 801d78e:	1c5a      	adds	r2, r3, #1
 801d790:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d794:	121b      	asrs	r3, r3, #8
 801d796:	708b      	strb	r3, [r1, #2]
 801d798:	b003      	add	sp, #12
 801d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d79e:	bf00      	nop
 801d7a0:	08027e53 	.word	0x08027e53
 801d7a4:	080283bb 	.word	0x080283bb
 801d7a8:	08027f1c 	.word	0x08027f1c

0801d7ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7b0:	ed2d 8b08 	vpush	{d8-d11}
 801d7b4:	b09f      	sub	sp, #124	; 0x7c
 801d7b6:	eeb0 aa40 	vmov.f32	s20, s0
 801d7ba:	eef0 9a60 	vmov.f32	s19, s1
 801d7be:	921b      	str	r2, [sp, #108]	; 0x6c
 801d7c0:	eeb0 9a41 	vmov.f32	s18, s2
 801d7c4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d7c6:	eeb0 8a62 	vmov.f32	s16, s5
 801d7ca:	9309      	str	r3, [sp, #36]	; 0x24
 801d7cc:	eef0 8a43 	vmov.f32	s17, s6
 801d7d0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801d7d4:	eef0 ba44 	vmov.f32	s23, s8
 801d7d8:	901d      	str	r0, [sp, #116]	; 0x74
 801d7da:	eeb0 ba64 	vmov.f32	s22, s9
 801d7de:	931c      	str	r3, [sp, #112]	; 0x70
 801d7e0:	eef0 aa45 	vmov.f32	s21, s10
 801d7e4:	6850      	ldr	r0, [r2, #4]
 801d7e6:	9119      	str	r1, [sp, #100]	; 0x64
 801d7e8:	6812      	ldr	r2, [r2, #0]
 801d7ea:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801d7ec:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801d7f0:	fb00 1303 	mla	r3, r0, r3, r1
 801d7f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7f8:	18d3      	adds	r3, r2, r3
 801d7fa:	930c      	str	r3, [sp, #48]	; 0x30
 801d7fc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	9312      	str	r3, [sp, #72]	; 0x48
 801d802:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d804:	685e      	ldr	r6, [r3, #4]
 801d806:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801d80a:	3604      	adds	r6, #4
 801d80c:	930d      	str	r3, [sp, #52]	; 0x34
 801d80e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d810:	2b00      	cmp	r3, #0
 801d812:	dc03      	bgt.n	801d81c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d816:	2b00      	cmp	r3, #0
 801d818:	f340 8378 	ble.w	801df0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801d81c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d81e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d822:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d826:	1e48      	subs	r0, r1, #1
 801d828:	1e57      	subs	r7, r2, #1
 801d82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	f340 818c 	ble.w	801db4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801d832:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801d834:	142b      	asrs	r3, r5, #16
 801d836:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d83a:	d406      	bmi.n	801d84a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d83c:	4584      	cmp	ip, r0
 801d83e:	da04      	bge.n	801d84a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d840:	2b00      	cmp	r3, #0
 801d842:	db02      	blt.n	801d84a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d844:	42bb      	cmp	r3, r7
 801d846:	f2c0 8181 	blt.w	801db4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801d84a:	f11c 0c01 	adds.w	ip, ip, #1
 801d84e:	f100 816f 	bmi.w	801db30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d852:	4561      	cmp	r1, ip
 801d854:	f2c0 816c 	blt.w	801db30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d858:	3301      	adds	r3, #1
 801d85a:	f100 8169 	bmi.w	801db30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d85e:	429a      	cmp	r2, r3
 801d860:	f2c0 8166 	blt.w	801db30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d866:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d868:	931a      	str	r3, [sp, #104]	; 0x68
 801d86a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	f340 818c 	ble.w	801db8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801d872:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d874:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d878:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d87c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d880:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801d882:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d886:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d888:	141b      	asrs	r3, r3, #16
 801d88a:	f100 81d0 	bmi.w	801dc2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801d88e:	f100 38ff 	add.w	r8, r0, #4294967295
 801d892:	4543      	cmp	r3, r8
 801d894:	f280 81cb 	bge.w	801dc2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801d898:	f1bc 0f00 	cmp.w	ip, #0
 801d89c:	f2c0 81c7 	blt.w	801dc2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801d8a0:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d8a4:	45c4      	cmp	ip, r8
 801d8a6:	f280 81c2 	bge.w	801dc2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801d8aa:	b200      	sxth	r0, r0
 801d8ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d8ae:	fb0c 3300 	mla	r3, ip, r0, r3
 801d8b2:	eb04 0803 	add.w	r8, r4, r3
 801d8b6:	5ce3      	ldrb	r3, [r4, r3]
 801d8b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d8bc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d8c0:	2a00      	cmp	r2, #0
 801d8c2:	f000 81a9 	beq.w	801dc18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 801d8c6:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d8ca:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d8ce:	940e      	str	r4, [sp, #56]	; 0x38
 801d8d0:	0e24      	lsrs	r4, r4, #24
 801d8d2:	9415      	str	r4, [sp, #84]	; 0x54
 801d8d4:	b179      	cbz	r1, 801d8f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d8d6:	eb08 0c00 	add.w	ip, r8, r0
 801d8da:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d8de:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d8e2:	900a      	str	r0, [sp, #40]	; 0x28
 801d8e4:	0e00      	lsrs	r0, r0, #24
 801d8e6:	9013      	str	r0, [sp, #76]	; 0x4c
 801d8e8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d8ec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d8f0:	900f      	str	r0, [sp, #60]	; 0x3c
 801d8f2:	0e00      	lsrs	r0, r0, #24
 801d8f4:	9016      	str	r0, [sp, #88]	; 0x58
 801d8f6:	b292      	uxth	r2, r2
 801d8f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d8fa:	b289      	uxth	r1, r1
 801d8fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d8fe:	fb02 f901 	mul.w	r9, r2, r1
 801d902:	0112      	lsls	r2, r2, #4
 801d904:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d908:	eba2 0809 	sub.w	r8, r2, r9
 801d90c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d910:	b289      	uxth	r1, r1
 801d912:	fa1f f888 	uxth.w	r8, r8
 801d916:	1a52      	subs	r2, r2, r1
 801d918:	fb08 f000 	mul.w	r0, r8, r0
 801d91c:	b292      	uxth	r2, r2
 801d91e:	fb02 000e 	mla	r0, r2, lr, r0
 801d922:	fb01 0004 	mla	r0, r1, r4, r0
 801d926:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d928:	fb09 0004 	mla	r0, r9, r4, r0
 801d92c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d930:	2800      	cmp	r0, #0
 801d932:	f000 80f2 	beq.w	801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d936:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d93a:	d01b      	beq.n	801d974 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d93c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d944:	fb0e fa0a 	mul.w	sl, lr, sl
 801d948:	fb0e fe03 	mul.w	lr, lr, r3
 801d94c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d950:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d954:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d958:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d95c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d960:	4453      	add	r3, sl
 801d962:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d966:	0a1b      	lsrs	r3, r3, #8
 801d968:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d96c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d970:	ea43 030c 	orr.w	r3, r3, ip
 801d974:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d976:	2cff      	cmp	r4, #255	; 0xff
 801d978:	d021      	beq.n	801d9be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801d97a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d97c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d980:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d982:	fb04 fb0b 	mul.w	fp, r4, fp
 801d986:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d988:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d98c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d98e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d992:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d996:	fb04 fa0a 	mul.w	sl, r4, sl
 801d99a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d99e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d9a2:	44de      	add	lr, fp
 801d9a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d9a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d9b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d9b8:	ea4e 040a 	orr.w	r4, lr, sl
 801d9bc:	940e      	str	r4, [sp, #56]	; 0x38
 801d9be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d9c0:	2cff      	cmp	r4, #255	; 0xff
 801d9c2:	d021      	beq.n	801da08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 801d9c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d9c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d9ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d9cc:	fb04 fb0b 	mul.w	fp, r4, fp
 801d9d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d9d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d9d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d9d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d9dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d9e0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d9e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d9e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d9ec:	44de      	add	lr, fp
 801d9ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d9f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d9fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801da02:	ea4e 040a 	orr.w	r4, lr, sl
 801da06:	940a      	str	r4, [sp, #40]	; 0x28
 801da08:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801da0a:	2cff      	cmp	r4, #255	; 0xff
 801da0c:	d021      	beq.n	801da52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801da0e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801da10:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801da14:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801da16:	fb04 fb0b 	mul.w	fp, r4, fp
 801da1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801da1c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801da20:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801da22:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801da26:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801da2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801da2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da32:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801da36:	44de      	add	lr, fp
 801da38:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801da4c:	ea4e 040a 	orr.w	r4, lr, sl
 801da50:	940f      	str	r4, [sp, #60]	; 0x3c
 801da52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801da54:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801da58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801da5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801da60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801da62:	fb08 fc0c 	mul.w	ip, r8, ip
 801da66:	fb02 cc0e 	mla	ip, r2, lr, ip
 801da6a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801da6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801da70:	fb01 cc0e 	mla	ip, r1, lr, ip
 801da74:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801da78:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801da7a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801da7e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801da82:	fb08 f80e 	mul.w	r8, r8, lr
 801da86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801da8a:	fb02 8303 	mla	r3, r2, r3, r8
 801da8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801da90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801da94:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801da98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da9a:	fb01 330a 	mla	r3, r1, sl, r3
 801da9e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801daa2:	fb09 3901 	mla	r9, r9, r1, r3
 801daa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daa8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801daaa:	4343      	muls	r3, r0
 801daac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dab0:	1c58      	adds	r0, r3, #1
 801dab2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dab6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801daba:	ea4c 0c09 	orr.w	ip, ip, r9
 801dabe:	783b      	ldrb	r3, [r7, #0]
 801dac0:	fa5f f28c 	uxtb.w	r2, ip
 801dac4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801dac8:	fb12 f201 	smulbb	r2, r2, r1
 801dacc:	b2c0      	uxtb	r0, r0
 801dace:	fb03 2300 	mla	r3, r3, r0, r2
 801dad2:	b29b      	uxth	r3, r3
 801dad4:	1c5a      	adds	r2, r3, #1
 801dad6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dada:	787a      	ldrb	r2, [r7, #1]
 801dadc:	fb12 f200 	smulbb	r2, r2, r0
 801dae0:	121b      	asrs	r3, r3, #8
 801dae2:	703b      	strb	r3, [r7, #0]
 801dae4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801dae8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801daec:	fb03 2301 	mla	r3, r3, r1, r2
 801daf0:	b29b      	uxth	r3, r3
 801daf2:	1c5a      	adds	r2, r3, #1
 801daf4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801daf8:	121b      	asrs	r3, r3, #8
 801dafa:	707b      	strb	r3, [r7, #1]
 801dafc:	78bb      	ldrb	r3, [r7, #2]
 801dafe:	fb13 f000 	smulbb	r0, r3, r0
 801db02:	fb0c 0c01 	mla	ip, ip, r1, r0
 801db06:	fa1f fc8c 	uxth.w	ip, ip
 801db0a:	f10c 0301 	add.w	r3, ip, #1
 801db0e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801db12:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801db16:	f887 c002 	strb.w	ip, [r7, #2]
 801db1a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801db1c:	3703      	adds	r7, #3
 801db1e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801db20:	441a      	add	r2, r3
 801db22:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801db24:	441d      	add	r5, r3
 801db26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801db28:	9231      	str	r2, [sp, #196]	; 0xc4
 801db2a:	3b01      	subs	r3, #1
 801db2c:	931a      	str	r3, [sp, #104]	; 0x68
 801db2e:	e69c      	b.n	801d86a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801db30:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801db32:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801db34:	441c      	add	r4, r3
 801db36:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801db38:	441d      	add	r5, r3
 801db3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db3c:	9431      	str	r4, [sp, #196]	; 0xc4
 801db3e:	3b01      	subs	r3, #1
 801db40:	9309      	str	r3, [sp, #36]	; 0x24
 801db42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db44:	3303      	adds	r3, #3
 801db46:	930c      	str	r3, [sp, #48]	; 0x30
 801db48:	e66f      	b.n	801d82a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801db4a:	d026      	beq.n	801db9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801db4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db4e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801db50:	3b01      	subs	r3, #1
 801db52:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801db54:	fb00 4003 	mla	r0, r0, r3, r4
 801db58:	1400      	asrs	r0, r0, #16
 801db5a:	f53f ae83 	bmi.w	801d864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801db5e:	3901      	subs	r1, #1
 801db60:	4288      	cmp	r0, r1
 801db62:	f6bf ae7f 	bge.w	801d864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801db66:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801db68:	fb01 5303 	mla	r3, r1, r3, r5
 801db6c:	141b      	asrs	r3, r3, #16
 801db6e:	f53f ae79 	bmi.w	801d864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801db72:	3a01      	subs	r2, #1
 801db74:	4293      	cmp	r3, r2
 801db76:	f6bf ae75 	bge.w	801d864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801db7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db7c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801db80:	f103 0e03 	add.w	lr, r3, #3
 801db84:	f1bb 0f00 	cmp.w	fp, #0
 801db88:	dc71      	bgt.n	801dc6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801db8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db8c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801db90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db96:	4423      	add	r3, r4
 801db98:	930c      	str	r3, [sp, #48]	; 0x30
 801db9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	f340 81b5 	ble.w	801df0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801dba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dba6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dba8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801dbac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801dbb0:	eef0 6a48 	vmov.f32	s13, s16
 801dbb4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801dbb8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801dbbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbc0:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801dbc4:	eef0 6a68 	vmov.f32	s13, s17
 801dbc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbcc:	ee16 5a90 	vmov	r5, s13
 801dbd0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dbd4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dbd8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dbdc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dbe0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dbe4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dbe8:	ee18 2a10 	vmov	r2, s16
 801dbec:	eeb0 8a47 	vmov.f32	s16, s14
 801dbf0:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbf4:	ee18 2a90 	vmov	r2, s17
 801dbf8:	9333      	str	r3, [sp, #204]	; 0xcc
 801dbfa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dbfc:	eef0 8a67 	vmov.f32	s17, s15
 801dc00:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc04:	9334      	str	r3, [sp, #208]	; 0xd0
 801dc06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dc08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801dc0a:	3b01      	subs	r3, #1
 801dc0c:	9319      	str	r3, [sp, #100]	; 0x64
 801dc0e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dc10:	bf08      	it	eq
 801dc12:	4613      	moveq	r3, r2
 801dc14:	9309      	str	r3, [sp, #36]	; 0x24
 801dc16:	e5fa      	b.n	801d80e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801dc18:	2900      	cmp	r1, #0
 801dc1a:	f43f ae6c 	beq.w	801d8f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801dc1e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dc22:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc26:	900a      	str	r0, [sp, #40]	; 0x28
 801dc28:	0e00      	lsrs	r0, r0, #24
 801dc2a:	9013      	str	r0, [sp, #76]	; 0x4c
 801dc2c:	e663      	b.n	801d8f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801dc2e:	f113 0801 	adds.w	r8, r3, #1
 801dc32:	f53f af72 	bmi.w	801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dc36:	4540      	cmp	r0, r8
 801dc38:	f6ff af6f 	blt.w	801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dc3c:	f11c 0801 	adds.w	r8, ip, #1
 801dc40:	f53f af6b 	bmi.w	801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dc44:	45c6      	cmp	lr, r8
 801dc46:	f6ff af68 	blt.w	801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dc4a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801dc4c:	b200      	sxth	r0, r0
 801dc4e:	9302      	str	r3, [sp, #8]
 801dc50:	fa0f f38e 	sxth.w	r3, lr
 801dc54:	9000      	str	r0, [sp, #0]
 801dc56:	9301      	str	r3, [sp, #4]
 801dc58:	4633      	mov	r3, r6
 801dc5a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801dc5c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dc60:	e9cd c203 	strd	ip, r2, [sp, #12]
 801dc64:	4639      	mov	r1, r7
 801dc66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc68:	f7ff fc60 	bl	801d52c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801dc6c:	e755      	b.n	801db1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dc6e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801dc70:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dc74:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801dc76:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dc7a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801dc7c:	1427      	asrs	r7, r4, #16
 801dc7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dc80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dc84:	142b      	asrs	r3, r5, #16
 801dc86:	fb01 7303 	mla	r3, r1, r3, r7
 801dc8a:	18e7      	adds	r7, r4, r3
 801dc8c:	5ce3      	ldrb	r3, [r4, r3]
 801dc8e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dc92:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dc96:	2a00      	cmp	r2, #0
 801dc98:	f000 812e 	beq.w	801def8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 801dc9c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dca0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801dca4:	9410      	str	r4, [sp, #64]	; 0x40
 801dca6:	0e24      	lsrs	r4, r4, #24
 801dca8:	9417      	str	r4, [sp, #92]	; 0x5c
 801dcaa:	b170      	cbz	r0, 801dcca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801dcac:	eb07 0801 	add.w	r8, r7, r1
 801dcb0:	5c79      	ldrb	r1, [r7, r1]
 801dcb2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dcb6:	910b      	str	r1, [sp, #44]	; 0x2c
 801dcb8:	0e09      	lsrs	r1, r1, #24
 801dcba:	9114      	str	r1, [sp, #80]	; 0x50
 801dcbc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dcc0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dcc4:	9111      	str	r1, [sp, #68]	; 0x44
 801dcc6:	0e09      	lsrs	r1, r1, #24
 801dcc8:	9118      	str	r1, [sp, #96]	; 0x60
 801dcca:	b292      	uxth	r2, r2
 801dccc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801dcce:	b280      	uxth	r0, r0
 801dcd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dcd2:	fb02 f900 	mul.w	r9, r2, r0
 801dcd6:	0112      	lsls	r2, r2, #4
 801dcd8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dcdc:	eba2 0809 	sub.w	r8, r2, r9
 801dce0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801dce4:	b280      	uxth	r0, r0
 801dce6:	fa1f f888 	uxth.w	r8, r8
 801dcea:	1a12      	subs	r2, r2, r0
 801dcec:	fb08 f101 	mul.w	r1, r8, r1
 801dcf0:	b292      	uxth	r2, r2
 801dcf2:	fb02 110c 	mla	r1, r2, ip, r1
 801dcf6:	fb00 1104 	mla	r1, r0, r4, r1
 801dcfa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dcfc:	fb09 1104 	mla	r1, r9, r4, r1
 801dd00:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dd04:	2900      	cmp	r1, #0
 801dd06:	f000 80ec 	beq.w	801dee2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801dd0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dd0e:	d019      	beq.n	801dd44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801dd10:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dd14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd18:	fb0c fa0a 	mul.w	sl, ip, sl
 801dd1c:	fb0c fc03 	mul.w	ip, ip, r3
 801dd20:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dd24:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dd28:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801dd2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd30:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dd34:	4453      	add	r3, sl
 801dd36:	0a3f      	lsrs	r7, r7, #8
 801dd38:	0a1b      	lsrs	r3, r3, #8
 801dd3a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dd3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd42:	433b      	orrs	r3, r7
 801dd44:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dd46:	2cff      	cmp	r4, #255	; 0xff
 801dd48:	d020      	beq.n	801dd8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801dd4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dd4c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dd50:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dd52:	4367      	muls	r7, r4
 801dd54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dd56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dd5a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dd5e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dd60:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dd64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd68:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd6c:	44bc      	add	ip, r7
 801dd6e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dd72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd76:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dd7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dd86:	ea4c 040a 	orr.w	r4, ip, sl
 801dd8a:	9410      	str	r4, [sp, #64]	; 0x40
 801dd8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd8e:	2cff      	cmp	r4, #255	; 0xff
 801dd90:	d020      	beq.n	801ddd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801dd92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd94:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dd98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd9a:	4367      	muls	r7, r4
 801dd9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dda2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dda6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dda8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ddac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ddb0:	fb04 fa0a 	mul.w	sl, r4, sl
 801ddb4:	44bc      	add	ip, r7
 801ddb6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ddba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ddbe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ddc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ddc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ddca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ddce:	ea4c 040a 	orr.w	r4, ip, sl
 801ddd2:	940b      	str	r4, [sp, #44]	; 0x2c
 801ddd4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ddd6:	2cff      	cmp	r4, #255	; 0xff
 801ddd8:	d020      	beq.n	801de1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801ddda:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dddc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dde0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dde2:	4367      	muls	r7, r4
 801dde4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dde6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ddea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ddee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ddf0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ddf4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ddf8:	fb04 fa0a 	mul.w	sl, r4, sl
 801ddfc:	44bc      	add	ip, r7
 801ddfe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801de02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801de0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801de16:	ea4c 040a 	orr.w	r4, ip, sl
 801de1a:	9411      	str	r4, [sp, #68]	; 0x44
 801de1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801de1e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801de22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de26:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801de2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801de2c:	fb08 f707 	mul.w	r7, r8, r7
 801de30:	fb02 770c 	mla	r7, r2, ip, r7
 801de34:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801de38:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801de3a:	fb00 770c 	mla	r7, r0, ip, r7
 801de3e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801de42:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801de44:	fb09 770c 	mla	r7, r9, ip, r7
 801de48:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801de4c:	fb08 f80c 	mul.w	r8, r8, ip
 801de50:	0a3f      	lsrs	r7, r7, #8
 801de52:	fb02 8303 	mla	r3, r2, r3, r8
 801de56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801de58:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801de5c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801de60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801de62:	fb00 330a 	mla	r3, r0, sl, r3
 801de66:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801de6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801de6c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801de70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de76:	434b      	muls	r3, r1
 801de78:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801de7c:	1c59      	adds	r1, r3, #1
 801de7e:	ea47 070c 	orr.w	r7, r7, ip
 801de82:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801de86:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801de8a:	b2fa      	uxtb	r2, r7
 801de8c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801de90:	fb12 f200 	smulbb	r2, r2, r0
 801de94:	b2c9      	uxtb	r1, r1
 801de96:	fb03 2301 	mla	r3, r3, r1, r2
 801de9a:	b29b      	uxth	r3, r3
 801de9c:	1c5a      	adds	r2, r3, #1
 801de9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dea2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801dea6:	fb12 f201 	smulbb	r2, r2, r1
 801deaa:	121b      	asrs	r3, r3, #8
 801deac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801deb0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801deb4:	0c3f      	lsrs	r7, r7, #16
 801deb6:	fb03 2300 	mla	r3, r3, r0, r2
 801deba:	b29b      	uxth	r3, r3
 801debc:	1c5a      	adds	r2, r3, #1
 801debe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dec2:	121b      	asrs	r3, r3, #8
 801dec4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801dec8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801decc:	fb13 f101 	smulbb	r1, r3, r1
 801ded0:	fb07 1700 	mla	r7, r7, r0, r1
 801ded4:	b2bf      	uxth	r7, r7
 801ded6:	1c7b      	adds	r3, r7, #1
 801ded8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801dedc:	123f      	asrs	r7, r7, #8
 801dede:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801dee2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801dee4:	f10e 0e03 	add.w	lr, lr, #3
 801dee8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801deea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801deee:	441a      	add	r2, r3
 801def0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801def2:	9231      	str	r2, [sp, #196]	; 0xc4
 801def4:	441d      	add	r5, r3
 801def6:	e645      	b.n	801db84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 801def8:	2800      	cmp	r0, #0
 801defa:	f43f aee6 	beq.w	801dcca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801defe:	5c79      	ldrb	r1, [r7, r1]
 801df00:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df04:	910b      	str	r1, [sp, #44]	; 0x2c
 801df06:	0e09      	lsrs	r1, r1, #24
 801df08:	9114      	str	r1, [sp, #80]	; 0x50
 801df0a:	e6de      	b.n	801dcca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801df0c:	b01f      	add	sp, #124	; 0x7c
 801df0e:	ecbd 8b08 	vpop	{d8-d11}
 801df12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801df18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801df18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df1c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801df20:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801df24:	2c00      	cmp	r4, #0
 801df26:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801df2a:	fb04 060c 	mla	r6, r4, ip, r0
 801df2e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801df32:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801df36:	eb02 0e06 	add.w	lr, r2, r6
 801df3a:	db3d      	blt.n	801dfb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801df3c:	45a0      	cmp	r8, r4
 801df3e:	dd3b      	ble.n	801dfb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801df40:	2800      	cmp	r0, #0
 801df42:	db37      	blt.n	801dfb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801df44:	4584      	cmp	ip, r0
 801df46:	dd35      	ble.n	801dfb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801df48:	5d92      	ldrb	r2, [r2, r6]
 801df4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801df4e:	1c46      	adds	r6, r0, #1
 801df50:	d435      	bmi.n	801dfbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801df52:	45b4      	cmp	ip, r6
 801df54:	dd33      	ble.n	801dfbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801df56:	b3a5      	cbz	r5, 801dfc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 801df58:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801df5c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801df60:	3401      	adds	r4, #1
 801df62:	d432      	bmi.n	801dfca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801df64:	45a0      	cmp	r8, r4
 801df66:	dd30      	ble.n	801dfca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801df68:	b397      	cbz	r7, 801dfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801df6a:	2800      	cmp	r0, #0
 801df6c:	db2b      	blt.n	801dfc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801df6e:	4584      	cmp	ip, r0
 801df70:	dd29      	ble.n	801dfc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801df72:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801df76:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801df7a:	3001      	adds	r0, #1
 801df7c:	d42b      	bmi.n	801dfd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801df7e:	4584      	cmp	ip, r0
 801df80:	dd29      	ble.n	801dfd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801df82:	b355      	cbz	r5, 801dfda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 801df84:	44f4      	add	ip, lr
 801df86:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801df8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801df8e:	2d0f      	cmp	r5, #15
 801df90:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801df94:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801df98:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801df9c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801dfa0:	d801      	bhi.n	801dfa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801dfa2:	2f0f      	cmp	r7, #15
 801dfa4:	d91b      	bls.n	801dfde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 801dfa6:	4b7f      	ldr	r3, [pc, #508]	; (801e1a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801dfa8:	f240 1157 	movw	r1, #343	; 0x157
 801dfac:	4a7e      	ldr	r2, [pc, #504]	; (801e1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801dfae:	487f      	ldr	r0, [pc, #508]	; (801e1ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801dfb0:	f005 f928 	bl	8023204 <__assert_func>
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	e7ca      	b.n	801df4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 801dfb8:	2600      	movs	r6, #0
 801dfba:	4632      	mov	r2, r6
 801dfbc:	e7d0      	b.n	801df60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801dfbe:	2600      	movs	r6, #0
 801dfc0:	e7ce      	b.n	801df60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801dfc2:	462e      	mov	r6, r5
 801dfc4:	e7cc      	b.n	801df60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801dfc6:	2400      	movs	r4, #0
 801dfc8:	e7d7      	b.n	801df7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 801dfca:	2300      	movs	r3, #0
 801dfcc:	461c      	mov	r4, r3
 801dfce:	e7de      	b.n	801df8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801dfd0:	463b      	mov	r3, r7
 801dfd2:	463c      	mov	r4, r7
 801dfd4:	e7db      	b.n	801df8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	e7d9      	b.n	801df8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801dfda:	462b      	mov	r3, r5
 801dfdc:	e7d7      	b.n	801df8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801dfde:	b2a8      	uxth	r0, r5
 801dfe0:	b2bf      	uxth	r7, r7
 801dfe2:	fb07 fe00 	mul.w	lr, r7, r0
 801dfe6:	0100      	lsls	r0, r0, #4
 801dfe8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801dfec:	eba0 0c0e 	sub.w	ip, r0, lr
 801dff0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801dff4:	b2bf      	uxth	r7, r7
 801dff6:	fa1f fc8c 	uxth.w	ip, ip
 801dffa:	1bc5      	subs	r5, r0, r7
 801dffc:	fb0c f00a 	mul.w	r0, ip, sl
 801e000:	b2ad      	uxth	r5, r5
 801e002:	fb05 000b 	mla	r0, r5, fp, r0
 801e006:	fb07 0009 	mla	r0, r7, r9, r0
 801e00a:	fb0e 0008 	mla	r0, lr, r8, r0
 801e00e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e012:	9001      	str	r0, [sp, #4]
 801e014:	2800      	cmp	r0, #0
 801e016:	f000 80c2 	beq.w	801e19e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 801e01a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e01e:	d018      	beq.n	801e052 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801e020:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801e024:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e028:	fb0b f000 	mul.w	r0, fp, r0
 801e02c:	fb0b fb02 	mul.w	fp, fp, r2
 801e030:	0a02      	lsrs	r2, r0, #8
 801e032:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801e036:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e03a:	4402      	add	r2, r0
 801e03c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801e040:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801e044:	0a12      	lsrs	r2, r2, #8
 801e046:	0a00      	lsrs	r0, r0, #8
 801e048:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e04c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e050:	4302      	orrs	r2, r0
 801e052:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e056:	d01a      	beq.n	801e08e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 801e058:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801e05c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e060:	fb0a f000 	mul.w	r0, sl, r0
 801e064:	fb0a fa06 	mul.w	sl, sl, r6
 801e068:	0a06      	lsrs	r6, r0, #8
 801e06a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801e06e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e072:	4406      	add	r6, r0
 801e074:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801e078:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e07c:	0a36      	lsrs	r6, r6, #8
 801e07e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e082:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e086:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e08a:	ea46 060a 	orr.w	r6, r6, sl
 801e08e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e092:	d01b      	beq.n	801e0cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 801e094:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e098:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e09c:	fb09 fa0a 	mul.w	sl, r9, sl
 801e0a0:	fb09 f004 	mul.w	r0, r9, r4
 801e0a4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e0a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e0ac:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801e0b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e0b4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801e0b8:	4454      	add	r4, sl
 801e0ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e0be:	0a24      	lsrs	r4, r4, #8
 801e0c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e0c4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e0c8:	ea44 0409 	orr.w	r4, r4, r9
 801e0cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e0d0:	d01b      	beq.n	801e10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801e0d2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801e0d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0da:	fb08 f909 	mul.w	r9, r8, r9
 801e0de:	fb08 f003 	mul.w	r0, r8, r3
 801e0e2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801e0e6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e0ea:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801e0ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e0f2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801e0f6:	444b      	add	r3, r9
 801e0f8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e0fc:	0a1b      	lsrs	r3, r3, #8
 801e0fe:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e106:	ea43 0308 	orr.w	r3, r3, r8
 801e10a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801e10e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e112:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801e116:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e11a:	fb0c f000 	mul.w	r0, ip, r0
 801e11e:	fb0c f606 	mul.w	r6, ip, r6
 801e122:	fb05 0808 	mla	r8, r5, r8, r0
 801e126:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801e12a:	fb05 6502 	mla	r5, r5, r2, r6
 801e12e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e132:	fb07 8800 	mla	r8, r7, r0, r8
 801e136:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801e13a:	fb07 5704 	mla	r7, r7, r4, r5
 801e13e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e142:	fb0e 8000 	mla	r0, lr, r0, r8
 801e146:	780a      	ldrb	r2, [r1, #0]
 801e148:	fb0e 7e03 	mla	lr, lr, r3, r7
 801e14c:	9b01      	ldr	r3, [sp, #4]
 801e14e:	0a00      	lsrs	r0, r0, #8
 801e150:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e154:	43db      	mvns	r3, r3
 801e156:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e15a:	b2db      	uxtb	r3, r3
 801e15c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e160:	ea40 0e0e 	orr.w	lr, r0, lr
 801e164:	fb02 f003 	mul.w	r0, r2, r3
 801e168:	1c42      	adds	r2, r0, #1
 801e16a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e16e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801e172:	700a      	strb	r2, [r1, #0]
 801e174:	784a      	ldrb	r2, [r1, #1]
 801e176:	435a      	muls	r2, r3
 801e178:	1c50      	adds	r0, r2, #1
 801e17a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e17e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801e182:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e186:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e18a:	704a      	strb	r2, [r1, #1]
 801e18c:	788a      	ldrb	r2, [r1, #2]
 801e18e:	4353      	muls	r3, r2
 801e190:	1c5a      	adds	r2, r3, #1
 801e192:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e196:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801e19a:	f881 e002 	strb.w	lr, [r1, #2]
 801e19e:	b003      	add	sp, #12
 801e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1a4:	08027e53 	.word	0x08027e53
 801e1a8:	080283bb 	.word	0x080283bb
 801e1ac:	08027f1c 	.word	0x08027f1c

0801e1b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1b4:	ed2d 8b0a 	vpush	{d8-d12}
 801e1b8:	b09b      	sub	sp, #108	; 0x6c
 801e1ba:	eeb0 aa40 	vmov.f32	s20, s0
 801e1be:	eef0 9a60 	vmov.f32	s19, s1
 801e1c2:	9218      	str	r2, [sp, #96]	; 0x60
 801e1c4:	eeb0 9a41 	vmov.f32	s18, s2
 801e1c8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801e1ca:	eeb0 8a62 	vmov.f32	s16, s5
 801e1ce:	9019      	str	r0, [sp, #100]	; 0x64
 801e1d0:	eef0 8a43 	vmov.f32	s17, s6
 801e1d4:	6850      	ldr	r0, [r2, #4]
 801e1d6:	eeb0 ca44 	vmov.f32	s24, s8
 801e1da:	9116      	str	r1, [sp, #88]	; 0x58
 801e1dc:	eef0 ba64 	vmov.f32	s23, s9
 801e1e0:	9307      	str	r3, [sp, #28]
 801e1e2:	eeb0 ba45 	vmov.f32	s22, s10
 801e1e6:	6812      	ldr	r2, [r2, #0]
 801e1e8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e1ec:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801e1ee:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801e1f2:	fb00 1303 	mla	r3, r0, r3, r1
 801e1f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e1fa:	18d3      	adds	r3, r2, r3
 801e1fc:	930a      	str	r3, [sp, #40]	; 0x28
 801e1fe:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	930f      	str	r3, [sp, #60]	; 0x3c
 801e204:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e206:	685e      	ldr	r6, [r3, #4]
 801e208:	3604      	adds	r6, #4
 801e20a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	dc03      	bgt.n	801e218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e210:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e212:	2b00      	cmp	r3, #0
 801e214:	f340 834f 	ble.w	801e8b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801e218:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e21a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e21e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e222:	1e48      	subs	r0, r1, #1
 801e224:	1e57      	subs	r7, r2, #1
 801e226:	9b07      	ldr	r3, [sp, #28]
 801e228:	2b00      	cmp	r3, #0
 801e22a:	f340 8178 	ble.w	801e51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e22e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801e230:	142b      	asrs	r3, r5, #16
 801e232:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e236:	d406      	bmi.n	801e246 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e238:	4584      	cmp	ip, r0
 801e23a:	da04      	bge.n	801e246 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	db02      	blt.n	801e246 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e240:	42bb      	cmp	r3, r7
 801e242:	f2c0 816d 	blt.w	801e520 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e246:	f11c 0c01 	adds.w	ip, ip, #1
 801e24a:	f100 815b 	bmi.w	801e504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e24e:	4561      	cmp	r1, ip
 801e250:	f2c0 8158 	blt.w	801e504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e254:	3301      	adds	r3, #1
 801e256:	f100 8155 	bmi.w	801e504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e25a:	429a      	cmp	r2, r3
 801e25c:	f2c0 8152 	blt.w	801e504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e260:	9b07      	ldr	r3, [sp, #28]
 801e262:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e264:	9317      	str	r3, [sp, #92]	; 0x5c
 801e266:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e268:	2b00      	cmp	r3, #0
 801e26a:	f340 8178 	ble.w	801e55e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801e26e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e270:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e274:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e278:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e27c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e27e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e282:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e284:	141b      	asrs	r3, r3, #16
 801e286:	f100 81ba 	bmi.w	801e5fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801e28a:	f101 38ff 	add.w	r8, r1, #4294967295
 801e28e:	4543      	cmp	r3, r8
 801e290:	f280 81b5 	bge.w	801e5fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801e294:	f1bc 0f00 	cmp.w	ip, #0
 801e298:	f2c0 81b1 	blt.w	801e5fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801e29c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e2a0:	45c4      	cmp	ip, r8
 801e2a2:	f280 81ac 	bge.w	801e5fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801e2a6:	b209      	sxth	r1, r1
 801e2a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e2aa:	fb0c 3301 	mla	r3, ip, r1, r3
 801e2ae:	eb04 0803 	add.w	r8, r4, r3
 801e2b2:	5ce3      	ldrb	r3, [r4, r3]
 801e2b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e2b8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e2bc:	2a00      	cmp	r2, #0
 801e2be:	f000 8193 	beq.w	801e5e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801e2c2:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e2c6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e2ca:	940b      	str	r4, [sp, #44]	; 0x2c
 801e2cc:	0e24      	lsrs	r4, r4, #24
 801e2ce:	9412      	str	r4, [sp, #72]	; 0x48
 801e2d0:	b178      	cbz	r0, 801e2f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e2d2:	eb08 0c01 	add.w	ip, r8, r1
 801e2d6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e2da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e2de:	9108      	str	r1, [sp, #32]
 801e2e0:	0e09      	lsrs	r1, r1, #24
 801e2e2:	9110      	str	r1, [sp, #64]	; 0x40
 801e2e4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e2e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e2ec:	910c      	str	r1, [sp, #48]	; 0x30
 801e2ee:	0e09      	lsrs	r1, r1, #24
 801e2f0:	9113      	str	r1, [sp, #76]	; 0x4c
 801e2f2:	b292      	uxth	r2, r2
 801e2f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e2f6:	b280      	uxth	r0, r0
 801e2f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e2fa:	fb02 f900 	mul.w	r9, r2, r0
 801e2fe:	0112      	lsls	r2, r2, #4
 801e300:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e304:	eba2 0809 	sub.w	r8, r2, r9
 801e308:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e30c:	b280      	uxth	r0, r0
 801e30e:	fa1f f888 	uxth.w	r8, r8
 801e312:	1a12      	subs	r2, r2, r0
 801e314:	fb08 f101 	mul.w	r1, r8, r1
 801e318:	b292      	uxth	r2, r2
 801e31a:	fb02 110e 	mla	r1, r2, lr, r1
 801e31e:	fb00 1104 	mla	r1, r0, r4, r1
 801e322:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e324:	fb09 1104 	mla	r1, r9, r4, r1
 801e328:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e32c:	2900      	cmp	r1, #0
 801e32e:	f000 80de 	beq.w	801e4ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e332:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e336:	d01b      	beq.n	801e370 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e338:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e33c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e340:	fb0e fa0a 	mul.w	sl, lr, sl
 801e344:	fb0e fe03 	mul.w	lr, lr, r3
 801e348:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e34c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e350:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e354:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e358:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e35c:	4453      	add	r3, sl
 801e35e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e362:	0a1b      	lsrs	r3, r3, #8
 801e364:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e368:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e36c:	ea43 030c 	orr.w	r3, r3, ip
 801e370:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e372:	2cff      	cmp	r4, #255	; 0xff
 801e374:	d021      	beq.n	801e3ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e376:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e378:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e37c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e37e:	fb04 fb0b 	mul.w	fp, r4, fp
 801e382:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e384:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e388:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e38a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e38e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e392:	fb04 fa0a 	mul.w	sl, r4, sl
 801e396:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e39a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e39e:	44de      	add	lr, fp
 801e3a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e3a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e3a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e3b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e3b4:	ea4e 040a 	orr.w	r4, lr, sl
 801e3b8:	940b      	str	r4, [sp, #44]	; 0x2c
 801e3ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e3bc:	2cff      	cmp	r4, #255	; 0xff
 801e3be:	d021      	beq.n	801e404 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e3c0:	9c08      	ldr	r4, [sp, #32]
 801e3c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e3c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e3c8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e3cc:	9c08      	ldr	r4, [sp, #32]
 801e3ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e3d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e3d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e3d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e3dc:	fb04 fa0a 	mul.w	sl, r4, sl
 801e3e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e3e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e3e8:	44de      	add	lr, fp
 801e3ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e3ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e3f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e3fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e3fe:	ea4e 040a 	orr.w	r4, lr, sl
 801e402:	9408      	str	r4, [sp, #32]
 801e404:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e406:	2cff      	cmp	r4, #255	; 0xff
 801e408:	d021      	beq.n	801e44e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801e40a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e40c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e410:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e412:	fb04 fb0b 	mul.w	fp, r4, fp
 801e416:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e418:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e41c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e41e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e422:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e426:	fb04 fa0a 	mul.w	sl, r4, sl
 801e42a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e42e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e432:	44de      	add	lr, fp
 801e434:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e438:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e43c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e440:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e444:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e448:	ea4e 040a 	orr.w	r4, lr, sl
 801e44c:	940c      	str	r4, [sp, #48]	; 0x30
 801e44e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e450:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e458:	43c9      	mvns	r1, r1
 801e45a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e45e:	9c08      	ldr	r4, [sp, #32]
 801e460:	b2c9      	uxtb	r1, r1
 801e462:	fb08 fc0c 	mul.w	ip, r8, ip
 801e466:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e46a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e46e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e470:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e474:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e478:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e47a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e47e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e482:	fb08 f80e 	mul.w	r8, r8, lr
 801e486:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e48a:	fb02 8303 	mla	r3, r2, r3, r8
 801e48e:	9a08      	ldr	r2, [sp, #32]
 801e490:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e494:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e49a:	fb00 330a 	mla	r3, r0, sl, r3
 801e49e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e4a2:	fb09 3900 	mla	r9, r9, r0, r3
 801e4a6:	783b      	ldrb	r3, [r7, #0]
 801e4a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e4ac:	fb03 f201 	mul.w	r2, r3, r1
 801e4b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e4b4:	1c53      	adds	r3, r2, #1
 801e4b6:	ea4c 0c09 	orr.w	ip, ip, r9
 801e4ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e4be:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e4c2:	703b      	strb	r3, [r7, #0]
 801e4c4:	787b      	ldrb	r3, [r7, #1]
 801e4c6:	434b      	muls	r3, r1
 801e4c8:	1c5a      	adds	r2, r3, #1
 801e4ca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e4ce:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e4d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e4d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e4da:	707b      	strb	r3, [r7, #1]
 801e4dc:	78bb      	ldrb	r3, [r7, #2]
 801e4de:	4359      	muls	r1, r3
 801e4e0:	1c4b      	adds	r3, r1, #1
 801e4e2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e4e6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e4ea:	f887 c002 	strb.w	ip, [r7, #2]
 801e4ee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801e4f0:	3703      	adds	r7, #3
 801e4f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e4f4:	441a      	add	r2, r3
 801e4f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e4f8:	441d      	add	r5, r3
 801e4fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e4fc:	922f      	str	r2, [sp, #188]	; 0xbc
 801e4fe:	3b01      	subs	r3, #1
 801e500:	9317      	str	r3, [sp, #92]	; 0x5c
 801e502:	e6b0      	b.n	801e266 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e504:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801e506:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801e508:	441c      	add	r4, r3
 801e50a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e50c:	441d      	add	r5, r3
 801e50e:	9b07      	ldr	r3, [sp, #28]
 801e510:	942f      	str	r4, [sp, #188]	; 0xbc
 801e512:	3b01      	subs	r3, #1
 801e514:	9307      	str	r3, [sp, #28]
 801e516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e518:	3303      	adds	r3, #3
 801e51a:	930a      	str	r3, [sp, #40]	; 0x28
 801e51c:	e683      	b.n	801e226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e51e:	d026      	beq.n	801e56e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801e520:	9b07      	ldr	r3, [sp, #28]
 801e522:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801e524:	3b01      	subs	r3, #1
 801e526:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801e528:	fb00 4003 	mla	r0, r0, r3, r4
 801e52c:	1400      	asrs	r0, r0, #16
 801e52e:	f53f ae97 	bmi.w	801e260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e532:	3901      	subs	r1, #1
 801e534:	4288      	cmp	r0, r1
 801e536:	f6bf ae93 	bge.w	801e260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e53a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801e53c:	fb01 5303 	mla	r3, r1, r3, r5
 801e540:	141b      	asrs	r3, r3, #16
 801e542:	f53f ae8d 	bmi.w	801e260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e546:	3a01      	subs	r2, #1
 801e548:	4293      	cmp	r3, r2
 801e54a:	f6bf ae89 	bge.w	801e260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e550:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e554:	f103 0e03 	add.w	lr, r3, #3
 801e558:	f1bb 0f00 	cmp.w	fp, #0
 801e55c:	dc6d      	bgt.n	801e63a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 801e55e:	9b07      	ldr	r3, [sp, #28]
 801e560:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e566:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e56a:	4423      	add	r3, r4
 801e56c:	930a      	str	r3, [sp, #40]	; 0x28
 801e56e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e570:	2b00      	cmp	r3, #0
 801e572:	f340 81a0 	ble.w	801e8b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801e576:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801e57a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e57c:	ee79 9aab 	vadd.f32	s19, s19, s23
 801e580:	eef0 6a48 	vmov.f32	s13, s16
 801e584:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801e588:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801e58c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e590:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 801e594:	eef0 6a68 	vmov.f32	s13, s17
 801e598:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e59c:	ee16 5a90 	vmov	r5, s13
 801e5a0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e5a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e5a8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e5ac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e5b0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e5b4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e5b8:	ee18 2a10 	vmov	r2, s16
 801e5bc:	eeb0 8a47 	vmov.f32	s16, s14
 801e5c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5c4:	ee18 2a90 	vmov	r2, s17
 801e5c8:	9331      	str	r3, [sp, #196]	; 0xc4
 801e5ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e5cc:	eef0 8a67 	vmov.f32	s17, s15
 801e5d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5d4:	9332      	str	r3, [sp, #200]	; 0xc8
 801e5d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e5d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e5da:	3b01      	subs	r3, #1
 801e5dc:	9316      	str	r3, [sp, #88]	; 0x58
 801e5de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e5e0:	bf08      	it	eq
 801e5e2:	4613      	moveq	r3, r2
 801e5e4:	9307      	str	r3, [sp, #28]
 801e5e6:	e610      	b.n	801e20a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e5e8:	2800      	cmp	r0, #0
 801e5ea:	f43f ae82 	beq.w	801e2f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e5ee:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e5f2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e5f6:	9108      	str	r1, [sp, #32]
 801e5f8:	0e09      	lsrs	r1, r1, #24
 801e5fa:	9110      	str	r1, [sp, #64]	; 0x40
 801e5fc:	e679      	b.n	801e2f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e5fe:	f113 0801 	adds.w	r8, r3, #1
 801e602:	f53f af74 	bmi.w	801e4ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e606:	4541      	cmp	r1, r8
 801e608:	f6ff af71 	blt.w	801e4ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e60c:	f11c 0801 	adds.w	r8, ip, #1
 801e610:	f53f af6d 	bmi.w	801e4ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e614:	45c6      	cmp	lr, r8
 801e616:	f6ff af6a 	blt.w	801e4ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e61a:	b209      	sxth	r1, r1
 801e61c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e620:	fa0f f38e 	sxth.w	r3, lr
 801e624:	9100      	str	r1, [sp, #0]
 801e626:	4639      	mov	r1, r7
 801e628:	9301      	str	r3, [sp, #4]
 801e62a:	4633      	mov	r3, r6
 801e62c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e632:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e634:	f7ff fc70 	bl	801df18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e638:	e759      	b.n	801e4ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e63a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e63c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e640:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801e642:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e646:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e648:	1427      	asrs	r7, r4, #16
 801e64a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e64c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e650:	142b      	asrs	r3, r5, #16
 801e652:	fb01 7303 	mla	r3, r1, r3, r7
 801e656:	18e7      	adds	r7, r4, r3
 801e658:	5ce3      	ldrb	r3, [r4, r3]
 801e65a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e65e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e662:	2a00      	cmp	r2, #0
 801e664:	f000 811d 	beq.w	801e8a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801e668:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e66c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e670:	940d      	str	r4, [sp, #52]	; 0x34
 801e672:	0e24      	lsrs	r4, r4, #24
 801e674:	9414      	str	r4, [sp, #80]	; 0x50
 801e676:	b170      	cbz	r0, 801e696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801e678:	eb07 0801 	add.w	r8, r7, r1
 801e67c:	5c79      	ldrb	r1, [r7, r1]
 801e67e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e682:	9109      	str	r1, [sp, #36]	; 0x24
 801e684:	0e09      	lsrs	r1, r1, #24
 801e686:	9111      	str	r1, [sp, #68]	; 0x44
 801e688:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e68c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e690:	910e      	str	r1, [sp, #56]	; 0x38
 801e692:	0e09      	lsrs	r1, r1, #24
 801e694:	9115      	str	r1, [sp, #84]	; 0x54
 801e696:	b292      	uxth	r2, r2
 801e698:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e69a:	b280      	uxth	r0, r0
 801e69c:	fb02 f900 	mul.w	r9, r2, r0
 801e6a0:	0112      	lsls	r2, r2, #4
 801e6a2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e6a6:	eba2 0809 	sub.w	r8, r2, r9
 801e6aa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e6ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e6b0:	b280      	uxth	r0, r0
 801e6b2:	fa1f f888 	uxth.w	r8, r8
 801e6b6:	1a09      	subs	r1, r1, r0
 801e6b8:	fb08 f202 	mul.w	r2, r8, r2
 801e6bc:	b289      	uxth	r1, r1
 801e6be:	fb01 220c 	mla	r2, r1, ip, r2
 801e6c2:	fb00 2204 	mla	r2, r0, r4, r2
 801e6c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e6c8:	fb09 2204 	mla	r2, r9, r4, r2
 801e6cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e6d0:	2a00      	cmp	r2, #0
 801e6d2:	f000 80db 	beq.w	801e88c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801e6d6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e6da:	d019      	beq.n	801e710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 801e6dc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e6e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e6e4:	fb0c fa0a 	mul.w	sl, ip, sl
 801e6e8:	fb0c fc03 	mul.w	ip, ip, r3
 801e6ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e6f0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e6f4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e6f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e6fc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e700:	4453      	add	r3, sl
 801e702:	0a3f      	lsrs	r7, r7, #8
 801e704:	0a1b      	lsrs	r3, r3, #8
 801e706:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e70a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e70e:	433b      	orrs	r3, r7
 801e710:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e712:	2cff      	cmp	r4, #255	; 0xff
 801e714:	d020      	beq.n	801e758 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 801e716:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e718:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e71c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e71e:	4367      	muls	r7, r4
 801e720:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e722:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e726:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e72a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e72c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e730:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e734:	fb04 fa0a 	mul.w	sl, r4, sl
 801e738:	44bc      	add	ip, r7
 801e73a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e73e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e742:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e746:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e74a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e74e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e752:	ea4c 040a 	orr.w	r4, ip, sl
 801e756:	940d      	str	r4, [sp, #52]	; 0x34
 801e758:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e75a:	2cff      	cmp	r4, #255	; 0xff
 801e75c:	d020      	beq.n	801e7a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801e75e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e760:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e764:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e766:	4367      	muls	r7, r4
 801e768:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e76a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e76e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e772:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e774:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e778:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e77c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e780:	44bc      	add	ip, r7
 801e782:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e786:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e78a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e78e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e792:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e796:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e79a:	ea4c 040a 	orr.w	r4, ip, sl
 801e79e:	9409      	str	r4, [sp, #36]	; 0x24
 801e7a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e7a2:	2cff      	cmp	r4, #255	; 0xff
 801e7a4:	d020      	beq.n	801e7e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 801e7a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e7a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e7ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e7ae:	4367      	muls	r7, r4
 801e7b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e7b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e7b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e7ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e7bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e7c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e7c4:	fb04 fa0a 	mul.w	sl, r4, sl
 801e7c8:	44bc      	add	ip, r7
 801e7ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e7ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e7d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e7d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e7da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e7de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e7e2:	ea4c 040a 	orr.w	r4, ip, sl
 801e7e6:	940e      	str	r4, [sp, #56]	; 0x38
 801e7e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e7ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e7ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e7f2:	43d2      	mvns	r2, r2
 801e7f4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e7f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e7fa:	b2d2      	uxtb	r2, r2
 801e7fc:	fb08 f707 	mul.w	r7, r8, r7
 801e800:	fb01 770c 	mla	r7, r1, ip, r7
 801e804:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e808:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e80a:	fb00 770c 	mla	r7, r0, ip, r7
 801e80e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e812:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e814:	fb09 770c 	mla	r7, r9, ip, r7
 801e818:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e81c:	fb08 f80c 	mul.w	r8, r8, ip
 801e820:	0a3f      	lsrs	r7, r7, #8
 801e822:	fb01 8303 	mla	r3, r1, r3, r8
 801e826:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e828:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e82c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e830:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e832:	fb00 330a 	mla	r3, r0, sl, r3
 801e836:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e83a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e83e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e842:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e846:	fb03 f102 	mul.w	r1, r3, r2
 801e84a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e84e:	1c4b      	adds	r3, r1, #1
 801e850:	ea47 070c 	orr.w	r7, r7, ip
 801e854:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e858:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801e85c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e860:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801e864:	4353      	muls	r3, r2
 801e866:	1c59      	adds	r1, r3, #1
 801e868:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e86c:	0a3b      	lsrs	r3, r7, #8
 801e86e:	0c3f      	lsrs	r7, r7, #16
 801e870:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e874:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e878:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e87c:	435a      	muls	r2, r3
 801e87e:	1c53      	adds	r3, r2, #1
 801e880:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e884:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e888:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e88c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801e88e:	f10e 0e03 	add.w	lr, lr, #3
 801e892:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e894:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e898:	441a      	add	r2, r3
 801e89a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e89c:	922f      	str	r2, [sp, #188]	; 0xbc
 801e89e:	441d      	add	r5, r3
 801e8a0:	e65a      	b.n	801e558 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801e8a2:	2800      	cmp	r0, #0
 801e8a4:	f43f aef7 	beq.w	801e696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801e8a8:	5c79      	ldrb	r1, [r7, r1]
 801e8aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e8ae:	9109      	str	r1, [sp, #36]	; 0x24
 801e8b0:	0e09      	lsrs	r1, r1, #24
 801e8b2:	9111      	str	r1, [sp, #68]	; 0x44
 801e8b4:	e6ef      	b.n	801e696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801e8b6:	b01b      	add	sp, #108	; 0x6c
 801e8b8:	ecbd 8b0a 	vpop	{d8-d12}
 801e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e8c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c4:	b08d      	sub	sp, #52	; 0x34
 801e8c6:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801e8ca:	9103      	str	r1, [sp, #12]
 801e8cc:	fb07 5803 	mla	r8, r7, r3, r5
 801e8d0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801e8d4:	9803      	ldr	r0, [sp, #12]
 801e8d6:	2f00      	cmp	r7, #0
 801e8d8:	910b      	str	r1, [sp, #44]	; 0x2c
 801e8da:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e8de:	9903      	ldr	r1, [sp, #12]
 801e8e0:	9c03      	ldr	r4, [sp, #12]
 801e8e2:	eb02 0608 	add.w	r6, r2, r8
 801e8e6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e8ea:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801e8ee:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e8f2:	7809      	ldrb	r1, [r1, #0]
 801e8f4:	7840      	ldrb	r0, [r0, #1]
 801e8f6:	78a4      	ldrb	r4, [r4, #2]
 801e8f8:	db51      	blt.n	801e99e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801e8fa:	45be      	cmp	lr, r7
 801e8fc:	dd4f      	ble.n	801e99e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801e8fe:	2d00      	cmp	r5, #0
 801e900:	db49      	blt.n	801e996 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801e902:	42ab      	cmp	r3, r5
 801e904:	dd47      	ble.n	801e996 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801e906:	f812 2008 	ldrb.w	r2, [r2, r8]
 801e90a:	9204      	str	r2, [sp, #16]
 801e90c:	7872      	ldrb	r2, [r6, #1]
 801e90e:	9205      	str	r2, [sp, #20]
 801e910:	78b2      	ldrb	r2, [r6, #2]
 801e912:	9206      	str	r2, [sp, #24]
 801e914:	1c6a      	adds	r2, r5, #1
 801e916:	d449      	bmi.n	801e9ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e918:	4293      	cmp	r3, r2
 801e91a:	dd47      	ble.n	801e9ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e91c:	f1bc 0f00 	cmp.w	ip, #0
 801e920:	d044      	beq.n	801e9ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e922:	7972      	ldrb	r2, [r6, #5]
 801e924:	f896 b003 	ldrb.w	fp, [r6, #3]
 801e928:	f896 a004 	ldrb.w	sl, [r6, #4]
 801e92c:	9201      	str	r2, [sp, #4]
 801e92e:	3701      	adds	r7, #1
 801e930:	d444      	bmi.n	801e9bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801e932:	45be      	cmp	lr, r7
 801e934:	dd42      	ble.n	801e9bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801e936:	f1b9 0f00 	cmp.w	r9, #0
 801e93a:	f000 80c1 	beq.w	801eac0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801e93e:	2d00      	cmp	r5, #0
 801e940:	db38      	blt.n	801e9b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801e942:	42ab      	cmp	r3, r5
 801e944:	dd36      	ble.n	801e9b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801e946:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e94a:	f816 8002 	ldrb.w	r8, [r6, r2]
 801e94e:	2203      	movs	r2, #3
 801e950:	fb03 6702 	mla	r7, r3, r2, r6
 801e954:	fb03 6202 	mla	r2, r3, r2, r6
 801e958:	787f      	ldrb	r7, [r7, #1]
 801e95a:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e95e:	9702      	str	r7, [sp, #8]
 801e960:	3501      	adds	r5, #1
 801e962:	d432      	bmi.n	801e9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801e964:	42ab      	cmp	r3, r5
 801e966:	dd30      	ble.n	801e9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801e968:	f1bc 0f00 	cmp.w	ip, #0
 801e96c:	d031      	beq.n	801e9d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801e96e:	2703      	movs	r7, #3
 801e970:	fb13 7207 	smlabb	r2, r3, r7, r7
 801e974:	5cb5      	ldrb	r5, [r6, r2]
 801e976:	fb03 6207 	mla	r2, r3, r7, r6
 801e97a:	fb03 6307 	mla	r3, r3, r7, r6
 801e97e:	7912      	ldrb	r2, [r2, #4]
 801e980:	795e      	ldrb	r6, [r3, #5]
 801e982:	f1bc 0f0f 	cmp.w	ip, #15
 801e986:	d927      	bls.n	801e9d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801e988:	4b53      	ldr	r3, [pc, #332]	; (801ead8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801e98a:	f240 1157 	movw	r1, #343	; 0x157
 801e98e:	4a53      	ldr	r2, [pc, #332]	; (801eadc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801e990:	4853      	ldr	r0, [pc, #332]	; (801eae0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801e992:	f004 fc37 	bl	8023204 <__assert_func>
 801e996:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801e99a:	9104      	str	r1, [sp, #16]
 801e99c:	e7ba      	b.n	801e914 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801e99e:	9401      	str	r4, [sp, #4]
 801e9a0:	4682      	mov	sl, r0
 801e9a2:	468b      	mov	fp, r1
 801e9a4:	9104      	str	r1, [sp, #16]
 801e9a6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801e9aa:	e7c0      	b.n	801e92e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801e9ac:	9401      	str	r4, [sp, #4]
 801e9ae:	4682      	mov	sl, r0
 801e9b0:	468b      	mov	fp, r1
 801e9b2:	e7bc      	b.n	801e92e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801e9b4:	46a6      	mov	lr, r4
 801e9b6:	9002      	str	r0, [sp, #8]
 801e9b8:	4688      	mov	r8, r1
 801e9ba:	e7d1      	b.n	801e960 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801e9bc:	4626      	mov	r6, r4
 801e9be:	4602      	mov	r2, r0
 801e9c0:	460d      	mov	r5, r1
 801e9c2:	46a6      	mov	lr, r4
 801e9c4:	9002      	str	r0, [sp, #8]
 801e9c6:	4688      	mov	r8, r1
 801e9c8:	e7db      	b.n	801e982 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801e9ca:	4626      	mov	r6, r4
 801e9cc:	4602      	mov	r2, r0
 801e9ce:	460d      	mov	r5, r1
 801e9d0:	e7d7      	b.n	801e982 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801e9d2:	4626      	mov	r6, r4
 801e9d4:	4602      	mov	r2, r0
 801e9d6:	460d      	mov	r5, r1
 801e9d8:	f1b9 0f0f 	cmp.w	r9, #15
 801e9dc:	d8d4      	bhi.n	801e988 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801e9de:	fa1f f38c 	uxth.w	r3, ip
 801e9e2:	fa1f fc89 	uxth.w	ip, r9
 801e9e6:	fb03 f70c 	mul.w	r7, r3, ip
 801e9ea:	011b      	lsls	r3, r3, #4
 801e9ec:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e9f0:	9707      	str	r7, [sp, #28]
 801e9f2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e9f6:	fa1f fc8c 	uxth.w	ip, ip
 801e9fa:	eba7 070c 	sub.w	r7, r7, ip
 801e9fe:	b2bf      	uxth	r7, r7
 801ea00:	9709      	str	r7, [sp, #36]	; 0x24
 801ea02:	9f07      	ldr	r7, [sp, #28]
 801ea04:	1bdb      	subs	r3, r3, r7
 801ea06:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801ea0a:	b29b      	uxth	r3, r3
 801ea0c:	9708      	str	r7, [sp, #32]
 801ea0e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ea10:	930a      	str	r3, [sp, #40]	; 0x28
 801ea12:	ea6f 0907 	mvn.w	r9, r7
 801ea16:	fb03 fb0b 	mul.w	fp, r3, fp
 801ea1a:	9f04      	ldr	r7, [sp, #16]
 801ea1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea1e:	fa5f f989 	uxtb.w	r9, r9
 801ea22:	fb03 bb07 	mla	fp, r3, r7, fp
 801ea26:	9f07      	ldr	r7, [sp, #28]
 801ea28:	fb11 f109 	smulbb	r1, r1, r9
 801ea2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea2e:	fb0c b808 	mla	r8, ip, r8, fp
 801ea32:	fb10 f009 	smulbb	r0, r0, r9
 801ea36:	fb14 f409 	smulbb	r4, r4, r9
 801ea3a:	fb07 8805 	mla	r8, r7, r5, r8
 801ea3e:	9d08      	ldr	r5, [sp, #32]
 801ea40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ea42:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ea46:	fb08 1805 	mla	r8, r8, r5, r1
 801ea4a:	9d05      	ldr	r5, [sp, #20]
 801ea4c:	fa1f f888 	uxth.w	r8, r8
 801ea50:	f108 0101 	add.w	r1, r8, #1
 801ea54:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ea58:	9903      	ldr	r1, [sp, #12]
 801ea5a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea5e:	f881 8000 	strb.w	r8, [r1]
 801ea62:	fb03 f10a 	mul.w	r1, r3, sl
 801ea66:	fb07 1105 	mla	r1, r7, r5, r1
 801ea6a:	9d02      	ldr	r5, [sp, #8]
 801ea6c:	fb0c 1105 	mla	r1, ip, r5, r1
 801ea70:	9d07      	ldr	r5, [sp, #28]
 801ea72:	fb05 1102 	mla	r1, r5, r2, r1
 801ea76:	9a08      	ldr	r2, [sp, #32]
 801ea78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ea7c:	fb01 0102 	mla	r1, r1, r2, r0
 801ea80:	9a03      	ldr	r2, [sp, #12]
 801ea82:	b289      	uxth	r1, r1
 801ea84:	1c48      	adds	r0, r1, #1
 801ea86:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ea8a:	1209      	asrs	r1, r1, #8
 801ea8c:	7051      	strb	r1, [r2, #1]
 801ea8e:	9a01      	ldr	r2, [sp, #4]
 801ea90:	4353      	muls	r3, r2
 801ea92:	9a06      	ldr	r2, [sp, #24]
 801ea94:	fb07 3702 	mla	r7, r7, r2, r3
 801ea98:	9b08      	ldr	r3, [sp, #32]
 801ea9a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801ea9e:	fb05 c606 	mla	r6, r5, r6, ip
 801eaa2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801eaa6:	fb06 4603 	mla	r6, r6, r3, r4
 801eaaa:	9b03      	ldr	r3, [sp, #12]
 801eaac:	b2b6      	uxth	r6, r6
 801eaae:	f106 0e01 	add.w	lr, r6, #1
 801eab2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801eab6:	1236      	asrs	r6, r6, #8
 801eab8:	709e      	strb	r6, [r3, #2]
 801eaba:	b00d      	add	sp, #52	; 0x34
 801eabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eac0:	f1bc 0f0f 	cmp.w	ip, #15
 801eac4:	f63f af60 	bhi.w	801e988 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801eac8:	4626      	mov	r6, r4
 801eaca:	4602      	mov	r2, r0
 801eacc:	460d      	mov	r5, r1
 801eace:	46a6      	mov	lr, r4
 801ead0:	9002      	str	r0, [sp, #8]
 801ead2:	4688      	mov	r8, r1
 801ead4:	e783      	b.n	801e9de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801ead6:	bf00      	nop
 801ead8:	08027e53 	.word	0x08027e53
 801eadc:	080283bb 	.word	0x080283bb
 801eae0:	08027f1c 	.word	0x08027f1c

0801eae4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae8:	ed2d 8b08 	vpush	{d8-d11}
 801eaec:	b09f      	sub	sp, #124	; 0x7c
 801eaee:	eeb0 aa40 	vmov.f32	s20, s0
 801eaf2:	eef0 9a60 	vmov.f32	s19, s1
 801eaf6:	920e      	str	r2, [sp, #56]	; 0x38
 801eaf8:	eeb0 9a41 	vmov.f32	s18, s2
 801eafc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801eafe:	eeb0 8a62 	vmov.f32	s16, s5
 801eb02:	9307      	str	r3, [sp, #28]
 801eb04:	eef0 8a43 	vmov.f32	s17, s6
 801eb08:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801eb0c:	eef0 ba44 	vmov.f32	s23, s8
 801eb10:	901d      	str	r0, [sp, #116]	; 0x74
 801eb12:	eeb0 ba64 	vmov.f32	s22, s9
 801eb16:	930c      	str	r3, [sp, #48]	; 0x30
 801eb18:	eef0 aa45 	vmov.f32	s21, s10
 801eb1c:	6850      	ldr	r0, [r2, #4]
 801eb1e:	910b      	str	r1, [sp, #44]	; 0x2c
 801eb20:	6812      	ldr	r2, [r2, #0]
 801eb22:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801eb26:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 801eb2a:	fb00 1303 	mla	r3, r0, r3, r1
 801eb2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb32:	18d3      	adds	r3, r2, r3
 801eb34:	9308      	str	r3, [sp, #32]
 801eb36:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	930a      	str	r3, [sp, #40]	; 0x28
 801eb3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb3e:	43db      	mvns	r3, r3
 801eb40:	b2db      	uxtb	r3, r3
 801eb42:	9309      	str	r3, [sp, #36]	; 0x24
 801eb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	dc03      	bgt.n	801eb52 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	f340 81f5 	ble.w	801ef3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801eb52:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801eb54:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eb58:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eb5c:	1e48      	subs	r0, r1, #1
 801eb5e:	1e54      	subs	r4, r2, #1
 801eb60:	9b07      	ldr	r3, [sp, #28]
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	f340 80d5 	ble.w	801ed12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801eb68:	ea5f 452a 	movs.w	r5, sl, asr #16
 801eb6c:	ea4f 4328 	mov.w	r3, r8, asr #16
 801eb70:	d406      	bmi.n	801eb80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801eb72:	4285      	cmp	r5, r0
 801eb74:	da04      	bge.n	801eb80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	db02      	blt.n	801eb80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801eb7a:	42a3      	cmp	r3, r4
 801eb7c:	f2c0 80ca 	blt.w	801ed14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801eb80:	3501      	adds	r5, #1
 801eb82:	f100 80bb 	bmi.w	801ecfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801eb86:	42a9      	cmp	r1, r5
 801eb88:	f2c0 80b8 	blt.w	801ecfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801eb8c:	3301      	adds	r3, #1
 801eb8e:	f100 80b5 	bmi.w	801ecfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801eb92:	429a      	cmp	r2, r3
 801eb94:	f2c0 80b2 	blt.w	801ecfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801eb98:	9b07      	ldr	r3, [sp, #28]
 801eb9a:	9d08      	ldr	r5, [sp, #32]
 801eb9c:	930d      	str	r3, [sp, #52]	; 0x34
 801eb9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	f340 80d6 	ble.w	801ed52 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801eba6:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801eba8:	ea4f 4428 	mov.w	r4, r8, asr #16
 801ebac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801ebae:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801ebb2:	68c6      	ldr	r6, [r0, #12]
 801ebb4:	ea5f 402a 	movs.w	r0, sl, asr #16
 801ebb8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801ebbc:	689b      	ldr	r3, [r3, #8]
 801ebbe:	f100 810f 	bmi.w	801ede0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801ebc2:	1e5f      	subs	r7, r3, #1
 801ebc4:	42b8      	cmp	r0, r7
 801ebc6:	f280 810b 	bge.w	801ede0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801ebca:	2c00      	cmp	r4, #0
 801ebcc:	f2c0 8108 	blt.w	801ede0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801ebd0:	1e77      	subs	r7, r6, #1
 801ebd2:	42bc      	cmp	r4, r7
 801ebd4:	f280 8104 	bge.w	801ede0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801ebd8:	b21b      	sxth	r3, r3
 801ebda:	fb04 0003 	mla	r0, r4, r3, r0
 801ebde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ebe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ebe4:	1826      	adds	r6, r4, r0
 801ebe6:	5c24      	ldrb	r4, [r4, r0]
 801ebe8:	78b7      	ldrb	r7, [r6, #2]
 801ebea:	7870      	ldrb	r0, [r6, #1]
 801ebec:	970f      	str	r7, [sp, #60]	; 0x3c
 801ebee:	7977      	ldrb	r7, [r6, #5]
 801ebf0:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ebf4:	f896 c004 	ldrb.w	ip, [r6, #4]
 801ebf8:	9710      	str	r7, [sp, #64]	; 0x40
 801ebfa:	b1c9      	cbz	r1, 801ec30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ebfc:	f04f 0b03 	mov.w	fp, #3
 801ec00:	f06f 0904 	mvn.w	r9, #4
 801ec04:	3605      	adds	r6, #5
 801ec06:	fb13 930b 	smlabb	r3, r3, fp, r9
 801ec0a:	eb06 0b03 	add.w	fp, r6, r3
 801ec0e:	5cf3      	ldrb	r3, [r6, r3]
 801ec10:	9311      	str	r3, [sp, #68]	; 0x44
 801ec12:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801ec16:	9313      	str	r3, [sp, #76]	; 0x4c
 801ec18:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ec1c:	9315      	str	r3, [sp, #84]	; 0x54
 801ec1e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801ec22:	9312      	str	r3, [sp, #72]	; 0x48
 801ec24:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801ec28:	9314      	str	r3, [sp, #80]	; 0x50
 801ec2a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801ec2e:	9316      	str	r3, [sp, #88]	; 0x58
 801ec30:	b292      	uxth	r2, r2
 801ec32:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801ec34:	b289      	uxth	r1, r1
 801ec36:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ec3a:	fb02 f601 	mul.w	r6, r2, r1
 801ec3e:	0112      	lsls	r2, r2, #4
 801ec40:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801ec44:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801ec48:	1b92      	subs	r2, r2, r6
 801ec4a:	b289      	uxth	r1, r1
 801ec4c:	b292      	uxth	r2, r2
 801ec4e:	eba9 0901 	sub.w	r9, r9, r1
 801ec52:	fb02 fe0e 	mul.w	lr, r2, lr
 801ec56:	fa1f f989 	uxth.w	r9, r9
 801ec5a:	fb02 fc0c 	mul.w	ip, r2, ip
 801ec5e:	fb09 e404 	mla	r4, r9, r4, lr
 801ec62:	f895 e000 	ldrb.w	lr, [r5]
 801ec66:	fb09 c000 	mla	r0, r9, r0, ip
 801ec6a:	fb01 4407 	mla	r4, r1, r7, r4
 801ec6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801ec70:	fb06 4407 	mla	r4, r6, r7, r4
 801ec74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ec76:	fb1e fe07 	smulbb	lr, lr, r7
 801ec7a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ec7e:	fb04 e403 	mla	r4, r4, r3, lr
 801ec82:	b2a4      	uxth	r4, r4
 801ec84:	f104 0e01 	add.w	lr, r4, #1
 801ec88:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801ec8c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ec8e:	fb01 0004 	mla	r0, r1, r4, r0
 801ec92:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ec94:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec98:	fb06 0004 	mla	r0, r6, r4, r0
 801ec9c:	786c      	ldrb	r4, [r5, #1]
 801ec9e:	f885 e000 	strb.w	lr, [r5]
 801eca2:	fb14 f407 	smulbb	r4, r4, r7
 801eca6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ecaa:	fb00 4003 	mla	r0, r0, r3, r4
 801ecae:	b280      	uxth	r0, r0
 801ecb0:	1c44      	adds	r4, r0, #1
 801ecb2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801ecb6:	1200      	asrs	r0, r0, #8
 801ecb8:	7068      	strb	r0, [r5, #1]
 801ecba:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ecbc:	4342      	muls	r2, r0
 801ecbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ecc0:	fb09 2200 	mla	r2, r9, r0, r2
 801ecc4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ecc6:	fb01 2100 	mla	r1, r1, r0, r2
 801ecca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801eccc:	fb06 1602 	mla	r6, r6, r2, r1
 801ecd0:	78a9      	ldrb	r1, [r5, #2]
 801ecd2:	fb11 f107 	smulbb	r1, r1, r7
 801ecd6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ecda:	fb06 1303 	mla	r3, r6, r3, r1
 801ecde:	b29b      	uxth	r3, r3
 801ece0:	1c5e      	adds	r6, r3, #1
 801ece2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ece6:	121b      	asrs	r3, r3, #8
 801ece8:	70ab      	strb	r3, [r5, #2]
 801ecea:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ecec:	3503      	adds	r5, #3
 801ecee:	449a      	add	sl, r3
 801ecf0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ecf2:	4498      	add	r8, r3
 801ecf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ecf6:	3b01      	subs	r3, #1
 801ecf8:	930d      	str	r3, [sp, #52]	; 0x34
 801ecfa:	e750      	b.n	801eb9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801ecfc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ecfe:	449a      	add	sl, r3
 801ed00:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ed02:	4498      	add	r8, r3
 801ed04:	9b07      	ldr	r3, [sp, #28]
 801ed06:	3b01      	subs	r3, #1
 801ed08:	9307      	str	r3, [sp, #28]
 801ed0a:	9b08      	ldr	r3, [sp, #32]
 801ed0c:	3303      	adds	r3, #3
 801ed0e:	9308      	str	r3, [sp, #32]
 801ed10:	e726      	b.n	801eb60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ed12:	d026      	beq.n	801ed62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ed14:	9b07      	ldr	r3, [sp, #28]
 801ed16:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801ed18:	3b01      	subs	r3, #1
 801ed1a:	fb00 a003 	mla	r0, r0, r3, sl
 801ed1e:	1400      	asrs	r0, r0, #16
 801ed20:	f53f af3a 	bmi.w	801eb98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801ed24:	3901      	subs	r1, #1
 801ed26:	4288      	cmp	r0, r1
 801ed28:	f6bf af36 	bge.w	801eb98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801ed2c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801ed2e:	fb01 8303 	mla	r3, r1, r3, r8
 801ed32:	141b      	asrs	r3, r3, #16
 801ed34:	f53f af30 	bmi.w	801eb98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801ed38:	3a01      	subs	r2, #1
 801ed3a:	4293      	cmp	r3, r2
 801ed3c:	f6bf af2c 	bge.w	801eb98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801ed40:	9b08      	ldr	r3, [sp, #32]
 801ed42:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ed46:	1cdd      	adds	r5, r3, #3
 801ed48:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801ed4c:	f1bc 0f00 	cmp.w	ip, #0
 801ed50:	dc5f      	bgt.n	801ee12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801ed52:	9b07      	ldr	r3, [sp, #28]
 801ed54:	9a08      	ldr	r2, [sp, #32]
 801ed56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed5e:	441a      	add	r2, r3
 801ed60:	9208      	str	r2, [sp, #32]
 801ed62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	f340 80e9 	ble.w	801ef3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801ed6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ed70:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ed74:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ed78:	eef0 6a48 	vmov.f32	s13, s16
 801ed7c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ed80:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ed84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed88:	ee16 aa90 	vmov	sl, s13
 801ed8c:	eef0 6a68 	vmov.f32	s13, s17
 801ed90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed94:	ee16 8a90 	vmov	r8, s13
 801ed98:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ed9c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eda0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eda4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eda8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801edac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801edb0:	ee18 2a10 	vmov	r2, s16
 801edb4:	eeb0 8a47 	vmov.f32	s16, s14
 801edb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edbc:	ee18 2a90 	vmov	r2, s17
 801edc0:	9333      	str	r3, [sp, #204]	; 0xcc
 801edc2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801edc4:	eef0 8a67 	vmov.f32	s17, s15
 801edc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edcc:	9334      	str	r3, [sp, #208]	; 0xd0
 801edce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801edd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801edd2:	3b01      	subs	r3, #1
 801edd4:	930b      	str	r3, [sp, #44]	; 0x2c
 801edd6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801edd8:	bf08      	it	eq
 801edda:	4613      	moveq	r3, r2
 801eddc:	9307      	str	r3, [sp, #28]
 801edde:	e6b1      	b.n	801eb44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ede0:	1c47      	adds	r7, r0, #1
 801ede2:	d482      	bmi.n	801ecea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ede4:	42bb      	cmp	r3, r7
 801ede6:	db80      	blt.n	801ecea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ede8:	1c67      	adds	r7, r4, #1
 801edea:	f53f af7e 	bmi.w	801ecea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801edee:	42be      	cmp	r6, r7
 801edf0:	f6ff af7b 	blt.w	801ecea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801edf4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801edf6:	b236      	sxth	r6, r6
 801edf8:	9001      	str	r0, [sp, #4]
 801edfa:	b21b      	sxth	r3, r3
 801edfc:	9600      	str	r6, [sp, #0]
 801edfe:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ee00:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801ee04:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801ee08:	4629      	mov	r1, r5
 801ee0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee0c:	f7ff fd58 	bl	801e8c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801ee10:	e76b      	b.n	801ecea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ee12:	9938      	ldr	r1, [sp, #224]	; 0xe0
 801ee14:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ee18:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801ee1c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801ee20:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801ee24:	ea4f 4128 	mov.w	r1, r8, asr #16
 801ee28:	fb07 0101 	mla	r1, r7, r1, r0
 801ee2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ee2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ee32:	1844      	adds	r4, r0, r1
 801ee34:	5c40      	ldrb	r0, [r0, r1]
 801ee36:	78a6      	ldrb	r6, [r4, #2]
 801ee38:	7861      	ldrb	r1, [r4, #1]
 801ee3a:	960f      	str	r6, [sp, #60]	; 0x3c
 801ee3c:	78e6      	ldrb	r6, [r4, #3]
 801ee3e:	910d      	str	r1, [sp, #52]	; 0x34
 801ee40:	9610      	str	r6, [sp, #64]	; 0x40
 801ee42:	f894 9004 	ldrb.w	r9, [r4, #4]
 801ee46:	f894 b005 	ldrb.w	fp, [r4, #5]
 801ee4a:	b192      	cbz	r2, 801ee72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801ee4c:	f06f 0604 	mvn.w	r6, #4
 801ee50:	2103      	movs	r1, #3
 801ee52:	3405      	adds	r4, #5
 801ee54:	fb17 6701 	smlabb	r7, r7, r1, r6
 801ee58:	19e6      	adds	r6, r4, r7
 801ee5a:	5de4      	ldrb	r4, [r4, r7]
 801ee5c:	9417      	str	r4, [sp, #92]	; 0x5c
 801ee5e:	7874      	ldrb	r4, [r6, #1]
 801ee60:	9419      	str	r4, [sp, #100]	; 0x64
 801ee62:	78b4      	ldrb	r4, [r6, #2]
 801ee64:	941b      	str	r4, [sp, #108]	; 0x6c
 801ee66:	78f4      	ldrb	r4, [r6, #3]
 801ee68:	9418      	str	r4, [sp, #96]	; 0x60
 801ee6a:	7934      	ldrb	r4, [r6, #4]
 801ee6c:	941a      	str	r4, [sp, #104]	; 0x68
 801ee6e:	7974      	ldrb	r4, [r6, #5]
 801ee70:	941c      	str	r4, [sp, #112]	; 0x70
 801ee72:	b29b      	uxth	r3, r3
 801ee74:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ee76:	b292      	uxth	r2, r2
 801ee78:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ee7a:	3503      	adds	r5, #3
 801ee7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ee80:	fb03 f402 	mul.w	r4, r3, r2
 801ee84:	011b      	lsls	r3, r3, #4
 801ee86:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801ee8a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801ee8e:	1b1b      	subs	r3, r3, r4
 801ee90:	b292      	uxth	r2, r2
 801ee92:	b29b      	uxth	r3, r3
 801ee94:	1ab6      	subs	r6, r6, r2
 801ee96:	435f      	muls	r7, r3
 801ee98:	b2b6      	uxth	r6, r6
 801ee9a:	fb03 f909 	mul.w	r9, r3, r9
 801ee9e:	fb03 fb0b 	mul.w	fp, r3, fp
 801eea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eea4:	fb06 7000 	mla	r0, r6, r0, r7
 801eea8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801eeaa:	fb06 bb03 	mla	fp, r6, r3, fp
 801eeae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eeb0:	fb02 0007 	mla	r0, r2, r7, r0
 801eeb4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801eeb6:	fb02 bb03 	mla	fp, r2, r3, fp
 801eeba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eebc:	fb04 0007 	mla	r0, r4, r7, r0
 801eec0:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801eec4:	fb17 f701 	smulbb	r7, r7, r1
 801eec8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801eecc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801eece:	fb00 700e 	mla	r0, r0, lr, r7
 801eed2:	fb06 9101 	mla	r1, r6, r1, r9
 801eed6:	b280      	uxth	r0, r0
 801eed8:	1c47      	adds	r7, r0, #1
 801eeda:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801eede:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801eee0:	1200      	asrs	r0, r0, #8
 801eee2:	f805 0c06 	strb.w	r0, [r5, #-6]
 801eee6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801eee8:	fb02 1100 	mla	r1, r2, r0, r1
 801eeec:	981a      	ldr	r0, [sp, #104]	; 0x68
 801eeee:	fb04 1100 	mla	r1, r4, r0, r1
 801eef2:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801eef6:	fb04 b403 	mla	r4, r4, r3, fp
 801eefa:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801eefe:	fb10 f007 	smulbb	r0, r0, r7
 801ef02:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ef06:	fb13 f307 	smulbb	r3, r3, r7
 801ef0a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ef0e:	fb01 010e 	mla	r1, r1, lr, r0
 801ef12:	fb04 340e 	mla	r4, r4, lr, r3
 801ef16:	b289      	uxth	r1, r1
 801ef18:	b2a4      	uxth	r4, r4
 801ef1a:	1c48      	adds	r0, r1, #1
 801ef1c:	1c63      	adds	r3, r4, #1
 801ef1e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ef22:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ef26:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ef28:	1209      	asrs	r1, r1, #8
 801ef2a:	1224      	asrs	r4, r4, #8
 801ef2c:	449a      	add	sl, r3
 801ef2e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ef30:	f805 1c05 	strb.w	r1, [r5, #-5]
 801ef34:	f805 4c04 	strb.w	r4, [r5, #-4]
 801ef38:	4498      	add	r8, r3
 801ef3a:	e707      	b.n	801ed4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ef3c:	b01f      	add	sp, #124	; 0x7c
 801ef3e:	ecbd 8b08 	vpop	{d8-d11}
 801ef42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ef48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef4c:	b085      	sub	sp, #20
 801ef4e:	784d      	ldrb	r5, [r1, #1]
 801ef50:	788e      	ldrb	r6, [r1, #2]
 801ef52:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801ef56:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801ef5a:	9403      	str	r4, [sp, #12]
 801ef5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801ef60:	780c      	ldrb	r4, [r1, #0]
 801ef62:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801ef66:	fb07 ce03 	mla	lr, r7, r3, ip
 801ef6a:	2f00      	cmp	r7, #0
 801ef6c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ef70:	eb02 0b0e 	add.w	fp, r2, lr
 801ef74:	db56      	blt.n	801f024 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801ef76:	45b9      	cmp	r9, r7
 801ef78:	dd54      	ble.n	801f024 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801ef7a:	f1bc 0f00 	cmp.w	ip, #0
 801ef7e:	db4d      	blt.n	801f01c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801ef80:	4563      	cmp	r3, ip
 801ef82:	dd4b      	ble.n	801f01c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801ef84:	f812 200e 	ldrb.w	r2, [r2, lr]
 801ef88:	9200      	str	r2, [sp, #0]
 801ef8a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801ef8e:	9201      	str	r2, [sp, #4]
 801ef90:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801ef94:	9202      	str	r2, [sp, #8]
 801ef96:	f11c 0201 	adds.w	r2, ip, #1
 801ef9a:	d44a      	bmi.n	801f032 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801ef9c:	4293      	cmp	r3, r2
 801ef9e:	dd48      	ble.n	801f032 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801efa0:	2800      	cmp	r0, #0
 801efa2:	d046      	beq.n	801f032 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801efa4:	f89b e003 	ldrb.w	lr, [fp, #3]
 801efa8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801efac:	f89b a005 	ldrb.w	sl, [fp, #5]
 801efb0:	3701      	adds	r7, #1
 801efb2:	d446      	bmi.n	801f042 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801efb4:	45b9      	cmp	r9, r7
 801efb6:	dd44      	ble.n	801f042 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801efb8:	9a03      	ldr	r2, [sp, #12]
 801efba:	2a00      	cmp	r2, #0
 801efbc:	d045      	beq.n	801f04a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801efbe:	f1bc 0f00 	cmp.w	ip, #0
 801efc2:	db3a      	blt.n	801f03a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801efc4:	4563      	cmp	r3, ip
 801efc6:	dd38      	ble.n	801f03a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801efc8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801efcc:	f04f 0903 	mov.w	r9, #3
 801efd0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801efd4:	fb03 b209 	mla	r2, r3, r9, fp
 801efd8:	fb03 b909 	mla	r9, r3, r9, fp
 801efdc:	7852      	ldrb	r2, [r2, #1]
 801efde:	f899 9002 	ldrb.w	r9, [r9, #2]
 801efe2:	f11c 0c01 	adds.w	ip, ip, #1
 801efe6:	d40d      	bmi.n	801f004 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801efe8:	4563      	cmp	r3, ip
 801efea:	dd0b      	ble.n	801f004 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801efec:	b160      	cbz	r0, 801f008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801efee:	2603      	movs	r6, #3
 801eff0:	fb13 6406 	smlabb	r4, r3, r6, r6
 801eff4:	fb03 b506 	mla	r5, r3, r6, fp
 801eff8:	fb03 b306 	mla	r3, r3, r6, fp
 801effc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801f000:	792d      	ldrb	r5, [r5, #4]
 801f002:	795e      	ldrb	r6, [r3, #5]
 801f004:	280f      	cmp	r0, #15
 801f006:	d802      	bhi.n	801f00e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801f008:	9b03      	ldr	r3, [sp, #12]
 801f00a:	2b0f      	cmp	r3, #15
 801f00c:	d922      	bls.n	801f054 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801f00e:	4b2f      	ldr	r3, [pc, #188]	; (801f0cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801f010:	f240 1157 	movw	r1, #343	; 0x157
 801f014:	4a2e      	ldr	r2, [pc, #184]	; (801f0d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801f016:	482f      	ldr	r0, [pc, #188]	; (801f0d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801f018:	f004 f8f4 	bl	8023204 <__assert_func>
 801f01c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f020:	9400      	str	r4, [sp, #0]
 801f022:	e7b8      	b.n	801ef96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801f024:	46b2      	mov	sl, r6
 801f026:	46a8      	mov	r8, r5
 801f028:	46a6      	mov	lr, r4
 801f02a:	9400      	str	r4, [sp, #0]
 801f02c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f030:	e7be      	b.n	801efb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801f032:	46b2      	mov	sl, r6
 801f034:	46a8      	mov	r8, r5
 801f036:	46a6      	mov	lr, r4
 801f038:	e7ba      	b.n	801efb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801f03a:	46b1      	mov	r9, r6
 801f03c:	462a      	mov	r2, r5
 801f03e:	4627      	mov	r7, r4
 801f040:	e7cf      	b.n	801efe2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f042:	46b1      	mov	r9, r6
 801f044:	462a      	mov	r2, r5
 801f046:	4627      	mov	r7, r4
 801f048:	e7dc      	b.n	801f004 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f04a:	280f      	cmp	r0, #15
 801f04c:	d8df      	bhi.n	801f00e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801f04e:	46b1      	mov	r9, r6
 801f050:	462a      	mov	r2, r5
 801f052:	4627      	mov	r7, r4
 801f054:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801f058:	b280      	uxth	r0, r0
 801f05a:	fb00 f30b 	mul.w	r3, r0, fp
 801f05e:	0100      	lsls	r0, r0, #4
 801f060:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801f064:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801f068:	1ac0      	subs	r0, r0, r3
 801f06a:	fa1f fb8b 	uxth.w	fp, fp
 801f06e:	b280      	uxth	r0, r0
 801f070:	ebac 0c0b 	sub.w	ip, ip, fp
 801f074:	9003      	str	r0, [sp, #12]
 801f076:	fa1f fc8c 	uxth.w	ip, ip
 801f07a:	fb00 fe0e 	mul.w	lr, r0, lr
 801f07e:	9800      	ldr	r0, [sp, #0]
 801f080:	fb0c ee00 	mla	lr, ip, r0, lr
 801f084:	9803      	ldr	r0, [sp, #12]
 801f086:	fb00 f808 	mul.w	r8, r0, r8
 801f08a:	9801      	ldr	r0, [sp, #4]
 801f08c:	fb0b ee07 	mla	lr, fp, r7, lr
 801f090:	fb0c 8800 	mla	r8, ip, r0, r8
 801f094:	fb03 ee04 	mla	lr, r3, r4, lr
 801f098:	fb0b 8202 	mla	r2, fp, r2, r8
 801f09c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0a0:	fb03 2505 	mla	r5, r3, r5, r2
 801f0a4:	9a03      	ldr	r2, [sp, #12]
 801f0a6:	f881 e000 	strb.w	lr, [r1]
 801f0aa:	fb02 f00a 	mul.w	r0, r2, sl
 801f0ae:	9a02      	ldr	r2, [sp, #8]
 801f0b0:	122d      	asrs	r5, r5, #8
 801f0b2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f0b6:	704d      	strb	r5, [r1, #1]
 801f0b8:	fb0b c909 	mla	r9, fp, r9, ip
 801f0bc:	fb03 9606 	mla	r6, r3, r6, r9
 801f0c0:	1236      	asrs	r6, r6, #8
 801f0c2:	708e      	strb	r6, [r1, #2]
 801f0c4:	b005      	add	sp, #20
 801f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ca:	bf00      	nop
 801f0cc:	08027e53 	.word	0x08027e53
 801f0d0:	080283bb 	.word	0x080283bb
 801f0d4:	08027f1c 	.word	0x08027f1c

0801f0d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0dc:	ed2d 8b08 	vpush	{d8-d11}
 801f0e0:	b09b      	sub	sp, #108	; 0x6c
 801f0e2:	eeb0 aa40 	vmov.f32	s20, s0
 801f0e6:	eef0 9a60 	vmov.f32	s19, s1
 801f0ea:	920b      	str	r2, [sp, #44]	; 0x2c
 801f0ec:	eeb0 9a41 	vmov.f32	s18, s2
 801f0f0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f0f2:	eeb0 8a62 	vmov.f32	s16, s5
 801f0f6:	9019      	str	r0, [sp, #100]	; 0x64
 801f0f8:	eef0 8a43 	vmov.f32	s17, s6
 801f0fc:	6850      	ldr	r0, [r2, #4]
 801f0fe:	eef0 ba44 	vmov.f32	s23, s8
 801f102:	9109      	str	r1, [sp, #36]	; 0x24
 801f104:	eeb0 ba64 	vmov.f32	s22, s9
 801f108:	9306      	str	r3, [sp, #24]
 801f10a:	eef0 aa45 	vmov.f32	s21, s10
 801f10e:	6812      	ldr	r2, [r2, #0]
 801f110:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f114:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 801f118:	fb00 1303 	mla	r3, r0, r3, r1
 801f11c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f120:	18d3      	adds	r3, r2, r3
 801f122:	9307      	str	r3, [sp, #28]
 801f124:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	9308      	str	r3, [sp, #32]
 801f12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	dc03      	bgt.n	801f138 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f132:	2b00      	cmp	r3, #0
 801f134:	f340 81ab 	ble.w	801f48e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801f138:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f13a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f13e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f142:	1e48      	subs	r0, r1, #1
 801f144:	1e55      	subs	r5, r2, #1
 801f146:	9b06      	ldr	r3, [sp, #24]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	f340 80b1 	ble.w	801f2b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801f14e:	ea5f 462b 	movs.w	r6, fp, asr #16
 801f152:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f156:	d406      	bmi.n	801f166 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f158:	4286      	cmp	r6, r0
 801f15a:	da04      	bge.n	801f166 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	db02      	blt.n	801f166 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f160:	42ab      	cmp	r3, r5
 801f162:	f2c0 80a6 	blt.w	801f2b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f166:	3601      	adds	r6, #1
 801f168:	f100 8097 	bmi.w	801f29a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f16c:	42b1      	cmp	r1, r6
 801f16e:	f2c0 8094 	blt.w	801f29a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f172:	3301      	adds	r3, #1
 801f174:	f100 8091 	bmi.w	801f29a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f178:	429a      	cmp	r2, r3
 801f17a:	f2c0 808e 	blt.w	801f29a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f17e:	9b06      	ldr	r3, [sp, #24]
 801f180:	9e07      	ldr	r6, [sp, #28]
 801f182:	930a      	str	r3, [sp, #40]	; 0x28
 801f184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f186:	2b00      	cmp	r3, #0
 801f188:	f340 80b0 	ble.w	801f2ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f18c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801f18e:	1425      	asrs	r5, r4, #16
 801f190:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f192:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f196:	68c7      	ldr	r7, [r0, #12]
 801f198:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f19c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f1a0:	689b      	ldr	r3, [r3, #8]
 801f1a2:	f100 80ea 	bmi.w	801f37a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f1a6:	f103 3cff 	add.w	ip, r3, #4294967295
 801f1aa:	4560      	cmp	r0, ip
 801f1ac:	f280 80e5 	bge.w	801f37a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f1b0:	2d00      	cmp	r5, #0
 801f1b2:	f2c0 80e2 	blt.w	801f37a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f1b6:	f107 3cff 	add.w	ip, r7, #4294967295
 801f1ba:	4565      	cmp	r5, ip
 801f1bc:	f280 80dd 	bge.w	801f37a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f1c0:	b21b      	sxth	r3, r3
 801f1c2:	fb05 0003 	mla	r0, r5, r3, r0
 801f1c6:	9d08      	ldr	r5, [sp, #32]
 801f1c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1cc:	182f      	adds	r7, r5, r0
 801f1ce:	5c2d      	ldrb	r5, [r5, r0]
 801f1d0:	7878      	ldrb	r0, [r7, #1]
 801f1d2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f1d6:	900c      	str	r0, [sp, #48]	; 0x30
 801f1d8:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f1dc:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f1e0:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f1e4:	b1c9      	cbz	r1, 801f21a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f1e6:	f04f 0c03 	mov.w	ip, #3
 801f1ea:	f06f 0004 	mvn.w	r0, #4
 801f1ee:	3705      	adds	r7, #5
 801f1f0:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f1f4:	eb07 0c03 	add.w	ip, r7, r3
 801f1f8:	5cfb      	ldrb	r3, [r7, r3]
 801f1fa:	930d      	str	r3, [sp, #52]	; 0x34
 801f1fc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f200:	930f      	str	r3, [sp, #60]	; 0x3c
 801f202:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f206:	9311      	str	r3, [sp, #68]	; 0x44
 801f208:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f20c:	930e      	str	r3, [sp, #56]	; 0x38
 801f20e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f212:	9310      	str	r3, [sp, #64]	; 0x40
 801f214:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f218:	9312      	str	r3, [sp, #72]	; 0x48
 801f21a:	b292      	uxth	r2, r2
 801f21c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f21e:	b289      	uxth	r1, r1
 801f220:	fb02 f301 	mul.w	r3, r2, r1
 801f224:	0112      	lsls	r2, r2, #4
 801f226:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f22a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801f22e:	1ad2      	subs	r2, r2, r3
 801f230:	b289      	uxth	r1, r1
 801f232:	b292      	uxth	r2, r2
 801f234:	1a7f      	subs	r7, r7, r1
 801f236:	fb02 f909 	mul.w	r9, r2, r9
 801f23a:	b2bf      	uxth	r7, r7
 801f23c:	fb02 f808 	mul.w	r8, r2, r8
 801f240:	fb02 fa0a 	mul.w	sl, r2, sl
 801f244:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f246:	fb07 9905 	mla	r9, r7, r5, r9
 801f24a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f24c:	fb07 8800 	mla	r8, r7, r0, r8
 801f250:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f252:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f256:	fb01 9905 	mla	r9, r1, r5, r9
 801f25a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f25c:	fb01 8800 	mla	r8, r1, r0, r8
 801f260:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f262:	fb01 a102 	mla	r1, r1, r2, sl
 801f266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f268:	fb03 9905 	mla	r9, r3, r5, r9
 801f26c:	fb03 8800 	mla	r8, r3, r0, r8
 801f270:	fb03 1302 	mla	r3, r3, r2, r1
 801f274:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f278:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f27c:	121b      	asrs	r3, r3, #8
 801f27e:	f886 9000 	strb.w	r9, [r6]
 801f282:	f886 8001 	strb.w	r8, [r6, #1]
 801f286:	70b3      	strb	r3, [r6, #2]
 801f288:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801f28a:	3603      	adds	r6, #3
 801f28c:	449b      	add	fp, r3
 801f28e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f290:	441c      	add	r4, r3
 801f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f294:	3b01      	subs	r3, #1
 801f296:	930a      	str	r3, [sp, #40]	; 0x28
 801f298:	e774      	b.n	801f184 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801f29a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801f29c:	449b      	add	fp, r3
 801f29e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f2a0:	441c      	add	r4, r3
 801f2a2:	9b06      	ldr	r3, [sp, #24]
 801f2a4:	3b01      	subs	r3, #1
 801f2a6:	9306      	str	r3, [sp, #24]
 801f2a8:	9b07      	ldr	r3, [sp, #28]
 801f2aa:	3303      	adds	r3, #3
 801f2ac:	9307      	str	r3, [sp, #28]
 801f2ae:	e74a      	b.n	801f146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f2b0:	d024      	beq.n	801f2fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f2b2:	9b06      	ldr	r3, [sp, #24]
 801f2b4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801f2b6:	3b01      	subs	r3, #1
 801f2b8:	fb00 b003 	mla	r0, r0, r3, fp
 801f2bc:	1400      	asrs	r0, r0, #16
 801f2be:	f53f af5e 	bmi.w	801f17e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f2c2:	3901      	subs	r1, #1
 801f2c4:	4288      	cmp	r0, r1
 801f2c6:	f6bf af5a 	bge.w	801f17e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f2ca:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801f2cc:	fb01 4303 	mla	r3, r1, r3, r4
 801f2d0:	141b      	asrs	r3, r3, #16
 801f2d2:	f53f af54 	bmi.w	801f17e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f2d6:	3a01      	subs	r2, #1
 801f2d8:	4293      	cmp	r3, r2
 801f2da:	f6bf af50 	bge.w	801f17e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f2de:	9b07      	ldr	r3, [sp, #28]
 801f2e0:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f2e4:	1cde      	adds	r6, r3, #3
 801f2e6:	f1be 0f00 	cmp.w	lr, #0
 801f2ea:	dc5f      	bgt.n	801f3ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801f2ec:	9b06      	ldr	r3, [sp, #24]
 801f2ee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f2f2:	9b07      	ldr	r3, [sp, #28]
 801f2f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f2f8:	4423      	add	r3, r4
 801f2fa:	9307      	str	r3, [sp, #28]
 801f2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	f340 80c5 	ble.w	801f48e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801f304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f308:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f30a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f30e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f312:	eef0 6a48 	vmov.f32	s13, s16
 801f316:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f31a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f31e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f322:	ee16 ba90 	vmov	fp, s13
 801f326:	eef0 6a68 	vmov.f32	s13, s17
 801f32a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f32e:	ee16 4a90 	vmov	r4, s13
 801f332:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f336:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f33a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f33e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f342:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f346:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f34a:	ee18 2a10 	vmov	r2, s16
 801f34e:	eeb0 8a47 	vmov.f32	s16, s14
 801f352:	fb92 f3f3 	sdiv	r3, r2, r3
 801f356:	ee18 2a90 	vmov	r2, s17
 801f35a:	932f      	str	r3, [sp, #188]	; 0xbc
 801f35c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f35e:	eef0 8a67 	vmov.f32	s17, s15
 801f362:	fb92 f3f3 	sdiv	r3, r2, r3
 801f366:	9330      	str	r3, [sp, #192]	; 0xc0
 801f368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f36a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f36c:	3b01      	subs	r3, #1
 801f36e:	9309      	str	r3, [sp, #36]	; 0x24
 801f370:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f372:	bf08      	it	eq
 801f374:	4613      	moveq	r3, r2
 801f376:	9306      	str	r3, [sp, #24]
 801f378:	e6d7      	b.n	801f12a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f37a:	f110 0c01 	adds.w	ip, r0, #1
 801f37e:	d483      	bmi.n	801f288 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801f380:	4563      	cmp	r3, ip
 801f382:	db81      	blt.n	801f288 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801f384:	f115 0c01 	adds.w	ip, r5, #1
 801f388:	f53f af7e 	bmi.w	801f288 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801f38c:	4567      	cmp	r7, ip
 801f38e:	f6ff af7b 	blt.w	801f288 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801f392:	b23f      	sxth	r7, r7
 801f394:	b21b      	sxth	r3, r3
 801f396:	9700      	str	r7, [sp, #0]
 801f398:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f39c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f3a0:	9a08      	ldr	r2, [sp, #32]
 801f3a2:	4631      	mov	r1, r6
 801f3a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f3a6:	f7ff fdcf 	bl	801ef48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f3aa:	e76d      	b.n	801f288 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801f3ac:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801f3ae:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f3b2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f3b6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f3ba:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f3be:	1421      	asrs	r1, r4, #16
 801f3c0:	930a      	str	r3, [sp, #40]	; 0x28
 801f3c2:	fb0c 0101 	mla	r1, ip, r1, r0
 801f3c6:	9808      	ldr	r0, [sp, #32]
 801f3c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f3cc:	1845      	adds	r5, r0, r1
 801f3ce:	5c40      	ldrb	r0, [r0, r1]
 801f3d0:	796f      	ldrb	r7, [r5, #5]
 801f3d2:	7869      	ldrb	r1, [r5, #1]
 801f3d4:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f3d8:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f3dc:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f3e0:	970c      	str	r7, [sp, #48]	; 0x30
 801f3e2:	b1a2      	cbz	r2, 801f40e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 801f3e4:	2703      	movs	r7, #3
 801f3e6:	f06f 0304 	mvn.w	r3, #4
 801f3ea:	3505      	adds	r5, #5
 801f3ec:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f3f0:	eb05 070c 	add.w	r7, r5, ip
 801f3f4:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f3f8:	9513      	str	r5, [sp, #76]	; 0x4c
 801f3fa:	787d      	ldrb	r5, [r7, #1]
 801f3fc:	9515      	str	r5, [sp, #84]	; 0x54
 801f3fe:	78bd      	ldrb	r5, [r7, #2]
 801f400:	9517      	str	r5, [sp, #92]	; 0x5c
 801f402:	78fd      	ldrb	r5, [r7, #3]
 801f404:	9514      	str	r5, [sp, #80]	; 0x50
 801f406:	793d      	ldrb	r5, [r7, #4]
 801f408:	9516      	str	r5, [sp, #88]	; 0x58
 801f40a:	797d      	ldrb	r5, [r7, #5]
 801f40c:	9518      	str	r5, [sp, #96]	; 0x60
 801f40e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f412:	b292      	uxth	r2, r2
 801f414:	3603      	adds	r6, #3
 801f416:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f41a:	fb03 f502 	mul.w	r5, r3, r2
 801f41e:	011b      	lsls	r3, r3, #4
 801f420:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f424:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f428:	1b5b      	subs	r3, r3, r5
 801f42a:	b292      	uxth	r2, r2
 801f42c:	b29b      	uxth	r3, r3
 801f42e:	1abf      	subs	r7, r7, r2
 801f430:	fb03 f909 	mul.w	r9, r3, r9
 801f434:	b2bf      	uxth	r7, r7
 801f436:	fb03 fa0a 	mul.w	sl, r3, sl
 801f43a:	fb07 9901 	mla	r9, r7, r1, r9
 801f43e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f440:	fb07 aa00 	mla	sl, r7, r0, sl
 801f444:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f446:	fb02 9901 	mla	r9, r2, r1, r9
 801f44a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f44c:	fb02 aa00 	mla	sl, r2, r0, sl
 801f450:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f452:	fb05 9901 	mla	r9, r5, r1, r9
 801f456:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f458:	fb05 aa00 	mla	sl, r5, r0, sl
 801f45c:	434b      	muls	r3, r1
 801f45e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f460:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f464:	fb07 3308 	mla	r3, r7, r8, r3
 801f468:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f46c:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f470:	fb02 3201 	mla	r2, r2, r1, r3
 801f474:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f476:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f47a:	fb05 2503 	mla	r5, r5, r3, r2
 801f47e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801f480:	122d      	asrs	r5, r5, #8
 801f482:	449b      	add	fp, r3
 801f484:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f486:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f48a:	441c      	add	r4, r3
 801f48c:	e72b      	b.n	801f2e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f48e:	b01b      	add	sp, #108	; 0x6c
 801f490:	ecbd 8b08 	vpop	{d8-d11}
 801f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f498 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f49c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801f4a0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f4a4:	fb04 5603 	mla	r6, r4, r3, r5
 801f4a8:	2c00      	cmp	r4, #0
 801f4aa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801f4ae:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801f4b2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801f4b6:	db36      	blt.n	801f526 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801f4b8:	45a6      	cmp	lr, r4
 801f4ba:	dd34      	ble.n	801f526 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801f4bc:	2d00      	cmp	r5, #0
 801f4be:	db30      	blt.n	801f522 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801f4c0:	42ab      	cmp	r3, r5
 801f4c2:	dd2e      	ble.n	801f522 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801f4c4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801f4c8:	1c6e      	adds	r6, r5, #1
 801f4ca:	d42f      	bmi.n	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801f4cc:	42b3      	cmp	r3, r6
 801f4ce:	dd2d      	ble.n	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801f4d0:	b370      	cbz	r0, 801f530 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 801f4d2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f4d6:	3401      	adds	r4, #1
 801f4d8:	d42e      	bmi.n	801f538 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801f4da:	45a6      	cmp	lr, r4
 801f4dc:	dd2c      	ble.n	801f538 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801f4de:	b377      	cbz	r7, 801f53e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 801f4e0:	2d00      	cmp	r5, #0
 801f4e2:	db27      	blt.n	801f534 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801f4e4:	42ab      	cmp	r3, r5
 801f4e6:	dd25      	ble.n	801f534 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801f4e8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801f4ec:	3501      	adds	r5, #1
 801f4ee:	d429      	bmi.n	801f544 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801f4f0:	42ab      	cmp	r3, r5
 801f4f2:	dd27      	ble.n	801f544 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801f4f4:	b340      	cbz	r0, 801f548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 801f4f6:	3301      	adds	r3, #1
 801f4f8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801f4fc:	280f      	cmp	r0, #15
 801f4fe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f502:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f506:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f50a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801f50e:	d801      	bhi.n	801f514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 801f510:	2f0f      	cmp	r7, #15
 801f512:	d91b      	bls.n	801f54c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 801f514:	4b89      	ldr	r3, [pc, #548]	; (801f73c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801f516:	f240 1157 	movw	r1, #343	; 0x157
 801f51a:	4a89      	ldr	r2, [pc, #548]	; (801f740 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801f51c:	4889      	ldr	r0, [pc, #548]	; (801f744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801f51e:	f003 fe71 	bl	8023204 <__assert_func>
 801f522:	2200      	movs	r2, #0
 801f524:	e7d0      	b.n	801f4c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 801f526:	2600      	movs	r6, #0
 801f528:	4632      	mov	r2, r6
 801f52a:	e7d4      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801f52c:	2600      	movs	r6, #0
 801f52e:	e7d2      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801f530:	4606      	mov	r6, r0
 801f532:	e7d0      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801f534:	2400      	movs	r4, #0
 801f536:	e7d9      	b.n	801f4ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 801f538:	2300      	movs	r3, #0
 801f53a:	461c      	mov	r4, r3
 801f53c:	e7de      	b.n	801f4fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801f53e:	463b      	mov	r3, r7
 801f540:	463c      	mov	r4, r7
 801f542:	e7db      	b.n	801f4fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801f544:	2300      	movs	r3, #0
 801f546:	e7d9      	b.n	801f4fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801f548:	4603      	mov	r3, r0
 801f54a:	e7d7      	b.n	801f4fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801f54c:	b280      	uxth	r0, r0
 801f54e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f552:	b2bf      	uxth	r7, r7
 801f554:	fb00 fe07 	mul.w	lr, r0, r7
 801f558:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801f55c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f560:	eba0 0c0e 	sub.w	ip, r0, lr
 801f564:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801f568:	b2bf      	uxth	r7, r7
 801f56a:	fa1f fc8c 	uxth.w	ip, ip
 801f56e:	eba5 0507 	sub.w	r5, r5, r7
 801f572:	fb0c f00a 	mul.w	r0, ip, sl
 801f576:	b2ad      	uxth	r5, r5
 801f578:	fb05 000b 	mla	r0, r5, fp, r0
 801f57c:	fb07 0009 	mla	r0, r7, r9, r0
 801f580:	fb0e 0008 	mla	r0, lr, r8, r0
 801f584:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f588:	9001      	str	r0, [sp, #4]
 801f58a:	d018      	beq.n	801f5be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 801f58c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801f590:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f594:	fb0b f000 	mul.w	r0, fp, r0
 801f598:	fb0b fb02 	mul.w	fp, fp, r2
 801f59c:	0a02      	lsrs	r2, r0, #8
 801f59e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801f5a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f5a6:	4402      	add	r2, r0
 801f5a8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801f5ac:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801f5b0:	0a12      	lsrs	r2, r2, #8
 801f5b2:	0a00      	lsrs	r0, r0, #8
 801f5b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f5b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f5bc:	4302      	orrs	r2, r0
 801f5be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f5c2:	d01a      	beq.n	801f5fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 801f5c4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801f5c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f5cc:	fb0a f000 	mul.w	r0, sl, r0
 801f5d0:	fb0a fa06 	mul.w	sl, sl, r6
 801f5d4:	0a06      	lsrs	r6, r0, #8
 801f5d6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801f5da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5de:	4406      	add	r6, r0
 801f5e0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f5e4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f5e8:	0a36      	lsrs	r6, r6, #8
 801f5ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f5ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f5f6:	ea46 060a 	orr.w	r6, r6, sl
 801f5fa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f5fe:	d01b      	beq.n	801f638 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 801f600:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f604:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f608:	fb09 fa0a 	mul.w	sl, r9, sl
 801f60c:	fb09 f004 	mul.w	r0, r9, r4
 801f610:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f614:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f618:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801f61c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f620:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801f624:	4454      	add	r4, sl
 801f626:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f62a:	0a24      	lsrs	r4, r4, #8
 801f62c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f630:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f634:	ea44 0409 	orr.w	r4, r4, r9
 801f638:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f63c:	d01b      	beq.n	801f676 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 801f63e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801f642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f646:	fb08 f909 	mul.w	r9, r8, r9
 801f64a:	fb08 f003 	mul.w	r0, r8, r3
 801f64e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801f652:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f656:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801f65a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f65e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801f662:	444b      	add	r3, r9
 801f664:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f668:	0a1b      	lsrs	r3, r3, #8
 801f66a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f66e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f672:	ea43 0308 	orr.w	r3, r3, r8
 801f676:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801f67a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f67e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801f682:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f686:	fb0c f000 	mul.w	r0, ip, r0
 801f68a:	fb0c f606 	mul.w	r6, ip, r6
 801f68e:	fb05 0808 	mla	r8, r5, r8, r0
 801f692:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801f696:	fb05 6502 	mla	r5, r5, r2, r6
 801f69a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f69e:	fb07 8800 	mla	r8, r7, r0, r8
 801f6a2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801f6a6:	fb07 5704 	mla	r7, r7, r4, r5
 801f6aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6ae:	fb0e 8000 	mla	r0, lr, r0, r8
 801f6b2:	fb0e 7e03 	mla	lr, lr, r3, r7
 801f6b6:	9b01      	ldr	r3, [sp, #4]
 801f6b8:	0a00      	lsrs	r0, r0, #8
 801f6ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6be:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f6c2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f6c6:	ea40 0e0e 	orr.w	lr, r0, lr
 801f6ca:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f6ce:	b280      	uxth	r0, r0
 801f6d0:	fa5f f48e 	uxtb.w	r4, lr
 801f6d4:	4343      	muls	r3, r0
 801f6d6:	fb14 f400 	smulbb	r4, r4, r0
 801f6da:	1c5a      	adds	r2, r3, #1
 801f6dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f6e0:	780b      	ldrb	r3, [r1, #0]
 801f6e2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801f6e6:	b2d2      	uxtb	r2, r2
 801f6e8:	fb03 4302 	mla	r3, r3, r2, r4
 801f6ec:	b29b      	uxth	r3, r3
 801f6ee:	1c5c      	adds	r4, r3, #1
 801f6f0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f6f4:	784c      	ldrb	r4, [r1, #1]
 801f6f6:	fb14 f402 	smulbb	r4, r4, r2
 801f6fa:	121b      	asrs	r3, r3, #8
 801f6fc:	700b      	strb	r3, [r1, #0]
 801f6fe:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801f702:	fb03 4300 	mla	r3, r3, r0, r4
 801f706:	b29b      	uxth	r3, r3
 801f708:	1c5c      	adds	r4, r3, #1
 801f70a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f70e:	121b      	asrs	r3, r3, #8
 801f710:	704b      	strb	r3, [r1, #1]
 801f712:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801f716:	f891 e002 	ldrb.w	lr, [r1, #2]
 801f71a:	fb1e fe02 	smulbb	lr, lr, r2
 801f71e:	fb03 ee00 	mla	lr, r3, r0, lr
 801f722:	fa1f fe8e 	uxth.w	lr, lr
 801f726:	f10e 0301 	add.w	r3, lr, #1
 801f72a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f72e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f732:	f881 e002 	strb.w	lr, [r1, #2]
 801f736:	b003      	add	sp, #12
 801f738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f73c:	08027e53 	.word	0x08027e53
 801f740:	080283bb 	.word	0x080283bb
 801f744:	08027f1c 	.word	0x08027f1c

0801f748 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f74c:	ed2d 8b08 	vpush	{d8-d11}
 801f750:	b09d      	sub	sp, #116	; 0x74
 801f752:	eeb0 aa40 	vmov.f32	s20, s0
 801f756:	eef0 9a60 	vmov.f32	s19, s1
 801f75a:	9219      	str	r2, [sp, #100]	; 0x64
 801f75c:	eeb0 9a41 	vmov.f32	s18, s2
 801f760:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801f762:	eeb0 8a62 	vmov.f32	s16, s5
 801f766:	9307      	str	r3, [sp, #28]
 801f768:	eef0 8a43 	vmov.f32	s17, s6
 801f76c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f770:	eef0 ba44 	vmov.f32	s23, s8
 801f774:	901b      	str	r0, [sp, #108]	; 0x6c
 801f776:	eeb0 ba64 	vmov.f32	s22, s9
 801f77a:	931a      	str	r3, [sp, #104]	; 0x68
 801f77c:	eef0 aa45 	vmov.f32	s21, s10
 801f780:	6850      	ldr	r0, [r2, #4]
 801f782:	9117      	str	r1, [sp, #92]	; 0x5c
 801f784:	6812      	ldr	r2, [r2, #0]
 801f786:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801f78a:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801f78e:	fb00 1303 	mla	r3, r0, r3, r1
 801f792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f796:	18d3      	adds	r3, r2, r3
 801f798:	930a      	str	r3, [sp, #40]	; 0x28
 801f79a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	9310      	str	r3, [sp, #64]	; 0x40
 801f7a0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f7a4:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	dc03      	bgt.n	801f7b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f7ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	f340 8368 	ble.w	801fe84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f7b4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f7b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7be:	1e48      	subs	r0, r1, #1
 801f7c0:	1e57      	subs	r7, r2, #1
 801f7c2:	9b07      	ldr	r3, [sp, #28]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	f340 8187 	ble.w	801fad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f7ca:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f7ce:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f7d2:	d406      	bmi.n	801f7e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f7d4:	4584      	cmp	ip, r0
 801f7d6:	da04      	bge.n	801f7e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	db02      	blt.n	801f7e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f7dc:	42bb      	cmp	r3, r7
 801f7de:	f2c0 817c 	blt.w	801fada <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f7e2:	f11c 0c01 	adds.w	ip, ip, #1
 801f7e6:	f100 816c 	bmi.w	801fac2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f7ea:	4561      	cmp	r1, ip
 801f7ec:	f2c0 8169 	blt.w	801fac2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f7f0:	3301      	adds	r3, #1
 801f7f2:	f100 8166 	bmi.w	801fac2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f7f6:	429a      	cmp	r2, r3
 801f7f8:	f2c0 8163 	blt.w	801fac2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f7fc:	9b07      	ldr	r3, [sp, #28]
 801f7fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f800:	9318      	str	r3, [sp, #96]	; 0x60
 801f802:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f804:	2b00      	cmp	r3, #0
 801f806:	f340 8186 	ble.w	801fb16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801f80a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f80c:	142a      	asrs	r2, r5, #16
 801f80e:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f812:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f816:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f81a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f81e:	f100 81cb 	bmi.w	801fbb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801f822:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f826:	4542      	cmp	r2, r8
 801f828:	f280 81c6 	bge.w	801fbb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801f82c:	2800      	cmp	r0, #0
 801f82e:	f2c0 81c3 	blt.w	801fbb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801f832:	f103 38ff 	add.w	r8, r3, #4294967295
 801f836:	4540      	cmp	r0, r8
 801f838:	f280 81be 	bge.w	801fbb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801f83c:	fa0f f38e 	sxth.w	r3, lr
 801f840:	fb00 2203 	mla	r2, r0, r3, r2
 801f844:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f846:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801f84a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f84e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f852:	2900      	cmp	r1, #0
 801f854:	f000 81a6 	beq.w	801fba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801f858:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f85c:	900c      	str	r0, [sp, #48]	; 0x30
 801f85e:	0e00      	lsrs	r0, r0, #24
 801f860:	9013      	str	r0, [sp, #76]	; 0x4c
 801f862:	f1bc 0f00 	cmp.w	ip, #0
 801f866:	d00f      	beq.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801f868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f86c:	3b01      	subs	r3, #1
 801f86e:	009b      	lsls	r3, r3, #2
 801f870:	3304      	adds	r3, #4
 801f872:	eb08 0003 	add.w	r0, r8, r3
 801f876:	f858 3003 	ldr.w	r3, [r8, r3]
 801f87a:	9308      	str	r3, [sp, #32]
 801f87c:	0e1b      	lsrs	r3, r3, #24
 801f87e:	9311      	str	r3, [sp, #68]	; 0x44
 801f880:	6843      	ldr	r3, [r0, #4]
 801f882:	930d      	str	r3, [sp, #52]	; 0x34
 801f884:	0e1b      	lsrs	r3, r3, #24
 801f886:	9314      	str	r3, [sp, #80]	; 0x50
 801f888:	b289      	uxth	r1, r1
 801f88a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f88c:	fa1f fc8c 	uxth.w	ip, ip
 801f890:	0108      	lsls	r0, r1, #4
 801f892:	fb01 f90c 	mul.w	r9, r1, ip
 801f896:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f89a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801f89e:	eba0 0809 	sub.w	r8, r0, r9
 801f8a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f8a4:	fa1f f18c 	uxth.w	r1, ip
 801f8a8:	fa1f f888 	uxth.w	r8, r8
 801f8ac:	1a5b      	subs	r3, r3, r1
 801f8ae:	fb08 f000 	mul.w	r0, r8, r0
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	fb03 000e 	mla	r0, r3, lr, r0
 801f8b8:	fb01 0004 	mla	r0, r1, r4, r0
 801f8bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f8be:	fb09 0004 	mla	r0, r9, r4, r0
 801f8c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f8c6:	2800      	cmp	r0, #0
 801f8c8:	f000 80f2 	beq.w	801fab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801f8cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f8d0:	d01b      	beq.n	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f8d2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801f8d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f8da:	fb0e fa0a 	mul.w	sl, lr, sl
 801f8de:	fb0e fe02 	mul.w	lr, lr, r2
 801f8e2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f8e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f8ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f8ee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f8f2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f8f6:	4452      	add	r2, sl
 801f8f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8fc:	0a12      	lsrs	r2, r2, #8
 801f8fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f902:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f906:	ea42 020c 	orr.w	r2, r2, ip
 801f90a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f90c:	2cff      	cmp	r4, #255	; 0xff
 801f90e:	d021      	beq.n	801f954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f910:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f912:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f916:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f918:	fb04 fb0b 	mul.w	fp, r4, fp
 801f91c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f91e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f922:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f924:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f928:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f92c:	fb04 fa0a 	mul.w	sl, r4, sl
 801f930:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f934:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f938:	44de      	add	lr, fp
 801f93a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f93e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f942:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f94a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f94e:	ea4e 040a 	orr.w	r4, lr, sl
 801f952:	940c      	str	r4, [sp, #48]	; 0x30
 801f954:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f956:	2cff      	cmp	r4, #255	; 0xff
 801f958:	d021      	beq.n	801f99e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801f95a:	9c08      	ldr	r4, [sp, #32]
 801f95c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f960:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f962:	fb04 fb0b 	mul.w	fp, r4, fp
 801f966:	9c08      	ldr	r4, [sp, #32]
 801f968:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f96c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f96e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f972:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f976:	fb04 fa0a 	mul.w	sl, r4, sl
 801f97a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f97e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f982:	44de      	add	lr, fp
 801f984:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f988:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f98c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f990:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f994:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f998:	ea4e 040a 	orr.w	r4, lr, sl
 801f99c:	9408      	str	r4, [sp, #32]
 801f99e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9a0:	2cff      	cmp	r4, #255	; 0xff
 801f9a2:	d021      	beq.n	801f9e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f9a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f9a6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f9aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9ac:	fb04 fb0b 	mul.w	fp, r4, fp
 801f9b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f9b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f9b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f9bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f9c0:	fb04 fa0a 	mul.w	sl, r4, sl
 801f9c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f9c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f9cc:	44de      	add	lr, fp
 801f9ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f9d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f9da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f9de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f9e2:	ea4e 040a 	orr.w	r4, lr, sl
 801f9e6:	940d      	str	r4, [sp, #52]	; 0x34
 801f9e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f9ea:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f9ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f9f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f9f6:	9c08      	ldr	r4, [sp, #32]
 801f9f8:	fb08 fc0c 	mul.w	ip, r8, ip
 801f9fc:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fa00:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fa04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fa06:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fa0a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fa0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fa10:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fa14:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fa18:	fb08 f80e 	mul.w	r8, r8, lr
 801fa1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa20:	fb03 8202 	mla	r2, r3, r2, r8
 801fa24:	9b08      	ldr	r3, [sp, #32]
 801fa26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa2a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801fa2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa30:	fb01 220a 	mla	r2, r1, sl, r2
 801fa34:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801fa38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa3a:	fb09 2901 	mla	r9, r9, r1, r2
 801fa3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fa40:	4343      	muls	r3, r0
 801fa42:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fa46:	1c58      	adds	r0, r3, #1
 801fa48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fa4c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fa50:	783b      	ldrb	r3, [r7, #0]
 801fa52:	ea4c 0c09 	orr.w	ip, ip, r9
 801fa56:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fa5a:	fa5f f28c 	uxtb.w	r2, ip
 801fa5e:	b2c0      	uxtb	r0, r0
 801fa60:	fb12 f201 	smulbb	r2, r2, r1
 801fa64:	fb03 2300 	mla	r3, r3, r0, r2
 801fa68:	b29b      	uxth	r3, r3
 801fa6a:	1c5a      	adds	r2, r3, #1
 801fa6c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa70:	787a      	ldrb	r2, [r7, #1]
 801fa72:	fb12 f200 	smulbb	r2, r2, r0
 801fa76:	121b      	asrs	r3, r3, #8
 801fa78:	703b      	strb	r3, [r7, #0]
 801fa7a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fa7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fa82:	fb03 2301 	mla	r3, r3, r1, r2
 801fa86:	b29b      	uxth	r3, r3
 801fa88:	1c5a      	adds	r2, r3, #1
 801fa8a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa8e:	121b      	asrs	r3, r3, #8
 801fa90:	707b      	strb	r3, [r7, #1]
 801fa92:	78bb      	ldrb	r3, [r7, #2]
 801fa94:	fb13 f000 	smulbb	r0, r3, r0
 801fa98:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fa9c:	fa1f fc8c 	uxth.w	ip, ip
 801faa0:	f10c 0301 	add.w	r3, ip, #1
 801faa4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801faa8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801faac:	f887 c002 	strb.w	ip, [r7, #2]
 801fab0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801fab2:	3703      	adds	r7, #3
 801fab4:	441d      	add	r5, r3
 801fab6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fab8:	441e      	add	r6, r3
 801faba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fabc:	3b01      	subs	r3, #1
 801fabe:	9318      	str	r3, [sp, #96]	; 0x60
 801fac0:	e69f      	b.n	801f802 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801fac2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801fac4:	441d      	add	r5, r3
 801fac6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fac8:	441e      	add	r6, r3
 801faca:	9b07      	ldr	r3, [sp, #28]
 801facc:	3b01      	subs	r3, #1
 801face:	9307      	str	r3, [sp, #28]
 801fad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fad2:	3303      	adds	r3, #3
 801fad4:	930a      	str	r3, [sp, #40]	; 0x28
 801fad6:	e674      	b.n	801f7c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fad8:	d025      	beq.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801fada:	9b07      	ldr	r3, [sp, #28]
 801fadc:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801fade:	3b01      	subs	r3, #1
 801fae0:	fb00 5003 	mla	r0, r0, r3, r5
 801fae4:	1400      	asrs	r0, r0, #16
 801fae6:	f53f ae89 	bmi.w	801f7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801faea:	3901      	subs	r1, #1
 801faec:	4288      	cmp	r0, r1
 801faee:	f6bf ae85 	bge.w	801f7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801faf2:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801faf4:	fb01 6303 	mla	r3, r1, r3, r6
 801faf8:	141b      	asrs	r3, r3, #16
 801fafa:	f53f ae7f 	bmi.w	801f7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801fafe:	3a01      	subs	r2, #1
 801fb00:	4293      	cmp	r3, r2
 801fb02:	f6bf ae7b 	bge.w	801f7fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801fb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb08:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fb0c:	f103 0e03 	add.w	lr, r3, #3
 801fb10:	f1bb 0f00 	cmp.w	fp, #0
 801fb14:	dc6e      	bgt.n	801fbf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801fb16:	9b07      	ldr	r3, [sp, #28]
 801fb18:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb22:	4423      	add	r3, r4
 801fb24:	930a      	str	r3, [sp, #40]	; 0x28
 801fb26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	f340 81ab 	ble.w	801fe84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801fb2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb34:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fb38:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fb3c:	eef0 6a48 	vmov.f32	s13, s16
 801fb40:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fb44:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fb48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb4c:	ee16 5a90 	vmov	r5, s13
 801fb50:	eef0 6a68 	vmov.f32	s13, s17
 801fb54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb58:	ee16 6a90 	vmov	r6, s13
 801fb5c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fb60:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fb64:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fb68:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fb6c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fb70:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fb74:	ee18 2a10 	vmov	r2, s16
 801fb78:	eeb0 8a47 	vmov.f32	s16, s14
 801fb7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb80:	ee18 2a90 	vmov	r2, s17
 801fb84:	9331      	str	r3, [sp, #196]	; 0xc4
 801fb86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb88:	eef0 8a67 	vmov.f32	s17, s15
 801fb8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb90:	9332      	str	r3, [sp, #200]	; 0xc8
 801fb92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fb96:	3b01      	subs	r3, #1
 801fb98:	9317      	str	r3, [sp, #92]	; 0x5c
 801fb9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb9c:	bf08      	it	eq
 801fb9e:	4613      	moveq	r3, r2
 801fba0:	9307      	str	r3, [sp, #28]
 801fba2:	e600      	b.n	801f7a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fba4:	f1bc 0f00 	cmp.w	ip, #0
 801fba8:	f43f ae6e 	beq.w	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801fbac:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fbb0:	9308      	str	r3, [sp, #32]
 801fbb2:	0e1b      	lsrs	r3, r3, #24
 801fbb4:	9311      	str	r3, [sp, #68]	; 0x44
 801fbb6:	e667      	b.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801fbb8:	f112 0801 	adds.w	r8, r2, #1
 801fbbc:	f53f af78 	bmi.w	801fab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fbc0:	45c6      	cmp	lr, r8
 801fbc2:	f6ff af75 	blt.w	801fab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fbc6:	f110 0801 	adds.w	r8, r0, #1
 801fbca:	f53f af71 	bmi.w	801fab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fbce:	4543      	cmp	r3, r8
 801fbd0:	f6ff af6e 	blt.w	801fab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fbd4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801fbd6:	b21b      	sxth	r3, r3
 801fbd8:	9201      	str	r2, [sp, #4]
 801fbda:	9300      	str	r3, [sp, #0]
 801fbdc:	fa0f f38e 	sxth.w	r3, lr
 801fbe0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fbe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fbe6:	e9cd c404 	strd	ip, r4, [sp, #16]
 801fbea:	4639      	mov	r1, r7
 801fbec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fbee:	f7ff fc53 	bl	801f498 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801fbf2:	e75d      	b.n	801fab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fbf4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801fbf6:	142f      	asrs	r7, r5, #16
 801fbf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fbfa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fbfe:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801fc02:	1433      	asrs	r3, r6, #16
 801fc04:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fc08:	fb02 7303 	mla	r3, r2, r3, r7
 801fc0c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801fc10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fc14:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fc18:	2900      	cmp	r1, #0
 801fc1a:	f000 812a 	beq.w	801fe72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801fc1e:	687c      	ldr	r4, [r7, #4]
 801fc20:	940e      	str	r4, [sp, #56]	; 0x38
 801fc22:	0e24      	lsrs	r4, r4, #24
 801fc24:	9415      	str	r4, [sp, #84]	; 0x54
 801fc26:	b178      	cbz	r0, 801fc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801fc28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801fc2c:	3a01      	subs	r2, #1
 801fc2e:	0092      	lsls	r2, r2, #2
 801fc30:	3204      	adds	r2, #4
 801fc32:	eb07 0802 	add.w	r8, r7, r2
 801fc36:	58ba      	ldr	r2, [r7, r2]
 801fc38:	9209      	str	r2, [sp, #36]	; 0x24
 801fc3a:	0e12      	lsrs	r2, r2, #24
 801fc3c:	9212      	str	r2, [sp, #72]	; 0x48
 801fc3e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fc42:	920f      	str	r2, [sp, #60]	; 0x3c
 801fc44:	0e12      	lsrs	r2, r2, #24
 801fc46:	9216      	str	r2, [sp, #88]	; 0x58
 801fc48:	b289      	uxth	r1, r1
 801fc4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fc4c:	b280      	uxth	r0, r0
 801fc4e:	fb01 f900 	mul.w	r9, r1, r0
 801fc52:	0109      	lsls	r1, r1, #4
 801fc54:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fc58:	eba1 0809 	sub.w	r8, r1, r9
 801fc5c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fc60:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fc62:	b280      	uxth	r0, r0
 801fc64:	fa1f f888 	uxth.w	r8, r8
 801fc68:	1a12      	subs	r2, r2, r0
 801fc6a:	fb08 f101 	mul.w	r1, r8, r1
 801fc6e:	b292      	uxth	r2, r2
 801fc70:	fb02 110c 	mla	r1, r2, ip, r1
 801fc74:	fb00 1104 	mla	r1, r0, r4, r1
 801fc78:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fc7a:	fb09 1104 	mla	r1, r9, r4, r1
 801fc7e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fc82:	2900      	cmp	r1, #0
 801fc84:	f000 80ec 	beq.w	801fe60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801fc88:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fc8c:	d019      	beq.n	801fcc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801fc8e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fc92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc96:	fb0c fa0a 	mul.w	sl, ip, sl
 801fc9a:	fb0c fc03 	mul.w	ip, ip, r3
 801fc9e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fca2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fca6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fcaa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fcae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fcb2:	4453      	add	r3, sl
 801fcb4:	0a3f      	lsrs	r7, r7, #8
 801fcb6:	0a1b      	lsrs	r3, r3, #8
 801fcb8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fcbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fcc0:	433b      	orrs	r3, r7
 801fcc2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fcc4:	2cff      	cmp	r4, #255	; 0xff
 801fcc6:	d020      	beq.n	801fd0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801fcc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fcca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fcce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fcd0:	4367      	muls	r7, r4
 801fcd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fcd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fcd8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fcdc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fcde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fce2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fce6:	fb04 fa0a 	mul.w	sl, r4, sl
 801fcea:	44bc      	add	ip, r7
 801fcec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fcf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcf4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fcf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fcfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd04:	ea4c 040a 	orr.w	r4, ip, sl
 801fd08:	940e      	str	r4, [sp, #56]	; 0x38
 801fd0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd0c:	2cff      	cmp	r4, #255	; 0xff
 801fd0e:	d020      	beq.n	801fd52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801fd10:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fd12:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fd16:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd18:	4367      	muls	r7, r4
 801fd1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fd1c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fd20:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fd24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd26:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd2e:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd32:	44bc      	add	ip, r7
 801fd34:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fd38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd3c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fd40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd4c:	ea4c 040a 	orr.w	r4, ip, sl
 801fd50:	9409      	str	r4, [sp, #36]	; 0x24
 801fd52:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fd54:	2cff      	cmp	r4, #255	; 0xff
 801fd56:	d020      	beq.n	801fd9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801fd58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fd5a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fd5e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fd60:	4367      	muls	r7, r4
 801fd62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fd64:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fd68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fd6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fd6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fd72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd76:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd7a:	44bc      	add	ip, r7
 801fd7c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fd80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fd88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd94:	ea4c 040a 	orr.w	r4, ip, sl
 801fd98:	940f      	str	r4, [sp, #60]	; 0x3c
 801fd9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fd9c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fda0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fda4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fda8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fdaa:	fb08 f707 	mul.w	r7, r8, r7
 801fdae:	fb02 770c 	mla	r7, r2, ip, r7
 801fdb2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fdb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fdb8:	fb00 770c 	mla	r7, r0, ip, r7
 801fdbc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fdc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fdc2:	fb09 770c 	mla	r7, r9, ip, r7
 801fdc6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fdca:	fb08 f80c 	mul.w	r8, r8, ip
 801fdce:	0a3f      	lsrs	r7, r7, #8
 801fdd0:	fb02 8303 	mla	r3, r2, r3, r8
 801fdd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fdd6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fdda:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fdde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fde0:	fb00 330a 	mla	r3, r0, sl, r3
 801fde4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fde8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fdea:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fdee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdf4:	434b      	muls	r3, r1
 801fdf6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fdfa:	1c59      	adds	r1, r3, #1
 801fdfc:	ea47 070c 	orr.w	r7, r7, ip
 801fe00:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fe04:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fe08:	b2fa      	uxtb	r2, r7
 801fe0a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fe0e:	fb12 f200 	smulbb	r2, r2, r0
 801fe12:	b2c9      	uxtb	r1, r1
 801fe14:	fb03 2301 	mla	r3, r3, r1, r2
 801fe18:	b29b      	uxth	r3, r3
 801fe1a:	1c5a      	adds	r2, r3, #1
 801fe1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe20:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fe24:	fb12 f201 	smulbb	r2, r2, r1
 801fe28:	121b      	asrs	r3, r3, #8
 801fe2a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fe2e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fe32:	0c3f      	lsrs	r7, r7, #16
 801fe34:	fb03 2300 	mla	r3, r3, r0, r2
 801fe38:	b29b      	uxth	r3, r3
 801fe3a:	1c5a      	adds	r2, r3, #1
 801fe3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe40:	121b      	asrs	r3, r3, #8
 801fe42:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fe46:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fe4a:	fb13 f101 	smulbb	r1, r3, r1
 801fe4e:	fb07 1700 	mla	r7, r7, r0, r1
 801fe52:	b2bf      	uxth	r7, r7
 801fe54:	1c79      	adds	r1, r7, #1
 801fe56:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fe5a:	123f      	asrs	r7, r7, #8
 801fe5c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fe60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801fe62:	f10e 0e03 	add.w	lr, lr, #3
 801fe66:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fe6a:	441d      	add	r5, r3
 801fe6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fe6e:	441e      	add	r6, r3
 801fe70:	e64e      	b.n	801fb10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801fe72:	2800      	cmp	r0, #0
 801fe74:	f43f aee8 	beq.w	801fc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801fe78:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fe7c:	9209      	str	r2, [sp, #36]	; 0x24
 801fe7e:	0e12      	lsrs	r2, r2, #24
 801fe80:	9212      	str	r2, [sp, #72]	; 0x48
 801fe82:	e6e1      	b.n	801fc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801fe84:	b01d      	add	sp, #116	; 0x74
 801fe86:	ecbd 8b08 	vpop	{d8-d11}
 801fe8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fe90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801fe90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe94:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801fe98:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801fe9c:	fb04 5603 	mla	r6, r4, r3, r5
 801fea0:	2c00      	cmp	r4, #0
 801fea2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801fea6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801feaa:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801feae:	db36      	blt.n	801ff1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801feb0:	45a6      	cmp	lr, r4
 801feb2:	dd34      	ble.n	801ff1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801feb4:	2d00      	cmp	r5, #0
 801feb6:	db30      	blt.n	801ff1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801feb8:	42ab      	cmp	r3, r5
 801feba:	dd2e      	ble.n	801ff1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801febc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801fec0:	1c6e      	adds	r6, r5, #1
 801fec2:	d42f      	bmi.n	801ff24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801fec4:	42b3      	cmp	r3, r6
 801fec6:	dd2d      	ble.n	801ff24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801fec8:	b370      	cbz	r0, 801ff28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801feca:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801fece:	3401      	adds	r4, #1
 801fed0:	d42e      	bmi.n	801ff30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801fed2:	45a6      	cmp	lr, r4
 801fed4:	dd2c      	ble.n	801ff30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801fed6:	b377      	cbz	r7, 801ff36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801fed8:	2d00      	cmp	r5, #0
 801feda:	db27      	blt.n	801ff2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801fedc:	42ab      	cmp	r3, r5
 801fede:	dd25      	ble.n	801ff2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801fee0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801fee4:	3501      	adds	r5, #1
 801fee6:	d429      	bmi.n	801ff3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801fee8:	42ab      	cmp	r3, r5
 801feea:	dd27      	ble.n	801ff3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801feec:	b340      	cbz	r0, 801ff40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801feee:	3301      	adds	r3, #1
 801fef0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801fef4:	280f      	cmp	r0, #15
 801fef6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fefa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fefe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ff02:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801ff06:	d801      	bhi.n	801ff0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801ff08:	2f0f      	cmp	r7, #15
 801ff0a:	d91b      	bls.n	801ff44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801ff0c:	4b7e      	ldr	r3, [pc, #504]	; (8020108 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801ff0e:	f240 1157 	movw	r1, #343	; 0x157
 801ff12:	4a7e      	ldr	r2, [pc, #504]	; (802010c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801ff14:	487e      	ldr	r0, [pc, #504]	; (8020110 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801ff16:	f003 f975 	bl	8023204 <__assert_func>
 801ff1a:	2200      	movs	r2, #0
 801ff1c:	e7d0      	b.n	801fec0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801ff1e:	2600      	movs	r6, #0
 801ff20:	4632      	mov	r2, r6
 801ff22:	e7d4      	b.n	801fece <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801ff24:	2600      	movs	r6, #0
 801ff26:	e7d2      	b.n	801fece <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801ff28:	4606      	mov	r6, r0
 801ff2a:	e7d0      	b.n	801fece <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801ff2c:	2400      	movs	r4, #0
 801ff2e:	e7d9      	b.n	801fee4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801ff30:	2300      	movs	r3, #0
 801ff32:	461c      	mov	r4, r3
 801ff34:	e7de      	b.n	801fef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801ff36:	463b      	mov	r3, r7
 801ff38:	463c      	mov	r4, r7
 801ff3a:	e7db      	b.n	801fef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801ff3c:	2300      	movs	r3, #0
 801ff3e:	e7d9      	b.n	801fef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801ff40:	4603      	mov	r3, r0
 801ff42:	e7d7      	b.n	801fef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801ff44:	b280      	uxth	r0, r0
 801ff46:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ff4a:	b2bf      	uxth	r7, r7
 801ff4c:	fb00 fe07 	mul.w	lr, r0, r7
 801ff50:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ff54:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ff58:	eba0 0c0e 	sub.w	ip, r0, lr
 801ff5c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ff60:	b2bf      	uxth	r7, r7
 801ff62:	fa1f fc8c 	uxth.w	ip, ip
 801ff66:	eba0 0507 	sub.w	r5, r0, r7
 801ff6a:	fb0c f00a 	mul.w	r0, ip, sl
 801ff6e:	b2ad      	uxth	r5, r5
 801ff70:	fb05 000b 	mla	r0, r5, fp, r0
 801ff74:	fb07 0009 	mla	r0, r7, r9, r0
 801ff78:	fb0e 0008 	mla	r0, lr, r8, r0
 801ff7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ff80:	9001      	str	r0, [sp, #4]
 801ff82:	d018      	beq.n	801ffb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801ff84:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801ff88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ff8c:	fb0b f000 	mul.w	r0, fp, r0
 801ff90:	fb0b fb02 	mul.w	fp, fp, r2
 801ff94:	0a02      	lsrs	r2, r0, #8
 801ff96:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801ff9a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ff9e:	4402      	add	r2, r0
 801ffa0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801ffa4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801ffa8:	0a12      	lsrs	r2, r2, #8
 801ffaa:	0a00      	lsrs	r0, r0, #8
 801ffac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ffb0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ffb4:	4302      	orrs	r2, r0
 801ffb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ffba:	d01a      	beq.n	801fff2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801ffbc:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801ffc0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ffc4:	fb0a f000 	mul.w	r0, sl, r0
 801ffc8:	fb0a fa06 	mul.w	sl, sl, r6
 801ffcc:	0a06      	lsrs	r6, r0, #8
 801ffce:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801ffd2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ffd6:	4406      	add	r6, r0
 801ffd8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801ffdc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ffe0:	0a36      	lsrs	r6, r6, #8
 801ffe2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffe6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ffea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffee:	ea46 060a 	orr.w	r6, r6, sl
 801fff2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fff6:	d01b      	beq.n	8020030 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801fff8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801fffc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020000:	fb09 fa0a 	mul.w	sl, r9, sl
 8020004:	fb09 f004 	mul.w	r0, r9, r4
 8020008:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802000c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020010:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020014:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020018:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802001c:	4454      	add	r4, sl
 802001e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020022:	0a24      	lsrs	r4, r4, #8
 8020024:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020028:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802002c:	ea44 0409 	orr.w	r4, r4, r9
 8020030:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020034:	d01b      	beq.n	802006e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8020036:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802003a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802003e:	fb08 f909 	mul.w	r9, r8, r9
 8020042:	fb08 f003 	mul.w	r0, r8, r3
 8020046:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802004a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802004e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8020052:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020056:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802005a:	444b      	add	r3, r9
 802005c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020060:	0a1b      	lsrs	r3, r3, #8
 8020062:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020066:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802006a:	ea43 0308 	orr.w	r3, r3, r8
 802006e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020072:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020076:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 802007a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802007e:	fb0c f000 	mul.w	r0, ip, r0
 8020082:	fb0c f606 	mul.w	r6, ip, r6
 8020086:	fb05 0808 	mla	r8, r5, r8, r0
 802008a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802008e:	fb05 6502 	mla	r5, r5, r2, r6
 8020092:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020096:	fb07 8800 	mla	r8, r7, r0, r8
 802009a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802009e:	fb07 5704 	mla	r7, r7, r4, r5
 80200a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200a6:	fb0e 8000 	mla	r0, lr, r0, r8
 80200aa:	780a      	ldrb	r2, [r1, #0]
 80200ac:	fb0e 7e03 	mla	lr, lr, r3, r7
 80200b0:	9b01      	ldr	r3, [sp, #4]
 80200b2:	0a00      	lsrs	r0, r0, #8
 80200b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200b8:	43db      	mvns	r3, r3
 80200ba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80200be:	b2db      	uxtb	r3, r3
 80200c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80200c4:	ea40 0e0e 	orr.w	lr, r0, lr
 80200c8:	fb02 f003 	mul.w	r0, r2, r3
 80200cc:	1c42      	adds	r2, r0, #1
 80200ce:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80200d2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80200d6:	700a      	strb	r2, [r1, #0]
 80200d8:	784a      	ldrb	r2, [r1, #1]
 80200da:	435a      	muls	r2, r3
 80200dc:	1c50      	adds	r0, r2, #1
 80200de:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80200e2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80200e6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80200ea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80200ee:	704a      	strb	r2, [r1, #1]
 80200f0:	788a      	ldrb	r2, [r1, #2]
 80200f2:	4353      	muls	r3, r2
 80200f4:	1c5a      	adds	r2, r3, #1
 80200f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80200fa:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80200fe:	f881 e002 	strb.w	lr, [r1, #2]
 8020102:	b003      	add	sp, #12
 8020104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020108:	08027e53 	.word	0x08027e53
 802010c:	080283bb 	.word	0x080283bb
 8020110:	08027f1c 	.word	0x08027f1c

08020114 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020118:	ed2d 8b08 	vpush	{d8-d11}
 802011c:	b099      	sub	sp, #100	; 0x64
 802011e:	eeb0 aa40 	vmov.f32	s20, s0
 8020122:	eef0 9a60 	vmov.f32	s19, s1
 8020126:	9017      	str	r0, [sp, #92]	; 0x5c
 8020128:	eeb0 9a41 	vmov.f32	s18, s2
 802012c:	9306      	str	r3, [sp, #24]
 802012e:	eeb0 8a62 	vmov.f32	s16, s5
 8020132:	eef0 8a43 	vmov.f32	s17, s6
 8020136:	eef0 ba44 	vmov.f32	s23, s8
 802013a:	eeb0 ba64 	vmov.f32	s22, s9
 802013e:	eef0 aa45 	vmov.f32	s21, s10
 8020142:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8020146:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020148:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802014c:	6850      	ldr	r0, [r2, #4]
 802014e:	6812      	ldr	r2, [r2, #0]
 8020150:	fb00 1303 	mla	r3, r0, r3, r1
 8020154:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020158:	18d3      	adds	r3, r2, r3
 802015a:	9309      	str	r3, [sp, #36]	; 0x24
 802015c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802015e:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	930e      	str	r3, [sp, #56]	; 0x38
 8020166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020168:	2b00      	cmp	r3, #0
 802016a:	dc03      	bgt.n	8020174 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802016c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802016e:	2b00      	cmp	r3, #0
 8020170:	f340 8360 	ble.w	8020834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8020174:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020176:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802017a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802017e:	1e48      	subs	r0, r1, #1
 8020180:	1e57      	subs	r7, r2, #1
 8020182:	9b06      	ldr	r3, [sp, #24]
 8020184:	2b00      	cmp	r3, #0
 8020186:	f340 817b 	ble.w	8020480 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802018a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802018e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020192:	d406      	bmi.n	80201a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020194:	4584      	cmp	ip, r0
 8020196:	da04      	bge.n	80201a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020198:	2b00      	cmp	r3, #0
 802019a:	db02      	blt.n	80201a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802019c:	42bb      	cmp	r3, r7
 802019e:	f2c0 8170 	blt.w	8020482 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80201a2:	f11c 0c01 	adds.w	ip, ip, #1
 80201a6:	f100 8160 	bmi.w	802046a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80201aa:	4561      	cmp	r1, ip
 80201ac:	f2c0 815d 	blt.w	802046a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80201b0:	3301      	adds	r3, #1
 80201b2:	f100 815a 	bmi.w	802046a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80201b6:	429a      	cmp	r2, r3
 80201b8:	f2c0 8157 	blt.w	802046a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80201bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80201c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80201c2:	f1b8 0f00 	cmp.w	r8, #0
 80201c6:	f340 8179 	ble.w	80204bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80201ca:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80201cc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80201d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80201d2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80201d6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80201da:	142a      	asrs	r2, r5, #16
 80201dc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80201e0:	689b      	ldr	r3, [r3, #8]
 80201e2:	f100 81be 	bmi.w	8020562 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80201e6:	f103 39ff 	add.w	r9, r3, #4294967295
 80201ea:	454a      	cmp	r2, r9
 80201ec:	f280 81b9 	bge.w	8020562 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80201f0:	f1bc 0f00 	cmp.w	ip, #0
 80201f4:	f2c0 81b5 	blt.w	8020562 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80201f8:	f10e 39ff 	add.w	r9, lr, #4294967295
 80201fc:	45cc      	cmp	ip, r9
 80201fe:	f280 81b0 	bge.w	8020562 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020202:	b21b      	sxth	r3, r3
 8020204:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020206:	fb0c 2203 	mla	r2, ip, r3, r2
 802020a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802020e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020212:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020216:	2900      	cmp	r1, #0
 8020218:	f000 8197 	beq.w	802054a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 802021c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020220:	940a      	str	r4, [sp, #40]	; 0x28
 8020222:	0e24      	lsrs	r4, r4, #24
 8020224:	9411      	str	r4, [sp, #68]	; 0x44
 8020226:	b180      	cbz	r0, 802024a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802022c:	3b01      	subs	r3, #1
 802022e:	009b      	lsls	r3, r3, #2
 8020230:	3304      	adds	r3, #4
 8020232:	eb09 0c03 	add.w	ip, r9, r3
 8020236:	f859 3003 	ldr.w	r3, [r9, r3]
 802023a:	9307      	str	r3, [sp, #28]
 802023c:	0e1b      	lsrs	r3, r3, #24
 802023e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020240:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020244:	930b      	str	r3, [sp, #44]	; 0x2c
 8020246:	0e1b      	lsrs	r3, r3, #24
 8020248:	9312      	str	r3, [sp, #72]	; 0x48
 802024a:	b289      	uxth	r1, r1
 802024c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802024e:	b280      	uxth	r0, r0
 8020250:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020252:	fb01 fa00 	mul.w	sl, r1, r0
 8020256:	0109      	lsls	r1, r1, #4
 8020258:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802025c:	eba1 090a 	sub.w	r9, r1, sl
 8020260:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8020264:	b280      	uxth	r0, r0
 8020266:	fa1f f989 	uxth.w	r9, r9
 802026a:	1a09      	subs	r1, r1, r0
 802026c:	fb09 f303 	mul.w	r3, r9, r3
 8020270:	b289      	uxth	r1, r1
 8020272:	fb01 330e 	mla	r3, r1, lr, r3
 8020276:	fb00 3304 	mla	r3, r0, r4, r3
 802027a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802027c:	fb0a 3304 	mla	r3, sl, r4, r3
 8020280:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020284:	2b00      	cmp	r3, #0
 8020286:	f000 80e8 	beq.w	802045a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802028a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802028e:	d01b      	beq.n	80202c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020290:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8020294:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020298:	fb0e fb0b 	mul.w	fp, lr, fp
 802029c:	fb0e fe02 	mul.w	lr, lr, r2
 80202a0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80202a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80202a8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80202ac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80202b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80202b4:	445a      	add	r2, fp
 80202b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202ba:	0a12      	lsrs	r2, r2, #8
 80202bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80202c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80202c4:	ea42 020c 	orr.w	r2, r2, ip
 80202c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80202ca:	2cff      	cmp	r4, #255	; 0xff
 80202cc:	d021      	beq.n	8020312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80202ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80202d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80202d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80202d6:	fb04 fc0c 	mul.w	ip, r4, ip
 80202da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80202dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80202e0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80202e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80202e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80202ee:	fb04 fb0b 	mul.w	fp, r4, fp
 80202f2:	44e6      	add	lr, ip
 80202f4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80202f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202fc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020300:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020304:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020308:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802030c:	ea4e 040b 	orr.w	r4, lr, fp
 8020310:	940a      	str	r4, [sp, #40]	; 0x28
 8020312:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020314:	2cff      	cmp	r4, #255	; 0xff
 8020316:	d021      	beq.n	802035c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020318:	9c07      	ldr	r4, [sp, #28]
 802031a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802031e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020320:	fb04 fc0c 	mul.w	ip, r4, ip
 8020324:	9c07      	ldr	r4, [sp, #28]
 8020326:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802032a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802032e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020330:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020334:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020338:	fb04 fb0b 	mul.w	fp, r4, fp
 802033c:	44e6      	add	lr, ip
 802033e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8020342:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020346:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802034a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802034e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020352:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020356:	ea4e 040b 	orr.w	r4, lr, fp
 802035a:	9407      	str	r4, [sp, #28]
 802035c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802035e:	2cff      	cmp	r4, #255	; 0xff
 8020360:	d021      	beq.n	80203a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020362:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020364:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020368:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802036a:	fb04 fc0c 	mul.w	ip, r4, ip
 802036e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020370:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020374:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8020378:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802037a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802037e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020382:	fb04 fb0b 	mul.w	fp, r4, fp
 8020386:	44e6      	add	lr, ip
 8020388:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802038c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020390:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020394:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020398:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802039c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80203a0:	ea4e 040b 	orr.w	r4, lr, fp
 80203a4:	940b      	str	r4, [sp, #44]	; 0x2c
 80203a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80203a8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80203ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80203b0:	2bff      	cmp	r3, #255	; 0xff
 80203b2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80203b6:	9c07      	ldr	r4, [sp, #28]
 80203b8:	fb09 fc0c 	mul.w	ip, r9, ip
 80203bc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80203c0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80203c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203c6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80203ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80203ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80203d0:	fb0a cc0e 	mla	ip, sl, lr, ip
 80203d4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80203d8:	fb09 f90e 	mul.w	r9, r9, lr
 80203dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203e0:	fb01 9202 	mla	r2, r1, r2, r9
 80203e4:	9907      	ldr	r1, [sp, #28]
 80203e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203ea:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80203ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80203f0:	fb00 220b 	mla	r2, r0, fp, r2
 80203f4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80203f8:	fb0a 2a00 	mla	sl, sl, r0, r2
 80203fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020400:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020404:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020408:	fa5f f08c 	uxtb.w	r0, ip
 802040c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020410:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020414:	f000 80a2 	beq.w	802055c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8020418:	43db      	mvns	r3, r3
 802041a:	783a      	ldrb	r2, [r7, #0]
 802041c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020420:	b2db      	uxtb	r3, r3
 8020422:	fb02 fe03 	mul.w	lr, r2, r3
 8020426:	fb0a fa03 	mul.w	sl, sl, r3
 802042a:	f10e 0201 	add.w	r2, lr, #1
 802042e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8020432:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020436:	703a      	strb	r2, [r7, #0]
 8020438:	787a      	ldrb	r2, [r7, #1]
 802043a:	fb02 f003 	mul.w	r0, r2, r3
 802043e:	f10a 0301 	add.w	r3, sl, #1
 8020442:	1c42      	adds	r2, r0, #1
 8020444:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020448:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802044c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020450:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020454:	707a      	strb	r2, [r7, #1]
 8020456:	f887 c002 	strb.w	ip, [r7, #2]
 802045a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802045c:	3703      	adds	r7, #3
 802045e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020462:	441d      	add	r5, r3
 8020464:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020466:	441e      	add	r6, r3
 8020468:	e6ab      	b.n	80201c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802046a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802046c:	441d      	add	r5, r3
 802046e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020470:	441e      	add	r6, r3
 8020472:	9b06      	ldr	r3, [sp, #24]
 8020474:	3b01      	subs	r3, #1
 8020476:	9306      	str	r3, [sp, #24]
 8020478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802047a:	3303      	adds	r3, #3
 802047c:	9309      	str	r3, [sp, #36]	; 0x24
 802047e:	e680      	b.n	8020182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020480:	d024      	beq.n	80204cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8020482:	9b06      	ldr	r3, [sp, #24]
 8020484:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8020486:	3b01      	subs	r3, #1
 8020488:	fb00 5003 	mla	r0, r0, r3, r5
 802048c:	1400      	asrs	r0, r0, #16
 802048e:	f53f ae95 	bmi.w	80201bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020492:	3901      	subs	r1, #1
 8020494:	4288      	cmp	r0, r1
 8020496:	f6bf ae91 	bge.w	80201bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802049a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802049c:	fb01 6303 	mla	r3, r1, r3, r6
 80204a0:	141b      	asrs	r3, r3, #16
 80204a2:	f53f ae8b 	bmi.w	80201bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80204a6:	3a01      	subs	r2, #1
 80204a8:	4293      	cmp	r3, r2
 80204aa:	f6bf ae87 	bge.w	80201bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80204ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204b0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80204b4:	1cdf      	adds	r7, r3, #3
 80204b6:	f1bb 0f00 	cmp.w	fp, #0
 80204ba:	dc6e      	bgt.n	802059a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80204bc:	9b06      	ldr	r3, [sp, #24]
 80204be:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80204c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80204c8:	4423      	add	r3, r4
 80204ca:	9309      	str	r3, [sp, #36]	; 0x24
 80204cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	f340 81b0 	ble.w	8020834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80204d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80204da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80204de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80204e2:	eef0 6a48 	vmov.f32	s13, s16
 80204e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204f2:	ee16 5a90 	vmov	r5, s13
 80204f6:	eef0 6a68 	vmov.f32	s13, s17
 80204fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204fe:	ee16 6a90 	vmov	r6, s13
 8020502:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020506:	ee69 7a27 	vmul.f32	s15, s18, s15
 802050a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802050e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020512:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020516:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802051a:	ee18 2a10 	vmov	r2, s16
 802051e:	eeb0 8a47 	vmov.f32	s16, s14
 8020522:	fb92 f3f3 	sdiv	r3, r2, r3
 8020526:	ee18 2a90 	vmov	r2, s17
 802052a:	932d      	str	r3, [sp, #180]	; 0xb4
 802052c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802052e:	eef0 8a67 	vmov.f32	s17, s15
 8020532:	fb92 f3f3 	sdiv	r3, r2, r3
 8020536:	932e      	str	r3, [sp, #184]	; 0xb8
 8020538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802053a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802053c:	3b01      	subs	r3, #1
 802053e:	9315      	str	r3, [sp, #84]	; 0x54
 8020540:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020542:	bf08      	it	eq
 8020544:	4613      	moveq	r3, r2
 8020546:	9306      	str	r3, [sp, #24]
 8020548:	e60d      	b.n	8020166 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802054a:	2800      	cmp	r0, #0
 802054c:	f43f ae7d 	beq.w	802024a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020550:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020554:	9307      	str	r3, [sp, #28]
 8020556:	0e1b      	lsrs	r3, r3, #24
 8020558:	930f      	str	r3, [sp, #60]	; 0x3c
 802055a:	e676      	b.n	802024a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802055c:	7038      	strb	r0, [r7, #0]
 802055e:	7079      	strb	r1, [r7, #1]
 8020560:	e779      	b.n	8020456 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020562:	f112 0901 	adds.w	r9, r2, #1
 8020566:	f53f af78 	bmi.w	802045a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802056a:	454b      	cmp	r3, r9
 802056c:	f6ff af75 	blt.w	802045a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8020570:	f11c 0901 	adds.w	r9, ip, #1
 8020574:	f53f af71 	bmi.w	802045a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8020578:	45ce      	cmp	lr, r9
 802057a:	f6ff af6e 	blt.w	802045a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802057e:	b21b      	sxth	r3, r3
 8020580:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8020584:	fa0f f28e 	sxth.w	r2, lr
 8020588:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802058c:	9200      	str	r2, [sp, #0]
 802058e:	4639      	mov	r1, r7
 8020590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020592:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020594:	f7ff fc7c 	bl	801fe90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020598:	e75f      	b.n	802045a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802059a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802059c:	1429      	asrs	r1, r5, #16
 802059e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80205a0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80205a4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80205a8:	1433      	asrs	r3, r6, #16
 80205aa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80205ae:	fb0c 1303 	mla	r3, ip, r3, r1
 80205b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80205b4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80205b8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80205bc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80205c0:	2a00      	cmp	r2, #0
 80205c2:	f000 8129 	beq.w	8020818 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80205c6:	684c      	ldr	r4, [r1, #4]
 80205c8:	940c      	str	r4, [sp, #48]	; 0x30
 80205ca:	0e24      	lsrs	r4, r4, #24
 80205cc:	9413      	str	r4, [sp, #76]	; 0x4c
 80205ce:	b198      	cbz	r0, 80205f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80205d0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80205d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80205d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80205dc:	f10c 0c04 	add.w	ip, ip, #4
 80205e0:	eb01 080c 	add.w	r8, r1, ip
 80205e4:	f851 100c 	ldr.w	r1, [r1, ip]
 80205e8:	9108      	str	r1, [sp, #32]
 80205ea:	0e09      	lsrs	r1, r1, #24
 80205ec:	9110      	str	r1, [sp, #64]	; 0x40
 80205ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80205f2:	910d      	str	r1, [sp, #52]	; 0x34
 80205f4:	0e09      	lsrs	r1, r1, #24
 80205f6:	9114      	str	r1, [sp, #80]	; 0x50
 80205f8:	b292      	uxth	r2, r2
 80205fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80205fc:	b280      	uxth	r0, r0
 80205fe:	fb02 f900 	mul.w	r9, r2, r0
 8020602:	0112      	lsls	r2, r2, #4
 8020604:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020608:	eba2 0809 	sub.w	r8, r2, r9
 802060c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020612:	b280      	uxth	r0, r0
 8020614:	fa1f f888 	uxth.w	r8, r8
 8020618:	1a09      	subs	r1, r1, r0
 802061a:	fb08 f202 	mul.w	r2, r8, r2
 802061e:	b289      	uxth	r1, r1
 8020620:	fb01 220e 	mla	r2, r1, lr, r2
 8020624:	fb00 2204 	mla	r2, r0, r4, r2
 8020628:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802062a:	fb09 2204 	mla	r2, r9, r4, r2
 802062e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020632:	2a00      	cmp	r2, #0
 8020634:	f000 80e8 	beq.w	8020808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8020638:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802063c:	d01b      	beq.n	8020676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 802063e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020646:	fb0e fa0a 	mul.w	sl, lr, sl
 802064a:	fb0e fe03 	mul.w	lr, lr, r3
 802064e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020652:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020656:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802065a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802065e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020662:	4453      	add	r3, sl
 8020664:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020668:	0a1b      	lsrs	r3, r3, #8
 802066a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802066e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020672:	ea43 030c 	orr.w	r3, r3, ip
 8020676:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020678:	2cff      	cmp	r4, #255	; 0xff
 802067a:	d021      	beq.n	80206c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 802067c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802067e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020682:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020684:	fb04 fc0c 	mul.w	ip, r4, ip
 8020688:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802068a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802068e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020692:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020694:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020698:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802069c:	fb04 fa0a 	mul.w	sl, r4, sl
 80206a0:	44e6      	add	lr, ip
 80206a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80206a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206ba:	ea4e 040a 	orr.w	r4, lr, sl
 80206be:	940c      	str	r4, [sp, #48]	; 0x30
 80206c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80206c2:	2cff      	cmp	r4, #255	; 0xff
 80206c4:	d021      	beq.n	802070a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80206c6:	9c08      	ldr	r4, [sp, #32]
 80206c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80206cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80206ce:	fb04 fc0c 	mul.w	ip, r4, ip
 80206d2:	9c08      	ldr	r4, [sp, #32]
 80206d4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80206d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80206da:	fb04 fa0e 	mul.w	sl, r4, lr
 80206de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80206e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206ea:	44e6      	add	lr, ip
 80206ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80206f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020700:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020704:	ea4e 040a 	orr.w	r4, lr, sl
 8020708:	9408      	str	r4, [sp, #32]
 802070a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802070c:	2cff      	cmp	r4, #255	; 0xff
 802070e:	d021      	beq.n	8020754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8020710:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020712:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020716:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020718:	fb04 fc0c 	mul.w	ip, r4, ip
 802071c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802071e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020722:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020726:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020728:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802072c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020730:	fb04 fa0a 	mul.w	sl, r4, sl
 8020734:	44e6      	add	lr, ip
 8020736:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802073a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802073e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020742:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020746:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802074a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802074e:	ea4e 040a 	orr.w	r4, lr, sl
 8020752:	940d      	str	r4, [sp, #52]	; 0x34
 8020754:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020756:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802075a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802075e:	2aff      	cmp	r2, #255	; 0xff
 8020760:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020764:	9c08      	ldr	r4, [sp, #32]
 8020766:	fb08 fc0c 	mul.w	ip, r8, ip
 802076a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802076e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020772:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020774:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020778:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802077c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802077e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020782:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020786:	fb08 f80e 	mul.w	r8, r8, lr
 802078a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802078e:	fb01 8303 	mla	r3, r1, r3, r8
 8020792:	9908      	ldr	r1, [sp, #32]
 8020794:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020798:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802079c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802079e:	fb00 330a 	mla	r3, r0, sl, r3
 80207a2:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80207a6:	fb09 3e0e 	mla	lr, r9, lr, r3
 80207aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207ae:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80207b2:	ea4c 0c0e 	orr.w	ip, ip, lr
 80207b6:	fa5f f08c 	uxtb.w	r0, ip
 80207ba:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80207be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80207c2:	d032      	beq.n	802082a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 80207c4:	43d2      	mvns	r2, r2
 80207c6:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80207ca:	b2d2      	uxtb	r2, r2
 80207cc:	fb0e fe02 	mul.w	lr, lr, r2
 80207d0:	f10e 0301 	add.w	r3, lr, #1
 80207d4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80207d8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80207dc:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80207e0:	4350      	muls	r0, r2
 80207e2:	f807 3c03 	strb.w	r3, [r7, #-3]
 80207e6:	1c43      	adds	r3, r0, #1
 80207e8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80207ec:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80207f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80207f4:	4353      	muls	r3, r2
 80207f6:	f807 1c02 	strb.w	r1, [r7, #-2]
 80207fa:	1c5a      	adds	r2, r3, #1
 80207fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020800:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8020804:	f807 cc01 	strb.w	ip, [r7, #-1]
 8020808:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802080a:	3703      	adds	r7, #3
 802080c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020810:	441d      	add	r5, r3
 8020812:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020814:	441e      	add	r6, r3
 8020816:	e64e      	b.n	80204b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8020818:	2800      	cmp	r0, #0
 802081a:	f43f aeed 	beq.w	80205f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802081e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8020822:	9108      	str	r1, [sp, #32]
 8020824:	0e09      	lsrs	r1, r1, #24
 8020826:	9110      	str	r1, [sp, #64]	; 0x40
 8020828:	e6e6      	b.n	80205f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802082a:	f807 0c03 	strb.w	r0, [r7, #-3]
 802082e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020832:	e7e7      	b.n	8020804 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8020834:	b019      	add	sp, #100	; 0x64
 8020836:	ecbd 8b08 	vpop	{d8-d11}
 802083a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020840 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8020840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020844:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8020848:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802084c:	2800      	cmp	r0, #0
 802084e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8020852:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8020856:	fb0c 0e03 	mla	lr, ip, r3, r0
 802085a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802085e:	db6b      	blt.n	8020938 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020860:	4580      	cmp	r8, r0
 8020862:	dd69      	ble.n	8020938 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020864:	f1bc 0f00 	cmp.w	ip, #0
 8020868:	db66      	blt.n	8020938 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802086a:	45e1      	cmp	r9, ip
 802086c:	dd64      	ble.n	8020938 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802086e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020872:	f01e 0f01 	tst.w	lr, #1
 8020876:	5d16      	ldrb	r6, [r2, r4]
 8020878:	bf0c      	ite	eq
 802087a:	f006 060f 	andeq.w	r6, r6, #15
 802087e:	1136      	asrne	r6, r6, #4
 8020880:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020884:	b2f6      	uxtb	r6, r6
 8020886:	f110 0a01 	adds.w	sl, r0, #1
 802088a:	d457      	bmi.n	802093c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802088c:	45d0      	cmp	r8, sl
 802088e:	dd55      	ble.n	802093c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020890:	f1bc 0f00 	cmp.w	ip, #0
 8020894:	db52      	blt.n	802093c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020896:	45e1      	cmp	r9, ip
 8020898:	dd50      	ble.n	802093c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802089a:	2f00      	cmp	r7, #0
 802089c:	f000 80ac 	beq.w	80209f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80208a0:	f10e 0b01 	add.w	fp, lr, #1
 80208a4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80208a8:	f01b 0f01 	tst.w	fp, #1
 80208ac:	5d14      	ldrb	r4, [r2, r4]
 80208ae:	bf0c      	ite	eq
 80208b0:	f004 040f 	andeq.w	r4, r4, #15
 80208b4:	1124      	asrne	r4, r4, #4
 80208b6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80208ba:	b2e4      	uxtb	r4, r4
 80208bc:	2d00      	cmp	r5, #0
 80208be:	f000 8096 	beq.w	80209ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80208c2:	2800      	cmp	r0, #0
 80208c4:	f10c 0c01 	add.w	ip, ip, #1
 80208c8:	db3c      	blt.n	8020944 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80208ca:	4580      	cmp	r8, r0
 80208cc:	dd3a      	ble.n	8020944 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80208ce:	f1bc 0f00 	cmp.w	ip, #0
 80208d2:	db37      	blt.n	8020944 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80208d4:	45e1      	cmp	r9, ip
 80208d6:	dd35      	ble.n	8020944 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80208d8:	eb03 0b0e 	add.w	fp, r3, lr
 80208dc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80208e0:	f01b 0f01 	tst.w	fp, #1
 80208e4:	5c10      	ldrb	r0, [r2, r0]
 80208e6:	bf0c      	ite	eq
 80208e8:	f000 000f 	andeq.w	r0, r0, #15
 80208ec:	1100      	asrne	r0, r0, #4
 80208ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80208f2:	b2c0      	uxtb	r0, r0
 80208f4:	f1ba 0f00 	cmp.w	sl, #0
 80208f8:	db26      	blt.n	8020948 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80208fa:	45d0      	cmp	r8, sl
 80208fc:	dd24      	ble.n	8020948 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80208fe:	f1bc 0f00 	cmp.w	ip, #0
 8020902:	db21      	blt.n	8020948 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8020904:	45e1      	cmp	r9, ip
 8020906:	dd1f      	ble.n	8020948 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8020908:	b307      	cbz	r7, 802094c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802090a:	3301      	adds	r3, #1
 802090c:	449e      	add	lr, r3
 802090e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020912:	f01e 0f01 	tst.w	lr, #1
 8020916:	5cd3      	ldrb	r3, [r2, r3]
 8020918:	bf0c      	ite	eq
 802091a:	f003 030f 	andeq.w	r3, r3, #15
 802091e:	111b      	asrne	r3, r3, #4
 8020920:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020924:	b2db      	uxtb	r3, r3
 8020926:	2f0f      	cmp	r7, #15
 8020928:	d911      	bls.n	802094e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802092a:	4b35      	ldr	r3, [pc, #212]	; (8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802092c:	f240 1157 	movw	r1, #343	; 0x157
 8020930:	4a34      	ldr	r2, [pc, #208]	; (8020a04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8020932:	4835      	ldr	r0, [pc, #212]	; (8020a08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8020934:	f002 fc66 	bl	8023204 <__assert_func>
 8020938:	2600      	movs	r6, #0
 802093a:	e7a4      	b.n	8020886 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802093c:	2400      	movs	r4, #0
 802093e:	e7bd      	b.n	80208bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8020940:	463c      	mov	r4, r7
 8020942:	e7be      	b.n	80208c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8020944:	2000      	movs	r0, #0
 8020946:	e7d5      	b.n	80208f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8020948:	2300      	movs	r3, #0
 802094a:	e7ec      	b.n	8020926 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802094c:	463b      	mov	r3, r7
 802094e:	2d0f      	cmp	r5, #15
 8020950:	d8eb      	bhi.n	802092a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8020952:	b2bf      	uxth	r7, r7
 8020954:	b2ad      	uxth	r5, r5
 8020956:	fb07 f205 	mul.w	r2, r7, r5
 802095a:	013f      	lsls	r7, r7, #4
 802095c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8020960:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8020964:	1abf      	subs	r7, r7, r2
 8020966:	b2ad      	uxth	r5, r5
 8020968:	b2bf      	uxth	r7, r7
 802096a:	ebac 0c05 	sub.w	ip, ip, r5
 802096e:	437c      	muls	r4, r7
 8020970:	fa1f fc8c 	uxth.w	ip, ip
 8020974:	fb06 440c 	mla	r4, r6, ip, r4
 8020978:	fb05 4400 	mla	r4, r5, r0, r4
 802097c:	fb02 4203 	mla	r2, r2, r3, r4
 8020980:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020984:	b38a      	cbz	r2, 80209ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8020986:	4b21      	ldr	r3, [pc, #132]	; (8020a0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8020988:	681c      	ldr	r4, [r3, #0]
 802098a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802098e:	b2e5      	uxtb	r5, r4
 8020990:	4353      	muls	r3, r2
 8020992:	1c5a      	adds	r2, r3, #1
 8020994:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020998:	1212      	asrs	r2, r2, #8
 802099a:	b290      	uxth	r0, r2
 802099c:	43d2      	mvns	r2, r2
 802099e:	fb15 f500 	smulbb	r5, r5, r0
 80209a2:	b2d3      	uxtb	r3, r2
 80209a4:	780a      	ldrb	r2, [r1, #0]
 80209a6:	fb02 5203 	mla	r2, r2, r3, r5
 80209aa:	b292      	uxth	r2, r2
 80209ac:	1c55      	adds	r5, r2, #1
 80209ae:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80209b2:	784d      	ldrb	r5, [r1, #1]
 80209b4:	fb15 f503 	smulbb	r5, r5, r3
 80209b8:	1212      	asrs	r2, r2, #8
 80209ba:	700a      	strb	r2, [r1, #0]
 80209bc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80209c0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80209c4:	fb02 5200 	mla	r2, r2, r0, r5
 80209c8:	b292      	uxth	r2, r2
 80209ca:	1c55      	adds	r5, r2, #1
 80209cc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80209d0:	1212      	asrs	r2, r2, #8
 80209d2:	704a      	strb	r2, [r1, #1]
 80209d4:	788a      	ldrb	r2, [r1, #2]
 80209d6:	fb12 f303 	smulbb	r3, r2, r3
 80209da:	fb04 3300 	mla	r3, r4, r0, r3
 80209de:	b29b      	uxth	r3, r3
 80209e0:	1c5a      	adds	r2, r3, #1
 80209e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209e6:	121b      	asrs	r3, r3, #8
 80209e8:	708b      	strb	r3, [r1, #2]
 80209ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209ee:	2f0f      	cmp	r7, #15
 80209f0:	d89b      	bhi.n	802092a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80209f2:	462b      	mov	r3, r5
 80209f4:	4628      	mov	r0, r5
 80209f6:	e7ac      	b.n	8020952 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80209f8:	2d00      	cmp	r5, #0
 80209fa:	d1a1      	bne.n	8020940 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80209fc:	462c      	mov	r4, r5
 80209fe:	e7f8      	b.n	80209f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8020a00:	08027e53 	.word	0x08027e53
 8020a04:	080283bb 	.word	0x080283bb
 8020a08:	08027f1c 	.word	0x08027f1c
 8020a0c:	20056564 	.word	0x20056564

08020a10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a14:	ed2d 8b08 	vpush	{d8-d11}
 8020a18:	b097      	sub	sp, #92	; 0x5c
 8020a1a:	eeb0 aa40 	vmov.f32	s20, s0
 8020a1e:	eef0 9a60 	vmov.f32	s19, s1
 8020a22:	9214      	str	r2, [sp, #80]	; 0x50
 8020a24:	eeb0 9a41 	vmov.f32	s18, s2
 8020a28:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020a2a:	eeb0 8a62 	vmov.f32	s16, s5
 8020a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8020a30:	eef0 8a43 	vmov.f32	s17, s6
 8020a34:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020a38:	eef0 ba44 	vmov.f32	s23, s8
 8020a3c:	9015      	str	r0, [sp, #84]	; 0x54
 8020a3e:	eeb0 ba64 	vmov.f32	s22, s9
 8020a42:	6850      	ldr	r0, [r2, #4]
 8020a44:	eef0 aa45 	vmov.f32	s21, s10
 8020a48:	910c      	str	r1, [sp, #48]	; 0x30
 8020a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8020a4c:	6812      	ldr	r2, [r2, #0]
 8020a4e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020a52:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8020a56:	fb00 1303 	mla	r3, r0, r3, r1
 8020a5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a5e:	eb02 0a03 	add.w	sl, r2, r3
 8020a62:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a64:	689b      	ldr	r3, [r3, #8]
 8020a66:	3301      	adds	r3, #1
 8020a68:	f023 0301 	bic.w	r3, r3, #1
 8020a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a70:	681f      	ldr	r7, [r3, #0]
 8020a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	dc03      	bgt.n	8020a80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	f340 8247 	ble.w	8020f0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8020a80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020a86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020a8a:	1e48      	subs	r0, r1, #1
 8020a8c:	f102 3cff 	add.w	ip, r2, #4294967295
 8020a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	f340 80e5 	ble.w	8020c62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020a98:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020a9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020aa0:	d406      	bmi.n	8020ab0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020aa2:	4586      	cmp	lr, r0
 8020aa4:	da04      	bge.n	8020ab0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	db02      	blt.n	8020ab0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020aaa:	4563      	cmp	r3, ip
 8020aac:	f2c0 80da 	blt.w	8020c64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8020ab0:	f11e 0e01 	adds.w	lr, lr, #1
 8020ab4:	f100 80cb 	bmi.w	8020c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020ab8:	4571      	cmp	r1, lr
 8020aba:	f2c0 80c8 	blt.w	8020c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020abe:	3301      	adds	r3, #1
 8020ac0:	f100 80c5 	bmi.w	8020c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020ac4:	429a      	cmp	r2, r3
 8020ac6:	f2c0 80c2 	blt.w	8020c4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020acc:	46d0      	mov	r8, sl
 8020ace:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8020ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	f340 80e3 	ble.w	8020ca2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020adc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ade:	1430      	asrs	r0, r6, #16
 8020ae0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020ae4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020ae8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020aec:	142b      	asrs	r3, r5, #16
 8020aee:	f100 812e 	bmi.w	8020d4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020af2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020af6:	455b      	cmp	r3, fp
 8020af8:	f280 8129 	bge.w	8020d4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020afc:	2800      	cmp	r0, #0
 8020afe:	f2c0 8126 	blt.w	8020d4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020b02:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020b06:	4558      	cmp	r0, fp
 8020b08:	f280 8121 	bge.w	8020d4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020b0c:	fb00 3309 	mla	r3, r0, r9, r3
 8020b10:	0858      	lsrs	r0, r3, #1
 8020b12:	07dc      	lsls	r4, r3, #31
 8020b14:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020b18:	bf54      	ite	pl
 8020b1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020b1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020b22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020b26:	fa5f fc8c 	uxtb.w	ip, ip
 8020b2a:	2a00      	cmp	r2, #0
 8020b2c:	f000 80fe 	beq.w	8020d2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020b30:	1c58      	adds	r0, r3, #1
 8020b32:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020b36:	07c0      	lsls	r0, r0, #31
 8020b38:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020b3c:	bf54      	ite	pl
 8020b3e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020b42:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020b46:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020b4a:	fa5f f08e 	uxtb.w	r0, lr
 8020b4e:	9010      	str	r0, [sp, #64]	; 0x40
 8020b50:	b1d9      	cbz	r1, 8020b8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8020b52:	444b      	add	r3, r9
 8020b54:	0858      	lsrs	r0, r3, #1
 8020b56:	07dc      	lsls	r4, r3, #31
 8020b58:	f103 0301 	add.w	r3, r3, #1
 8020b5c:	5c38      	ldrb	r0, [r7, r0]
 8020b5e:	bf54      	ite	pl
 8020b60:	f000 000f 	andpl.w	r0, r0, #15
 8020b64:	1100      	asrmi	r0, r0, #4
 8020b66:	07dc      	lsls	r4, r3, #31
 8020b68:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020b6c:	b2c0      	uxtb	r0, r0
 8020b6e:	900a      	str	r0, [sp, #40]	; 0x28
 8020b70:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020b74:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020b78:	bf54      	ite	pl
 8020b7a:	f00e 030f 	andpl.w	r3, lr, #15
 8020b7e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020b82:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020b86:	b2db      	uxtb	r3, r3
 8020b88:	9311      	str	r3, [sp, #68]	; 0x44
 8020b8a:	b292      	uxth	r2, r2
 8020b8c:	b289      	uxth	r1, r1
 8020b8e:	0113      	lsls	r3, r2, #4
 8020b90:	fb02 f001 	mul.w	r0, r2, r1
 8020b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b96:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020b9a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020b9e:	1a1b      	subs	r3, r3, r0
 8020ba0:	b289      	uxth	r1, r1
 8020ba2:	b29b      	uxth	r3, r3
 8020ba4:	ebae 0e01 	sub.w	lr, lr, r1
 8020ba8:	4353      	muls	r3, r2
 8020baa:	fa1f fe8e 	uxth.w	lr, lr
 8020bae:	fb0c 320e 	mla	r2, ip, lr, r3
 8020bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bb4:	fb01 2203 	mla	r2, r1, r3, r2
 8020bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020bba:	fb00 2203 	mla	r2, r0, r3, r2
 8020bbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020bc2:	2a00      	cmp	r2, #0
 8020bc4:	d039      	beq.n	8020c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020bc6:	4bc7      	ldr	r3, [pc, #796]	; (8020ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8020bc8:	6819      	ldr	r1, [r3, #0]
 8020bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bcc:	fa5f fc81 	uxtb.w	ip, r1
 8020bd0:	435a      	muls	r2, r3
 8020bd2:	1c53      	adds	r3, r2, #1
 8020bd4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020bd8:	1212      	asrs	r2, r2, #8
 8020bda:	b290      	uxth	r0, r2
 8020bdc:	43d2      	mvns	r2, r2
 8020bde:	fb1c fc00 	smulbb	ip, ip, r0
 8020be2:	b2d3      	uxtb	r3, r2
 8020be4:	f898 2000 	ldrb.w	r2, [r8]
 8020be8:	fb02 c203 	mla	r2, r2, r3, ip
 8020bec:	b292      	uxth	r2, r2
 8020bee:	f102 0c01 	add.w	ip, r2, #1
 8020bf2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020bf6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020bfa:	fb1c fc03 	smulbb	ip, ip, r3
 8020bfe:	1212      	asrs	r2, r2, #8
 8020c00:	f888 2000 	strb.w	r2, [r8]
 8020c04:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020c08:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020c0c:	fb02 c200 	mla	r2, r2, r0, ip
 8020c10:	b292      	uxth	r2, r2
 8020c12:	f102 0c01 	add.w	ip, r2, #1
 8020c16:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020c1a:	1212      	asrs	r2, r2, #8
 8020c1c:	f888 2001 	strb.w	r2, [r8, #1]
 8020c20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020c24:	fb12 f303 	smulbb	r3, r2, r3
 8020c28:	fb01 3300 	mla	r3, r1, r0, r3
 8020c2c:	b29b      	uxth	r3, r3
 8020c2e:	1c5a      	adds	r2, r3, #1
 8020c30:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020c34:	121b      	asrs	r3, r3, #8
 8020c36:	f888 3002 	strb.w	r3, [r8, #2]
 8020c3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020c3c:	f108 0803 	add.w	r8, r8, #3
 8020c40:	441d      	add	r5, r3
 8020c42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c44:	441e      	add	r6, r3
 8020c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c48:	3b01      	subs	r3, #1
 8020c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8020c4c:	e742      	b.n	8020ad4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8020c4e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020c50:	f10a 0a03 	add.w	sl, sl, #3
 8020c54:	441d      	add	r5, r3
 8020c56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c58:	441e      	add	r6, r3
 8020c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c5c:	3b01      	subs	r3, #1
 8020c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8020c60:	e716      	b.n	8020a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020c62:	d024      	beq.n	8020cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c66:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020c68:	3b01      	subs	r3, #1
 8020c6a:	fb00 5003 	mla	r0, r0, r3, r5
 8020c6e:	1400      	asrs	r0, r0, #16
 8020c70:	f53f af2b 	bmi.w	8020aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020c74:	3901      	subs	r1, #1
 8020c76:	4288      	cmp	r0, r1
 8020c78:	f6bf af27 	bge.w	8020aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020c7c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020c7e:	fb01 6303 	mla	r3, r1, r3, r6
 8020c82:	141b      	asrs	r3, r3, #16
 8020c84:	f53f af21 	bmi.w	8020aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020c88:	3a01      	subs	r2, #1
 8020c8a:	4293      	cmp	r3, r2
 8020c8c:	f6bf af1d 	bge.w	8020aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020c90:	f10a 0e03 	add.w	lr, sl, #3
 8020c94:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8020c98:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020c9c:	f1b8 0f00 	cmp.w	r8, #0
 8020ca0:	dc76      	bgt.n	8020d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8020ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ca4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020ca8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020cac:	44a2      	add	sl, r4
 8020cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	f340 812c 	ble.w	8020f0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8020cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020cba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cbc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020cc0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020cc4:	eef0 6a48 	vmov.f32	s13, s16
 8020cc8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020ccc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020cd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020cd4:	ee16 5a90 	vmov	r5, s13
 8020cd8:	eef0 6a68 	vmov.f32	s13, s17
 8020cdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ce0:	ee16 6a90 	vmov	r6, s13
 8020ce4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020ce8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020cec:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020cf0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020cf4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020cf8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020cfc:	ee18 2a10 	vmov	r2, s16
 8020d00:	eeb0 8a47 	vmov.f32	s16, s14
 8020d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d08:	ee18 2a90 	vmov	r2, s17
 8020d0c:	932b      	str	r3, [sp, #172]	; 0xac
 8020d0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d10:	eef0 8a67 	vmov.f32	s17, s15
 8020d14:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d18:	932c      	str	r3, [sp, #176]	; 0xb0
 8020d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d1e:	3b01      	subs	r3, #1
 8020d20:	930c      	str	r3, [sp, #48]	; 0x30
 8020d22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d24:	bf08      	it	eq
 8020d26:	4613      	moveq	r3, r2
 8020d28:	9309      	str	r3, [sp, #36]	; 0x24
 8020d2a:	e6a2      	b.n	8020a72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020d2c:	2900      	cmp	r1, #0
 8020d2e:	f43f af2c 	beq.w	8020b8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8020d32:	eb09 0003 	add.w	r0, r9, r3
 8020d36:	0843      	lsrs	r3, r0, #1
 8020d38:	07c0      	lsls	r0, r0, #31
 8020d3a:	5cfb      	ldrb	r3, [r7, r3]
 8020d3c:	bf54      	ite	pl
 8020d3e:	f003 030f 	andpl.w	r3, r3, #15
 8020d42:	111b      	asrmi	r3, r3, #4
 8020d44:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020d48:	b2db      	uxtb	r3, r3
 8020d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8020d4c:	e71d      	b.n	8020b8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8020d4e:	f113 0b01 	adds.w	fp, r3, #1
 8020d52:	f53f af72 	bmi.w	8020c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020d56:	45dc      	cmp	ip, fp
 8020d58:	f6ff af6f 	blt.w	8020c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020d5c:	f110 0b01 	adds.w	fp, r0, #1
 8020d60:	f53f af6b 	bmi.w	8020c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020d64:	45de      	cmp	lr, fp
 8020d66:	f6ff af68 	blt.w	8020c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020d6a:	9302      	str	r3, [sp, #8]
 8020d6c:	fa0f f38e 	sxth.w	r3, lr
 8020d70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020d72:	9301      	str	r3, [sp, #4]
 8020d74:	fa0f f38c 	sxth.w	r3, ip
 8020d78:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020d7c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020d80:	9300      	str	r3, [sp, #0]
 8020d82:	463a      	mov	r2, r7
 8020d84:	464b      	mov	r3, r9
 8020d86:	4641      	mov	r1, r8
 8020d88:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020d8a:	f7ff fd59 	bl	8020840 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020d8e:	e754      	b.n	8020c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020d90:	142a      	asrs	r2, r5, #16
 8020d92:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020d96:	1433      	asrs	r3, r6, #16
 8020d98:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020d9c:	fb09 2303 	mla	r3, r9, r3, r2
 8020da0:	085a      	lsrs	r2, r3, #1
 8020da2:	07dc      	lsls	r4, r3, #31
 8020da4:	5cba      	ldrb	r2, [r7, r2]
 8020da6:	bf54      	ite	pl
 8020da8:	f002 020f 	andpl.w	r2, r2, #15
 8020dac:	1112      	asrmi	r2, r2, #4
 8020dae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020db2:	b2d2      	uxtb	r2, r2
 8020db4:	2900      	cmp	r1, #0
 8020db6:	f000 8097 	beq.w	8020ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020dba:	f103 0b01 	add.w	fp, r3, #1
 8020dbe:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8020dc2:	f01b 0f01 	tst.w	fp, #1
 8020dc6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020dca:	bf0c      	ite	eq
 8020dcc:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020dd0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020dd4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020dd8:	fa5f f48c 	uxtb.w	r4, ip
 8020ddc:	9412      	str	r4, [sp, #72]	; 0x48
 8020dde:	b300      	cbz	r0, 8020e22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8020de0:	444b      	add	r3, r9
 8020de2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020de6:	07dc      	lsls	r4, r3, #31
 8020de8:	f103 0301 	add.w	r3, r3, #1
 8020dec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020df0:	bf54      	ite	pl
 8020df2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020df6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020dfa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020dfe:	fa5f f48c 	uxtb.w	r4, ip
 8020e02:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020e06:	940b      	str	r4, [sp, #44]	; 0x2c
 8020e08:	07dc      	lsls	r4, r3, #31
 8020e0a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020e0e:	bf54      	ite	pl
 8020e10:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020e14:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020e18:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020e1c:	fa5f f38c 	uxtb.w	r3, ip
 8020e20:	9313      	str	r3, [sp, #76]	; 0x4c
 8020e22:	b289      	uxth	r1, r1
 8020e24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e26:	b280      	uxth	r0, r0
 8020e28:	fb01 f300 	mul.w	r3, r1, r0
 8020e2c:	0109      	lsls	r1, r1, #4
 8020e2e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020e32:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8020e36:	1ac9      	subs	r1, r1, r3
 8020e38:	b280      	uxth	r0, r0
 8020e3a:	b289      	uxth	r1, r1
 8020e3c:	ebac 0c00 	sub.w	ip, ip, r0
 8020e40:	4361      	muls	r1, r4
 8020e42:	fa1f fc8c 	uxth.w	ip, ip
 8020e46:	fb02 120c 	mla	r2, r2, ip, r1
 8020e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020e4c:	fb00 2001 	mla	r0, r0, r1, r2
 8020e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020e52:	fb03 0302 	mla	r3, r3, r2, r0
 8020e56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d039      	beq.n	8020ed2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020e5e:	4a21      	ldr	r2, [pc, #132]	; (8020ee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8020e60:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020e64:	6810      	ldr	r0, [r2, #0]
 8020e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e68:	fa5f fc80 	uxtb.w	ip, r0
 8020e6c:	4353      	muls	r3, r2
 8020e6e:	1c5a      	adds	r2, r3, #1
 8020e70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020e74:	121b      	asrs	r3, r3, #8
 8020e76:	b29a      	uxth	r2, r3
 8020e78:	43db      	mvns	r3, r3
 8020e7a:	fb1c fc02 	smulbb	ip, ip, r2
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	fb01 c103 	mla	r1, r1, r3, ip
 8020e84:	b289      	uxth	r1, r1
 8020e86:	f101 0c01 	add.w	ip, r1, #1
 8020e8a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020e8e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020e92:	fb1c fc03 	smulbb	ip, ip, r3
 8020e96:	1209      	asrs	r1, r1, #8
 8020e98:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020e9c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020ea0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020ea4:	fb01 c102 	mla	r1, r1, r2, ip
 8020ea8:	b289      	uxth	r1, r1
 8020eaa:	f101 0c01 	add.w	ip, r1, #1
 8020eae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020eb2:	1209      	asrs	r1, r1, #8
 8020eb4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020eb8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020ebc:	fb11 f303 	smulbb	r3, r1, r3
 8020ec0:	fb00 3002 	mla	r0, r0, r2, r3
 8020ec4:	b280      	uxth	r0, r0
 8020ec6:	1c42      	adds	r2, r0, #1
 8020ec8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020ecc:	1200      	asrs	r0, r0, #8
 8020ece:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020ed2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020ed4:	f10e 0e03 	add.w	lr, lr, #3
 8020ed8:	f108 38ff 	add.w	r8, r8, #4294967295
 8020edc:	441d      	add	r5, r3
 8020ede:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ee0:	441e      	add	r6, r3
 8020ee2:	e6db      	b.n	8020c9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020ee4:	20056564 	.word	0x20056564
 8020ee8:	2800      	cmp	r0, #0
 8020eea:	d09a      	beq.n	8020e22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8020eec:	444b      	add	r3, r9
 8020eee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020ef2:	07db      	lsls	r3, r3, #31
 8020ef4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020ef8:	bf54      	ite	pl
 8020efa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020efe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f02:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f06:	fa5f f38c 	uxtb.w	r3, ip
 8020f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020f0c:	e789      	b.n	8020e22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8020f0e:	b017      	add	sp, #92	; 0x5c
 8020f10:	ecbd 8b08 	vpop	{d8-d11}
 8020f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f1c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8020f20:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020f24:	2800      	cmp	r0, #0
 8020f26:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8020f2a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8020f2e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8020f32:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020f36:	db6b      	blt.n	8021010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020f38:	4580      	cmp	r8, r0
 8020f3a:	dd69      	ble.n	8021010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020f3c:	f1bc 0f00 	cmp.w	ip, #0
 8020f40:	db66      	blt.n	8021010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020f42:	45e1      	cmp	r9, ip
 8020f44:	dd64      	ble.n	8021010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020f46:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020f4a:	f01e 0f01 	tst.w	lr, #1
 8020f4e:	5d16      	ldrb	r6, [r2, r4]
 8020f50:	bf0c      	ite	eq
 8020f52:	f006 060f 	andeq.w	r6, r6, #15
 8020f56:	1136      	asrne	r6, r6, #4
 8020f58:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020f5c:	b2f6      	uxtb	r6, r6
 8020f5e:	f110 0a01 	adds.w	sl, r0, #1
 8020f62:	d457      	bmi.n	8021014 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020f64:	45d0      	cmp	r8, sl
 8020f66:	dd55      	ble.n	8021014 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020f68:	f1bc 0f00 	cmp.w	ip, #0
 8020f6c:	db52      	blt.n	8021014 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020f6e:	45e1      	cmp	r9, ip
 8020f70:	dd50      	ble.n	8021014 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020f72:	2f00      	cmp	r7, #0
 8020f74:	f000 80a5 	beq.w	80210c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8020f78:	f10e 0b01 	add.w	fp, lr, #1
 8020f7c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020f80:	f01b 0f01 	tst.w	fp, #1
 8020f84:	5d14      	ldrb	r4, [r2, r4]
 8020f86:	bf0c      	ite	eq
 8020f88:	f004 040f 	andeq.w	r4, r4, #15
 8020f8c:	1124      	asrne	r4, r4, #4
 8020f8e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020f92:	b2e4      	uxtb	r4, r4
 8020f94:	2d00      	cmp	r5, #0
 8020f96:	f000 808f 	beq.w	80210b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8020f9a:	2800      	cmp	r0, #0
 8020f9c:	f10c 0c01 	add.w	ip, ip, #1
 8020fa0:	db3c      	blt.n	802101c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020fa2:	4580      	cmp	r8, r0
 8020fa4:	dd3a      	ble.n	802101c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020fa6:	f1bc 0f00 	cmp.w	ip, #0
 8020faa:	db37      	blt.n	802101c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020fac:	45e1      	cmp	r9, ip
 8020fae:	dd35      	ble.n	802101c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020fb0:	eb03 0b0e 	add.w	fp, r3, lr
 8020fb4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8020fb8:	f01b 0f01 	tst.w	fp, #1
 8020fbc:	5c10      	ldrb	r0, [r2, r0]
 8020fbe:	bf0c      	ite	eq
 8020fc0:	f000 000f 	andeq.w	r0, r0, #15
 8020fc4:	1100      	asrne	r0, r0, #4
 8020fc6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020fca:	b2c0      	uxtb	r0, r0
 8020fcc:	f1ba 0f00 	cmp.w	sl, #0
 8020fd0:	db26      	blt.n	8021020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020fd2:	45d0      	cmp	r8, sl
 8020fd4:	dd24      	ble.n	8021020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020fd6:	f1bc 0f00 	cmp.w	ip, #0
 8020fda:	db21      	blt.n	8021020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020fdc:	45e1      	cmp	r9, ip
 8020fde:	dd1f      	ble.n	8021020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8020fe0:	b307      	cbz	r7, 8021024 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8020fe2:	3301      	adds	r3, #1
 8020fe4:	449e      	add	lr, r3
 8020fe6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020fea:	f01e 0f01 	tst.w	lr, #1
 8020fee:	5cd3      	ldrb	r3, [r2, r3]
 8020ff0:	bf0c      	ite	eq
 8020ff2:	f003 030f 	andeq.w	r3, r3, #15
 8020ff6:	111b      	asrne	r3, r3, #4
 8020ff8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020ffc:	b2db      	uxtb	r3, r3
 8020ffe:	2f0f      	cmp	r7, #15
 8021000:	d911      	bls.n	8021026 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8021002:	4b32      	ldr	r3, [pc, #200]	; (80210cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8021004:	f240 1157 	movw	r1, #343	; 0x157
 8021008:	4a31      	ldr	r2, [pc, #196]	; (80210d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802100a:	4832      	ldr	r0, [pc, #200]	; (80210d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802100c:	f002 f8fa 	bl	8023204 <__assert_func>
 8021010:	2600      	movs	r6, #0
 8021012:	e7a4      	b.n	8020f5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8021014:	2400      	movs	r4, #0
 8021016:	e7bd      	b.n	8020f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8021018:	463c      	mov	r4, r7
 802101a:	e7be      	b.n	8020f9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802101c:	2000      	movs	r0, #0
 802101e:	e7d5      	b.n	8020fcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8021020:	2300      	movs	r3, #0
 8021022:	e7ec      	b.n	8020ffe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8021024:	463b      	mov	r3, r7
 8021026:	2d0f      	cmp	r5, #15
 8021028:	d8eb      	bhi.n	8021002 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802102a:	b2bf      	uxth	r7, r7
 802102c:	b2ad      	uxth	r5, r5
 802102e:	fb07 f205 	mul.w	r2, r7, r5
 8021032:	013f      	lsls	r7, r7, #4
 8021034:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8021038:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802103c:	1abf      	subs	r7, r7, r2
 802103e:	b2ad      	uxth	r5, r5
 8021040:	b2bf      	uxth	r7, r7
 8021042:	ebac 0c05 	sub.w	ip, ip, r5
 8021046:	437c      	muls	r4, r7
 8021048:	fa1f fc8c 	uxth.w	ip, ip
 802104c:	fb06 440c 	mla	r4, r6, ip, r4
 8021050:	fb05 4400 	mla	r4, r5, r0, r4
 8021054:	fb02 4303 	mla	r3, r2, r3, r4
 8021058:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802105c:	b353      	cbz	r3, 80210b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802105e:	4a1e      	ldr	r2, [pc, #120]	; (80210d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8021060:	7808      	ldrb	r0, [r1, #0]
 8021062:	6814      	ldr	r4, [r2, #0]
 8021064:	b29a      	uxth	r2, r3
 8021066:	43db      	mvns	r3, r3
 8021068:	b2e5      	uxtb	r5, r4
 802106a:	b2db      	uxtb	r3, r3
 802106c:	fb15 f502 	smulbb	r5, r5, r2
 8021070:	fb00 5003 	mla	r0, r0, r3, r5
 8021074:	b280      	uxth	r0, r0
 8021076:	1c45      	adds	r5, r0, #1
 8021078:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802107c:	784d      	ldrb	r5, [r1, #1]
 802107e:	fb15 f503 	smulbb	r5, r5, r3
 8021082:	1200      	asrs	r0, r0, #8
 8021084:	7008      	strb	r0, [r1, #0]
 8021086:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802108a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802108e:	fb00 5002 	mla	r0, r0, r2, r5
 8021092:	b280      	uxth	r0, r0
 8021094:	1c45      	adds	r5, r0, #1
 8021096:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802109a:	1200      	asrs	r0, r0, #8
 802109c:	7048      	strb	r0, [r1, #1]
 802109e:	7888      	ldrb	r0, [r1, #2]
 80210a0:	fb10 f303 	smulbb	r3, r0, r3
 80210a4:	fb04 3202 	mla	r2, r4, r2, r3
 80210a8:	b292      	uxth	r2, r2
 80210aa:	1c53      	adds	r3, r2, #1
 80210ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80210b0:	1212      	asrs	r2, r2, #8
 80210b2:	708a      	strb	r2, [r1, #2]
 80210b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210b8:	2f0f      	cmp	r7, #15
 80210ba:	d8a2      	bhi.n	8021002 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80210bc:	462b      	mov	r3, r5
 80210be:	4628      	mov	r0, r5
 80210c0:	e7b3      	b.n	802102a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80210c2:	2d00      	cmp	r5, #0
 80210c4:	d1a8      	bne.n	8021018 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80210c6:	462c      	mov	r4, r5
 80210c8:	e7f8      	b.n	80210bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80210ca:	bf00      	nop
 80210cc:	08027e53 	.word	0x08027e53
 80210d0:	080283bb 	.word	0x080283bb
 80210d4:	08027f1c 	.word	0x08027f1c
 80210d8:	20056564 	.word	0x20056564

080210dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80210dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210e0:	ed2d 8b08 	vpush	{d8-d11}
 80210e4:	b093      	sub	sp, #76	; 0x4c
 80210e6:	461c      	mov	r4, r3
 80210e8:	eeb0 aa40 	vmov.f32	s20, s0
 80210ec:	920c      	str	r2, [sp, #48]	; 0x30
 80210ee:	eef0 9a60 	vmov.f32	s19, s1
 80210f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80210f4:	eeb0 9a41 	vmov.f32	s18, s2
 80210f8:	9011      	str	r0, [sp, #68]	; 0x44
 80210fa:	eeb0 8a62 	vmov.f32	s16, s5
 80210fe:	6850      	ldr	r0, [r2, #4]
 8021100:	eef0 8a43 	vmov.f32	s17, s6
 8021104:	9107      	str	r1, [sp, #28]
 8021106:	eef0 ba44 	vmov.f32	s23, s8
 802110a:	6812      	ldr	r2, [r2, #0]
 802110c:	eeb0 ba64 	vmov.f32	s22, s9
 8021110:	eef0 aa45 	vmov.f32	s21, s10
 8021114:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021118:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 802111c:	fb00 1303 	mla	r3, r0, r3, r1
 8021120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021124:	eb02 0b03 	add.w	fp, r2, r3
 8021128:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802112a:	689b      	ldr	r3, [r3, #8]
 802112c:	3301      	adds	r3, #1
 802112e:	f023 0301 	bic.w	r3, r3, #1
 8021132:	9309      	str	r3, [sp, #36]	; 0x24
 8021134:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021136:	f8d3 8000 	ldr.w	r8, [r3]
 802113a:	9b07      	ldr	r3, [sp, #28]
 802113c:	2b00      	cmp	r3, #0
 802113e:	dc03      	bgt.n	8021148 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021142:	2b00      	cmp	r3, #0
 8021144:	f340 822b 	ble.w	802159e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021148:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802114a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802114e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021152:	1e48      	subs	r0, r1, #1
 8021154:	1e57      	subs	r7, r2, #1
 8021156:	2c00      	cmp	r4, #0
 8021158:	f340 80d7 	ble.w	802130a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802115c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021160:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021164:	d406      	bmi.n	8021174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021166:	4584      	cmp	ip, r0
 8021168:	da04      	bge.n	8021174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802116a:	2b00      	cmp	r3, #0
 802116c:	db02      	blt.n	8021174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802116e:	42bb      	cmp	r3, r7
 8021170:	f2c0 80cc 	blt.w	802130c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021174:	f11c 0c01 	adds.w	ip, ip, #1
 8021178:	f100 80bf 	bmi.w	80212fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 802117c:	4561      	cmp	r1, ip
 802117e:	f2c0 80bc 	blt.w	80212fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8021182:	3301      	adds	r3, #1
 8021184:	f100 80b9 	bmi.w	80212fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8021188:	429a      	cmp	r2, r3
 802118a:	f2c0 80b6 	blt.w	80212fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 802118e:	46a2      	mov	sl, r4
 8021190:	465f      	mov	r7, fp
 8021192:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021196:	f1ba 0f00 	cmp.w	sl, #0
 802119a:	f340 80d4 	ble.w	8021346 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802119e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80211a2:	1430      	asrs	r0, r6, #16
 80211a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80211a8:	9308      	str	r3, [sp, #32]
 80211aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211ac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80211b0:	142b      	asrs	r3, r5, #16
 80211b2:	f100 8124 	bmi.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80211b6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80211ba:	4293      	cmp	r3, r2
 80211bc:	f280 811f 	bge.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80211c0:	2800      	cmp	r0, #0
 80211c2:	f2c0 811c 	blt.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80211c6:	f10e 32ff 	add.w	r2, lr, #4294967295
 80211ca:	4290      	cmp	r0, r2
 80211cc:	f280 8117 	bge.w	80213fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80211d0:	fb00 3309 	mla	r3, r0, r9, r3
 80211d4:	0858      	lsrs	r0, r3, #1
 80211d6:	07da      	lsls	r2, r3, #31
 80211d8:	9a08      	ldr	r2, [sp, #32]
 80211da:	f818 c000 	ldrb.w	ip, [r8, r0]
 80211de:	bf54      	ite	pl
 80211e0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80211e4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80211e8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80211ec:	fa5f fc8c 	uxtb.w	ip, ip
 80211f0:	2a00      	cmp	r2, #0
 80211f2:	f000 80ed 	beq.w	80213d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80211f6:	1c58      	adds	r0, r3, #1
 80211f8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80211fc:	07c0      	lsls	r0, r0, #31
 80211fe:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8021202:	bf54      	ite	pl
 8021204:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021208:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802120c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021210:	fa5f fe8e 	uxtb.w	lr, lr
 8021214:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8021218:	b1c9      	cbz	r1, 802124e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 802121a:	444b      	add	r3, r9
 802121c:	0858      	lsrs	r0, r3, #1
 802121e:	07da      	lsls	r2, r3, #31
 8021220:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021224:	bf54      	ite	pl
 8021226:	f000 000f 	andpl.w	r0, r0, #15
 802122a:	1100      	asrmi	r0, r0, #4
 802122c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021230:	b2c0      	uxtb	r0, r0
 8021232:	900a      	str	r0, [sp, #40]	; 0x28
 8021234:	1c58      	adds	r0, r3, #1
 8021236:	0843      	lsrs	r3, r0, #1
 8021238:	07c2      	lsls	r2, r0, #31
 802123a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802123e:	bf54      	ite	pl
 8021240:	f003 030f 	andpl.w	r3, r3, #15
 8021244:	111b      	asrmi	r3, r3, #4
 8021246:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802124a:	b2db      	uxtb	r3, r3
 802124c:	930e      	str	r3, [sp, #56]	; 0x38
 802124e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021252:	b289      	uxth	r1, r1
 8021254:	fb02 f301 	mul.w	r3, r2, r1
 8021258:	0112      	lsls	r2, r2, #4
 802125a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802125e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8021262:	1ad2      	subs	r2, r2, r3
 8021264:	b289      	uxth	r1, r1
 8021266:	b292      	uxth	r2, r2
 8021268:	1a40      	subs	r0, r0, r1
 802126a:	fa1f fe80 	uxth.w	lr, r0
 802126e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021270:	4342      	muls	r2, r0
 8021272:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8021276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021278:	fb01 c102 	mla	r1, r1, r2, ip
 802127c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802127e:	fb03 1302 	mla	r3, r3, r2, r1
 8021282:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021286:	b383      	cbz	r3, 80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021288:	4ac7      	ldr	r2, [pc, #796]	; (80215a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802128a:	2bff      	cmp	r3, #255	; 0xff
 802128c:	6812      	ldr	r2, [r2, #0]
 802128e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8021292:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8021296:	b2d2      	uxtb	r2, r2
 8021298:	f000 80ac 	beq.w	80213f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802129c:	b299      	uxth	r1, r3
 802129e:	43db      	mvns	r3, r3
 80212a0:	f897 c000 	ldrb.w	ip, [r7]
 80212a4:	fb12 f201 	smulbb	r2, r2, r1
 80212a8:	b2db      	uxtb	r3, r3
 80212aa:	fb10 f001 	smulbb	r0, r0, r1
 80212ae:	fb0c 2203 	mla	r2, ip, r3, r2
 80212b2:	fb1e f101 	smulbb	r1, lr, r1
 80212b6:	b292      	uxth	r2, r2
 80212b8:	f102 0c01 	add.w	ip, r2, #1
 80212bc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80212c0:	1212      	asrs	r2, r2, #8
 80212c2:	703a      	strb	r2, [r7, #0]
 80212c4:	787a      	ldrb	r2, [r7, #1]
 80212c6:	fb02 0003 	mla	r0, r2, r3, r0
 80212ca:	b280      	uxth	r0, r0
 80212cc:	1c42      	adds	r2, r0, #1
 80212ce:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80212d2:	78ba      	ldrb	r2, [r7, #2]
 80212d4:	fb02 1303 	mla	r3, r2, r3, r1
 80212d8:	1200      	asrs	r0, r0, #8
 80212da:	b29b      	uxth	r3, r3
 80212dc:	7078      	strb	r0, [r7, #1]
 80212de:	f103 0e01 	add.w	lr, r3, #1
 80212e2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80212e6:	121b      	asrs	r3, r3, #8
 80212e8:	70bb      	strb	r3, [r7, #2]
 80212ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80212ec:	3703      	adds	r7, #3
 80212ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80212f2:	441d      	add	r5, r3
 80212f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212f6:	441e      	add	r6, r3
 80212f8:	e74d      	b.n	8021196 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80212fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80212fc:	3c01      	subs	r4, #1
 80212fe:	f10b 0b03 	add.w	fp, fp, #3
 8021302:	441d      	add	r5, r3
 8021304:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021306:	441e      	add	r6, r3
 8021308:	e725      	b.n	8021156 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802130a:	d021      	beq.n	8021350 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802130c:	1e63      	subs	r3, r4, #1
 802130e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021310:	fb00 5003 	mla	r0, r0, r3, r5
 8021314:	1400      	asrs	r0, r0, #16
 8021316:	f53f af3a 	bmi.w	802118e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802131a:	3901      	subs	r1, #1
 802131c:	4288      	cmp	r0, r1
 802131e:	f6bf af36 	bge.w	802118e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021322:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021324:	fb01 6303 	mla	r3, r1, r3, r6
 8021328:	141b      	asrs	r3, r3, #16
 802132a:	f53f af30 	bmi.w	802118e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802132e:	3a01      	subs	r2, #1
 8021330:	4293      	cmp	r3, r2
 8021332:	f6bf af2c 	bge.w	802118e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021336:	f10b 0c03 	add.w	ip, fp, #3
 802133a:	46a6      	mov	lr, r4
 802133c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021340:	f1be 0f00 	cmp.w	lr, #0
 8021344:	dc79      	bgt.n	802143a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8021346:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802134a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802134e:	44a3      	add	fp, r4
 8021350:	9b07      	ldr	r3, [sp, #28]
 8021352:	2b00      	cmp	r3, #0
 8021354:	f340 8123 	ble.w	802159e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802135c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802135e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021362:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021366:	eef0 6a48 	vmov.f32	s13, s16
 802136a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802136e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021372:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021376:	ee16 5a90 	vmov	r5, s13
 802137a:	eef0 6a68 	vmov.f32	s13, s17
 802137e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021382:	ee16 6a90 	vmov	r6, s13
 8021386:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802138a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802138e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021392:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021396:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802139a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802139e:	ee18 2a10 	vmov	r2, s16
 80213a2:	eeb0 8a47 	vmov.f32	s16, s14
 80213a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80213aa:	ee18 2a90 	vmov	r2, s17
 80213ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80213b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213b2:	eef0 8a67 	vmov.f32	s17, s15
 80213b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80213ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80213bc:	9b07      	ldr	r3, [sp, #28]
 80213be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80213c0:	3b01      	subs	r3, #1
 80213c2:	9307      	str	r3, [sp, #28]
 80213c4:	bf08      	it	eq
 80213c6:	4614      	moveq	r4, r2
 80213c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213ca:	bf18      	it	ne
 80213cc:	461c      	movne	r4, r3
 80213ce:	e6b4      	b.n	802113a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80213d0:	2900      	cmp	r1, #0
 80213d2:	f43f af3c 	beq.w	802124e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80213d6:	eb09 0003 	add.w	r0, r9, r3
 80213da:	0843      	lsrs	r3, r0, #1
 80213dc:	07c0      	lsls	r0, r0, #31
 80213de:	f818 3003 	ldrb.w	r3, [r8, r3]
 80213e2:	bf54      	ite	pl
 80213e4:	f003 030f 	andpl.w	r3, r3, #15
 80213e8:	111b      	asrmi	r3, r3, #4
 80213ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80213ee:	b2db      	uxtb	r3, r3
 80213f0:	930a      	str	r3, [sp, #40]	; 0x28
 80213f2:	e72c      	b.n	802124e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80213f4:	703a      	strb	r2, [r7, #0]
 80213f6:	7078      	strb	r0, [r7, #1]
 80213f8:	f887 e002 	strb.w	lr, [r7, #2]
 80213fc:	e775      	b.n	80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80213fe:	1c5a      	adds	r2, r3, #1
 8021400:	f53f af73 	bmi.w	80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021404:	4594      	cmp	ip, r2
 8021406:	f6ff af70 	blt.w	80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802140a:	1c42      	adds	r2, r0, #1
 802140c:	f53f af6d 	bmi.w	80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021410:	4596      	cmp	lr, r2
 8021412:	f6ff af6a 	blt.w	80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021416:	9302      	str	r3, [sp, #8]
 8021418:	fa0f f38e 	sxth.w	r3, lr
 802141c:	9a08      	ldr	r2, [sp, #32]
 802141e:	9301      	str	r3, [sp, #4]
 8021420:	fa0f f38c 	sxth.w	r3, ip
 8021424:	9105      	str	r1, [sp, #20]
 8021426:	4639      	mov	r1, r7
 8021428:	9300      	str	r3, [sp, #0]
 802142a:	464b      	mov	r3, r9
 802142c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021430:	4642      	mov	r2, r8
 8021432:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021434:	f7ff fd70 	bl	8020f18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8021438:	e757      	b.n	80212ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802143a:	142a      	asrs	r2, r5, #16
 802143c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021440:	1433      	asrs	r3, r6, #16
 8021442:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8021446:	fb09 2303 	mla	r3, r9, r3, r2
 802144a:	085a      	lsrs	r2, r3, #1
 802144c:	07d9      	lsls	r1, r3, #31
 802144e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8021452:	bf54      	ite	pl
 8021454:	f002 020f 	andpl.w	r2, r2, #15
 8021458:	1112      	asrmi	r2, r2, #4
 802145a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802145e:	b2d2      	uxtb	r2, r2
 8021460:	2800      	cmp	r0, #0
 8021462:	f000 8085 	beq.w	8021570 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021466:	f103 0a01 	add.w	sl, r3, #1
 802146a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802146e:	f01a 0f01 	tst.w	sl, #1
 8021472:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021476:	bf0c      	ite	eq
 8021478:	f001 010f 	andeq.w	r1, r1, #15
 802147c:	1109      	asrne	r1, r1, #4
 802147e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021482:	b2c9      	uxtb	r1, r1
 8021484:	910f      	str	r1, [sp, #60]	; 0x3c
 8021486:	b1df      	cbz	r7, 80214c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8021488:	444b      	add	r3, r9
 802148a:	0859      	lsrs	r1, r3, #1
 802148c:	f013 0f01 	tst.w	r3, #1
 8021490:	f103 0301 	add.w	r3, r3, #1
 8021494:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021498:	bf0c      	ite	eq
 802149a:	f001 010f 	andeq.w	r1, r1, #15
 802149e:	1109      	asrne	r1, r1, #4
 80214a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80214a4:	b2c9      	uxtb	r1, r1
 80214a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80214a8:	0859      	lsrs	r1, r3, #1
 80214aa:	07db      	lsls	r3, r3, #31
 80214ac:	f818 1001 	ldrb.w	r1, [r8, r1]
 80214b0:	bf54      	ite	pl
 80214b2:	f001 010f 	andpl.w	r1, r1, #15
 80214b6:	1109      	asrmi	r1, r1, #4
 80214b8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80214bc:	b2c9      	uxtb	r1, r1
 80214be:	9110      	str	r1, [sp, #64]	; 0x40
 80214c0:	b280      	uxth	r0, r0
 80214c2:	b2bf      	uxth	r7, r7
 80214c4:	fb00 f307 	mul.w	r3, r0, r7
 80214c8:	0100      	lsls	r0, r0, #4
 80214ca:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80214ce:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80214d2:	1ac0      	subs	r0, r0, r3
 80214d4:	b2bf      	uxth	r7, r7
 80214d6:	b280      	uxth	r0, r0
 80214d8:	1bc9      	subs	r1, r1, r7
 80214da:	fa1f fa81 	uxth.w	sl, r1
 80214de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80214e0:	4348      	muls	r0, r1
 80214e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80214e4:	fb02 020a 	mla	r2, r2, sl, r0
 80214e8:	fb07 2701 	mla	r7, r7, r1, r2
 80214ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214ee:	fb03 7302 	mla	r3, r3, r2, r7
 80214f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80214f6:	b393      	cbz	r3, 802155e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80214f8:	4a2b      	ldr	r2, [pc, #172]	; (80215a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80214fa:	2bff      	cmp	r3, #255	; 0xff
 80214fc:	6811      	ldr	r1, [r2, #0]
 80214fe:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8021502:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8021506:	b2c9      	uxtb	r1, r1
 8021508:	d042      	beq.n	8021590 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802150a:	b298      	uxth	r0, r3
 802150c:	43db      	mvns	r3, r3
 802150e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8021512:	fb11 f100 	smulbb	r1, r1, r0
 8021516:	b2db      	uxtb	r3, r3
 8021518:	fb17 f700 	smulbb	r7, r7, r0
 802151c:	fb02 1103 	mla	r1, r2, r3, r1
 8021520:	fb1a f000 	smulbb	r0, sl, r0
 8021524:	b289      	uxth	r1, r1
 8021526:	1c4a      	adds	r2, r1, #1
 8021528:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802152c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8021530:	fb02 7703 	mla	r7, r2, r3, r7
 8021534:	1209      	asrs	r1, r1, #8
 8021536:	b2bf      	uxth	r7, r7
 8021538:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802153c:	1c7a      	adds	r2, r7, #1
 802153e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021542:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8021546:	fb02 0303 	mla	r3, r2, r3, r0
 802154a:	123f      	asrs	r7, r7, #8
 802154c:	b29b      	uxth	r3, r3
 802154e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021552:	1c5a      	adds	r2, r3, #1
 8021554:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021558:	121b      	asrs	r3, r3, #8
 802155a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802155e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021560:	f10c 0c03 	add.w	ip, ip, #3
 8021564:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021568:	441d      	add	r5, r3
 802156a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802156c:	441e      	add	r6, r3
 802156e:	e6e7      	b.n	8021340 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8021570:	2f00      	cmp	r7, #0
 8021572:	d0a5      	beq.n	80214c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8021574:	444b      	add	r3, r9
 8021576:	0859      	lsrs	r1, r3, #1
 8021578:	07db      	lsls	r3, r3, #31
 802157a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802157e:	bf54      	ite	pl
 8021580:	f001 010f 	andpl.w	r1, r1, #15
 8021584:	1109      	asrmi	r1, r1, #4
 8021586:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802158a:	b2c9      	uxtb	r1, r1
 802158c:	910b      	str	r1, [sp, #44]	; 0x2c
 802158e:	e797      	b.n	80214c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8021590:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021594:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021598:	f80c ac01 	strb.w	sl, [ip, #-1]
 802159c:	e7df      	b.n	802155e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802159e:	b013      	add	sp, #76	; 0x4c
 80215a0:	ecbd 8b08 	vpop	{d8-d11}
 80215a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215a8:	20056564 	.word	0x20056564

080215ac <CRC_Lock>:
 80215ac:	4a20      	ldr	r2, [pc, #128]	; (8021630 <CRC_Lock+0x84>)
 80215ae:	b530      	push	{r4, r5, lr}
 80215b0:	6813      	ldr	r3, [r2, #0]
 80215b2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80215b6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80215ba:	f023 0301 	bic.w	r3, r3, #1
 80215be:	6013      	str	r3, [r2, #0]
 80215c0:	4b1c      	ldr	r3, [pc, #112]	; (8021634 <CRC_Lock+0x88>)
 80215c2:	681a      	ldr	r2, [r3, #0]
 80215c4:	4022      	ands	r2, r4
 80215c6:	42aa      	cmp	r2, r5
 80215c8:	d005      	beq.n	80215d6 <CRC_Lock+0x2a>
 80215ca:	681b      	ldr	r3, [r3, #0]
 80215cc:	f24c 2270 	movw	r2, #49776	; 0xc270
 80215d0:	4023      	ands	r3, r4
 80215d2:	4293      	cmp	r3, r2
 80215d4:	d124      	bne.n	8021620 <CRC_Lock+0x74>
 80215d6:	4b18      	ldr	r3, [pc, #96]	; (8021638 <CRC_Lock+0x8c>)
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	bb0b      	cbnz	r3, 8021620 <CRC_Lock+0x74>
 80215dc:	4b17      	ldr	r3, [pc, #92]	; (802163c <CRC_Lock+0x90>)
 80215de:	681a      	ldr	r2, [r3, #0]
 80215e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80215e4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80215e8:	d00d      	beq.n	8021606 <CRC_Lock+0x5a>
 80215ea:	681a      	ldr	r2, [r3, #0]
 80215ec:	f240 4483 	movw	r4, #1155	; 0x483
 80215f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80215f4:	42a2      	cmp	r2, r4
 80215f6:	d006      	beq.n	8021606 <CRC_Lock+0x5a>
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	f240 4285 	movw	r2, #1157	; 0x485
 80215fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021602:	4293      	cmp	r3, r2
 8021604:	d10c      	bne.n	8021620 <CRC_Lock+0x74>
 8021606:	4b0e      	ldr	r3, [pc, #56]	; (8021640 <CRC_Lock+0x94>)
 8021608:	2201      	movs	r2, #1
 802160a:	601a      	str	r2, [r3, #0]
 802160c:	681a      	ldr	r2, [r3, #0]
 802160e:	2a00      	cmp	r2, #0
 8021610:	d1fc      	bne.n	802160c <CRC_Lock+0x60>
 8021612:	4b0c      	ldr	r3, [pc, #48]	; (8021644 <CRC_Lock+0x98>)
 8021614:	6018      	str	r0, [r3, #0]
 8021616:	6818      	ldr	r0, [r3, #0]
 8021618:	1a43      	subs	r3, r0, r1
 802161a:	4258      	negs	r0, r3
 802161c:	4158      	adcs	r0, r3
 802161e:	bd30      	pop	{r4, r5, pc}
 8021620:	4b09      	ldr	r3, [pc, #36]	; (8021648 <CRC_Lock+0x9c>)
 8021622:	2201      	movs	r2, #1
 8021624:	601a      	str	r2, [r3, #0]
 8021626:	681a      	ldr	r2, [r3, #0]
 8021628:	2a00      	cmp	r2, #0
 802162a:	d1fc      	bne.n	8021626 <CRC_Lock+0x7a>
 802162c:	4b07      	ldr	r3, [pc, #28]	; (802164c <CRC_Lock+0xa0>)
 802162e:	e7f1      	b.n	8021614 <CRC_Lock+0x68>
 8021630:	e0002000 	.word	0xe0002000
 8021634:	e000ed00 	.word	0xe000ed00
 8021638:	e0042000 	.word	0xe0042000
 802163c:	5c001000 	.word	0x5c001000
 8021640:	58024c08 	.word	0x58024c08
 8021644:	58024c00 	.word	0x58024c00
 8021648:	40023008 	.word	0x40023008
 802164c:	40023000 	.word	0x40023000

08021650 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021650:	6101      	str	r1, [r0, #16]
 8021652:	4770      	bx	lr

08021654 <_ZN8touchgfx8Gestures4tickEv>:
 8021654:	7b83      	ldrb	r3, [r0, #14]
 8021656:	b14b      	cbz	r3, 802166c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021658:	8903      	ldrh	r3, [r0, #8]
 802165a:	3301      	adds	r3, #1
 802165c:	b29b      	uxth	r3, r3
 802165e:	2b07      	cmp	r3, #7
 8021660:	8103      	strh	r3, [r0, #8]
 8021662:	bf81      	itttt	hi
 8021664:	2300      	movhi	r3, #0
 8021666:	8143      	strhhi	r3, [r0, #10]
 8021668:	8183      	strhhi	r3, [r0, #12]
 802166a:	7383      	strbhi	r3, [r0, #14]
 802166c:	4770      	bx	lr
	...

08021670 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021670:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021674:	4604      	mov	r4, r0
 8021676:	4698      	mov	r8, r3
 8021678:	8880      	ldrh	r0, [r0, #4]
 802167a:	4617      	mov	r7, r2
 802167c:	4b1d      	ldr	r3, [pc, #116]	; (80216f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802167e:	460e      	mov	r6, r1
 8021680:	f8ad 0006 	strh.w	r0, [sp, #6]
 8021684:	eba8 0000 	sub.w	r0, r8, r0
 8021688:	9300      	str	r3, [sp, #0]
 802168a:	2300      	movs	r3, #0
 802168c:	b280      	uxth	r0, r0
 802168e:	8aa2      	ldrh	r2, [r4, #20]
 8021690:	f88d 3004 	strb.w	r3, [sp, #4]
 8021694:	b203      	sxth	r3, r0
 8021696:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802169a:	88e1      	ldrh	r1, [r4, #6]
 802169c:	2b00      	cmp	r3, #0
 802169e:	f8ad 800a 	strh.w	r8, [sp, #10]
 80216a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80216a6:	bfb8      	it	lt
 80216a8:	4240      	neglt	r0, r0
 80216aa:	f8ad 500c 	strh.w	r5, [sp, #12]
 80216ae:	bfb8      	it	lt
 80216b0:	b203      	sxthlt	r3, r0
 80216b2:	4293      	cmp	r3, r2
 80216b4:	dc08      	bgt.n	80216c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80216b6:	1a69      	subs	r1, r5, r1
 80216b8:	b289      	uxth	r1, r1
 80216ba:	b20b      	sxth	r3, r1
 80216bc:	2b00      	cmp	r3, #0
 80216be:	bfbc      	itt	lt
 80216c0:	4249      	neglt	r1, r1
 80216c2:	b20b      	sxthlt	r3, r1
 80216c4:	429a      	cmp	r2, r3
 80216c6:	da13      	bge.n	80216f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80216c8:	6920      	ldr	r0, [r4, #16]
 80216ca:	4669      	mov	r1, sp
 80216cc:	eba8 0606 	sub.w	r6, r8, r6
 80216d0:	1bef      	subs	r7, r5, r7
 80216d2:	6803      	ldr	r3, [r0, #0]
 80216d4:	685b      	ldr	r3, [r3, #4]
 80216d6:	4798      	blx	r3
 80216d8:	2300      	movs	r3, #0
 80216da:	2001      	movs	r0, #1
 80216dc:	8166      	strh	r6, [r4, #10]
 80216de:	8123      	strh	r3, [r4, #8]
 80216e0:	81a7      	strh	r7, [r4, #12]
 80216e2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80216e6:	80e5      	strh	r5, [r4, #6]
 80216e8:	73a0      	strb	r0, [r4, #14]
 80216ea:	b004      	add	sp, #16
 80216ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216f0:	2000      	movs	r0, #0
 80216f2:	e7fa      	b.n	80216ea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80216f4:	080272b0 	.word	0x080272b0

080216f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80216f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216fa:	461e      	mov	r6, r3
 80216fc:	1e4b      	subs	r3, r1, #1
 80216fe:	b085      	sub	sp, #20
 8021700:	4604      	mov	r4, r0
 8021702:	2b01      	cmp	r3, #1
 8021704:	460d      	mov	r5, r1
 8021706:	4617      	mov	r7, r2
 8021708:	d84b      	bhi.n	80217a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802170a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802170e:	1cd3      	adds	r3, r2, #3
 8021710:	b29b      	uxth	r3, r3
 8021712:	2b06      	cmp	r3, #6
 8021714:	d916      	bls.n	8021744 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021716:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80217b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802171a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802171e:	f8cd c004 	str.w	ip, [sp, #4]
 8021722:	f04f 0c00 	mov.w	ip, #0
 8021726:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802172a:	6900      	ldr	r0, [r0, #16]
 802172c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021730:	a901      	add	r1, sp, #4
 8021732:	f88d c008 	strb.w	ip, [sp, #8]
 8021736:	f8ad 200a 	strh.w	r2, [sp, #10]
 802173a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802173e:	6803      	ldr	r3, [r0, #0]
 8021740:	689b      	ldr	r3, [r3, #8]
 8021742:	4798      	blx	r3
 8021744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021748:	1cd3      	adds	r3, r2, #3
 802174a:	b29b      	uxth	r3, r3
 802174c:	2b06      	cmp	r3, #6
 802174e:	d916      	bls.n	802177e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021750:	f8df c064 	ldr.w	ip, [pc, #100]	; 80217b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021754:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021758:	f8cd c004 	str.w	ip, [sp, #4]
 802175c:	f04f 0c01 	mov.w	ip, #1
 8021760:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021764:	6920      	ldr	r0, [r4, #16]
 8021766:	f8ad 100c 	strh.w	r1, [sp, #12]
 802176a:	a901      	add	r1, sp, #4
 802176c:	f88d c008 	strb.w	ip, [sp, #8]
 8021770:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021774:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021778:	6803      	ldr	r3, [r0, #0]
 802177a:	689b      	ldr	r3, [r3, #8]
 802177c:	4798      	blx	r3
 802177e:	4b0d      	ldr	r3, [pc, #52]	; (80217b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021780:	a901      	add	r1, sp, #4
 8021782:	6920      	ldr	r0, [r4, #16]
 8021784:	9301      	str	r3, [sp, #4]
 8021786:	2300      	movs	r3, #0
 8021788:	f88d 5008 	strb.w	r5, [sp, #8]
 802178c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021790:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021794:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021798:	6803      	ldr	r3, [r0, #0]
 802179a:	681b      	ldr	r3, [r3, #0]
 802179c:	4798      	blx	r3
 802179e:	b005      	add	sp, #20
 80217a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217a2:	2900      	cmp	r1, #0
 80217a4:	d1eb      	bne.n	802177e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80217a6:	80a2      	strh	r2, [r4, #4]
 80217a8:	80c6      	strh	r6, [r0, #6]
 80217aa:	60a1      	str	r1, [r4, #8]
 80217ac:	81a1      	strh	r1, [r4, #12]
 80217ae:	73a1      	strb	r1, [r4, #14]
 80217b0:	e7e5      	b.n	802177e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80217b2:	bf00      	nop
 80217b4:	0802729c 	.word	0x0802729c
 80217b8:	080272c4 	.word	0x080272c4

080217bc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 80217bc:	10c9      	asrs	r1, r1, #3
 80217be:	2900      	cmp	r1, #0
 80217c0:	bfb8      	it	lt
 80217c2:	4249      	neglt	r1, r1
 80217c4:	2801      	cmp	r0, #1
 80217c6:	d108      	bne.n	80217da <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80217c8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80217cc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80217d0:	4601      	mov	r1, r0
 80217d2:	dd02      	ble.n	80217da <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80217d4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80217d8:	4770      	bx	lr
 80217da:	29ff      	cmp	r1, #255	; 0xff
 80217dc:	bfa8      	it	ge
 80217de:	21ff      	movge	r1, #255	; 0xff
 80217e0:	4608      	mov	r0, r1
 80217e2:	4770      	bx	lr

080217e4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80217e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217e8:	688c      	ldr	r4, [r1, #8]
 80217ea:	b087      	sub	sp, #28
 80217ec:	4607      	mov	r7, r0
 80217ee:	2c00      	cmp	r4, #0
 80217f0:	db2b      	blt.n	802184a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80217f2:	6803      	ldr	r3, [r0, #0]
 80217f4:	691a      	ldr	r2, [r3, #16]
 80217f6:	42a2      	cmp	r2, r4
 80217f8:	dd27      	ble.n	802184a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80217fa:	685a      	ldr	r2, [r3, #4]
 80217fc:	695e      	ldr	r6, [r3, #20]
 80217fe:	68cd      	ldr	r5, [r1, #12]
 8021800:	fb06 2604 	mla	r6, r6, r4, r2
 8021804:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8021808:	698a      	ldr	r2, [r1, #24]
 802180a:	f893 a008 	ldrb.w	sl, [r3, #8]
 802180e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8021812:	9205      	str	r2, [sp, #20]
 8021814:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8021818:	9b05      	ldr	r3, [sp, #20]
 802181a:	6839      	ldr	r1, [r7, #0]
 802181c:	eb03 0c02 	add.w	ip, r3, r2
 8021820:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8021824:	68c9      	ldr	r1, [r1, #12]
 8021826:	1898      	adds	r0, r3, r2
 8021828:	4288      	cmp	r0, r1
 802182a:	db02      	blt.n	8021832 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802182c:	1a8b      	subs	r3, r1, r2
 802182e:	2b00      	cmp	r3, #0
 8021830:	dd09      	ble.n	8021846 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	6801      	ldr	r1, [r0, #0]
 8021836:	9400      	str	r4, [sp, #0]
 8021838:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802183c:	4653      	mov	r3, sl
 802183e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8021842:	4631      	mov	r1, r6
 8021844:	47d8      	blx	fp
 8021846:	3d01      	subs	r5, #1
 8021848:	d1e4      	bne.n	8021814 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802184a:	b007      	add	sp, #28
 802184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021850 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021850:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8021854:	b90b      	cbnz	r3, 802185a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8021856:	f001 b991 	b.w	8022b7c <_ZN8touchgfx7Outline6lineToEii>
 802185a:	4770      	bx	lr

0802185c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021860:	4604      	mov	r4, r0
 8021862:	2600      	movs	r6, #0
 8021864:	4b8f      	ldr	r3, [pc, #572]	; (8021aa4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8021866:	f100 0518 	add.w	r5, r0, #24
 802186a:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802186e:	b086      	sub	sp, #24
 8021870:	4690      	mov	r8, r2
 8021872:	e9c0 3100 	strd	r3, r1, [r0]
 8021876:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802187a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802187e:	4628      	mov	r0, r5
 8021880:	f001 fba0 	bl	8022fc4 <_ZN8touchgfx15RenderingBufferC1Ev>
 8021884:	4638      	mov	r0, r7
 8021886:	f000 fb45 	bl	8021f14 <_ZN8touchgfx7OutlineC1Ev>
 802188a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802188e:	f001 fb41 	bl	8022f14 <_ZN8touchgfx8ScanlineC1Ev>
 8021892:	2301      	movs	r3, #1
 8021894:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8021898:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802189c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80218a0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80218a4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80218a8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80218ac:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 80218b0:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 80218b4:	f7f2 ff36 	bl	8014724 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80218b8:	b928      	cbnz	r0, 80218c6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 80218ba:	4b7b      	ldr	r3, [pc, #492]	; (8021aa8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80218bc:	212d      	movs	r1, #45	; 0x2d
 80218be:	4a7b      	ldr	r2, [pc, #492]	; (8021aac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80218c0:	487b      	ldr	r0, [pc, #492]	; (8021ab0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80218c2:	f001 fc9f 	bl	8023204 <__assert_func>
 80218c6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80218ca:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80218ce:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80218d2:	4410      	add	r0, r2
 80218d4:	9602      	str	r6, [sp, #8]
 80218d6:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80218da:	b280      	uxth	r0, r0
 80218dc:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80218e0:	fa0f fa80 	sxth.w	sl, r0
 80218e4:	f1ba 0f00 	cmp.w	sl, #0
 80218e8:	dd70      	ble.n	80219cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 80218ea:	4591      	cmp	r9, r2
 80218ec:	dd6e      	ble.n	80219cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 80218ee:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80218f2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80218f6:	440b      	add	r3, r1
 80218f8:	b29b      	uxth	r3, r3
 80218fa:	b21e      	sxth	r6, r3
 80218fc:	2e00      	cmp	r6, #0
 80218fe:	dd65      	ble.n	80219cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8021900:	458e      	cmp	lr, r1
 8021902:	dd63      	ble.n	80219cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8021904:	45d1      	cmp	r9, sl
 8021906:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802190a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802190e:	bfb8      	it	lt
 8021910:	fa1f f089 	uxthlt.w	r0, r9
 8021914:	45b6      	cmp	lr, r6
 8021916:	f8ad 2008 	strh.w	r2, [sp, #8]
 802191a:	bfb8      	it	lt
 802191c:	fa1f f38e 	uxthlt.w	r3, lr
 8021920:	1a80      	subs	r0, r0, r2
 8021922:	f8ad 100a 	strh.w	r1, [sp, #10]
 8021926:	1a5b      	subs	r3, r3, r1
 8021928:	f8ad 000c 	strh.w	r0, [sp, #12]
 802192c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021930:	f10d 0808 	add.w	r8, sp, #8
 8021934:	ae04      	add	r6, sp, #16
 8021936:	e898 0003 	ldmia.w	r8, {r0, r1}
 802193a:	e886 0003 	stmia.w	r6, {r0, r1}
 802193e:	f8dc 3000 	ldr.w	r3, [ip]
 8021942:	4660      	mov	r0, ip
 8021944:	4631      	mov	r1, r6
 8021946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021948:	4798      	blx	r3
 802194a:	6861      	ldr	r1, [r4, #4]
 802194c:	4640      	mov	r0, r8
 802194e:	3104      	adds	r1, #4
 8021950:	f7f4 fa02 	bl	8015d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021954:	4630      	mov	r0, r6
 8021956:	f7f4 fa17 	bl	8015d88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802195a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802195e:	f7f2 fe71 	bl	8014644 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8021962:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8021966:	4638      	mov	r0, r7
 8021968:	f000 fab0 	bl	8021ecc <_ZN8touchgfx7Outline5resetEv>
 802196c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021970:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021974:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8021978:	015b      	lsls	r3, r3, #5
 802197a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802197e:	0152      	lsls	r2, r2, #5
 8021980:	60e3      	str	r3, [r4, #12]
 8021982:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021986:	60a2      	str	r2, [r4, #8]
 8021988:	015b      	lsls	r3, r3, #5
 802198a:	6123      	str	r3, [r4, #16]
 802198c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8021990:	015b      	lsls	r3, r3, #5
 8021992:	6163      	str	r3, [r4, #20]
 8021994:	4b47      	ldr	r3, [pc, #284]	; (8021ab4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8021996:	6818      	ldr	r0, [r3, #0]
 8021998:	6803      	ldr	r3, [r0, #0]
 802199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802199c:	4798      	blx	r3
 802199e:	4606      	mov	r6, r0
 80219a0:	f7e3 f908 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80219a4:	6803      	ldr	r3, [r0, #0]
 80219a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80219a8:	4798      	blx	r3
 80219aa:	4607      	mov	r7, r0
 80219ac:	f7e3 f902 	bl	8004bb4 <_ZN8touchgfx3HAL3lcdEv>
 80219b0:	6803      	ldr	r3, [r0, #0]
 80219b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219b4:	4798      	blx	r3
 80219b6:	280d      	cmp	r0, #13
 80219b8:	d854      	bhi.n	8021a64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 80219ba:	e8df f000 	tbb	[pc, r0]
 80219be:	554b      	.short	0x554b
 80219c0:	2b6e0a66 	.word	0x2b6e0a66
 80219c4:	5f5f5f3b 	.word	0x5f5f5f3b
 80219c8:	6e6e5f5f 	.word	0x6e6e5f5f
 80219cc:	2300      	movs	r3, #0
 80219ce:	9303      	str	r3, [sp, #12]
 80219d0:	e7ae      	b.n	8021930 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 80219d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80219d6:	2108      	movs	r1, #8
 80219d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80219dc:	fb92 f1f1 	sdiv	r1, r2, r1
 80219e0:	fb07 1303 	mla	r3, r7, r3, r1
 80219e4:	441e      	add	r6, r3
 80219e6:	4253      	negs	r3, r2
 80219e8:	f002 0207 	and.w	r2, r2, #7
 80219ec:	f003 0307 	and.w	r3, r3, #7
 80219f0:	bf58      	it	pl
 80219f2:	425a      	negpl	r2, r3
 80219f4:	b2d2      	uxtb	r2, r2
 80219f6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80219fa:	4628      	mov	r0, r5
 80219fc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021a00:	6721      	str	r1, [r4, #112]	; 0x70
 8021a02:	e9cd 1700 	strd	r1, r7, [sp]
 8021a06:	4631      	mov	r1, r6
 8021a08:	f001 fae8 	bl	8022fdc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	b006      	add	sp, #24
 8021a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a14:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a18:	2104      	movs	r1, #4
 8021a1a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a1e:	fb92 f1f1 	sdiv	r1, r2, r1
 8021a22:	fb07 1303 	mla	r3, r7, r3, r1
 8021a26:	441e      	add	r6, r3
 8021a28:	4253      	negs	r3, r2
 8021a2a:	f002 0203 	and.w	r2, r2, #3
 8021a2e:	f003 0303 	and.w	r3, r3, #3
 8021a32:	e7dd      	b.n	80219f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8021a34:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a38:	2102      	movs	r1, #2
 8021a3a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a3e:	2a00      	cmp	r2, #0
 8021a40:	fb92 f1f1 	sdiv	r1, r2, r1
 8021a44:	f002 0201 	and.w	r2, r2, #1
 8021a48:	fb07 1303 	mla	r3, r7, r3, r1
 8021a4c:	bfb8      	it	lt
 8021a4e:	4252      	neglt	r2, r2
 8021a50:	441e      	add	r6, r3
 8021a52:	e7cf      	b.n	80219f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8021a54:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a58:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a5c:	437b      	muls	r3, r7
 8021a5e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021a62:	441e      	add	r6, r3
 8021a64:	2200      	movs	r2, #0
 8021a66:	e7c6      	b.n	80219f6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8021a68:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a6c:	2103      	movs	r1, #3
 8021a6e:	fb07 f203 	mul.w	r2, r7, r3
 8021a72:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8021a76:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021a7a:	e7f2      	b.n	8021a62 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8021a7c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a80:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a84:	fb07 2303 	mla	r3, r7, r3, r2
 8021a88:	e7eb      	b.n	8021a62 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8021a8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a8e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a92:	437b      	muls	r3, r7
 8021a94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021a98:	e7e3      	b.n	8021a62 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8021a9a:	4b07      	ldr	r3, [pc, #28]	; (8021ab8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8021a9c:	216c      	movs	r1, #108	; 0x6c
 8021a9e:	4a03      	ldr	r2, [pc, #12]	; (8021aac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8021aa0:	e70e      	b.n	80218c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8021aa2:	bf00      	nop
 8021aa4:	080286e0 	.word	0x080286e0
 8021aa8:	0802862b 	.word	0x0802862b
 8021aac:	080286e8 	.word	0x080286e8
 8021ab0:	08028687 	.word	0x08028687
 8021ab4:	2005653c 	.word	0x2005653c
 8021ab8:	080286bb 	.word	0x080286bb

08021abc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8021abc:	6812      	ldr	r2, [r2, #0]
 8021abe:	2a00      	cmp	r2, #0
 8021ac0:	db0b      	blt.n	8021ada <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8021ac2:	9800      	ldr	r0, [sp, #0]
 8021ac4:	6800      	ldr	r0, [r0, #0]
 8021ac6:	4290      	cmp	r0, r2
 8021ac8:	bfd4      	ite	le
 8021aca:	2002      	movle	r0, #2
 8021acc:	2000      	movgt	r0, #0
 8021ace:	680a      	ldr	r2, [r1, #0]
 8021ad0:	2a00      	cmp	r2, #0
 8021ad2:	da04      	bge.n	8021ade <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8021ad4:	f040 0004 	orr.w	r0, r0, #4
 8021ad8:	4770      	bx	lr
 8021ada:	2001      	movs	r0, #1
 8021adc:	e7f7      	b.n	8021ace <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	4293      	cmp	r3, r2
 8021ae2:	bfd8      	it	le
 8021ae4:	f040 0008 	orrle.w	r0, r0, #8
 8021ae8:	4770      	bx	lr
	...

08021aec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021aec:	4b07      	ldr	r3, [pc, #28]	; (8021b0c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8021aee:	b510      	push	{r4, lr}
 8021af0:	781b      	ldrb	r3, [r3, #0]
 8021af2:	2b01      	cmp	r3, #1
 8021af4:	d108      	bne.n	8021b08 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8021af6:	6843      	ldr	r3, [r0, #4]
 8021af8:	6814      	ldr	r4, [r2, #0]
 8021afa:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8021afe:	680b      	ldr	r3, [r1, #0]
 8021b00:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8021b04:	6013      	str	r3, [r2, #0]
 8021b06:	600c      	str	r4, [r1, #0]
 8021b08:	bd10      	pop	{r4, pc}
 8021b0a:	bf00      	nop
 8021b0c:	20056534 	.word	0x20056534

08021b10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b12:	b085      	sub	sp, #20
 8021b14:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8021b18:	4604      	mov	r4, r0
 8021b1a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8021b1e:	b33b      	cbz	r3, 8021b70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8021b20:	aa02      	add	r2, sp, #8
 8021b22:	a903      	add	r1, sp, #12
 8021b24:	f7ff ffe2 	bl	8021aec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021b28:	68a3      	ldr	r3, [r4, #8]
 8021b2a:	9e03      	ldr	r6, [sp, #12]
 8021b2c:	aa02      	add	r2, sp, #8
 8021b2e:	9f02      	ldr	r7, [sp, #8]
 8021b30:	a903      	add	r1, sp, #12
 8021b32:	1af6      	subs	r6, r6, r3
 8021b34:	68e3      	ldr	r3, [r4, #12]
 8021b36:	4620      	mov	r0, r4
 8021b38:	1aff      	subs	r7, r7, r3
 8021b3a:	f104 0314 	add.w	r3, r4, #20
 8021b3e:	9603      	str	r6, [sp, #12]
 8021b40:	9300      	str	r3, [sp, #0]
 8021b42:	f104 0310 	add.w	r3, r4, #16
 8021b46:	9702      	str	r7, [sp, #8]
 8021b48:	f7ff ffb8 	bl	8021abc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8021b4c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8021b50:	4605      	mov	r5, r0
 8021b52:	b97b      	cbnz	r3, 8021b74 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8021b54:	463a      	mov	r2, r7
 8021b56:	4631      	mov	r1, r6
 8021b58:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8021b5c:	f7ff fe78 	bl	8021850 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021b60:	9b03      	ldr	r3, [sp, #12]
 8021b62:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8021b66:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8021b6a:	9b02      	ldr	r3, [sp, #8]
 8021b6c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8021b70:	b005      	add	sp, #20
 8021b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b74:	b110      	cbz	r0, 8021b7c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8021b76:	ea13 0200 	ands.w	r2, r3, r0
 8021b7a:	d11c      	bne.n	8021bb6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8021b7c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8021b80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8021b84:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8021b88:	b188      	cbz	r0, 8021bae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8021b8a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8021b8e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8021b92:	b913      	cbnz	r3, 8021b9a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8021b94:	4630      	mov	r0, r6
 8021b96:	f001 f821 	bl	8022bdc <_ZN8touchgfx7Outline6moveToEii>
 8021b9a:	2300      	movs	r3, #0
 8021b9c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8021ba0:	2301      	movs	r3, #1
 8021ba2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8021ba6:	4630      	mov	r0, r6
 8021ba8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8021bac:	e7d6      	b.n	8021b5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8021bae:	4630      	mov	r0, r6
 8021bb0:	f7ff fe4e 	bl	8021850 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021bb4:	e7f7      	b.n	8021ba6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8021bb6:	4615      	mov	r5, r2
 8021bb8:	e7d2      	b.n	8021b60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08021bba <_ZN8touchgfx6Canvas5closeEv>:
 8021bba:	b538      	push	{r3, r4, r5, lr}
 8021bbc:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8021bc0:	4604      	mov	r4, r0
 8021bc2:	b993      	cbnz	r3, 8021bea <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021bc4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8021bc8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8021bcc:	4213      	tst	r3, r2
 8021bce:	d10c      	bne.n	8021bea <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021bd0:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8021bd4:	b123      	cbz	r3, 8021be0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8021bd6:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 8021bda:	4628      	mov	r0, r5
 8021bdc:	f7ff fe38 	bl	8021850 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021be0:	4628      	mov	r0, r5
 8021be2:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8021be6:	f7ff fe33 	bl	8021850 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021bea:	2300      	movs	r3, #0
 8021bec:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8021bf0:	bd38      	pop	{r3, r4, r5, pc}

08021bf2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8021bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bf4:	b085      	sub	sp, #20
 8021bf6:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8021bfa:	4604      	mov	r4, r0
 8021bfc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8021c00:	b353      	cbz	r3, 8021c58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8021c02:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8021c06:	b90b      	cbnz	r3, 8021c0c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8021c08:	f7ff ffd7 	bl	8021bba <_ZN8touchgfx6Canvas5closeEv>
 8021c0c:	aa02      	add	r2, sp, #8
 8021c0e:	a903      	add	r1, sp, #12
 8021c10:	4620      	mov	r0, r4
 8021c12:	f7ff ff6b 	bl	8021aec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021c16:	68a3      	ldr	r3, [r4, #8]
 8021c18:	9d03      	ldr	r5, [sp, #12]
 8021c1a:	aa02      	add	r2, sp, #8
 8021c1c:	9e02      	ldr	r6, [sp, #8]
 8021c1e:	a903      	add	r1, sp, #12
 8021c20:	1aed      	subs	r5, r5, r3
 8021c22:	68e3      	ldr	r3, [r4, #12]
 8021c24:	4620      	mov	r0, r4
 8021c26:	1af6      	subs	r6, r6, r3
 8021c28:	f104 0314 	add.w	r3, r4, #20
 8021c2c:	9503      	str	r5, [sp, #12]
 8021c2e:	9300      	str	r3, [sp, #0]
 8021c30:	f104 0310 	add.w	r3, r4, #16
 8021c34:	9602      	str	r6, [sp, #8]
 8021c36:	f7ff ff41 	bl	8021abc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8021c3a:	4607      	mov	r7, r0
 8021c3c:	b170      	cbz	r0, 8021c5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8021c3e:	2301      	movs	r3, #1
 8021c40:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8021c44:	9a03      	ldr	r2, [sp, #12]
 8021c46:	9b02      	ldr	r3, [sp, #8]
 8021c48:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8021c4c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8021c50:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8021c54:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8021c58:	b005      	add	sp, #20
 8021c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c5c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8021c60:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8021c64:	b92b      	cbnz	r3, 8021c72 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8021c66:	4632      	mov	r2, r6
 8021c68:	4629      	mov	r1, r5
 8021c6a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8021c6e:	f000 ffb5 	bl	8022bdc <_ZN8touchgfx7Outline6moveToEii>
 8021c72:	2300      	movs	r3, #0
 8021c74:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8021c78:	2301      	movs	r3, #1
 8021c7a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8021c7e:	e7e1      	b.n	8021c44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08021c80 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8021c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c84:	4604      	mov	r4, r0
 8021c86:	b087      	sub	sp, #28
 8021c88:	9105      	str	r1, [sp, #20]
 8021c8a:	f001 f8ec 	bl	8022e66 <_ZN8touchgfx7Outline8getCellsEv>
 8021c8e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8021c92:	4605      	mov	r5, r0
 8021c94:	f1b9 0f00 	cmp.w	r9, #0
 8021c98:	d103      	bne.n	8021ca2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8021c9a:	2001      	movs	r0, #1
 8021c9c:	b007      	add	sp, #28
 8021c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ca2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8021ca6:	2e00      	cmp	r6, #0
 8021ca8:	d139      	bne.n	8021d1e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8021caa:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8021cae:	f105 0708 	add.w	r7, r5, #8
 8021cb2:	4640      	mov	r0, r8
 8021cb4:	f001 f919 	bl	8022eea <_ZN8touchgfx8Scanline5resetEv>
 8021cb8:	f109 33ff 	add.w	r3, r9, #4294967295
 8021cbc:	9303      	str	r3, [sp, #12]
 8021cbe:	f9b5 b000 	ldrsh.w	fp, [r5]
 8021cc2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8021cc6:	46da      	mov	sl, fp
 8021cc8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8021ccc:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8021cd0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8021cd4:	9b03      	ldr	r3, [sp, #12]
 8021cd6:	4416      	add	r6, r2
 8021cd8:	9504      	str	r5, [sp, #16]
 8021cda:	463d      	mov	r5, r7
 8021cdc:	3b01      	subs	r3, #1
 8021cde:	9303      	str	r3, [sp, #12]
 8021ce0:	3301      	adds	r3, #1
 8021ce2:	d01e      	beq.n	8021d22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8021ce4:	3708      	adds	r7, #8
 8021ce6:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8021cea:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8021cee:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8021cf2:	4290      	cmp	r0, r2
 8021cf4:	d11e      	bne.n	8021d34 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8021cf6:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8021cfa:	4411      	add	r1, r2
 8021cfc:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8021d00:	e7e8      	b.n	8021cd4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8021d02:	1c91      	adds	r1, r2, #2
 8021d04:	f04f 0301 	mov.w	r3, #1
 8021d08:	65e1      	str	r1, [r4, #92]	; 0x5c
 8021d0a:	8053      	strh	r3, [r2, #2]
 8021d0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8021d0e:	1c91      	adds	r1, r2, #2
 8021d10:	65a1      	str	r1, [r4, #88]	; 0x58
 8021d12:	f8a2 b002 	strh.w	fp, [r2, #2]
 8021d16:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8021d18:	3201      	adds	r2, #1
 8021d1a:	6562      	str	r2, [r4, #84]	; 0x54
 8021d1c:	e03a      	b.n	8021d94 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8021d1e:	2000      	movs	r0, #0
 8021d20:	e7bc      	b.n	8021c9c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8021d22:	b951      	cbnz	r1, 8021d3a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8021d24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d0b7      	beq.n	8021c9a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8021d2a:	4641      	mov	r1, r8
 8021d2c:	9805      	ldr	r0, [sp, #20]
 8021d2e:	f7ff fd59 	bl	80217e4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021d32:	e7b2      	b.n	8021c9a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8021d34:	2900      	cmp	r1, #0
 8021d36:	d035      	beq.n	8021da4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8021d38:	9504      	str	r5, [sp, #16]
 8021d3a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8021d3e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021d42:	f7ff fd3b 	bl	80217bc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8021d46:	4605      	mov	r5, r0
 8021d48:	b330      	cbz	r0, 8021d98 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021d4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8021d4c:	b182      	cbz	r2, 8021d70 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8021d4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8021d50:	4591      	cmp	r9, r2
 8021d52:	d00d      	beq.n	8021d70 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8021d54:	4641      	mov	r1, r8
 8021d56:	9805      	ldr	r0, [sp, #20]
 8021d58:	f7ff fd44 	bl	80217e4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021d5c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021d60:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8021d62:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8021d66:	65e2      	str	r2, [r4, #92]	; 0x5c
 8021d68:	2300      	movs	r3, #0
 8021d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021d6c:	6563      	str	r3, [r4, #84]	; 0x54
 8021d6e:	65a2      	str	r2, [r4, #88]	; 0x58
 8021d70:	f1bb 0f00 	cmp.w	fp, #0
 8021d74:	db10      	blt.n	8021d98 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021d76:	f7f2 fce3 	bl	8014740 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8021d7a:	4583      	cmp	fp, r0
 8021d7c:	da0c      	bge.n	8021d98 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021d7e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8021d80:	f802 500b 	strb.w	r5, [r2, fp]
 8021d84:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8021d86:	3201      	adds	r2, #1
 8021d88:	4593      	cmp	fp, r2
 8021d8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8021d8c:	d1b9      	bne.n	8021d02 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8021d8e:	8811      	ldrh	r1, [r2, #0]
 8021d90:	3101      	adds	r1, #1
 8021d92:	8011      	strh	r1, [r2, #0]
 8021d94:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8021d98:	9b03      	ldr	r3, [sp, #12]
 8021d9a:	3301      	adds	r3, #1
 8021d9c:	d0c2      	beq.n	8021d24 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8021d9e:	f10b 0a01 	add.w	sl, fp, #1
 8021da2:	9d04      	ldr	r5, [sp, #16]
 8021da4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8021da8:	4553      	cmp	r3, sl
 8021daa:	dd88      	ble.n	8021cbe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021dac:	01b1      	lsls	r1, r6, #6
 8021dae:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021db2:	f7ff fd03 	bl	80217bc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8021db6:	4683      	mov	fp, r0
 8021db8:	2800      	cmp	r0, #0
 8021dba:	d080      	beq.n	8021cbe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021dbe:	b183      	cbz	r3, 8021de2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8021dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8021dc2:	4599      	cmp	r9, r3
 8021dc4:	d00d      	beq.n	8021de2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8021dc6:	4641      	mov	r1, r8
 8021dc8:	9805      	ldr	r0, [sp, #20]
 8021dca:	f7ff fd0b 	bl	80217e4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021dce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021dd2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8021dd6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8021dd8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8021dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ddc:	65a3      	str	r3, [r4, #88]	; 0x58
 8021dde:	2300      	movs	r3, #0
 8021de0:	6563      	str	r3, [r4, #84]	; 0x54
 8021de2:	f9b5 3000 	ldrsh.w	r3, [r5]
 8021de6:	464a      	mov	r2, r9
 8021de8:	f8cd b000 	str.w	fp, [sp]
 8021dec:	4651      	mov	r1, sl
 8021dee:	eba3 030a 	sub.w	r3, r3, sl
 8021df2:	4640      	mov	r0, r8
 8021df4:	f001 f8a4 	bl	8022f40 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8021df8:	e761      	b.n	8021cbe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08021dfa <_ZN8touchgfx6Canvas6renderEh>:
 8021dfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021dfc:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8021e00:	4604      	mov	r4, r0
 8021e02:	460d      	mov	r5, r1
 8021e04:	b913      	cbnz	r3, 8021e0c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8021e06:	2001      	movs	r0, #1
 8021e08:	b003      	add	sp, #12
 8021e0a:	bd30      	pop	{r4, r5, pc}
 8021e0c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d12f      	bne.n	8021e74 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8021e14:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d0f4      	beq.n	8021e06 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8021e1c:	6840      	ldr	r0, [r0, #4]
 8021e1e:	6803      	ldr	r3, [r0, #0]
 8021e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021e22:	4798      	blx	r3
 8021e24:	fb10 f105 	smulbb	r1, r0, r5
 8021e28:	b288      	uxth	r0, r1
 8021e2a:	1c41      	adds	r1, r0, #1
 8021e2c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021e30:	120d      	asrs	r5, r1, #8
 8021e32:	d0e8      	beq.n	8021e06 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8021e34:	4620      	mov	r0, r4
 8021e36:	f7ff fec0 	bl	8021bba <_ZN8touchgfx6Canvas5closeEv>
 8021e3a:	6860      	ldr	r0, [r4, #4]
 8021e3c:	6803      	ldr	r3, [r0, #0]
 8021e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8021e40:	4798      	blx	r3
 8021e42:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8021e46:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8021e4a:	8082      	strh	r2, [r0, #4]
 8021e4c:	80c3      	strh	r3, [r0, #6]
 8021e4e:	6860      	ldr	r0, [r4, #4]
 8021e50:	6803      	ldr	r3, [r0, #0]
 8021e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8021e54:	4798      	blx	r3
 8021e56:	7205      	strb	r5, [r0, #8]
 8021e58:	6860      	ldr	r0, [r4, #4]
 8021e5a:	6803      	ldr	r3, [r0, #0]
 8021e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8021e5e:	4798      	blx	r3
 8021e60:	f104 0318 	add.w	r3, r4, #24
 8021e64:	4669      	mov	r1, sp
 8021e66:	e9cd 3000 	strd	r3, r0, [sp]
 8021e6a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8021e6e:	f7ff ff07 	bl	8021c80 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8021e72:	e7c9      	b.n	8021e08 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8021e74:	2000      	movs	r0, #0
 8021e76:	e7c7      	b.n	8021e08 <_ZN8touchgfx6Canvas6renderEh+0xe>

08021e78 <_ZN8touchgfx6CanvasD1Ev>:
 8021e78:	b538      	push	{r3, r4, r5, lr}
 8021e7a:	4605      	mov	r5, r0
 8021e7c:	4b08      	ldr	r3, [pc, #32]	; (8021ea0 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8021e7e:	4604      	mov	r4, r0
 8021e80:	f845 3b30 	str.w	r3, [r5], #48
 8021e84:	4b07      	ldr	r3, [pc, #28]	; (8021ea4 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8021e86:	6818      	ldr	r0, [r3, #0]
 8021e88:	6803      	ldr	r3, [r0, #0]
 8021e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e8c:	4798      	blx	r3
 8021e8e:	4628      	mov	r0, r5
 8021e90:	f000 f814 	bl	8021ebc <_ZN8touchgfx7OutlineD1Ev>
 8021e94:	f104 0018 	add.w	r0, r4, #24
 8021e98:	f001 f88b 	bl	8022fb2 <_ZN8touchgfx15RenderingBufferD1Ev>
 8021e9c:	4620      	mov	r0, r4
 8021e9e:	bd38      	pop	{r3, r4, r5, pc}
 8021ea0:	080286e0 	.word	0x080286e0
 8021ea4:	2005653c 	.word	0x2005653c

08021ea8 <_ZN8touchgfx6CanvasD0Ev>:
 8021ea8:	b510      	push	{r4, lr}
 8021eaa:	4604      	mov	r4, r0
 8021eac:	f7ff ffe4 	bl	8021e78 <_ZN8touchgfx6CanvasD1Ev>
 8021eb0:	21bc      	movs	r1, #188	; 0xbc
 8021eb2:	4620      	mov	r0, r4
 8021eb4:	f001 f89f 	bl	8022ff6 <_ZdlPvj>
 8021eb8:	4620      	mov	r0, r4
 8021eba:	bd10      	pop	{r4, pc}

08021ebc <_ZN8touchgfx7OutlineD1Ev>:
 8021ebc:	4770      	bx	lr

08021ebe <_ZN8touchgfx7OutlineD0Ev>:
 8021ebe:	b510      	push	{r4, lr}
 8021ec0:	4604      	mov	r4, r0
 8021ec2:	2148      	movs	r1, #72	; 0x48
 8021ec4:	f001 f897 	bl	8022ff6 <_ZdlPvj>
 8021ec8:	4620      	mov	r0, r4
 8021eca:	bd10      	pop	{r4, pc}

08021ecc <_ZN8touchgfx7Outline5resetEv>:
 8021ecc:	b510      	push	{r4, lr}
 8021ece:	4604      	mov	r4, r0
 8021ed0:	f7f2 fc4e 	bl	8014770 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8021ed4:	60e0      	str	r0, [r4, #12]
 8021ed6:	f7f2 fc51 	bl	801477c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8021eda:	68e3      	ldr	r3, [r4, #12]
 8021edc:	2200      	movs	r2, #0
 8021ede:	08c0      	lsrs	r0, r0, #3
 8021ee0:	6123      	str	r3, [r4, #16]
 8021ee2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021ee6:	6060      	str	r0, [r4, #4]
 8021ee8:	82a3      	strh	r3, [r4, #20]
 8021eea:	82e3      	strh	r3, [r4, #22]
 8021eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021eee:	60a2      	str	r2, [r4, #8]
 8021ef0:	f023 0301 	bic.w	r3, r3, #1
 8021ef4:	8322      	strh	r2, [r4, #24]
 8021ef6:	8362      	strh	r2, [r4, #26]
 8021ef8:	f043 0302 	orr.w	r3, r3, #2
 8021efc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8021f00:	63e3      	str	r3, [r4, #60]	; 0x3c
 8021f02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021f06:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8021f0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021f0e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8021f12:	bd10      	pop	{r4, pc}

08021f14 <_ZN8touchgfx7OutlineC1Ev>:
 8021f14:	4b0f      	ldr	r3, [pc, #60]	; (8021f54 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8021f16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021f1a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8021f1e:	b510      	push	{r4, lr}
 8021f20:	6003      	str	r3, [r0, #0]
 8021f22:	2300      	movs	r3, #0
 8021f24:	4604      	mov	r4, r0
 8021f26:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8021f2a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8021f2e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021f32:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8021f36:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8021f3a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8021f3e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8021f42:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8021f46:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8021f4a:	f7ff ffbf 	bl	8021ecc <_ZN8touchgfx7Outline5resetEv>
 8021f4e:	4620      	mov	r0, r4
 8021f50:	bd10      	pop	{r4, pc}
 8021f52:	bf00      	nop
 8021f54:	080287b0 	.word	0x080287b0

08021f58 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8021f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f5c:	b095      	sub	sp, #84	; 0x54
 8021f5e:	4604      	mov	r4, r0
 8021f60:	1155      	asrs	r5, r2, #5
 8021f62:	f002 061f 	and.w	r6, r2, #31
 8021f66:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021f68:	1157      	asrs	r7, r2, #5
 8021f6a:	9304      	str	r3, [sp, #16]
 8021f6c:	1153      	asrs	r3, r2, #5
 8021f6e:	9300      	str	r3, [sp, #0]
 8021f70:	1143      	asrs	r3, r0, #5
 8021f72:	930c      	str	r3, [sp, #48]	; 0x30
 8021f74:	f000 031f 	and.w	r3, r0, #31
 8021f78:	9303      	str	r3, [sp, #12]
 8021f7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021f7c:	42ab      	cmp	r3, r5
 8021f7e:	bfc8      	it	gt
 8021f80:	462b      	movgt	r3, r5
 8021f82:	ea4f 1562 	mov.w	r5, r2, asr #5
 8021f86:	bfc8      	it	gt
 8021f88:	6323      	strgt	r3, [r4, #48]	; 0x30
 8021f8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021f8c:	42ab      	cmp	r3, r5
 8021f8e:	bfd8      	it	le
 8021f90:	462b      	movle	r3, r5
 8021f92:	ea4f 1560 	mov.w	r5, r0, asr #5
 8021f96:	bfdc      	itt	le
 8021f98:	3301      	addle	r3, #1
 8021f9a:	63a3      	strle	r3, [r4, #56]	; 0x38
 8021f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021f9e:	42ab      	cmp	r3, r5
 8021fa0:	bfc8      	it	gt
 8021fa2:	462b      	movgt	r3, r5
 8021fa4:	ea4f 1560 	mov.w	r5, r0, asr #5
 8021fa8:	bfc8      	it	gt
 8021faa:	6323      	strgt	r3, [r4, #48]	; 0x30
 8021fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021fae:	42ab      	cmp	r3, r5
 8021fb0:	bfd8      	it	le
 8021fb2:	462b      	movle	r3, r5
 8021fb4:	ea4f 1561 	mov.w	r5, r1, asr #5
 8021fb8:	bfdc      	itt	le
 8021fba:	3301      	addle	r3, #1
 8021fbc:	63a3      	strle	r3, [r4, #56]	; 0x38
 8021fbe:	9b04      	ldr	r3, [sp, #16]
 8021fc0:	eba3 0a01 	sub.w	sl, r3, r1
 8021fc4:	1143      	asrs	r3, r0, #5
 8021fc6:	429f      	cmp	r7, r3
 8021fc8:	f040 811d 	bne.w	8022206 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8021fcc:	9b04      	ldr	r3, [sp, #16]
 8021fce:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8021fd2:	9b03      	ldr	r3, [sp, #12]
 8021fd4:	429e      	cmp	r6, r3
 8021fd6:	d131      	bne.n	802203c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8021fd8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021fdc:	fa0f fb8b 	sxth.w	fp, fp
 8021fe0:	f9bd 2000 	ldrsh.w	r2, [sp]
 8021fe4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021fe8:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8021fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021ff0:	4281      	cmp	r1, r0
 8021ff2:	f000 80e6 	beq.w	80221c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8021ff6:	8b60      	ldrh	r0, [r4, #26]
 8021ff8:	8b21      	ldrh	r1, [r4, #24]
 8021ffa:	4301      	orrs	r1, r0
 8021ffc:	d00b      	beq.n	8022016 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	db09      	blt.n	8022016 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8022002:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022004:	428b      	cmp	r3, r1
 8022006:	da06      	bge.n	8022016 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8022008:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802200c:	4299      	cmp	r1, r3
 802200e:	d308      	bcc.n	8022022 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8022010:	2301      	movs	r3, #1
 8022012:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022016:	f8a4 b014 	strh.w	fp, [r4, #20]
 802201a:	2300      	movs	r3, #0
 802201c:	82e2      	strh	r2, [r4, #22]
 802201e:	8323      	strh	r3, [r4, #24]
 8022020:	e01f      	b.n	8022062 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8022022:	f104 0314 	add.w	r3, r4, #20
 8022026:	6925      	ldr	r5, [r4, #16]
 8022028:	cb03      	ldmia	r3!, {r0, r1}
 802202a:	6028      	str	r0, [r5, #0]
 802202c:	6069      	str	r1, [r5, #4]
 802202e:	6923      	ldr	r3, [r4, #16]
 8022030:	3308      	adds	r3, #8
 8022032:	6123      	str	r3, [r4, #16]
 8022034:	68a3      	ldr	r3, [r4, #8]
 8022036:	3301      	adds	r3, #1
 8022038:	60a3      	str	r3, [r4, #8]
 802203a:	e7ec      	b.n	8022016 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802203c:	9b04      	ldr	r3, [sp, #16]
 802203e:	45ab      	cmp	fp, r5
 8022040:	f001 011f 	and.w	r1, r1, #31
 8022044:	8b20      	ldrh	r0, [r4, #24]
 8022046:	f003 031f 	and.w	r3, r3, #31
 802204a:	8b62      	ldrh	r2, [r4, #26]
 802204c:	9305      	str	r3, [sp, #20]
 802204e:	9b03      	ldr	r3, [sp, #12]
 8022050:	eba3 0306 	sub.w	r3, r3, r6
 8022054:	d107      	bne.n	8022066 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 8022056:	4418      	add	r0, r3
 8022058:	8320      	strh	r0, [r4, #24]
 802205a:	9805      	ldr	r0, [sp, #20]
 802205c:	4401      	add	r1, r0
 802205e:	fb03 2301 	mla	r3, r3, r1, r2
 8022062:	8363      	strh	r3, [r4, #26]
 8022064:	e0ad      	b.n	80221c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8022066:	f1ba 0f00 	cmp.w	sl, #0
 802206a:	db33      	blt.n	80220d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 802206c:	2701      	movs	r7, #1
 802206e:	f1c1 0c20 	rsb	ip, r1, #32
 8022072:	9702      	str	r7, [sp, #8]
 8022074:	2720      	movs	r7, #32
 8022076:	fb03 f30c 	mul.w	r3, r3, ip
 802207a:	9701      	str	r7, [sp, #4]
 802207c:	9f01      	ldr	r7, [sp, #4]
 802207e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022082:	4439      	add	r1, r7
 8022084:	fb93 fcfa 	sdiv	ip, r3, sl
 8022088:	fb0a 331c 	mls	r3, sl, ip, r3
 802208c:	2b00      	cmp	r3, #0
 802208e:	bfbc      	itt	lt
 8022090:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8022094:	4453      	addlt	r3, sl
 8022096:	fb0c 2101 	mla	r1, ip, r1, r2
 802209a:	9a02      	ldr	r2, [sp, #8]
 802209c:	4460      	add	r0, ip
 802209e:	4415      	add	r5, r2
 80220a0:	f9bd 2000 	ldrsh.w	r2, [sp]
 80220a4:	b200      	sxth	r0, r0
 80220a6:	0417      	lsls	r7, r2, #16
 80220a8:	9200      	str	r2, [sp, #0]
 80220aa:	fa0f fe85 	sxth.w	lr, r5
 80220ae:	8320      	strh	r0, [r4, #24]
 80220b0:	9704      	str	r7, [sp, #16]
 80220b2:	b209      	sxth	r1, r1
 80220b4:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 80220b8:	9a04      	ldr	r2, [sp, #16]
 80220ba:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 80220be:	8361      	strh	r1, [r4, #26]
 80220c0:	eb0e 0902 	add.w	r9, lr, r2
 80220c4:	454f      	cmp	r7, r9
 80220c6:	d10d      	bne.n	80220e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 80220c8:	4ba0      	ldr	r3, [pc, #640]	; (802234c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 80220ca:	2177      	movs	r1, #119	; 0x77
 80220cc:	4aa0      	ldr	r2, [pc, #640]	; (8022350 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 80220ce:	48a1      	ldr	r0, [pc, #644]	; (8022354 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 80220d0:	f001 f898 	bl	8023204 <__assert_func>
 80220d4:	f04f 37ff 	mov.w	r7, #4294967295
 80220d8:	434b      	muls	r3, r1
 80220da:	f1ca 0a00 	rsb	sl, sl, #0
 80220de:	9702      	str	r7, [sp, #8]
 80220e0:	2700      	movs	r7, #0
 80220e2:	e7ca      	b.n	802207a <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 80220e4:	ea50 0201 	orrs.w	r2, r0, r1
 80220e8:	d00c      	beq.n	8022104 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 80220ea:	f1b8 0f00 	cmp.w	r8, #0
 80220ee:	db09      	blt.n	8022104 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 80220f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80220f2:	4588      	cmp	r8, r1
 80220f4:	da06      	bge.n	8022104 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 80220f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80220fa:	4288      	cmp	r0, r1
 80220fc:	d364      	bcc.n	80221c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80220fe:	2101      	movs	r1, #1
 8022100:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022104:	2100      	movs	r1, #0
 8022106:	9a00      	ldr	r2, [sp, #0]
 8022108:	45ab      	cmp	fp, r5
 802210a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802210e:	82e2      	strh	r2, [r4, #22]
 8022110:	4466      	add	r6, ip
 8022112:	8321      	strh	r1, [r4, #24]
 8022114:	8361      	strh	r1, [r4, #26]
 8022116:	d04b      	beq.n	80221b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8022118:	9a03      	ldr	r2, [sp, #12]
 802211a:	eba3 030a 	sub.w	r3, r3, sl
 802211e:	f04f 0800 	mov.w	r8, #0
 8022122:	1b91      	subs	r1, r2, r6
 8022124:	448c      	add	ip, r1
 8022126:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802212a:	fb9c f7fa 	sdiv	r7, ip, sl
 802212e:	fb0a cc17 	mls	ip, sl, r7, ip
 8022132:	f1bc 0f00 	cmp.w	ip, #0
 8022136:	bfbc      	itt	lt
 8022138:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802213c:	44d4      	addlt	ip, sl
 802213e:	1c7a      	adds	r2, r7, #1
 8022140:	9207      	str	r2, [sp, #28]
 8022142:	eb13 030c 	adds.w	r3, r3, ip
 8022146:	9a02      	ldr	r2, [sp, #8]
 8022148:	bf54      	ite	pl
 802214a:	9807      	ldrpl	r0, [sp, #28]
 802214c:	4638      	movmi	r0, r7
 802214e:	4415      	add	r5, r2
 8022150:	9a04      	ldr	r2, [sp, #16]
 8022152:	fa0f fe80 	sxth.w	lr, r0
 8022156:	4406      	add	r6, r0
 8022158:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802215c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8022160:	fa0f f985 	sxth.w	r9, r5
 8022164:	bf58      	it	pl
 8022166:	eba3 030a 	subpl.w	r3, r3, sl
 802216a:	4410      	add	r0, r2
 802216c:	b209      	sxth	r1, r1
 802216e:	444a      	add	r2, r9
 8022170:	f8a4 e018 	strh.w	lr, [r4, #24]
 8022174:	8361      	strh	r1, [r4, #26]
 8022176:	4290      	cmp	r0, r2
 8022178:	d0a6      	beq.n	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802217a:	ea5e 0201 	orrs.w	r2, lr, r1
 802217e:	d00d      	beq.n	802219c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8022180:	9a00      	ldr	r2, [sp, #0]
 8022182:	2a00      	cmp	r2, #0
 8022184:	db0a      	blt.n	802219c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8022186:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022188:	428a      	cmp	r2, r1
 802218a:	da07      	bge.n	802219c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802218c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022190:	4288      	cmp	r0, r1
 8022192:	d329      	bcc.n	80221e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8022194:	f04f 0201 	mov.w	r2, #1
 8022198:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802219c:	9a00      	ldr	r2, [sp, #0]
 802219e:	45ab      	cmp	fp, r5
 80221a0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80221a4:	82e2      	strh	r2, [r4, #22]
 80221a6:	f8a4 8018 	strh.w	r8, [r4, #24]
 80221aa:	f8a4 801a 	strh.w	r8, [r4, #26]
 80221ae:	d1c8      	bne.n	8022142 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 80221b0:	9b03      	ldr	r3, [sp, #12]
 80221b2:	9a01      	ldr	r2, [sp, #4]
 80221b4:	1b9e      	subs	r6, r3, r6
 80221b6:	9b05      	ldr	r3, [sp, #20]
 80221b8:	3320      	adds	r3, #32
 80221ba:	8326      	strh	r6, [r4, #24]
 80221bc:	1a9b      	subs	r3, r3, r2
 80221be:	435e      	muls	r6, r3
 80221c0:	8366      	strh	r6, [r4, #26]
 80221c2:	b015      	add	sp, #84	; 0x54
 80221c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221c8:	f104 0714 	add.w	r7, r4, #20
 80221cc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80221d0:	cf03      	ldmia	r7!, {r0, r1}
 80221d2:	f8c8 0000 	str.w	r0, [r8]
 80221d6:	f8c8 1004 	str.w	r1, [r8, #4]
 80221da:	6921      	ldr	r1, [r4, #16]
 80221dc:	3108      	adds	r1, #8
 80221de:	6121      	str	r1, [r4, #16]
 80221e0:	68a1      	ldr	r1, [r4, #8]
 80221e2:	3101      	adds	r1, #1
 80221e4:	60a1      	str	r1, [r4, #8]
 80221e6:	e78d      	b.n	8022104 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 80221e8:	f104 0e14 	add.w	lr, r4, #20
 80221ec:	6922      	ldr	r2, [r4, #16]
 80221ee:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80221f2:	9206      	str	r2, [sp, #24]
 80221f4:	6010      	str	r0, [r2, #0]
 80221f6:	6051      	str	r1, [r2, #4]
 80221f8:	6921      	ldr	r1, [r4, #16]
 80221fa:	3108      	adds	r1, #8
 80221fc:	6121      	str	r1, [r4, #16]
 80221fe:	68a1      	ldr	r1, [r4, #8]
 8022200:	3101      	adds	r1, #1
 8022202:	60a1      	str	r1, [r4, #8]
 8022204:	e7ca      	b.n	802219c <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8022206:	eba0 0b02 	sub.w	fp, r0, r2
 802220a:	f1ba 0f00 	cmp.w	sl, #0
 802220e:	f040 80a3 	bne.w	8022358 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8022212:	f1bb 0f00 	cmp.w	fp, #0
 8022216:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802221a:	8b62      	ldrh	r2, [r4, #26]
 802221c:	b22d      	sxth	r5, r5
 802221e:	bfa8      	it	ge
 8022220:	f04f 0a20 	movge.w	sl, #32
 8022224:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8022228:	8b21      	ldrh	r1, [r4, #24]
 802222a:	bfb8      	it	lt
 802222c:	f04f 39ff 	movlt.w	r9, #4294967295
 8022230:	ebaa 0606 	sub.w	r6, sl, r6
 8022234:	bfa8      	it	ge
 8022236:	f04f 0901 	movge.w	r9, #1
 802223a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802223e:	4431      	add	r1, r6
 8022240:	fb06 2603 	mla	r6, r6, r3, r2
 8022244:	9a00      	ldr	r2, [sp, #0]
 8022246:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802224a:	b209      	sxth	r1, r1
 802224c:	444a      	add	r2, r9
 802224e:	b236      	sxth	r6, r6
 8022250:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8022254:	8321      	strh	r1, [r4, #24]
 8022256:	b217      	sxth	r7, r2
 8022258:	8366      	strh	r6, [r4, #26]
 802225a:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802225e:	45f4      	cmp	ip, lr
 8022260:	f43f af32 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8022264:	4331      	orrs	r1, r6
 8022266:	d00b      	beq.n	8022280 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8022268:	2800      	cmp	r0, #0
 802226a:	db09      	blt.n	8022280 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802226c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802226e:	4288      	cmp	r0, r1
 8022270:	da06      	bge.n	8022280 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8022272:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022276:	4288      	cmp	r0, r1
 8022278:	d33b      	bcc.n	80222f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 802227a:	2101      	movs	r1, #1
 802227c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022280:	f1aa 0610 	sub.w	r6, sl, #16
 8022284:	82e7      	strh	r7, [r4, #22]
 8022286:	2700      	movs	r7, #0
 8022288:	82a5      	strh	r5, [r4, #20]
 802228a:	0076      	lsls	r6, r6, #1
 802228c:	8327      	strh	r7, [r4, #24]
 802228e:	fb06 fc03 	mul.w	ip, r6, r3
 8022292:	b236      	sxth	r6, r6
 8022294:	8367      	strh	r7, [r4, #26]
 8022296:	fa0f fc8c 	sxth.w	ip, ip
 802229a:	ea46 010c 	orr.w	r1, r6, ip
 802229e:	9100      	str	r1, [sp, #0]
 80222a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80222a2:	428a      	cmp	r2, r1
 80222a4:	d046      	beq.n	8022334 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 80222a6:	444a      	add	r2, r9
 80222a8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80222ac:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80222b0:	fa0f f882 	sxth.w	r8, r2
 80222b4:	8326      	strh	r6, [r4, #24]
 80222b6:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80222ba:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80222be:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 80222c2:	4570      	cmp	r0, lr
 80222c4:	f43f af00 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80222c8:	9800      	ldr	r0, [sp, #0]
 80222ca:	b160      	cbz	r0, 80222e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80222cc:	2900      	cmp	r1, #0
 80222ce:	db0a      	blt.n	80222e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80222d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80222d2:	4281      	cmp	r1, r0
 80222d4:	da07      	bge.n	80222e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80222d6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80222da:	4288      	cmp	r0, r1
 80222dc:	d319      	bcc.n	8022312 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 80222de:	f04f 0101 	mov.w	r1, #1
 80222e2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80222e6:	82a5      	strh	r5, [r4, #20]
 80222e8:	f8a4 8016 	strh.w	r8, [r4, #22]
 80222ec:	8327      	strh	r7, [r4, #24]
 80222ee:	8367      	strh	r7, [r4, #26]
 80222f0:	e7d6      	b.n	80222a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 80222f2:	f104 0614 	add.w	r6, r4, #20
 80222f6:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80222fa:	ce03      	ldmia	r6!, {r0, r1}
 80222fc:	f8cc 0000 	str.w	r0, [ip]
 8022300:	f8cc 1004 	str.w	r1, [ip, #4]
 8022304:	6921      	ldr	r1, [r4, #16]
 8022306:	3108      	adds	r1, #8
 8022308:	6121      	str	r1, [r4, #16]
 802230a:	68a1      	ldr	r1, [r4, #8]
 802230c:	3101      	adds	r1, #1
 802230e:	60a1      	str	r1, [r4, #8]
 8022310:	e7b6      	b.n	8022280 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8022312:	f104 0e14 	add.w	lr, r4, #20
 8022316:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802231a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802231e:	f8cb 0000 	str.w	r0, [fp]
 8022322:	f8cb 1004 	str.w	r1, [fp, #4]
 8022326:	6921      	ldr	r1, [r4, #16]
 8022328:	3108      	adds	r1, #8
 802232a:	6121      	str	r1, [r4, #16]
 802232c:	68a1      	ldr	r1, [r4, #8]
 802232e:	3101      	adds	r1, #1
 8022330:	60a1      	str	r1, [r4, #8]
 8022332:	e7d8      	b.n	80222e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8022334:	9a03      	ldr	r2, [sp, #12]
 8022336:	8b61      	ldrh	r1, [r4, #26]
 8022338:	f1a2 0e20 	sub.w	lr, r2, #32
 802233c:	8b22      	ldrh	r2, [r4, #24]
 802233e:	44d6      	add	lr, sl
 8022340:	4472      	add	r2, lr
 8022342:	fb0e 1303 	mla	r3, lr, r3, r1
 8022346:	8322      	strh	r2, [r4, #24]
 8022348:	e68b      	b.n	8022062 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802234a:	bf00      	nop
 802234c:	08028737 	.word	0x08028737
 8022350:	080287b8 	.word	0x080287b8
 8022354:	08028768 	.word	0x08028768
 8022358:	f1bb 0f00 	cmp.w	fp, #0
 802235c:	f2c0 8124 	blt.w	80225a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8022360:	2201      	movs	r2, #1
 8022362:	f1c6 0320 	rsb	r3, r6, #32
 8022366:	920b      	str	r2, [sp, #44]	; 0x2c
 8022368:	2220      	movs	r2, #32
 802236a:	fb0a f303 	mul.w	r3, sl, r3
 802236e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022372:	9202      	str	r2, [sp, #8]
 8022374:	fb93 fcfb 	sdiv	ip, r3, fp
 8022378:	fb0b 331c 	mls	r3, fp, ip, r3
 802237c:	2b00      	cmp	r3, #0
 802237e:	9308      	str	r3, [sp, #32]
 8022380:	bfbe      	ittt	lt
 8022382:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8022386:	445b      	addlt	r3, fp
 8022388:	9308      	strlt	r3, [sp, #32]
 802238a:	eb0c 0301 	add.w	r3, ip, r1
 802238e:	9301      	str	r3, [sp, #4]
 8022390:	115b      	asrs	r3, r3, #5
 8022392:	9305      	str	r3, [sp, #20]
 8022394:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8022398:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802239c:	461f      	mov	r7, r3
 802239e:	9b02      	ldr	r3, [sp, #8]
 80223a0:	42b3      	cmp	r3, r6
 80223a2:	f040 8117 	bne.w	80225d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 80223a6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80223aa:	f9bd 3000 	ldrsh.w	r3, [sp]
 80223ae:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 80223b2:	42b9      	cmp	r1, r7
 80223b4:	d016      	beq.n	80223e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 80223b6:	8b60      	ldrh	r0, [r4, #26]
 80223b8:	8b21      	ldrh	r1, [r4, #24]
 80223ba:	4301      	orrs	r1, r0
 80223bc:	d00d      	beq.n	80223da <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80223be:	f1b8 0f00 	cmp.w	r8, #0
 80223c2:	db0a      	blt.n	80223da <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80223c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80223c6:	4541      	cmp	r1, r8
 80223c8:	dd07      	ble.n	80223da <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80223ca:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80223ce:	4288      	cmp	r0, r1
 80223d0:	f0c0 80f3 	bcc.w	80225ba <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 80223d4:	2101      	movs	r1, #1
 80223d6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80223da:	82e3      	strh	r3, [r4, #22]
 80223dc:	2300      	movs	r3, #0
 80223de:	82a2      	strh	r2, [r4, #20]
 80223e0:	8323      	strh	r3, [r4, #24]
 80223e2:	8363      	strh	r3, [r4, #26]
 80223e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223e6:	9a00      	ldr	r2, [sp, #0]
 80223e8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80223ec:	441a      	add	r2, r3
 80223ee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80223f2:	4691      	mov	r9, r2
 80223f4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80223f8:	fa0f f589 	sxth.w	r5, r9
 80223fc:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8022400:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8022404:	4281      	cmp	r1, r0
 8022406:	d015      	beq.n	8022434 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8022408:	8b60      	ldrh	r0, [r4, #26]
 802240a:	8b21      	ldrh	r1, [r4, #24]
 802240c:	4301      	orrs	r1, r0
 802240e:	d00c      	beq.n	802242a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8022410:	2a00      	cmp	r2, #0
 8022412:	db0a      	blt.n	802242a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8022414:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022416:	428a      	cmp	r2, r1
 8022418:	da07      	bge.n	802242a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802241a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802241e:	4291      	cmp	r1, r2
 8022420:	f0c0 81ae 	bcc.w	8022780 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8022424:	2201      	movs	r2, #1
 8022426:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802242a:	82a3      	strh	r3, [r4, #20]
 802242c:	2300      	movs	r3, #0
 802242e:	82e5      	strh	r5, [r4, #22]
 8022430:	8323      	strh	r3, [r4, #24]
 8022432:	8363      	strh	r3, [r4, #26]
 8022434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022436:	454b      	cmp	r3, r9
 8022438:	f000 808a 	beq.w	8022550 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802243c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8022440:	fb93 f2fb 	sdiv	r2, r3, fp
 8022444:	fb0b 3312 	mls	r3, fp, r2, r3
 8022448:	9205      	str	r2, [sp, #20]
 802244a:	2b00      	cmp	r3, #0
 802244c:	9307      	str	r3, [sp, #28]
 802244e:	da04      	bge.n	802245a <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 8022450:	1e53      	subs	r3, r2, #1
 8022452:	9305      	str	r3, [sp, #20]
 8022454:	9b07      	ldr	r3, [sp, #28]
 8022456:	445b      	add	r3, fp
 8022458:	9307      	str	r3, [sp, #28]
 802245a:	9b08      	ldr	r3, [sp, #32]
 802245c:	f04f 0a00 	mov.w	sl, #0
 8022460:	eba3 030b 	sub.w	r3, r3, fp
 8022464:	9308      	str	r3, [sp, #32]
 8022466:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802246a:	f1c3 0320 	rsb	r3, r3, #32
 802246e:	930a      	str	r3, [sp, #40]	; 0x28
 8022470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022472:	9b02      	ldr	r3, [sp, #8]
 8022474:	1a9b      	subs	r3, r3, r2
 8022476:	9309      	str	r3, [sp, #36]	; 0x24
 8022478:	9902      	ldr	r1, [sp, #8]
 802247a:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802247e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8022482:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022486:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802248a:	189b      	adds	r3, r3, r2
 802248c:	9308      	str	r3, [sp, #32]
 802248e:	bf57      	itett	pl
 8022490:	eba3 030b 	subpl.w	r3, r3, fp
 8022494:	9b05      	ldrmi	r3, [sp, #20]
 8022496:	9308      	strpl	r3, [sp, #32]
 8022498:	9b05      	ldrpl	r3, [sp, #20]
 802249a:	bf58      	it	pl
 802249c:	3301      	addpl	r3, #1
 802249e:	9300      	str	r3, [sp, #0]
 80224a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80224a4:	4413      	add	r3, r2
 80224a6:	9301      	str	r3, [sp, #4]
 80224a8:	115b      	asrs	r3, r3, #5
 80224aa:	9306      	str	r3, [sp, #24]
 80224ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224ae:	428b      	cmp	r3, r1
 80224b0:	f040 8180 	bne.w	80227b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80224b4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80224b8:	fa0f f389 	sxth.w	r3, r9
 80224bc:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 80224c0:	4541      	cmp	r1, r8
 80224c2:	d017      	beq.n	80224f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 80224c4:	8b60      	ldrh	r0, [r4, #26]
 80224c6:	8b21      	ldrh	r1, [r4, #24]
 80224c8:	4301      	orrs	r1, r0
 80224ca:	d00d      	beq.n	80224e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80224cc:	2e00      	cmp	r6, #0
 80224ce:	db0b      	blt.n	80224e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80224d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80224d2:	42b1      	cmp	r1, r6
 80224d4:	dd08      	ble.n	80224e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80224d6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80224da:	4288      	cmp	r0, r1
 80224dc:	f0c0 815d 	bcc.w	802279a <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 80224e0:	f04f 0101 	mov.w	r1, #1
 80224e4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80224e8:	82a2      	strh	r2, [r4, #20]
 80224ea:	82e3      	strh	r3, [r4, #22]
 80224ec:	f8a4 a018 	strh.w	sl, [r4, #24]
 80224f0:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80224f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224f6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80224fa:	4499      	add	r9, r3
 80224fc:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8022500:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022504:	fa0f f589 	sxth.w	r5, r9
 8022508:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802250c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8022510:	4281      	cmp	r1, r0
 8022512:	f43f add9 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8022516:	8b60      	ldrh	r0, [r4, #26]
 8022518:	8b21      	ldrh	r1, [r4, #24]
 802251a:	4301      	orrs	r1, r0
 802251c:	d00d      	beq.n	802253a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802251e:	2a00      	cmp	r2, #0
 8022520:	db0b      	blt.n	802253a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8022522:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022524:	428a      	cmp	r2, r1
 8022526:	da08      	bge.n	802253a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8022528:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802252c:	4291      	cmp	r1, r2
 802252e:	f0c0 8228 	bcc.w	8022982 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8022532:	f04f 0201 	mov.w	r2, #1
 8022536:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802253a:	82a3      	strh	r3, [r4, #20]
 802253c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802253e:	82e5      	strh	r5, [r4, #22]
 8022540:	454b      	cmp	r3, r9
 8022542:	f8a4 a018 	strh.w	sl, [r4, #24]
 8022546:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802254a:	f8dd c004 	ldr.w	ip, [sp, #4]
 802254e:	d193      	bne.n	8022478 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 8022550:	9b02      	ldr	r3, [sp, #8]
 8022552:	f1c3 0e20 	rsb	lr, r3, #32
 8022556:	9b04      	ldr	r3, [sp, #16]
 8022558:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802255c:	9b03      	ldr	r3, [sp, #12]
 802255e:	459e      	cmp	lr, r3
 8022560:	f040 8229 	bne.w	80229b6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 8022564:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022568:	fa0f f58b 	sxth.w	r5, fp
 802256c:	fa0f f289 	sxth.w	r2, r9
 8022570:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8022574:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 8022578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802257c:	4281      	cmp	r1, r0
 802257e:	f43f ae20 	beq.w	80221c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8022582:	8b60      	ldrh	r0, [r4, #26]
 8022584:	8b21      	ldrh	r1, [r4, #24]
 8022586:	4301      	orrs	r1, r0
 8022588:	d00c      	beq.n	80225a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802258a:	2b00      	cmp	r3, #0
 802258c:	db0a      	blt.n	80225a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802258e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022590:	428b      	cmp	r3, r1
 8022592:	da07      	bge.n	80225a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8022594:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8022598:	4299      	cmp	r1, r3
 802259a:	f0c0 81ff 	bcc.w	802299c <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 802259e:	2301      	movs	r3, #1
 80225a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80225a4:	82a5      	strh	r5, [r4, #20]
 80225a6:	e538      	b.n	802201a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 80225a8:	f04f 32ff 	mov.w	r2, #4294967295
 80225ac:	fb0a f306 	mul.w	r3, sl, r6
 80225b0:	f1cb 0b00 	rsb	fp, fp, #0
 80225b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80225b6:	2200      	movs	r2, #0
 80225b8:	e6d9      	b.n	802236e <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 80225ba:	f104 0514 	add.w	r5, r4, #20
 80225be:	6926      	ldr	r6, [r4, #16]
 80225c0:	cd03      	ldmia	r5!, {r0, r1}
 80225c2:	6030      	str	r0, [r6, #0]
 80225c4:	6071      	str	r1, [r6, #4]
 80225c6:	6921      	ldr	r1, [r4, #16]
 80225c8:	3108      	adds	r1, #8
 80225ca:	6121      	str	r1, [r4, #16]
 80225cc:	68a1      	ldr	r1, [r4, #8]
 80225ce:	3101      	adds	r1, #1
 80225d0:	60a1      	str	r1, [r4, #8]
 80225d2:	e702      	b.n	80223da <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80225d4:	9b01      	ldr	r3, [sp, #4]
 80225d6:	f001 011f 	and.w	r1, r1, #31
 80225da:	8b20      	ldrh	r0, [r4, #24]
 80225dc:	f003 031f 	and.w	r3, r3, #31
 80225e0:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80225e4:	930d      	str	r3, [sp, #52]	; 0x34
 80225e6:	9b02      	ldr	r3, [sp, #8]
 80225e8:	1b9a      	subs	r2, r3, r6
 80225ea:	9b05      	ldr	r3, [sp, #20]
 80225ec:	42ab      	cmp	r3, r5
 80225ee:	d107      	bne.n	8022600 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 80225f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225f2:	4410      	add	r0, r2
 80225f4:	4419      	add	r1, r3
 80225f6:	8320      	strh	r0, [r4, #24]
 80225f8:	fb02 9201 	mla	r2, r2, r1, r9
 80225fc:	8362      	strh	r2, [r4, #26]
 80225fe:	e6f1      	b.n	80223e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8022600:	f1bc 0f00 	cmp.w	ip, #0
 8022604:	f2c0 8093 	blt.w	802272e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8022608:	f1c1 0320 	rsb	r3, r1, #32
 802260c:	435a      	muls	r2, r3
 802260e:	2301      	movs	r3, #1
 8022610:	9309      	str	r3, [sp, #36]	; 0x24
 8022612:	2320      	movs	r3, #32
 8022614:	9307      	str	r3, [sp, #28]
 8022616:	9b07      	ldr	r3, [sp, #28]
 8022618:	fb92 fefc 	sdiv	lr, r2, ip
 802261c:	fb0c 221e 	mls	r2, ip, lr, r2
 8022620:	4419      	add	r1, r3
 8022622:	2a00      	cmp	r2, #0
 8022624:	bfbc      	itt	lt
 8022626:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802262a:	4462      	addlt	r2, ip
 802262c:	fb0e 9101 	mla	r1, lr, r1, r9
 8022630:	4470      	add	r0, lr
 8022632:	b20b      	sxth	r3, r1
 8022634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022636:	b200      	sxth	r0, r0
 8022638:	440d      	add	r5, r1
 802263a:	f9bd 1000 	ldrsh.w	r1, [sp]
 802263e:	8320      	strh	r0, [r4, #24]
 8022640:	fa0f f985 	sxth.w	r9, r5
 8022644:	9106      	str	r1, [sp, #24]
 8022646:	0409      	lsls	r1, r1, #16
 8022648:	8363      	strh	r3, [r4, #26]
 802264a:	910a      	str	r1, [sp, #40]	; 0x28
 802264c:	4449      	add	r1, r9
 802264e:	42b9      	cmp	r1, r7
 8022650:	f43f ad3a 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8022654:	4303      	orrs	r3, r0
 8022656:	d00c      	beq.n	8022672 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8022658:	f1b8 0f00 	cmp.w	r8, #0
 802265c:	db09      	blt.n	8022672 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802265e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022660:	4543      	cmp	r3, r8
 8022662:	dd06      	ble.n	8022672 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8022664:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8022668:	4299      	cmp	r1, r3
 802266a:	d368      	bcc.n	802273e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 802266c:	2301      	movs	r3, #1
 802266e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022672:	9b06      	ldr	r3, [sp, #24]
 8022674:	4476      	add	r6, lr
 8022676:	f8a4 9014 	strh.w	r9, [r4, #20]
 802267a:	82e3      	strh	r3, [r4, #22]
 802267c:	2300      	movs	r3, #0
 802267e:	8323      	strh	r3, [r4, #24]
 8022680:	8363      	strh	r3, [r4, #26]
 8022682:	9b05      	ldr	r3, [sp, #20]
 8022684:	42ab      	cmp	r3, r5
 8022686:	d048      	beq.n	802271a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 8022688:	9b02      	ldr	r3, [sp, #8]
 802268a:	eba2 020c 	sub.w	r2, r2, ip
 802268e:	1b9b      	subs	r3, r3, r6
 8022690:	4473      	add	r3, lr
 8022692:	015b      	lsls	r3, r3, #5
 8022694:	fb93 f8fc 	sdiv	r8, r3, ip
 8022698:	fb0c 3318 	mls	r3, ip, r8, r3
 802269c:	2b00      	cmp	r3, #0
 802269e:	bfbc      	itt	lt
 80226a0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80226a4:	4463      	addlt	r3, ip
 80226a6:	f108 0101 	add.w	r1, r8, #1
 80226aa:	910f      	str	r1, [sp, #60]	; 0x3c
 80226ac:	18d2      	adds	r2, r2, r3
 80226ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80226b0:	bf56      	itet	pl
 80226b2:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 80226b4:	4640      	movmi	r0, r8
 80226b6:	eba2 020c 	subpl.w	r2, r2, ip
 80226ba:	fa0f fe80 	sxth.w	lr, r0
 80226be:	4406      	add	r6, r0
 80226c0:	0141      	lsls	r1, r0, #5
 80226c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80226c4:	f8a4 e018 	strh.w	lr, [r4, #24]
 80226c8:	4405      	add	r5, r0
 80226ca:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80226ce:	b209      	sxth	r1, r1
 80226d0:	fa0f f985 	sxth.w	r9, r5
 80226d4:	4438      	add	r0, r7
 80226d6:	8361      	strh	r1, [r4, #26]
 80226d8:	444f      	add	r7, r9
 80226da:	42b8      	cmp	r0, r7
 80226dc:	f43f acf4 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80226e0:	ea5e 0101 	orrs.w	r1, lr, r1
 80226e4:	d00e      	beq.n	8022704 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80226e6:	9906      	ldr	r1, [sp, #24]
 80226e8:	2900      	cmp	r1, #0
 80226ea:	db0b      	blt.n	8022704 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80226ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80226ee:	9806      	ldr	r0, [sp, #24]
 80226f0:	4288      	cmp	r0, r1
 80226f2:	da07      	bge.n	8022704 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80226f4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80226f8:	4288      	cmp	r0, r1
 80226fa:	d330      	bcc.n	802275e <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 80226fc:	f04f 0101 	mov.w	r1, #1
 8022700:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022704:	9906      	ldr	r1, [sp, #24]
 8022706:	f8a4 9014 	strh.w	r9, [r4, #20]
 802270a:	82e1      	strh	r1, [r4, #22]
 802270c:	f04f 0100 	mov.w	r1, #0
 8022710:	8321      	strh	r1, [r4, #24]
 8022712:	8361      	strh	r1, [r4, #26]
 8022714:	9905      	ldr	r1, [sp, #20]
 8022716:	42a9      	cmp	r1, r5
 8022718:	d1c8      	bne.n	80226ac <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802271a:	9b02      	ldr	r3, [sp, #8]
 802271c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802271e:	1b9e      	subs	r6, r3, r6
 8022720:	9b07      	ldr	r3, [sp, #28]
 8022722:	3120      	adds	r1, #32
 8022724:	8326      	strh	r6, [r4, #24]
 8022726:	1ac9      	subs	r1, r1, r3
 8022728:	434e      	muls	r6, r1
 802272a:	8366      	strh	r6, [r4, #26]
 802272c:	e65a      	b.n	80223e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802272e:	f04f 33ff 	mov.w	r3, #4294967295
 8022732:	434a      	muls	r2, r1
 8022734:	f1cc 0c00 	rsb	ip, ip, #0
 8022738:	9309      	str	r3, [sp, #36]	; 0x24
 802273a:	2300      	movs	r3, #0
 802273c:	e76a      	b.n	8022614 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802273e:	f104 0314 	add.w	r3, r4, #20
 8022742:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8022746:	cb03      	ldmia	r3!, {r0, r1}
 8022748:	f8c8 0000 	str.w	r0, [r8]
 802274c:	f8c8 1004 	str.w	r1, [r8, #4]
 8022750:	6923      	ldr	r3, [r4, #16]
 8022752:	3308      	adds	r3, #8
 8022754:	6123      	str	r3, [r4, #16]
 8022756:	68a3      	ldr	r3, [r4, #8]
 8022758:	3301      	adds	r3, #1
 802275a:	60a3      	str	r3, [r4, #8]
 802275c:	e789      	b.n	8022672 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802275e:	6921      	ldr	r1, [r4, #16]
 8022760:	f104 0e14 	add.w	lr, r4, #20
 8022764:	910e      	str	r1, [sp, #56]	; 0x38
 8022766:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022768:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802276c:	6038      	str	r0, [r7, #0]
 802276e:	4638      	mov	r0, r7
 8022770:	6079      	str	r1, [r7, #4]
 8022772:	6921      	ldr	r1, [r4, #16]
 8022774:	3108      	adds	r1, #8
 8022776:	6121      	str	r1, [r4, #16]
 8022778:	68a1      	ldr	r1, [r4, #8]
 802277a:	3101      	adds	r1, #1
 802277c:	60a1      	str	r1, [r4, #8]
 802277e:	e7c1      	b.n	8022704 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8022780:	f104 0214 	add.w	r2, r4, #20
 8022784:	6926      	ldr	r6, [r4, #16]
 8022786:	ca03      	ldmia	r2!, {r0, r1}
 8022788:	6030      	str	r0, [r6, #0]
 802278a:	6071      	str	r1, [r6, #4]
 802278c:	6922      	ldr	r2, [r4, #16]
 802278e:	3208      	adds	r2, #8
 8022790:	6122      	str	r2, [r4, #16]
 8022792:	68a2      	ldr	r2, [r4, #8]
 8022794:	3201      	adds	r2, #1
 8022796:	60a2      	str	r2, [r4, #8]
 8022798:	e647      	b.n	802242a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802279a:	f104 0514 	add.w	r5, r4, #20
 802279e:	6926      	ldr	r6, [r4, #16]
 80227a0:	cd03      	ldmia	r5!, {r0, r1}
 80227a2:	6030      	str	r0, [r6, #0]
 80227a4:	6071      	str	r1, [r6, #4]
 80227a6:	6921      	ldr	r1, [r4, #16]
 80227a8:	3108      	adds	r1, #8
 80227aa:	6121      	str	r1, [r4, #16]
 80227ac:	68a1      	ldr	r1, [r4, #8]
 80227ae:	3101      	adds	r1, #1
 80227b0:	60a1      	str	r1, [r4, #8]
 80227b2:	e699      	b.n	80224e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80227b4:	9b01      	ldr	r3, [sp, #4]
 80227b6:	ea4f 176c 	mov.w	r7, ip, asr #5
 80227ba:	8b20      	ldrh	r0, [r4, #24]
 80227bc:	f00c 0c1f 	and.w	ip, ip, #31
 80227c0:	f003 031f 	and.w	r3, r3, #31
 80227c4:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 80227c8:	9310      	str	r3, [sp, #64]	; 0x40
 80227ca:	9b06      	ldr	r3, [sp, #24]
 80227cc:	429f      	cmp	r7, r3
 80227ce:	d10a      	bne.n	80227e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 80227d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227d2:	4418      	add	r0, r3
 80227d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80227d6:	449c      	add	ip, r3
 80227d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227da:	8320      	strh	r0, [r4, #24]
 80227dc:	fb03 ee0c 	mla	lr, r3, ip, lr
 80227e0:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80227e4:	e686      	b.n	80224f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 80227e6:	9b00      	ldr	r3, [sp, #0]
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	f2c0 80a0 	blt.w	802292e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 80227ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80227f0:	f1cc 0320 	rsb	r3, ip, #32
 80227f4:	434b      	muls	r3, r1
 80227f6:	2101      	movs	r1, #1
 80227f8:	910e      	str	r1, [sp, #56]	; 0x38
 80227fa:	2120      	movs	r1, #32
 80227fc:	9a00      	ldr	r2, [sp, #0]
 80227fe:	910d      	str	r1, [sp, #52]	; 0x34
 8022800:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022802:	fb93 f5f2 	sdiv	r5, r3, r2
 8022806:	fb02 3315 	mls	r3, r2, r5, r3
 802280a:	448c      	add	ip, r1
 802280c:	2b00      	cmp	r3, #0
 802280e:	bfbc      	itt	lt
 8022810:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8022814:	189b      	addlt	r3, r3, r2
 8022816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022818:	fb05 ec0c 	mla	ip, r5, ip, lr
 802281c:	4428      	add	r0, r5
 802281e:	4417      	add	r7, r2
 8022820:	fa0f f18c 	sxth.w	r1, ip
 8022824:	fa0f fc89 	sxth.w	ip, r9
 8022828:	fa0f fe87 	sxth.w	lr, r7
 802282c:	8361      	strh	r1, [r4, #26]
 802282e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8022832:	b200      	sxth	r0, r0
 8022834:	920f      	str	r2, [sp, #60]	; 0x3c
 8022836:	4472      	add	r2, lr
 8022838:	8320      	strh	r0, [r4, #24]
 802283a:	4542      	cmp	r2, r8
 802283c:	f43f ac44 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8022840:	ea50 0201 	orrs.w	r2, r0, r1
 8022844:	d00c      	beq.n	8022860 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8022846:	2e00      	cmp	r6, #0
 8022848:	db0a      	blt.n	8022860 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802284a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802284c:	42b1      	cmp	r1, r6
 802284e:	dd07      	ble.n	8022860 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8022850:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022854:	4288      	cmp	r0, r1
 8022856:	d375      	bcc.n	8022944 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8022858:	f04f 0201 	mov.w	r2, #1
 802285c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022862:	f8a4 e014 	strh.w	lr, [r4, #20]
 8022866:	1956      	adds	r6, r2, r5
 8022868:	9a06      	ldr	r2, [sp, #24]
 802286a:	f8a4 c016 	strh.w	ip, [r4, #22]
 802286e:	42ba      	cmp	r2, r7
 8022870:	f8a4 a018 	strh.w	sl, [r4, #24]
 8022874:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8022878:	d04c      	beq.n	8022914 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802287a:	9a02      	ldr	r2, [sp, #8]
 802287c:	1b91      	subs	r1, r2, r6
 802287e:	9a00      	ldr	r2, [sp, #0]
 8022880:	440d      	add	r5, r1
 8022882:	016d      	lsls	r5, r5, #5
 8022884:	fb95 fef2 	sdiv	lr, r5, r2
 8022888:	fb02 551e 	mls	r5, r2, lr, r5
 802288c:	2d00      	cmp	r5, #0
 802288e:	bfbc      	itt	lt
 8022890:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8022894:	18ad      	addlt	r5, r5, r2
 8022896:	9a00      	ldr	r2, [sp, #0]
 8022898:	1a9b      	subs	r3, r3, r2
 802289a:	f10e 0201 	add.w	r2, lr, #1
 802289e:	9213      	str	r2, [sp, #76]	; 0x4c
 80228a0:	195b      	adds	r3, r3, r5
 80228a2:	bf57      	itett	pl
 80228a4:	9a00      	ldrpl	r2, [sp, #0]
 80228a6:	4670      	movmi	r0, lr
 80228a8:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 80228aa:	1a9b      	subpl	r3, r3, r2
 80228ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80228ae:	fa0f f880 	sxth.w	r8, r0
 80228b2:	4406      	add	r6, r0
 80228b4:	4417      	add	r7, r2
 80228b6:	0141      	lsls	r1, r0, #5
 80228b8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80228bc:	b23a      	sxth	r2, r7
 80228be:	f8a4 8018 	strh.w	r8, [r4, #24]
 80228c2:	b209      	sxth	r1, r1
 80228c4:	9211      	str	r2, [sp, #68]	; 0x44
 80228c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80228c8:	8361      	strh	r1, [r4, #26]
 80228ca:	1882      	adds	r2, r0, r2
 80228cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80228ce:	9212      	str	r2, [sp, #72]	; 0x48
 80228d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228d2:	4402      	add	r2, r0
 80228d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80228d6:	4290      	cmp	r0, r2
 80228d8:	f43f abf6 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80228dc:	ea58 0201 	orrs.w	r2, r8, r1
 80228e0:	d00d      	beq.n	80228fe <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80228e2:	f1bc 0f00 	cmp.w	ip, #0
 80228e6:	db0a      	blt.n	80228fe <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80228e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80228ea:	458c      	cmp	ip, r1
 80228ec:	da07      	bge.n	80228fe <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80228ee:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80228f2:	4288      	cmp	r0, r1
 80228f4:	d336      	bcc.n	8022964 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 80228f6:	f04f 0201 	mov.w	r2, #1
 80228fa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80228fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022900:	f8a4 c016 	strh.w	ip, [r4, #22]
 8022904:	82a2      	strh	r2, [r4, #20]
 8022906:	9a06      	ldr	r2, [sp, #24]
 8022908:	f8a4 a018 	strh.w	sl, [r4, #24]
 802290c:	42ba      	cmp	r2, r7
 802290e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8022912:	d1c5      	bne.n	80228a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8022914:	9b02      	ldr	r3, [sp, #8]
 8022916:	1b9e      	subs	r6, r3, r6
 8022918:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802291a:	f103 0c20 	add.w	ip, r3, #32
 802291e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022920:	8326      	strh	r6, [r4, #24]
 8022922:	ebac 0c03 	sub.w	ip, ip, r3
 8022926:	fb06 f60c 	mul.w	r6, r6, ip
 802292a:	8366      	strh	r6, [r4, #26]
 802292c:	e5e2      	b.n	80224f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802292e:	9a00      	ldr	r2, [sp, #0]
 8022930:	f04f 31ff 	mov.w	r1, #4294967295
 8022934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022936:	4252      	negs	r2, r2
 8022938:	910e      	str	r1, [sp, #56]	; 0x38
 802293a:	fb03 f30c 	mul.w	r3, r3, ip
 802293e:	2100      	movs	r1, #0
 8022940:	9200      	str	r2, [sp, #0]
 8022942:	e75b      	b.n	80227fc <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 8022944:	f104 0614 	add.w	r6, r4, #20
 8022948:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802294c:	ce03      	ldmia	r6!, {r0, r1}
 802294e:	f8c8 0000 	str.w	r0, [r8]
 8022952:	f8c8 1004 	str.w	r1, [r8, #4]
 8022956:	6921      	ldr	r1, [r4, #16]
 8022958:	3108      	adds	r1, #8
 802295a:	6121      	str	r1, [r4, #16]
 802295c:	68a1      	ldr	r1, [r4, #8]
 802295e:	3101      	adds	r1, #1
 8022960:	60a1      	str	r1, [r4, #8]
 8022962:	e77d      	b.n	8022860 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8022964:	f104 0814 	add.w	r8, r4, #20
 8022968:	6922      	ldr	r2, [r4, #16]
 802296a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802296e:	9212      	str	r2, [sp, #72]	; 0x48
 8022970:	6010      	str	r0, [r2, #0]
 8022972:	6051      	str	r1, [r2, #4]
 8022974:	6921      	ldr	r1, [r4, #16]
 8022976:	3108      	adds	r1, #8
 8022978:	6121      	str	r1, [r4, #16]
 802297a:	68a1      	ldr	r1, [r4, #8]
 802297c:	3101      	adds	r1, #1
 802297e:	60a1      	str	r1, [r4, #8]
 8022980:	e7bd      	b.n	80228fe <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8022982:	f104 0214 	add.w	r2, r4, #20
 8022986:	6926      	ldr	r6, [r4, #16]
 8022988:	ca03      	ldmia	r2!, {r0, r1}
 802298a:	6030      	str	r0, [r6, #0]
 802298c:	6071      	str	r1, [r6, #4]
 802298e:	6922      	ldr	r2, [r4, #16]
 8022990:	3208      	adds	r2, #8
 8022992:	6122      	str	r2, [r4, #16]
 8022994:	68a2      	ldr	r2, [r4, #8]
 8022996:	3201      	adds	r2, #1
 8022998:	60a2      	str	r2, [r4, #8]
 802299a:	e5ce      	b.n	802253a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802299c:	f104 0314 	add.w	r3, r4, #20
 80229a0:	6926      	ldr	r6, [r4, #16]
 80229a2:	cb03      	ldmia	r3!, {r0, r1}
 80229a4:	6030      	str	r0, [r6, #0]
 80229a6:	6071      	str	r1, [r6, #4]
 80229a8:	6923      	ldr	r3, [r4, #16]
 80229aa:	3308      	adds	r3, #8
 80229ac:	6123      	str	r3, [r4, #16]
 80229ae:	68a3      	ldr	r3, [r4, #8]
 80229b0:	3301      	adds	r3, #1
 80229b2:	60a3      	str	r3, [r4, #8]
 80229b4:	e5f6      	b.n	80225a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80229b6:	9b01      	ldr	r3, [sp, #4]
 80229b8:	8b20      	ldrh	r0, [r4, #24]
 80229ba:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80229be:	f003 021f 	and.w	r2, r3, #31
 80229c2:	9b04      	ldr	r3, [sp, #16]
 80229c4:	45dc      	cmp	ip, fp
 80229c6:	8b66      	ldrh	r6, [r4, #26]
 80229c8:	f003 031f 	and.w	r3, r3, #31
 80229cc:	9305      	str	r3, [sp, #20]
 80229ce:	9b03      	ldr	r3, [sp, #12]
 80229d0:	eba3 050e 	sub.w	r5, r3, lr
 80229d4:	d108      	bne.n	80229e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 80229d6:	9b05      	ldr	r3, [sp, #20]
 80229d8:	4428      	add	r0, r5
 80229da:	441a      	add	r2, r3
 80229dc:	8320      	strh	r0, [r4, #24]
 80229de:	fb05 6502 	mla	r5, r5, r2, r6
 80229e2:	8365      	strh	r5, [r4, #26]
 80229e4:	f7ff bbed 	b.w	80221c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80229e8:	9b04      	ldr	r3, [sp, #16]
 80229ea:	9901      	ldr	r1, [sp, #4]
 80229ec:	1a5b      	subs	r3, r3, r1
 80229ee:	9300      	str	r3, [sp, #0]
 80229f0:	f100 809c 	bmi.w	8022b2c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 80229f4:	f1c2 0120 	rsb	r1, r2, #32
 80229f8:	434d      	muls	r5, r1
 80229fa:	2101      	movs	r1, #1
 80229fc:	9102      	str	r1, [sp, #8]
 80229fe:	2120      	movs	r1, #32
 8022a00:	9b00      	ldr	r3, [sp, #0]
 8022a02:	9101      	str	r1, [sp, #4]
 8022a04:	9901      	ldr	r1, [sp, #4]
 8022a06:	fb95 f7f3 	sdiv	r7, r5, r3
 8022a0a:	fb03 5517 	mls	r5, r3, r7, r5
 8022a0e:	440a      	add	r2, r1
 8022a10:	2d00      	cmp	r5, #0
 8022a12:	bfbc      	itt	lt
 8022a14:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8022a18:	18ed      	addlt	r5, r5, r3
 8022a1a:	fb07 6202 	mla	r2, r7, r2, r6
 8022a1e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8022a22:	4438      	add	r0, r7
 8022a24:	b211      	sxth	r1, r2
 8022a26:	9a02      	ldr	r2, [sp, #8]
 8022a28:	b200      	sxth	r0, r0
 8022a2a:	4494      	add	ip, r2
 8022a2c:	fa0f f289 	sxth.w	r2, r9
 8022a30:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022a34:	0413      	lsls	r3, r2, #16
 8022a36:	8320      	strh	r0, [r4, #24]
 8022a38:	fa0f f88c 	sxth.w	r8, ip
 8022a3c:	8361      	strh	r1, [r4, #26]
 8022a3e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 8022a42:	9304      	str	r3, [sp, #16]
 8022a44:	eb08 0a03 	add.w	sl, r8, r3
 8022a48:	45d1      	cmp	r9, sl
 8022a4a:	f43f ab3d 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8022a4e:	ea50 0301 	orrs.w	r3, r0, r1
 8022a52:	d00b      	beq.n	8022a6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8022a54:	2e00      	cmp	r6, #0
 8022a56:	db09      	blt.n	8022a6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8022a58:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022a5a:	428e      	cmp	r6, r1
 8022a5c:	da06      	bge.n	8022a6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8022a5e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022a62:	4288      	cmp	r0, r1
 8022a64:	d36b      	bcc.n	8022b3e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 8022a66:	2101      	movs	r1, #1
 8022a68:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022a6c:	2100      	movs	r1, #0
 8022a6e:	45e3      	cmp	fp, ip
 8022a70:	f8a4 8014 	strh.w	r8, [r4, #20]
 8022a74:	44be      	add	lr, r7
 8022a76:	82e2      	strh	r2, [r4, #22]
 8022a78:	8321      	strh	r1, [r4, #24]
 8022a7a:	8361      	strh	r1, [r4, #26]
 8022a7c:	d047      	beq.n	8022b0e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 8022a7e:	9b03      	ldr	r3, [sp, #12]
 8022a80:	f04f 0900 	mov.w	r9, #0
 8022a84:	eba3 060e 	sub.w	r6, r3, lr
 8022a88:	9b00      	ldr	r3, [sp, #0]
 8022a8a:	443e      	add	r6, r7
 8022a8c:	0176      	lsls	r6, r6, #5
 8022a8e:	fb96 f7f3 	sdiv	r7, r6, r3
 8022a92:	fb03 6617 	mls	r6, r3, r7, r6
 8022a96:	428e      	cmp	r6, r1
 8022a98:	bfbc      	itt	lt
 8022a9a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8022a9e:	18f6      	addlt	r6, r6, r3
 8022aa0:	9b00      	ldr	r3, [sp, #0]
 8022aa2:	1aed      	subs	r5, r5, r3
 8022aa4:	1c7b      	adds	r3, r7, #1
 8022aa6:	9307      	str	r3, [sp, #28]
 8022aa8:	19ad      	adds	r5, r5, r6
 8022aaa:	bf57      	itett	pl
 8022aac:	9b00      	ldrpl	r3, [sp, #0]
 8022aae:	4638      	movmi	r0, r7
 8022ab0:	9807      	ldrpl	r0, [sp, #28]
 8022ab2:	1aed      	subpl	r5, r5, r3
 8022ab4:	9b02      	ldr	r3, [sp, #8]
 8022ab6:	fa0f f880 	sxth.w	r8, r0
 8022aba:	4486      	add	lr, r0
 8022abc:	449c      	add	ip, r3
 8022abe:	0141      	lsls	r1, r0, #5
 8022ac0:	9b04      	ldr	r3, [sp, #16]
 8022ac2:	fa0f fa8c 	sxth.w	sl, ip
 8022ac6:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8022aca:	b209      	sxth	r1, r1
 8022acc:	f8a4 8018 	strh.w	r8, [r4, #24]
 8022ad0:	4418      	add	r0, r3
 8022ad2:	4453      	add	r3, sl
 8022ad4:	8361      	strh	r1, [r4, #26]
 8022ad6:	4298      	cmp	r0, r3
 8022ad8:	f43f aaf6 	beq.w	80220c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8022adc:	ea58 0301 	orrs.w	r3, r8, r1
 8022ae0:	d00c      	beq.n	8022afc <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8022ae2:	2a00      	cmp	r2, #0
 8022ae4:	db0a      	blt.n	8022afc <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8022ae6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022ae8:	428a      	cmp	r2, r1
 8022aea:	da07      	bge.n	8022afc <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8022aec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022af0:	4288      	cmp	r0, r1
 8022af2:	d334      	bcc.n	8022b5e <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8022af4:	f04f 0301 	mov.w	r3, #1
 8022af8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022afc:	45e3      	cmp	fp, ip
 8022afe:	f8a4 a014 	strh.w	sl, [r4, #20]
 8022b02:	82e2      	strh	r2, [r4, #22]
 8022b04:	f8a4 9018 	strh.w	r9, [r4, #24]
 8022b08:	f8a4 901a 	strh.w	r9, [r4, #26]
 8022b0c:	d1cc      	bne.n	8022aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 8022b0e:	9b03      	ldr	r3, [sp, #12]
 8022b10:	9e05      	ldr	r6, [sp, #20]
 8022b12:	eba3 0e0e 	sub.w	lr, r3, lr
 8022b16:	9b01      	ldr	r3, [sp, #4]
 8022b18:	3620      	adds	r6, #32
 8022b1a:	f8a4 e018 	strh.w	lr, [r4, #24]
 8022b1e:	1af6      	subs	r6, r6, r3
 8022b20:	fb0e fe06 	mul.w	lr, lr, r6
 8022b24:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8022b28:	f7ff bb4b 	b.w	80221c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8022b2c:	9b00      	ldr	r3, [sp, #0]
 8022b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8022b32:	4355      	muls	r5, r2
 8022b34:	425b      	negs	r3, r3
 8022b36:	9102      	str	r1, [sp, #8]
 8022b38:	2100      	movs	r1, #0
 8022b3a:	9300      	str	r3, [sp, #0]
 8022b3c:	e760      	b.n	8022a00 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 8022b3e:	f104 0614 	add.w	r6, r4, #20
 8022b42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022b46:	ce03      	ldmia	r6!, {r0, r1}
 8022b48:	f8c9 0000 	str.w	r0, [r9]
 8022b4c:	f8c9 1004 	str.w	r1, [r9, #4]
 8022b50:	6921      	ldr	r1, [r4, #16]
 8022b52:	3108      	adds	r1, #8
 8022b54:	6121      	str	r1, [r4, #16]
 8022b56:	68a1      	ldr	r1, [r4, #8]
 8022b58:	3101      	adds	r1, #1
 8022b5a:	60a1      	str	r1, [r4, #8]
 8022b5c:	e786      	b.n	8022a6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8022b5e:	f104 0814 	add.w	r8, r4, #20
 8022b62:	6923      	ldr	r3, [r4, #16]
 8022b64:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022b68:	9306      	str	r3, [sp, #24]
 8022b6a:	6018      	str	r0, [r3, #0]
 8022b6c:	6059      	str	r1, [r3, #4]
 8022b6e:	6921      	ldr	r1, [r4, #16]
 8022b70:	3108      	adds	r1, #8
 8022b72:	6121      	str	r1, [r4, #16]
 8022b74:	68a1      	ldr	r1, [r4, #8]
 8022b76:	3101      	adds	r1, #1
 8022b78:	60a1      	str	r1, [r4, #8]
 8022b7a:	e7bf      	b.n	8022afc <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

08022b7c <_ZN8touchgfx7Outline6lineToEii>:
 8022b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022b7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022b80:	4604      	mov	r4, r0
 8022b82:	460d      	mov	r5, r1
 8022b84:	4616      	mov	r6, r2
 8022b86:	079b      	lsls	r3, r3, #30
 8022b88:	d526      	bpl.n	8022bd8 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022b8a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8022b8e:	ea85 0001 	eor.w	r0, r5, r1
 8022b92:	ea86 0302 	eor.w	r3, r6, r2
 8022b96:	4303      	orrs	r3, r0
 8022b98:	d01e      	beq.n	8022bd8 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022b9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022b9c:	114b      	asrs	r3, r1, #5
 8022b9e:	9600      	str	r6, [sp, #0]
 8022ba0:	4283      	cmp	r3, r0
 8022ba2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022ba4:	bfb8      	it	lt
 8022ba6:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022ba8:	3301      	adds	r3, #1
 8022baa:	4283      	cmp	r3, r0
 8022bac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022bae:	bfc8      	it	gt
 8022bb0:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022bb2:	116b      	asrs	r3, r5, #5
 8022bb4:	4283      	cmp	r3, r0
 8022bb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022bb8:	bfb8      	it	lt
 8022bba:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022bbc:	3301      	adds	r3, #1
 8022bbe:	4283      	cmp	r3, r0
 8022bc0:	4620      	mov	r0, r4
 8022bc2:	bfc8      	it	gt
 8022bc4:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022bc6:	462b      	mov	r3, r5
 8022bc8:	f7ff f9c6 	bl	8021f58 <_ZN8touchgfx7Outline10renderLineEiiii>
 8022bcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022bce:	f043 0301 	orr.w	r3, r3, #1
 8022bd2:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8022bd6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022bd8:	b002      	add	sp, #8
 8022bda:	bd70      	pop	{r4, r5, r6, pc}

08022bdc <_ZN8touchgfx7Outline6moveToEii>:
 8022bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bde:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022be0:	4615      	mov	r5, r2
 8022be2:	4604      	mov	r4, r0
 8022be4:	460e      	mov	r6, r1
 8022be6:	079a      	lsls	r2, r3, #30
 8022be8:	d401      	bmi.n	8022bee <_ZN8touchgfx7Outline6moveToEii+0x12>
 8022bea:	f7ff f96f 	bl	8021ecc <_ZN8touchgfx7Outline5resetEv>
 8022bee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022bf0:	07db      	lsls	r3, r3, #31
 8022bf2:	d504      	bpl.n	8022bfe <_ZN8touchgfx7Outline6moveToEii+0x22>
 8022bf4:	4620      	mov	r0, r4
 8022bf6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8022bfa:	f7ff ffbf 	bl	8022b7c <_ZN8touchgfx7Outline6lineToEii>
 8022bfe:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022c02:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8022c06:	f345 174f 	sbfx	r7, r5, #5, #16
 8022c0a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8022c0e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8022c12:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8022c16:	428a      	cmp	r2, r1
 8022c18:	d015      	beq.n	8022c46 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 8022c1a:	8b61      	ldrh	r1, [r4, #26]
 8022c1c:	8b22      	ldrh	r2, [r4, #24]
 8022c1e:	430a      	orrs	r2, r1
 8022c20:	d00b      	beq.n	8022c3a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	db09      	blt.n	8022c3a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8022c26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022c28:	4293      	cmp	r3, r2
 8022c2a:	da06      	bge.n	8022c3a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8022c2c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8022c30:	429a      	cmp	r2, r3
 8022c32:	d30d      	bcc.n	8022c50 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8022c34:	2301      	movs	r3, #1
 8022c36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022c3a:	2300      	movs	r3, #0
 8022c3c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8022c40:	82e7      	strh	r7, [r4, #22]
 8022c42:	8323      	strh	r3, [r4, #24]
 8022c44:	8363      	strh	r3, [r4, #26]
 8022c46:	61e6      	str	r6, [r4, #28]
 8022c48:	62a5      	str	r5, [r4, #40]	; 0x28
 8022c4a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8022c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c50:	f104 0314 	add.w	r3, r4, #20
 8022c54:	6922      	ldr	r2, [r4, #16]
 8022c56:	cb03      	ldmia	r3!, {r0, r1}
 8022c58:	6010      	str	r0, [r2, #0]
 8022c5a:	6051      	str	r1, [r2, #4]
 8022c5c:	6923      	ldr	r3, [r4, #16]
 8022c5e:	3308      	adds	r3, #8
 8022c60:	6123      	str	r3, [r4, #16]
 8022c62:	68a3      	ldr	r3, [r4, #8]
 8022c64:	3301      	adds	r3, #1
 8022c66:	60a3      	str	r3, [r4, #8]
 8022c68:	e7e7      	b.n	8022c3a <_ZN8touchgfx7Outline6moveToEii+0x5e>

08022c6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8022c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c6e:	b0d1      	sub	sp, #324	; 0x144
 8022c70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8022c74:	466c      	mov	r4, sp
 8022c76:	1a0d      	subs	r5, r1, r0
 8022c78:	f100 0208 	add.w	r2, r0, #8
 8022c7c:	2d48      	cmp	r5, #72	; 0x48
 8022c7e:	f340 80ba 	ble.w	8022df6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8022c82:	112d      	asrs	r5, r5, #4
 8022c84:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8022c88:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8022c8c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8022c90:	f9b0 8000 	ldrsh.w	r8, [r0]
 8022c94:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8022c98:	681e      	ldr	r6, [r3, #0]
 8022c9a:	6006      	str	r6, [r0, #0]
 8022c9c:	685e      	ldr	r6, [r3, #4]
 8022c9e:	6046      	str	r6, [r0, #4]
 8022ca0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8022ca4:	f8a3 e002 	strh.w	lr, [r3, #2]
 8022ca8:	f8a3 c004 	strh.w	ip, [r3, #4]
 8022cac:	80df      	strh	r7, [r3, #6]
 8022cae:	f1a1 0308 	sub.w	r3, r1, #8
 8022cb2:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8022cb6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8022cba:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8022cbe:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8022cc2:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8022cc6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022cca:	4565      	cmp	r5, ip
 8022ccc:	da0f      	bge.n	8022cee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8022cce:	681d      	ldr	r5, [r3, #0]
 8022cd0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8022cd4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8022cd8:	6015      	str	r5, [r2, #0]
 8022cda:	685d      	ldr	r5, [r3, #4]
 8022cdc:	6055      	str	r5, [r2, #4]
 8022cde:	f821 7c08 	strh.w	r7, [r1, #-8]
 8022ce2:	f821 6c06 	strh.w	r6, [r1, #-6]
 8022ce6:	f821 ec04 	strh.w	lr, [r1, #-4]
 8022cea:	f821 cc02 	strh.w	ip, [r1, #-2]
 8022cee:	f9b0 7000 	ldrsh.w	r7, [r0]
 8022cf2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8022cf6:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8022cfa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8022cfe:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022d02:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8022d06:	45ac      	cmp	ip, r5
 8022d08:	da0d      	bge.n	8022d26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8022d0a:	6815      	ldr	r5, [r2, #0]
 8022d0c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8022d10:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8022d14:	6005      	str	r5, [r0, #0]
 8022d16:	6855      	ldr	r5, [r2, #4]
 8022d18:	8107      	strh	r7, [r0, #8]
 8022d1a:	6045      	str	r5, [r0, #4]
 8022d1c:	8146      	strh	r6, [r0, #10]
 8022d1e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8022d22:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8022d26:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8022d2a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8022d2e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8022d32:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8022d36:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8022d3a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022d3e:	4565      	cmp	r5, ip
 8022d40:	da0f      	bge.n	8022d62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8022d42:	681d      	ldr	r5, [r3, #0]
 8022d44:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8022d48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8022d4c:	6005      	str	r5, [r0, #0]
 8022d4e:	685d      	ldr	r5, [r3, #4]
 8022d50:	6045      	str	r5, [r0, #4]
 8022d52:	f821 7c08 	strh.w	r7, [r1, #-8]
 8022d56:	f821 6c06 	strh.w	r6, [r1, #-6]
 8022d5a:	f821 ec04 	strh.w	lr, [r1, #-4]
 8022d5e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8022d62:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8022d66:	f102 0508 	add.w	r5, r2, #8
 8022d6a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8022d6e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8022d72:	462f      	mov	r7, r5
 8022d74:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8022d78:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8022d7c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8022d80:	4556      	cmp	r6, sl
 8022d82:	db18      	blt.n	8022db6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8022d84:	3b08      	subs	r3, #8
 8022d86:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8022d8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022d8e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8022d92:	45b2      	cmp	sl, r6
 8022d94:	dbf6      	blt.n	8022d84 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8022d96:	42ab      	cmp	r3, r5
 8022d98:	681e      	ldr	r6, [r3, #0]
 8022d9a:	d30e      	bcc.n	8022dba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8022d9c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8022da0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8022da4:	602e      	str	r6, [r5, #0]
 8022da6:	685e      	ldr	r6, [r3, #4]
 8022da8:	606e      	str	r6, [r5, #4]
 8022daa:	f8a3 9000 	strh.w	r9, [r3]
 8022dae:	f8a3 8002 	strh.w	r8, [r3, #2]
 8022db2:	809f      	strh	r7, [r3, #4]
 8022db4:	80da      	strh	r2, [r3, #6]
 8022db6:	462a      	mov	r2, r5
 8022db8:	e7d3      	b.n	8022d62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8022dba:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8022dbe:	6006      	str	r6, [r0, #0]
 8022dc0:	685e      	ldr	r6, [r3, #4]
 8022dc2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8022dc6:	6046      	str	r6, [r0, #4]
 8022dc8:	1a1e      	subs	r6, r3, r0
 8022dca:	80da      	strh	r2, [r3, #6]
 8022dcc:	1b4a      	subs	r2, r1, r5
 8022dce:	f8a3 e000 	strh.w	lr, [r3]
 8022dd2:	10d2      	asrs	r2, r2, #3
 8022dd4:	f8a3 c002 	strh.w	ip, [r3, #2]
 8022dd8:	f8a3 8004 	strh.w	r8, [r3, #4]
 8022ddc:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8022de0:	bfb5      	itete	lt
 8022de2:	e9c4 0300 	strdlt	r0, r3, [r4]
 8022de6:	4607      	movge	r7, r0
 8022de8:	460b      	movlt	r3, r1
 8022dea:	e9c4 5100 	strdge	r5, r1, [r4]
 8022dee:	4638      	mov	r0, r7
 8022df0:	3408      	adds	r4, #8
 8022df2:	4619      	mov	r1, r3
 8022df4:	e73f      	b.n	8022c76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8022df6:	4291      	cmp	r1, r2
 8022df8:	d925      	bls.n	8022e46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8022dfa:	f1a2 0310 	sub.w	r3, r2, #16
 8022dfe:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8022e02:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8022e06:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 8022e0a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8022e0e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8022e12:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8022e16:	42ae      	cmp	r6, r5
 8022e18:	da13      	bge.n	8022e42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8022e1a:	461d      	mov	r5, r3
 8022e1c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8022e20:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8022e24:	3b08      	subs	r3, #8
 8022e26:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8022e2a:	619e      	str	r6, [r3, #24]
 8022e2c:	42a8      	cmp	r0, r5
 8022e2e:	686e      	ldr	r6, [r5, #4]
 8022e30:	f8a3 c010 	strh.w	ip, [r3, #16]
 8022e34:	61de      	str	r6, [r3, #28]
 8022e36:	825f      	strh	r7, [r3, #18]
 8022e38:	f8a3 8014 	strh.w	r8, [r3, #20]
 8022e3c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8022e40:	d1dd      	bne.n	8022dfe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8022e42:	3208      	adds	r2, #8
 8022e44:	e7d7      	b.n	8022df6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8022e46:	466b      	mov	r3, sp
 8022e48:	429c      	cmp	r4, r3
 8022e4a:	d903      	bls.n	8022e54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8022e4c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8022e50:	3c08      	subs	r4, #8
 8022e52:	e710      	b.n	8022c76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8022e54:	b051      	add	sp, #324	; 0x144
 8022e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e5a <_ZN8touchgfx7Outline9sortCellsEv>:
 8022e5a:	6881      	ldr	r1, [r0, #8]
 8022e5c:	b111      	cbz	r1, 8022e64 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8022e5e:	68c0      	ldr	r0, [r0, #12]
 8022e60:	f7ff bf03 	b.w	8022c6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8022e64:	4770      	bx	lr

08022e66 <_ZN8touchgfx7Outline8getCellsEv>:
 8022e66:	b510      	push	{r4, lr}
 8022e68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022e6a:	4604      	mov	r4, r0
 8022e6c:	07da      	lsls	r2, r3, #31
 8022e6e:	d507      	bpl.n	8022e80 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8022e70:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8022e74:	f7ff fe82 	bl	8022b7c <_ZN8touchgfx7Outline6lineToEii>
 8022e78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022e7a:	f023 0301 	bic.w	r3, r3, #1
 8022e7e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022e82:	079b      	lsls	r3, r3, #30
 8022e84:	d51a      	bpl.n	8022ebc <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8022e86:	8b62      	ldrh	r2, [r4, #26]
 8022e88:	8b23      	ldrh	r3, [r4, #24]
 8022e8a:	4313      	orrs	r3, r2
 8022e8c:	d00d      	beq.n	8022eaa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022e8e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	db09      	blt.n	8022eaa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022e96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022e98:	4293      	cmp	r3, r2
 8022e9a:	da06      	bge.n	8022eaa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022e9c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8022ea0:	429a      	cmp	r2, r3
 8022ea2:	d80d      	bhi.n	8022ec0 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8022ea4:	2301      	movs	r3, #1
 8022ea6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022eaa:	68a0      	ldr	r0, [r4, #8]
 8022eac:	b138      	cbz	r0, 8022ebe <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8022eae:	4620      	mov	r0, r4
 8022eb0:	f7ff ffd3 	bl	8022e5a <_ZN8touchgfx7Outline9sortCellsEv>
 8022eb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022eb6:	f023 0302 	bic.w	r3, r3, #2
 8022eba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022ebc:	68e0      	ldr	r0, [r4, #12]
 8022ebe:	bd10      	pop	{r4, pc}
 8022ec0:	f104 0314 	add.w	r3, r4, #20
 8022ec4:	6922      	ldr	r2, [r4, #16]
 8022ec6:	cb03      	ldmia	r3!, {r0, r1}
 8022ec8:	6010      	str	r0, [r2, #0]
 8022eca:	6051      	str	r1, [r2, #4]
 8022ecc:	6923      	ldr	r3, [r4, #16]
 8022ece:	3308      	adds	r3, #8
 8022ed0:	6123      	str	r3, [r4, #16]
 8022ed2:	68a3      	ldr	r3, [r4, #8]
 8022ed4:	3301      	adds	r3, #1
 8022ed6:	60a3      	str	r3, [r4, #8]
 8022ed8:	e7e7      	b.n	8022eaa <_ZN8touchgfx7Outline8getCellsEv+0x44>

08022eda <_ZN8touchgfx8ScanlineD1Ev>:
 8022eda:	4770      	bx	lr

08022edc <_ZN8touchgfx8ScanlineD0Ev>:
 8022edc:	b510      	push	{r4, lr}
 8022ede:	4604      	mov	r4, r0
 8022ee0:	2124      	movs	r1, #36	; 0x24
 8022ee2:	f000 f888 	bl	8022ff6 <_ZdlPvj>
 8022ee6:	4620      	mov	r0, r4
 8022ee8:	bd10      	pop	{r4, pc}

08022eea <_ZN8touchgfx8Scanline5resetEv>:
 8022eea:	b510      	push	{r4, lr}
 8022eec:	4604      	mov	r4, r0
 8022eee:	f7f1 fc2d 	bl	801474c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8022ef2:	61a0      	str	r0, [r4, #24]
 8022ef4:	f7f1 fc30 	bl	8014758 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8022ef8:	61e0      	str	r0, [r4, #28]
 8022efa:	f7f1 fc33 	bl	8014764 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8022efe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022f02:	6220      	str	r0, [r4, #32]
 8022f04:	6160      	str	r0, [r4, #20]
 8022f06:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8022f0a:	69e3      	ldr	r3, [r4, #28]
 8022f0c:	6123      	str	r3, [r4, #16]
 8022f0e:	2300      	movs	r3, #0
 8022f10:	60e3      	str	r3, [r4, #12]
 8022f12:	bd10      	pop	{r4, pc}

08022f14 <_ZN8touchgfx8ScanlineC1Ev>:
 8022f14:	4b09      	ldr	r3, [pc, #36]	; (8022f3c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8022f16:	b510      	push	{r4, lr}
 8022f18:	6003      	str	r3, [r0, #0]
 8022f1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022f1e:	4604      	mov	r4, r0
 8022f20:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8022f24:	2300      	movs	r3, #0
 8022f26:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022f2a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8022f2e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8022f32:	f7ff ffda 	bl	8022eea <_ZN8touchgfx8Scanline5resetEv>
 8022f36:	4620      	mov	r0, r4
 8022f38:	bd10      	pop	{r4, pc}
 8022f3a:	bf00      	nop
 8022f3c:	080287f0 	.word	0x080287f0

08022f40 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8022f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f44:	1e0c      	subs	r4, r1, #0
 8022f46:	4605      	mov	r5, r0
 8022f48:	4617      	mov	r7, r2
 8022f4a:	461e      	mov	r6, r3
 8022f4c:	da03      	bge.n	8022f56 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8022f4e:	4426      	add	r6, r4
 8022f50:	2e01      	cmp	r6, #1
 8022f52:	d421      	bmi.n	8022f98 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8022f54:	2400      	movs	r4, #0
 8022f56:	f7f1 fbf3 	bl	8014740 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022f5a:	42a0      	cmp	r0, r4
 8022f5c:	dd1c      	ble.n	8022f98 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8022f5e:	eb04 0806 	add.w	r8, r4, r6
 8022f62:	f7f1 fbed 	bl	8014740 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022f66:	4580      	cmp	r8, r0
 8022f68:	d902      	bls.n	8022f70 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8022f6a:	f7f1 fbe9 	bl	8014740 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022f6e:	1b06      	subs	r6, r0, r4
 8022f70:	69a8      	ldr	r0, [r5, #24]
 8022f72:	4632      	mov	r2, r6
 8022f74:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8022f78:	4420      	add	r0, r4
 8022f7a:	f7f4 f92f 	bl	80171dc <_ZN8touchgfx6memsetEPvhm>
 8022f7e:	686b      	ldr	r3, [r5, #4]
 8022f80:	b2b2      	uxth	r2, r6
 8022f82:	3301      	adds	r3, #1
 8022f84:	42a3      	cmp	r3, r4
 8022f86:	696b      	ldr	r3, [r5, #20]
 8022f88:	d108      	bne.n	8022f9c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8022f8a:	8819      	ldrh	r1, [r3, #0]
 8022f8c:	440a      	add	r2, r1
 8022f8e:	801a      	strh	r2, [r3, #0]
 8022f90:	3c01      	subs	r4, #1
 8022f92:	4434      	add	r4, r6
 8022f94:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8022f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f9c:	1c99      	adds	r1, r3, #2
 8022f9e:	6169      	str	r1, [r5, #20]
 8022fa0:	805a      	strh	r2, [r3, #2]
 8022fa2:	692b      	ldr	r3, [r5, #16]
 8022fa4:	1c9a      	adds	r2, r3, #2
 8022fa6:	612a      	str	r2, [r5, #16]
 8022fa8:	805c      	strh	r4, [r3, #2]
 8022faa:	68eb      	ldr	r3, [r5, #12]
 8022fac:	3301      	adds	r3, #1
 8022fae:	60eb      	str	r3, [r5, #12]
 8022fb0:	e7ee      	b.n	8022f90 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08022fb2 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8022fb2:	4770      	bx	lr

08022fb4 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8022fb4:	b510      	push	{r4, lr}
 8022fb6:	4604      	mov	r4, r0
 8022fb8:	2118      	movs	r1, #24
 8022fba:	f000 f81c 	bl	8022ff6 <_ZdlPvj>
 8022fbe:	4620      	mov	r0, r4
 8022fc0:	bd10      	pop	{r4, pc}
	...

08022fc4 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8022fc4:	4a04      	ldr	r2, [pc, #16]	; (8022fd8 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8022fc6:	6002      	str	r2, [r0, #0]
 8022fc8:	2200      	movs	r2, #0
 8022fca:	6042      	str	r2, [r0, #4]
 8022fcc:	7202      	strb	r2, [r0, #8]
 8022fce:	6142      	str	r2, [r0, #20]
 8022fd0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8022fd4:	4770      	bx	lr
 8022fd6:	bf00      	nop
 8022fd8:	08028800 	.word	0x08028800

08022fdc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8022fdc:	60c3      	str	r3, [r0, #12]
 8022fde:	9b00      	ldr	r3, [sp, #0]
 8022fe0:	6041      	str	r1, [r0, #4]
 8022fe2:	6103      	str	r3, [r0, #16]
 8022fe4:	9b01      	ldr	r3, [sp, #4]
 8022fe6:	7202      	strb	r2, [r0, #8]
 8022fe8:	6143      	str	r3, [r0, #20]
 8022fea:	4770      	bx	lr

08022fec <__aeabi_atexit>:
 8022fec:	460b      	mov	r3, r1
 8022fee:	4601      	mov	r1, r0
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	f000 b92b 	b.w	802324c <__cxa_atexit>

08022ff6 <_ZdlPvj>:
 8022ff6:	f000 b812 	b.w	802301e <_ZdlPv>

08022ffa <__cxa_guard_acquire>:
 8022ffa:	6803      	ldr	r3, [r0, #0]
 8022ffc:	07db      	lsls	r3, r3, #31
 8022ffe:	d406      	bmi.n	802300e <__cxa_guard_acquire+0x14>
 8023000:	7843      	ldrb	r3, [r0, #1]
 8023002:	b103      	cbz	r3, 8023006 <__cxa_guard_acquire+0xc>
 8023004:	deff      	udf	#255	; 0xff
 8023006:	2301      	movs	r3, #1
 8023008:	7043      	strb	r3, [r0, #1]
 802300a:	4618      	mov	r0, r3
 802300c:	4770      	bx	lr
 802300e:	2000      	movs	r0, #0
 8023010:	4770      	bx	lr

08023012 <__cxa_guard_release>:
 8023012:	2301      	movs	r3, #1
 8023014:	6003      	str	r3, [r0, #0]
 8023016:	4770      	bx	lr

08023018 <__cxa_pure_virtual>:
 8023018:	b508      	push	{r3, lr}
 802301a:	f000 f80f 	bl	802303c <_ZSt9terminatev>

0802301e <_ZdlPv>:
 802301e:	f000 b967 	b.w	80232f0 <free>

08023022 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023022:	b508      	push	{r3, lr}
 8023024:	4780      	blx	r0
 8023026:	f000 f8e5 	bl	80231f4 <abort>
	...

0802302c <_ZSt13get_terminatev>:
 802302c:	4b02      	ldr	r3, [pc, #8]	; (8023038 <_ZSt13get_terminatev+0xc>)
 802302e:	6818      	ldr	r0, [r3, #0]
 8023030:	f3bf 8f5b 	dmb	ish
 8023034:	4770      	bx	lr
 8023036:	bf00      	nop
 8023038:	20000070 	.word	0x20000070

0802303c <_ZSt9terminatev>:
 802303c:	b508      	push	{r3, lr}
 802303e:	f7ff fff5 	bl	802302c <_ZSt13get_terminatev>
 8023042:	f7ff ffee 	bl	8023022 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08023048 <ceilf>:
 8023048:	ee10 3a10 	vmov	r3, s0
 802304c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023050:	3a7f      	subs	r2, #127	; 0x7f
 8023052:	2a16      	cmp	r2, #22
 8023054:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023058:	dc2a      	bgt.n	80230b0 <ceilf+0x68>
 802305a:	2a00      	cmp	r2, #0
 802305c:	da11      	bge.n	8023082 <ceilf+0x3a>
 802305e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80230c4 <ceilf+0x7c>
 8023062:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023066:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802306e:	dd05      	ble.n	802307c <ceilf+0x34>
 8023070:	2b00      	cmp	r3, #0
 8023072:	db23      	blt.n	80230bc <ceilf+0x74>
 8023074:	2900      	cmp	r1, #0
 8023076:	bf18      	it	ne
 8023078:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802307c:	ee00 3a10 	vmov	s0, r3
 8023080:	4770      	bx	lr
 8023082:	4911      	ldr	r1, [pc, #68]	; (80230c8 <ceilf+0x80>)
 8023084:	4111      	asrs	r1, r2
 8023086:	420b      	tst	r3, r1
 8023088:	d0fa      	beq.n	8023080 <ceilf+0x38>
 802308a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80230c4 <ceilf+0x7c>
 802308e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023092:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8023096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802309a:	ddef      	ble.n	802307c <ceilf+0x34>
 802309c:	2b00      	cmp	r3, #0
 802309e:	bfc2      	ittt	gt
 80230a0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80230a4:	fa40 f202 	asrgt.w	r2, r0, r2
 80230a8:	189b      	addgt	r3, r3, r2
 80230aa:	ea23 0301 	bic.w	r3, r3, r1
 80230ae:	e7e5      	b.n	802307c <ceilf+0x34>
 80230b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80230b4:	d3e4      	bcc.n	8023080 <ceilf+0x38>
 80230b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80230ba:	4770      	bx	lr
 80230bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80230c0:	e7dc      	b.n	802307c <ceilf+0x34>
 80230c2:	bf00      	nop
 80230c4:	7149f2ca 	.word	0x7149f2ca
 80230c8:	007fffff 	.word	0x007fffff

080230cc <floorf>:
 80230cc:	ee10 3a10 	vmov	r3, s0
 80230d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80230d4:	3a7f      	subs	r2, #127	; 0x7f
 80230d6:	2a16      	cmp	r2, #22
 80230d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80230dc:	dc2a      	bgt.n	8023134 <floorf+0x68>
 80230de:	2a00      	cmp	r2, #0
 80230e0:	da11      	bge.n	8023106 <floorf+0x3a>
 80230e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8023144 <floorf+0x78>
 80230e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80230ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80230ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230f2:	dd05      	ble.n	8023100 <floorf+0x34>
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	da23      	bge.n	8023140 <floorf+0x74>
 80230f8:	4a13      	ldr	r2, [pc, #76]	; (8023148 <floorf+0x7c>)
 80230fa:	2900      	cmp	r1, #0
 80230fc:	bf18      	it	ne
 80230fe:	4613      	movne	r3, r2
 8023100:	ee00 3a10 	vmov	s0, r3
 8023104:	4770      	bx	lr
 8023106:	4911      	ldr	r1, [pc, #68]	; (802314c <floorf+0x80>)
 8023108:	4111      	asrs	r1, r2
 802310a:	420b      	tst	r3, r1
 802310c:	d0fa      	beq.n	8023104 <floorf+0x38>
 802310e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8023144 <floorf+0x78>
 8023112:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023116:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802311e:	ddef      	ble.n	8023100 <floorf+0x34>
 8023120:	2b00      	cmp	r3, #0
 8023122:	bfbe      	ittt	lt
 8023124:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8023128:	fa40 f202 	asrlt.w	r2, r0, r2
 802312c:	189b      	addlt	r3, r3, r2
 802312e:	ea23 0301 	bic.w	r3, r3, r1
 8023132:	e7e5      	b.n	8023100 <floorf+0x34>
 8023134:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023138:	d3e4      	bcc.n	8023104 <floorf+0x38>
 802313a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802313e:	4770      	bx	lr
 8023140:	2300      	movs	r3, #0
 8023142:	e7dd      	b.n	8023100 <floorf+0x34>
 8023144:	7149f2ca 	.word	0x7149f2ca
 8023148:	bf800000 	.word	0xbf800000
 802314c:	007fffff 	.word	0x007fffff

08023150 <fmaxf>:
 8023150:	b508      	push	{r3, lr}
 8023152:	ed2d 8b02 	vpush	{d8}
 8023156:	eeb0 8a40 	vmov.f32	s16, s0
 802315a:	eef0 8a60 	vmov.f32	s17, s1
 802315e:	f000 f82d 	bl	80231bc <__fpclassifyf>
 8023162:	b148      	cbz	r0, 8023178 <fmaxf+0x28>
 8023164:	eeb0 0a68 	vmov.f32	s0, s17
 8023168:	f000 f828 	bl	80231bc <__fpclassifyf>
 802316c:	b130      	cbz	r0, 802317c <fmaxf+0x2c>
 802316e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023176:	dc01      	bgt.n	802317c <fmaxf+0x2c>
 8023178:	eeb0 8a68 	vmov.f32	s16, s17
 802317c:	eeb0 0a48 	vmov.f32	s0, s16
 8023180:	ecbd 8b02 	vpop	{d8}
 8023184:	bd08      	pop	{r3, pc}

08023186 <fminf>:
 8023186:	b508      	push	{r3, lr}
 8023188:	ed2d 8b02 	vpush	{d8}
 802318c:	eeb0 8a40 	vmov.f32	s16, s0
 8023190:	eef0 8a60 	vmov.f32	s17, s1
 8023194:	f000 f812 	bl	80231bc <__fpclassifyf>
 8023198:	b148      	cbz	r0, 80231ae <fminf+0x28>
 802319a:	eeb0 0a68 	vmov.f32	s0, s17
 802319e:	f000 f80d 	bl	80231bc <__fpclassifyf>
 80231a2:	b130      	cbz	r0, 80231b2 <fminf+0x2c>
 80231a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80231a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231ac:	d401      	bmi.n	80231b2 <fminf+0x2c>
 80231ae:	eeb0 8a68 	vmov.f32	s16, s17
 80231b2:	eeb0 0a48 	vmov.f32	s0, s16
 80231b6:	ecbd 8b02 	vpop	{d8}
 80231ba:	bd08      	pop	{r3, pc}

080231bc <__fpclassifyf>:
 80231bc:	ee10 3a10 	vmov	r3, s0
 80231c0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80231c4:	d00d      	beq.n	80231e2 <__fpclassifyf+0x26>
 80231c6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80231ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80231ce:	d30a      	bcc.n	80231e6 <__fpclassifyf+0x2a>
 80231d0:	4b07      	ldr	r3, [pc, #28]	; (80231f0 <__fpclassifyf+0x34>)
 80231d2:	1e42      	subs	r2, r0, #1
 80231d4:	429a      	cmp	r2, r3
 80231d6:	d908      	bls.n	80231ea <__fpclassifyf+0x2e>
 80231d8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80231dc:	4258      	negs	r0, r3
 80231de:	4158      	adcs	r0, r3
 80231e0:	4770      	bx	lr
 80231e2:	2002      	movs	r0, #2
 80231e4:	4770      	bx	lr
 80231e6:	2004      	movs	r0, #4
 80231e8:	4770      	bx	lr
 80231ea:	2003      	movs	r0, #3
 80231ec:	4770      	bx	lr
 80231ee:	bf00      	nop
 80231f0:	007ffffe 	.word	0x007ffffe

080231f4 <abort>:
 80231f4:	b508      	push	{r3, lr}
 80231f6:	2006      	movs	r0, #6
 80231f8:	f000 fc68 	bl	8023acc <raise>
 80231fc:	2001      	movs	r0, #1
 80231fe:	f7de fd93 	bl	8001d28 <_exit>
	...

08023204 <__assert_func>:
 8023204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023206:	4614      	mov	r4, r2
 8023208:	461a      	mov	r2, r3
 802320a:	4b09      	ldr	r3, [pc, #36]	; (8023230 <__assert_func+0x2c>)
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	4605      	mov	r5, r0
 8023210:	68d8      	ldr	r0, [r3, #12]
 8023212:	b14c      	cbz	r4, 8023228 <__assert_func+0x24>
 8023214:	4b07      	ldr	r3, [pc, #28]	; (8023234 <__assert_func+0x30>)
 8023216:	9100      	str	r1, [sp, #0]
 8023218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802321c:	4906      	ldr	r1, [pc, #24]	; (8023238 <__assert_func+0x34>)
 802321e:	462b      	mov	r3, r5
 8023220:	f000 f828 	bl	8023274 <fiprintf>
 8023224:	f7ff ffe6 	bl	80231f4 <abort>
 8023228:	4b04      	ldr	r3, [pc, #16]	; (802323c <__assert_func+0x38>)
 802322a:	461c      	mov	r4, r3
 802322c:	e7f3      	b.n	8023216 <__assert_func+0x12>
 802322e:	bf00      	nop
 8023230:	20000074 	.word	0x20000074
 8023234:	08028808 	.word	0x08028808
 8023238:	08028815 	.word	0x08028815
 802323c:	08028843 	.word	0x08028843

08023240 <atexit>:
 8023240:	2300      	movs	r3, #0
 8023242:	4601      	mov	r1, r0
 8023244:	461a      	mov	r2, r3
 8023246:	4618      	mov	r0, r3
 8023248:	f000 bd3c 	b.w	8023cc4 <__register_exitproc>

0802324c <__cxa_atexit>:
 802324c:	b510      	push	{r4, lr}
 802324e:	4c05      	ldr	r4, [pc, #20]	; (8023264 <__cxa_atexit+0x18>)
 8023250:	4613      	mov	r3, r2
 8023252:	b12c      	cbz	r4, 8023260 <__cxa_atexit+0x14>
 8023254:	460a      	mov	r2, r1
 8023256:	4601      	mov	r1, r0
 8023258:	2002      	movs	r0, #2
 802325a:	f000 fd33 	bl	8023cc4 <__register_exitproc>
 802325e:	bd10      	pop	{r4, pc}
 8023260:	4620      	mov	r0, r4
 8023262:	e7fc      	b.n	802325e <__cxa_atexit+0x12>
 8023264:	08023cc5 	.word	0x08023cc5

08023268 <__errno>:
 8023268:	4b01      	ldr	r3, [pc, #4]	; (8023270 <__errno+0x8>)
 802326a:	6818      	ldr	r0, [r3, #0]
 802326c:	4770      	bx	lr
 802326e:	bf00      	nop
 8023270:	20000074 	.word	0x20000074

08023274 <fiprintf>:
 8023274:	b40e      	push	{r1, r2, r3}
 8023276:	b503      	push	{r0, r1, lr}
 8023278:	4601      	mov	r1, r0
 802327a:	ab03      	add	r3, sp, #12
 802327c:	4805      	ldr	r0, [pc, #20]	; (8023294 <fiprintf+0x20>)
 802327e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023282:	6800      	ldr	r0, [r0, #0]
 8023284:	9301      	str	r3, [sp, #4]
 8023286:	f000 f925 	bl	80234d4 <_vfiprintf_r>
 802328a:	b002      	add	sp, #8
 802328c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023290:	b003      	add	sp, #12
 8023292:	4770      	bx	lr
 8023294:	20000074 	.word	0x20000074

08023298 <__libc_init_array>:
 8023298:	b570      	push	{r4, r5, r6, lr}
 802329a:	4d0d      	ldr	r5, [pc, #52]	; (80232d0 <__libc_init_array+0x38>)
 802329c:	4c0d      	ldr	r4, [pc, #52]	; (80232d4 <__libc_init_array+0x3c>)
 802329e:	1b64      	subs	r4, r4, r5
 80232a0:	10a4      	asrs	r4, r4, #2
 80232a2:	2600      	movs	r6, #0
 80232a4:	42a6      	cmp	r6, r4
 80232a6:	d109      	bne.n	80232bc <__libc_init_array+0x24>
 80232a8:	4d0b      	ldr	r5, [pc, #44]	; (80232d8 <__libc_init_array+0x40>)
 80232aa:	4c0c      	ldr	r4, [pc, #48]	; (80232dc <__libc_init_array+0x44>)
 80232ac:	f001 f9e8 	bl	8024680 <_init>
 80232b0:	1b64      	subs	r4, r4, r5
 80232b2:	10a4      	asrs	r4, r4, #2
 80232b4:	2600      	movs	r6, #0
 80232b6:	42a6      	cmp	r6, r4
 80232b8:	d105      	bne.n	80232c6 <__libc_init_array+0x2e>
 80232ba:	bd70      	pop	{r4, r5, r6, pc}
 80232bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80232c0:	4798      	blx	r3
 80232c2:	3601      	adds	r6, #1
 80232c4:	e7ee      	b.n	80232a4 <__libc_init_array+0xc>
 80232c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80232ca:	4798      	blx	r3
 80232cc:	3601      	adds	r6, #1
 80232ce:	e7f2      	b.n	80232b6 <__libc_init_array+0x1e>
 80232d0:	080cde70 	.word	0x080cde70
 80232d4:	080cde70 	.word	0x080cde70
 80232d8:	080cde70 	.word	0x080cde70
 80232dc:	080cdea0 	.word	0x080cdea0

080232e0 <malloc>:
 80232e0:	4b02      	ldr	r3, [pc, #8]	; (80232ec <malloc+0xc>)
 80232e2:	4601      	mov	r1, r0
 80232e4:	6818      	ldr	r0, [r3, #0]
 80232e6:	f000 b871 	b.w	80233cc <_malloc_r>
 80232ea:	bf00      	nop
 80232ec:	20000074 	.word	0x20000074

080232f0 <free>:
 80232f0:	4b02      	ldr	r3, [pc, #8]	; (80232fc <free+0xc>)
 80232f2:	4601      	mov	r1, r0
 80232f4:	6818      	ldr	r0, [r3, #0]
 80232f6:	f000 b819 	b.w	802332c <_free_r>
 80232fa:	bf00      	nop
 80232fc:	20000074 	.word	0x20000074

08023300 <memcpy>:
 8023300:	440a      	add	r2, r1
 8023302:	4291      	cmp	r1, r2
 8023304:	f100 33ff 	add.w	r3, r0, #4294967295
 8023308:	d100      	bne.n	802330c <memcpy+0xc>
 802330a:	4770      	bx	lr
 802330c:	b510      	push	{r4, lr}
 802330e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023316:	4291      	cmp	r1, r2
 8023318:	d1f9      	bne.n	802330e <memcpy+0xe>
 802331a:	bd10      	pop	{r4, pc}

0802331c <memset>:
 802331c:	4402      	add	r2, r0
 802331e:	4603      	mov	r3, r0
 8023320:	4293      	cmp	r3, r2
 8023322:	d100      	bne.n	8023326 <memset+0xa>
 8023324:	4770      	bx	lr
 8023326:	f803 1b01 	strb.w	r1, [r3], #1
 802332a:	e7f9      	b.n	8023320 <memset+0x4>

0802332c <_free_r>:
 802332c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802332e:	2900      	cmp	r1, #0
 8023330:	d048      	beq.n	80233c4 <_free_r+0x98>
 8023332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023336:	9001      	str	r0, [sp, #4]
 8023338:	2b00      	cmp	r3, #0
 802333a:	f1a1 0404 	sub.w	r4, r1, #4
 802333e:	bfb8      	it	lt
 8023340:	18e4      	addlt	r4, r4, r3
 8023342:	f000 ff5b 	bl	80241fc <__malloc_lock>
 8023346:	4a20      	ldr	r2, [pc, #128]	; (80233c8 <_free_r+0x9c>)
 8023348:	9801      	ldr	r0, [sp, #4]
 802334a:	6813      	ldr	r3, [r2, #0]
 802334c:	4615      	mov	r5, r2
 802334e:	b933      	cbnz	r3, 802335e <_free_r+0x32>
 8023350:	6063      	str	r3, [r4, #4]
 8023352:	6014      	str	r4, [r2, #0]
 8023354:	b003      	add	sp, #12
 8023356:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802335a:	f000 bf55 	b.w	8024208 <__malloc_unlock>
 802335e:	42a3      	cmp	r3, r4
 8023360:	d90b      	bls.n	802337a <_free_r+0x4e>
 8023362:	6821      	ldr	r1, [r4, #0]
 8023364:	1862      	adds	r2, r4, r1
 8023366:	4293      	cmp	r3, r2
 8023368:	bf04      	itt	eq
 802336a:	681a      	ldreq	r2, [r3, #0]
 802336c:	685b      	ldreq	r3, [r3, #4]
 802336e:	6063      	str	r3, [r4, #4]
 8023370:	bf04      	itt	eq
 8023372:	1852      	addeq	r2, r2, r1
 8023374:	6022      	streq	r2, [r4, #0]
 8023376:	602c      	str	r4, [r5, #0]
 8023378:	e7ec      	b.n	8023354 <_free_r+0x28>
 802337a:	461a      	mov	r2, r3
 802337c:	685b      	ldr	r3, [r3, #4]
 802337e:	b10b      	cbz	r3, 8023384 <_free_r+0x58>
 8023380:	42a3      	cmp	r3, r4
 8023382:	d9fa      	bls.n	802337a <_free_r+0x4e>
 8023384:	6811      	ldr	r1, [r2, #0]
 8023386:	1855      	adds	r5, r2, r1
 8023388:	42a5      	cmp	r5, r4
 802338a:	d10b      	bne.n	80233a4 <_free_r+0x78>
 802338c:	6824      	ldr	r4, [r4, #0]
 802338e:	4421      	add	r1, r4
 8023390:	1854      	adds	r4, r2, r1
 8023392:	42a3      	cmp	r3, r4
 8023394:	6011      	str	r1, [r2, #0]
 8023396:	d1dd      	bne.n	8023354 <_free_r+0x28>
 8023398:	681c      	ldr	r4, [r3, #0]
 802339a:	685b      	ldr	r3, [r3, #4]
 802339c:	6053      	str	r3, [r2, #4]
 802339e:	4421      	add	r1, r4
 80233a0:	6011      	str	r1, [r2, #0]
 80233a2:	e7d7      	b.n	8023354 <_free_r+0x28>
 80233a4:	d902      	bls.n	80233ac <_free_r+0x80>
 80233a6:	230c      	movs	r3, #12
 80233a8:	6003      	str	r3, [r0, #0]
 80233aa:	e7d3      	b.n	8023354 <_free_r+0x28>
 80233ac:	6825      	ldr	r5, [r4, #0]
 80233ae:	1961      	adds	r1, r4, r5
 80233b0:	428b      	cmp	r3, r1
 80233b2:	bf04      	itt	eq
 80233b4:	6819      	ldreq	r1, [r3, #0]
 80233b6:	685b      	ldreq	r3, [r3, #4]
 80233b8:	6063      	str	r3, [r4, #4]
 80233ba:	bf04      	itt	eq
 80233bc:	1949      	addeq	r1, r1, r5
 80233be:	6021      	streq	r1, [r4, #0]
 80233c0:	6054      	str	r4, [r2, #4]
 80233c2:	e7c7      	b.n	8023354 <_free_r+0x28>
 80233c4:	b003      	add	sp, #12
 80233c6:	bd30      	pop	{r4, r5, pc}
 80233c8:	20056638 	.word	0x20056638

080233cc <_malloc_r>:
 80233cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233ce:	1ccd      	adds	r5, r1, #3
 80233d0:	f025 0503 	bic.w	r5, r5, #3
 80233d4:	3508      	adds	r5, #8
 80233d6:	2d0c      	cmp	r5, #12
 80233d8:	bf38      	it	cc
 80233da:	250c      	movcc	r5, #12
 80233dc:	2d00      	cmp	r5, #0
 80233de:	4606      	mov	r6, r0
 80233e0:	db01      	blt.n	80233e6 <_malloc_r+0x1a>
 80233e2:	42a9      	cmp	r1, r5
 80233e4:	d903      	bls.n	80233ee <_malloc_r+0x22>
 80233e6:	230c      	movs	r3, #12
 80233e8:	6033      	str	r3, [r6, #0]
 80233ea:	2000      	movs	r0, #0
 80233ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80233ee:	f000 ff05 	bl	80241fc <__malloc_lock>
 80233f2:	4921      	ldr	r1, [pc, #132]	; (8023478 <_malloc_r+0xac>)
 80233f4:	680a      	ldr	r2, [r1, #0]
 80233f6:	4614      	mov	r4, r2
 80233f8:	b99c      	cbnz	r4, 8023422 <_malloc_r+0x56>
 80233fa:	4f20      	ldr	r7, [pc, #128]	; (802347c <_malloc_r+0xb0>)
 80233fc:	683b      	ldr	r3, [r7, #0]
 80233fe:	b923      	cbnz	r3, 802340a <_malloc_r+0x3e>
 8023400:	4621      	mov	r1, r4
 8023402:	4630      	mov	r0, r6
 8023404:	f000 fb2a 	bl	8023a5c <_sbrk_r>
 8023408:	6038      	str	r0, [r7, #0]
 802340a:	4629      	mov	r1, r5
 802340c:	4630      	mov	r0, r6
 802340e:	f000 fb25 	bl	8023a5c <_sbrk_r>
 8023412:	1c43      	adds	r3, r0, #1
 8023414:	d123      	bne.n	802345e <_malloc_r+0x92>
 8023416:	230c      	movs	r3, #12
 8023418:	6033      	str	r3, [r6, #0]
 802341a:	4630      	mov	r0, r6
 802341c:	f000 fef4 	bl	8024208 <__malloc_unlock>
 8023420:	e7e3      	b.n	80233ea <_malloc_r+0x1e>
 8023422:	6823      	ldr	r3, [r4, #0]
 8023424:	1b5b      	subs	r3, r3, r5
 8023426:	d417      	bmi.n	8023458 <_malloc_r+0x8c>
 8023428:	2b0b      	cmp	r3, #11
 802342a:	d903      	bls.n	8023434 <_malloc_r+0x68>
 802342c:	6023      	str	r3, [r4, #0]
 802342e:	441c      	add	r4, r3
 8023430:	6025      	str	r5, [r4, #0]
 8023432:	e004      	b.n	802343e <_malloc_r+0x72>
 8023434:	6863      	ldr	r3, [r4, #4]
 8023436:	42a2      	cmp	r2, r4
 8023438:	bf0c      	ite	eq
 802343a:	600b      	streq	r3, [r1, #0]
 802343c:	6053      	strne	r3, [r2, #4]
 802343e:	4630      	mov	r0, r6
 8023440:	f000 fee2 	bl	8024208 <__malloc_unlock>
 8023444:	f104 000b 	add.w	r0, r4, #11
 8023448:	1d23      	adds	r3, r4, #4
 802344a:	f020 0007 	bic.w	r0, r0, #7
 802344e:	1ac2      	subs	r2, r0, r3
 8023450:	d0cc      	beq.n	80233ec <_malloc_r+0x20>
 8023452:	1a1b      	subs	r3, r3, r0
 8023454:	50a3      	str	r3, [r4, r2]
 8023456:	e7c9      	b.n	80233ec <_malloc_r+0x20>
 8023458:	4622      	mov	r2, r4
 802345a:	6864      	ldr	r4, [r4, #4]
 802345c:	e7cc      	b.n	80233f8 <_malloc_r+0x2c>
 802345e:	1cc4      	adds	r4, r0, #3
 8023460:	f024 0403 	bic.w	r4, r4, #3
 8023464:	42a0      	cmp	r0, r4
 8023466:	d0e3      	beq.n	8023430 <_malloc_r+0x64>
 8023468:	1a21      	subs	r1, r4, r0
 802346a:	4630      	mov	r0, r6
 802346c:	f000 faf6 	bl	8023a5c <_sbrk_r>
 8023470:	3001      	adds	r0, #1
 8023472:	d1dd      	bne.n	8023430 <_malloc_r+0x64>
 8023474:	e7cf      	b.n	8023416 <_malloc_r+0x4a>
 8023476:	bf00      	nop
 8023478:	20056638 	.word	0x20056638
 802347c:	2005663c 	.word	0x2005663c

08023480 <__sfputc_r>:
 8023480:	6893      	ldr	r3, [r2, #8]
 8023482:	3b01      	subs	r3, #1
 8023484:	2b00      	cmp	r3, #0
 8023486:	b410      	push	{r4}
 8023488:	6093      	str	r3, [r2, #8]
 802348a:	da08      	bge.n	802349e <__sfputc_r+0x1e>
 802348c:	6994      	ldr	r4, [r2, #24]
 802348e:	42a3      	cmp	r3, r4
 8023490:	db01      	blt.n	8023496 <__sfputc_r+0x16>
 8023492:	290a      	cmp	r1, #10
 8023494:	d103      	bne.n	802349e <__sfputc_r+0x1e>
 8023496:	f85d 4b04 	ldr.w	r4, [sp], #4
 802349a:	f000 bb53 	b.w	8023b44 <__swbuf_r>
 802349e:	6813      	ldr	r3, [r2, #0]
 80234a0:	1c58      	adds	r0, r3, #1
 80234a2:	6010      	str	r0, [r2, #0]
 80234a4:	7019      	strb	r1, [r3, #0]
 80234a6:	4608      	mov	r0, r1
 80234a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234ac:	4770      	bx	lr

080234ae <__sfputs_r>:
 80234ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234b0:	4606      	mov	r6, r0
 80234b2:	460f      	mov	r7, r1
 80234b4:	4614      	mov	r4, r2
 80234b6:	18d5      	adds	r5, r2, r3
 80234b8:	42ac      	cmp	r4, r5
 80234ba:	d101      	bne.n	80234c0 <__sfputs_r+0x12>
 80234bc:	2000      	movs	r0, #0
 80234be:	e007      	b.n	80234d0 <__sfputs_r+0x22>
 80234c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234c4:	463a      	mov	r2, r7
 80234c6:	4630      	mov	r0, r6
 80234c8:	f7ff ffda 	bl	8023480 <__sfputc_r>
 80234cc:	1c43      	adds	r3, r0, #1
 80234ce:	d1f3      	bne.n	80234b8 <__sfputs_r+0xa>
 80234d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080234d4 <_vfiprintf_r>:
 80234d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234d8:	460d      	mov	r5, r1
 80234da:	b09d      	sub	sp, #116	; 0x74
 80234dc:	4614      	mov	r4, r2
 80234de:	4698      	mov	r8, r3
 80234e0:	4606      	mov	r6, r0
 80234e2:	b118      	cbz	r0, 80234ec <_vfiprintf_r+0x18>
 80234e4:	6983      	ldr	r3, [r0, #24]
 80234e6:	b90b      	cbnz	r3, 80234ec <_vfiprintf_r+0x18>
 80234e8:	f000 fd68 	bl	8023fbc <__sinit>
 80234ec:	4b89      	ldr	r3, [pc, #548]	; (8023714 <_vfiprintf_r+0x240>)
 80234ee:	429d      	cmp	r5, r3
 80234f0:	d11b      	bne.n	802352a <_vfiprintf_r+0x56>
 80234f2:	6875      	ldr	r5, [r6, #4]
 80234f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234f6:	07d9      	lsls	r1, r3, #31
 80234f8:	d405      	bmi.n	8023506 <_vfiprintf_r+0x32>
 80234fa:	89ab      	ldrh	r3, [r5, #12]
 80234fc:	059a      	lsls	r2, r3, #22
 80234fe:	d402      	bmi.n	8023506 <_vfiprintf_r+0x32>
 8023500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023502:	f000 fdf9 	bl	80240f8 <__retarget_lock_acquire_recursive>
 8023506:	89ab      	ldrh	r3, [r5, #12]
 8023508:	071b      	lsls	r3, r3, #28
 802350a:	d501      	bpl.n	8023510 <_vfiprintf_r+0x3c>
 802350c:	692b      	ldr	r3, [r5, #16]
 802350e:	b9eb      	cbnz	r3, 802354c <_vfiprintf_r+0x78>
 8023510:	4629      	mov	r1, r5
 8023512:	4630      	mov	r0, r6
 8023514:	f000 fb68 	bl	8023be8 <__swsetup_r>
 8023518:	b1c0      	cbz	r0, 802354c <_vfiprintf_r+0x78>
 802351a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802351c:	07dc      	lsls	r4, r3, #31
 802351e:	d50e      	bpl.n	802353e <_vfiprintf_r+0x6a>
 8023520:	f04f 30ff 	mov.w	r0, #4294967295
 8023524:	b01d      	add	sp, #116	; 0x74
 8023526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802352a:	4b7b      	ldr	r3, [pc, #492]	; (8023718 <_vfiprintf_r+0x244>)
 802352c:	429d      	cmp	r5, r3
 802352e:	d101      	bne.n	8023534 <_vfiprintf_r+0x60>
 8023530:	68b5      	ldr	r5, [r6, #8]
 8023532:	e7df      	b.n	80234f4 <_vfiprintf_r+0x20>
 8023534:	4b79      	ldr	r3, [pc, #484]	; (802371c <_vfiprintf_r+0x248>)
 8023536:	429d      	cmp	r5, r3
 8023538:	bf08      	it	eq
 802353a:	68f5      	ldreq	r5, [r6, #12]
 802353c:	e7da      	b.n	80234f4 <_vfiprintf_r+0x20>
 802353e:	89ab      	ldrh	r3, [r5, #12]
 8023540:	0598      	lsls	r0, r3, #22
 8023542:	d4ed      	bmi.n	8023520 <_vfiprintf_r+0x4c>
 8023544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023546:	f000 fdd9 	bl	80240fc <__retarget_lock_release_recursive>
 802354a:	e7e9      	b.n	8023520 <_vfiprintf_r+0x4c>
 802354c:	2300      	movs	r3, #0
 802354e:	9309      	str	r3, [sp, #36]	; 0x24
 8023550:	2320      	movs	r3, #32
 8023552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023556:	f8cd 800c 	str.w	r8, [sp, #12]
 802355a:	2330      	movs	r3, #48	; 0x30
 802355c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023720 <_vfiprintf_r+0x24c>
 8023560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023564:	f04f 0901 	mov.w	r9, #1
 8023568:	4623      	mov	r3, r4
 802356a:	469a      	mov	sl, r3
 802356c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023570:	b10a      	cbz	r2, 8023576 <_vfiprintf_r+0xa2>
 8023572:	2a25      	cmp	r2, #37	; 0x25
 8023574:	d1f9      	bne.n	802356a <_vfiprintf_r+0x96>
 8023576:	ebba 0b04 	subs.w	fp, sl, r4
 802357a:	d00b      	beq.n	8023594 <_vfiprintf_r+0xc0>
 802357c:	465b      	mov	r3, fp
 802357e:	4622      	mov	r2, r4
 8023580:	4629      	mov	r1, r5
 8023582:	4630      	mov	r0, r6
 8023584:	f7ff ff93 	bl	80234ae <__sfputs_r>
 8023588:	3001      	adds	r0, #1
 802358a:	f000 80aa 	beq.w	80236e2 <_vfiprintf_r+0x20e>
 802358e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023590:	445a      	add	r2, fp
 8023592:	9209      	str	r2, [sp, #36]	; 0x24
 8023594:	f89a 3000 	ldrb.w	r3, [sl]
 8023598:	2b00      	cmp	r3, #0
 802359a:	f000 80a2 	beq.w	80236e2 <_vfiprintf_r+0x20e>
 802359e:	2300      	movs	r3, #0
 80235a0:	f04f 32ff 	mov.w	r2, #4294967295
 80235a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80235a8:	f10a 0a01 	add.w	sl, sl, #1
 80235ac:	9304      	str	r3, [sp, #16]
 80235ae:	9307      	str	r3, [sp, #28]
 80235b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80235b4:	931a      	str	r3, [sp, #104]	; 0x68
 80235b6:	4654      	mov	r4, sl
 80235b8:	2205      	movs	r2, #5
 80235ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235be:	4858      	ldr	r0, [pc, #352]	; (8023720 <_vfiprintf_r+0x24c>)
 80235c0:	f7dc fe46 	bl	8000250 <memchr>
 80235c4:	9a04      	ldr	r2, [sp, #16]
 80235c6:	b9d8      	cbnz	r0, 8023600 <_vfiprintf_r+0x12c>
 80235c8:	06d1      	lsls	r1, r2, #27
 80235ca:	bf44      	itt	mi
 80235cc:	2320      	movmi	r3, #32
 80235ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235d2:	0713      	lsls	r3, r2, #28
 80235d4:	bf44      	itt	mi
 80235d6:	232b      	movmi	r3, #43	; 0x2b
 80235d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235dc:	f89a 3000 	ldrb.w	r3, [sl]
 80235e0:	2b2a      	cmp	r3, #42	; 0x2a
 80235e2:	d015      	beq.n	8023610 <_vfiprintf_r+0x13c>
 80235e4:	9a07      	ldr	r2, [sp, #28]
 80235e6:	4654      	mov	r4, sl
 80235e8:	2000      	movs	r0, #0
 80235ea:	f04f 0c0a 	mov.w	ip, #10
 80235ee:	4621      	mov	r1, r4
 80235f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80235f4:	3b30      	subs	r3, #48	; 0x30
 80235f6:	2b09      	cmp	r3, #9
 80235f8:	d94e      	bls.n	8023698 <_vfiprintf_r+0x1c4>
 80235fa:	b1b0      	cbz	r0, 802362a <_vfiprintf_r+0x156>
 80235fc:	9207      	str	r2, [sp, #28]
 80235fe:	e014      	b.n	802362a <_vfiprintf_r+0x156>
 8023600:	eba0 0308 	sub.w	r3, r0, r8
 8023604:	fa09 f303 	lsl.w	r3, r9, r3
 8023608:	4313      	orrs	r3, r2
 802360a:	9304      	str	r3, [sp, #16]
 802360c:	46a2      	mov	sl, r4
 802360e:	e7d2      	b.n	80235b6 <_vfiprintf_r+0xe2>
 8023610:	9b03      	ldr	r3, [sp, #12]
 8023612:	1d19      	adds	r1, r3, #4
 8023614:	681b      	ldr	r3, [r3, #0]
 8023616:	9103      	str	r1, [sp, #12]
 8023618:	2b00      	cmp	r3, #0
 802361a:	bfbb      	ittet	lt
 802361c:	425b      	neglt	r3, r3
 802361e:	f042 0202 	orrlt.w	r2, r2, #2
 8023622:	9307      	strge	r3, [sp, #28]
 8023624:	9307      	strlt	r3, [sp, #28]
 8023626:	bfb8      	it	lt
 8023628:	9204      	strlt	r2, [sp, #16]
 802362a:	7823      	ldrb	r3, [r4, #0]
 802362c:	2b2e      	cmp	r3, #46	; 0x2e
 802362e:	d10c      	bne.n	802364a <_vfiprintf_r+0x176>
 8023630:	7863      	ldrb	r3, [r4, #1]
 8023632:	2b2a      	cmp	r3, #42	; 0x2a
 8023634:	d135      	bne.n	80236a2 <_vfiprintf_r+0x1ce>
 8023636:	9b03      	ldr	r3, [sp, #12]
 8023638:	1d1a      	adds	r2, r3, #4
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	9203      	str	r2, [sp, #12]
 802363e:	2b00      	cmp	r3, #0
 8023640:	bfb8      	it	lt
 8023642:	f04f 33ff 	movlt.w	r3, #4294967295
 8023646:	3402      	adds	r4, #2
 8023648:	9305      	str	r3, [sp, #20]
 802364a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023730 <_vfiprintf_r+0x25c>
 802364e:	7821      	ldrb	r1, [r4, #0]
 8023650:	2203      	movs	r2, #3
 8023652:	4650      	mov	r0, sl
 8023654:	f7dc fdfc 	bl	8000250 <memchr>
 8023658:	b140      	cbz	r0, 802366c <_vfiprintf_r+0x198>
 802365a:	2340      	movs	r3, #64	; 0x40
 802365c:	eba0 000a 	sub.w	r0, r0, sl
 8023660:	fa03 f000 	lsl.w	r0, r3, r0
 8023664:	9b04      	ldr	r3, [sp, #16]
 8023666:	4303      	orrs	r3, r0
 8023668:	3401      	adds	r4, #1
 802366a:	9304      	str	r3, [sp, #16]
 802366c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023670:	482c      	ldr	r0, [pc, #176]	; (8023724 <_vfiprintf_r+0x250>)
 8023672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023676:	2206      	movs	r2, #6
 8023678:	f7dc fdea 	bl	8000250 <memchr>
 802367c:	2800      	cmp	r0, #0
 802367e:	d03f      	beq.n	8023700 <_vfiprintf_r+0x22c>
 8023680:	4b29      	ldr	r3, [pc, #164]	; (8023728 <_vfiprintf_r+0x254>)
 8023682:	bb1b      	cbnz	r3, 80236cc <_vfiprintf_r+0x1f8>
 8023684:	9b03      	ldr	r3, [sp, #12]
 8023686:	3307      	adds	r3, #7
 8023688:	f023 0307 	bic.w	r3, r3, #7
 802368c:	3308      	adds	r3, #8
 802368e:	9303      	str	r3, [sp, #12]
 8023690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023692:	443b      	add	r3, r7
 8023694:	9309      	str	r3, [sp, #36]	; 0x24
 8023696:	e767      	b.n	8023568 <_vfiprintf_r+0x94>
 8023698:	fb0c 3202 	mla	r2, ip, r2, r3
 802369c:	460c      	mov	r4, r1
 802369e:	2001      	movs	r0, #1
 80236a0:	e7a5      	b.n	80235ee <_vfiprintf_r+0x11a>
 80236a2:	2300      	movs	r3, #0
 80236a4:	3401      	adds	r4, #1
 80236a6:	9305      	str	r3, [sp, #20]
 80236a8:	4619      	mov	r1, r3
 80236aa:	f04f 0c0a 	mov.w	ip, #10
 80236ae:	4620      	mov	r0, r4
 80236b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236b4:	3a30      	subs	r2, #48	; 0x30
 80236b6:	2a09      	cmp	r2, #9
 80236b8:	d903      	bls.n	80236c2 <_vfiprintf_r+0x1ee>
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d0c5      	beq.n	802364a <_vfiprintf_r+0x176>
 80236be:	9105      	str	r1, [sp, #20]
 80236c0:	e7c3      	b.n	802364a <_vfiprintf_r+0x176>
 80236c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80236c6:	4604      	mov	r4, r0
 80236c8:	2301      	movs	r3, #1
 80236ca:	e7f0      	b.n	80236ae <_vfiprintf_r+0x1da>
 80236cc:	ab03      	add	r3, sp, #12
 80236ce:	9300      	str	r3, [sp, #0]
 80236d0:	462a      	mov	r2, r5
 80236d2:	4b16      	ldr	r3, [pc, #88]	; (802372c <_vfiprintf_r+0x258>)
 80236d4:	a904      	add	r1, sp, #16
 80236d6:	4630      	mov	r0, r6
 80236d8:	f3af 8000 	nop.w
 80236dc:	4607      	mov	r7, r0
 80236de:	1c78      	adds	r0, r7, #1
 80236e0:	d1d6      	bne.n	8023690 <_vfiprintf_r+0x1bc>
 80236e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236e4:	07d9      	lsls	r1, r3, #31
 80236e6:	d405      	bmi.n	80236f4 <_vfiprintf_r+0x220>
 80236e8:	89ab      	ldrh	r3, [r5, #12]
 80236ea:	059a      	lsls	r2, r3, #22
 80236ec:	d402      	bmi.n	80236f4 <_vfiprintf_r+0x220>
 80236ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80236f0:	f000 fd04 	bl	80240fc <__retarget_lock_release_recursive>
 80236f4:	89ab      	ldrh	r3, [r5, #12]
 80236f6:	065b      	lsls	r3, r3, #25
 80236f8:	f53f af12 	bmi.w	8023520 <_vfiprintf_r+0x4c>
 80236fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236fe:	e711      	b.n	8023524 <_vfiprintf_r+0x50>
 8023700:	ab03      	add	r3, sp, #12
 8023702:	9300      	str	r3, [sp, #0]
 8023704:	462a      	mov	r2, r5
 8023706:	4b09      	ldr	r3, [pc, #36]	; (802372c <_vfiprintf_r+0x258>)
 8023708:	a904      	add	r1, sp, #16
 802370a:	4630      	mov	r0, r6
 802370c:	f000 f880 	bl	8023810 <_printf_i>
 8023710:	e7e4      	b.n	80236dc <_vfiprintf_r+0x208>
 8023712:	bf00      	nop
 8023714:	080288a0 	.word	0x080288a0
 8023718:	080288c0 	.word	0x080288c0
 802371c:	08028880 	.word	0x08028880
 8023720:	08028848 	.word	0x08028848
 8023724:	08028852 	.word	0x08028852
 8023728:	00000000 	.word	0x00000000
 802372c:	080234af 	.word	0x080234af
 8023730:	0802884e 	.word	0x0802884e

08023734 <_printf_common>:
 8023734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023738:	4616      	mov	r6, r2
 802373a:	4699      	mov	r9, r3
 802373c:	688a      	ldr	r2, [r1, #8]
 802373e:	690b      	ldr	r3, [r1, #16]
 8023740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023744:	4293      	cmp	r3, r2
 8023746:	bfb8      	it	lt
 8023748:	4613      	movlt	r3, r2
 802374a:	6033      	str	r3, [r6, #0]
 802374c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023750:	4607      	mov	r7, r0
 8023752:	460c      	mov	r4, r1
 8023754:	b10a      	cbz	r2, 802375a <_printf_common+0x26>
 8023756:	3301      	adds	r3, #1
 8023758:	6033      	str	r3, [r6, #0]
 802375a:	6823      	ldr	r3, [r4, #0]
 802375c:	0699      	lsls	r1, r3, #26
 802375e:	bf42      	ittt	mi
 8023760:	6833      	ldrmi	r3, [r6, #0]
 8023762:	3302      	addmi	r3, #2
 8023764:	6033      	strmi	r3, [r6, #0]
 8023766:	6825      	ldr	r5, [r4, #0]
 8023768:	f015 0506 	ands.w	r5, r5, #6
 802376c:	d106      	bne.n	802377c <_printf_common+0x48>
 802376e:	f104 0a19 	add.w	sl, r4, #25
 8023772:	68e3      	ldr	r3, [r4, #12]
 8023774:	6832      	ldr	r2, [r6, #0]
 8023776:	1a9b      	subs	r3, r3, r2
 8023778:	42ab      	cmp	r3, r5
 802377a:	dc26      	bgt.n	80237ca <_printf_common+0x96>
 802377c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023780:	1e13      	subs	r3, r2, #0
 8023782:	6822      	ldr	r2, [r4, #0]
 8023784:	bf18      	it	ne
 8023786:	2301      	movne	r3, #1
 8023788:	0692      	lsls	r2, r2, #26
 802378a:	d42b      	bmi.n	80237e4 <_printf_common+0xb0>
 802378c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023790:	4649      	mov	r1, r9
 8023792:	4638      	mov	r0, r7
 8023794:	47c0      	blx	r8
 8023796:	3001      	adds	r0, #1
 8023798:	d01e      	beq.n	80237d8 <_printf_common+0xa4>
 802379a:	6823      	ldr	r3, [r4, #0]
 802379c:	68e5      	ldr	r5, [r4, #12]
 802379e:	6832      	ldr	r2, [r6, #0]
 80237a0:	f003 0306 	and.w	r3, r3, #6
 80237a4:	2b04      	cmp	r3, #4
 80237a6:	bf08      	it	eq
 80237a8:	1aad      	subeq	r5, r5, r2
 80237aa:	68a3      	ldr	r3, [r4, #8]
 80237ac:	6922      	ldr	r2, [r4, #16]
 80237ae:	bf0c      	ite	eq
 80237b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80237b4:	2500      	movne	r5, #0
 80237b6:	4293      	cmp	r3, r2
 80237b8:	bfc4      	itt	gt
 80237ba:	1a9b      	subgt	r3, r3, r2
 80237bc:	18ed      	addgt	r5, r5, r3
 80237be:	2600      	movs	r6, #0
 80237c0:	341a      	adds	r4, #26
 80237c2:	42b5      	cmp	r5, r6
 80237c4:	d11a      	bne.n	80237fc <_printf_common+0xc8>
 80237c6:	2000      	movs	r0, #0
 80237c8:	e008      	b.n	80237dc <_printf_common+0xa8>
 80237ca:	2301      	movs	r3, #1
 80237cc:	4652      	mov	r2, sl
 80237ce:	4649      	mov	r1, r9
 80237d0:	4638      	mov	r0, r7
 80237d2:	47c0      	blx	r8
 80237d4:	3001      	adds	r0, #1
 80237d6:	d103      	bne.n	80237e0 <_printf_common+0xac>
 80237d8:	f04f 30ff 	mov.w	r0, #4294967295
 80237dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237e0:	3501      	adds	r5, #1
 80237e2:	e7c6      	b.n	8023772 <_printf_common+0x3e>
 80237e4:	18e1      	adds	r1, r4, r3
 80237e6:	1c5a      	adds	r2, r3, #1
 80237e8:	2030      	movs	r0, #48	; 0x30
 80237ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80237ee:	4422      	add	r2, r4
 80237f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80237f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80237f8:	3302      	adds	r3, #2
 80237fa:	e7c7      	b.n	802378c <_printf_common+0x58>
 80237fc:	2301      	movs	r3, #1
 80237fe:	4622      	mov	r2, r4
 8023800:	4649      	mov	r1, r9
 8023802:	4638      	mov	r0, r7
 8023804:	47c0      	blx	r8
 8023806:	3001      	adds	r0, #1
 8023808:	d0e6      	beq.n	80237d8 <_printf_common+0xa4>
 802380a:	3601      	adds	r6, #1
 802380c:	e7d9      	b.n	80237c2 <_printf_common+0x8e>
	...

08023810 <_printf_i>:
 8023810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023814:	460c      	mov	r4, r1
 8023816:	4691      	mov	r9, r2
 8023818:	7e27      	ldrb	r7, [r4, #24]
 802381a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802381c:	2f78      	cmp	r7, #120	; 0x78
 802381e:	4680      	mov	r8, r0
 8023820:	469a      	mov	sl, r3
 8023822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023826:	d807      	bhi.n	8023838 <_printf_i+0x28>
 8023828:	2f62      	cmp	r7, #98	; 0x62
 802382a:	d80a      	bhi.n	8023842 <_printf_i+0x32>
 802382c:	2f00      	cmp	r7, #0
 802382e:	f000 80d8 	beq.w	80239e2 <_printf_i+0x1d2>
 8023832:	2f58      	cmp	r7, #88	; 0x58
 8023834:	f000 80a3 	beq.w	802397e <_printf_i+0x16e>
 8023838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802383c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023840:	e03a      	b.n	80238b8 <_printf_i+0xa8>
 8023842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023846:	2b15      	cmp	r3, #21
 8023848:	d8f6      	bhi.n	8023838 <_printf_i+0x28>
 802384a:	a001      	add	r0, pc, #4	; (adr r0, 8023850 <_printf_i+0x40>)
 802384c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8023850:	080238a9 	.word	0x080238a9
 8023854:	080238bd 	.word	0x080238bd
 8023858:	08023839 	.word	0x08023839
 802385c:	08023839 	.word	0x08023839
 8023860:	08023839 	.word	0x08023839
 8023864:	08023839 	.word	0x08023839
 8023868:	080238bd 	.word	0x080238bd
 802386c:	08023839 	.word	0x08023839
 8023870:	08023839 	.word	0x08023839
 8023874:	08023839 	.word	0x08023839
 8023878:	08023839 	.word	0x08023839
 802387c:	080239c9 	.word	0x080239c9
 8023880:	080238ed 	.word	0x080238ed
 8023884:	080239ab 	.word	0x080239ab
 8023888:	08023839 	.word	0x08023839
 802388c:	08023839 	.word	0x08023839
 8023890:	080239eb 	.word	0x080239eb
 8023894:	08023839 	.word	0x08023839
 8023898:	080238ed 	.word	0x080238ed
 802389c:	08023839 	.word	0x08023839
 80238a0:	08023839 	.word	0x08023839
 80238a4:	080239b3 	.word	0x080239b3
 80238a8:	680b      	ldr	r3, [r1, #0]
 80238aa:	1d1a      	adds	r2, r3, #4
 80238ac:	681b      	ldr	r3, [r3, #0]
 80238ae:	600a      	str	r2, [r1, #0]
 80238b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80238b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80238b8:	2301      	movs	r3, #1
 80238ba:	e0a3      	b.n	8023a04 <_printf_i+0x1f4>
 80238bc:	6825      	ldr	r5, [r4, #0]
 80238be:	6808      	ldr	r0, [r1, #0]
 80238c0:	062e      	lsls	r6, r5, #24
 80238c2:	f100 0304 	add.w	r3, r0, #4
 80238c6:	d50a      	bpl.n	80238de <_printf_i+0xce>
 80238c8:	6805      	ldr	r5, [r0, #0]
 80238ca:	600b      	str	r3, [r1, #0]
 80238cc:	2d00      	cmp	r5, #0
 80238ce:	da03      	bge.n	80238d8 <_printf_i+0xc8>
 80238d0:	232d      	movs	r3, #45	; 0x2d
 80238d2:	426d      	negs	r5, r5
 80238d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80238d8:	485e      	ldr	r0, [pc, #376]	; (8023a54 <_printf_i+0x244>)
 80238da:	230a      	movs	r3, #10
 80238dc:	e019      	b.n	8023912 <_printf_i+0x102>
 80238de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80238e2:	6805      	ldr	r5, [r0, #0]
 80238e4:	600b      	str	r3, [r1, #0]
 80238e6:	bf18      	it	ne
 80238e8:	b22d      	sxthne	r5, r5
 80238ea:	e7ef      	b.n	80238cc <_printf_i+0xbc>
 80238ec:	680b      	ldr	r3, [r1, #0]
 80238ee:	6825      	ldr	r5, [r4, #0]
 80238f0:	1d18      	adds	r0, r3, #4
 80238f2:	6008      	str	r0, [r1, #0]
 80238f4:	0628      	lsls	r0, r5, #24
 80238f6:	d501      	bpl.n	80238fc <_printf_i+0xec>
 80238f8:	681d      	ldr	r5, [r3, #0]
 80238fa:	e002      	b.n	8023902 <_printf_i+0xf2>
 80238fc:	0669      	lsls	r1, r5, #25
 80238fe:	d5fb      	bpl.n	80238f8 <_printf_i+0xe8>
 8023900:	881d      	ldrh	r5, [r3, #0]
 8023902:	4854      	ldr	r0, [pc, #336]	; (8023a54 <_printf_i+0x244>)
 8023904:	2f6f      	cmp	r7, #111	; 0x6f
 8023906:	bf0c      	ite	eq
 8023908:	2308      	moveq	r3, #8
 802390a:	230a      	movne	r3, #10
 802390c:	2100      	movs	r1, #0
 802390e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023912:	6866      	ldr	r6, [r4, #4]
 8023914:	60a6      	str	r6, [r4, #8]
 8023916:	2e00      	cmp	r6, #0
 8023918:	bfa2      	ittt	ge
 802391a:	6821      	ldrge	r1, [r4, #0]
 802391c:	f021 0104 	bicge.w	r1, r1, #4
 8023920:	6021      	strge	r1, [r4, #0]
 8023922:	b90d      	cbnz	r5, 8023928 <_printf_i+0x118>
 8023924:	2e00      	cmp	r6, #0
 8023926:	d04d      	beq.n	80239c4 <_printf_i+0x1b4>
 8023928:	4616      	mov	r6, r2
 802392a:	fbb5 f1f3 	udiv	r1, r5, r3
 802392e:	fb03 5711 	mls	r7, r3, r1, r5
 8023932:	5dc7      	ldrb	r7, [r0, r7]
 8023934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023938:	462f      	mov	r7, r5
 802393a:	42bb      	cmp	r3, r7
 802393c:	460d      	mov	r5, r1
 802393e:	d9f4      	bls.n	802392a <_printf_i+0x11a>
 8023940:	2b08      	cmp	r3, #8
 8023942:	d10b      	bne.n	802395c <_printf_i+0x14c>
 8023944:	6823      	ldr	r3, [r4, #0]
 8023946:	07df      	lsls	r7, r3, #31
 8023948:	d508      	bpl.n	802395c <_printf_i+0x14c>
 802394a:	6923      	ldr	r3, [r4, #16]
 802394c:	6861      	ldr	r1, [r4, #4]
 802394e:	4299      	cmp	r1, r3
 8023950:	bfde      	ittt	le
 8023952:	2330      	movle	r3, #48	; 0x30
 8023954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023958:	f106 36ff 	addle.w	r6, r6, #4294967295
 802395c:	1b92      	subs	r2, r2, r6
 802395e:	6122      	str	r2, [r4, #16]
 8023960:	f8cd a000 	str.w	sl, [sp]
 8023964:	464b      	mov	r3, r9
 8023966:	aa03      	add	r2, sp, #12
 8023968:	4621      	mov	r1, r4
 802396a:	4640      	mov	r0, r8
 802396c:	f7ff fee2 	bl	8023734 <_printf_common>
 8023970:	3001      	adds	r0, #1
 8023972:	d14c      	bne.n	8023a0e <_printf_i+0x1fe>
 8023974:	f04f 30ff 	mov.w	r0, #4294967295
 8023978:	b004      	add	sp, #16
 802397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802397e:	4835      	ldr	r0, [pc, #212]	; (8023a54 <_printf_i+0x244>)
 8023980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023984:	6823      	ldr	r3, [r4, #0]
 8023986:	680e      	ldr	r6, [r1, #0]
 8023988:	061f      	lsls	r7, r3, #24
 802398a:	f856 5b04 	ldr.w	r5, [r6], #4
 802398e:	600e      	str	r6, [r1, #0]
 8023990:	d514      	bpl.n	80239bc <_printf_i+0x1ac>
 8023992:	07d9      	lsls	r1, r3, #31
 8023994:	bf44      	itt	mi
 8023996:	f043 0320 	orrmi.w	r3, r3, #32
 802399a:	6023      	strmi	r3, [r4, #0]
 802399c:	b91d      	cbnz	r5, 80239a6 <_printf_i+0x196>
 802399e:	6823      	ldr	r3, [r4, #0]
 80239a0:	f023 0320 	bic.w	r3, r3, #32
 80239a4:	6023      	str	r3, [r4, #0]
 80239a6:	2310      	movs	r3, #16
 80239a8:	e7b0      	b.n	802390c <_printf_i+0xfc>
 80239aa:	6823      	ldr	r3, [r4, #0]
 80239ac:	f043 0320 	orr.w	r3, r3, #32
 80239b0:	6023      	str	r3, [r4, #0]
 80239b2:	2378      	movs	r3, #120	; 0x78
 80239b4:	4828      	ldr	r0, [pc, #160]	; (8023a58 <_printf_i+0x248>)
 80239b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80239ba:	e7e3      	b.n	8023984 <_printf_i+0x174>
 80239bc:	065e      	lsls	r6, r3, #25
 80239be:	bf48      	it	mi
 80239c0:	b2ad      	uxthmi	r5, r5
 80239c2:	e7e6      	b.n	8023992 <_printf_i+0x182>
 80239c4:	4616      	mov	r6, r2
 80239c6:	e7bb      	b.n	8023940 <_printf_i+0x130>
 80239c8:	680b      	ldr	r3, [r1, #0]
 80239ca:	6826      	ldr	r6, [r4, #0]
 80239cc:	6960      	ldr	r0, [r4, #20]
 80239ce:	1d1d      	adds	r5, r3, #4
 80239d0:	600d      	str	r5, [r1, #0]
 80239d2:	0635      	lsls	r5, r6, #24
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	d501      	bpl.n	80239dc <_printf_i+0x1cc>
 80239d8:	6018      	str	r0, [r3, #0]
 80239da:	e002      	b.n	80239e2 <_printf_i+0x1d2>
 80239dc:	0671      	lsls	r1, r6, #25
 80239de:	d5fb      	bpl.n	80239d8 <_printf_i+0x1c8>
 80239e0:	8018      	strh	r0, [r3, #0]
 80239e2:	2300      	movs	r3, #0
 80239e4:	6123      	str	r3, [r4, #16]
 80239e6:	4616      	mov	r6, r2
 80239e8:	e7ba      	b.n	8023960 <_printf_i+0x150>
 80239ea:	680b      	ldr	r3, [r1, #0]
 80239ec:	1d1a      	adds	r2, r3, #4
 80239ee:	600a      	str	r2, [r1, #0]
 80239f0:	681e      	ldr	r6, [r3, #0]
 80239f2:	6862      	ldr	r2, [r4, #4]
 80239f4:	2100      	movs	r1, #0
 80239f6:	4630      	mov	r0, r6
 80239f8:	f7dc fc2a 	bl	8000250 <memchr>
 80239fc:	b108      	cbz	r0, 8023a02 <_printf_i+0x1f2>
 80239fe:	1b80      	subs	r0, r0, r6
 8023a00:	6060      	str	r0, [r4, #4]
 8023a02:	6863      	ldr	r3, [r4, #4]
 8023a04:	6123      	str	r3, [r4, #16]
 8023a06:	2300      	movs	r3, #0
 8023a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a0c:	e7a8      	b.n	8023960 <_printf_i+0x150>
 8023a0e:	6923      	ldr	r3, [r4, #16]
 8023a10:	4632      	mov	r2, r6
 8023a12:	4649      	mov	r1, r9
 8023a14:	4640      	mov	r0, r8
 8023a16:	47d0      	blx	sl
 8023a18:	3001      	adds	r0, #1
 8023a1a:	d0ab      	beq.n	8023974 <_printf_i+0x164>
 8023a1c:	6823      	ldr	r3, [r4, #0]
 8023a1e:	079b      	lsls	r3, r3, #30
 8023a20:	d413      	bmi.n	8023a4a <_printf_i+0x23a>
 8023a22:	68e0      	ldr	r0, [r4, #12]
 8023a24:	9b03      	ldr	r3, [sp, #12]
 8023a26:	4298      	cmp	r0, r3
 8023a28:	bfb8      	it	lt
 8023a2a:	4618      	movlt	r0, r3
 8023a2c:	e7a4      	b.n	8023978 <_printf_i+0x168>
 8023a2e:	2301      	movs	r3, #1
 8023a30:	4632      	mov	r2, r6
 8023a32:	4649      	mov	r1, r9
 8023a34:	4640      	mov	r0, r8
 8023a36:	47d0      	blx	sl
 8023a38:	3001      	adds	r0, #1
 8023a3a:	d09b      	beq.n	8023974 <_printf_i+0x164>
 8023a3c:	3501      	adds	r5, #1
 8023a3e:	68e3      	ldr	r3, [r4, #12]
 8023a40:	9903      	ldr	r1, [sp, #12]
 8023a42:	1a5b      	subs	r3, r3, r1
 8023a44:	42ab      	cmp	r3, r5
 8023a46:	dcf2      	bgt.n	8023a2e <_printf_i+0x21e>
 8023a48:	e7eb      	b.n	8023a22 <_printf_i+0x212>
 8023a4a:	2500      	movs	r5, #0
 8023a4c:	f104 0619 	add.w	r6, r4, #25
 8023a50:	e7f5      	b.n	8023a3e <_printf_i+0x22e>
 8023a52:	bf00      	nop
 8023a54:	08028859 	.word	0x08028859
 8023a58:	0802886a 	.word	0x0802886a

08023a5c <_sbrk_r>:
 8023a5c:	b538      	push	{r3, r4, r5, lr}
 8023a5e:	4d06      	ldr	r5, [pc, #24]	; (8023a78 <_sbrk_r+0x1c>)
 8023a60:	2300      	movs	r3, #0
 8023a62:	4604      	mov	r4, r0
 8023a64:	4608      	mov	r0, r1
 8023a66:	602b      	str	r3, [r5, #0]
 8023a68:	f7de f9d6 	bl	8001e18 <_sbrk>
 8023a6c:	1c43      	adds	r3, r0, #1
 8023a6e:	d102      	bne.n	8023a76 <_sbrk_r+0x1a>
 8023a70:	682b      	ldr	r3, [r5, #0]
 8023a72:	b103      	cbz	r3, 8023a76 <_sbrk_r+0x1a>
 8023a74:	6023      	str	r3, [r4, #0]
 8023a76:	bd38      	pop	{r3, r4, r5, pc}
 8023a78:	20056ae4 	.word	0x20056ae4

08023a7c <_raise_r>:
 8023a7c:	291f      	cmp	r1, #31
 8023a7e:	b538      	push	{r3, r4, r5, lr}
 8023a80:	4604      	mov	r4, r0
 8023a82:	460d      	mov	r5, r1
 8023a84:	d904      	bls.n	8023a90 <_raise_r+0x14>
 8023a86:	2316      	movs	r3, #22
 8023a88:	6003      	str	r3, [r0, #0]
 8023a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8023a8e:	bd38      	pop	{r3, r4, r5, pc}
 8023a90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023a92:	b112      	cbz	r2, 8023a9a <_raise_r+0x1e>
 8023a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023a98:	b94b      	cbnz	r3, 8023aae <_raise_r+0x32>
 8023a9a:	4620      	mov	r0, r4
 8023a9c:	f000 f830 	bl	8023b00 <_getpid_r>
 8023aa0:	462a      	mov	r2, r5
 8023aa2:	4601      	mov	r1, r0
 8023aa4:	4620      	mov	r0, r4
 8023aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023aaa:	f000 b817 	b.w	8023adc <_kill_r>
 8023aae:	2b01      	cmp	r3, #1
 8023ab0:	d00a      	beq.n	8023ac8 <_raise_r+0x4c>
 8023ab2:	1c59      	adds	r1, r3, #1
 8023ab4:	d103      	bne.n	8023abe <_raise_r+0x42>
 8023ab6:	2316      	movs	r3, #22
 8023ab8:	6003      	str	r3, [r0, #0]
 8023aba:	2001      	movs	r0, #1
 8023abc:	e7e7      	b.n	8023a8e <_raise_r+0x12>
 8023abe:	2400      	movs	r4, #0
 8023ac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023ac4:	4628      	mov	r0, r5
 8023ac6:	4798      	blx	r3
 8023ac8:	2000      	movs	r0, #0
 8023aca:	e7e0      	b.n	8023a8e <_raise_r+0x12>

08023acc <raise>:
 8023acc:	4b02      	ldr	r3, [pc, #8]	; (8023ad8 <raise+0xc>)
 8023ace:	4601      	mov	r1, r0
 8023ad0:	6818      	ldr	r0, [r3, #0]
 8023ad2:	f7ff bfd3 	b.w	8023a7c <_raise_r>
 8023ad6:	bf00      	nop
 8023ad8:	20000074 	.word	0x20000074

08023adc <_kill_r>:
 8023adc:	b538      	push	{r3, r4, r5, lr}
 8023ade:	4d07      	ldr	r5, [pc, #28]	; (8023afc <_kill_r+0x20>)
 8023ae0:	2300      	movs	r3, #0
 8023ae2:	4604      	mov	r4, r0
 8023ae4:	4608      	mov	r0, r1
 8023ae6:	4611      	mov	r1, r2
 8023ae8:	602b      	str	r3, [r5, #0]
 8023aea:	f7de f90d 	bl	8001d08 <_kill>
 8023aee:	1c43      	adds	r3, r0, #1
 8023af0:	d102      	bne.n	8023af8 <_kill_r+0x1c>
 8023af2:	682b      	ldr	r3, [r5, #0]
 8023af4:	b103      	cbz	r3, 8023af8 <_kill_r+0x1c>
 8023af6:	6023      	str	r3, [r4, #0]
 8023af8:	bd38      	pop	{r3, r4, r5, pc}
 8023afa:	bf00      	nop
 8023afc:	20056ae4 	.word	0x20056ae4

08023b00 <_getpid_r>:
 8023b00:	f7de b8fa 	b.w	8001cf8 <_getpid>

08023b04 <siprintf>:
 8023b04:	b40e      	push	{r1, r2, r3}
 8023b06:	b500      	push	{lr}
 8023b08:	b09c      	sub	sp, #112	; 0x70
 8023b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8023b0c:	9002      	str	r0, [sp, #8]
 8023b0e:	9006      	str	r0, [sp, #24]
 8023b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023b14:	4809      	ldr	r0, [pc, #36]	; (8023b3c <siprintf+0x38>)
 8023b16:	9107      	str	r1, [sp, #28]
 8023b18:	9104      	str	r1, [sp, #16]
 8023b1a:	4909      	ldr	r1, [pc, #36]	; (8023b40 <siprintf+0x3c>)
 8023b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b20:	9105      	str	r1, [sp, #20]
 8023b22:	6800      	ldr	r0, [r0, #0]
 8023b24:	9301      	str	r3, [sp, #4]
 8023b26:	a902      	add	r1, sp, #8
 8023b28:	f000 fbf6 	bl	8024318 <_svfiprintf_r>
 8023b2c:	9b02      	ldr	r3, [sp, #8]
 8023b2e:	2200      	movs	r2, #0
 8023b30:	701a      	strb	r2, [r3, #0]
 8023b32:	b01c      	add	sp, #112	; 0x70
 8023b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8023b38:	b003      	add	sp, #12
 8023b3a:	4770      	bx	lr
 8023b3c:	20000074 	.word	0x20000074
 8023b40:	ffff0208 	.word	0xffff0208

08023b44 <__swbuf_r>:
 8023b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b46:	460e      	mov	r6, r1
 8023b48:	4614      	mov	r4, r2
 8023b4a:	4605      	mov	r5, r0
 8023b4c:	b118      	cbz	r0, 8023b56 <__swbuf_r+0x12>
 8023b4e:	6983      	ldr	r3, [r0, #24]
 8023b50:	b90b      	cbnz	r3, 8023b56 <__swbuf_r+0x12>
 8023b52:	f000 fa33 	bl	8023fbc <__sinit>
 8023b56:	4b21      	ldr	r3, [pc, #132]	; (8023bdc <__swbuf_r+0x98>)
 8023b58:	429c      	cmp	r4, r3
 8023b5a:	d12b      	bne.n	8023bb4 <__swbuf_r+0x70>
 8023b5c:	686c      	ldr	r4, [r5, #4]
 8023b5e:	69a3      	ldr	r3, [r4, #24]
 8023b60:	60a3      	str	r3, [r4, #8]
 8023b62:	89a3      	ldrh	r3, [r4, #12]
 8023b64:	071a      	lsls	r2, r3, #28
 8023b66:	d52f      	bpl.n	8023bc8 <__swbuf_r+0x84>
 8023b68:	6923      	ldr	r3, [r4, #16]
 8023b6a:	b36b      	cbz	r3, 8023bc8 <__swbuf_r+0x84>
 8023b6c:	6923      	ldr	r3, [r4, #16]
 8023b6e:	6820      	ldr	r0, [r4, #0]
 8023b70:	1ac0      	subs	r0, r0, r3
 8023b72:	6963      	ldr	r3, [r4, #20]
 8023b74:	b2f6      	uxtb	r6, r6
 8023b76:	4283      	cmp	r3, r0
 8023b78:	4637      	mov	r7, r6
 8023b7a:	dc04      	bgt.n	8023b86 <__swbuf_r+0x42>
 8023b7c:	4621      	mov	r1, r4
 8023b7e:	4628      	mov	r0, r5
 8023b80:	f000 f988 	bl	8023e94 <_fflush_r>
 8023b84:	bb30      	cbnz	r0, 8023bd4 <__swbuf_r+0x90>
 8023b86:	68a3      	ldr	r3, [r4, #8]
 8023b88:	3b01      	subs	r3, #1
 8023b8a:	60a3      	str	r3, [r4, #8]
 8023b8c:	6823      	ldr	r3, [r4, #0]
 8023b8e:	1c5a      	adds	r2, r3, #1
 8023b90:	6022      	str	r2, [r4, #0]
 8023b92:	701e      	strb	r6, [r3, #0]
 8023b94:	6963      	ldr	r3, [r4, #20]
 8023b96:	3001      	adds	r0, #1
 8023b98:	4283      	cmp	r3, r0
 8023b9a:	d004      	beq.n	8023ba6 <__swbuf_r+0x62>
 8023b9c:	89a3      	ldrh	r3, [r4, #12]
 8023b9e:	07db      	lsls	r3, r3, #31
 8023ba0:	d506      	bpl.n	8023bb0 <__swbuf_r+0x6c>
 8023ba2:	2e0a      	cmp	r6, #10
 8023ba4:	d104      	bne.n	8023bb0 <__swbuf_r+0x6c>
 8023ba6:	4621      	mov	r1, r4
 8023ba8:	4628      	mov	r0, r5
 8023baa:	f000 f973 	bl	8023e94 <_fflush_r>
 8023bae:	b988      	cbnz	r0, 8023bd4 <__swbuf_r+0x90>
 8023bb0:	4638      	mov	r0, r7
 8023bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023bb4:	4b0a      	ldr	r3, [pc, #40]	; (8023be0 <__swbuf_r+0x9c>)
 8023bb6:	429c      	cmp	r4, r3
 8023bb8:	d101      	bne.n	8023bbe <__swbuf_r+0x7a>
 8023bba:	68ac      	ldr	r4, [r5, #8]
 8023bbc:	e7cf      	b.n	8023b5e <__swbuf_r+0x1a>
 8023bbe:	4b09      	ldr	r3, [pc, #36]	; (8023be4 <__swbuf_r+0xa0>)
 8023bc0:	429c      	cmp	r4, r3
 8023bc2:	bf08      	it	eq
 8023bc4:	68ec      	ldreq	r4, [r5, #12]
 8023bc6:	e7ca      	b.n	8023b5e <__swbuf_r+0x1a>
 8023bc8:	4621      	mov	r1, r4
 8023bca:	4628      	mov	r0, r5
 8023bcc:	f000 f80c 	bl	8023be8 <__swsetup_r>
 8023bd0:	2800      	cmp	r0, #0
 8023bd2:	d0cb      	beq.n	8023b6c <__swbuf_r+0x28>
 8023bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8023bd8:	e7ea      	b.n	8023bb0 <__swbuf_r+0x6c>
 8023bda:	bf00      	nop
 8023bdc:	080288a0 	.word	0x080288a0
 8023be0:	080288c0 	.word	0x080288c0
 8023be4:	08028880 	.word	0x08028880

08023be8 <__swsetup_r>:
 8023be8:	4b32      	ldr	r3, [pc, #200]	; (8023cb4 <__swsetup_r+0xcc>)
 8023bea:	b570      	push	{r4, r5, r6, lr}
 8023bec:	681d      	ldr	r5, [r3, #0]
 8023bee:	4606      	mov	r6, r0
 8023bf0:	460c      	mov	r4, r1
 8023bf2:	b125      	cbz	r5, 8023bfe <__swsetup_r+0x16>
 8023bf4:	69ab      	ldr	r3, [r5, #24]
 8023bf6:	b913      	cbnz	r3, 8023bfe <__swsetup_r+0x16>
 8023bf8:	4628      	mov	r0, r5
 8023bfa:	f000 f9df 	bl	8023fbc <__sinit>
 8023bfe:	4b2e      	ldr	r3, [pc, #184]	; (8023cb8 <__swsetup_r+0xd0>)
 8023c00:	429c      	cmp	r4, r3
 8023c02:	d10f      	bne.n	8023c24 <__swsetup_r+0x3c>
 8023c04:	686c      	ldr	r4, [r5, #4]
 8023c06:	89a3      	ldrh	r3, [r4, #12]
 8023c08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c0c:	0719      	lsls	r1, r3, #28
 8023c0e:	d42c      	bmi.n	8023c6a <__swsetup_r+0x82>
 8023c10:	06dd      	lsls	r5, r3, #27
 8023c12:	d411      	bmi.n	8023c38 <__swsetup_r+0x50>
 8023c14:	2309      	movs	r3, #9
 8023c16:	6033      	str	r3, [r6, #0]
 8023c18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023c1c:	81a3      	strh	r3, [r4, #12]
 8023c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c22:	e03e      	b.n	8023ca2 <__swsetup_r+0xba>
 8023c24:	4b25      	ldr	r3, [pc, #148]	; (8023cbc <__swsetup_r+0xd4>)
 8023c26:	429c      	cmp	r4, r3
 8023c28:	d101      	bne.n	8023c2e <__swsetup_r+0x46>
 8023c2a:	68ac      	ldr	r4, [r5, #8]
 8023c2c:	e7eb      	b.n	8023c06 <__swsetup_r+0x1e>
 8023c2e:	4b24      	ldr	r3, [pc, #144]	; (8023cc0 <__swsetup_r+0xd8>)
 8023c30:	429c      	cmp	r4, r3
 8023c32:	bf08      	it	eq
 8023c34:	68ec      	ldreq	r4, [r5, #12]
 8023c36:	e7e6      	b.n	8023c06 <__swsetup_r+0x1e>
 8023c38:	0758      	lsls	r0, r3, #29
 8023c3a:	d512      	bpl.n	8023c62 <__swsetup_r+0x7a>
 8023c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023c3e:	b141      	cbz	r1, 8023c52 <__swsetup_r+0x6a>
 8023c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023c44:	4299      	cmp	r1, r3
 8023c46:	d002      	beq.n	8023c4e <__swsetup_r+0x66>
 8023c48:	4630      	mov	r0, r6
 8023c4a:	f7ff fb6f 	bl	802332c <_free_r>
 8023c4e:	2300      	movs	r3, #0
 8023c50:	6363      	str	r3, [r4, #52]	; 0x34
 8023c52:	89a3      	ldrh	r3, [r4, #12]
 8023c54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023c58:	81a3      	strh	r3, [r4, #12]
 8023c5a:	2300      	movs	r3, #0
 8023c5c:	6063      	str	r3, [r4, #4]
 8023c5e:	6923      	ldr	r3, [r4, #16]
 8023c60:	6023      	str	r3, [r4, #0]
 8023c62:	89a3      	ldrh	r3, [r4, #12]
 8023c64:	f043 0308 	orr.w	r3, r3, #8
 8023c68:	81a3      	strh	r3, [r4, #12]
 8023c6a:	6923      	ldr	r3, [r4, #16]
 8023c6c:	b94b      	cbnz	r3, 8023c82 <__swsetup_r+0x9a>
 8023c6e:	89a3      	ldrh	r3, [r4, #12]
 8023c70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023c78:	d003      	beq.n	8023c82 <__swsetup_r+0x9a>
 8023c7a:	4621      	mov	r1, r4
 8023c7c:	4630      	mov	r0, r6
 8023c7e:	f000 fa63 	bl	8024148 <__smakebuf_r>
 8023c82:	89a0      	ldrh	r0, [r4, #12]
 8023c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c88:	f010 0301 	ands.w	r3, r0, #1
 8023c8c:	d00a      	beq.n	8023ca4 <__swsetup_r+0xbc>
 8023c8e:	2300      	movs	r3, #0
 8023c90:	60a3      	str	r3, [r4, #8]
 8023c92:	6963      	ldr	r3, [r4, #20]
 8023c94:	425b      	negs	r3, r3
 8023c96:	61a3      	str	r3, [r4, #24]
 8023c98:	6923      	ldr	r3, [r4, #16]
 8023c9a:	b943      	cbnz	r3, 8023cae <__swsetup_r+0xc6>
 8023c9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023ca0:	d1ba      	bne.n	8023c18 <__swsetup_r+0x30>
 8023ca2:	bd70      	pop	{r4, r5, r6, pc}
 8023ca4:	0781      	lsls	r1, r0, #30
 8023ca6:	bf58      	it	pl
 8023ca8:	6963      	ldrpl	r3, [r4, #20]
 8023caa:	60a3      	str	r3, [r4, #8]
 8023cac:	e7f4      	b.n	8023c98 <__swsetup_r+0xb0>
 8023cae:	2000      	movs	r0, #0
 8023cb0:	e7f7      	b.n	8023ca2 <__swsetup_r+0xba>
 8023cb2:	bf00      	nop
 8023cb4:	20000074 	.word	0x20000074
 8023cb8:	080288a0 	.word	0x080288a0
 8023cbc:	080288c0 	.word	0x080288c0
 8023cc0:	08028880 	.word	0x08028880

08023cc4 <__register_exitproc>:
 8023cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023cc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023d84 <__register_exitproc+0xc0>
 8023ccc:	4606      	mov	r6, r0
 8023cce:	f8d8 0000 	ldr.w	r0, [r8]
 8023cd2:	461f      	mov	r7, r3
 8023cd4:	460d      	mov	r5, r1
 8023cd6:	4691      	mov	r9, r2
 8023cd8:	f000 fa0e 	bl	80240f8 <__retarget_lock_acquire_recursive>
 8023cdc:	4b25      	ldr	r3, [pc, #148]	; (8023d74 <__register_exitproc+0xb0>)
 8023cde:	681c      	ldr	r4, [r3, #0]
 8023ce0:	b934      	cbnz	r4, 8023cf0 <__register_exitproc+0x2c>
 8023ce2:	4c25      	ldr	r4, [pc, #148]	; (8023d78 <__register_exitproc+0xb4>)
 8023ce4:	601c      	str	r4, [r3, #0]
 8023ce6:	4b25      	ldr	r3, [pc, #148]	; (8023d7c <__register_exitproc+0xb8>)
 8023ce8:	b113      	cbz	r3, 8023cf0 <__register_exitproc+0x2c>
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023cf0:	6863      	ldr	r3, [r4, #4]
 8023cf2:	2b1f      	cmp	r3, #31
 8023cf4:	dd07      	ble.n	8023d06 <__register_exitproc+0x42>
 8023cf6:	f8d8 0000 	ldr.w	r0, [r8]
 8023cfa:	f000 f9ff 	bl	80240fc <__retarget_lock_release_recursive>
 8023cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8023d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d06:	b34e      	cbz	r6, 8023d5c <__register_exitproc+0x98>
 8023d08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023d0c:	b988      	cbnz	r0, 8023d32 <__register_exitproc+0x6e>
 8023d0e:	4b1c      	ldr	r3, [pc, #112]	; (8023d80 <__register_exitproc+0xbc>)
 8023d10:	b923      	cbnz	r3, 8023d1c <__register_exitproc+0x58>
 8023d12:	f8d8 0000 	ldr.w	r0, [r8]
 8023d16:	f000 f9f0 	bl	80240fa <__retarget_lock_release>
 8023d1a:	e7f0      	b.n	8023cfe <__register_exitproc+0x3a>
 8023d1c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023d20:	f7ff fade 	bl	80232e0 <malloc>
 8023d24:	2800      	cmp	r0, #0
 8023d26:	d0f4      	beq.n	8023d12 <__register_exitproc+0x4e>
 8023d28:	2300      	movs	r3, #0
 8023d2a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8023d2e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023d32:	6863      	ldr	r3, [r4, #4]
 8023d34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023d38:	2201      	movs	r2, #1
 8023d3a:	409a      	lsls	r2, r3
 8023d3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023d40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023d44:	4313      	orrs	r3, r2
 8023d46:	2e02      	cmp	r6, #2
 8023d48:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023d4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8023d50:	bf02      	ittt	eq
 8023d52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023d56:	431a      	orreq	r2, r3
 8023d58:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8023d5c:	6863      	ldr	r3, [r4, #4]
 8023d5e:	f8d8 0000 	ldr.w	r0, [r8]
 8023d62:	1c5a      	adds	r2, r3, #1
 8023d64:	3302      	adds	r3, #2
 8023d66:	6062      	str	r2, [r4, #4]
 8023d68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023d6c:	f000 f9c6 	bl	80240fc <__retarget_lock_release_recursive>
 8023d70:	2000      	movs	r0, #0
 8023d72:	e7c6      	b.n	8023d02 <__register_exitproc+0x3e>
 8023d74:	200567d4 	.word	0x200567d4
 8023d78:	20056748 	.word	0x20056748
 8023d7c:	0802887c 	.word	0x0802887c
 8023d80:	080232e1 	.word	0x080232e1
 8023d84:	200000d8 	.word	0x200000d8

08023d88 <__sflush_r>:
 8023d88:	898a      	ldrh	r2, [r1, #12]
 8023d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d8e:	4605      	mov	r5, r0
 8023d90:	0710      	lsls	r0, r2, #28
 8023d92:	460c      	mov	r4, r1
 8023d94:	d458      	bmi.n	8023e48 <__sflush_r+0xc0>
 8023d96:	684b      	ldr	r3, [r1, #4]
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	dc05      	bgt.n	8023da8 <__sflush_r+0x20>
 8023d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023d9e:	2b00      	cmp	r3, #0
 8023da0:	dc02      	bgt.n	8023da8 <__sflush_r+0x20>
 8023da2:	2000      	movs	r0, #0
 8023da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023daa:	2e00      	cmp	r6, #0
 8023dac:	d0f9      	beq.n	8023da2 <__sflush_r+0x1a>
 8023dae:	2300      	movs	r3, #0
 8023db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023db4:	682f      	ldr	r7, [r5, #0]
 8023db6:	602b      	str	r3, [r5, #0]
 8023db8:	d032      	beq.n	8023e20 <__sflush_r+0x98>
 8023dba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023dbc:	89a3      	ldrh	r3, [r4, #12]
 8023dbe:	075a      	lsls	r2, r3, #29
 8023dc0:	d505      	bpl.n	8023dce <__sflush_r+0x46>
 8023dc2:	6863      	ldr	r3, [r4, #4]
 8023dc4:	1ac0      	subs	r0, r0, r3
 8023dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023dc8:	b10b      	cbz	r3, 8023dce <__sflush_r+0x46>
 8023dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023dcc:	1ac0      	subs	r0, r0, r3
 8023dce:	2300      	movs	r3, #0
 8023dd0:	4602      	mov	r2, r0
 8023dd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023dd4:	6a21      	ldr	r1, [r4, #32]
 8023dd6:	4628      	mov	r0, r5
 8023dd8:	47b0      	blx	r6
 8023dda:	1c43      	adds	r3, r0, #1
 8023ddc:	89a3      	ldrh	r3, [r4, #12]
 8023dde:	d106      	bne.n	8023dee <__sflush_r+0x66>
 8023de0:	6829      	ldr	r1, [r5, #0]
 8023de2:	291d      	cmp	r1, #29
 8023de4:	d82c      	bhi.n	8023e40 <__sflush_r+0xb8>
 8023de6:	4a2a      	ldr	r2, [pc, #168]	; (8023e90 <__sflush_r+0x108>)
 8023de8:	40ca      	lsrs	r2, r1
 8023dea:	07d6      	lsls	r6, r2, #31
 8023dec:	d528      	bpl.n	8023e40 <__sflush_r+0xb8>
 8023dee:	2200      	movs	r2, #0
 8023df0:	6062      	str	r2, [r4, #4]
 8023df2:	04d9      	lsls	r1, r3, #19
 8023df4:	6922      	ldr	r2, [r4, #16]
 8023df6:	6022      	str	r2, [r4, #0]
 8023df8:	d504      	bpl.n	8023e04 <__sflush_r+0x7c>
 8023dfa:	1c42      	adds	r2, r0, #1
 8023dfc:	d101      	bne.n	8023e02 <__sflush_r+0x7a>
 8023dfe:	682b      	ldr	r3, [r5, #0]
 8023e00:	b903      	cbnz	r3, 8023e04 <__sflush_r+0x7c>
 8023e02:	6560      	str	r0, [r4, #84]	; 0x54
 8023e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023e06:	602f      	str	r7, [r5, #0]
 8023e08:	2900      	cmp	r1, #0
 8023e0a:	d0ca      	beq.n	8023da2 <__sflush_r+0x1a>
 8023e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023e10:	4299      	cmp	r1, r3
 8023e12:	d002      	beq.n	8023e1a <__sflush_r+0x92>
 8023e14:	4628      	mov	r0, r5
 8023e16:	f7ff fa89 	bl	802332c <_free_r>
 8023e1a:	2000      	movs	r0, #0
 8023e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8023e1e:	e7c1      	b.n	8023da4 <__sflush_r+0x1c>
 8023e20:	6a21      	ldr	r1, [r4, #32]
 8023e22:	2301      	movs	r3, #1
 8023e24:	4628      	mov	r0, r5
 8023e26:	47b0      	blx	r6
 8023e28:	1c41      	adds	r1, r0, #1
 8023e2a:	d1c7      	bne.n	8023dbc <__sflush_r+0x34>
 8023e2c:	682b      	ldr	r3, [r5, #0]
 8023e2e:	2b00      	cmp	r3, #0
 8023e30:	d0c4      	beq.n	8023dbc <__sflush_r+0x34>
 8023e32:	2b1d      	cmp	r3, #29
 8023e34:	d001      	beq.n	8023e3a <__sflush_r+0xb2>
 8023e36:	2b16      	cmp	r3, #22
 8023e38:	d101      	bne.n	8023e3e <__sflush_r+0xb6>
 8023e3a:	602f      	str	r7, [r5, #0]
 8023e3c:	e7b1      	b.n	8023da2 <__sflush_r+0x1a>
 8023e3e:	89a3      	ldrh	r3, [r4, #12]
 8023e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023e44:	81a3      	strh	r3, [r4, #12]
 8023e46:	e7ad      	b.n	8023da4 <__sflush_r+0x1c>
 8023e48:	690f      	ldr	r7, [r1, #16]
 8023e4a:	2f00      	cmp	r7, #0
 8023e4c:	d0a9      	beq.n	8023da2 <__sflush_r+0x1a>
 8023e4e:	0793      	lsls	r3, r2, #30
 8023e50:	680e      	ldr	r6, [r1, #0]
 8023e52:	bf08      	it	eq
 8023e54:	694b      	ldreq	r3, [r1, #20]
 8023e56:	600f      	str	r7, [r1, #0]
 8023e58:	bf18      	it	ne
 8023e5a:	2300      	movne	r3, #0
 8023e5c:	eba6 0807 	sub.w	r8, r6, r7
 8023e60:	608b      	str	r3, [r1, #8]
 8023e62:	f1b8 0f00 	cmp.w	r8, #0
 8023e66:	dd9c      	ble.n	8023da2 <__sflush_r+0x1a>
 8023e68:	6a21      	ldr	r1, [r4, #32]
 8023e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023e6c:	4643      	mov	r3, r8
 8023e6e:	463a      	mov	r2, r7
 8023e70:	4628      	mov	r0, r5
 8023e72:	47b0      	blx	r6
 8023e74:	2800      	cmp	r0, #0
 8023e76:	dc06      	bgt.n	8023e86 <__sflush_r+0xfe>
 8023e78:	89a3      	ldrh	r3, [r4, #12]
 8023e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023e7e:	81a3      	strh	r3, [r4, #12]
 8023e80:	f04f 30ff 	mov.w	r0, #4294967295
 8023e84:	e78e      	b.n	8023da4 <__sflush_r+0x1c>
 8023e86:	4407      	add	r7, r0
 8023e88:	eba8 0800 	sub.w	r8, r8, r0
 8023e8c:	e7e9      	b.n	8023e62 <__sflush_r+0xda>
 8023e8e:	bf00      	nop
 8023e90:	20400001 	.word	0x20400001

08023e94 <_fflush_r>:
 8023e94:	b538      	push	{r3, r4, r5, lr}
 8023e96:	690b      	ldr	r3, [r1, #16]
 8023e98:	4605      	mov	r5, r0
 8023e9a:	460c      	mov	r4, r1
 8023e9c:	b913      	cbnz	r3, 8023ea4 <_fflush_r+0x10>
 8023e9e:	2500      	movs	r5, #0
 8023ea0:	4628      	mov	r0, r5
 8023ea2:	bd38      	pop	{r3, r4, r5, pc}
 8023ea4:	b118      	cbz	r0, 8023eae <_fflush_r+0x1a>
 8023ea6:	6983      	ldr	r3, [r0, #24]
 8023ea8:	b90b      	cbnz	r3, 8023eae <_fflush_r+0x1a>
 8023eaa:	f000 f887 	bl	8023fbc <__sinit>
 8023eae:	4b14      	ldr	r3, [pc, #80]	; (8023f00 <_fflush_r+0x6c>)
 8023eb0:	429c      	cmp	r4, r3
 8023eb2:	d11b      	bne.n	8023eec <_fflush_r+0x58>
 8023eb4:	686c      	ldr	r4, [r5, #4]
 8023eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023eba:	2b00      	cmp	r3, #0
 8023ebc:	d0ef      	beq.n	8023e9e <_fflush_r+0xa>
 8023ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023ec0:	07d0      	lsls	r0, r2, #31
 8023ec2:	d404      	bmi.n	8023ece <_fflush_r+0x3a>
 8023ec4:	0599      	lsls	r1, r3, #22
 8023ec6:	d402      	bmi.n	8023ece <_fflush_r+0x3a>
 8023ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023eca:	f000 f915 	bl	80240f8 <__retarget_lock_acquire_recursive>
 8023ece:	4628      	mov	r0, r5
 8023ed0:	4621      	mov	r1, r4
 8023ed2:	f7ff ff59 	bl	8023d88 <__sflush_r>
 8023ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ed8:	07da      	lsls	r2, r3, #31
 8023eda:	4605      	mov	r5, r0
 8023edc:	d4e0      	bmi.n	8023ea0 <_fflush_r+0xc>
 8023ede:	89a3      	ldrh	r3, [r4, #12]
 8023ee0:	059b      	lsls	r3, r3, #22
 8023ee2:	d4dd      	bmi.n	8023ea0 <_fflush_r+0xc>
 8023ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023ee6:	f000 f909 	bl	80240fc <__retarget_lock_release_recursive>
 8023eea:	e7d9      	b.n	8023ea0 <_fflush_r+0xc>
 8023eec:	4b05      	ldr	r3, [pc, #20]	; (8023f04 <_fflush_r+0x70>)
 8023eee:	429c      	cmp	r4, r3
 8023ef0:	d101      	bne.n	8023ef6 <_fflush_r+0x62>
 8023ef2:	68ac      	ldr	r4, [r5, #8]
 8023ef4:	e7df      	b.n	8023eb6 <_fflush_r+0x22>
 8023ef6:	4b04      	ldr	r3, [pc, #16]	; (8023f08 <_fflush_r+0x74>)
 8023ef8:	429c      	cmp	r4, r3
 8023efa:	bf08      	it	eq
 8023efc:	68ec      	ldreq	r4, [r5, #12]
 8023efe:	e7da      	b.n	8023eb6 <_fflush_r+0x22>
 8023f00:	080288a0 	.word	0x080288a0
 8023f04:	080288c0 	.word	0x080288c0
 8023f08:	08028880 	.word	0x08028880

08023f0c <std>:
 8023f0c:	2300      	movs	r3, #0
 8023f0e:	b510      	push	{r4, lr}
 8023f10:	4604      	mov	r4, r0
 8023f12:	e9c0 3300 	strd	r3, r3, [r0]
 8023f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023f1a:	6083      	str	r3, [r0, #8]
 8023f1c:	8181      	strh	r1, [r0, #12]
 8023f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8023f20:	81c2      	strh	r2, [r0, #14]
 8023f22:	6183      	str	r3, [r0, #24]
 8023f24:	4619      	mov	r1, r3
 8023f26:	2208      	movs	r2, #8
 8023f28:	305c      	adds	r0, #92	; 0x5c
 8023f2a:	f7ff f9f7 	bl	802331c <memset>
 8023f2e:	4b05      	ldr	r3, [pc, #20]	; (8023f44 <std+0x38>)
 8023f30:	6263      	str	r3, [r4, #36]	; 0x24
 8023f32:	4b05      	ldr	r3, [pc, #20]	; (8023f48 <std+0x3c>)
 8023f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8023f36:	4b05      	ldr	r3, [pc, #20]	; (8023f4c <std+0x40>)
 8023f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023f3a:	4b05      	ldr	r3, [pc, #20]	; (8023f50 <std+0x44>)
 8023f3c:	6224      	str	r4, [r4, #32]
 8023f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8023f40:	bd10      	pop	{r4, pc}
 8023f42:	bf00      	nop
 8023f44:	08024519 	.word	0x08024519
 8023f48:	0802453b 	.word	0x0802453b
 8023f4c:	08024573 	.word	0x08024573
 8023f50:	08024597 	.word	0x08024597

08023f54 <_cleanup_r>:
 8023f54:	4901      	ldr	r1, [pc, #4]	; (8023f5c <_cleanup_r+0x8>)
 8023f56:	f000 b8af 	b.w	80240b8 <_fwalk_reent>
 8023f5a:	bf00      	nop
 8023f5c:	08023e95 	.word	0x08023e95

08023f60 <__sfmoreglue>:
 8023f60:	b570      	push	{r4, r5, r6, lr}
 8023f62:	1e4a      	subs	r2, r1, #1
 8023f64:	2568      	movs	r5, #104	; 0x68
 8023f66:	4355      	muls	r5, r2
 8023f68:	460e      	mov	r6, r1
 8023f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023f6e:	f7ff fa2d 	bl	80233cc <_malloc_r>
 8023f72:	4604      	mov	r4, r0
 8023f74:	b140      	cbz	r0, 8023f88 <__sfmoreglue+0x28>
 8023f76:	2100      	movs	r1, #0
 8023f78:	e9c0 1600 	strd	r1, r6, [r0]
 8023f7c:	300c      	adds	r0, #12
 8023f7e:	60a0      	str	r0, [r4, #8]
 8023f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023f84:	f7ff f9ca 	bl	802331c <memset>
 8023f88:	4620      	mov	r0, r4
 8023f8a:	bd70      	pop	{r4, r5, r6, pc}

08023f8c <__sfp_lock_acquire>:
 8023f8c:	4801      	ldr	r0, [pc, #4]	; (8023f94 <__sfp_lock_acquire+0x8>)
 8023f8e:	f000 b8b3 	b.w	80240f8 <__retarget_lock_acquire_recursive>
 8023f92:	bf00      	nop
 8023f94:	20056ae0 	.word	0x20056ae0

08023f98 <__sfp_lock_release>:
 8023f98:	4801      	ldr	r0, [pc, #4]	; (8023fa0 <__sfp_lock_release+0x8>)
 8023f9a:	f000 b8af 	b.w	80240fc <__retarget_lock_release_recursive>
 8023f9e:	bf00      	nop
 8023fa0:	20056ae0 	.word	0x20056ae0

08023fa4 <__sinit_lock_acquire>:
 8023fa4:	4801      	ldr	r0, [pc, #4]	; (8023fac <__sinit_lock_acquire+0x8>)
 8023fa6:	f000 b8a7 	b.w	80240f8 <__retarget_lock_acquire_recursive>
 8023faa:	bf00      	nop
 8023fac:	20056adb 	.word	0x20056adb

08023fb0 <__sinit_lock_release>:
 8023fb0:	4801      	ldr	r0, [pc, #4]	; (8023fb8 <__sinit_lock_release+0x8>)
 8023fb2:	f000 b8a3 	b.w	80240fc <__retarget_lock_release_recursive>
 8023fb6:	bf00      	nop
 8023fb8:	20056adb 	.word	0x20056adb

08023fbc <__sinit>:
 8023fbc:	b510      	push	{r4, lr}
 8023fbe:	4604      	mov	r4, r0
 8023fc0:	f7ff fff0 	bl	8023fa4 <__sinit_lock_acquire>
 8023fc4:	69a3      	ldr	r3, [r4, #24]
 8023fc6:	b11b      	cbz	r3, 8023fd0 <__sinit+0x14>
 8023fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023fcc:	f7ff bff0 	b.w	8023fb0 <__sinit_lock_release>
 8023fd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023fd4:	6523      	str	r3, [r4, #80]	; 0x50
 8023fd6:	4b13      	ldr	r3, [pc, #76]	; (8024024 <__sinit+0x68>)
 8023fd8:	4a13      	ldr	r2, [pc, #76]	; (8024028 <__sinit+0x6c>)
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8023fde:	42a3      	cmp	r3, r4
 8023fe0:	bf04      	itt	eq
 8023fe2:	2301      	moveq	r3, #1
 8023fe4:	61a3      	streq	r3, [r4, #24]
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	f000 f820 	bl	802402c <__sfp>
 8023fec:	6060      	str	r0, [r4, #4]
 8023fee:	4620      	mov	r0, r4
 8023ff0:	f000 f81c 	bl	802402c <__sfp>
 8023ff4:	60a0      	str	r0, [r4, #8]
 8023ff6:	4620      	mov	r0, r4
 8023ff8:	f000 f818 	bl	802402c <__sfp>
 8023ffc:	2200      	movs	r2, #0
 8023ffe:	60e0      	str	r0, [r4, #12]
 8024000:	2104      	movs	r1, #4
 8024002:	6860      	ldr	r0, [r4, #4]
 8024004:	f7ff ff82 	bl	8023f0c <std>
 8024008:	68a0      	ldr	r0, [r4, #8]
 802400a:	2201      	movs	r2, #1
 802400c:	2109      	movs	r1, #9
 802400e:	f7ff ff7d 	bl	8023f0c <std>
 8024012:	68e0      	ldr	r0, [r4, #12]
 8024014:	2202      	movs	r2, #2
 8024016:	2112      	movs	r1, #18
 8024018:	f7ff ff78 	bl	8023f0c <std>
 802401c:	2301      	movs	r3, #1
 802401e:	61a3      	str	r3, [r4, #24]
 8024020:	e7d2      	b.n	8023fc8 <__sinit+0xc>
 8024022:	bf00      	nop
 8024024:	08028844 	.word	0x08028844
 8024028:	08023f55 	.word	0x08023f55

0802402c <__sfp>:
 802402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802402e:	4607      	mov	r7, r0
 8024030:	f7ff ffac 	bl	8023f8c <__sfp_lock_acquire>
 8024034:	4b1e      	ldr	r3, [pc, #120]	; (80240b0 <__sfp+0x84>)
 8024036:	681e      	ldr	r6, [r3, #0]
 8024038:	69b3      	ldr	r3, [r6, #24]
 802403a:	b913      	cbnz	r3, 8024042 <__sfp+0x16>
 802403c:	4630      	mov	r0, r6
 802403e:	f7ff ffbd 	bl	8023fbc <__sinit>
 8024042:	3648      	adds	r6, #72	; 0x48
 8024044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024048:	3b01      	subs	r3, #1
 802404a:	d503      	bpl.n	8024054 <__sfp+0x28>
 802404c:	6833      	ldr	r3, [r6, #0]
 802404e:	b30b      	cbz	r3, 8024094 <__sfp+0x68>
 8024050:	6836      	ldr	r6, [r6, #0]
 8024052:	e7f7      	b.n	8024044 <__sfp+0x18>
 8024054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024058:	b9d5      	cbnz	r5, 8024090 <__sfp+0x64>
 802405a:	4b16      	ldr	r3, [pc, #88]	; (80240b4 <__sfp+0x88>)
 802405c:	60e3      	str	r3, [r4, #12]
 802405e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024062:	6665      	str	r5, [r4, #100]	; 0x64
 8024064:	f000 f847 	bl	80240f6 <__retarget_lock_init_recursive>
 8024068:	f7ff ff96 	bl	8023f98 <__sfp_lock_release>
 802406c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024074:	6025      	str	r5, [r4, #0]
 8024076:	61a5      	str	r5, [r4, #24]
 8024078:	2208      	movs	r2, #8
 802407a:	4629      	mov	r1, r5
 802407c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024080:	f7ff f94c 	bl	802331c <memset>
 8024084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802408c:	4620      	mov	r0, r4
 802408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024090:	3468      	adds	r4, #104	; 0x68
 8024092:	e7d9      	b.n	8024048 <__sfp+0x1c>
 8024094:	2104      	movs	r1, #4
 8024096:	4638      	mov	r0, r7
 8024098:	f7ff ff62 	bl	8023f60 <__sfmoreglue>
 802409c:	4604      	mov	r4, r0
 802409e:	6030      	str	r0, [r6, #0]
 80240a0:	2800      	cmp	r0, #0
 80240a2:	d1d5      	bne.n	8024050 <__sfp+0x24>
 80240a4:	f7ff ff78 	bl	8023f98 <__sfp_lock_release>
 80240a8:	230c      	movs	r3, #12
 80240aa:	603b      	str	r3, [r7, #0]
 80240ac:	e7ee      	b.n	802408c <__sfp+0x60>
 80240ae:	bf00      	nop
 80240b0:	08028844 	.word	0x08028844
 80240b4:	ffff0001 	.word	0xffff0001

080240b8 <_fwalk_reent>:
 80240b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80240bc:	4606      	mov	r6, r0
 80240be:	4688      	mov	r8, r1
 80240c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80240c4:	2700      	movs	r7, #0
 80240c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80240ca:	f1b9 0901 	subs.w	r9, r9, #1
 80240ce:	d505      	bpl.n	80240dc <_fwalk_reent+0x24>
 80240d0:	6824      	ldr	r4, [r4, #0]
 80240d2:	2c00      	cmp	r4, #0
 80240d4:	d1f7      	bne.n	80240c6 <_fwalk_reent+0xe>
 80240d6:	4638      	mov	r0, r7
 80240d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80240dc:	89ab      	ldrh	r3, [r5, #12]
 80240de:	2b01      	cmp	r3, #1
 80240e0:	d907      	bls.n	80240f2 <_fwalk_reent+0x3a>
 80240e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80240e6:	3301      	adds	r3, #1
 80240e8:	d003      	beq.n	80240f2 <_fwalk_reent+0x3a>
 80240ea:	4629      	mov	r1, r5
 80240ec:	4630      	mov	r0, r6
 80240ee:	47c0      	blx	r8
 80240f0:	4307      	orrs	r7, r0
 80240f2:	3568      	adds	r5, #104	; 0x68
 80240f4:	e7e9      	b.n	80240ca <_fwalk_reent+0x12>

080240f6 <__retarget_lock_init_recursive>:
 80240f6:	4770      	bx	lr

080240f8 <__retarget_lock_acquire_recursive>:
 80240f8:	4770      	bx	lr

080240fa <__retarget_lock_release>:
 80240fa:	4770      	bx	lr

080240fc <__retarget_lock_release_recursive>:
 80240fc:	4770      	bx	lr

080240fe <__swhatbuf_r>:
 80240fe:	b570      	push	{r4, r5, r6, lr}
 8024100:	460e      	mov	r6, r1
 8024102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024106:	2900      	cmp	r1, #0
 8024108:	b096      	sub	sp, #88	; 0x58
 802410a:	4614      	mov	r4, r2
 802410c:	461d      	mov	r5, r3
 802410e:	da07      	bge.n	8024120 <__swhatbuf_r+0x22>
 8024110:	2300      	movs	r3, #0
 8024112:	602b      	str	r3, [r5, #0]
 8024114:	89b3      	ldrh	r3, [r6, #12]
 8024116:	061a      	lsls	r2, r3, #24
 8024118:	d410      	bmi.n	802413c <__swhatbuf_r+0x3e>
 802411a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802411e:	e00e      	b.n	802413e <__swhatbuf_r+0x40>
 8024120:	466a      	mov	r2, sp
 8024122:	f000 fa5f 	bl	80245e4 <_fstat_r>
 8024126:	2800      	cmp	r0, #0
 8024128:	dbf2      	blt.n	8024110 <__swhatbuf_r+0x12>
 802412a:	9a01      	ldr	r2, [sp, #4]
 802412c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024130:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024134:	425a      	negs	r2, r3
 8024136:	415a      	adcs	r2, r3
 8024138:	602a      	str	r2, [r5, #0]
 802413a:	e7ee      	b.n	802411a <__swhatbuf_r+0x1c>
 802413c:	2340      	movs	r3, #64	; 0x40
 802413e:	2000      	movs	r0, #0
 8024140:	6023      	str	r3, [r4, #0]
 8024142:	b016      	add	sp, #88	; 0x58
 8024144:	bd70      	pop	{r4, r5, r6, pc}
	...

08024148 <__smakebuf_r>:
 8024148:	898b      	ldrh	r3, [r1, #12]
 802414a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802414c:	079d      	lsls	r5, r3, #30
 802414e:	4606      	mov	r6, r0
 8024150:	460c      	mov	r4, r1
 8024152:	d507      	bpl.n	8024164 <__smakebuf_r+0x1c>
 8024154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024158:	6023      	str	r3, [r4, #0]
 802415a:	6123      	str	r3, [r4, #16]
 802415c:	2301      	movs	r3, #1
 802415e:	6163      	str	r3, [r4, #20]
 8024160:	b002      	add	sp, #8
 8024162:	bd70      	pop	{r4, r5, r6, pc}
 8024164:	ab01      	add	r3, sp, #4
 8024166:	466a      	mov	r2, sp
 8024168:	f7ff ffc9 	bl	80240fe <__swhatbuf_r>
 802416c:	9900      	ldr	r1, [sp, #0]
 802416e:	4605      	mov	r5, r0
 8024170:	4630      	mov	r0, r6
 8024172:	f7ff f92b 	bl	80233cc <_malloc_r>
 8024176:	b948      	cbnz	r0, 802418c <__smakebuf_r+0x44>
 8024178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802417c:	059a      	lsls	r2, r3, #22
 802417e:	d4ef      	bmi.n	8024160 <__smakebuf_r+0x18>
 8024180:	f023 0303 	bic.w	r3, r3, #3
 8024184:	f043 0302 	orr.w	r3, r3, #2
 8024188:	81a3      	strh	r3, [r4, #12]
 802418a:	e7e3      	b.n	8024154 <__smakebuf_r+0xc>
 802418c:	4b0d      	ldr	r3, [pc, #52]	; (80241c4 <__smakebuf_r+0x7c>)
 802418e:	62b3      	str	r3, [r6, #40]	; 0x28
 8024190:	89a3      	ldrh	r3, [r4, #12]
 8024192:	6020      	str	r0, [r4, #0]
 8024194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024198:	81a3      	strh	r3, [r4, #12]
 802419a:	9b00      	ldr	r3, [sp, #0]
 802419c:	6163      	str	r3, [r4, #20]
 802419e:	9b01      	ldr	r3, [sp, #4]
 80241a0:	6120      	str	r0, [r4, #16]
 80241a2:	b15b      	cbz	r3, 80241bc <__smakebuf_r+0x74>
 80241a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80241a8:	4630      	mov	r0, r6
 80241aa:	f000 fa2d 	bl	8024608 <_isatty_r>
 80241ae:	b128      	cbz	r0, 80241bc <__smakebuf_r+0x74>
 80241b0:	89a3      	ldrh	r3, [r4, #12]
 80241b2:	f023 0303 	bic.w	r3, r3, #3
 80241b6:	f043 0301 	orr.w	r3, r3, #1
 80241ba:	81a3      	strh	r3, [r4, #12]
 80241bc:	89a0      	ldrh	r0, [r4, #12]
 80241be:	4305      	orrs	r5, r0
 80241c0:	81a5      	strh	r5, [r4, #12]
 80241c2:	e7cd      	b.n	8024160 <__smakebuf_r+0x18>
 80241c4:	08023f55 	.word	0x08023f55

080241c8 <memmove>:
 80241c8:	4288      	cmp	r0, r1
 80241ca:	b510      	push	{r4, lr}
 80241cc:	eb01 0402 	add.w	r4, r1, r2
 80241d0:	d902      	bls.n	80241d8 <memmove+0x10>
 80241d2:	4284      	cmp	r4, r0
 80241d4:	4623      	mov	r3, r4
 80241d6:	d807      	bhi.n	80241e8 <memmove+0x20>
 80241d8:	1e43      	subs	r3, r0, #1
 80241da:	42a1      	cmp	r1, r4
 80241dc:	d008      	beq.n	80241f0 <memmove+0x28>
 80241de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80241e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80241e6:	e7f8      	b.n	80241da <memmove+0x12>
 80241e8:	4402      	add	r2, r0
 80241ea:	4601      	mov	r1, r0
 80241ec:	428a      	cmp	r2, r1
 80241ee:	d100      	bne.n	80241f2 <memmove+0x2a>
 80241f0:	bd10      	pop	{r4, pc}
 80241f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80241f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80241fa:	e7f7      	b.n	80241ec <memmove+0x24>

080241fc <__malloc_lock>:
 80241fc:	4801      	ldr	r0, [pc, #4]	; (8024204 <__malloc_lock+0x8>)
 80241fe:	f7ff bf7b 	b.w	80240f8 <__retarget_lock_acquire_recursive>
 8024202:	bf00      	nop
 8024204:	20056adc 	.word	0x20056adc

08024208 <__malloc_unlock>:
 8024208:	4801      	ldr	r0, [pc, #4]	; (8024210 <__malloc_unlock+0x8>)
 802420a:	f7ff bf77 	b.w	80240fc <__retarget_lock_release_recursive>
 802420e:	bf00      	nop
 8024210:	20056adc 	.word	0x20056adc

08024214 <_realloc_r>:
 8024214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024216:	4607      	mov	r7, r0
 8024218:	4614      	mov	r4, r2
 802421a:	460e      	mov	r6, r1
 802421c:	b921      	cbnz	r1, 8024228 <_realloc_r+0x14>
 802421e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024222:	4611      	mov	r1, r2
 8024224:	f7ff b8d2 	b.w	80233cc <_malloc_r>
 8024228:	b922      	cbnz	r2, 8024234 <_realloc_r+0x20>
 802422a:	f7ff f87f 	bl	802332c <_free_r>
 802422e:	4625      	mov	r5, r4
 8024230:	4628      	mov	r0, r5
 8024232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024234:	f000 fa0a 	bl	802464c <_malloc_usable_size_r>
 8024238:	42a0      	cmp	r0, r4
 802423a:	d20f      	bcs.n	802425c <_realloc_r+0x48>
 802423c:	4621      	mov	r1, r4
 802423e:	4638      	mov	r0, r7
 8024240:	f7ff f8c4 	bl	80233cc <_malloc_r>
 8024244:	4605      	mov	r5, r0
 8024246:	2800      	cmp	r0, #0
 8024248:	d0f2      	beq.n	8024230 <_realloc_r+0x1c>
 802424a:	4631      	mov	r1, r6
 802424c:	4622      	mov	r2, r4
 802424e:	f7ff f857 	bl	8023300 <memcpy>
 8024252:	4631      	mov	r1, r6
 8024254:	4638      	mov	r0, r7
 8024256:	f7ff f869 	bl	802332c <_free_r>
 802425a:	e7e9      	b.n	8024230 <_realloc_r+0x1c>
 802425c:	4635      	mov	r5, r6
 802425e:	e7e7      	b.n	8024230 <_realloc_r+0x1c>

08024260 <__ssputs_r>:
 8024260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024264:	688e      	ldr	r6, [r1, #8]
 8024266:	429e      	cmp	r6, r3
 8024268:	4682      	mov	sl, r0
 802426a:	460c      	mov	r4, r1
 802426c:	4690      	mov	r8, r2
 802426e:	461f      	mov	r7, r3
 8024270:	d838      	bhi.n	80242e4 <__ssputs_r+0x84>
 8024272:	898a      	ldrh	r2, [r1, #12]
 8024274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024278:	d032      	beq.n	80242e0 <__ssputs_r+0x80>
 802427a:	6825      	ldr	r5, [r4, #0]
 802427c:	6909      	ldr	r1, [r1, #16]
 802427e:	eba5 0901 	sub.w	r9, r5, r1
 8024282:	6965      	ldr	r5, [r4, #20]
 8024284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802428c:	3301      	adds	r3, #1
 802428e:	444b      	add	r3, r9
 8024290:	106d      	asrs	r5, r5, #1
 8024292:	429d      	cmp	r5, r3
 8024294:	bf38      	it	cc
 8024296:	461d      	movcc	r5, r3
 8024298:	0553      	lsls	r3, r2, #21
 802429a:	d531      	bpl.n	8024300 <__ssputs_r+0xa0>
 802429c:	4629      	mov	r1, r5
 802429e:	f7ff f895 	bl	80233cc <_malloc_r>
 80242a2:	4606      	mov	r6, r0
 80242a4:	b950      	cbnz	r0, 80242bc <__ssputs_r+0x5c>
 80242a6:	230c      	movs	r3, #12
 80242a8:	f8ca 3000 	str.w	r3, [sl]
 80242ac:	89a3      	ldrh	r3, [r4, #12]
 80242ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80242b2:	81a3      	strh	r3, [r4, #12]
 80242b4:	f04f 30ff 	mov.w	r0, #4294967295
 80242b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242bc:	6921      	ldr	r1, [r4, #16]
 80242be:	464a      	mov	r2, r9
 80242c0:	f7ff f81e 	bl	8023300 <memcpy>
 80242c4:	89a3      	ldrh	r3, [r4, #12]
 80242c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80242ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80242ce:	81a3      	strh	r3, [r4, #12]
 80242d0:	6126      	str	r6, [r4, #16]
 80242d2:	6165      	str	r5, [r4, #20]
 80242d4:	444e      	add	r6, r9
 80242d6:	eba5 0509 	sub.w	r5, r5, r9
 80242da:	6026      	str	r6, [r4, #0]
 80242dc:	60a5      	str	r5, [r4, #8]
 80242de:	463e      	mov	r6, r7
 80242e0:	42be      	cmp	r6, r7
 80242e2:	d900      	bls.n	80242e6 <__ssputs_r+0x86>
 80242e4:	463e      	mov	r6, r7
 80242e6:	4632      	mov	r2, r6
 80242e8:	6820      	ldr	r0, [r4, #0]
 80242ea:	4641      	mov	r1, r8
 80242ec:	f7ff ff6c 	bl	80241c8 <memmove>
 80242f0:	68a3      	ldr	r3, [r4, #8]
 80242f2:	6822      	ldr	r2, [r4, #0]
 80242f4:	1b9b      	subs	r3, r3, r6
 80242f6:	4432      	add	r2, r6
 80242f8:	60a3      	str	r3, [r4, #8]
 80242fa:	6022      	str	r2, [r4, #0]
 80242fc:	2000      	movs	r0, #0
 80242fe:	e7db      	b.n	80242b8 <__ssputs_r+0x58>
 8024300:	462a      	mov	r2, r5
 8024302:	f7ff ff87 	bl	8024214 <_realloc_r>
 8024306:	4606      	mov	r6, r0
 8024308:	2800      	cmp	r0, #0
 802430a:	d1e1      	bne.n	80242d0 <__ssputs_r+0x70>
 802430c:	6921      	ldr	r1, [r4, #16]
 802430e:	4650      	mov	r0, sl
 8024310:	f7ff f80c 	bl	802332c <_free_r>
 8024314:	e7c7      	b.n	80242a6 <__ssputs_r+0x46>
	...

08024318 <_svfiprintf_r>:
 8024318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802431c:	4698      	mov	r8, r3
 802431e:	898b      	ldrh	r3, [r1, #12]
 8024320:	061b      	lsls	r3, r3, #24
 8024322:	b09d      	sub	sp, #116	; 0x74
 8024324:	4607      	mov	r7, r0
 8024326:	460d      	mov	r5, r1
 8024328:	4614      	mov	r4, r2
 802432a:	d50e      	bpl.n	802434a <_svfiprintf_r+0x32>
 802432c:	690b      	ldr	r3, [r1, #16]
 802432e:	b963      	cbnz	r3, 802434a <_svfiprintf_r+0x32>
 8024330:	2140      	movs	r1, #64	; 0x40
 8024332:	f7ff f84b 	bl	80233cc <_malloc_r>
 8024336:	6028      	str	r0, [r5, #0]
 8024338:	6128      	str	r0, [r5, #16]
 802433a:	b920      	cbnz	r0, 8024346 <_svfiprintf_r+0x2e>
 802433c:	230c      	movs	r3, #12
 802433e:	603b      	str	r3, [r7, #0]
 8024340:	f04f 30ff 	mov.w	r0, #4294967295
 8024344:	e0d1      	b.n	80244ea <_svfiprintf_r+0x1d2>
 8024346:	2340      	movs	r3, #64	; 0x40
 8024348:	616b      	str	r3, [r5, #20]
 802434a:	2300      	movs	r3, #0
 802434c:	9309      	str	r3, [sp, #36]	; 0x24
 802434e:	2320      	movs	r3, #32
 8024350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024354:	f8cd 800c 	str.w	r8, [sp, #12]
 8024358:	2330      	movs	r3, #48	; 0x30
 802435a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024504 <_svfiprintf_r+0x1ec>
 802435e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024362:	f04f 0901 	mov.w	r9, #1
 8024366:	4623      	mov	r3, r4
 8024368:	469a      	mov	sl, r3
 802436a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802436e:	b10a      	cbz	r2, 8024374 <_svfiprintf_r+0x5c>
 8024370:	2a25      	cmp	r2, #37	; 0x25
 8024372:	d1f9      	bne.n	8024368 <_svfiprintf_r+0x50>
 8024374:	ebba 0b04 	subs.w	fp, sl, r4
 8024378:	d00b      	beq.n	8024392 <_svfiprintf_r+0x7a>
 802437a:	465b      	mov	r3, fp
 802437c:	4622      	mov	r2, r4
 802437e:	4629      	mov	r1, r5
 8024380:	4638      	mov	r0, r7
 8024382:	f7ff ff6d 	bl	8024260 <__ssputs_r>
 8024386:	3001      	adds	r0, #1
 8024388:	f000 80aa 	beq.w	80244e0 <_svfiprintf_r+0x1c8>
 802438c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802438e:	445a      	add	r2, fp
 8024390:	9209      	str	r2, [sp, #36]	; 0x24
 8024392:	f89a 3000 	ldrb.w	r3, [sl]
 8024396:	2b00      	cmp	r3, #0
 8024398:	f000 80a2 	beq.w	80244e0 <_svfiprintf_r+0x1c8>
 802439c:	2300      	movs	r3, #0
 802439e:	f04f 32ff 	mov.w	r2, #4294967295
 80243a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80243a6:	f10a 0a01 	add.w	sl, sl, #1
 80243aa:	9304      	str	r3, [sp, #16]
 80243ac:	9307      	str	r3, [sp, #28]
 80243ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80243b2:	931a      	str	r3, [sp, #104]	; 0x68
 80243b4:	4654      	mov	r4, sl
 80243b6:	2205      	movs	r2, #5
 80243b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80243bc:	4851      	ldr	r0, [pc, #324]	; (8024504 <_svfiprintf_r+0x1ec>)
 80243be:	f7db ff47 	bl	8000250 <memchr>
 80243c2:	9a04      	ldr	r2, [sp, #16]
 80243c4:	b9d8      	cbnz	r0, 80243fe <_svfiprintf_r+0xe6>
 80243c6:	06d0      	lsls	r0, r2, #27
 80243c8:	bf44      	itt	mi
 80243ca:	2320      	movmi	r3, #32
 80243cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80243d0:	0711      	lsls	r1, r2, #28
 80243d2:	bf44      	itt	mi
 80243d4:	232b      	movmi	r3, #43	; 0x2b
 80243d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80243da:	f89a 3000 	ldrb.w	r3, [sl]
 80243de:	2b2a      	cmp	r3, #42	; 0x2a
 80243e0:	d015      	beq.n	802440e <_svfiprintf_r+0xf6>
 80243e2:	9a07      	ldr	r2, [sp, #28]
 80243e4:	4654      	mov	r4, sl
 80243e6:	2000      	movs	r0, #0
 80243e8:	f04f 0c0a 	mov.w	ip, #10
 80243ec:	4621      	mov	r1, r4
 80243ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80243f2:	3b30      	subs	r3, #48	; 0x30
 80243f4:	2b09      	cmp	r3, #9
 80243f6:	d94e      	bls.n	8024496 <_svfiprintf_r+0x17e>
 80243f8:	b1b0      	cbz	r0, 8024428 <_svfiprintf_r+0x110>
 80243fa:	9207      	str	r2, [sp, #28]
 80243fc:	e014      	b.n	8024428 <_svfiprintf_r+0x110>
 80243fe:	eba0 0308 	sub.w	r3, r0, r8
 8024402:	fa09 f303 	lsl.w	r3, r9, r3
 8024406:	4313      	orrs	r3, r2
 8024408:	9304      	str	r3, [sp, #16]
 802440a:	46a2      	mov	sl, r4
 802440c:	e7d2      	b.n	80243b4 <_svfiprintf_r+0x9c>
 802440e:	9b03      	ldr	r3, [sp, #12]
 8024410:	1d19      	adds	r1, r3, #4
 8024412:	681b      	ldr	r3, [r3, #0]
 8024414:	9103      	str	r1, [sp, #12]
 8024416:	2b00      	cmp	r3, #0
 8024418:	bfbb      	ittet	lt
 802441a:	425b      	neglt	r3, r3
 802441c:	f042 0202 	orrlt.w	r2, r2, #2
 8024420:	9307      	strge	r3, [sp, #28]
 8024422:	9307      	strlt	r3, [sp, #28]
 8024424:	bfb8      	it	lt
 8024426:	9204      	strlt	r2, [sp, #16]
 8024428:	7823      	ldrb	r3, [r4, #0]
 802442a:	2b2e      	cmp	r3, #46	; 0x2e
 802442c:	d10c      	bne.n	8024448 <_svfiprintf_r+0x130>
 802442e:	7863      	ldrb	r3, [r4, #1]
 8024430:	2b2a      	cmp	r3, #42	; 0x2a
 8024432:	d135      	bne.n	80244a0 <_svfiprintf_r+0x188>
 8024434:	9b03      	ldr	r3, [sp, #12]
 8024436:	1d1a      	adds	r2, r3, #4
 8024438:	681b      	ldr	r3, [r3, #0]
 802443a:	9203      	str	r2, [sp, #12]
 802443c:	2b00      	cmp	r3, #0
 802443e:	bfb8      	it	lt
 8024440:	f04f 33ff 	movlt.w	r3, #4294967295
 8024444:	3402      	adds	r4, #2
 8024446:	9305      	str	r3, [sp, #20]
 8024448:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024514 <_svfiprintf_r+0x1fc>
 802444c:	7821      	ldrb	r1, [r4, #0]
 802444e:	2203      	movs	r2, #3
 8024450:	4650      	mov	r0, sl
 8024452:	f7db fefd 	bl	8000250 <memchr>
 8024456:	b140      	cbz	r0, 802446a <_svfiprintf_r+0x152>
 8024458:	2340      	movs	r3, #64	; 0x40
 802445a:	eba0 000a 	sub.w	r0, r0, sl
 802445e:	fa03 f000 	lsl.w	r0, r3, r0
 8024462:	9b04      	ldr	r3, [sp, #16]
 8024464:	4303      	orrs	r3, r0
 8024466:	3401      	adds	r4, #1
 8024468:	9304      	str	r3, [sp, #16]
 802446a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802446e:	4826      	ldr	r0, [pc, #152]	; (8024508 <_svfiprintf_r+0x1f0>)
 8024470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024474:	2206      	movs	r2, #6
 8024476:	f7db feeb 	bl	8000250 <memchr>
 802447a:	2800      	cmp	r0, #0
 802447c:	d038      	beq.n	80244f0 <_svfiprintf_r+0x1d8>
 802447e:	4b23      	ldr	r3, [pc, #140]	; (802450c <_svfiprintf_r+0x1f4>)
 8024480:	bb1b      	cbnz	r3, 80244ca <_svfiprintf_r+0x1b2>
 8024482:	9b03      	ldr	r3, [sp, #12]
 8024484:	3307      	adds	r3, #7
 8024486:	f023 0307 	bic.w	r3, r3, #7
 802448a:	3308      	adds	r3, #8
 802448c:	9303      	str	r3, [sp, #12]
 802448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024490:	4433      	add	r3, r6
 8024492:	9309      	str	r3, [sp, #36]	; 0x24
 8024494:	e767      	b.n	8024366 <_svfiprintf_r+0x4e>
 8024496:	fb0c 3202 	mla	r2, ip, r2, r3
 802449a:	460c      	mov	r4, r1
 802449c:	2001      	movs	r0, #1
 802449e:	e7a5      	b.n	80243ec <_svfiprintf_r+0xd4>
 80244a0:	2300      	movs	r3, #0
 80244a2:	3401      	adds	r4, #1
 80244a4:	9305      	str	r3, [sp, #20]
 80244a6:	4619      	mov	r1, r3
 80244a8:	f04f 0c0a 	mov.w	ip, #10
 80244ac:	4620      	mov	r0, r4
 80244ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80244b2:	3a30      	subs	r2, #48	; 0x30
 80244b4:	2a09      	cmp	r2, #9
 80244b6:	d903      	bls.n	80244c0 <_svfiprintf_r+0x1a8>
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d0c5      	beq.n	8024448 <_svfiprintf_r+0x130>
 80244bc:	9105      	str	r1, [sp, #20]
 80244be:	e7c3      	b.n	8024448 <_svfiprintf_r+0x130>
 80244c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80244c4:	4604      	mov	r4, r0
 80244c6:	2301      	movs	r3, #1
 80244c8:	e7f0      	b.n	80244ac <_svfiprintf_r+0x194>
 80244ca:	ab03      	add	r3, sp, #12
 80244cc:	9300      	str	r3, [sp, #0]
 80244ce:	462a      	mov	r2, r5
 80244d0:	4b0f      	ldr	r3, [pc, #60]	; (8024510 <_svfiprintf_r+0x1f8>)
 80244d2:	a904      	add	r1, sp, #16
 80244d4:	4638      	mov	r0, r7
 80244d6:	f3af 8000 	nop.w
 80244da:	1c42      	adds	r2, r0, #1
 80244dc:	4606      	mov	r6, r0
 80244de:	d1d6      	bne.n	802448e <_svfiprintf_r+0x176>
 80244e0:	89ab      	ldrh	r3, [r5, #12]
 80244e2:	065b      	lsls	r3, r3, #25
 80244e4:	f53f af2c 	bmi.w	8024340 <_svfiprintf_r+0x28>
 80244e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80244ea:	b01d      	add	sp, #116	; 0x74
 80244ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244f0:	ab03      	add	r3, sp, #12
 80244f2:	9300      	str	r3, [sp, #0]
 80244f4:	462a      	mov	r2, r5
 80244f6:	4b06      	ldr	r3, [pc, #24]	; (8024510 <_svfiprintf_r+0x1f8>)
 80244f8:	a904      	add	r1, sp, #16
 80244fa:	4638      	mov	r0, r7
 80244fc:	f7ff f988 	bl	8023810 <_printf_i>
 8024500:	e7eb      	b.n	80244da <_svfiprintf_r+0x1c2>
 8024502:	bf00      	nop
 8024504:	08028848 	.word	0x08028848
 8024508:	08028852 	.word	0x08028852
 802450c:	00000000 	.word	0x00000000
 8024510:	08024261 	.word	0x08024261
 8024514:	0802884e 	.word	0x0802884e

08024518 <__sread>:
 8024518:	b510      	push	{r4, lr}
 802451a:	460c      	mov	r4, r1
 802451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024520:	f000 f89c 	bl	802465c <_read_r>
 8024524:	2800      	cmp	r0, #0
 8024526:	bfab      	itete	ge
 8024528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802452a:	89a3      	ldrhlt	r3, [r4, #12]
 802452c:	181b      	addge	r3, r3, r0
 802452e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024532:	bfac      	ite	ge
 8024534:	6563      	strge	r3, [r4, #84]	; 0x54
 8024536:	81a3      	strhlt	r3, [r4, #12]
 8024538:	bd10      	pop	{r4, pc}

0802453a <__swrite>:
 802453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802453e:	461f      	mov	r7, r3
 8024540:	898b      	ldrh	r3, [r1, #12]
 8024542:	05db      	lsls	r3, r3, #23
 8024544:	4605      	mov	r5, r0
 8024546:	460c      	mov	r4, r1
 8024548:	4616      	mov	r6, r2
 802454a:	d505      	bpl.n	8024558 <__swrite+0x1e>
 802454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024550:	2302      	movs	r3, #2
 8024552:	2200      	movs	r2, #0
 8024554:	f000 f868 	bl	8024628 <_lseek_r>
 8024558:	89a3      	ldrh	r3, [r4, #12]
 802455a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802455e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024562:	81a3      	strh	r3, [r4, #12]
 8024564:	4632      	mov	r2, r6
 8024566:	463b      	mov	r3, r7
 8024568:	4628      	mov	r0, r5
 802456a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802456e:	f000 b817 	b.w	80245a0 <_write_r>

08024572 <__sseek>:
 8024572:	b510      	push	{r4, lr}
 8024574:	460c      	mov	r4, r1
 8024576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802457a:	f000 f855 	bl	8024628 <_lseek_r>
 802457e:	1c43      	adds	r3, r0, #1
 8024580:	89a3      	ldrh	r3, [r4, #12]
 8024582:	bf15      	itete	ne
 8024584:	6560      	strne	r0, [r4, #84]	; 0x54
 8024586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802458a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802458e:	81a3      	strheq	r3, [r4, #12]
 8024590:	bf18      	it	ne
 8024592:	81a3      	strhne	r3, [r4, #12]
 8024594:	bd10      	pop	{r4, pc}

08024596 <__sclose>:
 8024596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802459a:	f000 b813 	b.w	80245c4 <_close_r>
	...

080245a0 <_write_r>:
 80245a0:	b538      	push	{r3, r4, r5, lr}
 80245a2:	4d07      	ldr	r5, [pc, #28]	; (80245c0 <_write_r+0x20>)
 80245a4:	4604      	mov	r4, r0
 80245a6:	4608      	mov	r0, r1
 80245a8:	4611      	mov	r1, r2
 80245aa:	2200      	movs	r2, #0
 80245ac:	602a      	str	r2, [r5, #0]
 80245ae:	461a      	mov	r2, r3
 80245b0:	f7dd fbe1 	bl	8001d76 <_write>
 80245b4:	1c43      	adds	r3, r0, #1
 80245b6:	d102      	bne.n	80245be <_write_r+0x1e>
 80245b8:	682b      	ldr	r3, [r5, #0]
 80245ba:	b103      	cbz	r3, 80245be <_write_r+0x1e>
 80245bc:	6023      	str	r3, [r4, #0]
 80245be:	bd38      	pop	{r3, r4, r5, pc}
 80245c0:	20056ae4 	.word	0x20056ae4

080245c4 <_close_r>:
 80245c4:	b538      	push	{r3, r4, r5, lr}
 80245c6:	4d06      	ldr	r5, [pc, #24]	; (80245e0 <_close_r+0x1c>)
 80245c8:	2300      	movs	r3, #0
 80245ca:	4604      	mov	r4, r0
 80245cc:	4608      	mov	r0, r1
 80245ce:	602b      	str	r3, [r5, #0]
 80245d0:	f7dd fbed 	bl	8001dae <_close>
 80245d4:	1c43      	adds	r3, r0, #1
 80245d6:	d102      	bne.n	80245de <_close_r+0x1a>
 80245d8:	682b      	ldr	r3, [r5, #0]
 80245da:	b103      	cbz	r3, 80245de <_close_r+0x1a>
 80245dc:	6023      	str	r3, [r4, #0]
 80245de:	bd38      	pop	{r3, r4, r5, pc}
 80245e0:	20056ae4 	.word	0x20056ae4

080245e4 <_fstat_r>:
 80245e4:	b538      	push	{r3, r4, r5, lr}
 80245e6:	4d07      	ldr	r5, [pc, #28]	; (8024604 <_fstat_r+0x20>)
 80245e8:	2300      	movs	r3, #0
 80245ea:	4604      	mov	r4, r0
 80245ec:	4608      	mov	r0, r1
 80245ee:	4611      	mov	r1, r2
 80245f0:	602b      	str	r3, [r5, #0]
 80245f2:	f7dd fbe8 	bl	8001dc6 <_fstat>
 80245f6:	1c43      	adds	r3, r0, #1
 80245f8:	d102      	bne.n	8024600 <_fstat_r+0x1c>
 80245fa:	682b      	ldr	r3, [r5, #0]
 80245fc:	b103      	cbz	r3, 8024600 <_fstat_r+0x1c>
 80245fe:	6023      	str	r3, [r4, #0]
 8024600:	bd38      	pop	{r3, r4, r5, pc}
 8024602:	bf00      	nop
 8024604:	20056ae4 	.word	0x20056ae4

08024608 <_isatty_r>:
 8024608:	b538      	push	{r3, r4, r5, lr}
 802460a:	4d06      	ldr	r5, [pc, #24]	; (8024624 <_isatty_r+0x1c>)
 802460c:	2300      	movs	r3, #0
 802460e:	4604      	mov	r4, r0
 8024610:	4608      	mov	r0, r1
 8024612:	602b      	str	r3, [r5, #0]
 8024614:	f7dd fbe7 	bl	8001de6 <_isatty>
 8024618:	1c43      	adds	r3, r0, #1
 802461a:	d102      	bne.n	8024622 <_isatty_r+0x1a>
 802461c:	682b      	ldr	r3, [r5, #0]
 802461e:	b103      	cbz	r3, 8024622 <_isatty_r+0x1a>
 8024620:	6023      	str	r3, [r4, #0]
 8024622:	bd38      	pop	{r3, r4, r5, pc}
 8024624:	20056ae4 	.word	0x20056ae4

08024628 <_lseek_r>:
 8024628:	b538      	push	{r3, r4, r5, lr}
 802462a:	4d07      	ldr	r5, [pc, #28]	; (8024648 <_lseek_r+0x20>)
 802462c:	4604      	mov	r4, r0
 802462e:	4608      	mov	r0, r1
 8024630:	4611      	mov	r1, r2
 8024632:	2200      	movs	r2, #0
 8024634:	602a      	str	r2, [r5, #0]
 8024636:	461a      	mov	r2, r3
 8024638:	f7dd fbe0 	bl	8001dfc <_lseek>
 802463c:	1c43      	adds	r3, r0, #1
 802463e:	d102      	bne.n	8024646 <_lseek_r+0x1e>
 8024640:	682b      	ldr	r3, [r5, #0]
 8024642:	b103      	cbz	r3, 8024646 <_lseek_r+0x1e>
 8024644:	6023      	str	r3, [r4, #0]
 8024646:	bd38      	pop	{r3, r4, r5, pc}
 8024648:	20056ae4 	.word	0x20056ae4

0802464c <_malloc_usable_size_r>:
 802464c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024650:	1f18      	subs	r0, r3, #4
 8024652:	2b00      	cmp	r3, #0
 8024654:	bfbc      	itt	lt
 8024656:	580b      	ldrlt	r3, [r1, r0]
 8024658:	18c0      	addlt	r0, r0, r3
 802465a:	4770      	bx	lr

0802465c <_read_r>:
 802465c:	b538      	push	{r3, r4, r5, lr}
 802465e:	4d07      	ldr	r5, [pc, #28]	; (802467c <_read_r+0x20>)
 8024660:	4604      	mov	r4, r0
 8024662:	4608      	mov	r0, r1
 8024664:	4611      	mov	r1, r2
 8024666:	2200      	movs	r2, #0
 8024668:	602a      	str	r2, [r5, #0]
 802466a:	461a      	mov	r2, r3
 802466c:	f7dd fb66 	bl	8001d3c <_read>
 8024670:	1c43      	adds	r3, r0, #1
 8024672:	d102      	bne.n	802467a <_read_r+0x1e>
 8024674:	682b      	ldr	r3, [r5, #0]
 8024676:	b103      	cbz	r3, 802467a <_read_r+0x1e>
 8024678:	6023      	str	r3, [r4, #0]
 802467a:	bd38      	pop	{r3, r4, r5, pc}
 802467c:	20056ae4 	.word	0x20056ae4

08024680 <_init>:
 8024680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024682:	bf00      	nop
 8024684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024686:	bc08      	pop	{r3}
 8024688:	469e      	mov	lr, r3
 802468a:	4770      	bx	lr

0802468c <_fini>:
 802468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802468e:	bf00      	nop
 8024690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024692:	bc08      	pop	{r3}
 8024694:	469e      	mov	lr, r3
 8024696:	4770      	bx	lr
