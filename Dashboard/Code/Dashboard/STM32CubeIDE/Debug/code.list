
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002aab4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046d4  0802acb8  0802acb8  0003acb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9b16  0802f38c  0802f38c  0003f38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f8  080d8ea4  080d8ea4  000e8ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000d8  080d8f9c  080d8f9c  000e8f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d9074  080d9074  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d9074  080d9074  000e9074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d907c  080d907c  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d907c  080d907c  000e907c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d90ac  080d90ac  000e90ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000254  20000000  080d90b4  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056f0c  20000254  080d9308  000f0254  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20057160  080d9308  000f7160  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d8701  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017485  00000000  00000000  00261ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003fd0  00000000  00000000  00279480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039e0  00000000  00000000  0027d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039e9c  00000000  00000000  00280e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004e1ae  00000000  00000000  002baccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012f347  00000000  00000000  00308e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  004381c1  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011ba4  00000000  00000000  00438294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000254 	.word	0x20000254
 800021c:	00000000 	.word	0x00000000
 8000220:	0802ac9c 	.word	0x0802ac9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000258 	.word	0x20000258
 800023c:	0802ac9c 	.word	0x0802ac9c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f00f fd32 	bl	8010444 <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <WS2812_Init>:

void WS2812_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e007      	b.n	8000a04 <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80009f4:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <WS2812_Init+0x80>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	212b      	movs	r1, #43	; 0x2b
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000a0a:	dbf3      	blt.n	80009f4 <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e009      	b.n	8000a26 <WS2812_Init+0x3e>
		leds[i + LED_NUMBER * 24] = 0;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <WS2812_Init+0x80>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b27      	cmp	r3, #39	; 0x27
 8000a2a:	ddf2      	ble.n	8000a12 <WS2812_Init+0x2a>

	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000a2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <WS2812_Init+0x80>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <WS2812_Init+0x84>)
 8000a36:	f00f faf9 	bl	801002c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	e00a      	b.n	8000a56 <WS2812_Init+0x6e>
	{
		updateLedsType_0(i);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f87b 	bl	8000b40 <updateLedsType_0>
		osDelay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f011 f8aa 	bl	8011ba4 <osDelay>
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9f1      	bls.n	8000a40 <WS2812_Init+0x58>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200569f8 	.word	0x200569f8
 8000a6c:	20057000 	.word	0x20057000

08000a70 <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a70:	b490      	push	{r4, r7}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] =
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <setLed+0xc8>)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a98:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 2, 4, 8, 16, 32, 64, 128 };
	uint16_t ledId = 24 * ledNumber;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	e03a      	b.n	8000b26 <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ab0:	f107 0208 	add.w	r2, r7, #8
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	4013      	ands	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <setLed+0x58>
 8000ac4:	2156      	movs	r1, #86	; 0x56
 8000ac6:	e000      	b.n	8000aca <setLed+0x5a>
 8000ac8:	212b      	movs	r1, #43	; 0x2b
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <setLed+0xcc>)
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <setLed+0x7a>
 8000ae6:	2156      	movs	r1, #86	; 0x56
 8000ae8:	e000      	b.n	8000aec <setLed+0x7c>
 8000aea:	212b      	movs	r1, #43	; 0x2b
 8000aec:	8afb      	ldrh	r3, [r7, #22]
 8000aee:	3308      	adds	r3, #8
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <setLed+0xcc>)
 8000af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4413      	add	r3, r2
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	793b      	ldrb	r3, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <setLed+0x9e>
 8000b0a:	2156      	movs	r1, #86	; 0x56
 8000b0c:	e000      	b.n	8000b10 <setLed+0xa0>
 8000b0e:	212b      	movs	r1, #43	; 0x2b
 8000b10:	8afb      	ldrh	r3, [r7, #22]
 8000b12:	3310      	adds	r3, #16
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <setLed+0xcc>)
 8000b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	3301      	adds	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	ddc1      	ble.n	8000ab0 <setLed+0x40>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc90      	pop	{r4, r7}
 8000b36:	4770      	bx	lr
 8000b38:	0802acb8 	.word	0x0802acb8
 8000b3c:	200569f8 	.word	0x200569f8

08000b40 <updateLedsType_0>:

// turn on leds linearly
void updateLedsType_0(int8_t activeLeds)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e02b      	b.n	8000ba8 <updateLedsType_0+0x68>
	{
		if (i < activeLeds)
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	da1d      	bge.n	8000b96 <updateLedsType_0+0x56>
		{
			if (i < 5)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d807      	bhi.n	8000b70 <updateLedsType_0+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b62:	7899      	ldrb	r1, [r3, #2]
 8000b64:	7bf8      	ldrb	r0, [r7, #15]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f7ff ff81 	bl	8000a70 <setLed>
 8000b6e:	e018      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else if (i < 10)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b09      	cmp	r3, #9
 8000b74:	d807      	bhi.n	8000b86 <updateLedsType_0+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b78:	78da      	ldrb	r2, [r3, #3]
 8000b7a:	7bf8      	ldrb	r0, [r7, #15]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff ff76 	bl	8000a70 <setLed>
 8000b84:	e00d      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else
			{
				setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	7bf8      	ldrb	r0, [r7, #15]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f7ff ff6e 	bl	8000a70 <setLed>
 8000b94:	e005      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000b96:	7bf8      	ldrb	r0, [r7, #15]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f7ff ff67 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b0e      	cmp	r3, #14
 8000bac:	d9d0      	bls.n	8000b50 <updateLedsType_0+0x10>
		}

	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <updateLedsType_0+0x88>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <updateLedsType_0+0x8c>)
 8000bb8:	f00f fa38 	bl	801002c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	200569f8 	.word	0x200569f8
 8000bcc:	20057000 	.word	0x20057000

08000bd0 <updateLedsType_1>:

// turn on leds 1-10 linearly, last five turn on together
void updateLedsType_1(int8_t activeLeds)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e034      	b.n	8000c4a <updateLedsType_1+0x7a>
	{
		if (i < activeLeds)
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	da26      	bge.n	8000c38 <updateLedsType_1+0x68>
		{
			if (i < 5)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d807      	bhi.n	8000c00 <updateLedsType_1+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <updateLedsType_1+0x98>)
 8000bf2:	7899      	ldrb	r1, [r3, #2]
 8000bf4:	7bf8      	ldrb	r0, [r7, #15]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f7ff ff39 	bl	8000a70 <setLed>
 8000bfe:	e021      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else if (i < 10)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	d807      	bhi.n	8000c16 <updateLedsType_1+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <updateLedsType_1+0x98>)
 8000c08:	78da      	ldrb	r2, [r3, #3]
 8000c0a:	7bf8      	ldrb	r0, [r7, #15]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f7ff ff2e 	bl	8000a70 <setLed>
 8000c14:	e016      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else
			{
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	e009      	b.n	8000c30 <updateLedsType_1+0x60>
				{
					setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <updateLedsType_1+0x98>)
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	7bf8      	ldrb	r0, [r7, #15]
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	f7ff ff23 	bl	8000a70 <setLed>
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	73bb      	strb	r3, [r7, #14]
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2b0e      	cmp	r3, #14
 8000c34:	d9f2      	bls.n	8000c1c <updateLedsType_1+0x4c>
 8000c36:	e005      	b.n	8000c44 <updateLedsType_1+0x74>
				}
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000c38:	7bf8      	ldrb	r0, [r7, #15]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f7ff ff16 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b0e      	cmp	r3, #14
 8000c4e:	d9c7      	bls.n	8000be0 <updateLedsType_1+0x10>
		}
	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000c50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <updateLedsType_1+0x9c>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <updateLedsType_1+0xa0>)
 8000c5a:	f00f f9e7 	bl	801002c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	200569f8 	.word	0x200569f8
 8000c70:	20057000 	.word	0x20057000

08000c74 <updateLeds>:

void updateLeds(int rpm, int mode)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
	uint16_t minRPM;
	uint16_t maxRPM;
	int8_t activeLeds;
	static uint8_t lastGear = 1;
	switch (mode)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <updateLeds+0x20>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db75      	blt.n	8000d76 <updateLeds+0x102>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d871      	bhi.n	8000d76 <updateLeds+0x102>
 8000c92:	e027      	b.n	8000ce4 <updateLeds+0x70>
	{
	case 0:
		minRPM = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	82bb      	strh	r3, [r7, #20]
		maxRPM = 12000;
 8000c98:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c9c:	827b      	strh	r3, [r7, #18]
		activeLeds =
				ceil(
						(float) (rpm - minRPM)
 8000c9e:	8abb      	ldrh	r3, [r7, #20]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
								/ (float) (maxRPM - minRPM)* LED_NUMBER);
 8000cac:	8a7a      	ldrh	r2, [r7, #18]
 8000cae:	8abb      	ldrh	r3, [r7, #20]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
				ceil(
 8000cc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cca:	eeb0 0b47 	vmov.f64	d0, d7
 8000cce:	f025 fae3 	bl	8026298 <ceil>
 8000cd2:	eeb0 7b40 	vmov.f64	d7, d0
		activeLeds =
 8000cd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cda:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce2:	e048      	b.n	8000d76 <updateLeds+0x102>
	case 1:
	case 2:
#ifdef USE_OPTIMAL_SHIFT_RPM
		if (telemetryData.gear <= 6 && telemetryData.gear >= 1)
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <updateLeds+0x138>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b06      	cmp	r3, #6
 8000cea:	d807      	bhi.n	8000cfc <updateLeds+0x88>
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <updateLeds+0x138>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <updateLeds+0x88>
		{
			lastGear = telemetryData.gear;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <updateLeds+0x138>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <updateLeds+0x13c>)
 8000cfa:	701a      	strb	r2, [r3, #0]
		}

		minRPM = optimalShiftUpRPM[lastGear - 1] - 2000;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <updateLeds+0x13c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <updateLeds+0x140>)
 8000d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d08:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d0c:	82bb      	strh	r3, [r7, #20]
		maxRPM = optimalShiftUpRPM[lastGear - 1];
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <updateLeds+0x13c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <updateLeds+0x140>)
 8000d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1a:	827b      	strh	r3, [r7, #18]
#else
		minRPM = 9500;
		maxRPM = 11500;
#endif
		uint8_t ledNumber = mode == 1 ? LED_NUMBER : LED_NUMBER - 4;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <updateLeds+0xb2>
 8000d22:	230f      	movs	r3, #15
 8000d24:	e000      	b.n	8000d28 <updateLeds+0xb4>
 8000d26:	230b      	movs	r3, #11
 8000d28:	747b      	strb	r3, [r7, #17]
		activeLeds = ceil(
				(float) (rpm - minRPM) / (float) (maxRPM - minRPM) * ledNumber);
 8000d2a:	8abb      	ldrh	r3, [r7, #20]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d38:	8a7a      	ldrh	r2, [r7, #18]
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
		activeLeds = ceil(
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d60:	f025 fa9a 	bl	8026298 <ceil>
 8000d64:	eeb0 7b40 	vmov.f64	d7, d0
 8000d68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	75fb      	strb	r3, [r7, #23]

		break;
 8000d74:	bf00      	nop

	}

	switch (mode)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	dc03      	bgt.n	8000d84 <updateLeds+0x110>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da04      	bge.n	8000d8c <updateLeds+0x118>
		break;
	case 2:
		updateLedsType_1(activeLeds);
		break;
	}
}
 8000d82:	e00f      	b.n	8000da4 <updateLeds+0x130>
	switch (mode)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d006      	beq.n	8000d98 <updateLeds+0x124>
}
 8000d8a:	e00b      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_0(activeLeds);
 8000d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fed5 	bl	8000b40 <updateLedsType_0>
		break;
 8000d96:	e005      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_1(activeLeds);
 8000d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff17 	bl	8000bd0 <updateLedsType_1>
		break;
 8000da2:	bf00      	nop
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200239ec 	.word	0x200239ec
 8000db0:	20000009 	.word	0x20000009
 8000db4:	200569ec 	.word	0x200569ec

08000db8 <lerp>:

float lerp(float A, float B, float Alpha)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dc6:	ed87 1a01 	vstr	s2, [r7, #4]
	return A + Alpha * (B - A);
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <ComputeOptimalPoints>:

void ComputeOptimalPoints()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
// Calculation based on https://glennmessersmith.com/shiftpt.html
	const uint16_t minRPM = 3000;
 8000dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
	const uint16_t maxRPM = 12000;
 8000e00:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000e04:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		optimalShiftUpRPM[i]=UpRPM;
		//OptimalGearDownRPM.Add(DownRPM);
	}
#else
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000e06:	2304      	movs	r3, #4
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	e0fa      	b.n	8001002 <ComputeOptimalPoints+0x20e>
	{
		float MinTorqueLoss = MAX_ENGINE_TORQUE * GearRatios[i];
 8000e0c:	4a83      	ldr	r2, [pc, #524]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001020 <ComputeOptimalPoints+0x22c>
 8000e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float CurrentGearRatio = GearRatios[i];
 8000e24:	4a7d      	ldr	r2, [pc, #500]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	623b      	str	r3, [r7, #32]
		float NextGearRatio = GearRatios[i + 1];
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a79      	ldr	r2, [pc, #484]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61fb      	str	r3, [r7, #28]
		UpRPM = maxRPM;
 8000e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e40:	86fb      	strh	r3, [r7, #54]	; 0x36
		for (int j = maxRPM; j > minRPM; j -= 50)
 8000e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e46:	e0cd      	b.n	8000fe4 <ComputeOptimalPoints+0x1f0>
		{
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000e4e:	4a75      	ldr	r2, [pc, #468]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	1192      	asrs	r2, r2, #6
 8000e56:	17db      	asrs	r3, r3, #31
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1192      	asrs	r2, r2, #6
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a6b      	ldr	r2, [pc, #428]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	4a67      	ldr	r2, [pc, #412]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1191      	asrs	r1, r2, #6
 8000e8e:	17da      	asrs	r2, r3, #31
 8000e90:	1a8a      	subs	r2, r1, r2
 8000e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	1a9a      	subs	r2, r3, r2
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e9c:	ee07 2a90 	vmov	s15, r2
 8000ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea4:	eddf 5a61 	vldr	s11, [pc, #388]	; 800102c <ComputeOptimalPoints+0x238>
 8000ea8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000eac:	eeb0 1a46 	vmov.f32	s2, s12
 8000eb0:	eef0 0a66 	vmov.f32	s1, s13
 8000eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8000eb8:	f7ff ff7e 	bl	8000db8 <lerp>
 8000ebc:	ed87 0a06 	vstr	s0, [r7, #24]
			// calculate current torque on gearbox output
			float CurrentGearTorque = EngineTorque * CurrentGearRatio;
 8000ec0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ec4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	edc7 7a05 	vstr	s15, [r7, #20]
			// calculate engine RPM on next gear
			uint16_t NextRPM = NextGearRatio * j / CurrentGearRatio;
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ede:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	827b      	strh	r3, [r7, #18]
			if (NextRPM < minRPM)
 8000ef4:	8a7a      	ldrh	r2, [r7, #18]
 8000ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d36f      	bcc.n	8000fdc <ComputeOptimalPoints+0x1e8>
			{
				continue;
			}
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
 8000efe:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000f02:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f04:	fb82 1203 	smull	r1, r2, r2, r3
 8000f08:	1192      	asrs	r2, r2, #6
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(NextRPM - 2000) / 1000],
 8000f1a:	8a7b      	ldrh	r3, [r7, #18]
 8000f1c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000f20:	4a40      	ldr	r2, [pc, #256]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1192      	asrs	r2, r2, #6
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
					(NextRPM % 1000) / 1000.0f);
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f3c:	fba2 1203 	umull	r1, r2, r2, r3
 8000f40:	0992      	lsrs	r2, r2, #6
 8000f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f46:	fb01 f202 	mul.w	r2, r1, r2
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	eddf 5a35 	vldr	s11, [pc, #212]	; 800102c <ComputeOptimalPoints+0x238>
 8000f5a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000f5e:	eeb0 1a46 	vmov.f32	s2, s12
 8000f62:	eef0 0a66 	vmov.f32	s1, s13
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	f7ff ff25 	bl	8000db8 <lerp>
 8000f6e:	ed87 0a03 	vstr	s0, [r7, #12]
			// calculate torque on gearbox outpur on next gear
			float NextGearTorque = NextGearEngineTorque * NextGearRatio;
 8000f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	edc7 7a02 	vstr	s15, [r7, #8]
			float deltaTorque = CurrentGearTorque - NextGearTorque;
 8000f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a01 	vstr	s15, [r7, #4]
			float absDeltaTorque =
					deltaTorque < 0.0f ? -deltaTorque : deltaTorque;
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d504      	bpl.n	8000faa <ComputeOptimalPoints+0x1b6>
 8000fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa4:	eef1 7a67 	vneg.f32	s15, s15
 8000fa8:	e001      	b.n	8000fae <ComputeOptimalPoints+0x1ba>
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
			float absDeltaTorque =
 8000fae:	edc7 7a00 	vstr	s15, [r7]
			if (absDeltaTorque < MinTorqueLoss)
 8000fb2:	ed97 7a00 	vldr	s14, [r7]
 8000fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d503      	bpl.n	8000fcc <ComputeOptimalPoints+0x1d8>
			{
				UpRPM = j;
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	86fb      	strh	r3, [r7, #54]	; 0x36
				MinTorqueLoss = absDeltaTorque;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (deltaTorque > 0.0f)
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dc0a      	bgt.n	8000ff0 <ComputeOptimalPoints+0x1fc>
 8000fda:	e000      	b.n	8000fde <ComputeOptimalPoints+0x1ea>
				continue;
 8000fdc:	bf00      	nop
		for (int j = maxRPM; j > minRPM; j -= 50)
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	3b32      	subs	r3, #50	; 0x32
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f73f af2d 	bgt.w	8000e48 <ComputeOptimalPoints+0x54>
 8000fee:	e000      	b.n	8000ff2 <ComputeOptimalPoints+0x1fe>
			{
				break;
 8000ff0:	bf00      	nop
			}
		}
		optimalShiftUpRPM[i] = UpRPM;
 8000ff2:	490f      	ldr	r1, [pc, #60]	; (8001030 <ComputeOptimalPoints+0x23c>)
 8000ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ff8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	3b01      	subs	r3, #1
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	2b00      	cmp	r3, #0
 8001006:	f6bf af01 	bge.w	8000e0c <ComputeOptimalPoints+0x18>
		//OptimalGearDownRPM.Add(DownRPM);
	}
#endif
	optimalShiftUpRPM[5] = 12000;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <ComputeOptimalPoints+0x23c>)
 800100c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001010:	815a      	strh	r2, [r3, #10]
}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0802b914 	.word	0x0802b914
 8001020:	428c0000 	.word	0x428c0000
 8001024:	10624dd3 	.word	0x10624dd3
 8001028:	0802b92c 	.word	0x0802b92c
 800102c:	447a0000 	.word	0x447a0000
 8001030:	200569ec 	.word	0x200569ec

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_ADC1_Init+0x98>)
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x9c>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_ADC1_Init+0x98>)
 800104e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001052:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_ADC1_Init+0x98>)
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_ADC1_Init+0xa0>)
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_ADC1_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC1_Init+0x98>)
 8001090:	2201      	movs	r2, #1
 8001092:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_ADC1_Init+0x98>)
 8001096:	f009 fc77 	bl	800a988 <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a0:	f001 fc1e 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010a4:	230b      	movs	r3, #11
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010ac:	2307      	movs	r3, #7
 80010ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_ADC1_Init+0x98>)
 80010b6:	f009 fe11 	bl	800acdc <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c0:	f001 fc0e 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20056d18 	.word	0x20056d18
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_ADC_MspInit+0x74>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d123      	bne.n	8001142 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_ADC_MspInit+0x78>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_ADC_MspInit+0x7c>)
 800113e:	f00b fe1f 	bl	800cd80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800

08001158 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <FLASH_QSPI_Init+0x70>)
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <FLASH_QSPI_Init+0x74>)
 8001160:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001162:	4819      	ldr	r0, [pc, #100]	; (80011c8 <FLASH_QSPI_Init+0x70>)
 8001164:	f00c fd5c 	bl	800dc20 <HAL_QSPI_DeInit>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e028      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8001172:	f001 fbbb 	bl	80028ec <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8001176:	f000 f82b 	bl	80011d0 <FLASH_QSPI_ResetChip>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e01f      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f009 fbdb 	bl	800a940 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 800118a:	f000 f87f 	bl	800128c <FLASH_QSPI_AutoPollingMemReady>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e015      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8001198:	f000 f8b0 	bl	80012fc <FLASH_QSPI_WriteEnable>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 80011a6:	f000 f8f3 	bl	8001390 <FLASH_QSPI_Configuration>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e007      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 80011b4:	f000 f962 	bl	800147c <FLASH_QSPI_EnableMemoryMappedMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20056f1c 	.word	0x20056f1c
 80011cc:	a0001000 	.word	0xa0001000

080011d0 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	; 0x40
 80011d4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 80011da:	2366      	movs	r3, #102	; 0x66
 80011dc:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4619      	mov	r1, r3
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <FLASH_QSPI_ResetChip+0xb8>)
 8001214:	f00c fee2 	bl	800dfdc <HAL_QSPI_Command>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e02e      	b.n	8001280 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8001222:	2300      	movs	r3, #0
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001226:	e003      	b.n	8001230 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8001228:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 800122a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122c:	3301      	adds	r3, #1
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001232:	2b2e      	cmp	r3, #46	; 0x2e
 8001234:	d9f8      	bls.n	8001228 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8001236:	2399      	movs	r3, #153	; 0x99
 8001238:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <FLASH_QSPI_ResetChip+0xb8>)
 8001270:	f00c feb4 	bl	800dfdc <HAL_QSPI_Command>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20056f1c 	.word	0x20056f1c

0800128c <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8001292:	2305      	movs	r3, #5
 8001294:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80012a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 80012be:	2301      	movs	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80012ca:	2310      	movs	r3, #16
 80012cc:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80012ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d2:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80012d4:	463a      	mov	r2, r7
 80012d6:	f107 0118 	add.w	r1, r7, #24
 80012da:	f241 3388 	movw	r3, #5000	; 0x1388
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 80012e0:	f00d f809 	bl	800e2f6 <HAL_QSPI_AutoPolling>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20056f1c 	.word	0x20056f1c

080012fc <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8001302:	2306      	movs	r3, #6
 8001304:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001324:	2300      	movs	r3, #0
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4619      	mov	r1, r3
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <FLASH_QSPI_WriteEnable+0x90>)
 8001334:	f00c fe52 	bl	800dfdc <HAL_QSPI_Command>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e01f      	b.n	8001382 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001342:	2302      	movs	r3, #2
 8001344:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8001346:	2302      	movs	r3, #2
 8001348:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001352:	2310      	movs	r3, #16
 8001354:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800135c:	2305      	movs	r3, #5
 800135e:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001366:	463a      	mov	r2, r7
 8001368:	f107 0118 	add.w	r1, r7, #24
 800136c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <FLASH_QSPI_WriteEnable+0x90>)
 8001372:	f00c ffc0 	bl	800e2f6 <HAL_QSPI_AutoPolling>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20056f1c 	.word	0x20056f1c

08001390 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8001396:	2335      	movs	r3, #53	; 0x35
 8001398:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80013a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4619      	mov	r1, r3
 80013cc:	482a      	ldr	r0, [pc, #168]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 80013ce:	f00c fe05 	bl	800dfdc <HAL_QSPI_Command>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e049      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4619      	mov	r1, r3
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 80013e6:	f00c fee9 	bl	800e1bc <HAL_QSPI_Receive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e03d      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 80013f4:	f7ff ff82 	bl	80012fc <FLASH_QSPI_WriteEnable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e036      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 800140c:	2331      	movs	r3, #49	; 0x31
 800140e:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001414:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800142a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 8001444:	f00c fdca 	bl	800dfdc <HAL_QSPI_Command>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 800145c:	f00c fe1c 	bl	800e098 <HAL_QSPI_Transmit>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8001466:	f001 fa3b 	bl	80028e0 <Error_Handler>
		return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3740      	adds	r7, #64	; 0x40
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20056f1c 	.word	0x20056f1c

0800147c <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b090      	sub	sp, #64	; 0x40
 8001480:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8001482:	23eb      	movs	r3, #235	; 0xeb
 8001484:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148a:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8001492:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 80014ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 80014b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 80014c0:	2304      	movs	r3, #4
 80014c2:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 80014c8:	463a      	mov	r2, r7
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 80014d2:	f00c ff87 	bl	800e3e4 <HAL_QSPI_MemoryMapped>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3740      	adds	r7, #64	; 0x40
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20056f1c 	.word	0x20056f1c

080014f0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_CAN1_Init+0x9c>)
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_CAN1_Init+0xa0>)
 80014fa:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_CAN1_Init+0x9c>)
 80014fe:	2209      	movs	r2, #9
 8001500:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_CAN1_Init+0x9c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_CAN1_Init+0x9c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_CAN1_Init+0x9c>)
 8001510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001514:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_CAN1_Init+0x9c>)
 8001518:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800151c:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_CAN1_Init+0x9c>)
 8001520:	2200      	movs	r2, #0
 8001522:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_CAN1_Init+0x9c>)
 8001526:	2200      	movs	r2, #0
 8001528:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_CAN1_Init+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_CAN1_Init+0x9c>)
 8001532:	2201      	movs	r2, #1
 8001534:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_CAN1_Init+0x9c>)
 8001538:	2200      	movs	r2, #0
 800153a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_CAN1_Init+0x9c>)
 800153e:	2200      	movs	r2, #0
 8001540:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <MX_CAN1_Init+0x9c>)
 8001544:	f009 fe0e 	bl	800b164 <HAL_CAN_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_CAN1_Init+0x62>
	{
		Error_Handler();
 800154e:	f001 f9c7 	bl	80028e0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8001556:	2308      	movs	r3, #8
 8001558:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_CAN1_Init+0x9c>)
 8001580:	f009 feec 	bl	800b35c <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

	/* USER CODE END CAN1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20056d8c 	.word	0x20056d8c
 8001590:	40006400 	.word	0x40006400

08001594 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_CAN2_Init+0xa0>)
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <MX_CAN2_Init+0xa4>)
 800159e:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015a2:	2209      	movs	r2, #9
 80015a4:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015b2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ba:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015c2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015ea:	f009 fdbb 	bl	800b164 <HAL_CAN_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 80015f4:	f001 f974 	bl	80028e0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 80015fc:	2312      	movs	r3, #18
 80015fe:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 800161c:	230a      	movs	r3, #10
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_CAN2_Init+0xa0>)
 8001626:	f009 fe99 	bl	800b35c <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

	/* USER CODE END CAN2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20056d60 	.word	0x20056d60
 8001638:	40006800 	.word	0x40006800

0800163c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_CAN_MspInit+0x150>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d13a      	bne.n	80016d4 <HAL_CAN_MspInit+0x98>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a4a      	ldr	r2, [pc, #296]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001666:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_CAN_MspInit+0x154>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10b      	bne.n	8001688 <HAL_CAN_MspInit+0x4c>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	6a3b      	ldr	r3, [r7, #32]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a41      	ldr	r2, [pc, #260]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	69fb      	ldr	r3, [r7, #28]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80016a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016b2:	2309      	movs	r3, #9
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4836      	ldr	r0, [pc, #216]	; (8001798 <HAL_CAN_MspInit+0x15c>)
 80016be:	f00b fb5f 	bl	800cd80 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2103      	movs	r1, #3
 80016c6:	2014      	movs	r0, #20
 80016c8:	f00a fc96 	bl	800bff8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016cc:	2014      	movs	r0, #20
 80016ce:	f00a fcaf 	bl	800c030 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 80016d2:	e056      	b.n	8001782 <HAL_CAN_MspInit+0x146>
	else if (canHandle->Instance == CAN2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_CAN_MspInit+0x160>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d151      	bne.n	8001782 <HAL_CAN_MspInit+0x146>
		__HAL_RCC_CAN3_CLK_ENABLE();
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN2_CLK_ENABLE();
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
		HAL_RCC_CAN1_CLK_ENABLED++;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001716:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_CAN_MspInit+0x154>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10b      	bne.n	8001738 <HAL_CAN_MspInit+0xfc>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	6313      	str	r3, [r2, #48]	; 0x30
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001750:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001762:	2309      	movs	r3, #9
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_CAN_MspInit+0x164>)
 800176e:	f00b fb07 	bl	800cd80 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2103      	movs	r1, #3
 8001776:	2040      	movs	r0, #64	; 0x40
 8001778:	f00a fc3e 	bl	800bff8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800177c:	2040      	movs	r0, #64	; 0x40
 800177e:	f00a fc57 	bl	800c030 <HAL_NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3738      	adds	r7, #56	; 0x38
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40006400 	.word	0x40006400
 8001790:	20000270 	.word	0x20000270
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40006800 	.word	0x40006800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b091      	sub	sp, #68	; 0x44
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	f107 0214 	add.w	r2, r7, #20
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f009 ffdb 	bl	800b772 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10f      	bne.n	80017e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	9303      	str	r3, [sp, #12]
 80017cc:	466c      	mov	r4, sp
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	f000 f938 	bl	8001a54 <ComputeInternalFrame>
	else
	{
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 80017e4:	e00e      	b.n	8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	9303      	str	r3, [sp, #12]
 80017ec:	466c      	mov	r4, sp
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	f000 f806 	bl	8001810 <ComputeEcumasterFrame>
}
 8001804:	bf00      	nop
 8001806:	3734      	adds	r7, #52	; 0x34
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	40006400 	.word	0x40006400

08001810 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001810:	b084      	sub	sp, #16
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	f107 0c20 	add.w	ip, r7, #32
 800181c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (RxHeader.StdId)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001826:	f000 80dc 	beq.w	80019e2 <ComputeEcumasterFrame+0x1d2>
 800182a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800182e:	f0c0 80ec 	bcc.w	8001a0a <ComputeEcumasterFrame+0x1fa>
 8001832:	f240 6205 	movw	r2, #1541	; 0x605
 8001836:	4293      	cmp	r3, r2
 8001838:	f200 80e7 	bhi.w	8001a0a <ComputeEcumasterFrame+0x1fa>
 800183c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001840:	f0c0 80e3 	bcc.w	8001a0a <ComputeEcumasterFrame+0x1fa>
 8001844:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001848:	2b05      	cmp	r3, #5
 800184a:	f200 80de 	bhi.w	8001a0a <ComputeEcumasterFrame+0x1fa>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <ComputeEcumasterFrame+0x44>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	0800186d 	.word	0x0800186d
 8001858:	08001a29 	.word	0x08001a29
 800185c:	080018b1 	.word	0x080018b1
 8001860:	080018f7 	.word	0x080018f7
 8001864:	0800193f 	.word	0x0800193f
 8001868:	08001993 	.word	0x08001993
	{
	case Frame1:
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 800186c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800186e:	f000 f917 	bl	8001aa0 <LittleToBigEndian>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001878:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 800187a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800187c:	789a      	ldrb	r2, [r3, #2]
 800187e:	4b6f      	ldr	r3, [pc, #444]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001880:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 8001882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001884:	78da      	ldrb	r2, [r3, #3]
 8001886:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001888:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 800188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188c:	3304      	adds	r3, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f906 	bl	8001aa0 <LittleToBigEndian>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 800189a:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 800189c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800189e:	3306      	adds	r3, #6
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f8fd 	bl	8001aa0 <LittleToBigEndian>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80018ac:	80da      	strh	r2, [r3, #6]
		break;
 80018ae:	e0be      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>
	case Frame2:
		break;
	case Frame3:
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 80018b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018b2:	f000 f8f5 	bl	8001aa0 <LittleToBigEndian>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80018bc:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 80018be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c0:	78da      	ldrb	r2, [r3, #3]
 80018c2:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80018c4:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4] * 0.0625f;
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	3304      	adds	r3, #4
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001a40 <ComputeEcumasterFrame+0x230>
 80018d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018dc:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80018de:	edc3 7a03 	vstr	s15, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 80018e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e4:	3306      	adds	r3, #6
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f8da 	bl	8001aa0 <LittleToBigEndian>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80018f2:	821a      	strh	r2, [r3, #16]
		break;
 80018f4:	e09b      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>
	case Frame4:
		EcuData.ignAngle = RxData[0];
 80018f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b25a      	sxtb	r2, r3
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80018fe:	749a      	strb	r2, [r3, #18]
		EcuData.ignDwell = RxData[1];
 8001900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001902:	785a      	ldrb	r2, [r3, #1]
 8001904:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001906:	74da      	strb	r2, [r3, #19]
		EcuData.lambda = RxData[2];
 8001908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190a:	789a      	ldrb	r2, [r3, #2]
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 800190e:	751a      	strb	r2, [r3, #20]
		EcuData.lambdaCorrection = RxData[3];
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	78da      	ldrb	r2, [r3, #3]
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001916:	755a      	strb	r2, [r3, #21]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 8001918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191a:	3304      	adds	r3, #4
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f8bf 	bl	8001aa0 <LittleToBigEndian>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001928:	82da      	strh	r2, [r3, #22]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 800192a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192c:	3306      	adds	r3, #6
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f8b6 	bl	8001aa0 <LittleToBigEndian>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 800193a:	831a      	strh	r2, [r3, #24]
		break;
 800193c:	e077      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>
	case Frame5:
		EcuData.gear = RxData[0];
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001944:	769a      	strb	r2, [r3, #26]
		EcuData.ecuTemp = RxData[1];
 8001946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001948:	3301      	adds	r3, #1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b25a      	sxtb	r2, r3
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001950:	76da      	strb	r2, [r3, #27]
		EcuData.batt = LittleToBigEndian(&RxData[2]) * 0.027f;
 8001952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001954:	3302      	adds	r3, #2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f8a2 	bl	8001aa0 <LittleToBigEndian>
 800195c:	4603      	mov	r3, r0
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001966:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001a44 <ComputeEcumasterFrame+0x234>
 800196a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001970:	edc3 7a07 	vstr	s15, [r3, #28]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	3305      	adds	r3, #5
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f891 	bl	8001aa0 <LittleToBigEndian>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001984:	841a      	strh	r2, [r3, #32]
		EcuData.flags1 = RxData[7];
 8001986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001988:	79da      	ldrb	r2, [r3, #7]
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 800198c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8001990:	e04d      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>
	case Frame6:
		EcuData.DBWPosition = RxData[0];
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 8001998:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		EcuData.DBWTrigger = RxData[1];
 800199c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199e:	785a      	ldrb	r2, [r3, #1]
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	3302      	adds	r3, #2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f878 	bl	8001aa0 <LittleToBigEndian>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80019b6:	84da      	strh	r2, [r3, #38]	; 0x26
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 80019b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ba:	3304      	adds	r3, #4
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f86f 	bl	8001aa0 <LittleToBigEndian>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80019c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		EcuData.TCTorqueReduction = RxData[6];
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	799a      	ldrb	r2, [r3, #6]
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80019d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		EcuData.PitLimitTorqueReduction = RxData[7];
 80019d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d8:	79da      	ldrb	r2, [r3, #7]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <ComputeEcumasterFrame+0x22c>)
 80019dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		break;
 80019e0:	e025      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>

	case 768:
		telemetryData.gear = RxData[1];
 80019e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e4:	785a      	ldrb	r2, [r3, #1]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <ComputeEcumasterFrame+0x238>)
 80019e8:	701a      	strb	r2, [r3, #0]
		if (telemetryData.gear == 0)
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <ComputeEcumasterFrame+0x238>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <ComputeEcumasterFrame+0x1ea>
		{
			telemetryData.gear = 1;
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <ComputeEcumasterFrame+0x238>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
			telemetryData.gear = 0;
		}



		break;
 80019f8:	e018      	b.n	8001a2c <ComputeEcumasterFrame+0x21c>
		else if (telemetryData.gear == 1)
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <ComputeEcumasterFrame+0x238>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d114      	bne.n	8001a2c <ComputeEcumasterFrame+0x21c>
			telemetryData.gear = 0;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <ComputeEcumasterFrame+0x238>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		break;
 8001a08:	e010      	b.n	8001a2c <ComputeEcumasterFrame+0x21c>
	default:
		;
// forward frame to internal can
	CAN_TxHeaderTypeDef TxHeader;
		TxHeader.DLC = RxHeader.DLC;
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = RxHeader.IDE;
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	60bb      	str	r3, [r7, #8]
		TxHeader.RTR = RxHeader.RTR;
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	60fb      	str	r3, [r7, #12]
		TxHeader.StdId = RxHeader.StdId;
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	603b      	str	r3, [r7, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, RxData, &TxMailbox);
 8001a1a:	4639      	mov	r1, r7
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <ComputeEcumasterFrame+0x23c>)
 8001a1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <ComputeEcumasterFrame+0x240>)
 8001a22:	f009 fdcb 	bl	800b5bc <HAL_CAN_AddTxMessage>
	}
}
 8001a26:	e002      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>
		break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <ComputeEcumasterFrame+0x21e>
		break;
 8001a2c:	bf00      	nop
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a38:	b004      	add	sp, #16
 8001a3a:	4770      	bx	lr
 8001a3c:	200239c0 	.word	0x200239c0
 8001a40:	3d800000 	.word	0x3d800000
 8001a44:	3cdd2f1b 	.word	0x3cdd2f1b
 8001a48:	200239ec 	.word	0x200239ec
 8001a4c:	20056d88 	.word	0x20056d88
 8001a50:	20056d8c 	.word	0x20056d8c

08001a54 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001a54:	b084      	sub	sp, #16
 8001a56:	b490      	push	{r4, r7}
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	f107 0408 	add.w	r4, r7, #8
 8001a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (RxHeader.StdId == 768)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a68:	d112      	bne.n	8001a90 <ComputeInternalFrame+0x3c>
	{
		telemetryData.gear = RxData[1];
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	785a      	ldrb	r2, [r3, #1]
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <ComputeInternalFrame+0x48>)
 8001a70:	701a      	strb	r2, [r3, #0]
		if (telemetryData.gear == 0)
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <ComputeInternalFrame+0x48>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <ComputeInternalFrame+0x2e>
		{
			telemetryData.gear = 1;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <ComputeInternalFrame+0x48>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		else if (telemetryData.gear == 1)
		{
			telemetryData.gear = 0;
		}
	}
}
 8001a80:	e006      	b.n	8001a90 <ComputeInternalFrame+0x3c>
		else if (telemetryData.gear == 1)
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <ComputeInternalFrame+0x48>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <ComputeInternalFrame+0x3c>
			telemetryData.gear = 0;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <ComputeInternalFrame+0x48>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc90      	pop	{r4, r7}
 8001a96:	b004      	add	sp, #16
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200239ec 	.word	0x200239ec

08001aa0 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	0209      	lsls	r1, r1, #8
 8001aba:	1acb      	subs	r3, r1, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <MX_CRC_Init+0x40>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_CRC_Init+0x3c>)
 8001afa:	f00a fab5 	bl	800c068 <HAL_CRC_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b04:	f000 feec 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20056db4 	.word	0x20056db4
 8001b10:	40023000 	.word	0x40023000

08001b14 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_CRC_MspInit+0x38>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10b      	bne.n	8001b3e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_CRC_MspInit+0x3c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_CRC_MspInit+0x3c>)
 8001b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_CRC_MspInit+0x3c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023000 	.word	0x40023000
 8001b50:	40023800 	.word	0x40023800

08001b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_DMA_Init+0x48>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <MX_DMA_Init+0x48>)
 8001b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <MX_DMA_Init+0x48>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2103      	movs	r1, #3
 8001b76:	200b      	movs	r0, #11
 8001b78:	f00a fa3e 	bl	800bff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b7c:	200b      	movs	r0, #11
 8001b7e:	f00a fa57 	bl	800c030 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2103      	movs	r1, #3
 8001b86:	200f      	movs	r0, #15
 8001b88:	f00a fa36 	bl	800bff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b8c:	200f      	movs	r0, #15
 8001b8e:	f00a fa4f 	bl	800c030 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <MX_DMA2D_Init+0x6c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001be2:	f00a fec5 	bl	800c970 <HAL_DMA2D_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001bec:	f000 fe78 	bl	80028e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_DMA2D_Init+0x68>)
 8001bf4:	f00b f826 	bl	800cc44 <HAL_DMA2D_ConfigLayer>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8001bfe:	f000 fe6f 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20056dd8 	.word	0x20056dd8
 8001c0c:	4002b000 	.word	0x4002b000

08001c10 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_DMA2D_MspInit+0x44>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d113      	bne.n	8001c4a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_DMA2D_MspInit+0x48>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_DMA2D_MspInit+0x48>)
 8001c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_DMA2D_MspInit+0x48>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	205a      	movs	r0, #90	; 0x5a
 8001c40:	f00a f9da 	bl	800bff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c44:	205a      	movs	r0, #90	; 0x5a
 8001c46:	f00a f9f3 	bl	800c030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	4002b000 	.word	0x4002b000
 8001c58:	40023800 	.word	0x40023800

08001c5c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c76:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <MX_FMC_Init+0x148>)
 8001c78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c8e:	2210      	movs	r2, #16
 8001c90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <MX_FMC_Init+0x144>)
 8001c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <MX_FMC_Init+0x144>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <MX_FMC_Init+0x144>)
 8001ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001cae:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <MX_FMC_Init+0x144>)
 8001cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <MX_FMC_Init+0x144>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4830      	ldr	r0, [pc, #192]	; (8001da0 <MX_FMC_Init+0x144>)
 8001cde:	f00d fefb 	bl	800fad8 <HAL_SDRAM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ce8:	f000 fdfa 	bl	80028e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	4926      	ldr	r1, [pc, #152]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d0e:	4824      	ldr	r0, [pc, #144]	; (8001da0 <MX_FMC_Init+0x144>)
 8001d10:	f00d ff16 	bl	800fb40 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f008 fe13 	bl	800a940 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d22:	2210      	movs	r2, #16
 8001d24:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001d32:	f04f 32ff 	mov.w	r2, #4294967295
 8001d36:	491c      	ldr	r1, [pc, #112]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d38:	4819      	ldr	r0, [pc, #100]	; (8001da0 <MX_FMC_Init+0x144>)
 8001d3a:	f00d ff01 	bl	800fb40 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d40:	2203      	movs	r2, #3
 8001d42:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d46:	2210      	movs	r2, #16
 8001d48:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001d56:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5a:	4913      	ldr	r1, [pc, #76]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d5c:	4810      	ldr	r0, [pc, #64]	; (8001da0 <MX_FMC_Init+0x144>)
 8001d5e:	f00d feef 	bl	800fb40 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001d62:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001d66:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d70:	2210      	movs	r2, #16
 8001d72:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d7e:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	4908      	ldr	r1, [pc, #32]	; (8001da8 <MX_FMC_Init+0x14c>)
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <MX_FMC_Init+0x144>)
 8001d88:	f00d feda 	bl	800fb40 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8001d8c:	f240 617c 	movw	r1, #1660	; 0x67c
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <MX_FMC_Init+0x144>)
 8001d92:	f00d ff00 	bl	800fb96 <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20056e30 	.word	0x20056e30
 8001da4:	a0000140 	.word	0xa0000140
 8001da8:	20000278 	.word	0x20000278

08001dac <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_FMC_MspInit+0x100>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d16d      	bne.n	8001ea4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_FMC_MspInit+0x100>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_FMC_MspInit+0x104>)
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <HAL_FMC_MspInit+0x104>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_FMC_MspInit+0x104>)
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001de6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001dea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482c      	ldr	r0, [pc, #176]	; (8001eb4 <HAL_FMC_MspInit+0x108>)
 8001e02:	f00a ffbd 	bl	800cd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e06:	230c      	movs	r3, #12
 8001e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e16:	230c      	movs	r3, #12
 8001e18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4826      	ldr	r0, [pc, #152]	; (8001eb8 <HAL_FMC_MspInit+0x10c>)
 8001e20:	f00a ffae 	bl	800cd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e34:	230c      	movs	r3, #12
 8001e36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481f      	ldr	r0, [pc, #124]	; (8001ebc <HAL_FMC_MspInit+0x110>)
 8001e3e:	f00a ff9f 	bl	800cd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001e42:	f248 1311 	movw	r3, #33041	; 0x8111
 8001e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e54:	230c      	movs	r3, #12
 8001e56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <HAL_FMC_MspInit+0x114>)
 8001e5e:	f00a ff8f 	bl	800cd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e62:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e74:	230c      	movs	r3, #12
 8001e76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <HAL_FMC_MspInit+0x118>)
 8001e7e:	f00a ff7f 	bl	800cd80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e94:	230c      	movs	r3, #12
 8001e96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <HAL_FMC_MspInit+0x11c>)
 8001e9e:	f00a ff6f 	bl	800cd80 <HAL_GPIO_Init>
 8001ea2:	e000      	b.n	8001ea6 <HAL_FMC_MspInit+0xfa>
    return;
 8001ea4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000274 	.word	0x20000274
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40021800 	.word	0x40021800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ed4:	f7ff ff6a 	bl	8001dac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of hardwareTASK */
	hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL,
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <MX_FREERTOS_Init+0x48>)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <MX_FREERTOS_Init+0x4c>)
 8001eea:	f00f fd83 	bl	80119f4 <osThreadNew>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <MX_FREERTOS_Init+0x50>)
 8001ef2:	6013      	str	r3, [r2, #0]
			&hardwareTASK_attributes);

	/* creation of touchGFXTask */
	touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL,
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <MX_FREERTOS_Init+0x54>)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <MX_FREERTOS_Init+0x58>)
 8001efa:	f00f fd7b 	bl	80119f4 <osThreadNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <MX_FREERTOS_Init+0x5c>)
 8001f02:	6013      	str	r3, [r2, #0]
			&touchGFXTask_attributes);

	/* creation of infoLed */
	infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <MX_FREERTOS_Init+0x60>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	480e      	ldr	r0, [pc, #56]	; (8001f44 <MX_FREERTOS_Init+0x64>)
 8001f0a:	f00f fd73 	bl	80119f4 <osThreadNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <MX_FREERTOS_Init+0x68>)
 8001f12:	6013      	str	r3, [r2, #0]

	/* creation of displayBackligh */
	displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL,
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <MX_FREERTOS_Init+0x6c>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <MX_FREERTOS_Init+0x70>)
 8001f1a:	f00f fd6b 	bl	80119f4 <osThreadNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <MX_FREERTOS_Init+0x74>)
 8001f22:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	0802b938 	.word	0x0802b938
 8001f2c:	08001f59 	.word	0x08001f59
 8001f30:	20056e68 	.word	0x20056e68
 8001f34:	0802b95c 	.word	0x0802b95c
 8001f38:	08002025 	.word	0x08002025
 8001f3c:	20056e64 	.word	0x20056e64
 8001f40:	0802b980 	.word	0x0802b980
 8001f44:	08002039 	.word	0x08002039
 8001f48:	20056e6c 	.word	0x20056e6c
 8001f4c:	0802b9a4 	.word	0x0802b9a4
 8001f50:	08002055 	.word	0x08002055
 8001f54:	20056e70 	.word	0x20056e70

08001f58 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHardwareTask */
	HAL_CAN_Start(&hcan2);
 8001f60:	4828      	ldr	r0, [pc, #160]	; (8002004 <StartHardwareTask+0xac>)
 8001f62:	f009 fae7 	bl	800b534 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 8001f66:	4828      	ldr	r0, [pc, #160]	; (8002008 <StartHardwareTask+0xb0>)
 8001f68:	f009 fae4 	bl	800b534 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4825      	ldr	r0, [pc, #148]	; (8002004 <StartHardwareTask+0xac>)
 8001f70:	f009 fd11 	bl	800b996 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f74:	2102      	movs	r1, #2
 8001f76:	4824      	ldr	r0, [pc, #144]	; (8002008 <StartHardwareTask+0xb0>)
 8001f78:	f009 fd0d 	bl	800b996 <HAL_CAN_ActivateNotification>

	WS2812_Init();
 8001f7c:	f7fe fd34 	bl	80009e8 <WS2812_Init>
	ComputeOptimalPoints();
 8001f80:	f7fe ff38 	bl	8000df4 <ComputeOptimalPoints>

	osDelay(150);
 8001f84:	2096      	movs	r0, #150	; 0x96
 8001f86:	f00f fe0d 	bl	8011ba4 <osDelay>
	uint8_t ledMode = displaySetup.ledBarMode;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <StartHardwareTask+0xb4>)
 8001f8c:	785b      	ldrb	r3, [r3, #1]
 8001f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* Infinite loop */
	for (;;)
	{

		if (telemetryData.gear == 0)
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <StartHardwareTask+0xb8>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <StartHardwareTask+0x56>
		{
			HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	481c      	ldr	r0, [pc, #112]	; (8002014 <StartHardwareTask+0xbc>)
 8001fa2:	f00b f9a5 	bl	800d2f0 <HAL_GPIO_WritePin>
			ledMode = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fac:	e009      	b.n	8001fc2 <StartHardwareTask+0x6a>
		}
		else
		{
			HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <StartHardwareTask+0xbc>)
 8001fb6:	f00b f99b 	bl	800d2f0 <HAL_GPIO_WritePin>
			ledMode = displaySetup.ledBarMode;
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <StartHardwareTask+0xb4>)
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		updateLeds(EcuData.rpm, ledMode);
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <StartHardwareTask+0xc0>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7fe fe50 	bl	8000c74 <updateLeds>

		osDelay(100);
 8001fd4:	2064      	movs	r0, #100	; 0x64
 8001fd6:	f00f fde5 	bl	8011ba4 <osDelay>
		uint8_t RxData[2] =
 8001fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fde:	84bb      	strh	r3, [r7, #36]	; 0x24
		{ 0xFF, 0xFF };
		CAN_TxHeaderTypeDef TxHeader;
		TxHeader.DLC = 2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61fb      	str	r3, [r7, #28]
		TxHeader.IDE = CAN_ID_STD;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
		TxHeader.RTR = CAN_RTR_DATA;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = 520;
 8001fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001ff0:	60fb      	str	r3, [r7, #12]

		HAL_CAN_AddTxMessage(INTERNAL_CAN, &TxHeader, RxData, &TxMailbox);
 8001ff2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ff6:	f107 010c 	add.w	r1, r7, #12
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <StartHardwareTask+0xc4>)
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <StartHardwareTask+0xc8>)
 8001ffe:	f009 fadd 	bl	800b5bc <HAL_CAN_AddTxMessage>
	{
 8002002:	e7c6      	b.n	8001f92 <StartHardwareTask+0x3a>
 8002004:	20056d60 	.word	0x20056d60
 8002008:	20056d8c 	.word	0x20056d8c
 800200c:	20000004 	.word	0x20000004
 8002010:	200239ec 	.word	0x200239ec
 8002014:	40020800 	.word	0x40020800
 8002018:	200239c0 	.word	0x200239c0
 800201c:	20056d88 	.word	0x20056d88
 8002020:	40006400 	.word	0x40006400

08002024 <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 800202c:	f001 f901 	bl	8003232 <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f00f fdb7 	bl	8011ba4 <osDelay>
 8002036:	e7fb      	b.n	8002030 <StartTouchGFXTask+0xc>

08002038 <StartInfoLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInfoLed */
	/* Infinite loop */
	for (;;)
	{
		osDelay(250);
 8002040:	20fa      	movs	r0, #250	; 0xfa
 8002042:	f00f fdaf 	bl	8011ba4 <osDelay>
		HAL_GPIO_TogglePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin);
 8002046:	2104      	movs	r1, #4
 8002048:	4801      	ldr	r0, [pc, #4]	; (8002050 <StartInfoLed+0x18>)
 800204a:	f00b f96a 	bl	800d322 <HAL_GPIO_TogglePin>
		osDelay(250);
 800204e:	e7f7      	b.n	8002040 <StartInfoLed+0x8>
 8002050:	40021000 	.word	0x40021000

08002054 <StartDisplayBacklight>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	ed2d 8b02 	vpush	{d8}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDisplayBacklight */

	// current set point in mA
	uint8_t setPoint = displaySetup.brightness * 1.5f;
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <StartDisplayBacklight+0x1a0>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002078:	edc7 7a00 	vstr	s15, [r7]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	753b      	strb	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002080:	2100      	movs	r1, #0
 8002082:	485d      	ldr	r0, [pc, #372]	; (80021f8 <StartDisplayBacklight+0x1a4>)
 8002084:	f00d fed8 	bl	800fe38 <HAL_TIM_PWM_Start>
	uint8_t PWM_Pulse = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM_PulseChange = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	75bb      	strb	r3, [r7, #22]
	float voltage = 0.0f;
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
	float current = 0.0f;
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
	uint8_t delay = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	757b      	strb	r3, [r7, #21]
	osDelay(250);
 80020a0:	20fa      	movs	r0, #250	; 0xfa
 80020a2:	f00f fd7f 	bl	8011ba4 <osDelay>
	/* Infinite loop */
	for (;;)
	{
		HAL_ADC_Start(&hadc1);
 80020a6:	4855      	ldr	r0, [pc, #340]	; (80021fc <StartDisplayBacklight+0x1a8>)
 80020a8:	f008 fcb2 	bl	800aa10 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80020ac:	210a      	movs	r1, #10
 80020ae:	4853      	ldr	r0, [pc, #332]	; (80021fc <StartDisplayBacklight+0x1a8>)
 80020b0:	f008 fd7c 	bl	800abac <HAL_ADC_PollForConversion>

		osDelay(100 - delay);
 80020b4:	7d7b      	ldrb	r3, [r7, #21]
 80020b6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00f fd72 	bl	8011ba4 <osDelay>
		voltage = HAL_ADC_GetValue(&hadc1) * 3.3f / 4095.0f;
 80020c0:	484e      	ldr	r0, [pc, #312]	; (80021fc <StartDisplayBacklight+0x1a8>)
 80020c2:	f008 fdfe 	bl	800acc2 <HAL_ADC_GetValue>
 80020c6:	ee07 0a90 	vmov	s15, r0
 80020ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002200 <StartDisplayBacklight+0x1ac>
 80020d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002204 <StartDisplayBacklight+0x1b0>
 80020da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020de:	edc7 7a04 	vstr	s15, [r7, #16]
		current = voltage / 5.1f * 1000.0f;
 80020e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80020e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002208 <StartDisplayBacklight+0x1b4>
 80020ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800220c <StartDisplayBacklight+0x1b8>
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f6:	edc7 7a03 	vstr	s15, [r7, #12]

		PWM_PulseChange = (int8_t) round((setPoint - current) / 10.0f);
 80020fa:	7d3b      	ldrb	r3, [r7, #20]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002104:	edd7 7a03 	vldr	s15, [r7, #12]
 8002108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800210c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002114:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002118:	eeb0 0b47 	vmov.f64	d0, d7
 800211c:	f024 f97a 	bl	8026414 <round>
 8002120:	eeb0 7b40 	vmov.f64	d7, d0
 8002124:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002128:	edc7 7a00 	vstr	s15, [r7]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b25b      	sxtb	r3, r3
 8002130:	75bb      	strb	r3, [r7, #22]
		delay = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	757b      	strb	r3, [r7, #21]
		if (PWM_PulseChange > 10)
 8002136:	7dbb      	ldrb	r3, [r7, #22]
 8002138:	2b0a      	cmp	r3, #10
 800213a:	d951      	bls.n	80021e0 <StartDisplayBacklight+0x18c>
		{
			while (PWM_PulseChange > 0)
 800213c:	e04c      	b.n	80021d8 <StartDisplayBacklight+0x184>
			{
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002148:	7dbb      	ldrb	r3, [r7, #22]
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002152:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002156:	eeb0 0b47 	vmov.f64	d0, d7
 800215a:	f024 f915 	bl	8026388 <fmin>
 800215e:	eeb0 6b40 	vmov.f64	d6, d0
						215 - PWM_Pulse);
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002170:	eeb0 1b47 	vmov.f64	d1, d7
 8002174:	eeb0 0b46 	vmov.f64	d0, d6
 8002178:	f024 f906 	bl	8026388 <fmin>
 800217c:	eeb0 7b40 	vmov.f64	d7, d0
 8002180:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002184:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002188:	edc7 7a00 	vstr	s15, [r7]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	75fb      	strb	r3, [r7, #23]
				PWM_PulseChange -= fmin(PWM_PulseChange, PWM_CHANGE);
 8002190:	7dbb      	ldrb	r3, [r7, #22]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800219a:	7dbb      	ldrb	r3, [r7, #22]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021a4:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80021a8:	eeb0 0b47 	vmov.f64	d0, d7
 80021ac:	f024 f8ec 	bl	8026388 <fmin>
 80021b0:	eeb0 7b40 	vmov.f64	d7, d0
 80021b4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80021b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021bc:	edc7 7a00 	vstr	s15, [r7]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	75bb      	strb	r3, [r7, #22]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <StartDisplayBacklight+0x1a4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	7dfa      	ldrb	r2, [r7, #23]
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
				osDelay(5);
 80021cc:	2005      	movs	r0, #5
 80021ce:	f00f fce9 	bl	8011ba4 <osDelay>
				delay += 5;
 80021d2:	7d7b      	ldrb	r3, [r7, #21]
 80021d4:	3305      	adds	r3, #5
 80021d6:	757b      	strb	r3, [r7, #21]
			while (PWM_PulseChange > 0)
 80021d8:	7dbb      	ldrb	r3, [r7, #22]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1af      	bne.n	800213e <StartDisplayBacklight+0xea>
 80021de:	e762      	b.n	80020a6 <StartDisplayBacklight+0x52>
				delay += 5;
			}
		}
		else
		{
			PWM_Pulse += PWM_PulseChange;
 80021e0:	7dfa      	ldrb	r2, [r7, #23]
 80021e2:	7dbb      	ldrb	r3, [r7, #22]
 80021e4:	4413      	add	r3, r2
 80021e6:	75fb      	strb	r3, [r7, #23]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <StartDisplayBacklight+0x1a4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	7dfa      	ldrb	r2, [r7, #23]
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_ADC_Start(&hadc1);
 80021f0:	e759      	b.n	80020a6 <StartDisplayBacklight+0x52>
 80021f2:	bf00      	nop
 80021f4:	20000004 	.word	0x20000004
 80021f8:	20056fb4 	.word	0x20056fb4
 80021fc:	20056d18 	.word	0x20056d18
 8002200:	40533333 	.word	0x40533333
 8002204:	457ff000 	.word	0x457ff000
 8002208:	40a33333 	.word	0x40a33333
 800220c:	447a0000 	.word	0x447a0000

08002210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <MX_GPIO_Init+0x130>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a45      	ldr	r2, [pc, #276]	; (8002340 <MX_GPIO_Init+0x130>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <MX_GPIO_Init+0x130>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800223e:	4b40      	ldr	r3, [pc, #256]	; (8002340 <MX_GPIO_Init+0x130>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a3f      	ldr	r2, [pc, #252]	; (8002340 <MX_GPIO_Init+0x130>)
 8002244:	f043 0320 	orr.w	r3, r3, #32
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <MX_GPIO_Init+0x130>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <MX_GPIO_Init+0x130>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a39      	ldr	r2, [pc, #228]	; (8002340 <MX_GPIO_Init+0x130>)
 800225c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <MX_GPIO_Init+0x130>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <MX_GPIO_Init+0x130>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a33      	ldr	r2, [pc, #204]	; (8002340 <MX_GPIO_Init+0x130>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <MX_GPIO_Init+0x130>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <MX_GPIO_Init+0x130>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <MX_GPIO_Init+0x130>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <MX_GPIO_Init+0x130>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b28      	ldr	r3, [pc, #160]	; (8002340 <MX_GPIO_Init+0x130>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a27      	ldr	r2, [pc, #156]	; (8002340 <MX_GPIO_Init+0x130>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <MX_GPIO_Init+0x130>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <MX_GPIO_Init+0x130>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <MX_GPIO_Init+0x130>)
 80022bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_GPIO_Init+0x130>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_GPIO_Init+0x130>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <MX_GPIO_Init+0x130>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_GPIO_Init+0x130>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2104      	movs	r1, #4
 80022ea:	4816      	ldr	r0, [pc, #88]	; (8002344 <MX_GPIO_Init+0x134>)
 80022ec:	f00b f800 	bl	800d2f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NEUTRAL_LED_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80022f6:	4814      	ldr	r0, [pc, #80]	; (8002348 <MX_GPIO_Init+0x138>)
 80022f8:	f00a fffa 	bl	800d2f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 80022fc:	2304      	movs	r3, #4
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	480c      	ldr	r0, [pc, #48]	; (8002344 <MX_GPIO_Init+0x134>)
 8002314:	f00a fd34 	bl	800cd80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NEUTRAL_LED_Pin|ESP_PD_Pin;
 8002318:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_GPIO_Init+0x138>)
 8002332:	f00a fd25 	bl	800cd80 <HAL_GPIO_Init>

}
 8002336:	bf00      	nop
 8002338:	3738      	adds	r7, #56	; 0x38
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40021000 	.word	0x40021000
 8002348:	40020800 	.word	0x40020800

0800234c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2234      	movs	r2, #52	; 0x34
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f024 f935 	bl	80265c8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800235e:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002360:	4a3a      	ldr	r2, [pc, #232]	; (800244c <MX_LTDC_Init+0x100>)
 8002362:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002364:	4b38      	ldr	r3, [pc, #224]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002366:	2200      	movs	r2, #0
 8002368:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <MX_LTDC_Init+0xfc>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 800237c:	4b32      	ldr	r3, [pc, #200]	; (8002448 <MX_LTDC_Init+0xfc>)
 800237e:	2203      	movs	r2, #3
 8002380:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002384:	2227      	movs	r2, #39	; 0x27
 8002386:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <MX_LTDC_Init+0xfc>)
 800238a:	220b      	movs	r2, #11
 800238c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002390:	222f      	movs	r2, #47	; 0x2f
 8002392:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8002394:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002396:	f240 322b 	movw	r2, #811	; 0x32b
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <MX_LTDC_Init+0xfc>)
 800239e:	f240 220f 	movw	r2, #527	; 0x20f
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <MX_LTDC_Init+0xfc>)
 80023a6:	f240 3233 	movw	r2, #819	; 0x333
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <MX_LTDC_Init+0xfc>)
 80023ae:	f240 2217 	movw	r2, #535	; 0x217
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <MX_LTDC_Init+0xfc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <MX_LTDC_Init+0xfc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <MX_LTDC_Init+0xfc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80023cc:	481e      	ldr	r0, [pc, #120]	; (8002448 <MX_LTDC_Init+0xfc>)
 80023ce:	f00a ffc3 	bl	800d358 <HAL_LTDC_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80023d8:	f000 fa82 	bl	80028e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80023e0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80023e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80023ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023ee:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80023f0:	2301      	movs	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80023f4:	23ff      	movs	r3, #255	; 0xff
 80023f6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80023fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002400:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002402:	2305      	movs	r3, #5
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002406:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 800240c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8002412:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2200      	movs	r2, #0
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_LTDC_Init+0xfc>)
 8002432:	f00b f919 	bl	800d668 <HAL_LTDC_ConfigLayer>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800243c:	f000 fa50 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	3738      	adds	r7, #56	; 0x38
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20056e74 	.word	0x20056e74
 800244c:	40016800 	.word	0x40016800

08002450 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0b4      	sub	sp, #208	; 0xd0
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246c:	2290      	movs	r2, #144	; 0x90
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f024 f8a9 	bl	80265c8 <memset>
  if(ltdcHandle->Instance==LTDC)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4aa6      	ldr	r2, [pc, #664]	; (8002714 <HAL_LTDC_MspInit+0x2c4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	f040 8144 	bne.w	800270a <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002482:	2308      	movs	r3, #8
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 8002486:	f240 1317 	movw	r3, #279	; 0x117
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 800248c:	2303      	movs	r3, #3
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002490:	2302      	movs	r3, #2
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002498:	2301      	movs	r3, #1
 800249a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800249c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00c feee 	bl	800f288 <HAL_RCCEx_PeriphCLKConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80024b2:	f000 fa15 	bl	80028e0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024b6:	4b98      	ldr	r3, [pc, #608]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a97      	ldr	r2, [pc, #604]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b95      	ldr	r3, [pc, #596]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a91      	ldr	r2, [pc, #580]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024d4:	f043 0310 	orr.w	r3, r3, #16
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a8b      	ldr	r2, [pc, #556]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b89      	ldr	r3, [pc, #548]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	4b86      	ldr	r3, [pc, #536]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a85      	ldr	r2, [pc, #532]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b83      	ldr	r3, [pc, #524]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b80      	ldr	r3, [pc, #512]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a7f      	ldr	r2, [pc, #508]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b7a      	ldr	r3, [pc, #488]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a79      	ldr	r2, [pc, #484]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002546:	4b74      	ldr	r3, [pc, #464]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a73      	ldr	r2, [pc, #460]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 800254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b71      	ldr	r3, [pc, #452]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b6b      	ldr	r3, [pc, #428]	; (8002718 <HAL_LTDC_MspInit+0x2c8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002576:	2370      	movs	r3, #112	; 0x70
 8002578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800258e:	230e      	movs	r3, #14
 8002590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002594:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002598:	4619      	mov	r1, r3
 800259a:	4860      	ldr	r0, [pc, #384]	; (800271c <HAL_LTDC_MspInit+0x2cc>)
 800259c:	f00a fbf0 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025ba:	230e      	movs	r3, #14
 80025bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025c4:	4619      	mov	r1, r3
 80025c6:	4856      	ldr	r0, [pc, #344]	; (8002720 <HAL_LTDC_MspInit+0x2d0>)
 80025c8:	f00a fbda 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80025cc:	23c1      	movs	r3, #193	; 0xc1
 80025ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025e4:	230e      	movs	r3, #14
 80025e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025ee:	4619      	mov	r1, r3
 80025f0:	484c      	ldr	r0, [pc, #304]	; (8002724 <HAL_LTDC_MspInit+0x2d4>)
 80025f2:	f00a fbc5 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80025f6:	f240 437e 	movw	r3, #1150	; 0x47e
 80025fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002610:	230e      	movs	r3, #14
 8002612:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800261a:	4619      	mov	r1, r3
 800261c:	4842      	ldr	r0, [pc, #264]	; (8002728 <HAL_LTDC_MspInit+0x2d8>)
 800261e:	f00a fbaf 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002622:	2303      	movs	r3, #3
 8002624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800263a:	2309      	movs	r3, #9
 800263c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002644:	4619      	mov	r1, r3
 8002646:	4839      	ldr	r0, [pc, #228]	; (800272c <HAL_LTDC_MspInit+0x2dc>)
 8002648:	f00a fb9a 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800264c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002666:	230e      	movs	r3, #14
 8002668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002670:	4619      	mov	r1, r3
 8002672:	482e      	ldr	r0, [pc, #184]	; (800272c <HAL_LTDC_MspInit+0x2dc>)
 8002674:	f00a fb84 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8002678:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 800267c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002692:	230e      	movs	r3, #14
 8002694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002698:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800269c:	4619      	mov	r1, r3
 800269e:	4824      	ldr	r0, [pc, #144]	; (8002730 <HAL_LTDC_MspInit+0x2e0>)
 80026a0:	f00a fb6e 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80026a4:	2348      	movs	r3, #72	; 0x48
 80026a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026bc:	230e      	movs	r3, #14
 80026be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026c6:	4619      	mov	r1, r3
 80026c8:	481a      	ldr	r0, [pc, #104]	; (8002734 <HAL_LTDC_MspInit+0x2e4>)
 80026ca:	f00a fb59 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80026ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026e8:	2309      	movs	r3, #9
 80026ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026f2:	4619      	mov	r1, r3
 80026f4:	480e      	ldr	r0, [pc, #56]	; (8002730 <HAL_LTDC_MspInit+0x2e0>)
 80026f6:	f00a fb43 	bl	800cd80 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2103      	movs	r1, #3
 80026fe:	2058      	movs	r0, #88	; 0x58
 8002700:	f009 fc7a 	bl	800bff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002704:	2058      	movs	r0, #88	; 0x58
 8002706:	f009 fc93 	bl	800c030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800270a:	bf00      	nop
 800270c:	37d0      	adds	r7, #208	; 0xd0
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40016800 	.word	0x40016800
 8002718:	40023800 	.word	0x40023800
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020000 	.word	0x40020000
 800272c:	40020400 	.word	0x40020400
 8002730:	40021800 	.word	0x40021800
 8002734:	40020c00 	.word	0x40020c00

08002738 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800273c:	f3bf 8f4f 	dsb	sy
}
 8002740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002742:	f3bf 8f6f 	isb	sy
}
 8002746:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <SCB_EnableICache+0x48>)
 800274a:	2200      	movs	r2, #0
 800274c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002750:	f3bf 8f4f 	dsb	sy
}
 8002754:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002756:	f3bf 8f6f 	isb	sy
}
 800275a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <SCB_EnableICache+0x48>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	4a07      	ldr	r2, [pc, #28]	; (8002780 <SCB_EnableICache+0x48>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002766:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002768:	f3bf 8f4f 	dsb	sy
}
 800276c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800276e:	f3bf 8f6f 	isb	sy
}
 8002772:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002788:	f7ff ffd6 	bl	8002738 <SCB_EnableICache>
 // SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800278c:	f008 f8aa 	bl	800a8e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002790:	f000 f824 	bl	80027dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002794:	f7ff fd3c 	bl	8002210 <MX_GPIO_Init>
  MX_CRC_Init();
 8002798:	f7ff f99a 	bl	8001ad0 <MX_CRC_Init>
  MX_FMC_Init();
 800279c:	f7ff fa5e 	bl	8001c5c <MX_FMC_Init>
  MX_QUADSPI_Init();
 80027a0:	f000 f8a4 	bl	80028ec <MX_QUADSPI_Init>
  MX_LTDC_Init();
 80027a4:	f7ff fdd2 	bl	800234c <MX_LTDC_Init>
  MX_DMA2D_Init();
 80027a8:	f7ff f9fa 	bl	8001ba0 <MX_DMA2D_Init>
  MX_CAN2_Init();
 80027ac:	f7fe fef2 	bl	8001594 <MX_CAN2_Init>
  MX_CAN1_Init();
 80027b0:	f7fe fe9e 	bl	80014f0 <MX_CAN1_Init>
  MX_DMA_Init();
 80027b4:	f7ff f9ce 	bl	8001b54 <MX_DMA_Init>
  MX_TIM4_Init();
 80027b8:	f000 fb98 	bl	8002eec <MX_TIM4_Init>
  MX_TIM3_Init();
 80027bc:	f000 fb20 	bl	8002e00 <MX_TIM3_Init>
  MX_ADC1_Init();
 80027c0:	f7fe fc38 	bl	8001034 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 80027c4:	f000 fd2f 	bl	8003226 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 80027c8:	f7fe fcc6 	bl	8001158 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80027cc:	f00f f8a8 	bl	8011920 <osKernelInitialize>
  MX_FREERTOS_Init();
 80027d0:	f7ff fb86 	bl	8001ee0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80027d4:	f00f f8d8 	bl	8011988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <main+0x54>
	...

080027dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b094      	sub	sp, #80	; 0x50
 80027e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	2234      	movs	r2, #52	; 0x34
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f023 feec 	bl	80265c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <SystemClock_Config+0xd8>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a2b      	ldr	r2, [pc, #172]	; (80028b4 <SystemClock_Config+0xd8>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <SystemClock_Config+0xd8>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <SystemClock_Config+0xdc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <SystemClock_Config+0xdc>)
 800281e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <SystemClock_Config+0xdc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002830:	2301      	movs	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002838:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283a:	2302      	movs	r3, #2
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800283e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002844:	2319      	movs	r3, #25
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002848:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800284c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800284e:	2302      	movs	r3, #2
 8002850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002852:	2302      	movs	r3, #2
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002856:	2302      	movs	r3, #2
 8002858:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	4618      	mov	r0, r3
 8002860:	f00c f870 	bl	800e944 <HAL_RCC_OscConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800286a:	f000 f839 	bl	80028e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800286e:	f00b f90b 	bl	800da88 <HAL_PWREx_EnableOverDrive>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002878:	f000 f832 	bl	80028e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287c:	230f      	movs	r3, #15
 800287e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002880:	2302      	movs	r3, #2
 8002882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800288c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800288e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002892:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	2107      	movs	r1, #7
 800289a:	4618      	mov	r0, r3
 800289c:	f00c fb00 	bl	800eea0 <HAL_RCC_ClockConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80028a6:	f000 f81b 	bl	80028e0 <Error_Handler>
  }
}
 80028aa:	bf00      	nop
 80028ac:	3750      	adds	r7, #80	; 0x50
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000

080028bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ce:	f008 f817 	bl	800a900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40001000 	.word	0x40001000

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028e4:	b672      	cpsid	i
}
 80028e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <Error_Handler+0x8>
	...

080028ec <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_QUADSPI_Init+0x50>)
 80028f2:	4a13      	ldr	r2, [pc, #76]	; (8002940 <MX_QUADSPI_Init+0x54>)
 80028f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_QUADSPI_Init+0x50>)
 80028f8:	2203      	movs	r2, #3
 80028fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_QUADSPI_Init+0x50>)
 80028fe:	2201      	movs	r2, #1
 8002900:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002904:	2210      	movs	r2, #16
 8002906:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_QUADSPI_Init+0x50>)
 800290a:	2217      	movs	r2, #23
 800290c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002910:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002914:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_QUADSPI_Init+0x50>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <MX_QUADSPI_Init+0x50>)
 800292a:	f00b f8fd 	bl	800db28 <HAL_QSPI_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002934:	f7ff ffd4 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20056f1c 	.word	0x20056f1c
 8002940:	a0001000 	.word	0xa0001000

08002944 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a39      	ldr	r2, [pc, #228]	; (8002a48 <HAL_QSPI_MspInit+0x104>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d16c      	bne.n	8002a40 <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	6393      	str	r3, [r2, #56]	; 0x38
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a32      	ldr	r2, [pc, #200]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 8002984:	f043 0320 	orr.w	r3, r3, #32
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_QSPI_MspInit+0x108>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029ae:	23c0      	movs	r3, #192	; 0xc0
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029be:	2309      	movs	r3, #9
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4821      	ldr	r0, [pc, #132]	; (8002a50 <HAL_QSPI_MspInit+0x10c>)
 80029ca:	f00a f9d9 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029e0:	230a      	movs	r3, #10
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	4819      	ldr	r0, [pc, #100]	; (8002a50 <HAL_QSPI_MspInit+0x10c>)
 80029ec:	f00a f9c8 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029f0:	2304      	movs	r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a00:	2309      	movs	r3, #9
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4812      	ldr	r0, [pc, #72]	; (8002a54 <HAL_QSPI_MspInit+0x110>)
 8002a0c:	f00a f9b8 	bl	800cd80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a10:	2340      	movs	r3, #64	; 0x40
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a20:	230a      	movs	r3, #10
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480a      	ldr	r0, [pc, #40]	; (8002a54 <HAL_QSPI_MspInit+0x110>)
 8002a2c:	f00a f9a8 	bl	800cd80 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2103      	movs	r1, #3
 8002a34:	205c      	movs	r0, #92	; 0x5c
 8002a36:	f009 fadf 	bl	800bff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002a3a:	205c      	movs	r0, #92	; 0x5c
 8002a3c:	f009 faf8 	bl	800c030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002a40:	bf00      	nop
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	a0001000 	.word	0xa0001000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_QSPI_MspDeInit+0x40>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_QSPI_MspDeInit+0x44>)
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_QSPI_MspDeInit+0x44>)
 8002a70:	f023 0302 	bic.w	r3, r3, #2
 8002a74:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002a76:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002a7a:	4809      	ldr	r0, [pc, #36]	; (8002aa0 <HAL_QSPI_MspDeInit+0x48>)
 8002a7c:	f00a fb2c 	bl	800d0d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002a80:	2144      	movs	r1, #68	; 0x44
 8002a82:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <HAL_QSPI_MspDeInit+0x4c>)
 8002a84:	f00a fb28 	bl	800d0d8 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002a88:	205c      	movs	r0, #92	; 0x5c
 8002a8a:	f009 fadf 	bl	800c04c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	a0001000 	.word	0xa0001000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40020400 	.word	0x40020400

08002aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_MspInit+0x4c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_MspInit+0x4c>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_MspInit+0x4c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <HAL_MspInit+0x4c>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_MspInit+0x4c>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	210f      	movs	r1, #15
 8002ae2:	f06f 0001 	mvn.w	r0, #1
 8002ae6:	f009 fa87 	bl	800bff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	2036      	movs	r0, #54	; 0x36
 8002b0e:	f009 fa73 	bl	800bff8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b12:	2036      	movs	r0, #54	; 0x36
 8002b14:	f009 fa8c 	bl	800c030 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_InitTick+0xa0>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_InitTick+0xa0>)
 8002b1e:	f043 0310 	orr.w	r3, r3, #16
 8002b22:	6413      	str	r3, [r2, #64]	; 0x40
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_InitTick+0xa0>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b30:	f107 0210 	add.w	r2, r7, #16
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00c fb72 	bl	800f224 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b40:	f00c fb5c 	bl	800f1fc <HAL_RCC_GetPCLK1Freq>
 8002b44:	4603      	mov	r3, r0
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9b      	lsrs	r3, r3, #18
 8002b54:	3b01      	subs	r3, #1
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_InitTick+0xac>)
 8002b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b78:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b7a:	f00d f82c 	bl	800fbd6 <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b84:	4806      	ldr	r0, [pc, #24]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b86:	f00d f87d 	bl	800fc84 <HAL_TIM_Base_Start_IT>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	e000      	b.n	8002b90 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3730      	adds	r7, #48	; 0x30
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	431bde83 	.word	0x431bde83
 8002ba0:	20056f68 	.word	0x20056f68
 8002ba4:	40001000 	.word	0x40001000

08002ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <NMI_Handler+0x4>

08002bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bbe:	e7fe      	b.n	8002bbe <BusFault_Handler+0x4>

08002bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <UsageFault_Handler+0x4>

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Stream0_IRQHandler+0x10>)
 8002bda:	f009 fc5f 	bl	800c49c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200570ac 	.word	0x200570ac

08002be8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA1_Stream4_IRQHandler+0x10>)
 8002bee:	f009 fc55 	bl	800c49c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2005704c 	.word	0x2005704c

08002bfc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <CAN1_RX0_IRQHandler+0x10>)
 8002c02:	f008 feee 	bl	800b9e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20056d8c 	.word	0x20056d8c

08002c10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <TIM6_DAC_IRQHandler+0x10>)
 8002c16:	f00d fcef 	bl	80105f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20056f68 	.word	0x20056f68

08002c24 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <CAN2_RX0_IRQHandler+0x10>)
 8002c2a:	f008 feda 	bl	800b9e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20056d60 	.word	0x20056d60

08002c38 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <LTDC_IRQHandler+0x10>)
 8002c3e:	f00a fc5b 	bl	800d4f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20056e74 	.word	0x20056e74

08002c4c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <DMA2D_IRQHandler+0x10>)
 8002c52:	f009 fee7 	bl	800ca24 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20056dd8 	.word	0x20056dd8

08002c60 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <QUADSPI_IRQHandler+0x10>)
 8002c66:	f00a ffff 	bl	800dc68 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20056f1c 	.word	0x20056f1c

08002c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
	return 1;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_kill>:

int _kill(int pid, int sig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c8e:	f023 fc41 	bl	8026514 <__errno>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2216      	movs	r2, #22
 8002c96:	601a      	str	r2, [r3, #0]
	return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_exit>:

void _exit (int status)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ffe7 	bl	8002c84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cb6:	e7fe      	b.n	8002cb6 <_exit+0x12>

08002cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e00a      	b.n	8002ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cca:	f3af 8000 	nop.w
 8002cce:	4601      	mov	r1, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	60ba      	str	r2, [r7, #8]
 8002cd6:	b2ca      	uxtb	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dbf0      	blt.n	8002cca <_read+0x12>
	}

return len;
 8002ce8:	687b      	ldr	r3, [r7, #4]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e009      	b.n	8002d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf1      	blt.n	8002d04 <_write+0x12>
	}
	return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_close>:

int _close(int file)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	605a      	str	r2, [r3, #4]
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_isatty>:

int _isatty(int file)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f023 fba6 	bl	8026514 <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20080000 	.word	0x20080000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	20000288 	.word	0x20000288
 8002dfc:	20057160 	.word	0x20057160

08002e00 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	; 0x38
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e20:	463b      	mov	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	615a      	str	r2, [r3, #20]
 8002e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e32:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e34:	4a2c      	ldr	r2, [pc, #176]	; (8002ee8 <MX_TIM3_Init+0xe8>)
 8002e36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e46:	2286      	movs	r2, #134	; 0x86
 8002e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e58:	f00c febd 	bl	800fbd6 <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e62:	f7ff fd3d 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e70:	4619      	mov	r1, r3
 8002e72:	481c      	ldr	r0, [pc, #112]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e74:	f00d fdf0 	bl	8010a58 <HAL_TIM_ConfigClockSource>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e7e:	f7ff fd2f 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e82:	4818      	ldr	r0, [pc, #96]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002e84:	f00c ff76 	bl	800fd74 <HAL_TIM_PWM_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e8e:	f7ff fd27 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e9a:	f107 031c 	add.w	r3, r7, #28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4810      	ldr	r0, [pc, #64]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002ea2:	f00e fb61 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002eac:	f7ff fd18 	bl	80028e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eb0:	2360      	movs	r3, #96	; 0x60
 8002eb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002ec8:	f00d fcb6 	bl	8010838 <HAL_TIM_PWM_ConfigChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002ed2:	f7ff fd05 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ed6:	4803      	ldr	r0, [pc, #12]	; (8002ee4 <MX_TIM3_Init+0xe4>)
 8002ed8:	f000 f91e 	bl	8003118 <HAL_TIM_MspPostInit>

}
 8002edc:	bf00      	nop
 8002ede:	3738      	adds	r7, #56	; 0x38
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20057000 	.word	0x20057000
 8002ee8:	40000400 	.word	0x40000400

08002eec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <MX_TIM4_Init+0xe8>)
 8002f22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f32:	22d7      	movs	r2, #215	; 0xd7
 8002f34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f42:	4823      	ldr	r0, [pc, #140]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f44:	f00c fe47 	bl	800fbd6 <HAL_TIM_Base_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002f4e:	f7ff fcc7 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	481c      	ldr	r0, [pc, #112]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f60:	f00d fd7a 	bl	8010a58 <HAL_TIM_ConfigClockSource>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002f6a:	f7ff fcb9 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f6e:	4818      	ldr	r0, [pc, #96]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f70:	f00c ff00 	bl	800fd74 <HAL_TIM_PWM_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002f7a:	f7ff fcb1 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4810      	ldr	r0, [pc, #64]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002f8e:	f00e faeb 	bl	8011568 <HAL_TIMEx_MasterConfigSynchronization>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002f98:	f7ff fca2 	bl	80028e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f9c:	2360      	movs	r3, #96	; 0x60
 8002f9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	2200      	movs	r2, #0
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002fb4:	f00d fc40 	bl	8010838 <HAL_TIM_PWM_ConfigChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002fbe:	f7ff fc8f 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002fc2:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <MX_TIM4_Init+0xe4>)
 8002fc4:	f000 f8a8 	bl	8003118 <HAL_TIM_MspPostInit>

}
 8002fc8:	bf00      	nop
 8002fca:	3738      	adds	r7, #56	; 0x38
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20056fb4 	.word	0x20056fb4
 8002fd4:	40000800 	.word	0x40000800

08002fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a45      	ldr	r2, [pc, #276]	; (80030fc <HAL_TIM_Base_MspInit+0x124>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d142      	bne.n	8003070 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fea:	4b45      	ldr	r3, [pc, #276]	; (8003100 <HAL_TIM_Base_MspInit+0x128>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a44      	ldr	r2, [pc, #272]	; (8003100 <HAL_TIM_Base_MspInit+0x128>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_TIM_Base_MspInit+0x128>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003004:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_TIM_Base_MspInit+0x130>)
 8003006:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8003008:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800300a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800300e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003010:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003018:	2200      	movs	r2, #0
 800301a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800301e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003022:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003024:	4b37      	ldr	r3, [pc, #220]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800302a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800302e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003032:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003046:	482f      	ldr	r0, [pc, #188]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003048:	f009 f8f8 	bl	800c23c <HAL_DMA_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8003052:	f7ff fc45 	bl	80028e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
 800305c:	4a29      	ldr	r2, [pc, #164]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
 8003068:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_TIM_Base_MspInit+0x12c>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800306e:	e040      	b.n	80030f2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a25      	ldr	r2, [pc, #148]	; (800310c <HAL_TIM_Base_MspInit+0x134>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d13b      	bne.n	80030f2 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_TIM_Base_MspInit+0x128>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_TIM_Base_MspInit+0x128>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_TIM_Base_MspInit+0x128>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8003092:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <HAL_TIM_Base_MspInit+0x13c>)
 8003096:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 800309a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800309e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a6:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ba:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80030d6:	480e      	ldr	r0, [pc, #56]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030d8:	f009 f8b0 	bl	800c23c <HAL_DMA_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80030e2:	f7ff fbfd 	bl	80028e0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <HAL_TIM_Base_MspInit+0x138>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40000400 	.word	0x40000400
 8003100:	40023800 	.word	0x40023800
 8003104:	2005704c 	.word	0x2005704c
 8003108:	40026070 	.word	0x40026070
 800310c:	40000800 	.word	0x40000800
 8003110:	200570ac 	.word	0x200570ac
 8003114:	40026010 	.word	0x40026010

08003118 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_TIM_MspPostInit+0xa8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d11c      	bne.n	8003174 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_TIM_MspPostInit+0xac>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_TIM_MspPostInit+0xac>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_TIM_MspPostInit+0xac>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003152:	2310      	movs	r3, #16
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003162:	2302      	movs	r3, #2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	4816      	ldr	r0, [pc, #88]	; (80031c8 <HAL_TIM_MspPostInit+0xb0>)
 800316e:	f009 fe07 	bl	800cd80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003172:	e021      	b.n	80031b8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_TIM_MspPostInit+0xb4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d11c      	bne.n	80031b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_TIM_MspPostInit+0xac>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <HAL_TIM_MspPostInit+0xac>)
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_TIM_MspPostInit+0xac>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031a8:	2302      	movs	r3, #2
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4807      	ldr	r0, [pc, #28]	; (80031d0 <HAL_TIM_MspPostInit+0xb8>)
 80031b4:	f009 fde4 	bl	800cd80 <HAL_GPIO_Init>
}
 80031b8:	bf00      	nop
 80031ba:	3728      	adds	r7, #40	; 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020400 	.word	0x40020400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40020c00 	.word	0x40020c00

080031d4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80031d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800320c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d8:	480d      	ldr	r0, [pc, #52]	; (8003210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031da:	490e      	ldr	r1, [pc, #56]	; (8003214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031f0:	4c0b      	ldr	r4, [pc, #44]	; (8003220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031fe:	f007 fb5f 	bl	800a8c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003202:	f023 f99f 	bl	8026544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003206:	f7ff fabd 	bl	8002784 <main>
  bx  lr    
 800320a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800320c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003214:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003218:	080d90b4 	.word	0x080d90b4
  ldr r2, =_sbss
 800321c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003220:	20057160 	.word	0x20057160

08003224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003224:	e7fe      	b.n	8003224 <ADC_IRQHandler>

08003226 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800322a:	f001 fbdf 	bl	80049ec <touchgfx_init>
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}

08003232 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8003236:	f001 fc03 	bl	8004a40 <touchgfx_taskEntry>
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    {
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
    }
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	0802b9e8 	.word	0x0802b9e8

08003260 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    }
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ffe9 	bl	8003240 <_ZN8touchgfx15TouchControllerD1Ev>
 800326e:	2104      	movs	r1, #4
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f022 ffe8 	bl	8026246 <_ZdlPvj>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ffbd 	bl	8003240 <_ZN8touchgfx15TouchControllerD1Ev>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	0802b9d0 	.word	0x0802b9d0

080032d4 <_ZN20STM32TouchControllerD0Ev>:
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffe7 	bl	80032b0 <_ZN20STM32TouchControllerD1Ev>
 80032e2:	2104      	movs	r1, #4
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f022 ffae 	bl	8026246 <_ZdlPvj>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]

}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]

}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]

}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    {
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
    }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	0802c8f0 	.word	0x0802c8f0

08003358 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    }
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffe9 	bl	8003338 <_ZN8touchgfx3HALD1Ev>
 8003366:	217c      	movs	r1, #124	; 0x7c
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f022 ff6c 	bl	8026246 <_ZdlPvj>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4610      	mov	r0, r2
 80033c0:	4798      	blx	r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	e000      	b.n	80033c8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80033c6:	2300      	movs	r3, #0
        }
    }
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f013 f84b 	bl	8016474 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	33a0      	adds	r3, #160	; 0xa0
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
    }
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
    {
        return false;
 80033fc:	2300      	movs	r3, #0
    }
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8003422:	4a12      	ldr	r2, [pc, #72]	; (800346c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8003424:	f44f 7125 	mov.w	r1, #660	; 0x294
 8003428:	4811      	ldr	r0, [pc, #68]	; (8003470 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800342a:	f023 f841 	bl	80264b0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2da      	uxtb	r2, r3
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800344e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800345e:	701a      	strb	r2, [r3, #0]
    }
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	0802acf8 	.word	0x0802acf8
 800346c:	0802ad30 	.word	0x0802ad30
 8003470:	0802ad80 	.word	0x0802ad80
 8003474:	2005674e 	.word	0x2005674e
 8003478:	2005674f 	.word	0x2005674f

0800347c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003484:	2300      	movs	r3, #0
    }
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	4610      	mov	r0, r2
 80034ae:	4798      	blx	r3
        }
    }
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3318      	adds	r3, #24
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4610      	mov	r0, r2
 80034d0:	4798      	blx	r3
 80034d2:	4603      	mov	r3, r0
    }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d017      	beq.n	8003524 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d12a      	bne.n	8003552 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003502:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800350a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003512:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800351a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8003522:	e016      	b.n	8003552 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003532:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800353a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800353e:	881a      	ldrh	r2, [r3, #0]
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003542:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003546:	881a      	ldrh	r2, [r3, #0]
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800354a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
    }
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20056748 	.word	0x20056748
 8003564:	20056744 	.word	0x20056744
 8003568:	2005674a 	.word	0x2005674a
 800356c:	20056746 	.word	0x20056746
 8003570:	2005674c 	.word	0x2005674c

08003574 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4618      	mov	r0, r3
 8003580:	f012 f949 	bl	8015816 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	4a05      	ldr	r2, [pc, #20]	; (80035ac <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fecb 	bl	8003338 <_ZN8touchgfx3HALD1Ev>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	0802bd4c 	.word	0x0802bd4c

080035b0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ffe7 	bl	800358c <_ZN20TouchGFXGeneratedHALD1Ev>
 80035be:	217c      	movs	r1, #124	; 0x7c
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f022 fe40 	bl	8026246 <_ZdlPvj>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ffca 	bl	8003574 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fee0 	bl	80053b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	f001 ff7a 	bl	8005504 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f001 ff79 	bl	8005520 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f001 ff81 	bl	800554c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	f001 ff8e 	bl	8005588 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800366c:	4603      	mov	r3, r0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 feca 	bl	800541c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 800369a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 80036ae:	801a      	strh	r2, [r3, #0]
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40016800 	.word	0x40016800
 80036bc:	2000028c 	.word	0x2000028c
 80036c0:	2000028e 	.word	0x2000028e

080036c4 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 feb4 	bl	800543c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 feb6 	bl	8005458 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 feb8 	bl	8005474 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	4a05      	ldr	r2, [pc, #20]	; (800372c <_ZN11TouchGFXHALD1Ev+0x20>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff35 	bl	800358c <_ZN20TouchGFXGeneratedHALD1Ev>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	0802ba00 	.word	0x0802ba00

08003730 <_ZN11TouchGFXHALD0Ev>:
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ffe7 	bl	800370c <_ZN11TouchGFXHALD1Ev>
 800373e:	217c      	movs	r1, #124	; 0x7c
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f022 fd80 	bl	8026246 <_ZdlPvj>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8003754:	2200      	movs	r2, #0
 8003756:	2101      	movs	r1, #1
 8003758:	2001      	movs	r0, #1
 800375a:	f00e fa51 	bl	8011c00 <osSemaphoreNew>
 800375e:	4603      	mov	r3, r0
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8003762:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003770:	2126      	movs	r1, #38	; 0x26
 8003772:	480e      	ldr	r0, [pc, #56]	; (80037ac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003774:	f022 fe9c 	bl	80264b0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8003778:	2200      	movs	r2, #0
 800377a:	2104      	movs	r1, #4
 800377c:	2001      	movs	r0, #1
 800377e:	f00e fb99 	bl	8011eb4 <osMessageQueueNew>
 8003782:	4603      	mov	r3, r0
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8003786:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8003792:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003794:	212a      	movs	r1, #42	; 0x2a
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003798:	f022 fe8a 	bl	80264b0 <__assert_func>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000290 	.word	0x20000290
 80037a4:	0802adc8 	.word	0x0802adc8
 80037a8:	0802ae14 	.word	0x0802ae14
 80037ac:	0802ae44 	.word	0x0802ae44
 80037b0:	20000294 	.word	0x20000294
 80037b4:	0802aec0 	.word	0x0802aec0

080037b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	4618      	mov	r0, r3
 80037c6:	f00e fab7 	bl	8011d38 <osSemaphoreAcquire>
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000290 	.word	0x20000290

080037d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f00e fb11 	bl	8011e04 <osSemaphoreRelease>
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000290 	.word	0x20000290

080037ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f00e fa9e 	bl	8011d38 <osSemaphoreAcquire>
}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000290 	.word	0x20000290

08003804 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f00e faf9 	bl	8011e04 <osSemaphoreRelease>
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000290 	.word	0x20000290

0800381c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	2200      	movs	r2, #0
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800382a:	f00e fbc9 	bl	8011fc0 <osMessageQueuePut>
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000294 	.word	0x20000294
 8003838:	2000000c 	.word	0x2000000c

0800383c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	1d39      	adds	r1, r7, #4
 8003848:	2300      	movs	r3, #0
 800384a:	2200      	movs	r2, #0
 800384c:	f00e fc2c 	bl	80120a8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	1d39      	adds	r1, r7, #4
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	2200      	movs	r2, #0
 800385c:	f00e fc24 	bl	80120a8 <osMessageQueueGet>
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000294 	.word	0x20000294

0800386c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	4618      	mov	r0, r3
 800387a:	f00e f993 	bl	8011ba4 <osDelay>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
    osThreadYield();
 800388a:	f00e f959 	bl	8011b40 <osThreadYield>
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <__NVIC_EnableIRQ>:
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	db0b      	blt.n	80038be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	4907      	ldr	r1, [pc, #28]	; (80038cc <__NVIC_EnableIRQ+0x38>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2001      	movs	r0, #1
 80038b6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_DisableIRQ>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db12      	blt.n	8003908 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	490a      	ldr	r1, [pc, #40]	; (8003914 <__NVIC_DisableIRQ+0x44>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	3320      	adds	r3, #32
 80038f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038fc:	f3bf 8f4f 	dsb	sy
}
 8003900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003902:	f3bf 8f6f 	isb	sy
}
 8003906:	bf00      	nop
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100

08003918 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
        : color(0)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
    {
    }
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
    }
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    {
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
    }
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	0802bb1c 	.word	0x0802bb1c

0800396c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    }
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffe9 	bl	800394c <_ZN8touchgfx9DMA_QueueD1Ev>
 800397a:	2104      	movs	r1, #4
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f022 fc62 	bl	8026246 <_ZdlPvj>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3344      	adds	r3, #68	; 0x44
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
    }
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
    {
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	601a      	str	r2, [r3, #0]
    }
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	0802ce30 	.word	0x0802ce30

080039c8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    }
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffe9 	bl	80039a8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80039d6:	210c      	movs	r1, #12
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f022 fc34 	bl	8026246 <_ZdlPvj>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	721a      	strb	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	725a      	strb	r2, [r3, #9]
    {
    }
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	0802ce30 	.word	0x0802ce30

08003a1c <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8003a24:	2301      	movs	r3, #1
    }
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3328      	adds	r3, #40	; 0x28
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4610      	mov	r0, r2
 8003a46:	4798      	blx	r3
    }
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
        return instance;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
    }
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20056750 	.word	0x20056750

08003a68 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4798      	blx	r3
    }
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8003a92:	f7ff ffdd 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ffe5 	bl	8003a68 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff30 	bl	8003918 <_ZN8touchgfx9colortypeC1Ev>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8003ac4:	b5b0      	push	{r4, r5, r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f7ff ff87 	bl	80039e8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8003ada:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <_ZN10STM32F7DMAC1Ev+0x50>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f103 000c 	add.w	r0, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3320      	adds	r3, #32
 8003aea:	2260      	movs	r2, #96	; 0x60
 8003aec:	4619      	mov	r1, r3
 8003aee:	f012 fe2b 	bl	8016748 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3320      	adds	r3, #32
 8003af6:	245f      	movs	r4, #95	; 0x5f
 8003af8:	461d      	mov	r5, r3
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	db05      	blt.n	8003b0a <_ZN10STM32F7DMAC1Ev+0x46>
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7ff ffd1 	bl	8003aa6 <_ZN8touchgfx6BlitOpC1Ev>
 8003b04:	3520      	adds	r5, #32
 8003b06:	3c01      	subs	r4, #1
 8003b08:	e7f7      	b.n	8003afa <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bdb0      	pop	{r4, r5, r7, pc}
 8003b14:	0802bacc 	.word	0x0802bacc

08003b18 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <_ZN10STM32F7DMAD1Ev+0x30>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003b26:	205a      	movs	r0, #90	; 0x5a
 8003b28:	f7ff fed2 	bl	80038d0 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 faad 	bl	8004090 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff35 	bl	80039a8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	0802bacc 	.word	0x0802bacc

08003b4c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
}
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffdf 	bl	8003b18 <_ZN10STM32F7DMAD1Ev>
 8003b5a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f022 fb71 	bl	8026246 <_ZdlPvj>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b82:	6313      	str	r3, [r2, #48]	; 0x30
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b9a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ba6:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003bac:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003bae:	205a      	movs	r0, #90	; 0x5a
 8003bb0:	f7ff fe70 	bl	8003894 <__NVIC_EnableIRQ>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	20056dd8 	.word	0x20056dd8
 8003bc4:	08003a8b 	.word	0x08003a8b

08003bc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b0b      	cmp	r3, #11
 8003bdc:	d826      	bhi.n	8003c2c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c2d 	.word	0x08003c2d
 8003bf4:	08003c2d 	.word	0x08003c2d
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c2d 	.word	0x08003c2d
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c27 	.word	0x08003c27
 8003c08:	08003c27 	.word	0x08003c27
 8003c0c:	08003c27 	.word	0x08003c27
 8003c10:	08003c27 	.word	0x08003c27
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
        break;
 8003c18:	e00e      	b.n	8003c38 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
        break;
 8003c1e:	e00b      	b.n	8003c38 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003c20:	2302      	movs	r3, #2
 8003c22:	60fb      	str	r3, [r7, #12]
        break;
 8003c24:	e008      	b.n	8003c38 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003c26:	2305      	movs	r3, #5
 8003c28:	60fb      	str	r3, [r7, #12]
        break;
 8003c2a:	e005      	b.n	8003c38 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8003c2e:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8003c30:	2164      	movs	r1, #100	; 0x64
 8003c32:	4806      	ldr	r0, [pc, #24]	; (8003c4c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003c34:	f022 fc3c 	bl	80264b0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	0802af04 	.word	0x0802af04
 8003c48:	0802af20 	.word	0x0802af20
 8003c4c:	0802af6c 	.word	0x0802af6c

08003c50 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	2b0a      	cmp	r3, #10
 8003c64:	d821      	bhi.n	8003caa <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003c9f 	.word	0x08003c9f
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cab 	.word	0x08003cab
 8003c88:	08003c9f 	.word	0x08003c9f
 8003c8c:	08003c9f 	.word	0x08003c9f
 8003c90:	08003c9f 	.word	0x08003c9f
 8003c94:	08003c9f 	.word	0x08003c9f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
        break;
 8003c9c:	e00b      	b.n	8003cb6 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
        break;
 8003ca2:	e008      	b.n	8003cb6 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	60fb      	str	r3, [r7, #12]
        break;
 8003ca8:	e005      	b.n	8003cb6 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003cac:	4a05      	ldr	r2, [pc, #20]	; (8003cc4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003cae:	2185      	movs	r1, #133	; 0x85
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8003cb2:	f022 fbfd 	bl	80264b0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	0802af04 	.word	0x0802af04
 8003cc4:	0802afe4 	.word	0x0802afe4
 8003cc8:	0802af6c 	.word	0x0802af6c

08003ccc <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003cd4:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	7f5b      	ldrb	r3, [r3, #29]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff67 	bl	8003bc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003cfa:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	7f9b      	ldrb	r3, [r3, #30]
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ff60 	bl	8003bc8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003d08:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7f9b      	ldrb	r3, [r3, #30]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff9d 	bl	8003c50 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003d16:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	8b5b      	ldrh	r3, [r3, #26]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	8a9b      	ldrh	r3, [r3, #20]
 8003d22:	1ad2      	subs	r2, r2, r3
 8003d24:	4b97      	ldr	r3, [pc, #604]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	8b5b      	ldrh	r3, [r3, #26]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	8a9b      	ldrh	r3, [r3, #20]
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	4b93      	ldr	r3, [pc, #588]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d36:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	8b1b      	ldrh	r3, [r3, #24]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	8a9b      	ldrh	r3, [r3, #20]
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	4b8f      	ldr	r3, [pc, #572]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d46:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003d48:	4a8e      	ldr	r2, [pc, #568]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	8adb      	ldrh	r3, [r3, #22]
 8003d52:	461a      	mov	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	8a9b      	ldrh	r3, [r3, #20]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	4b89      	ldr	r3, [pc, #548]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	4b87      	ldr	r3, [pc, #540]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d6e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d78:	d037      	beq.n	8003dea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7e:	f200 80e4 	bhi.w	8003f4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d015      	beq.n	8003db4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8c:	f200 80dd 	bhi.w	8003f4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d045      	beq.n	8003e20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	f200 80d8 	bhi.w	8003f4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	f000 80c0 	beq.w	8003f20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	f200 80d2 	bhi.w	8003f4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	f000 80a5 	beq.w	8003ef6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	f000 80b7 	beq.w	8003f20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003db2:	e0ca      	b.n	8003f4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	7f1b      	ldrb	r3, [r3, #28]
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4a71      	ldr	r2, [pc, #452]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dbe:	4b72      	ldr	r3, [pc, #456]	; (8003f88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	4c6e      	ldr	r4, [pc, #440]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fdb2 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003dd4:	4a6b      	ldr	r2, [pc, #428]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003de0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003de2:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003de4:	4a69      	ldr	r2, [pc, #420]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003de6:	601a      	str	r2, [r3, #0]
        break;
 8003de8:	e0c8      	b.n	8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7f1b      	ldrb	r3, [r3, #28]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	4619      	mov	r1, r3
 8003df2:	4a64      	ldr	r2, [pc, #400]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003df4:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	4c61      	ldr	r4, [pc, #388]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fd97 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 8003e06:	4603      	mov	r3, r0
 8003e08:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e0a:	4a5e      	ldr	r2, [pc, #376]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e16:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003e1c:	601a      	str	r2, [r3, #0]
        break;
 8003e1e:	e0ad      	b.n	8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8003e26:	2301      	movs	r3, #1
 8003e28:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7f1b      	ldrb	r3, [r3, #28]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	461a      	mov	r2, r3
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e3e:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e4a:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00d      	beq.n	8003e7e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8003e62:	e020      	b.n	8003ea6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e64:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	4b4a      	ldr	r3, [pc, #296]	; (8003f94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	8852      	ldrh	r2, [r2, #2]
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0212      	lsls	r2, r2, #8
 8003e74:	4611      	mov	r1, r2
 8003e76:	4a43      	ldr	r2, [pc, #268]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	61d3      	str	r3, [r2, #28]
            break;
 8003e7c:	e019      	b.n	8003eb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	7f1b      	ldrb	r3, [r3, #28]
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d101      	bne.n	8003e8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8003e86:	2300      	movs	r3, #0
 8003e88:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	8852      	ldrh	r2, [r2, #2]
 8003e96:	3a01      	subs	r2, #1
 8003e98:	0212      	lsls	r2, r2, #8
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	4a39      	ldr	r2, [pc, #228]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e9e:	f043 0310 	orr.w	r3, r3, #16
 8003ea2:	61d3      	str	r3, [r2, #28]
            break;
 8003ea4:	e005      	b.n	8003eb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8003ea6:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8003eaa:	21ff      	movs	r1, #255	; 0xff
 8003eac:	483c      	ldr	r0, [pc, #240]	; (8003fa0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8003eae:	f022 faff 	bl	80264b0 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003eb2:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003eb8:	f043 0320 	orr.w	r3, r3, #32
 8003ebc:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8003ed4:	f7ff fcd7 	bl	8003886 <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003ed8:	e7f1      	b.n	8003ebe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003eda:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003edc:	2210      	movs	r2, #16
 8003ede:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003ee6:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003eea:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8003eec:	e046      	b.n	8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003ef2:	601a      	str	r2, [r3, #0]
      break;
 8003ef4:	e042      	b.n	8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	7f1b      	ldrb	r3, [r3, #28]
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	461a      	mov	r2, r3
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f16:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003f1c:	601a      	str	r2, [r3, #0]
        break;
 8003f1e:	e02d      	b.n	8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	7f1b      	ldrb	r3, [r3, #28]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	461a      	mov	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f40:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003f46:	601a      	str	r2, [r3, #0]
        break;
 8003f48:	e018      	b.n	8003f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	7f1b      	ldrb	r3, [r3, #28]
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	461a      	mov	r2, r3
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	7f5a      	ldrb	r2, [r3, #29]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	7f9b      	ldrb	r3, [r3, #30]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d003      	beq.n	8003f72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003f6e:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8003f70:	e003      	b.n	8003f7a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f74:	f240 2201 	movw	r2, #513	; 0x201
 8003f78:	601a      	str	r2, [r3, #0]
        break;
 8003f7a:	bf00      	nop
    }
}
 8003f7c:	bf00      	nop
 8003f7e:	3724      	adds	r7, #36	; 0x24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd90      	pop	{r4, r7, pc}
 8003f84:	4002b000 	.word	0x4002b000
 8003f88:	0002000a 	.word	0x0002000a
 8003f8c:	00020201 	.word	0x00020201
 8003f90:	00020009 	.word	0x00020009
 8003f94:	ffff00ef 	.word	0xffff00ef
 8003f98:	0802b034 	.word	0x0802b034
 8003f9c:	0802b050 	.word	0x0802b050
 8003fa0:	0802af6c 	.word	0x0802af6c
 8003fa4:	00010201 	.word	0x00010201

08003fa8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	7f9b      	ldrb	r3, [r3, #30]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fe49 	bl	8003c50 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003fbe:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	8adb      	ldrh	r3, [r3, #22]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	8a9b      	ldrh	r3, [r3, #20]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	4b28      	ldr	r3, [pc, #160]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	8b5b      	ldrh	r3, [r3, #26]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	8a9b      	ldrh	r3, [r3, #20]
 8003fea:	1ad2      	subs	r2, r2, r3
 8003fec:	4b24      	ldr	r3, [pc, #144]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d12e      	bne.n	8004056 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	8b5b      	ldrh	r3, [r3, #26]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	8a9b      	ldrh	r3, [r3, #20]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004006:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	8b5b      	ldrh	r3, [r3, #26]
 800400c:	461a      	mov	r2, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	8a9b      	ldrh	r3, [r3, #20]
 8004012:	1ad2      	subs	r2, r2, r3
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004016:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	7f1b      	ldrb	r3, [r3, #28]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4619      	mov	r1, r3
 8004026:	4a16      	ldr	r2, [pc, #88]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800402a:	430b      	orrs	r3, r1
 800402c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	4c13      	ldr	r4, [pc, #76]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fc7d 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 800403a:	4603      	mov	r3, r0
 800403c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004044:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800404c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004050:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8004052:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8004054:	e010      	b.n	8004078 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	4c06      	ldr	r4, [pc, #24]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fc63 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 800406e:	4603      	mov	r3, r0
 8004070:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8004072:	4b03      	ldr	r3, [pc, #12]	; (8004080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004074:	4a05      	ldr	r2, [pc, #20]	; (800408c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8004076:	601a      	str	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bd90      	pop	{r4, r7, pc}
 8004080:	4002b000 	.word	0x4002b000
 8004084:	00010009 	.word	0x00010009
 8004088:	00020201 	.word	0x00020201
 800408c:	00030201 	.word	0x00030201

08004090 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fc53 	bl	800394c <_ZN8touchgfx9DMA_QueueD1Ev>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	0802ce80 	.word	0x0802ce80

080040b4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffe7 	bl	8004090 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80040c2:	2114      	movs	r1, #20
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f022 f8be 	bl	8026246 <_ZdlPvj>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
        : color(col)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	601a      	str	r2, [r3, #0]
    }
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	805a      	strh	r2, [r3, #2]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	809a      	strh	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	80da      	strh	r2, [r3, #6]
    {
    }
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6013      	str	r3, [r2, #0]
    }
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	200567cc 	.word	0x200567cc

08004140 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
    {
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
    }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	0802bd38 	.word	0x0802bd38

08004160 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    }
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ffe9 	bl	8004140 <_ZN8touchgfx12FontProviderD1Ev>
 800416e:	2104      	movs	r1, #4
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f022 f868 	bl	8026246 <_ZdlPvj>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800418e:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	611a      	str	r2, [r3, #16]
    {
    }
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	0802bd28 	.word	0x0802bd28

080041c0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    {
 80041c8:	4a04      	ldr	r2, [pc, #16]	; (80041dc <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
    }
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	0802bd28 	.word	0x0802bd28

080041e0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    }
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ffe9 	bl	80041c0 <_ZN8touchgfx7MVPHeapD1Ev>
 80041ee:	2114      	movs	r1, #20
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f022 f828 	bl	8026246 <_ZdlPvj>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    {
    }
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
    {
    }
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
    {
    }
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
    {
    }
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
    {
    }
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    {
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
    }
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	0802bd00 	.word	0x0802bd00

080042a4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    }
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ffe9 	bl	8004284 <_ZN8touchgfx15UIEventListenerD1Ev>
 80042b2:	2104      	movs	r1, #4
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f021 ffc6 	bl	8026246 <_ZdlPvj>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    {
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
    }
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	0802d6ec 	.word	0x0802d6ec

080042e4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    }
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ffe9 	bl	80042c4 <_ZN8touchgfx3LCDD1Ev>
 80042f2:	2108      	movs	r1, #8
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f021 ffa6 	bl	8026246 <_ZdlPvj>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800432e:	6810      	ldr	r0, [r2, #0]
 8004330:	6851      	ldr	r1, [r2, #4]
 8004332:	c303      	stmia	r3!, {r0, r1}
    }
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
    {
 8004348:	4a04      	ldr	r2, [pc, #16]	; (800435c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
    }
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	0802bce8 	.word	0x0802bce8

08004360 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    }
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ffe9 	bl	8004340 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800436e:	2104      	movs	r1, #4
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f021 ff68 	bl	8026246 <_ZdlPvj>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff77 	bl	8004284 <_ZN8touchgfx15UIEventListenerD1Ev>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	0802d7c4 	.word	0x0802d7c4

080043a4 <_ZN8touchgfx11ApplicationD0Ev>:
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ffe7 	bl	8004380 <_ZN8touchgfx11ApplicationD1Ev>
 80043b2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f021 ff45 	bl	8026246 <_ZdlPvj>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f804 	bl	80043dc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00f      	beq.n	800440e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4610      	mov	r0, r2
 8004402:	4798      	blx	r3
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4610      	mov	r0, r2
 8004428:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	4a05      	ldr	r2, [pc, #20]	; (800445c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff97 	bl	8004380 <_ZN8touchgfx11ApplicationD1Ev>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	0802bca4 	.word	0x0802bca4

08004460 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ffe7 	bl	800443c <_ZN8touchgfx14MVPApplicationD1Ev>
 800446e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f021 fee7 	bl	8026246 <_ZdlPvj>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fd07 	bl	8004eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ffcb 	bl	800443c <_ZN8touchgfx14MVPApplicationD1Ev>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	0802bc48 	.word	0x0802bc48

080044b4 <_ZN23FrontendApplicationBaseD0Ev>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ffe1 	bl	8004484 <_ZN23FrontendApplicationBaseD1Ev>
 80044c2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f021 febd 	bl	8026246 <_ZdlPvj>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ffcb 	bl	8004484 <_ZN23FrontendApplicationBaseD1Ev>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	0802bc04 	.word	0x0802bc04

080044fc <_ZN19FrontendApplicationD0Ev>:
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ffe7 	bl	80044d8 <_ZN19FrontendApplicationD1Ev>
 800450a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f021 fe99 	bl	8026246 <_ZdlPvj>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800452c:	4618      	mov	r0, r3
 800452e:	f004 fe25 	bl	800917c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4618      	mov	r0, r3
 8004536:	f014 fdbb 	bl	80190b0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	805a      	strh	r2, [r3, #2]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	809a      	strh	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	80da      	strh	r2, [r3, #6]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	811a      	strh	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	815a      	strh	r2, [r3, #10]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	819a      	strh	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	739a      	strb	r2, [r3, #14]
        {
        }
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ffd5 	bl	8004542 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	829a      	strh	r2, [r3, #20]
    {
    }
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80045be:	4a55      	ldr	r2, [pc, #340]	; (8004714 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	615a      	str	r2, [r3, #20]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	331c      	adds	r3, #28
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ffcb 	bl	8004588 <_ZN8touchgfx8GesturesC1Ev>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	64da      	str	r2, [r3, #76]	; 0x4c
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3350      	adds	r3, #80	; 0x50
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fd58 	bl	80040f2 <_ZN8touchgfx4RectC1Ev>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	659a      	str	r2, [r3, #88]	; 0x58
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	65da      	str	r2, [r3, #92]	; 0x5c
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	661a      	str	r2, [r3, #96]	; 0x60
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	671a      	str	r2, [r3, #112]	; 0x70
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80046d0:	4a12      	ldr	r2, [pc, #72]	; (800471c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80046d2:	8b3b      	ldrh	r3, [r7, #24]
 80046d4:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80046d8:	8bbb      	ldrh	r3, [r7, #28]
 80046da:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80046e8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80046f0:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80046f2:	8b3a      	ldrh	r2, [r7, #24]
 80046f4:	8bbb      	ldrh	r3, [r7, #28]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	bf34      	ite	cc
 80046fa:	2301      	movcc	r3, #1
 80046fc:	2300      	movcs	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	0802c8f0 	.word	0x0802c8f0
 8004718:	20056750 	.word	0x20056750
 800471c:	20056744 	.word	0x20056744
 8004720:	20056746 	.word	0x20056746
 8004724:	20056748 	.word	0x20056748
 8004728:	2005674a 	.word	0x2005674a
 800472c:	2005674c 	.word	0x2005674c

08004730 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fbb5 	bl	8005eac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	f7ff fd0b 	bl	8004180 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800476a:	4a04      	ldr	r2, [pc, #16]	; (800477c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]
    {

    }
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	0802bbf0 	.word	0x0802bbf0

08004780 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__tcf_0+0xc>)
 8004786:	f000 f965 	bl	8004a54 <_ZN12FrontendHeapD1Ev>
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200002b0 	.word	0x200002b0

08004790 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f3bf 8f5b 	dmb	ish
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf0c      	ite	eq
 80047a6:	2301      	moveq	r3, #1
 80047a8:	2300      	movne	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80047b2:	f021 fd4a 	bl	802624a <__cxa_guard_acquire>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80047c6:	4807      	ldr	r0, [pc, #28]	; (80047e4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80047c8:	f000 f868 	bl	800489c <_ZN12FrontendHeapC1Ev>
 80047cc:	4804      	ldr	r0, [pc, #16]	; (80047e0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80047ce:	f021 fd48 	bl	8026262 <__cxa_guard_release>
 80047d2:	4805      	ldr	r0, [pc, #20]	; (80047e8 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80047d4:	f021 fe8a 	bl	80264ec <atexit>
        return instance;
 80047d8:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80047da:	4618      	mov	r0, r3
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20022ae4 	.word	0x20022ae4
 80047e4:	200002b0 	.word	0x200002b0
 80047e8:	08004781 	.word	0x08004781

080047ec <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	4a05      	ldr	r2, [pc, #20]	; (800480c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fcdf 	bl	80041c0 <_ZN8touchgfx7MVPHeapD1Ev>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	0802bbf0 	.word	0x0802bbf0

08004810 <_ZN16FrontendHeapBaseD0Ev>:
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ffe7 	bl	80047ec <_ZN16FrontendHeapBaseD1Ev>
 800481e:	2114      	movs	r1, #20
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f021 fd10 	bl	8026246 <_ZdlPvj>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	f010 fe06 	bl	801544c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004840:	4a03      	ldr	r2, [pc, #12]	; (8004850 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	0802bbbc 	.word	0x0802bbbc

08004854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f010 fdf4 	bl	801544c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004864:	4a03      	ldr	r2, [pc, #12]	; (8004874 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	0802bb88 	.word	0x0802bb88

08004878 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f010 fde2 	bl	801544c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004888:	4a03      	ldr	r2, [pc, #12]	; (8004898 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	0802bb54 	.word	0x0802bb54

0800489c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800489c:	b5b0      	push	{r4, r5, r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 0414 	add.w	r4, r3, #20
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <_ZN12FrontendHeapC1Ev+0x8c>)
 80048b6:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4b1c      	ldr	r3, [pc, #112]	; (800492c <_ZN12FrontendHeapC1Ev+0x90>)
 80048bc:	440b      	add	r3, r1
                     app(model, *this)
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	462a      	mov	r2, r5
 80048c4:	4621      	mov	r1, r4
 80048c6:	f7ff ff41 	bl	800474c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80048ca:	4a19      	ldr	r2, [pc, #100]	; (8004930 <_ZN12FrontendHeapC1Ev+0x94>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3314      	adds	r3, #20
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ffab 	bl	8004830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	332c      	adds	r3, #44	; 0x2c
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff ffb8 	bl	8004854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <_ZN12FrontendHeapC1Ev+0x8c>)
 80048e8:	4413      	add	r3, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff ffc4 	bl	8004878 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <_ZN12FrontendHeapC1Ev+0x98>)
 80048f4:	4413      	add	r3, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 fc32 	bl	8009160 <_ZN5ModelC1Ev>
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <_ZN12FrontendHeapC1Ev+0x90>)
 8004900:	4413      	add	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	490b      	ldr	r1, [pc, #44]	; (8004934 <_ZN12FrontendHeapC1Ev+0x98>)
 8004906:	4411      	add	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4618      	mov	r0, r3
 800490c:	f004 fc12 	bl	8009134 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <_ZN12FrontendHeapC1Ev+0x90>)
 8004916:	4413      	add	r3, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f7ff ff09 	bl	8004730 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bdb0      	pop	{r4, r5, r7, pc}
 8004928:	000226c4 	.word	0x000226c4
 800492c:	000226dc 	.word	0x000226dc
 8004930:	0802bb40 	.word	0x0802bb40
 8004934:	000226d8 	.word	0x000226d8

08004938 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	8bbb      	ldrh	r3, [r7, #28]
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	8b3b      	ldrh	r3, [r7, #24]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	f7ff fe2b 	bl	80045b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]
    }
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	0802bd4c 	.word	0x0802bd4c

08004970 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	8bbb      	ldrh	r3, [r7, #28]
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	8b3b      	ldrh	r3, [r7, #24]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	f7ff ffd3 	bl	8004938 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004992:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]
    }
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	0802ba00 	.word	0x0802ba00

080049a8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	0802b9e8 	.word	0x0802b9e8

080049c8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ffe8 	bl	80049a8 <_ZN8touchgfx15TouchControllerC1Ev>
 80049d8:	4a03      	ldr	r2, [pc, #12]	; (80049e8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	0802b9d0 	.word	0x0802b9d0

080049ec <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80049f2:	f000 fffb 	bl	80059ec <_ZN14BitmapDatabase11getInstanceEv>
 80049f6:	4604      	mov	r4, r0
 80049f8:	f001 f802 	bl	8005a00 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4619      	mov	r1, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f017 fd11 	bl	801c430 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8004a0e:	4809      	ldr	r0, [pc, #36]	; (8004a34 <touchgfx_init+0x48>)
 8004a10:	f7ff fb86 	bl	8004120 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004a14:	2000      	movs	r0, #0
 8004a16:	f004 f8c3 	bl	8008ba0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004a1a:	4807      	ldr	r0, [pc, #28]	; (8004a38 <touchgfx_init+0x4c>)
 8004a1c:	f017 fc4a 	bl	801c2b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8004a20:	f7ff feb6 	bl	8004790 <_ZN12FrontendHeap11getInstanceEv>
 8004a24:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8004a26:	4805      	ldr	r0, [pc, #20]	; (8004a3c <touchgfx_init+0x50>)
 8004a28:	f7fe fdde 	bl	80035e8 <_ZN11TouchGFXHAL10initializeEv>
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}
 8004a34:	20023764 	.word	0x20023764
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	20023768 	.word	0x20023768

08004a40 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <touchgfx_taskEntry+0x10>)
 8004a46:	f010 ff4a 	bl	80158de <_ZN8touchgfx3HAL9taskEntryEv>
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20023768 	.word	0x20023768

08004a54 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	4a10      	ldr	r2, [pc, #64]	; (8004aa0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <_ZN12FrontendHeapD1Ev+0x50>)
 8004a66:	4413      	add	r3, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fd35 	bl	80044d8 <_ZN19FrontendApplicationD1Ev>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <_ZN12FrontendHeapD1Ev+0x54>)
 8004a72:	4413      	add	r3, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 f82b 	bl	8004ad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	332c      	adds	r3, #44	; 0x2c
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f848 	bl	8004b14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3314      	adds	r3, #20
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f867 	bl	8004b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff feab 	bl	80047ec <_ZN16FrontendHeapBaseD1Ev>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	0802bb40 	.word	0x0802bb40
 8004aa4:	000226dc 	.word	0x000226dc
 8004aa8:	000226c4 	.word	0x000226c4

08004aac <_ZN12FrontendHeapD0Ev>:
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ffcd 	bl	8004a54 <_ZN12FrontendHeapD1Ev>
 8004aba:	4904      	ldr	r1, [pc, #16]	; (8004acc <_ZN12FrontendHeapD0Ev+0x20>)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f021 fbc2 	bl	8026246 <_ZdlPvj>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	00022834 	.word	0x00022834

08004ad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f010 fcb1 	bl	8015448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	0802bb54 	.word	0x0802bb54

08004af4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ffe7 	bl	8004ad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004b02:	2114      	movs	r1, #20
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f021 fb9e 	bl	8026246 <_ZdlPvj>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f010 fc8f 	bl	8015448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	0802bb88 	.word	0x0802bb88

08004b38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ffe7 	bl	8004b14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004b46:	4904      	ldr	r1, [pc, #16]	; (8004b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f021 fb7c 	bl	8026246 <_ZdlPvj>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	00022698 	.word	0x00022698

08004b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f010 fc6b 	bl	8015448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	0802bbbc 	.word	0x0802bbbc

08004b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ffe7 	bl	8004b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004b8e:	2118      	movs	r1, #24
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f021 fb58 	bl	8026246 <_ZdlPvj>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fb87 	bl	80042c4 <_ZN8touchgfx3LCDD1Ev>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	0802e7bc 	.word	0x0802e7bc

08004bc4 <_ZN8touchgfx8LCD24bppD0Ev>:
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ffe7 	bl	8004ba0 <_ZN8touchgfx8LCD24bppD1Ev>
 8004bd2:	2158      	movs	r1, #88	; 0x58
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f021 fb36 	bl	8026246 <_ZdlPvj>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_Z41__static_initialization_and_destruction_0ii>:
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b094      	sub	sp, #80	; 0x50
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 8129 	bne.w	8004e48 <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f040 8123 	bne.w	8004e48 <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004c18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	461a      	mov	r2, r3
 8004c34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004c46:	f107 0320 	add.w	r3, r7, #32
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fa41 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8004c52:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004c54:	bf00      	nop
 8004c56:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004c58:	4b89      	ldr	r3, [pc, #548]	; (8004e80 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	23ff      	movs	r3, #255	; 0xff
 8004c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004c76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004c86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	431a      	orrs	r2, r3
 8004c96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004ca0:	f107 031c 	add.w	r3, r7, #28
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fa14 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8004cac:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004cae:	bf00      	nop
 8004cb0:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004cb2:	4b74      	ldr	r3, [pc, #464]	; (8004e84 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004cbc:	23ff      	movs	r3, #255	; 0xff
 8004cbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ccc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004cd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cd4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004ce0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004cfa:	f107 0318 	add.w	r3, r7, #24
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff f9e7 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8004d06:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004d08:	bf00      	nop
 8004d0a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8004d0c:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d16:	2300      	movs	r3, #0
 8004d18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004d1c:	23ff      	movs	r3, #255	; 0xff
 8004d1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004d22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004d26:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004d2a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004d32:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004d36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004d3a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	461a      	mov	r2, r3
 8004d42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f9ba 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8004d60:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004d62:	bf00      	nop
 8004d64:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004d66:	4b49      	ldr	r3, [pc, #292]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	23f7      	movs	r3, #247	; 0xf7
 8004d6c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004d70:	234c      	movs	r3, #76	; 0x4c
 8004d72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004d76:	2302      	movs	r3, #2
 8004d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004d7c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004d80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004d84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004d88:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004d8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d90:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004d94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	431a      	orrs	r2, r3
 8004da4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004dae:	f107 0310 	add.w	r3, r7, #16
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff f98d 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8004dba:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8004dbc:	bf00      	nop
 8004dbe:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8004dc0:	4b33      	ldr	r3, [pc, #204]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	23f7      	movs	r3, #247	; 0xf7
 8004dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004dca:	23d2      	movs	r3, #210	; 0xd2
 8004dcc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004dd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dda:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8004dde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004dea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004dee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	461a      	mov	r2, r3
 8004df6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff f960 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8004e14:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004e16:	bf00      	nop
 8004e18:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8004e1c:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 8004e1e:	481e      	ldr	r0, [pc, #120]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004e20:	f7ff fdd2 	bl	80049c8 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8004e24:	481d      	ldr	r0, [pc, #116]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004e26:	f7fe fe4d 	bl	8003ac4 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8004e2a:	481d      	ldr	r0, [pc, #116]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004e2c:	f019 fd62 	bl	801e8f4 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8004e30:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004e3e:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004e40:	4916      	ldr	r1, [pc, #88]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004e42:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004e44:	f7ff fd94 	bl	8004970 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10e      	bne.n	8004e76 <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004e58:	4812      	ldr	r0, [pc, #72]	; (8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004e5a:	f7fe fc57 	bl	800370c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8004e5e:	4812      	ldr	r0, [pc, #72]	; (8004ea8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004e60:	f000 f846 	bl	8004ef0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8004e64:	480e      	ldr	r0, [pc, #56]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004e66:	f7ff fe9b 	bl	8004ba0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8004e6a:	480c      	ldr	r0, [pc, #48]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004e6c:	f7fe fe54 	bl	8003b18 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8004e70:	4809      	ldr	r0, [pc, #36]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004e72:	f7fe fa1d 	bl	80032b0 <_ZN20STM32TouchControllerD1Ev>
}
 8004e76:	bf00      	nop
 8004e78:	3748      	adds	r7, #72	; 0x48
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000298 	.word	0x20000298
 8004e84:	2000029c 	.word	0x2000029c
 8004e88:	200002a0 	.word	0x200002a0
 8004e8c:	200002a4 	.word	0x200002a4
 8004e90:	200002a8 	.word	0x200002a8
 8004e94:	200002ac 	.word	0x200002ac
 8004e98:	20022ae8 	.word	0x20022ae8
 8004e9c:	20022aec 	.word	0x20022aec
 8004ea0:	2002370c 	.word	0x2002370c
 8004ea4:	20023768 	.word	0x20023768
 8004ea8:	20000010 	.word	0x20000010

08004eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	4a05      	ldr	r2, [pc, #20]	; (8004ecc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fa3f 	bl	8004340 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	0802bc8c 	.word	0x0802bc8c

08004ed0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ffe7 	bl	8004eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004ede:	2110      	movs	r1, #16
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f021 f9b0 	bl	8026246 <_ZdlPvj>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_05 = 5; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_06 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff f91d 	bl	8004140 <_ZN8touchgfx12FontProviderD1Ev>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	0802be18 	.word	0x0802be18

08004f14 <_ZN23ApplicationFontProviderD0Ev>:
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ffe7 	bl	8004ef0 <_ZN23ApplicationFontProviderD1Ev>
 8004f22:	2104      	movs	r1, #4
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f021 f98e 	bl	8026246 <_ZdlPvj>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004f3c:	2301      	movs	r3, #1
    }
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8004f52:	230c      	movs	r3, #12
    }
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004f6c:	887a      	ldrh	r2, [r7, #2]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	3308      	adds	r3, #8
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4413      	add	r3, r2
    }
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4413      	add	r3, r2
    }
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004fb8:	2301      	movs	r3, #1
    }
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004fd0:	4b03      	ldr	r3, [pc, #12]	; (8004fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	00022690 	.word	0x00022690

08004fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	4a06      	ldr	r2, [pc, #24]	; (800500c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4413      	add	r3, r2
    }
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	00022690 	.word	0x00022690

08005010 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800501c:	887b      	ldrh	r3, [r7, #2]
 800501e:	4a06      	ldr	r2, [pc, #24]	; (8005038 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8005020:	fb02 f303 	mul.w	r3, r2, r3
 8005024:	3308      	adds	r3, #8
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4413      	add	r3, r2
    }
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	00022690 	.word	0x00022690

0800503c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8005044:	2301      	movs	r3, #1
    }
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800505a:	2310      	movs	r3, #16
    }
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	3308      	adds	r3, #8
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
    }
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	3308      	adds	r3, #8
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
    }
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68d2      	ldr	r2, [r2, #12]
 80050bc:	1052      	asrs	r2, r2, #1
 80050be:	1899      	adds	r1, r3, r2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	e00a      	b.n	80050e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68d2      	ldr	r2, [r2, #12]
 80050da:	1052      	asrs	r2, r2, #1
 80050dc:	4413      	add	r3, r2
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6892      	ldr	r2, [r2, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4798      	blx	r3
    }
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800511c:	2300      	movs	r3, #0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d001      	beq.n	8005126 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8005126:	2300      	movs	r3, #0
    }
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_GLOBAL__sub_I_touchgfx_init>:
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
 8005138:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800513c:	2001      	movs	r0, #1
 800513e:	f7ff fd51 	bl	8004be4 <_Z41__static_initialization_and_destruction_0ii>
 8005142:	bd80      	pop	{r7, pc}

08005144 <_GLOBAL__sub_D_touchgfx_init>:
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
 8005148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800514c:	2000      	movs	r0, #0
 800514e:	f7ff fd49 	bl	8004be4 <_Z41__static_initialization_and_destruction_0ii>
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	331c      	adds	r3, #28
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
    }
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800519e:	3301      	adds	r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d105      	bne.n	80051d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e027      	b.n	8005228 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d123      	bne.n	8005226 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d014      	beq.n	8005210 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3390      	adds	r3, #144	; 0x90
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d008      	beq.n	8005210 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	f083 0301 	eor.w	r3, r3, #1
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800521e:	2301      	movs	r3, #1
 8005220:	e002      	b.n	8005228 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8005226:	2300      	movs	r3, #0
    }
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	2005674e 	.word	0x2005674e

08005234 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <__NVIC_EnableIRQ>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db0b      	blt.n	800527a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <__NVIC_EnableIRQ+0x38>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2001      	movs	r0, #1
 8005272:	fa00 f202 	lsl.w	r2, r0, r2
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e100 	.word	0xe000e100

0800528c <__NVIC_DisableIRQ>:
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	2b00      	cmp	r3, #0
 800529c:	db12      	blt.n	80052c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	490a      	ldr	r1, [pc, #40]	; (80052d0 <__NVIC_DisableIRQ+0x44>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2001      	movs	r0, #1
 80052ae:	fa00 f202 	lsl.w	r2, r0, r2
 80052b2:	3320      	adds	r3, #32
 80052b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80052b8:	f3bf 8f4f 	dsb	sy
}
 80052bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052be:	f3bf 8f6f 	isb	sy
}
 80052c2:	bf00      	nop
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000e100 	.word	0xe000e100

080052d4 <__NVIC_SetPriority>:
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db0a      	blt.n	80052fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	490c      	ldr	r1, [pc, #48]	; (8005320 <__NVIC_SetPriority+0x4c>)
 80052ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f2:	0112      	lsls	r2, r2, #4
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	440b      	add	r3, r1
 80052f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052fc:	e00a      	b.n	8005314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4908      	ldr	r1, [pc, #32]	; (8005324 <__NVIC_SetPriority+0x50>)
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	3b04      	subs	r3, #4
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	440b      	add	r3, r1
 8005312:	761a      	strb	r2, [r3, #24]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000e100 	.word	0xe000e100
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <SCB_CleanInvalidateDCache+0x8c>)
 8005330:	2200      	movs	r2, #0
 8005332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005336:	f3bf 8f4f 	dsb	sy
}
 800533a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800533c:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <SCB_CleanInvalidateDCache+0x8c>)
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005342:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0b5b      	lsrs	r3, r3, #13
 8005348:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800534c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005356:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005360:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005366:	4913      	ldr	r1, [pc, #76]	; (80053b4 <SCB_CleanInvalidateDCache+0x8c>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	60ba      	str	r2, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d000      	beq.n	8005384 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8005382:	e7e9      	b.n	8005358 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1e5a      	subs	r2, r3, #1
 8005388:	60fa      	str	r2, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d000      	beq.n	800539a <SCB_CleanInvalidateDCache+0x72>
    do {
 8005398:	e7d9      	b.n	800534e <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800539a:	f3bf 8f4f 	dsb	sy
}
 800539e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053a0:	f3bf 8f6f 	isb	sy
}
 80053a4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80053b8:	b5b0      	push	{r4, r5, r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f010 fa79 	bl	80158ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80053c8:	687d      	ldr	r5, [r7, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	335c      	adds	r3, #92	; 0x5c
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	f013 ff69 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4619      	mov	r1, r3
 80053da:	4628      	mov	r0, r5
 80053dc:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	490d      	ldr	r1, [pc, #52]	; (8005418 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff26 	bl	8005234 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fee1 	bl	80051b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3380      	adds	r3, #128	; 0x80
 80053fa:	681c      	ldr	r4, [r3, #0]
 80053fc:	2300      	movs	r3, #0
 80053fe:	2200      	movs	r2, #0
 8005400:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005404:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2101      	movs	r1, #1
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff feb0 	bl	8005170 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bdb0      	pop	{r4, r5, r7, pc}
 8005418:	0800386d 	.word	0x0800386d

0800541c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8005424:	2109      	movs	r1, #9
 8005426:	205a      	movs	r0, #90	; 0x5a
 8005428:	f7ff ff54 	bl	80052d4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800542c:	2109      	movs	r1, #9
 800542e:	2058      	movs	r0, #88	; 0x58
 8005430:	f7ff ff50 	bl	80052d4 <__NVIC_SetPriority>
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8005444:	205a      	movs	r0, #90	; 0x5a
 8005446:	f7ff ff03 	bl	8005250 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800544a:	2058      	movs	r0, #88	; 0x58
 800544c:	f7ff ff00 	bl	8005250 <__NVIC_EnableIRQ>
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8005460:	205a      	movs	r0, #90	; 0x5a
 8005462:	f7ff ff13 	bl	800528c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8005466:	2058      	movs	r0, #88	; 0x58
 8005468:	f7ff ff10 	bl	800528c <__NVIC_DisableIRQ>
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800548e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80054a2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80054a4:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	4a04      	ldr	r2, [pc, #16]	; (80054c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40016800 	.word	0x40016800
 80054c8:	200237fc 	.word	0x200237fc
 80054cc:	200237fe 	.word	0x200237fe

080054d0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4618      	mov	r0, r3
 80054dc:	f010 f9d4 	bl	8015888 <_ZN8touchgfx3HAL10beginFrameEv>
 80054e0:	4603      	mov	r3, r0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f010 f9d3 	bl	80158a0 <_ZN8touchgfx3HAL8endFrameEv>
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40016884 	.word	0x40016884

08005520 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8005532:	2201      	movs	r2, #1
 8005534:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40016884 	.word	0x40016884
 8005548:	40016800 	.word	0x40016800

0800554c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f010 f961 	bl	8015822 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8005576:	f7ff fed7 	bl	8005328 <SCB_CleanInvalidateDCache>
    }
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	f010 faa8 	bl	8015af2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80055a2:	4603      	mov	r3, r0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80055b4:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3301      	adds	r3, #1
 80055c8:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80055ca:	89fa      	ldrh	r2, [r7, #14]
 80055cc:	89bb      	ldrh	r3, [r7, #12]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d304      	bcc.n	80055dc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80055d2:	89fa      	ldrh	r2, [r7, #14]
 80055d4:	89bb      	ldrh	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	e000      	b.n	80055de <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40016800 	.word	0x40016800

080055f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800560e:	f7ff fe8b 	bl	8005328 <SCB_CleanInvalidateDCache>
    }
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005628:	4b08      	ldr	r3, [pc, #32]	; (800564c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800563e:	f7ff fe73 	bl	8005328 <SCB_CleanInvalidateDCache>
    }
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <HAL_LTDC_LineEventCallback+0x74>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	4a1a      	ldr	r2, [pc, #104]	; (80056c8 <HAL_LTDC_LineEventCallback+0x78>)
 800565e:	8812      	ldrh	r2, [r2, #0]
 8005660:	4293      	cmp	r3, r2
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d017      	beq.n	800569e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800566e:	4b17      	ldr	r3, [pc, #92]	; (80056cc <HAL_LTDC_LineEventCallback+0x7c>)
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f008 f835 	bl	800d6e4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800567a:	f7fe f9e9 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 800567e:	4603      	mov	r3, r0
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fd85 	bl	8005190 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8005686:	f7fe f8c9 	bl	800381c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800568a:	f7fe f9e1 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 800568e:	4603      	mov	r3, r0
 8005690:	4618      	mov	r0, r3
 8005692:	f010 feef 	bl	8016474 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8005696:	2000      	movs	r0, #0
 8005698:	f7fd fe2c 	bl	80032f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800569c:	e00e      	b.n	80056bc <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800569e:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <HAL_LTDC_LineEventCallback+0x78>)
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f008 f81d 	bl	800d6e4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80056aa:	2000      	movs	r0, #0
 80056ac:	f7fd fe2d 	bl	800330a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80056b0:	f7fe f9ce 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fd4c 	bl	8005154 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40016800 	.word	0x40016800
 80056c8:	200237fc 	.word	0x200237fc
 80056cc:	200237fe 	.word	0x200237fe

080056d0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b092      	sub	sp, #72	; 0x48
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	f040 8114 	bne.w	800590a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e8:	4293      	cmp	r3, r2
 80056ea:	f040 810e 	bne.w	800590a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80056ee:	2300      	movs	r3, #0
 80056f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005700:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005708:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800570c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005714:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	461a      	mov	r2, r3
 8005720:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	431a      	orrs	r2, r3
 8005728:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800572c:	4313      	orrs	r3, r2
 800572e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005732:	f107 0320 	add.w	r3, r7, #32
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe fccb 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800573e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8005740:	bf00      	nop
 8005742:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8005744:	4b73      	ldr	r3, [pc, #460]	; (8005914 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	23ff      	movs	r3, #255	; 0xff
 800574a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800574e:	2300      	movs	r3, #0
 8005750:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005754:	2300      	movs	r3, #0
 8005756:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800575a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800575e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005762:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800576e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005772:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	461a      	mov	r2, r3
 800577a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	431a      	orrs	r2, r3
 8005782:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800578c:	f107 031c 	add.w	r3, r7, #28
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fc9e 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8005798:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800579a:	bf00      	nop
 800579c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800579e:	4b5e      	ldr	r3, [pc, #376]	; (8005918 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80057a8:	23ff      	movs	r3, #255	; 0xff
 80057aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80057b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80057c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80057c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80057cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	461a      	mov	r2, r3
 80057d4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	431a      	orrs	r2, r3
 80057dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057e6:	f107 0318 	add.w	r3, r7, #24
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe fc71 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80057f2:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80057f4:	bf00      	nop
 80057f6:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80057f8:	4b48      	ldr	r3, [pc, #288]	; (800591c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005802:	2300      	movs	r3, #0
 8005804:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005808:	23ff      	movs	r3, #255	; 0xff
 800580a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800580e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005812:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005816:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800581a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800581e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005822:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005826:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	461a      	mov	r2, r3
 800582e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	431a      	orrs	r2, r3
 8005836:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800583a:	4313      	orrs	r3, r2
 800583c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fc44 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800584c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800584e:	bf00      	nop
 8005850:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8005852:	4b33      	ldr	r3, [pc, #204]	; (8005920 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	23f7      	movs	r3, #247	; 0xf7
 8005858:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800585c:	234c      	movs	r3, #76	; 0x4c
 800585e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005862:	2302      	movs	r3, #2
 8005864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005868:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800586c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005870:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005874:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800587c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005880:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	461a      	mov	r2, r3
 8005888:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	431a      	orrs	r2, r3
 8005890:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005894:	4313      	orrs	r3, r2
 8005896:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800589a:	f107 0310 	add.w	r3, r7, #16
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fc17 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80058a6:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80058a8:	bf00      	nop
 80058aa:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	23f7      	movs	r3, #247	; 0xf7
 80058b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80058b6:	23d2      	movs	r3, #210	; 0xd2
 80058b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80058bc:	2302      	movs	r3, #2
 80058be:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80058c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80058ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80058d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80058da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	461a      	mov	r2, r3
 80058e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	431a      	orrs	r2, r3
 80058ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fbea 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8005900:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8005902:	bf00      	nop
 8005904:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005906:	4b08      	ldr	r3, [pc, #32]	; (8005928 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	bf00      	nop
 800590c:	3748      	adds	r7, #72	; 0x48
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200237e4 	.word	0x200237e4
 8005918:	200237e8 	.word	0x200237e8
 800591c:	200237ec 	.word	0x200237ec
 8005920:	200237f0 	.word	0x200237f0
 8005924:	200237f4 	.word	0x200237f4
 8005928:	200237f8 	.word	0x200237f8

0800592c <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
 8005930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005934:	2001      	movs	r0, #1
 8005936:	f7ff fecb 	bl	80056d0 <_Z41__static_initialization_and_destruction_0ii>
 800593a:	bd80      	pop	{r7, pc}

0800593c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	2b09      	cmp	r3, #9
 800594c:	d848      	bhi.n	80059e0 <_ZN23ApplicationFontProvider7getFontEt+0xa4>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005987 	.word	0x08005987
 800595c:	08005991 	.word	0x08005991
 8005960:	0800599b 	.word	0x0800599b
 8005964:	080059a5 	.word	0x080059a5
 8005968:	080059af 	.word	0x080059af
 800596c:	080059b9 	.word	0x080059b9
 8005970:	080059c3 	.word	0x080059c3
 8005974:	080059cd 	.word	0x080059cd
 8005978:	080059d7 	.word	0x080059d7
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800597c:	f003 f988 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 8005980:	4603      	mov	r3, r0
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	e02d      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8005986:	f003 f983 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 800598a:	4603      	mov	r3, r0
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	e028      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005990:	f003 f97e 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 8005994:	4603      	mov	r3, r0
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	e023      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800599a:	f003 f979 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 800599e:	4603      	mov	r3, r0
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	e01e      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80059a4:	f003 f974 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 80059a8:	4603      	mov	r3, r0
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	e019      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80059ae:	f003 f96f 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 80059b2:	4603      	mov	r3, r0
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	e014      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80059b8:	f003 f96a 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 80059bc:	4603      	mov	r3, r0
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	e00f      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80059c2:	f003 f965 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 80059c6:	4603      	mov	r3, r0
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	e00a      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80059cc:	f003 f960 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 80059d0:	4603      	mov	r3, r0
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	e005      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_06:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80059d6:	f003 f95b 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 80059da:	4603      	mov	r3, r0
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	e000      	b.n	80059e2 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    default:
        return 0;
 80059e0:	2300      	movs	r3, #0
    }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop

080059ec <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
    return bitmap_database;
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	0802be24 	.word	0x0802be24

08005a00 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8005a04:	2301      	movs	r3, #1
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
    {
 8005a18:	4a04      	ldr	r2, [pc, #16]	; (8005a2c <_ZN8touchgfx4FontD1Ev+0x1c>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
    }
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	0802bfec 	.word	0x0802bfec

08005a30 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    }
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffe9 	bl	8005a10 <_ZN8touchgfx4FontD1Ev>
 8005a3e:	2110      	movs	r1, #16
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f020 fc00 	bl	8026246 <_ZdlPvj>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005a5c:	887b      	ldrh	r3, [r7, #2]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e010      	b.n	8005a88 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	681c      	ldr	r4, [r3, #0]
 8005a76:	f107 030f 	add.w	r3, r7, #15
 8005a7a:	f107 0210 	add.w	r2, r7, #16
 8005a7e:	8879      	ldrh	r1, [r7, #2]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	47a0      	blx	r4
 8005a84:	6178      	str	r0, [r7, #20]
        return glyph;
 8005a86:	697b      	ldr	r3, [r7, #20]
    }
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd90      	pop	{r4, r7, pc}

08005a90 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	895b      	ldrh	r3, [r3, #10]
    }
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	899b      	ldrh	r3, [r3, #12]
    }
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	889b      	ldrh	r3, [r3, #4]
    }
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	889a      	ldrh	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	799b      	ldrb	r3, [r3, #6]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4413      	add	r3, r2
 8005aec:	b29b      	uxth	r3, r3
    }
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	79db      	ldrb	r3, [r3, #7]
 8005b06:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8005b0a:	b2db      	uxtb	r3, r3
    }
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	79db      	ldrb	r3, [r3, #7]
 8005b24:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b28:	b2db      	uxtb	r3, r3
    }
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff ff61 	bl	8005a10 <_ZN8touchgfx4FontD1Ev>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	0802d918 	.word	0x0802d918

08005b5c <_ZN8touchgfx9ConstFontD0Ev>:
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ffe7 	bl	8005b38 <_ZN8touchgfx9ConstFontD1Ev>
 8005b6a:	2118      	movs	r1, #24
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f020 fb6a 	bl	8026246 <_ZdlPvj>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	4a05      	ldr	r2, [pc, #20]	; (8005b9c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff ffd3 	bl	8005b38 <_ZN8touchgfx9ConstFontD1Ev>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	0802be98 	.word	0x0802be98

08005ba0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ffe7 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 8005bae:	2128      	movs	r1, #40	; 0x28
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f020 fb48 	bl	8026246 <_ZdlPvj>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
    {
 8005bc8:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
    }
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	0802be40 	.word	0x0802be40

08005be0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
    }
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ffe9 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>
 8005bee:	2108      	movs	r1, #8
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f020 fb28 	bl	8026246 <_ZdlPvj>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	889a      	ldrh	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	809a      	strh	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	0802be40 	.word	0x0802be40

08005c2c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8005c4c:	4a07      	ldr	r2, [pc, #28]	; (8005c6c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	721a      	strb	r2, [r3, #8]
    {
    }
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	0802be74 	.word	0x0802be74

08005c70 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
    {
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
    }
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	0802be74 	.word	0x0802be74

08005c90 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
    }
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff ffe9 	bl	8005c70 <_ZN8touchgfx10TransitionD1Ev>
 8005c9e:	210c      	movs	r1, #12
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f020 fad0 	bl	8026246 <_ZdlPvj>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
    {
    }
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
    {
    }
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
    {
    }
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8005cf4:	f013 fad8 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	3230      	adds	r2, #48	; 0x30
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	4790      	blx	r2
    }
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
    }
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f013 fada 	bl	80192ec <_ZN8touchgfx11ApplicationC1Ev>
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8005d52:	6013      	str	r3, [r2, #0]
    }
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	0802bca4 	.word	0x0802bca4
 8005d64:	200567bc 	.word	0x200567bc

08005d68 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	601a      	str	r2, [r3, #0]
    }
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	721a      	strb	r2, [r3, #8]
    }
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	605a      	str	r2, [r3, #4]
    }
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	e002      	b.n	8005de4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
    }
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20056750 	.word	0x20056750

08005df4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff ff90 	bl	8005d28 <_ZN8touchgfx14MVPApplicationC1Ev>
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 f89f 	bl	8005f58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005e2a:	f7fd fe11 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	3208      	adds	r2, #8
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f002 feaf 	bl	8008ba0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005e42:	f7ff ffbb 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8005e46:	4603      	mov	r3, r0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f019 fe34 	bl	801fab6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	0802bc48 	.word	0x0802bc48

08005e5c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ffe9 	bl	8005e5c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	3208      	adds	r2, #8
 8005e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005eba:	4b10      	ldr	r3, [pc, #64]	; (8005efc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	f107 0008 	add.w	r0, r7, #8
 8005ec6:	f107 0318 	add.w	r3, r7, #24
 8005eca:	cb0c      	ldmia	r3, {r2, r3}
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	f000 f85f 	bl	8005f90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005ed2:	f107 0308 	add.w	r3, r7, #8
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff ffcb 	bl	8005e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe ffe2 	bl	8004eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005ef4:	bf00      	nop
 8005ef6:	3724      	adds	r7, #36	; 0x24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd90      	pop	{r4, r7, pc}
 8005efc:	08005f01 	.word	0x08005f01

08005f00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005f14:	461a      	mov	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8005f20:	4804      	ldr	r0, [pc, #16]	; (8005f34 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8005f22:	f000 f867 	bl	8005ff4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200567b0 	.word	0x200567b0
 8005f34:	200567ac 	.word	0x200567ac

08005f38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	0802bce8 	.word	0x0802bce8

08005f58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff ffe8 	bl	8005f38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	605a      	str	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	609a      	str	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
    }
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	0802bc8c 	.word	0x0802bc8c

08005f90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff ffc8 	bl	8005f38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005fa8:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	463a      	mov	r2, r7
 8005fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fbe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	0802bc8c 	.word	0x0802bc8c

08005fd0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fe32 	bl	8005c44 <_ZN8touchgfx10TransitionC1Ev>
 8005fe0:	4a03      	ldr	r2, [pc, #12]	; (8005ff0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	0802be50 	.word	0x0802be50

08005ff4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b08f      	sub	sp, #60	; 0x3c
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3320      	adds	r3, #32
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
 8006014:	4603      	mov	r3, r0
 8006016:	4a80      	ldr	r2, [pc, #512]	; (8006218 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d805      	bhi.n	8006028 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800601c:	4b7f      	ldr	r3, [pc, #508]	; (800621c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800601e:	4a80      	ldr	r2, [pc, #512]	; (8006220 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006020:	21a3      	movs	r1, #163	; 0xa3
 8006022:	4880      	ldr	r0, [pc, #512]	; (8006224 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006024:	f020 fa44 	bl	80264b0 <__assert_func>
 8006028:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3320      	adds	r3, #32
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	2b0f      	cmp	r3, #15
 8006040:	d805      	bhi.n	800604e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8006042:	4b79      	ldr	r3, [pc, #484]	; (8006228 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8006044:	4a76      	ldr	r2, [pc, #472]	; (8006220 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006046:	21a4      	movs	r1, #164	; 0xa4
 8006048:	4876      	ldr	r0, [pc, #472]	; (8006224 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800604a:	f020 fa31 	bl	80264b0 <__assert_func>
 800604e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3320      	adds	r3, #32
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4610      	mov	r0, r2
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	2b0b      	cmp	r3, #11
 8006066:	d805      	bhi.n	8006074 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8006068:	4b70      	ldr	r3, [pc, #448]	; (800622c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800606a:	4a6d      	ldr	r2, [pc, #436]	; (8006220 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800606c:	21a5      	movs	r1, #165	; 0xa5
 800606e:	486d      	ldr	r0, [pc, #436]	; (8006224 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006070:	f020 fa1e 	bl	80264b0 <__assert_func>
 8006074:	bf00      	nop
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8006082:	f013 f911 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 8006086:	4603      	mov	r3, r0
 8006088:	4618      	mov	r0, r3
 800608a:	f013 f913 	bl	80192b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
    if (*currentTrans)
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4610      	mov	r0, r2
 80060be:	4798      	blx	r3
    if (*currentScreen)
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3314      	adds	r3, #20
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4610      	mov	r0, r2
 80060d8:	4798      	blx	r3
    if (*currentPresenter)
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3304      	adds	r3, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
    if (*currentScreen)
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
    if (*currentPresenter)
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4610      	mov	r0, r2
 8006124:	4798      	blx	r3
}
 8006126:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f880 	bl	8006234 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8006134:	4603      	mov	r3, r0
 8006136:	4619      	mov	r1, r3
 8006138:	200c      	movs	r0, #12
 800613a:	f7ff fd77 	bl	8005c2c <_ZnwjPv>
 800613e:	4604      	mov	r4, r0
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff ff45 	bl	8005fd0 <_ZN8touchgfx12NoTransitionC1Ev>
 8006146:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f883 	bl	800625a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8006154:	4603      	mov	r3, r0
 8006156:	4619      	mov	r1, r3
 8006158:	4835      	ldr	r0, [pc, #212]	; (8006230 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 800615a:	f7ff fd67 	bl	8005c2c <_ZnwjPv>
 800615e:	4604      	mov	r4, r0
 8006160:	4620      	mov	r0, r4
 8006162:	f003 fa4f 	bl	8009604 <_ZN11Screen1ViewC1Ev>
 8006166:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f886 	bl	8006280 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8006174:	4603      	mov	r3, r0
 8006176:	4619      	mov	r1, r3
 8006178:	2010      	movs	r0, #16
 800617a:	f7ff fd57 	bl	8005c2c <_ZnwjPv>
 800617e:	4604      	mov	r4, r0
 8006180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006182:	4620      	mov	r0, r4
 8006184:	f003 f8b0 	bl	80092e8 <_ZN16Screen1PresenterC1ER11Screen1View>
 8006188:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800618e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006194:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	3304      	adds	r3, #4
 80061a6:	e000      	b.n	80061aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 80061a8:	2300      	movs	r3, #0
 80061aa:	4619      	mov	r1, r3
 80061ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80061ae:	f7ff fddb 	bl	8005d68 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	3304      	adds	r3, #4
 80061b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fdf0 	bl	8005d9e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f86f 	bl	80062a6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69f8      	ldr	r0, [r7, #28]
 80061de:	4798      	blx	r3
    newPresenter->activate();
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69b8      	ldr	r0, [r7, #24]
 80061e8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	69f8      	ldr	r0, [r7, #28]
 80061ee:	f014 fd38 	bl	801ac62 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3310      	adds	r3, #16
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6978      	ldr	r0, [r7, #20]
 80061fc:	4798      	blx	r3
    newTransition->invalidate();
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3314      	adds	r3, #20
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	4798      	blx	r3
}
 800620a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800620e:	4618      	mov	r0, r3
 8006210:	373c      	adds	r7, #60	; 0x3c
 8006212:	46bd      	mov	sp, r7
 8006214:	bd90      	pop	{r4, r7, pc}
 8006216:	bf00      	nop
 8006218:	0002268f 	.word	0x0002268f
 800621c:	0802b090 	.word	0x0802b090
 8006220:	0802b120 	.word	0x0802b120
 8006224:	0802b224 	.word	0x0802b224
 8006228:	0802b26c 	.word	0x0802b26c
 800622c:	0802b310 	.word	0x0802b310
 8006230:	00022690 	.word	0x00022690

08006234 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3324      	adds	r3, #36	; 0x24
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	887a      	ldrh	r2, [r7, #2]
 800624a:	4611      	mov	r1, r2
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	4603      	mov	r3, r0
    }
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3324      	adds	r3, #36	; 0x24
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	4611      	mov	r1, r2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
 8006276:	4603      	mov	r3, r0
    }
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3324      	adds	r3, #36	; 0x24
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	887a      	ldrh	r2, [r7, #2]
 8006296:	4611      	mov	r1, r2
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
 800629c:	4603      	mov	r3, r0
    }
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <_ZN8touchgfx12NoTransitionD1Ev>:
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	4a05      	ldr	r2, [pc, #20]	; (80062e4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fccb 	bl	8005c70 <_ZN8touchgfx10TransitionD1Ev>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	0802be50 	.word	0x0802be50

080062e8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ffe7 	bl	80062c4 <_ZN8touchgfx12NoTransitionD1Ev>
 80062f6:	210c      	movs	r1, #12
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f01f ffa4 	bl	8026246 <_ZdlPvj>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <_Z41__static_initialization_and_destruction_0ii>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b092      	sub	sp, #72	; 0x48
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 8114 	bne.w	8006542 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006320:	4293      	cmp	r3, r2
 8006322:	f040 810e 	bne.w	8006542 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006326:	2300      	movs	r3, #0
 8006328:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800632c:	2300      	movs	r3, #0
 800632e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006332:	2300      	movs	r3, #0
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006338:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800633c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006344:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800634c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006354:	041b      	lsls	r3, r3, #16
 8006356:	461a      	mov	r2, r3
 8006358:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	431a      	orrs	r2, r3
 8006360:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006364:	4313      	orrs	r3, r2
 8006366:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800636a:	f107 0320 	add.w	r3, r7, #32
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f7fd feaf 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8006376:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8006378:	bf00      	nop
 800637a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800637c:	4b73      	ldr	r3, [pc, #460]	; (800654c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	23ff      	movs	r3, #255	; 0xff
 8006382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006386:	2300      	movs	r3, #0
 8006388:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800638c:	2300      	movs	r3, #0
 800638e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006396:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800639a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80063a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80063aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ae:	041b      	lsls	r3, r3, #16
 80063b0:	461a      	mov	r2, r3
 80063b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	431a      	orrs	r2, r3
 80063ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80063be:	4313      	orrs	r3, r2
 80063c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80063c4:	f107 031c 	add.w	r3, r7, #28
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fd fe82 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80063d0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80063d2:	bf00      	nop
 80063d4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80063d6:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80063e0:	23ff      	movs	r3, #255	; 0xff
 80063e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80063f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80063f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80063fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006400:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006404:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	461a      	mov	r2, r3
 800640c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	431a      	orrs	r2, r3
 8006414:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006418:	4313      	orrs	r3, r2
 800641a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800641e:	f107 0318 	add.w	r3, r7, #24
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f7fd fe55 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800642a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800642c:	bf00      	nop
 800642e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8006430:	4b48      	ldr	r3, [pc, #288]	; (8006554 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800643a:	2300      	movs	r3, #0
 800643c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006440:	23ff      	movs	r3, #255	; 0xff
 8006442:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8006446:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800644a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800644e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006456:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800645a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800645e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	461a      	mov	r2, r3
 8006466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	431a      	orrs	r2, r3
 800646e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4611      	mov	r1, r2
 800647e:	4618      	mov	r0, r3
 8006480:	f7fd fe28 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8006484:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8006486:	bf00      	nop
 8006488:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800648a:	4b33      	ldr	r3, [pc, #204]	; (8006558 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	23f7      	movs	r3, #247	; 0xf7
 8006490:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006494:	234c      	movs	r3, #76	; 0x4c
 8006496:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800649a:	2302      	movs	r3, #2
 800649c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80064a0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80064a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80064a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80064ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80064b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80064b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80064b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	461a      	mov	r2, r3
 80064c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	431a      	orrs	r2, r3
 80064c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80064d2:	f107 0310 	add.w	r3, r7, #16
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fdfb 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80064de:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80064e0:	bf00      	nop
 80064e2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	23f7      	movs	r3, #247	; 0xf7
 80064ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80064ee:	23d2      	movs	r3, #210	; 0xd2
 80064f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80064f4:	2302      	movs	r3, #2
 80064f6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80064fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8006502:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800650e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006512:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	461a      	mov	r2, r3
 800651a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	431a      	orrs	r2, r3
 8006522:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006526:	4313      	orrs	r3, r2
 8006528:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800652c:	f107 030c 	add.w	r3, r7, #12
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd fdce 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8006538:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800653a:	bf00      	nop
 800653c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	bf00      	nop
 8006544:	3748      	adds	r7, #72	; 0x48
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20023800 	.word	0x20023800
 8006550:	20023804 	.word	0x20023804
 8006554:	20023808 	.word	0x20023808
 8006558:	2002380c 	.word	0x2002380c
 800655c:	20023810 	.word	0x20023810
 8006560:	20023814 	.word	0x20023814

08006564 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
 8006568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800656c:	2001      	movs	r0, #1
 800656e:	f7ff fecb 	bl	8006308 <_Z41__static_initialization_and_destruction_0ii>
 8006572:	bd80      	pop	{r7, pc}

08006574 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
    }
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08c      	sub	sp, #48	; 0x30
 80065a8:	af08      	add	r7, sp, #32
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	460b      	mov	r3, r1
 80065b4:	80fb      	strh	r3, [r7, #6]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	88b9      	ldrh	r1, [r7, #4]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065c2:	9306      	str	r3, [sp, #24]
 80065c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065d8:	9302      	str	r3, [sp, #8]
 80065da:	7f3b      	ldrb	r3, [r7, #28]
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	7e3b      	ldrb	r3, [r7, #24]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	460b      	mov	r3, r1
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	f013 fe95 	bl	801a314 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80065ea:	4a0a      	ldr	r2, [pc, #40]	; (8006614 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f4:	619a      	str	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006600:	621a      	str	r2, [r3, #32]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006606:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	0802be98 	.word	0x0802be98

08006618 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	889b      	ldrh	r3, [r3, #4]
 800662c:	0adb      	lsrs	r3, r3, #11
 800662e:	b29b      	uxth	r3, r3
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4413      	add	r3, r2
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800664a:	b480      	push	{r7}
 800664c:	b089      	sub	sp, #36	; 0x24
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	460b      	mov	r3, r1
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7b1b      	ldrb	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8006666:	2300      	movs	r3, #0
 8006668:	e030      	b.n	80066cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	7b5b      	ldrb	r3, [r3, #13]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	b21b      	sxth	r3, r3
 800667a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800667e:	b219      	sxth	r1, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	7adb      	ldrb	r3, [r3, #11]
 8006684:	b21b      	sxth	r3, r3
 8006686:	430b      	orrs	r3, r1
 8006688:	b21b      	sxth	r3, r3
 800668a:	b29b      	uxth	r3, r3
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7b1b      	ldrb	r3, [r3, #12]
 8006696:	837b      	strh	r3, [r7, #26]
 8006698:	8b7b      	ldrh	r3, [r7, #26]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d015      	beq.n	80066ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	897a      	ldrh	r2, [r7, #10]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d103      	bne.n	80066b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80066ae:	e00d      	b.n	80066cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	897a      	ldrh	r2, [r7, #10]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d306      	bcc.n	80066c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80066ba:	8b7b      	ldrh	r3, [r7, #26]
 80066bc:	3b01      	subs	r3, #1
 80066be:	837b      	strh	r3, [r7, #26]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3304      	adds	r3, #4
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	e7e7      	b.n	8006698 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80066c8:	bf00      	nop
        }
    }
    return 0;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3724      	adds	r7, #36	; 0x24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80066e0:	4a14      	ldr	r2, [pc, #80]	; (8006734 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fd01 	bl	80040f2 <_ZN8touchgfx4RectC1Ev>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	330c      	adds	r3, #12
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd fcfc 	bl	80040f2 <_ZN8touchgfx4RectC1Ev>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	619a      	str	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	61da      	str	r2, [r3, #28]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	841a      	strh	r2, [r3, #32]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	845a      	strh	r2, [r3, #34]	; 0x22
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	0802d8b4 	.word	0x0802d8b4

08006738 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
    {
 8006740:	4a04      	ldr	r2, [pc, #16]	; (8006754 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
    }
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	0802d8b4 	.word	0x0802d8b4

08006758 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    }
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ffe9 	bl	8006738 <_ZN8touchgfx8DrawableD1Ev>
 8006766:	2128      	movs	r1, #40	; 0x28
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f01f fd6c 	bl	8026246 <_ZdlPvj>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	809a      	strh	r2, [r3, #4]
    }
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	887a      	ldrh	r2, [r7, #2]
 80067a6:	80da      	strh	r2, [r3, #6]
    }
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	811a      	strh	r2, [r3, #8]
    }
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	887a      	ldrh	r2, [r7, #2]
 80067e2:	815a      	strh	r2, [r3, #10]
    }
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
    {
    }
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
    {
    }
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
    {
    }
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
    {
    }
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
    {
    }
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	807b      	strh	r3, [r7, #2]
 8006866:	4613      	mov	r3, r2
 8006868:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3350      	adds	r3, #80	; 0x50
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	8879      	ldrh	r1, [r7, #2]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800687a:	b292      	uxth	r2, r2
 800687c:	1a8a      	subs	r2, r1, r2
 800687e:	b292      	uxth	r2, r2
 8006880:	b210      	sxth	r0, r2
 8006882:	8839      	ldrh	r1, [r7, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800688a:	b292      	uxth	r2, r2
 800688c:	1a8a      	subs	r2, r1, r2
 800688e:	b292      	uxth	r2, r2
 8006890:	b212      	sxth	r2, r2
 8006892:	4601      	mov	r1, r0
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
    }
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff ff14 	bl	80066d8 <_ZN8touchgfx8DrawableC1Ev>
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	0802c5cc 	.word	0x0802c5cc

080068cc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	4a05      	ldr	r2, [pc, #20]	; (8006904 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ff1f 	bl	8006738 <_ZN8touchgfx8DrawableD1Ev>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	0802c5cc 	.word	0x0802c5cc

08006908 <_ZN8touchgfx9ContainerD0Ev>:
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff ffe7 	bl	80068e4 <_ZN8touchgfx9ContainerD1Ev>
 8006916:	212c      	movs	r1, #44	; 0x2c
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f01f fc94 	bl	8026246 <_ZdlPvj>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
        return 0;
 8006930:	2300      	movs	r3, #0
    }
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	461a      	mov	r2, r3
 800694c:	4603      	mov	r3, r0
 800694e:	817b      	strh	r3, [r7, #10]
 8006950:	460b      	mov	r3, r1
 8006952:	813b      	strh	r3, [r7, #8]
 8006954:	4613      	mov	r3, r2
 8006956:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8006958:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800695c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006960:	4619      	mov	r1, r3
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f80c 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8006968:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800696c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006970:	4619      	mov	r1, r3
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f822 	bl	80069bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	807b      	strh	r3, [r7, #2]
 800698c:	4613      	mov	r3, r2
 800698e:	803b      	strh	r3, [r7, #0]
        setX(x);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	332c      	adds	r3, #44	; 0x2c
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800699c:	4611      	mov	r1, r2
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
        setY(y);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3330      	adds	r3, #48	; 0x30
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80069ae:	4611      	mov	r1, r2
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
    }
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
 80069c8:	4613      	mov	r3, r2
 80069ca:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3334      	adds	r3, #52	; 0x34
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80069d8:	4611      	mov	r1, r2
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
        setHeight(height);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3338      	adds	r3, #56	; 0x38
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80069ea:	4611      	mov	r1, r2
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
    }
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
        return visible;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
        return touchable;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a3a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a42:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a4a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff ffe1 	bl	8006a2c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	601a      	str	r2, [r3, #0]
    }
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
    {
 8006a88:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff ff26 	bl	80068e4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	0802d9ac 	.word	0x0802d9ac

08006aa8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
    }
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ffe5 	bl	8006a80 <_ZN8touchgfx6ScreenD1Ev>
 8006ab6:	213c      	movs	r1, #60	; 0x3c
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f01f fbc4 	bl	8026246 <_ZdlPvj>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
    {
    }
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
    {
    }
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
    {
    }
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    {
    }
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
    {
    }
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f00e fd23 	bl	801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	817b      	strh	r3, [r7, #10]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff ff48 	bl	80069f8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff ff4e 	bl	8006a12 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
        }
    }
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fd9a 	bl	80066d8 <_ZN8touchgfx8DrawableC1Ev>
 8006ba4:	4a03      	ldr	r2, [pc, #12]	; (8006bb4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	0802bf6c 	.word	0x0802bf6c

08006bb8 <_ZN8touchgfx6WidgetD1Ev>:
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	4a05      	ldr	r2, [pc, #20]	; (8006bd8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fdb5 	bl	8006738 <_ZN8touchgfx8DrawableD1Ev>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	0802bf6c 	.word	0x0802bf6c

08006bdc <_ZN8touchgfx6WidgetD0Ev>:
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ffe7 	bl	8006bb8 <_ZN8touchgfx6WidgetD1Ev>
 8006bea:	2128      	movs	r1, #40	; 0x28
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f01f fb2a 	bl	8026246 <_ZdlPvj>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4618      	mov	r0, r3
 8006c08:	2326      	movs	r3, #38	; 0x26
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f01f fcdb 	bl	80265c8 <memset>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff ffbd 	bl	8006b94 <_ZN8touchgfx6WidgetC1Ev>
 8006c1a:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	22ff      	movs	r2, #255	; 0xff
 8006c24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3328      	adds	r3, #40	; 0x28
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd fa50 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	0802d468 	.word	0x0802d468

08006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8006c6c:	4a06      	ldr	r2, [pc, #24]	; (8006c88 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	887a      	ldrh	r2, [r7, #2]
 8006c76:	809a      	strh	r2, [r3, #4]
    }
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	0802be40 	.word	0x0802be40

08006c8c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	2326      	movs	r3, #38	; 0x26
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	f01f fc93 	bl	80265c8 <memset>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff75 	bl	8006b94 <_ZN8touchgfx6WidgetC1Ev>
 8006caa:	4a14      	ldr	r2, [pc, #80]	; (8006cfc <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3328      	adds	r3, #40	; 0x28
 8006cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff ffd1 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3330      	adds	r3, #48	; 0x30
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd fa05 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	869a      	strh	r2, [r3, #52]	; 0x34
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	22ff      	movs	r2, #255	; 0xff
 8006cd4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	0802d3c0 	.word	0x0802d3c0

08006d00 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3328      	adds	r3, #40	; 0x28
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe ff54 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff ff4c 	bl	8006bb8 <_ZN8touchgfx6WidgetD1Ev>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	0802d3c0 	.word	0x0802d3c0

08006d30 <_ZN8touchgfx8TextAreaD0Ev>:
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff ffe1 	bl	8006d00 <_ZN8touchgfx8TextAreaD1Ev>
 8006d3e:	213c      	movs	r1, #60	; 0x3c
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f01f fa80 	bl	8026246 <_ZdlPvj>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff ff96 	bl	8006c8c <_ZN8touchgfx8TextAreaC1Ev>
 8006d60:	4a05      	ldr	r2, [pc, #20]	; (8006d78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	0802d4cc 	.word	0x0802d4cc

08006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8006db8:	4a09      	ldr	r2, [pc, #36]	; (8006de0 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	809a      	strh	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	80da      	strh	r2, [r3, #6]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	22ff      	movs	r2, #255	; 0xff
 8006dce:	721a      	strb	r2, [r3, #8]
    {
    }
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	0802bf58 	.word	0x0802bf58

08006de4 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
    {
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
    }
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	0802bf58 	.word	0x0802bf58

08006e04 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
    }
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ffe9 	bl	8006de4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006e12:	210c      	movs	r1, #12
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f01f fa16 	bl	8026246 <_ZdlPvj>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
            : v(i)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	601a      	str	r2, [r3, #0]
        {
        }
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
        {
            return v;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
        }
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8006e5a:	b590      	push	{r4, r7, lr}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3340      	adds	r3, #64	; 0x40
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ffea 	bl	8006e42 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	463b      	mov	r3, r7
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff ffe5 	bl	8006e42 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	bf0c      	ite	eq
 8006e7e:	2301      	moveq	r3, #1
 8006e80:	2300      	movne	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f00f ff90 	bl	8016db4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8006e94:	e000      	b.n	8006e98 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8006e96:	bf00      	nop
    }
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd90      	pop	{r4, r7, pc}
	...

08006ea0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ff80 	bl	8006db0 <_ZN8touchgfx15AbstractPainterC1Ev>
 8006eb0:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	60da      	str	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	611a      	str	r2, [r3, #16]
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8006ec6:	f7fe ff79 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	3224      	adds	r2, #36	; 0x24
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	4790      	blx	r2
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8006ee6:	f7fc fdb3 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 8006eea:	4603      	mov	r3, r0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff53 	bl	8006d98 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bf14      	ite	ne
 8006ef8:	2301      	movne	r3, #1
 8006efa:	2300      	moveq	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01b      	beq.n	8006f3a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8006f02:	f7fc fda5 	bl	8003a50 <_ZN8touchgfx3HAL11getInstanceEv>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff45 	bl	8006d98 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	3224      	adds	r2, #36	; 0x24
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	4790      	blx	r2
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bf0c      	ite	eq
 8006f24:	2301      	moveq	r3, #1
 8006f26:	2300      	movne	r3, #0
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8006f42:	4a07      	ldr	r2, [pc, #28]	; (8006f60 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8006f44:	2128      	movs	r1, #40	; 0x28
 8006f46:	4807      	ldr	r0, [pc, #28]	; (8006f64 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8006f48:	f01f fab2 	bl	80264b0 <__assert_func>
 8006f4c:	bf00      	nop
    }
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	0802cf54 	.word	0x0802cf54
 8006f5c:	0802b3b4 	.word	0x0802b3b4
 8006f60:	0802b414 	.word	0x0802b414
 8006f64:	0802b450 	.word	0x0802b450

08006f68 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	4a05      	ldr	r2, [pc, #20]	; (8006f88 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff33 	bl	8006de4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	0802cf54 	.word	0x0802cf54

08006f8c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff ffe7 	bl	8006f68 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8006f9a:	2114      	movs	r1, #20
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f01f f952 	bl	8026246 <_ZdlPvj>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ff71 	bl	8006ea0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	751a      	strb	r2, [r3, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	755a      	strb	r2, [r3, #21]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f807 	bl	8006fec <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	0802cf74 	.word	0x0802cf74

08006fec <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8006ffa:	f107 0314 	add.w	r3, r7, #20
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fc fc98 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 8007004:	4603      	mov	r3, r0
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	751a      	strb	r2, [r3, #20]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8007012:	f107 0310 	add.w	r3, r7, #16
 8007016:	4618      	mov	r0, r3
 8007018:	f7fc fc8c 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 800701c:	4603      	mov	r3, r0
 800701e:	0a1b      	lsrs	r3, r3, #8
 8007020:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	755a      	strb	r2, [r3, #21]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800702a:	f107 030c 	add.w	r3, r7, #12
 800702e:	4618      	mov	r0, r3
 8007030:	f7fc fc80 	bl	8003934 <_ZNK8touchgfx9colortypecvmEv>
 8007034:	4603      	mov	r3, r0
 8007036:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	759a      	strb	r2, [r3, #22]
    }
 800703c:	bf00      	nop
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	4a0d      	ldr	r2, [pc, #52]	; (8007084 <_ZN11tempBoxBaseD1Ev+0x40>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	33b8      	adds	r3, #184	; 0xb8
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fe52 	bl	8006d00 <_ZN8touchgfx8TextAreaD1Ev>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	33a0      	adds	r3, #160	; 0xa0
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f997 	bl	8008394 <_ZN8touchgfx13PainterRGB888D1Ev>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	332c      	adds	r3, #44	; 0x2c
 800706a:	4618      	mov	r0, r3
 800706c:	f001 f970 	bl	8008350 <_ZN8touchgfx4LineD1Ev>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fc36 	bl	80068e4 <_ZN8touchgfx9ContainerD1Ev>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	0802c0cc 	.word	0x0802c0cc

08007088 <_ZN11tempBoxBaseD0Ev>:
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff ffd7 	bl	8007044 <_ZN11tempBoxBaseD1Ev>
 8007096:	21f4      	movs	r1, #244	; 0xf4
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f01f f8d4 	bl	8026246 <_ZdlPvj>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <_ZN7tempBoxD1Ev+0x7c>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	f646 031c 	movw	r3, #26652	; 0x681c
 80070bc:	4413      	add	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d011      	beq.n	80070e6 <_ZN7tempBoxD1Ev+0x3e>
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	f646 031c 	movw	r3, #26652	; 0x681c
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	f646 031c 	movw	r3, #26652	; 0x681c
 80070d4:	4413      	add	r3, r2
 80070d6:	429c      	cmp	r4, r3
 80070d8:	d005      	beq.n	80070e6 <_ZN7tempBoxD1Ev+0x3e>
 80070da:	3c18      	subs	r4, #24
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4620      	mov	r0, r4
 80070e2:	4798      	blx	r3
 80070e4:	e7f3      	b.n	80070ce <_ZN7tempBoxD1Ev+0x26>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <_ZN7tempBoxD1Ev+0x6a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80070f6:	f246 34b0 	movw	r4, #25520	; 0x63b0
 80070fa:	441c      	add	r4, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8007102:	429c      	cmp	r4, r3
 8007104:	d005      	beq.n	8007112 <_ZN7tempBoxD1Ev+0x6a>
 8007106:	3c74      	subs	r4, #116	; 0x74
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4620      	mov	r0, r4
 800710e:	4798      	blx	r3
 8007110:	e7f4      	b.n	80070fc <_ZN7tempBoxD1Ev+0x54>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff ff95 	bl	8007044 <_ZN11tempBoxBaseD1Ev>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	0802c268 	.word	0x0802c268

08007128 <_ZN7tempBoxD0Ev>:
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ffb9 	bl	80070a8 <_ZN7tempBoxD1Ev>
 8007136:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f01f f883 	bl	8026246 <_ZdlPvj>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	4a05      	ldr	r2, [pc, #20]	; (800716c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fd2b 	bl	8006bb8 <_ZN8touchgfx6WidgetD1Ev>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	0802d468 	.word	0x0802d468

08007170 <_ZN8touchgfx3BoxD0Ev>:
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ffe7 	bl	800714c <_ZN8touchgfx3BoxD1Ev>
 800717e:	212c      	movs	r1, #44	; 0x2c
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f01f f860 	bl	8026246 <_ZdlPvj>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <_ZN12alertBarBaseD1Ev+0x34>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3360      	adds	r3, #96	; 0x60
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 f93a 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	332c      	adds	r3, #44	; 0x2c
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f913 	bl	80083d8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fb95 	bl	80068e4 <_ZN8touchgfx9ContainerD1Ev>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	0802c040 	.word	0x0802c040

080071c8 <_ZN12alertBarBaseD0Ev>:
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff ffdd 	bl	8007190 <_ZN12alertBarBaseD1Ev>
 80071d6:	21a0      	movs	r1, #160	; 0xa0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f01f f834 	bl	8026246 <_ZdlPvj>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	4a05      	ldr	r2, [pc, #20]	; (8007208 <_ZN8alertBarD1Ev+0x20>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ffc9 	bl	8007190 <_ZN12alertBarBaseD1Ev>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	0802c1dc 	.word	0x0802c1dc

0800720c <_ZN8alertBarD0Ev>:
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff ffe7 	bl	80071e8 <_ZN8alertBarD1Ev>
 800721a:	21d8      	movs	r1, #216	; 0xd8
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f01f f812 	bl	8026246 <_ZdlPvj>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	4a05      	ldr	r2, [pc, #20]	; (800724c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fc1f 	bl	8006a80 <_ZN8touchgfx6ScreenD1Ev>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	0802bf24 	.word	0x0802bf24

08007250 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ffe7 	bl	800722c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800725e:	2140      	movs	r1, #64	; 0x40
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f01e fff0 	bl	8026246 <_ZdlPvj>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	4a34      	ldr	r2, [pc, #208]	; (800734c <_ZN15Screen1ViewBaseD1Ev+0xdc>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	4b33      	ldr	r3, [pc, #204]	; (8007350 <_ZN15Screen1ViewBaseD1Ev+0xe0>)
 8007282:	4413      	add	r3, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f001 f8c9 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4b31      	ldr	r3, [pc, #196]	; (8007354 <_ZN15Screen1ViewBaseD1Ev+0xe4>)
 800728e:	4413      	add	r3, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f8c3 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <_ZN15Screen1ViewBaseD1Ev+0xe8>)
 800729a:	4413      	add	r3, r2
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ffa3 	bl	80071e8 <_ZN8alertBarD1Ev>
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4b2d      	ldr	r3, [pc, #180]	; (800735c <_ZN15Screen1ViewBaseD1Ev+0xec>)
 80072a6:	4413      	add	r3, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ff9d 	bl	80071e8 <_ZN8alertBarD1Ev>
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4b2b      	ldr	r3, [pc, #172]	; (8007360 <_ZN15Screen1ViewBaseD1Ev+0xf0>)
 80072b2:	4413      	add	r3, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fef7 	bl	80070a8 <_ZN7tempBoxD1Ev>
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80072c0:	4413      	add	r3, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fef0 	bl	80070a8 <_ZN7tempBoxD1Ev>
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80072ce:	4413      	add	r3, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fee9 	bl	80070a8 <_ZN7tempBoxD1Ev>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fee3 	bl	80070a8 <_ZN7tempBoxD1Ev>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f897 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f891 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f88b 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f841 	bl	8008394 <_ZN8touchgfx13PainterRGB888D1Ev>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	33d8      	adds	r3, #216	; 0xd8
 8007316:	4618      	mov	r0, r3
 8007318:	f001 f81a 	bl	8008350 <_ZN8touchgfx4LineD1Ev>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3398      	adds	r3, #152	; 0x98
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f87b 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	336c      	adds	r3, #108	; 0x6c
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff ff0e 	bl	800714c <_ZN8touchgfx3BoxD1Ev>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3340      	adds	r3, #64	; 0x40
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ff09 	bl	800714c <_ZN8touchgfx3BoxD1Ev>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff ff75 	bl	800722c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	0802bef0 	.word	0x0802bef0
 8007350:	0001f704 	.word	0x0001f704
 8007354:	0001f6c4 	.word	0x0001f6c4
 8007358:	0001f5ec 	.word	0x0001f5ec
 800735c:	0001f514 	.word	0x0001f514
 8007360:	00017858 	.word	0x00017858

08007364 <_ZN15Screen1ViewBaseD0Ev>:
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ff7f 	bl	8007270 <_ZN15Screen1ViewBaseD1Ev>
 8007372:	4904      	ldr	r1, [pc, #16]	; (8007384 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f01e ff66 	bl	8026246 <_ZdlPvj>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	0002268c 	.word	0x0002268c

08007388 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b0c9      	sub	sp, #292	; 0x124
 800738c:	af02      	add	r7, sp, #8
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	6018      	str	r0, [r3, #0]
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fe10 	bl	8007fbc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800739c:	4aa6      	ldr	r2, [pc, #664]	; (8007638 <_ZN15Screen1ViewBaseC1Ev+0x2b0>)
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3340      	adds	r3, #64	; 0x40
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff fc26 	bl	8006bfc <_ZN8touchgfx3BoxC1Ev>
 80073b0:	1d3b      	adds	r3, r7, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	336c      	adds	r3, #108	; 0x6c
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fc20 	bl	8006bfc <_ZN8touchgfx3BoxC1Ev>
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3398      	adds	r3, #152	; 0x98
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fcc4 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80073c8:	1d3b      	adds	r3, r7, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	33d8      	adds	r3, #216	; 0xd8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f00f fcd0 	bl	8016d74 <_ZN8touchgfx4LineC1Ev>
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80073dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fc fe76 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80073e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7ff fdde 	bl	8006fac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fca9 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fca2 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fc9b 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007422:	4618      	mov	r0, r3
 8007424:	f003 f80e 	bl	800a444 <_ZN7tempBoxC1Ev>
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007430:	4413      	add	r3, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f003 f806 	bl	800a444 <_ZN7tempBoxC1Ev>
 8007438:	1d3b      	adds	r3, r7, #4
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007440:	4413      	add	r3, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f002 fffe 	bl	800a444 <_ZN7tempBoxC1Ev>
 8007448:	1d3b      	adds	r3, r7, #4
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	4b7b      	ldr	r3, [pc, #492]	; (800763c <_ZN15Screen1ViewBaseC1Ev+0x2b4>)
 800744e:	4413      	add	r3, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f002 fff7 	bl	800a444 <_ZN7tempBoxC1Ev>
 8007456:	1d3b      	adds	r3, r7, #4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b79      	ldr	r3, [pc, #484]	; (8007640 <_ZN15Screen1ViewBaseC1Ev+0x2b8>)
 800745c:	4413      	add	r3, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f002 fdf0 	bl	800a044 <_ZN8alertBarC1Ev>
 8007464:	1d3b      	adds	r3, r7, #4
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b76      	ldr	r3, [pc, #472]	; (8007644 <_ZN15Screen1ViewBaseC1Ev+0x2bc>)
 800746a:	4413      	add	r3, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f002 fde9 	bl	800a044 <_ZN8alertBarC1Ev>
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4b74      	ldr	r3, [pc, #464]	; (8007648 <_ZN15Screen1ViewBaseC1Ev+0x2c0>)
 8007478:	4413      	add	r3, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fc68 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007480:	1d3b      	adds	r3, r7, #4
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b71      	ldr	r3, [pc, #452]	; (800764c <_ZN15Screen1ViewBaseC1Ev+0x2c4>)
 8007486:	4413      	add	r3, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fc61 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b6f      	ldr	r3, [pc, #444]	; (8007650 <_ZN15Screen1ViewBaseC1Ev+0x2c8>)
 8007494:	4413      	add	r3, r2
 8007496:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800749a:	4618      	mov	r0, r3
 800749c:	f010 f9f0 	bl	8017880 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80074a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	f7ff fa42 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80074ba:	1d3b      	adds	r3, r7, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80074d4:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	461a      	mov	r2, r3
 80074dc:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	431a      	orrs	r2, r3
 80074e4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fc fded 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80074fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fe:	4619      	mov	r1, r3
 8007500:	4620      	mov	r0, r4
 8007502:	f7ff fb9f 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800750e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	f240 3325 	movw	r3, #805	; 0x325
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	f7ff fa0f 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8007528:	2300      	movs	r3, #0
 800752a:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 800752e:	2300      	movs	r3, #0
 8007530:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8007534:	2300      	movs	r3, #0
 8007536:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 800753a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	461a      	mov	r2, r3
 8007542:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	431a      	orrs	r2, r3
 800754a:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800754e:	4313      	orrs	r3, r2
 8007550:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007554:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7fc fdba 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8007560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007564:	4619      	mov	r1, r3
 8007566:	4620      	mov	r0, r4
 8007568:	f7ff fb6c 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3398      	adds	r3, #152	; 0x98
 8007572:	223c      	movs	r2, #60	; 0x3c
 8007574:	f240 114b 	movw	r1, #331	; 0x14b
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fa01 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800757e:	1d3b      	adds	r3, r7, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007586:	23ff      	movs	r3, #255	; 0xff
 8007588:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800758c:	23ff      	movs	r3, #255	; 0xff
 800758e:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8007592:	23ff      	movs	r3, #255	; 0xff
 8007594:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8007598:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	461a      	mov	r2, r3
 80075a0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	431a      	orrs	r2, r3
 80075a8:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80075b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fc fd8b 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80075be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075c2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80075c6:	623b      	str	r3, [r7, #32]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80075c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075cc:	6a3a      	ldr	r2, [r7, #32]
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80075d0:	bf00      	nop
    gearArea.setLinespacing(0);
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3398      	adds	r3, #152	; 0x98
 80075d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075dc:	2300      	movs	r3, #0
 80075de:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80075e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075e6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80075ea:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80075ec:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 80075ee:	1d3b      	adds	r3, r7, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4c18      	ldr	r4, [pc, #96]	; (8007654 <_ZN15Screen1ViewBaseC1Ev+0x2cc>)
 80075f4:	441c      	add	r4, r3
 80075f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075fa:	210b      	movs	r1, #11
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fb2f 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8007602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800760a:	4b13      	ldr	r3, [pc, #76]	; (8007658 <_ZN15Screen1ViewBaseC1Ev+0x2d0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d105      	bne.n	800761e <_ZN15Screen1ViewBaseC1Ev+0x296>
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <_ZN15Screen1ViewBaseC1Ev+0x2d4>)
 8007614:	4a12      	ldr	r2, [pc, #72]	; (8007660 <_ZN15Screen1ViewBaseC1Ev+0x2d8>)
 8007616:	21ae      	movs	r1, #174	; 0xae
 8007618:	4812      	ldr	r0, [pc, #72]	; (8007664 <_ZN15Screen1ViewBaseC1Ev+0x2dc>)
 800761a:	f01e ff49 	bl	80264b0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800761e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007622:	889a      	ldrh	r2, [r3, #4]
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <_ZN15Screen1ViewBaseC1Ev+0x2e0>)
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d321      	bcc.n	8007670 <_ZN15Screen1ViewBaseC1Ev+0x2e8>
 800762c:	4b0f      	ldr	r3, [pc, #60]	; (800766c <_ZN15Screen1ViewBaseC1Ev+0x2e4>)
 800762e:	4a0c      	ldr	r2, [pc, #48]	; (8007660 <_ZN15Screen1ViewBaseC1Ev+0x2d8>)
 8007630:	21af      	movs	r1, #175	; 0xaf
 8007632:	480c      	ldr	r0, [pc, #48]	; (8007664 <_ZN15Screen1ViewBaseC1Ev+0x2dc>)
 8007634:	f01e ff3c 	bl	80264b0 <__assert_func>
 8007638:	0802bef0 	.word	0x0802bef0
 800763c:	00017858 	.word	0x00017858
 8007640:	0001f514 	.word	0x0001f514
 8007644:	0001f5ec 	.word	0x0001f5ec
 8007648:	0001f6c4 	.word	0x0001f6c4
 800764c:	0001f704 	.word	0x0001f704
 8007650:	0001f7ac 	.word	0x0001f7ac
 8007654:	0001f744 	.word	0x0001f744
 8007658:	200567c0 	.word	0x200567c0
 800765c:	0802b4b4 	.word	0x0802b4b4
 8007660:	0802b4f8 	.word	0x0802b4f8
 8007664:	0802b528 	.word	0x0802b528
 8007668:	200567c4 	.word	0x200567c4
 800766c:	0802b570 	.word	0x0802b570
    }
 8007670:	bf00      	nop
        return texts->getText(typedTextId);
 8007672:	4bd0      	ldr	r3, [pc, #832]	; (80079b4 <_ZN15Screen1ViewBaseC1Ev+0x62c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fae6 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 8007680:	4603      	mov	r3, r0
 8007682:	bf00      	nop
 8007684:	4acc      	ldr	r2, [pc, #816]	; (80079b8 <_ZN15Screen1ViewBaseC1Ev+0x630>)
 8007686:	2102      	movs	r1, #2
 8007688:	4620      	mov	r0, r4
 800768a:	f014 fe05 	bl	801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800768e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fa94 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8007698:	1d3b      	adds	r3, r7, #4
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4bc5      	ldr	r3, [pc, #788]	; (80079bc <_ZN15Screen1ViewBaseC1Ev+0x634>)
 80076a6:	4413      	add	r3, r2
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7ff fb67 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3398      	adds	r3, #152	; 0x98
 80076b4:	4618      	mov	r0, r3
 80076b6:	f00f ff0b 	bl	80174d0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80076c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fac9 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 80076ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076d2:	4619      	mov	r1, r3
 80076d4:	4620      	mov	r0, r4
 80076d6:	f00f ff18 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80076da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fa6e 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 80076e4:	1d3b      	adds	r3, r7, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80076ec:	2314      	movs	r3, #20
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2398      	movs	r3, #152	; 0x98
 80076f2:	228c      	movs	r2, #140	; 0x8c
 80076f4:	f240 1149 	movw	r1, #329	; 0x149
 80076f8:	f7ff f921 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007704:	23ff      	movs	r3, #255	; 0xff
 8007706:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 800770a:	23ff      	movs	r3, #255	; 0xff
 800770c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8007710:	23ff      	movs	r3, #255	; 0xff
 8007712:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 8007716:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	461a      	mov	r2, r3
 800771e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	431a      	orrs	r2, r3
 8007726:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800772a:	4313      	orrs	r3, r2
 800772c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007730:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc fccc 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800773c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007740:	4619      	mov	r1, r3
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff fc52 	bl	8006fec <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8007750:	1d3b      	adds	r3, r7, #4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f00f f92e 	bl	80169bc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	33d8      	adds	r3, #216	; 0xd8
 8007766:	2200      	movs	r2, #0
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fc3c 	bl	8007fe8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	33d8      	adds	r3, #216	; 0xd8
 8007776:	2200      	movs	r2, #0
 8007778:	2196      	movs	r1, #150	; 0x96
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fc5a 	bl	8008034 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 8007780:	1d3b      	adds	r3, r7, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	33d8      	adds	r3, #216	; 0xd8
 8007786:	2104      	movs	r1, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fc79 	bl	8008080 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800778e:	1d3b      	adds	r3, r7, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	33d8      	adds	r3, #216	; 0xd8
 8007794:	2101      	movs	r1, #1
 8007796:	4618      	mov	r0, r3
 8007798:	f00f fc32 	bl	8017000 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 800779c:	1d3b      	adds	r3, r7, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80077a4:	2345      	movs	r3, #69	; 0x45
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	23d4      	movs	r3, #212	; 0xd4
 80077aa:	2247      	movs	r2, #71	; 0x47
 80077ac:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80077b0:	f7ff f8c5 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 80077b4:	1d3b      	adds	r3, r7, #4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80077c2:	2366      	movs	r3, #102	; 0x66
 80077c4:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80077c8:	23ff      	movs	r3, #255	; 0xff
 80077ca:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 80077ce:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	461a      	mov	r2, r3
 80077d6:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	431a      	orrs	r2, r3
 80077de:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fc fc70 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80077f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077f8:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80077fc:	61fb      	str	r3, [r7, #28]
        this->color = color;
 80077fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007806:	bf00      	nop
    rpmArea.setLinespacing(0);
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007814:	2300      	movs	r3, #0
 8007816:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 800781a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800781e:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8007822:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007824:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8007826:	1d3b      	adds	r3, r7, #4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4c65      	ldr	r4, [pc, #404]	; (80079c0 <_ZN15Screen1ViewBaseC1Ev+0x638>)
 800782c:	441c      	add	r4, r3
 800782e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007832:	210a      	movs	r1, #10
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff fa13 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 800783a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800783e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007842:	4b60      	ldr	r3, [pc, #384]	; (80079c4 <_ZN15Screen1ViewBaseC1Ev+0x63c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <_ZN15Screen1ViewBaseC1Ev+0x4ce>
 800784a:	4b5f      	ldr	r3, [pc, #380]	; (80079c8 <_ZN15Screen1ViewBaseC1Ev+0x640>)
 800784c:	4a5f      	ldr	r2, [pc, #380]	; (80079cc <_ZN15Screen1ViewBaseC1Ev+0x644>)
 800784e:	21ae      	movs	r1, #174	; 0xae
 8007850:	485f      	ldr	r0, [pc, #380]	; (80079d0 <_ZN15Screen1ViewBaseC1Ev+0x648>)
 8007852:	f01e fe2d 	bl	80264b0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800785a:	889a      	ldrh	r2, [r3, #4]
 800785c:	4b5d      	ldr	r3, [pc, #372]	; (80079d4 <_ZN15Screen1ViewBaseC1Ev+0x64c>)
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d305      	bcc.n	8007870 <_ZN15Screen1ViewBaseC1Ev+0x4e8>
 8007864:	4b5c      	ldr	r3, [pc, #368]	; (80079d8 <_ZN15Screen1ViewBaseC1Ev+0x650>)
 8007866:	4a59      	ldr	r2, [pc, #356]	; (80079cc <_ZN15Screen1ViewBaseC1Ev+0x644>)
 8007868:	21af      	movs	r1, #175	; 0xaf
 800786a:	4859      	ldr	r0, [pc, #356]	; (80079d0 <_ZN15Screen1ViewBaseC1Ev+0x648>)
 800786c:	f01e fe20 	bl	80264b0 <__assert_func>
    }
 8007870:	bf00      	nop
        return texts->getText(typedTextId);
 8007872:	4b50      	ldr	r3, [pc, #320]	; (80079b4 <_ZN15Screen1ViewBaseC1Ev+0x62c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f001 f9e6 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 8007880:	4603      	mov	r3, r0
 8007882:	bf00      	nop
 8007884:	4a4c      	ldr	r2, [pc, #304]	; (80079b8 <_ZN15Screen1ViewBaseC1Ev+0x630>)
 8007886:	210a      	movs	r1, #10
 8007888:	4620      	mov	r0, r4
 800788a:	f014 fd05 	bl	801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800788e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe f994 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8007898:	1d3b      	adds	r3, r7, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b46      	ldr	r3, [pc, #280]	; (80079c0 <_ZN15Screen1ViewBaseC1Ev+0x638>)
 80078a6:	4413      	add	r3, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	f7ff fa67 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 80078ae:	1d3b      	adds	r3, r7, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 80078b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078ba:	2101      	movs	r1, #1
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff f9cf 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 80078c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078c6:	4619      	mov	r1, r3
 80078c8:	4620      	mov	r0, r4
 80078ca:	f00f fe1e 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80078ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe f974 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 80078d8:	1d3b      	adds	r3, r7, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 80078e0:	2331      	movs	r3, #49	; 0x31
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	23f0      	movs	r3, #240	; 0xf0
 80078e6:	2252      	movs	r2, #82	; 0x52
 80078e8:	210e      	movs	r1, #14
 80078ea:	f7ff f828 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 80078f6:	23ff      	movs	r3, #255	; 0xff
 80078f8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80078fc:	23ff      	movs	r3, #255	; 0xff
 80078fe:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8007902:	23ff      	movs	r3, #255	; 0xff
 8007904:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8007908:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800790c:	041b      	lsls	r3, r3, #16
 800790e:	461a      	mov	r2, r3
 8007910:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	431a      	orrs	r2, r3
 8007918:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800791c:	4313      	orrs	r3, r2
 800791e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007922:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007926:	4611      	mov	r1, r2
 8007928:	4618      	mov	r0, r3
 800792a:	f7fc fbd3 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800792e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007932:	461a      	mov	r2, r3
 8007934:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8007938:	f107 0318 	add.w	r3, r7, #24
 800793c:	601a      	str	r2, [r3, #0]
        this->color = color;
 800793e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007942:	f107 0218 	add.w	r2, r7, #24
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800794a:	bf00      	nop
    battArea.setLinespacing(0);
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007958:	2300      	movs	r3, #0
 800795a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        linespace = space;
 800795e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007962:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8007966:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007968:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 800796a:	1d3b      	adds	r3, r7, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4c1b      	ldr	r4, [pc, #108]	; (80079dc <_ZN15Screen1ViewBaseC1Ev+0x654>)
 8007970:	441c      	add	r4, r3
 8007972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007976:	2108      	movs	r1, #8
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff f971 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 800797e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <_ZN15Screen1ViewBaseC1Ev+0x63c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d105      	bne.n	800799a <_ZN15Screen1ViewBaseC1Ev+0x612>
 800798e:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <_ZN15Screen1ViewBaseC1Ev+0x640>)
 8007990:	4a0e      	ldr	r2, [pc, #56]	; (80079cc <_ZN15Screen1ViewBaseC1Ev+0x644>)
 8007992:	21ae      	movs	r1, #174	; 0xae
 8007994:	480e      	ldr	r0, [pc, #56]	; (80079d0 <_ZN15Screen1ViewBaseC1Ev+0x648>)
 8007996:	f01e fd8b 	bl	80264b0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800799a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799e:	889a      	ldrh	r2, [r3, #4]
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <_ZN15Screen1ViewBaseC1Ev+0x64c>)
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d31b      	bcc.n	80079e0 <_ZN15Screen1ViewBaseC1Ev+0x658>
 80079a8:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <_ZN15Screen1ViewBaseC1Ev+0x650>)
 80079aa:	4a08      	ldr	r2, [pc, #32]	; (80079cc <_ZN15Screen1ViewBaseC1Ev+0x644>)
 80079ac:	21af      	movs	r1, #175	; 0xaf
 80079ae:	4808      	ldr	r0, [pc, #32]	; (80079d0 <_ZN15Screen1ViewBaseC1Ev+0x648>)
 80079b0:	f01e fd7e 	bl	80264b0 <__assert_func>
 80079b4:	200567cc 	.word	0x200567cc
 80079b8:	0802b5c4 	.word	0x0802b5c4
 80079bc:	0001f744 	.word	0x0001f744
 80079c0:	0001f748 	.word	0x0001f748
 80079c4:	200567c0 	.word	0x200567c0
 80079c8:	0802b4b4 	.word	0x0802b4b4
 80079cc:	0802b4f8 	.word	0x0802b4f8
 80079d0:	0802b528 	.word	0x0802b528
 80079d4:	200567c4 	.word	0x200567c4
 80079d8:	0802b570 	.word	0x0802b570
 80079dc:	0001f75c 	.word	0x0001f75c
    }
 80079e0:	bf00      	nop
        return texts->getText(typedTextId);
 80079e2:	4ba7      	ldr	r3, [pc, #668]	; (8007c80 <_ZN15Screen1ViewBaseC1Ev+0x8f8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 f92d 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 80079f2:	4603      	mov	r3, r0
 80079f4:	bf00      	nop
 80079f6:	4aa3      	ldr	r2, [pc, #652]	; (8007c84 <_ZN15Screen1ViewBaseC1Ev+0x8fc>)
 80079f8:	210a      	movs	r1, #10
 80079fa:	4620      	mov	r0, r4
 80079fc:	f014 fc4c 	bl	801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007a00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe f8db 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8007a0a:	1d3b      	adds	r3, r7, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	4b9c      	ldr	r3, [pc, #624]	; (8007c88 <_ZN15Screen1ViewBaseC1Ev+0x900>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f7ff f9ae 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007a28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff f916 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8007a34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f00f fd65 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007a40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe f8bb 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007a52:	2331      	movs	r3, #49	; 0x31
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	23f0      	movs	r3, #240	; 0xf0
 8007a58:	2252      	movs	r2, #82	; 0x52
 8007a5a:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007a5e:	f7fe ff6e 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007a6a:	23ff      	movs	r3, #255	; 0xff
 8007a6c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8007a70:	23ff      	movs	r3, #255	; 0xff
 8007a72:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8007a76:	23ff      	movs	r3, #255	; 0xff
 8007a78:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8007a7c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8007a80:	041b      	lsls	r3, r3, #16
 8007a82:	461a      	mov	r2, r3
 8007a84:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fc fb19 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8007aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8007aac:	f107 0314 	add.w	r3, r7, #20
 8007ab0:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007ab2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ab6:	f107 0214 	add.w	r2, r7, #20
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007abe:	bf00      	nop
    oilPressArea.setLinespacing(0);
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ac8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
        linespace = space;
 8007ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ad6:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8007ada:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007adc:	bf00      	nop
    oilPressAreaBuffer[0] = 0;
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4b6a      	ldr	r3, [pc, #424]	; (8007c8c <_ZN15Screen1ViewBaseC1Ev+0x904>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	801a      	strh	r2, [r3, #0]
    oilPressArea.setWildcard(oilPressAreaBuffer);
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b65      	ldr	r3, [pc, #404]	; (8007c8c <_ZN15Screen1ViewBaseC1Ev+0x904>)
 8007af8:	4413      	add	r3, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	f7ff f93e 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8007b00:	1d3b      	adds	r3, r7, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007b08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b0c:	2103      	movs	r1, #3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff f8a6 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8007b14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f00f fcf5 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007b20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe f84b 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 8007b2a:	1d3b      	adds	r3, r7, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007b32:	22f8      	movs	r2, #248	; 0xf8
 8007b34:	210b      	movs	r1, #11
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe ff22 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 8007b3c:	1d3b      	adds	r3, r7, #4
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007b44:	4413      	add	r3, r2
 8007b46:	f240 1249 	movw	r2, #329	; 0x149
 8007b4a:	210b      	movs	r1, #11
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe ff17 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007b5a:	4413      	add	r3, r2
 8007b5c:	22f8      	movs	r2, #248	; 0xf8
 8007b5e:	f240 213a 	movw	r1, #570	; 0x23a
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe ff0c 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 8007b68:	1d3b      	adds	r3, r7, #4
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <_ZN15Screen1ViewBaseC1Ev+0x908>)
 8007b6e:	4413      	add	r3, r2
 8007b70:	f240 1249 	movw	r2, #329	; 0x149
 8007b74:	f240 213a 	movw	r1, #570	; 0x23a
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe ff01 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b44      	ldr	r3, [pc, #272]	; (8007c94 <_ZN15Screen1ViewBaseC1Ev+0x90c>)
 8007b84:	4413      	add	r3, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fef8 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 8007b90:	1d3b      	adds	r3, r7, #4
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b40      	ldr	r3, [pc, #256]	; (8007c98 <_ZN15Screen1ViewBaseC1Ev+0x910>)
 8007b96:	4413      	add	r3, r2
 8007b98:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe feee 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8007ba4:	1d3b      	adds	r3, r7, #4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	483c      	ldr	r0, [pc, #240]	; (8007c9c <_ZN15Screen1ViewBaseC1Ev+0x914>)
 8007baa:	4418      	add	r0, r3
 8007bac:	2331      	movs	r3, #49	; 0x31
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	23ee      	movs	r3, #238	; 0xee
 8007bb2:	2296      	movs	r2, #150	; 0x96
 8007bb4:	210e      	movs	r1, #14
 8007bb6:	f7fe fec2 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007bba:	1d3b      	adds	r3, r7, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4c37      	ldr	r4, [pc, #220]	; (8007c9c <_ZN15Screen1ViewBaseC1Ev+0x914>)
 8007bc0:	441c      	add	r4, r3
 8007bc2:	23ff      	movs	r3, #255	; 0xff
 8007bc4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8007bc8:	23ff      	movs	r3, #255	; 0xff
 8007bca:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8007bce:	23ff      	movs	r3, #255	; 0xff
 8007bd0:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8007bd4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8007bd8:	041b      	lsls	r3, r3, #16
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	431a      	orrs	r2, r3
 8007be4:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007bee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fc fa6d 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8007bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8007c02:	f107 0310 	add.w	r3, r7, #16
 8007c06:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007c08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c0c:	f107 0210 	add.w	r2, r7, #16
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007c14:	bf00      	nop
    cltArea.setLinespacing(0);
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <_ZN15Screen1ViewBaseC1Ev+0x914>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c22:	2300      	movs	r3, #0
 8007c24:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        linespace = space;
 8007c28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c2c:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8007c30:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007c32:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 8007c34:	1d3b      	adds	r3, r7, #4
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4c19      	ldr	r4, [pc, #100]	; (8007ca0 <_ZN15Screen1ViewBaseC1Ev+0x918>)
 8007c3a:	441c      	add	r4, r3
 8007c3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c40:	2109      	movs	r1, #9
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff f80c 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8007c48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007c50:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <_ZN15Screen1ViewBaseC1Ev+0x91c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <_ZN15Screen1ViewBaseC1Ev+0x8dc>
 8007c58:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <_ZN15Screen1ViewBaseC1Ev+0x920>)
 8007c5a:	4a14      	ldr	r2, [pc, #80]	; (8007cac <_ZN15Screen1ViewBaseC1Ev+0x924>)
 8007c5c:	21ae      	movs	r1, #174	; 0xae
 8007c5e:	4814      	ldr	r0, [pc, #80]	; (8007cb0 <_ZN15Screen1ViewBaseC1Ev+0x928>)
 8007c60:	f01e fc26 	bl	80264b0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c68:	889a      	ldrh	r2, [r3, #4]
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <_ZN15Screen1ViewBaseC1Ev+0x92c>)
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d324      	bcc.n	8007cbc <_ZN15Screen1ViewBaseC1Ev+0x934>
 8007c72:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <_ZN15Screen1ViewBaseC1Ev+0x930>)
 8007c74:	4a0d      	ldr	r2, [pc, #52]	; (8007cac <_ZN15Screen1ViewBaseC1Ev+0x924>)
 8007c76:	21af      	movs	r1, #175	; 0xaf
 8007c78:	480d      	ldr	r0, [pc, #52]	; (8007cb0 <_ZN15Screen1ViewBaseC1Ev+0x928>)
 8007c7a:	f01e fc19 	bl	80264b0 <__assert_func>
 8007c7e:	bf00      	nop
 8007c80:	200567cc 	.word	0x200567cc
 8007c84:	0802b5c4 	.word	0x0802b5c4
 8007c88:	0001f75c 	.word	0x0001f75c
 8007c8c:	0001f770 	.word	0x0001f770
 8007c90:	00017858 	.word	0x00017858
 8007c94:	0001f514 	.word	0x0001f514
 8007c98:	0001f5ec 	.word	0x0001f5ec
 8007c9c:	0001f6c4 	.word	0x0001f6c4
 8007ca0:	0001f784 	.word	0x0001f784
 8007ca4:	200567c0 	.word	0x200567c0
 8007ca8:	0802b4b4 	.word	0x0802b4b4
 8007cac:	0802b4f8 	.word	0x0802b4f8
 8007cb0:	0802b528 	.word	0x0802b528
 8007cb4:	200567c4 	.word	0x200567c4
 8007cb8:	0802b570 	.word	0x0802b570
    }
 8007cbc:	bf00      	nop
        return texts->getText(typedTextId);
 8007cbe:	4b9c      	ldr	r3, [pc, #624]	; (8007f30 <_ZN15Screen1ViewBaseC1Ev+0xba8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 ffbf 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	bf00      	nop
 8007cd2:	4a98      	ldr	r2, [pc, #608]	; (8007f34 <_ZN15Screen1ViewBaseC1Ev+0xbac>)
 8007cd4:	210a      	movs	r1, #10
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f014 fade 	bl	801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007cdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd ff6d 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8007ce6:	1d3b      	adds	r3, r7, #4
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b93      	ldr	r3, [pc, #588]	; (8007f38 <_ZN15Screen1ViewBaseC1Ev+0xbb0>)
 8007cec:	4413      	add	r3, r2
 8007cee:	1d3a      	adds	r2, r7, #4
 8007cf0:	6811      	ldr	r1, [r2, #0]
 8007cf2:	4a92      	ldr	r2, [pc, #584]	; (8007f3c <_ZN15Screen1ViewBaseC1Ev+0xbb4>)
 8007cf4:	440a      	add	r2, r1
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff f83f 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8007cfe:	1d3b      	adds	r3, r7, #4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4c8d      	ldr	r4, [pc, #564]	; (8007f38 <_ZN15Screen1ViewBaseC1Ev+0xbb0>)
 8007d04:	441c      	add	r4, r3
 8007d06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d0a:	2107      	movs	r1, #7
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe ffa7 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8007d12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d16:	4619      	mov	r1, r3
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f00f fbf6 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007d1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fd ff4c 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 8007d28:	1d3b      	adds	r3, r7, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4884      	ldr	r0, [pc, #528]	; (8007f40 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007d2e:	4418      	add	r0, r3
 8007d30:	2331      	movs	r3, #49	; 0x31
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	23f0      	movs	r3, #240	; 0xf0
 8007d36:	2296      	movs	r2, #150	; 0x96
 8007d38:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007d3c:	f7fe fdff 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4c7e      	ldr	r4, [pc, #504]	; (8007f40 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007d46:	441c      	add	r4, r3
 8007d48:	23ff      	movs	r3, #255	; 0xff
 8007d4a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8007d4e:	23ff      	movs	r3, #255	; 0xff
 8007d50:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8007d54:	23ff      	movs	r3, #255	; 0xff
 8007d56:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
 8007d5a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007d5e:	041b      	lsls	r3, r3, #16
 8007d60:	461a      	mov	r2, r3
 8007d62:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007d74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc f9aa 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8007d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
 8007d88:	f107 030c 	add.w	r3, r7, #12
 8007d8c:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d92:	f107 020c 	add.w	r2, r7, #12
 8007d96:	6812      	ldr	r2, [r2, #0]
 8007d98:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007d9a:	bf00      	nop
    oilTempArea.setLinespacing(0);
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b67      	ldr	r3, [pc, #412]	; (8007f40 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007da2:	4413      	add	r3, r2
 8007da4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007da8:	2300      	movs	r3, #0
 8007daa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
        linespace = space;
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db2:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8007db6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007db8:	bf00      	nop
    oilTempAreaBuffer[0] = 0;
 8007dba:	1d3b      	adds	r3, r7, #4
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b61      	ldr	r3, [pc, #388]	; (8007f44 <_ZN15Screen1ViewBaseC1Ev+0xbbc>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	801a      	strh	r2, [r3, #0]
    oilTempArea.setWildcard(oilTempAreaBuffer);
 8007dc6:	1d3b      	adds	r3, r7, #4
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b5d      	ldr	r3, [pc, #372]	; (8007f40 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	1d3a      	adds	r2, r7, #4
 8007dd0:	6811      	ldr	r1, [r2, #0]
 8007dd2:	4a5c      	ldr	r2, [pc, #368]	; (8007f44 <_ZN15Screen1ViewBaseC1Ev+0xbbc>)
 8007dd4:	440a      	add	r2, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe ffcf 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8007dde:	1d3b      	adds	r3, r7, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4c57      	ldr	r4, [pc, #348]	; (8007f40 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007de4:	441c      	add	r4, r3
 8007de6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007dea:	210c      	movs	r1, #12
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe ff37 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8007df2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007df6:	4619      	mov	r1, r3
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f00f fb86 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007dfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fd fedc 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8007e08:	1d3b      	adds	r3, r7, #4
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	1d3b      	adds	r3, r7, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3340      	adds	r3, #64	; 0x40
 8007e12:	4619      	mov	r1, r3
 8007e14:	4610      	mov	r0, r2
 8007e16:	f7fe fe8b 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8007e1a:	1d3b      	adds	r3, r7, #4
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	1d3b      	adds	r3, r7, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	336c      	adds	r3, #108	; 0x6c
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fe82 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	1d3b      	adds	r3, r7, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3398      	adds	r3, #152	; 0x98
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fe fe79 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	33d8      	adds	r3, #216	; 0xd8
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7fe fe70 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8007e50:	1d3b      	adds	r3, r7, #4
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe fe66 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8007e64:	1d3b      	adds	r3, r7, #4
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	1d3b      	adds	r3, r7, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fe fe5c 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 8007e78:	1d3b      	adds	r3, r7, #4
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	1d3b      	adds	r3, r7, #4
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f7fe fe52 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	1d3b      	adds	r3, r7, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f7fe fe48 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	1d3b      	adds	r3, r7, #4
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007eac:	4413      	add	r3, r2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	f7fe fe3e 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007ec0:	4413      	add	r3, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f7fe fe34 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	1d3b      	adds	r3, r7, #4
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <_ZN15Screen1ViewBaseC1Ev+0xbc0>)
 8007ed2:	4413      	add	r3, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f7fe fe2b 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	1d3b      	adds	r3, r7, #4
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b1a      	ldr	r3, [pc, #104]	; (8007f4c <_ZN15Screen1ViewBaseC1Ev+0xbc4>)
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f7fe fe22 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 8007eec:	1d3b      	adds	r3, r7, #4
 8007eee:	6818      	ldr	r0, [r3, #0]
 8007ef0:	1d3b      	adds	r3, r7, #4
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <_ZN15Screen1ViewBaseC1Ev+0xbc8>)
 8007ef6:	4413      	add	r3, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f7fe fe19 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8007efe:	1d3b      	adds	r3, r7, #4
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	1d3b      	adds	r3, r7, #4
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <_ZN15Screen1ViewBaseC1Ev+0xbb0>)
 8007f08:	4413      	add	r3, r2
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	f7fe fe10 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 8007f10:	1d3b      	adds	r3, r7, #4
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	1d3b      	adds	r3, r7, #4
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007f1a:	4413      	add	r3, r2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f7fe fe07 	bl	8006b30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd90      	pop	{r4, r7, pc}
 8007f30:	200567cc 	.word	0x200567cc
 8007f34:	0802b5c4 	.word	0x0802b5c4
 8007f38:	0001f6c4 	.word	0x0001f6c4
 8007f3c:	0001f784 	.word	0x0001f784
 8007f40:	0001f704 	.word	0x0001f704
 8007f44:	0001f798 	.word	0x0001f798
 8007f48:	00017858 	.word	0x00017858
 8007f4c:	0001f514 	.word	0x0001f514
 8007f50:	0001f5ec 	.word	0x0001f5ec

08007f54 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007f62:	4618      	mov	r0, r3
 8007f64:	f002 fb4e 	bl	800a604 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007f6e:	4413      	add	r3, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 fb47 	bl	800a604 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007f7c:	4413      	add	r3, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 fb40 	bl	800a604 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <_ZN15Screen1ViewBase11setupScreenEv+0x5c>)
 8007f88:	4413      	add	r3, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f002 fb3a 	bl	800a604 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4b08      	ldr	r3, [pc, #32]	; (8007fb4 <_ZN15Screen1ViewBase11setupScreenEv+0x60>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f882 	bl	800a0a0 <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <_ZN15Screen1ViewBase11setupScreenEv+0x64>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f002 f87c 	bl	800a0a0 <_ZN8alertBar10initializeEv>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	00017858 	.word	0x00017858
 8007fb4:	0001f514 	.word	0x0001f514
 8007fb8:	0001f5ec 	.word	0x0001f5ec

08007fbc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f012 fcce 	bl	801a968 <_ZN8touchgfx6ScreenC1Ev>
 8007fcc:	4a05      	ldr	r2, [pc, #20]	; (8007fe4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	0802bf24 	.word	0x0802bf24

08007fe8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8007fe8:	b590      	push	{r4, r7, lr}
 8007fea:	b089      	sub	sp, #36	; 0x24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe ff0e 	bl	8006e24 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	461c      	mov	r4, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	f107 0310 	add.w	r3, r7, #16
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe ff02 	bl	8006e24 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008020:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8008022:	461a      	mov	r2, r3
 8008024:	4621      	mov	r1, r4
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f00e ffd4 	bl	8016fd4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 800802c:	bf00      	nop
 800802e:	3724      	adds	r7, #36	; 0x24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd90      	pop	{r4, r7, pc}

08008034 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8008034:	b590      	push	{r4, r7, lr}
 8008036:	b089      	sub	sp, #36	; 0x24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe fee8 	bl	8006e24 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	461c      	mov	r4, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fedc 	bl	8006e24 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800806c:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800806e:	461a      	mov	r2, r3
 8008070:	4621      	mov	r1, r4
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f00e ffb9 	bl	8016fea <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8008078:	bf00      	nop
 800807a:	3724      	adds	r7, #36	; 0x24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd90      	pop	{r4, r7, pc}

08008080 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4611      	mov	r1, r2
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fec3 	bl	8006e24 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800809e:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe fed9 	bl	8006e5a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80080a8:	bf00      	nop
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <_Z41__static_initialization_and_destruction_0ii>:
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b092      	sub	sp, #72	; 0x48
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	f040 8114 	bne.w	80082ea <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080c8:	4293      	cmp	r3, r2
 80080ca:	f040 810e 	bne.w	80082ea <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80080e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80080e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80080e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80080f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80080f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	461a      	mov	r2, r3
 8008100:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	431a      	orrs	r2, r3
 8008108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800810c:	4313      	orrs	r3, r2
 800810e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008112:	f107 0320 	add.w	r3, r7, #32
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fb ffdb 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800811e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8008120:	bf00      	nop
 8008122:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8008124:	4b73      	ldr	r3, [pc, #460]	; (80082f4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	23ff      	movs	r3, #255	; 0xff
 800812a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800812e:	2300      	movs	r3, #0
 8008130:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008134:	2300      	movs	r3, #0
 8008136:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800813a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800813e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008142:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800814e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	461a      	mov	r2, r3
 800815a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	431a      	orrs	r2, r3
 8008162:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008166:	4313      	orrs	r3, r2
 8008168:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800816c:	f107 031c 	add.w	r3, r7, #28
 8008170:	4611      	mov	r1, r2
 8008172:	4618      	mov	r0, r3
 8008174:	f7fb ffae 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008178:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800817a:	bf00      	nop
 800817c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800817e:	4b5e      	ldr	r3, [pc, #376]	; (80082f8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	2300      	movs	r3, #0
 8008184:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008188:	23ff      	movs	r3, #255	; 0xff
 800818a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800818e:	2300      	movs	r3, #0
 8008190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008194:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008198:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800819c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80081a0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80081a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80081ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80081b0:	041b      	lsls	r3, r3, #16
 80081b2:	461a      	mov	r2, r3
 80081b4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	431a      	orrs	r2, r3
 80081bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80081c6:	f107 0318 	add.w	r3, r7, #24
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fb ff81 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80081d2:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80081d4:	bf00      	nop
 80081d6:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80081d8:	4b48      	ldr	r3, [pc, #288]	; (80082fc <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80081e8:	23ff      	movs	r3, #255	; 0xff
 80081ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80081ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80081f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80081f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80081fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80081fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008202:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008206:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	461a      	mov	r2, r3
 800820e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	431a      	orrs	r2, r3
 8008216:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800821a:	4313      	orrs	r3, r2
 800821c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f7fb ff54 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800822c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800822e:	bf00      	nop
 8008230:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8008232:	4b33      	ldr	r3, [pc, #204]	; (8008300 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	23f7      	movs	r3, #247	; 0xf7
 8008238:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800823c:	234c      	movs	r3, #76	; 0x4c
 800823e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008242:	2302      	movs	r3, #2
 8008244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008248:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800824c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008250:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008254:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008258:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800825c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008260:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	461a      	mov	r2, r3
 8008268:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	431a      	orrs	r2, r3
 8008270:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008274:	4313      	orrs	r3, r2
 8008276:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800827a:	f107 0310 	add.w	r3, r7, #16
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f7fb ff27 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008286:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008288:	bf00      	nop
 800828a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800828c:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	23f7      	movs	r3, #247	; 0xf7
 8008292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008296:	23d2      	movs	r3, #210	; 0xd2
 8008298:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800829c:	2302      	movs	r3, #2
 800829e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80082a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80082aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80082b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80082ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	461a      	mov	r2, r3
 80082c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	431a      	orrs	r2, r3
 80082ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80082d4:	f107 030c 	add.w	r3, r7, #12
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb fefa 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80082e0:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80082e2:	bf00      	nop
 80082e4:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	bf00      	nop
 80082ec:	3748      	adds	r7, #72	; 0x48
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20023818 	.word	0x20023818
 80082f8:	2002381c 	.word	0x2002381c
 80082fc:	20023820 	.word	0x20023820
 8008300:	20023824 	.word	0x20023824
 8008304:	20023828 	.word	0x20023828
 8008308:	2002382c 	.word	0x2002382c

0800830c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	4a05      	ldr	r2, [pc, #20]	; (800832c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe fc4b 	bl	8006bb8 <_ZN8touchgfx6WidgetD1Ev>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	0802cff8 	.word	0x0802cff8

08008330 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff ffe7 	bl	800830c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800833e:	2130      	movs	r1, #48	; 0x30
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f01d ff80 	bl	8026246 <_ZdlPvj>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	4a05      	ldr	r2, [pc, #20]	; (8008370 <_ZN8touchgfx4LineD1Ev+0x20>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff ffd3 	bl	800830c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	0802d21c 	.word	0x0802d21c

08008374 <_ZN8touchgfx4LineD0Ev>:
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff ffe7 	bl	8008350 <_ZN8touchgfx4LineD1Ev>
 8008382:	2174      	movs	r1, #116	; 0x74
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f01d ff5e 	bl	8026246 <_ZdlPvj>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	4a05      	ldr	r2, [pc, #20]	; (80083b4 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fddf 	bl	8006f68 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	0802cf74 	.word	0x0802cf74

080083b8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff ffe7 	bl	8008394 <_ZN8touchgfx13PainterRGB888D1Ev>
 80083c6:	2118      	movs	r1, #24
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f01d ff3c 	bl	8026246 <_ZdlPvj>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	4a05      	ldr	r2, [pc, #20]	; (80083f8 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe feaf 	bl	800714c <_ZN8touchgfx3BoxD1Ev>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	0802d574 	.word	0x0802d574

080083fc <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff ffe7 	bl	80083d8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800840a:	2134      	movs	r1, #52	; 0x34
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f01d ff1a 	bl	8026246 <_ZdlPvj>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	4a05      	ldr	r2, [pc, #20]	; (800843c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fc67 	bl	8006d00 <_ZN8touchgfx8TextAreaD1Ev>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	0802d4cc 	.word	0x0802d4cc

08008440 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff ffe7 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800844e:	2140      	movs	r1, #64	; 0x40
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f01d fef8 	bl	8026246 <_ZdlPvj>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <_GLOBAL__sub_I__ZN15Screen1ViewBaseC2Ev>:
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
 8008464:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008468:	2001      	movs	r0, #1
 800846a:	f7ff fe21 	bl	80080b0 <_Z41__static_initialization_and_destruction_0ii>
 800846e:	bd80      	pop	{r7, pc}

08008470 <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__tcf_0+0xc>)
 8008476:	f7fd fb81 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20023830 	.word	0x20023830

08008480 <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	; 0x30
 8008484:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 8008486:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f3bf 8f5b 	dmb	ish
 800848e:	b2db      	uxtb	r3, r3
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d02c      	beq.n	80084fc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 80084a2:	4818      	ldr	r0, [pc, #96]	; (8008504 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 80084a4:	f01d fed1 	bl	802624a <__cxa_guard_acquire>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf14      	ite	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	2300      	moveq	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d021      	beq.n	80084fc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 80084b8:	2300      	movs	r3, #0
 80084ba:	930a      	str	r3, [sp, #40]	; 0x28
 80084bc:	2300      	movs	r3, #0
 80084be:	9309      	str	r3, [sp, #36]	; 0x24
 80084c0:	2300      	movs	r3, #0
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	233f      	movs	r3, #63	; 0x3f
 80084c6:	9307      	str	r3, [sp, #28]
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 80084ca:	9306      	str	r3, [sp, #24]
 80084cc:	4b0f      	ldr	r3, [pc, #60]	; (800850c <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 80084ce:	9305      	str	r3, [sp, #20]
 80084d0:	2300      	movs	r3, #0
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	2300      	movs	r3, #0
 80084d6:	9303      	str	r3, [sp, #12]
 80084d8:	2301      	movs	r3, #1
 80084da:	9302      	str	r3, [sp, #8]
 80084dc:	2304      	movs	r3, #4
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	2307      	movs	r3, #7
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	2328      	movs	r3, #40	; 0x28
 80084e6:	2242      	movs	r2, #66	; 0x42
 80084e8:	4909      	ldr	r1, [pc, #36]	; (8008510 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 80084ea:	480a      	ldr	r0, [pc, #40]	; (8008514 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 80084ec:	f7fe f85a 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80084f0:	4804      	ldr	r0, [pc, #16]	; (8008504 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 80084f2:	f01d feb6 	bl	8026262 <__cxa_guard_release>
 80084f6:	4808      	ldr	r0, [pc, #32]	; (8008518 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 80084f8:	f01d fff8 	bl	80264ec <atexit>
    return JetBrainsMono_Regular_40_4bpp;
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20023858 	.word	0x20023858
 8008508:	080d8ea4 	.word	0x080d8ea4
 800850c:	0802bfc8 	.word	0x0802bfc8
 8008510:	080d7cfc 	.word	0x080d7cfc
 8008514:	20023830 	.word	0x20023830
 8008518:	08008471 	.word	0x08008471

0800851c <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__tcf_0+0xc>)
 8008522:	f7fd fb2b 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 8008526:	bd80      	pop	{r7, pc}
 8008528:	2002385c 	.word	0x2002385c

0800852c <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08c      	sub	sp, #48	; 0x30
 8008530:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 8008532:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f3bf 8f5b 	dmb	ish
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf0c      	ite	eq
 8008544:	2301      	moveq	r3, #1
 8008546:	2300      	movne	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02c      	beq.n	80085a8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800854e:	4818      	ldr	r0, [pc, #96]	; (80085b0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 8008550:	f01d fe7b 	bl	802624a <__cxa_guard_acquire>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	bf14      	ite	ne
 800855a:	2301      	movne	r3, #1
 800855c:	2300      	moveq	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d021      	beq.n	80085a8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 8008564:	2300      	movs	r3, #0
 8008566:	930a      	str	r3, [sp, #40]	; 0x28
 8008568:	2300      	movs	r3, #0
 800856a:	9309      	str	r3, [sp, #36]	; 0x24
 800856c:	2300      	movs	r3, #0
 800856e:	9308      	str	r3, [sp, #32]
 8008570:	233f      	movs	r3, #63	; 0x3f
 8008572:	9307      	str	r3, [sp, #28]
 8008574:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 8008576:	9306      	str	r3, [sp, #24]
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	2300      	movs	r3, #0
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	2300      	movs	r3, #0
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	2301      	movs	r3, #1
 8008586:	9302      	str	r3, [sp, #8]
 8008588:	2304      	movs	r3, #4
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	230b      	movs	r3, #11
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	233c      	movs	r3, #60	; 0x3c
 8008592:	223f      	movs	r2, #63	; 0x3f
 8008594:	4909      	ldr	r1, [pc, #36]	; (80085bc <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 8008596:	480a      	ldr	r0, [pc, #40]	; (80085c0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 8008598:	f7fe f804 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800859c:	4804      	ldr	r0, [pc, #16]	; (80085b0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800859e:	f01d fe60 	bl	8026262 <__cxa_guard_release>
 80085a2:	4808      	ldr	r0, [pc, #32]	; (80085c4 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 80085a4:	f01d ffa2 	bl	80264ec <atexit>
    return JetBrainsMono_Regular_60_4bpp;
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20023884 	.word	0x20023884
 80085b4:	080d8ea8 	.word	0x080d8ea8
 80085b8:	0802bfcc 	.word	0x0802bfcc
 80085bc:	080d8098 	.word	0x080d8098
 80085c0:	2002385c 	.word	0x2002385c
 80085c4:	0800851d 	.word	0x0800851d

080085c8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	4801      	ldr	r0, [pc, #4]	; (80085d4 <__tcf_0+0xc>)
 80085ce:	f7fd fad5 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20023888 	.word	0x20023888

080085d8 <_Z24getFont_swisop3_300_4bppv>:
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80085de:	4b20      	ldr	r3, [pc, #128]	; (8008660 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	f3bf 8f5b 	dmb	ish
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf0c      	ite	eq
 80085f0:	2301      	moveq	r3, #1
 80085f2:	2300      	movne	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d02d      	beq.n	8008656 <_Z24getFont_swisop3_300_4bppv+0x7e>
 80085fa:	4819      	ldr	r0, [pc, #100]	; (8008660 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80085fc:	f01d fe25 	bl	802624a <__cxa_guard_acquire>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	bf14      	ite	ne
 8008606:	2301      	movne	r3, #1
 8008608:	2300      	moveq	r3, #0
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d022      	beq.n	8008656 <_Z24getFont_swisop3_300_4bppv+0x7e>
 8008610:	2300      	movs	r3, #0
 8008612:	930a      	str	r3, [sp, #40]	; 0x28
 8008614:	2300      	movs	r3, #0
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	2300      	movs	r3, #0
 800861a:	9308      	str	r3, [sp, #32]
 800861c:	233f      	movs	r3, #63	; 0x3f
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <_Z24getFont_swisop3_300_4bppv+0x90>)
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	2300      	movs	r3, #0
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	2300      	movs	r3, #0
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	2301      	movs	r3, #1
 8008632:	9302      	str	r3, [sp, #8]
 8008634:	2304      	movs	r3, #4
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	233b      	movs	r3, #59	; 0x3b
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008640:	223f      	movs	r2, #63	; 0x3f
 8008642:	490a      	ldr	r1, [pc, #40]	; (800866c <_Z24getFont_swisop3_300_4bppv+0x94>)
 8008644:	480a      	ldr	r0, [pc, #40]	; (8008670 <_Z24getFont_swisop3_300_4bppv+0x98>)
 8008646:	f7fd ffad 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800864a:	4805      	ldr	r0, [pc, #20]	; (8008660 <_Z24getFont_swisop3_300_4bppv+0x88>)
 800864c:	f01d fe09 	bl	8026262 <__cxa_guard_release>
 8008650:	4808      	ldr	r0, [pc, #32]	; (8008674 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 8008652:	f01d ff4b 	bl	80264ec <atexit>
    return swisop3_300_4bpp;
 8008656:	4b06      	ldr	r3, [pc, #24]	; (8008670 <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200238b0 	.word	0x200238b0
 8008664:	080d8eac 	.word	0x080d8eac
 8008668:	0802bfd0 	.word	0x0802bfd0
 800866c:	080d840c 	.word	0x080d840c
 8008670:	20023888 	.word	0x20023888
 8008674:	080085c9 	.word	0x080085c9

08008678 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <__tcf_0+0xc>)
 800867e:	f7fd fa7d 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 8008682:	bd80      	pop	{r7, pc}
 8008684:	200238b4 	.word	0x200238b4

08008688 <_Z23getFont_swisop3_50_4bppv>:
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	f3bf 8f5b 	dmb	ish
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	bf0c      	ite	eq
 80086a0:	2301      	moveq	r3, #1
 80086a2:	2300      	movne	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d02c      	beq.n	8008704 <_Z23getFont_swisop3_50_4bppv+0x7c>
 80086aa:	4818      	ldr	r0, [pc, #96]	; (800870c <_Z23getFont_swisop3_50_4bppv+0x84>)
 80086ac:	f01d fdcd 	bl	802624a <__cxa_guard_acquire>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bf14      	ite	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	2300      	moveq	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d021      	beq.n	8008704 <_Z23getFont_swisop3_50_4bppv+0x7c>
 80086c0:	2300      	movs	r3, #0
 80086c2:	930a      	str	r3, [sp, #40]	; 0x28
 80086c4:	2300      	movs	r3, #0
 80086c6:	9309      	str	r3, [sp, #36]	; 0x24
 80086c8:	2300      	movs	r3, #0
 80086ca:	9308      	str	r3, [sp, #32]
 80086cc:	233f      	movs	r3, #63	; 0x3f
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <_Z23getFont_swisop3_50_4bppv+0x88>)
 80086d2:	9306      	str	r3, [sp, #24]
 80086d4:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 80086d6:	9305      	str	r3, [sp, #20]
 80086d8:	2300      	movs	r3, #0
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	2300      	movs	r3, #0
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	2301      	movs	r3, #1
 80086e2:	9302      	str	r3, [sp, #8]
 80086e4:	2304      	movs	r3, #4
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	230a      	movs	r3, #10
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2332      	movs	r3, #50	; 0x32
 80086ee:	2241      	movs	r2, #65	; 0x41
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <_Z23getFont_swisop3_50_4bppv+0x90>)
 80086f2:	480a      	ldr	r0, [pc, #40]	; (800871c <_Z23getFont_swisop3_50_4bppv+0x94>)
 80086f4:	f7fd ff56 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80086f8:	4804      	ldr	r0, [pc, #16]	; (800870c <_Z23getFont_swisop3_50_4bppv+0x84>)
 80086fa:	f01d fdb2 	bl	8026262 <__cxa_guard_release>
 80086fe:	4808      	ldr	r0, [pc, #32]	; (8008720 <_Z23getFont_swisop3_50_4bppv+0x98>)
 8008700:	f01d fef4 	bl	80264ec <atexit>
    return swisop3_50_4bpp;
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 8008706:	4618      	mov	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	200238dc 	.word	0x200238dc
 8008710:	080d8eb0 	.word	0x080d8eb0
 8008714:	0802bfd4 	.word	0x0802bfd4
 8008718:	080d8780 	.word	0x080d8780
 800871c:	200238b4 	.word	0x200238b4
 8008720:	08008679 	.word	0x08008679

08008724 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__tcf_0+0xc>)
 800872a:	f7fd fa27 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 800872e:	bd80      	pop	{r7, pc}
 8008730:	200238e0 	.word	0x200238e0

08008734 <_Z23getFont_verdana_10_4bppv>:
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08c      	sub	sp, #48	; 0x30
 8008738:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800873a:	4b1f      	ldr	r3, [pc, #124]	; (80087b8 <_Z23getFont_verdana_10_4bppv+0x84>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f3bf 8f5b 	dmb	ish
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d02c      	beq.n	80087b0 <_Z23getFont_verdana_10_4bppv+0x7c>
 8008756:	4818      	ldr	r0, [pc, #96]	; (80087b8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008758:	f01d fd77 	bl	802624a <__cxa_guard_acquire>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	bf14      	ite	ne
 8008762:	2301      	movne	r3, #1
 8008764:	2300      	moveq	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d021      	beq.n	80087b0 <_Z23getFont_verdana_10_4bppv+0x7c>
 800876c:	2300      	movs	r3, #0
 800876e:	930a      	str	r3, [sp, #40]	; 0x28
 8008770:	2300      	movs	r3, #0
 8008772:	9309      	str	r3, [sp, #36]	; 0x24
 8008774:	2300      	movs	r3, #0
 8008776:	9308      	str	r3, [sp, #32]
 8008778:	233f      	movs	r3, #63	; 0x3f
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <_Z23getFont_verdana_10_4bppv+0x88>)
 800877e:	9306      	str	r3, [sp, #24]
 8008780:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	2300      	movs	r3, #0
 8008786:	9304      	str	r3, [sp, #16]
 8008788:	2300      	movs	r3, #0
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	2301      	movs	r3, #1
 800878e:	9302      	str	r3, [sp, #8]
 8008790:	2304      	movs	r3, #4
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	2300      	movs	r3, #0
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	230a      	movs	r3, #10
 800879a:	2201      	movs	r2, #1
 800879c:	4909      	ldr	r1, [pc, #36]	; (80087c4 <_Z23getFont_verdana_10_4bppv+0x90>)
 800879e:	480a      	ldr	r0, [pc, #40]	; (80087c8 <_Z23getFont_verdana_10_4bppv+0x94>)
 80087a0:	f7fd ff00 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80087a4:	4804      	ldr	r0, [pc, #16]	; (80087b8 <_Z23getFont_verdana_10_4bppv+0x84>)
 80087a6:	f01d fd5c 	bl	8026262 <__cxa_guard_release>
 80087aa:	4808      	ldr	r0, [pc, #32]	; (80087cc <_Z23getFont_verdana_10_4bppv+0x98>)
 80087ac:	f01d fe9e 	bl	80264ec <atexit>
    return verdana_10_4bpp;
 80087b0:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20023908 	.word	0x20023908
 80087bc:	080d8eb4 	.word	0x080d8eb4
 80087c0:	0802bfd8 	.word	0x0802bfd8
 80087c4:	080d8b10 	.word	0x080d8b10
 80087c8:	200238e0 	.word	0x200238e0
 80087cc:	08008725 	.word	0x08008725

080087d0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__tcf_0+0xc>)
 80087d6:	f7fd f9d1 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	2002390c 	.word	0x2002390c

080087e0 <_Z23getFont_verdana_20_4bppv>:
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08c      	sub	sp, #48	; 0x30
 80087e4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80087e6:	4b1f      	ldr	r3, [pc, #124]	; (8008864 <_Z23getFont_verdana_20_4bppv+0x84>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	f3bf 8f5b 	dmb	ish
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d02c      	beq.n	800885c <_Z23getFont_verdana_20_4bppv+0x7c>
 8008802:	4818      	ldr	r0, [pc, #96]	; (8008864 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008804:	f01d fd21 	bl	802624a <__cxa_guard_acquire>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	bf14      	ite	ne
 800880e:	2301      	movne	r3, #1
 8008810:	2300      	moveq	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d021      	beq.n	800885c <_Z23getFont_verdana_20_4bppv+0x7c>
 8008818:	2300      	movs	r3, #0
 800881a:	930a      	str	r3, [sp, #40]	; 0x28
 800881c:	2300      	movs	r3, #0
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	2300      	movs	r3, #0
 8008822:	9308      	str	r3, [sp, #32]
 8008824:	233f      	movs	r3, #63	; 0x3f
 8008826:	9307      	str	r3, [sp, #28]
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <_Z23getFont_verdana_20_4bppv+0x88>)
 800882a:	9306      	str	r3, [sp, #24]
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800882e:	9305      	str	r3, [sp, #20]
 8008830:	2301      	movs	r3, #1
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	2301      	movs	r3, #1
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	2301      	movs	r3, #1
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	2304      	movs	r3, #4
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	2304      	movs	r3, #4
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	2314      	movs	r3, #20
 8008846:	223f      	movs	r2, #63	; 0x3f
 8008848:	4909      	ldr	r1, [pc, #36]	; (8008870 <_Z23getFont_verdana_20_4bppv+0x90>)
 800884a:	480a      	ldr	r0, [pc, #40]	; (8008874 <_Z23getFont_verdana_20_4bppv+0x94>)
 800884c:	f7fd feaa 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008850:	4804      	ldr	r0, [pc, #16]	; (8008864 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008852:	f01d fd06 	bl	8026262 <__cxa_guard_release>
 8008856:	4808      	ldr	r0, [pc, #32]	; (8008878 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008858:	f01d fe48 	bl	80264ec <atexit>
    return verdana_20_4bpp;
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800885e:	4618      	mov	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20023934 	.word	0x20023934
 8008868:	080d8eb8 	.word	0x080d8eb8
 800886c:	0802bfdc 	.word	0x0802bfdc
 8008870:	080d8b20 	.word	0x080d8b20
 8008874:	2002390c 	.word	0x2002390c
 8008878:	080087d1 	.word	0x080087d1

0800887c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <__tcf_0+0xc>)
 8008882:	f7fd f97b 	bl	8005b7c <_ZN8touchgfx13GeneratedFontD1Ev>
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20023938 	.word	0x20023938

0800888c <_Z23getFont_verdana_40_4bppv>:
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08c      	sub	sp, #48	; 0x30
 8008890:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008892:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	f3bf 8f5b 	dmb	ish
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d02c      	beq.n	8008908 <_Z23getFont_verdana_40_4bppv+0x7c>
 80088ae:	4818      	ldr	r0, [pc, #96]	; (8008910 <_Z23getFont_verdana_40_4bppv+0x84>)
 80088b0:	f01d fccb 	bl	802624a <__cxa_guard_acquire>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bf14      	ite	ne
 80088ba:	2301      	movne	r3, #1
 80088bc:	2300      	moveq	r3, #0
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d021      	beq.n	8008908 <_Z23getFont_verdana_40_4bppv+0x7c>
 80088c4:	2300      	movs	r3, #0
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	2300      	movs	r3, #0
 80088ca:	9309      	str	r3, [sp, #36]	; 0x24
 80088cc:	2300      	movs	r3, #0
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	233f      	movs	r3, #63	; 0x3f
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <_Z23getFont_verdana_40_4bppv+0x88>)
 80088d6:	9306      	str	r3, [sp, #24]
 80088d8:	4b0f      	ldr	r3, [pc, #60]	; (8008918 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	2300      	movs	r3, #0
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	2300      	movs	r3, #0
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	2301      	movs	r3, #1
 80088e6:	9302      	str	r3, [sp, #8]
 80088e8:	2304      	movs	r3, #4
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	2300      	movs	r3, #0
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	2328      	movs	r3, #40	; 0x28
 80088f2:	2201      	movs	r2, #1
 80088f4:	4909      	ldr	r1, [pc, #36]	; (800891c <_Z23getFont_verdana_40_4bppv+0x90>)
 80088f6:	480a      	ldr	r0, [pc, #40]	; (8008920 <_Z23getFont_verdana_40_4bppv+0x94>)
 80088f8:	f7fd fe54 	bl	80065a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80088fc:	4804      	ldr	r0, [pc, #16]	; (8008910 <_Z23getFont_verdana_40_4bppv+0x84>)
 80088fe:	f01d fcb0 	bl	8026262 <__cxa_guard_release>
 8008902:	4808      	ldr	r0, [pc, #32]	; (8008924 <_Z23getFont_verdana_40_4bppv+0x98>)
 8008904:	f01d fdf2 	bl	80264ec <atexit>
    return verdana_40_4bpp;
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800890a:	4618      	mov	r0, r3
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20023960 	.word	0x20023960
 8008914:	080d8f98 	.word	0x080d8f98
 8008918:	0802bfe0 	.word	0x0802bfe0
 800891c:	080d8e94 	.word	0x080d8e94
 8008920:	20023938 	.word	0x20023938
 8008924:	0800887d 	.word	0x0800887d

08008928 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	460b      	mov	r3, r1
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8008936:	2300      	movs	r3, #0
    }
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800894c:	2300      	movs	r3, #0
    }
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008962:	2300      	movs	r3, #0
    }
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800897e:	4a07      	ldr	r2, [pc, #28]	; (800899c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800898a:	4a06      	ldr	r2, [pc, #24]	; (80089a4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	8013      	strh	r3, [r2, #0]
    }
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	200567c0 	.word	0x200567c0
 80089a0:	200567c8 	.word	0x200567c8
 80089a4:	200567c4 	.word	0x200567c4

080089a8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80089a8:	b40e      	push	{r1, r2, r3}
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80089b2:	f107 0320 	add.w	r3, r7, #32
 80089b6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	2100      	movs	r1, #0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f011 fac6 	bl	8019f50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80089c4:	4603      	mov	r3, r0
 80089c6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80089c8:	89fb      	ldrh	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089d4:	b003      	add	sp, #12
 80089d6:	4770      	bx	lr

080089d8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80089d8:	b40c      	push	{r2, r3}
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80089e6:	f107 031c 	add.w	r3, r7, #28
 80089ea:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80089ec:	78f9      	ldrb	r1, [r7, #3]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f011 faac 	bl	8019f50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80089f8:	4603      	mov	r3, r0
 80089fa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80089fc:	89fb      	ldrh	r3, [r7, #14]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a08:	b002      	add	sp, #8
 8008a0a:	4770      	bx	lr

08008a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d016      	beq.n	8008a4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	331a      	adds	r3, #26
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	8adb      	ldrh	r3, [r3, #22]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008a2e:	4b43      	ldr	r3, [pc, #268]	; (8008b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008a30:	4a43      	ldr	r2, [pc, #268]	; (8008b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008a32:	21bf      	movs	r1, #191	; 0xbf
 8008a34:	4843      	ldr	r0, [pc, #268]	; (8008b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008a36:	f01d fd3b 	bl	80264b0 <__assert_func>
            return buffer[pos];
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	8a9b      	ldrh	r3, [r3, #20]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d06a      	beq.n	8008b2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f012 fe67 	bl	801b728 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	331a      	adds	r3, #26
 8008a5e:	623b      	str	r3, [r7, #32]
 8008a60:	2301      	movs	r3, #1
 8008a62:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	8adb      	ldrh	r3, [r3, #22]
 8008a68:	8bfa      	ldrh	r2, [r7, #30]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d305      	bcc.n	8008a7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008a6e:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008a70:	4a36      	ldr	r2, [pc, #216]	; (8008b4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008a72:	21c4      	movs	r1, #196	; 0xc4
 8008a74:	4833      	ldr	r0, [pc, #204]	; (8008b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008a76:	f01d fd1b 	bl	80264b0 <__assert_func>
            const uint16_t index = pos + offset;
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	8a9a      	ldrh	r2, [r3, #20]
 8008a7e:	8bfb      	ldrh	r3, [r7, #30]
 8008a80:	4413      	add	r3, r2
 8008a82:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008a84:	8bbb      	ldrh	r3, [r7, #28]
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d801      	bhi.n	8008a8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008a8a:	8bbb      	ldrh	r3, [r7, #28]
 8008a8c:	e001      	b.n	8008a92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008a8e:	8bbb      	ldrh	r3, [r7, #28]
 8008a90:	3b0a      	subs	r3, #10
 8008a92:	6a3a      	ldr	r2, [r7, #32]
 8008a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a98:	f640 123f 	movw	r2, #2367	; 0x93f
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bf0c      	ite	eq
 8008aa0:	2301      	moveq	r3, #1
 8008aa2:	2300      	movne	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d03f      	beq.n	8008b2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	331a      	adds	r3, #26
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	321a      	adds	r2, #26
 8008ab2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	8ad2      	ldrh	r2, [r2, #22]
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	d105      	bne.n	8008ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008abc:	4b1f      	ldr	r3, [pc, #124]	; (8008b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008abe:	4a20      	ldr	r2, [pc, #128]	; (8008b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008ac0:	21bf      	movs	r1, #191	; 0xbf
 8008ac2:	4820      	ldr	r0, [pc, #128]	; (8008b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008ac4:	f01d fcf4 	bl	80264b0 <__assert_func>
            return buffer[pos];
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	8a92      	ldrh	r2, [r2, #20]
 8008acc:	4611      	mov	r1, r2
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	8adb      	ldrh	r3, [r3, #22]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d806      	bhi.n	8008af0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	; (8008b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008ae4:	4a1b      	ldr	r2, [pc, #108]	; (8008b54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008ae6:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008aea:	4816      	ldr	r0, [pc, #88]	; (8008b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008aec:	f01d fce0 	bl	80264b0 <__assert_func>
            const uint16_t index = pos + 1;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	8a9b      	ldrh	r3, [r3, #20]
 8008af4:	3301      	adds	r3, #1
 8008af6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008af8:	89bb      	ldrh	r3, [r7, #12]
 8008afa:	2b09      	cmp	r3, #9
 8008afc:	d801      	bhi.n	8008b02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008afe:	89bb      	ldrh	r3, [r7, #12]
 8008b00:	e000      	b.n	8008b04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008b02:	2300      	movs	r3, #0
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	89f9      	ldrh	r1, [r7, #14]
 8008b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008b0c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	331a      	adds	r3, #26
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	f640 133f 	movw	r3, #2367	; 0x93f
 8008b18:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	8a9b      	ldrh	r3, [r3, #20]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	8afa      	ldrh	r2, [r7, #22]
 8008b24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008b28:	bf00      	nop
        }
    }
    return getNextChar();
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f012 fce0 	bl	801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008b30:	4603      	mov	r3, r0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3728      	adds	r7, #40	; 0x28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0802b5c8 	.word	0x0802b5c8
 8008b40:	0802b5d4 	.word	0x0802b5d4
 8008b44:	0802b680 	.word	0x0802b680
 8008b48:	0802b6cc 	.word	0x0802b6cc
 8008b4c:	0802b6dc 	.word	0x0802b6dc
 8008b50:	0802b7b0 	.word	0x0802b7b0
 8008b54:	0802b7bc 	.word	0x0802b7bc

08008b58 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f012 fc7f 	bl	801b464 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b088      	sub	sp, #32
 8008b72:	af02      	add	r7, sp, #8
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	1d38      	adds	r0, r7, #4
 8008b78:	e880 0006 	stmia.w	r0, {r1, r2}
 8008b7c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8008b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b82:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008b84:	1d39      	adds	r1, r7, #4
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f00f ff38 	bl	8018a08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008b98:	bf00      	nop
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008ba0:	b590      	push	{r4, r7, lr}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d127      	bne.n	8008c04 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	4a1e      	ldr	r2, [pc, #120]	; (8008c30 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d016      	beq.n	8008bee <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	4a1b      	ldr	r2, [pc, #108]	; (8008c30 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	4a18      	ldr	r2, [pc, #96]	; (8008c34 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008bd4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008be0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	4413      	add	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e00a      	b.n	8008c04 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008bee:	4b11      	ldr	r3, [pc, #68]	; (8008c34 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008bf0:	4a12      	ldr	r2, [pc, #72]	; (8008c3c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008bf2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008bf4:	4a12      	ldr	r2, [pc, #72]	; (8008c40 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008bf6:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008bf8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	4a11      	ldr	r2, [pc, #68]	; (8008c44 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c02:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00d      	beq.n	8008c26 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008c0a:	4a0f      	ldr	r2, [pc, #60]	; (8008c48 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008c0c:	88fb      	ldrh	r3, [r7, #6]
 8008c0e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008c10:	f000 f83e 	bl	8008c90 <_ZN17TypedTextDatabase8getFontsEv>
 8008c14:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008c16:	f000 f833 	bl	8008c80 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4621      	mov	r1, r4
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff fea5 	bl	8008970 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008c26:	bf00      	nop
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd90      	pop	{r4, r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20023964 	.word	0x20023964
 8008c34:	2002396c 	.word	0x2002396c
 8008c38:	20023970 	.word	0x20023970
 8008c3c:	080d8fd0 	.word	0x080d8fd0
 8008c40:	080d8f9c 	.word	0x080d8f9c
 8008c44:	080d9070 	.word	0x080d9070
 8008c48:	20023968 	.word	0x20023968

08008c4c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008c58:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8008c5e:	6819      	ldr	r1, [r3, #0]
 8008c60:	887b      	ldrh	r3, [r7, #2]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	440b      	add	r3, r1
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	4413      	add	r3, r2
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	2002396c 	.word	0x2002396c
 8008c7c:	20023970 	.word	0x20023970

08008c80 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8008c84:	230d      	movs	r3, #13
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	20023974 	.word	0x20023974

08008ca4 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_swisop3_50_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d127      	bne.n	8008d04 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d122      	bne.n	8008d04 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 8008cbe:	f7ff fd8f 	bl	80087e0 <_Z23getFont_verdana_20_4bppv>
 8008cc2:	4603      	mov	r3, r0
};
 8008cc4:	4a11      	ldr	r2, [pc, #68]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008cc6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008cc8:	f7ff fde0 	bl	800888c <_Z23getFont_verdana_40_4bppv>
 8008ccc:	4603      	mov	r3, r0
};
 8008cce:	4a0f      	ldr	r2, [pc, #60]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008cd0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8008cd2:	f7ff fd2f 	bl	8008734 <_Z23getFont_verdana_10_4bppv>
 8008cd6:	4603      	mov	r3, r0
};
 8008cd8:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008cda:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 8008cdc:	f7ff fc7c 	bl	80085d8 <_Z24getFont_swisop3_300_4bppv>
 8008ce0:	4603      	mov	r3, r0
};
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008ce4:	60d3      	str	r3, [r2, #12]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 8008ce6:	f7ff fbcb 	bl	8008480 <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 8008cea:	4603      	mov	r3, r0
};
 8008cec:	4a07      	ldr	r2, [pc, #28]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008cee:	6113      	str	r3, [r2, #16]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 8008cf0:	f7ff fc1c 	bl	800852c <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 8008cf4:	4603      	mov	r3, r0
};
 8008cf6:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008cf8:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp())
 8008cfa:	f7ff fcc5 	bl	8008688 <_Z23getFont_swisop3_50_4bppv>
 8008cfe:	4603      	mov	r3, r0
};
 8008d00:	4a02      	ldr	r2, [pc, #8]	; (8008d0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008d02:	6193      	str	r3, [r2, #24]
} // namespace TypedTextDatabase
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20023974 	.word	0x20023974

08008d10 <_GLOBAL__sub_I_touchgfx_fonts>:
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d18:	2001      	movs	r0, #1
 8008d1a:	f7ff ffc3 	bl	8008ca4 <_Z41__static_initialization_and_destruction_0ii>
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fd ff66 	bl	8006bfc <_ZN8touchgfx3BoxC1Ev>
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	332c      	adds	r3, #44	; 0x2c
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fb f9c9 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	0802d574 	.word	0x0802d574

08008d58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	887a      	ldrh	r2, [r7, #2]
 8008d84:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b091      	sub	sp, #68	; 0x44
 8008d98:	af02      	add	r7, sp, #8
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fd fd7e 	bl	80068a0 <_ZN8touchgfx9ContainerC1Ev>
 8008da4:	4a68      	ldr	r2, [pc, #416]	; (8008f48 <_ZN12alertBarBaseC1Ev+0x1b4>)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	332c      	adds	r3, #44	; 0x2c
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff ffb6 	bl	8008d20 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3360      	adds	r3, #96	; 0x60
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fd ffc9 	bl	8006d50 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fd fcf5 	bl	80067b4 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	213c      	movs	r1, #60	; 0x3c
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fd fcff 	bl	80067d2 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008dda:	233c      	movs	r3, #60	; 0x3c
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	f7fd fdaa 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008df0:	23ff      	movs	r3, #255	; 0xff
 8008df2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008e02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008e06:	041b      	lsls	r3, r3, #16
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e0e:	021b      	lsls	r3, r3, #8
 8008e10:	431a      	orrs	r2, r3
 8008e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008e1c:	f107 031c 	add.w	r3, r7, #28
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fb f956 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f7fd ff09 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e44:	2300      	movs	r3, #0
 8008e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e4e:	041b      	lsls	r3, r3, #16
 8008e50:	461a      	mov	r2, r3
 8008e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fb f932 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	4619      	mov	r1, r3
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff ff6f 	bl	8008d58 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	332c      	adds	r3, #44	; 0x2c
 8008e7e:	2105      	movs	r1, #5
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff ff77 	bl	8008d74 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8008e8c:	233c      	movs	r3, #60	; 0x3c
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008e94:	2200      	movs	r2, #0
 8008e96:	2100      	movs	r1, #0
 8008e98:	f7fd fd51 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008ea2:	23ff      	movs	r3, #255	; 0xff
 8008ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea8:	23ff      	movs	r3, #255	; 0xff
 8008eaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008eae:	23ff      	movs	r3, #255	; 0xff
 8008eb0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eb8:	041b      	lsls	r3, r3, #16
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008ec0:	021b      	lsls	r3, r3, #8
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008ece:	f107 0314 	add.w	r3, r7, #20
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fb f8fd 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008ede:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008ee6:	bf00      	nop
    frontText.setLinespacing(0);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3360      	adds	r3, #96	; 0x60
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
 8008eee:	2300      	movs	r3, #0
 8008ef0:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008ef6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008ef8:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	2105      	movs	r1, #5
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fd feaa 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 8008f0c:	f107 030c 	add.w	r3, r7, #12
 8008f10:	4619      	mov	r1, r3
 8008f12:	4620      	mov	r0, r4
 8008f14:	f00e faf9 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008f18:	f107 030c 	add.w	r3, r7, #12
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fc fe4f 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	332c      	adds	r3, #44	; 0x2c
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f00c fb2e 	bl	801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3360      	adds	r3, #96	; 0x60
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f00c fb27 	bl	801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4618      	mov	r0, r3
 8008f42:	373c      	adds	r7, #60	; 0x3c
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd90      	pop	{r4, r7, pc}
 8008f48:	0802c040 	.word	0x0802c040

08008f4c <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]

}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b091      	sub	sp, #68	; 0x44
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd fc98 	bl	80068a0 <_ZN8touchgfx9ContainerC1Ev>
 8008f70:	4a6a      	ldr	r2, [pc, #424]	; (800911c <_ZN11tempBoxBaseC1Ev+0x1bc>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	332c      	adds	r3, #44	; 0x2c
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f00d fefa 	bl	8016d74 <_ZN8touchgfx4LineC1Ev>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008f86:	f107 0310 	add.w	r3, r7, #16
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fb f8a1 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8008f92:	6939      	ldr	r1, [r7, #16]
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7fe f809 	bl	8006fac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	33b8      	adds	r3, #184	; 0xb8
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd fe74 	bl	8006c8c <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	21dc      	movs	r1, #220	; 0xdc
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fc03 	bl	80067b4 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	213c      	movs	r1, #60	; 0x3c
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fd fc0d 	bl	80067d2 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008fbe:	233c      	movs	r3, #60	; 0x3c
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	2364      	movs	r3, #100	; 0x64
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f7fd fcb9 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008fd2:	23ff      	movs	r3, #255	; 0xff
 8008fd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008fd8:	23ff      	movs	r3, #255	; 0xff
 8008fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fde:	23ff      	movs	r3, #255	; 0xff
 8008fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fe4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fe8:	041b      	lsls	r3, r3, #16
 8008fea:	461a      	mov	r2, r3
 8008fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008ffe:	f107 0320 	add.w	r3, r7, #32
 8009002:	4611      	mov	r1, r2
 8009004:	4618      	mov	r0, r3
 8009006:	f7fb f865 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	4619      	mov	r1, r3
 800900e:	4620      	mov	r0, r4
 8009010:	f7fd ffec 	bl	8006fec <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	33a0      	adds	r3, #160	; 0xa0
 800901e:	4619      	mov	r1, r3
 8009020:	4610      	mov	r0, r2
 8009022:	f00d fccb 	bl	80169bc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	332c      	adds	r3, #44	; 0x2c
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe ffda 	bl	8007fe8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	332c      	adds	r3, #44	; 0x2c
 8009038:	22dc      	movs	r2, #220	; 0xdc
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe fff9 	bl	8008034 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	332c      	adds	r3, #44	; 0x2c
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff f819 	bl	8008080 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	332c      	adds	r3, #44	; 0x2c
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f00d ffd3 	bl	8017000 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8009060:	233c      	movs	r3, #60	; 0x3c
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	23dc      	movs	r3, #220	; 0xdc
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	f7fd fc68 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8009074:	23ff      	movs	r3, #255	; 0xff
 8009076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800907a:	23ff      	movs	r3, #255	; 0xff
 800907c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009080:	23ff      	movs	r3, #255	; 0xff
 8009082:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	461a      	mov	r2, r3
 800908e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009092:	021b      	lsls	r3, r3, #8
 8009094:	431a      	orrs	r2, r3
 8009096:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800909a:	4313      	orrs	r3, r2
 800909c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80090a0:	f107 031c 	add.w	r3, r7, #28
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fb f814 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	62fc      	str	r4, [r7, #44]	; 0x2c
 80090b0:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80090b8:	bf00      	nop
    textArea1.setLinespacing(2);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	33b8      	adds	r3, #184	; 0xb8
 80090be:	637b      	str	r3, [r7, #52]	; 0x34
 80090c0:	2302      	movs	r3, #2
 80090c2:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 80090c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80090c8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80090ca:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80090d2:	f107 0314 	add.w	r3, r7, #20
 80090d6:	2104      	movs	r1, #4
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fdc1 	bl	8006c60 <_ZN8touchgfx9TypedTextC1Et>
 80090de:	f107 0314 	add.w	r3, r7, #20
 80090e2:	4619      	mov	r1, r3
 80090e4:	4620      	mov	r0, r4
 80090e6:	f00e fa10 	bl	801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80090ea:	f107 0314 	add.w	r3, r7, #20
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fc fd66 	bl	8005bc0 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	332c      	adds	r3, #44	; 0x2c
 80090fa:	4619      	mov	r1, r3
 80090fc:	4610      	mov	r0, r2
 80090fe:	f00c fa45 	bl	801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	33b8      	adds	r3, #184	; 0xb8
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f00c fa3e 	bl	801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4618      	mov	r0, r3
 8009114:	373c      	adds	r7, #60	; 0x3c
 8009116:	46bd      	mov	sp, r7
 8009118:	bd90      	pop	{r4, r7, pc}
 800911a:	bf00      	nop
 800911c:	0802c0cc 	.word	0x0802c0cc

08009120 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	68b9      	ldr	r1, [r7, #8]
 8009146:	4618      	mov	r0, r3
 8009148:	f7fc fe54 	bl	8005df4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800914c:	4a03      	ldr	r2, [pc, #12]	; (800915c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	601a      	str	r2, [r3, #0]
{

}
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	0802bc04 	.word	0x0802bc04

08009160 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
{

}
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <_ZN5Model4tickEv>:

void Model::tick()
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
    {
    }
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
    {
    }
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
    {
 80091c0:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
    }
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	0802c190 	.word	0x0802c190

080091d8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
    }
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff ffe9 	bl	80091b8 <_ZN8touchgfx9PresenterD1Ev>
 80091e6:	2104      	movs	r1, #4
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f01d f82c 	bl	8026246 <_ZdlPvj>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
    {
 8009200:	4a04      	ldr	r2, [pc, #16]	; (8009214 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	601a      	str	r2, [r3, #0]
    }
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	0802c190 	.word	0x0802c190

08009218 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	4a06      	ldr	r2, [pc, #24]	; (800923c <_ZN13ModelListenerC1Ev+0x24>)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	605a      	str	r2, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	0802c180 	.word	0x0802c180

08009240 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	4a04      	ldr	r2, [pc, #16]	; (800925c <_ZN13ModelListenerD1Ev+0x1c>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	0802c180 	.word	0x0802c180

08009260 <_ZN13ModelListenerD0Ev>:
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ffe9 	bl	8009240 <_ZN13ModelListenerD1Ev>
 800926e:	2108      	movs	r1, #8
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f01c ffe8 	bl	8026246 <_ZdlPvj>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <_ZN16Screen1PresenterD1Ev+0x30>)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <_ZN16Screen1PresenterD1Ev+0x34>)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff ffd1 	bl	8009240 <_ZN13ModelListenerD1Ev>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff ff89 	bl	80091b8 <_ZN8touchgfx9PresenterD1Ev>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	0802c158 	.word	0x0802c158
 80092b4:	0802c170 	.word	0x0802c170

080092b8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80092b8:	f1a0 0004 	sub.w	r0, r0, #4
 80092bc:	e7e0      	b.n	8009280 <_ZN16Screen1PresenterD1Ev>
 80092be:	bf00      	nop

080092c0 <_ZN16Screen1PresenterD0Ev>:
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ffd9 	bl	8009280 <_ZN16Screen1PresenterD1Ev>
 80092ce:	2110      	movs	r1, #16
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f01c ffb8 	bl	8026246 <_ZdlPvj>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80092e0:	f1a0 0004 	sub.w	r0, r0, #4
 80092e4:	e7ec      	b.n	80092c0 <_ZN16Screen1PresenterD0Ev>
	...

080092e8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
    : view(v)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff ff7f 	bl	80091f8 <_ZN8touchgfx9PresenterC1Ev>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ff8a 	bl	8009218 <_ZN13ModelListenerC1Ev>
 8009304:	4a06      	ldr	r2, [pc, #24]	; (8009320 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	4a06      	ldr	r2, [pc, #24]	; (8009324 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	605a      	str	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	60da      	str	r2, [r3, #12]
{

}
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	0802c158 	.word	0x0802c158
 8009324:	0802c170 	.word	0x0802c170

08009328 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]

}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]

}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <_Z41__static_initialization_and_destruction_0ii>:
 8009350:	b580      	push	{r7, lr}
 8009352:	b092      	sub	sp, #72	; 0x48
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b01      	cmp	r3, #1
 800935e:	f040 8114 	bne.w	800958a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009368:	4293      	cmp	r3, r2
 800936a:	f040 810e 	bne.w	800958a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800936e:	2300      	movs	r3, #0
 8009370:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800937a:	2300      	movs	r3, #0
 800937c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009380:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800938c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009394:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009398:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800939c:	041b      	lsls	r3, r3, #16
 800939e:	461a      	mov	r2, r3
 80093a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	431a      	orrs	r2, r3
 80093a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80093b2:	f107 0320 	add.w	r3, r7, #32
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fa fe8b 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80093be:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80093c0:	bf00      	nop
 80093c2:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80093c4:	4b73      	ldr	r3, [pc, #460]	; (8009594 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	23ff      	movs	r3, #255	; 0xff
 80093ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80093ce:	2300      	movs	r3, #0
 80093d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80093da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80093e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80093e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80093ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80093f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093f6:	041b      	lsls	r3, r3, #16
 80093f8:	461a      	mov	r2, r3
 80093fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	431a      	orrs	r2, r3
 8009402:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009406:	4313      	orrs	r3, r2
 8009408:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800940c:	f107 031c 	add.w	r3, r7, #28
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7fa fe5e 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009418:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800941a:	bf00      	nop
 800941c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800941e:	4b5e      	ldr	r3, [pc, #376]	; (8009598 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	2300      	movs	r3, #0
 8009424:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009428:	23ff      	movs	r3, #255	; 0xff
 800942a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800942e:	2300      	movs	r3, #0
 8009430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009434:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009438:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800943c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009440:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009444:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009448:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800944c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	461a      	mov	r2, r3
 8009454:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	431a      	orrs	r2, r3
 800945c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009460:	4313      	orrs	r3, r2
 8009462:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009466:	f107 0318 	add.w	r3, r7, #24
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7fa fe31 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009472:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009474:	bf00      	nop
 8009476:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009478:	4b48      	ldr	r3, [pc, #288]	; (800959c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	2300      	movs	r3, #0
 800947e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009482:	2300      	movs	r3, #0
 8009484:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009488:	23ff      	movs	r3, #255	; 0xff
 800948a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800948e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009492:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009496:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800949a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800949e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80094a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80094a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	461a      	mov	r2, r3
 80094ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	431a      	orrs	r2, r3
 80094b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80094c0:	f107 0314 	add.w	r3, r7, #20
 80094c4:	4611      	mov	r1, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fa fe04 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 80094cc:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80094ce:	bf00      	nop
 80094d0:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80094d2:	4b33      	ldr	r3, [pc, #204]	; (80095a0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	23f7      	movs	r3, #247	; 0xf7
 80094d8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80094dc:	234c      	movs	r3, #76	; 0x4c
 80094de:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80094e2:	2302      	movs	r3, #2
 80094e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80094e8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80094ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80094f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80094f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80094f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094fc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009500:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009504:	041b      	lsls	r3, r3, #16
 8009506:	461a      	mov	r2, r3
 8009508:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	431a      	orrs	r2, r3
 8009510:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009514:	4313      	orrs	r3, r2
 8009516:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800951a:	f107 0310 	add.w	r3, r7, #16
 800951e:	4611      	mov	r1, r2
 8009520:	4618      	mov	r0, r3
 8009522:	f7fa fdd7 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009526:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009528:	bf00      	nop
 800952a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800952c:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	23f7      	movs	r3, #247	; 0xf7
 8009532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009536:	23d2      	movs	r3, #210	; 0xd2
 8009538:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800953c:	2302      	movs	r3, #2
 800953e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009542:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009546:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800954a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009556:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800955a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800955e:	041b      	lsls	r3, r3, #16
 8009560:	461a      	mov	r2, r3
 8009562:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	431a      	orrs	r2, r3
 800956a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800956e:	4313      	orrs	r3, r2
 8009570:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7fa fdaa 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009580:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009582:	bf00      	nop
 8009584:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009586:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	bf00      	nop
 800958c:	3748      	adds	r7, #72	; 0x48
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	20023990 	.word	0x20023990
 8009598:	20023994 	.word	0x20023994
 800959c:	20023998 	.word	0x20023998
 80095a0:	2002399c 	.word	0x2002399c
 80095a4:	200239a0 	.word	0x200239a0
 80095a8:	200239a4 	.word	0x200239a4

080095ac <_GLOBAL__sub_I__ZN16Screen1PresenterC2ER11Screen1View>:
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7ff fecb 	bl	8009350 <_Z41__static_initialization_and_destruction_0ii>
 80095ba:	bd80      	pop	{r7, pc}

080095bc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	4a05      	ldr	r2, [pc, #20]	; (80095dc <_ZN11Screen1ViewD1Ev+0x20>)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd fe4f 	bl	8007270 <_ZN15Screen1ViewBaseD1Ev>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	0802c1a8 	.word	0x0802c1a8

080095e0 <_ZN11Screen1ViewD0Ev>:
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff ffe7 	bl	80095bc <_ZN11Screen1ViewD1Ev>
 80095ee:	4904      	ldr	r1, [pc, #16]	; (8009600 <_ZN11Screen1ViewD0Ev+0x20>)
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f01c fe28 	bl	8026246 <_ZdlPvj>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	00022690 	.word	0x00022690

08009604 <_ZN11Screen1ViewC1Ev>:
#include <stdio.h>
#include <cstring>
#include <ecumaster.h>
#include <telemetry_data.h>

Screen1View::Screen1View()
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4618      	mov	r0, r3
 8009610:	f7fd feba 	bl	8007388 <_ZN15Screen1ViewBaseC1Ev>
 8009614:	4a3d      	ldr	r2, [pc, #244]	; (800970c <_ZN11Screen1ViewC1Ev+0x108>)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4b3c      	ldr	r3, [pc, #240]	; (8009710 <_ZN11Screen1ViewC1Ev+0x10c>)
 800961e:	4413      	add	r3, r2
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
{
	rpmArea.setWildcard(rpmAreaBuffer);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4b39      	ldr	r3, [pc, #228]	; (8009714 <_ZN11Screen1ViewC1Ev+0x110>)
 800962e:	4413      	add	r3, r2
 8009630:	4619      	mov	r1, r3
 8009632:	f7fd fba3 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	gearArea.setWildcard(gearAreaBuffer);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	4b36      	ldr	r3, [pc, #216]	; (8009718 <_ZN11Screen1ViewC1Ev+0x114>)
 8009640:	4413      	add	r3, r2
 8009642:	4619      	mov	r1, r3
 8009644:	f7fd fb9a 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	cltArea.setWildcard(cltAreaBuffer);
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	4b34      	ldr	r3, [pc, #208]	; (800971c <_ZN11Screen1ViewC1Ev+0x118>)
 800964c:	4413      	add	r3, r2
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	4a33      	ldr	r2, [pc, #204]	; (8009720 <_ZN11Screen1ViewC1Ev+0x11c>)
 8009652:	440a      	add	r2, r1
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd fb90 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	battArea.setWildcard(battAreaBuffer);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	4b2f      	ldr	r3, [pc, #188]	; (8009724 <_ZN11Screen1ViewC1Ev+0x120>)
 8009666:	4413      	add	r3, r2
 8009668:	4619      	mov	r1, r3
 800966a:	f7fd fb87 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilPressArea.setWildcard(oilPressAreaBuffer);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	4b2c      	ldr	r3, [pc, #176]	; (8009728 <_ZN11Screen1ViewC1Ev+0x124>)
 8009678:	4413      	add	r3, r2
 800967a:	4619      	mov	r1, r3
 800967c:	f7fd fb7e 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilTempArea.setWildcard(oilTempAreaBuffer);
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4b2a      	ldr	r3, [pc, #168]	; (800972c <_ZN11Screen1ViewC1Ev+0x128>)
 8009684:	4413      	add	r3, r2
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4a29      	ldr	r2, [pc, #164]	; (8009730 <_ZN11Screen1ViewC1Ev+0x12c>)
 800968a:	440a      	add	r2, r1
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fd fb74 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

	setRPM(EcuData.rpm);
 8009694:	4b27      	ldr	r3, [pc, #156]	; (8009734 <_ZN11Screen1ViewC1Ev+0x130>)
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fa40 	bl	8009b20 <_ZN11Screen1View6setRPMEi>
	setGear(telemetryData.gear);
 80096a0:	4b25      	ldr	r3, [pc, #148]	; (8009738 <_ZN11Screen1ViewC1Ev+0x134>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb40 	bl	8009d2c <_ZN11Screen1View7setGearEi>
	setClt(EcuData.clt);
 80096ac:	4b21      	ldr	r3, [pc, #132]	; (8009734 <_ZN11Screen1ViewC1Ev+0x130>)
 80096ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fb09 	bl	8009ccc <_ZN11Screen1View6setCltEs>
	setBatt(EcuData.batt);
 80096ba:	4b1e      	ldr	r3, [pc, #120]	; (8009734 <_ZN11Screen1ViewC1Ev+0x130>)
 80096bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80096c0:	eeb0 0a67 	vmov.f32	s0, s15
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa57 	bl	8009b78 <_ZN11Screen1View7setBattEf>
	setOilPress(EcuData.oilPress);
 80096ca:	4b1a      	ldr	r3, [pc, #104]	; (8009734 <_ZN11Screen1ViewC1Ev+0x130>)
 80096cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80096d0:	eeb0 0a67 	vmov.f32	s0, s15
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fa97 	bl	8009c08 <_ZN11Screen1View11setOilPressEf>
	setOilTemp(EcuData.oilTemp);
 80096da:	4b16      	ldr	r3, [pc, #88]	; (8009734 <_ZN11Screen1ViewC1Ev+0x130>)
 80096dc:	7adb      	ldrb	r3, [r3, #11]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fac3 	bl	8009c6c <_ZN11Screen1View10setOilTempEh>
	alertBar1.setState(EBarState::Blank);
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4b14      	ldr	r3, [pc, #80]	; (800973c <_ZN11Screen1ViewC1Ev+0x138>)
 80096ea:	4413      	add	r3, r2
 80096ec:	2100      	movs	r1, #0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fcec 	bl	800a0cc <_ZN8alertBar8setStateE9EBarState>
	alertBar2.setState(EBarState::Blank);
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <_ZN11Screen1ViewC1Ev+0x13c>)
 80096f8:	4413      	add	r3, r2
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fce5 	bl	800a0cc <_ZN8alertBar8setStateE9EBarState>
}
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	0802c1a8 	.word	0x0802c1a8
 8009710:	0002268c 	.word	0x0002268c
 8009714:	0001f748 	.word	0x0001f748
 8009718:	0001f744 	.word	0x0001f744
 800971c:	0001f6c4 	.word	0x0001f6c4
 8009720:	0001f784 	.word	0x0001f784
 8009724:	0001f75c 	.word	0x0001f75c
 8009728:	0001f770 	.word	0x0001f770
 800972c:	0001f704 	.word	0x0001f704
 8009730:	0001f798 	.word	0x0001f798
 8009734:	200239c0 	.word	0x200239c0
 8009738:	200239ec 	.word	0x200239ec
 800973c:	0001f514 	.word	0x0001f514
 8009740:	0001f5ec 	.word	0x0001f5ec

08009744 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe fc00 	bl	8007f54 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	f7fd f9c2 	bl	8006af0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	//// Screen1View::tempBox1_1.redraw();
	//tempBox1_1.invalidate();
	static int a = 0;

	static uint16_t lastRPM = 0;
	if (EcuData.rpm != lastRPM)
 800977c:	4b72      	ldr	r3, [pc, #456]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 800977e:	881a      	ldrh	r2, [r3, #0]
 8009780:	4b72      	ldr	r3, [pc, #456]	; (800994c <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d00e      	beq.n	80097a6 <_ZN11Screen1View15handleTickEventEv+0x32>
	{
		setRPM(EcuData.rpm);
 8009788:	4b6f      	ldr	r3, [pc, #444]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9c6 	bl	8009b20 <_ZN11Screen1View6setRPMEi>
		lastRPM = EcuData.rpm;
 8009794:	4b6c      	ldr	r3, [pc, #432]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009796:	881a      	ldrh	r2, [r3, #0]
 8009798:	4b6c      	ldr	r3, [pc, #432]	; (800994c <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 800979a:	801a      	strh	r2, [r3, #0]
		// if(EcuData.rpm <12000)
		gearArea.invalidate();
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3398      	adds	r3, #152	; 0x98
 80097a0:	4618      	mov	r0, r3
 80097a2:	f010 fcf7 	bl	801a194 <_ZNK8touchgfx8Drawable10invalidateEv>
		//setGear(2);
	}
	static uint8_t lastGear = 0;
	if (telemetryData.gear != lastGear)
 80097a6:	4b6a      	ldr	r3, [pc, #424]	; (8009950 <_ZN11Screen1View15handleTickEventEv+0x1dc>)
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	4b6a      	ldr	r3, [pc, #424]	; (8009954 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d009      	beq.n	80097c6 <_ZN11Screen1View15handleTickEventEv+0x52>
	{
		setGear(telemetryData.gear);
 80097b2:	4b67      	ldr	r3, [pc, #412]	; (8009950 <_ZN11Screen1View15handleTickEventEv+0x1dc>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fab7 	bl	8009d2c <_ZN11Screen1View7setGearEi>
		lastGear = telemetryData.gear;
 80097be:	4b64      	ldr	r3, [pc, #400]	; (8009950 <_ZN11Screen1View15handleTickEventEv+0x1dc>)
 80097c0:	781a      	ldrb	r2, [r3, #0]
 80097c2:	4b64      	ldr	r3, [pc, #400]	; (8009954 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 80097c4:	701a      	strb	r2, [r3, #0]
	}
	static float lastBatt = 0.0f;
	if (lastBatt != EcuData.batt)
 80097c6:	4b60      	ldr	r3, [pc, #384]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 80097c8:	ed93 7a07 	vldr	s14, [r3, #28]
 80097cc:	4b62      	ldr	r3, [pc, #392]	; (8009958 <_ZN11Screen1View15handleTickEventEv+0x1e4>)
 80097ce:	edd3 7a00 	vldr	s15, [r3]
 80097d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80097d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097da:	d00b      	beq.n	80097f4 <_ZN11Screen1View15handleTickEventEv+0x80>
	{
		setBatt(EcuData.batt);
 80097dc:	4b5a      	ldr	r3, [pc, #360]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 80097de:	edd3 7a07 	vldr	s15, [r3, #28]
 80097e2:	eeb0 0a67 	vmov.f32	s0, s15
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f9c6 	bl	8009b78 <_ZN11Screen1View7setBattEf>
		lastBatt = EcuData.batt;
 80097ec:	4b56      	ldr	r3, [pc, #344]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	4a59      	ldr	r2, [pc, #356]	; (8009958 <_ZN11Screen1View15handleTickEventEv+0x1e4>)
 80097f2:	6013      	str	r3, [r2, #0]
	}
	static int16_t lastClt = 0;
	if (lastClt != EcuData.clt)
 80097f4:	4b54      	ldr	r3, [pc, #336]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 80097f6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80097fa:	4b58      	ldr	r3, [pc, #352]	; (800995c <_ZN11Screen1View15handleTickEventEv+0x1e8>)
 80097fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009800:	429a      	cmp	r2, r3
 8009802:	d00b      	beq.n	800981c <_ZN11Screen1View15handleTickEventEv+0xa8>
	{
		setClt(EcuData.clt);
 8009804:	4b50      	ldr	r3, [pc, #320]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009806:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa5d 	bl	8009ccc <_ZN11Screen1View6setCltEs>
		lastClt = EcuData.clt;
 8009812:	4b4d      	ldr	r3, [pc, #308]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009814:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8009818:	4b50      	ldr	r3, [pc, #320]	; (800995c <_ZN11Screen1View15handleTickEventEv+0x1e8>)
 800981a:	801a      	strh	r2, [r3, #0]
	}
	static float lastOilPressure = 0;
	if (lastOilPressure != EcuData.oilPress)
 800981c:	4b4a      	ldr	r3, [pc, #296]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 800981e:	ed93 7a03 	vldr	s14, [r3, #12]
 8009822:	4b4f      	ldr	r3, [pc, #316]	; (8009960 <_ZN11Screen1View15handleTickEventEv+0x1ec>)
 8009824:	edd3 7a00 	vldr	s15, [r3]
 8009828:	eeb4 7a67 	vcmp.f32	s14, s15
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	d00b      	beq.n	800984a <_ZN11Screen1View15handleTickEventEv+0xd6>
	{
		setOilPress(EcuData.oilPress);
 8009832:	4b45      	ldr	r3, [pc, #276]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009834:	edd3 7a03 	vldr	s15, [r3, #12]
 8009838:	eeb0 0a67 	vmov.f32	s0, s15
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f9e3 	bl	8009c08 <_ZN11Screen1View11setOilPressEf>
		lastOilPressure = EcuData.oilPress;
 8009842:	4b41      	ldr	r3, [pc, #260]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	4a46      	ldr	r2, [pc, #280]	; (8009960 <_ZN11Screen1View15handleTickEventEv+0x1ec>)
 8009848:	6013      	str	r3, [r2, #0]
	}

	static uint8_t lastOilTemperature = 0;
		if (lastOilTemperature != EcuData.oilTemp)
 800984a:	4b3f      	ldr	r3, [pc, #252]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 800984c:	7ada      	ldrb	r2, [r3, #11]
 800984e:	4b45      	ldr	r3, [pc, #276]	; (8009964 <_ZN11Screen1View15handleTickEventEv+0x1f0>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d009      	beq.n	800986a <_ZN11Screen1View15handleTickEventEv+0xf6>
		{
			setOilTemp(EcuData.oilTemp);
 8009856:	4b3c      	ldr	r3, [pc, #240]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009858:	7adb      	ldrb	r3, [r3, #11]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fa05 	bl	8009c6c <_ZN11Screen1View10setOilTempEh>
			lastOilTemperature = EcuData.oilTemp;
 8009862:	4b39      	ldr	r3, [pc, #228]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009864:	7ada      	ldrb	r2, [r3, #11]
 8009866:	4b3f      	ldr	r3, [pc, #252]	; (8009964 <_ZN11Screen1View15handleTickEventEv+0x1f0>)
 8009868:	701a      	strb	r2, [r3, #0]
		}

	if (EcuData.oilPress < 1.5f && EcuData.rpm > 1000)
 800986a:	4b37      	ldr	r3, [pc, #220]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 800986c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009870:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987c:	d53a      	bpl.n	80098f4 <_ZN11Screen1View15handleTickEventEv+0x180>
 800987e:	4b32      	ldr	r3, [pc, #200]	; (8009948 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009886:	d935      	bls.n	80098f4 <_ZN11Screen1View15handleTickEventEv+0x180>
	{
		static int lastChange = 0;
		if (tickCounter - lastChange > 15)
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	4b37      	ldr	r3, [pc, #220]	; (8009968 <_ZN11Screen1View15handleTickEventEv+0x1f4>)
 800988c:	4413      	add	r3, r2
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <_ZN11Screen1View15handleTickEventEv+0x1f8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b0f      	cmp	r3, #15
 8009898:	dd47      	ble.n	800992a <_ZN11Screen1View15handleTickEventEv+0x1b6>
		{
			alertBar1.setText("LOW OIL PRESS\n");
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	4b34      	ldr	r3, [pc, #208]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 800989e:	4413      	add	r3, r2
 80098a0:	4934      	ldr	r1, [pc, #208]	; (8009974 <_ZN11Screen1View15handleTickEventEv+0x200>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fc7a 	bl	800a19c <_ZN8alertBar7setTextEPKc>
			if (a == 0)
 80098a8:	4b33      	ldr	r3, [pc, #204]	; (8009978 <_ZN11Screen1View15handleTickEventEv+0x204>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d107      	bne.n	80098c0 <_ZN11Screen1View15handleTickEventEv+0x14c>
			{
				alertBar1.setState(EBarState::Critical1);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	4b2f      	ldr	r3, [pc, #188]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 80098b4:	4413      	add	r3, r2
 80098b6:	2104      	movs	r1, #4
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fc07 	bl	800a0cc <_ZN8alertBar8setStateE9EBarState>
 80098be:	e006      	b.n	80098ce <_ZN11Screen1View15handleTickEventEv+0x15a>
			}
			else
			{
				alertBar1.setState(EBarState::Critical2);
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4b2b      	ldr	r3, [pc, #172]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 80098c4:	4413      	add	r3, r2
 80098c6:	2105      	movs	r1, #5
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fbff 	bl	800a0cc <_ZN8alertBar8setStateE9EBarState>
			}
			alertBar1.invalidate();
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	4b27      	ldr	r3, [pc, #156]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 80098d2:	4413      	add	r3, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f010 fc5d 	bl	801a194 <_ZNK8touchgfx8Drawable10invalidateEv>
			a = 1 - a;
 80098da:	4b27      	ldr	r3, [pc, #156]	; (8009978 <_ZN11Screen1View15handleTickEventEv+0x204>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f1c3 0301 	rsb	r3, r3, #1
 80098e2:	4a25      	ldr	r2, [pc, #148]	; (8009978 <_ZN11Screen1View15handleTickEventEv+0x204>)
 80098e4:	6013      	str	r3, [r2, #0]
			lastChange = tickCounter;
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4b1f      	ldr	r3, [pc, #124]	; (8009968 <_ZN11Screen1View15handleTickEventEv+0x1f4>)
 80098ea:	4413      	add	r3, r2
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a1f      	ldr	r2, [pc, #124]	; (800996c <_ZN11Screen1View15handleTickEventEv+0x1f8>)
 80098f0:	6013      	str	r3, [r2, #0]
		}
 80098f2:	e01a      	b.n	800992a <_ZN11Screen1View15handleTickEventEv+0x1b6>
	}
	else if (telemetryData.gear == 7)
 80098f4:	4b16      	ldr	r3, [pc, #88]	; (8009950 <_ZN11Screen1View15handleTickEventEv+0x1dc>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	d10e      	bne.n	800991a <_ZN11Screen1View15handleTickEventEv+0x1a6>
	{
		alertBar1.setState(EBarState::Warning);
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4b1c      	ldr	r3, [pc, #112]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 8009900:	4413      	add	r3, r2
 8009902:	2102      	movs	r1, #2
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fbe1 	bl	800a0cc <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("GEAR UNKNOWN");
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4b18      	ldr	r3, [pc, #96]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 800990e:	4413      	add	r3, r2
 8009910:	491a      	ldr	r1, [pc, #104]	; (800997c <_ZN11Screen1View15handleTickEventEv+0x208>)
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fc42 	bl	800a19c <_ZN8alertBar7setTextEPKc>
 8009918:	e008      	b.n	800992c <_ZN11Screen1View15handleTickEventEv+0x1b8>
	}
	else
	{
		alertBar1.setState(EBarState::Blank);
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	4b14      	ldr	r3, [pc, #80]	; (8009970 <_ZN11Screen1View15handleTickEventEv+0x1fc>)
 800991e:	4413      	add	r3, r2
 8009920:	2100      	movs	r1, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fbd2 	bl	800a0cc <_ZN8alertBar8setStateE9EBarState>
 8009928:	e000      	b.n	800992c <_ZN11Screen1View15handleTickEventEv+0x1b8>
		}
 800992a:	bf00      	nop

	//setClt(EcuData.clt);
	//setBatt(EcuData.batt);
	//alertBar1.invalidate();
	//alertBar1.setText("12345678912345\n");
	tickCounter++;
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <_ZN11Screen1View15handleTickEventEv+0x1f4>)
 8009930:	4413      	add	r3, r2
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <_ZN11Screen1View15handleTickEventEv+0x1f4>)
 800993a:	440b      	add	r3, r1
 800993c:	601a      	str	r2, [r3, #0]
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200239c0 	.word	0x200239c0
 800994c:	200239f4 	.word	0x200239f4
 8009950:	200239ec 	.word	0x200239ec
 8009954:	200239f6 	.word	0x200239f6
 8009958:	200239f8 	.word	0x200239f8
 800995c:	200239fc 	.word	0x200239fc
 8009960:	20023a00 	.word	0x20023a00
 8009964:	20023a04 	.word	0x20023a04
 8009968:	0002268c 	.word	0x0002268c
 800996c:	20023a08 	.word	0x20023a08
 8009970:	0001f514 	.word	0x0001f514
 8009974:	0802b870 	.word	0x0802b870
 8009978:	200239f0 	.word	0x200239f0
 800997c:	0802b880 	.word	0x0802b880

08009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void Screen1View::setText(touchgfx::TextAreaWithOneWildcard textArea,
		touchgfx::Unicode::UnicodeChar *buffer, const char inText[])
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
	Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 800998e:	6838      	ldr	r0, [r7, #0]
 8009990:	f7f6 fc56 	bl	8000240 <strlen>
 8009994:	4603      	mov	r3, r0
 8009996:	b29b      	uxth	r3, r3
 8009998:	3301      	adds	r3, #1
 800999a:	b29b      	uxth	r3, r3
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f012 fc79 	bl	801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	//textArea.resizeToCurrentText();
	textArea.invalidate();
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f010 fbf3 	bl	801a194 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
 80099c2:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	3304      	adds	r3, #4
 80099ce:	3204      	adds	r2, #4
 80099d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	320c      	adds	r2, #12
 80099e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	615a      	str	r2, [r3, #20]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	619a      	str	r2, [r3, #24]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	69da      	ldr	r2, [r3, #28]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	61da      	str	r2, [r3, #28]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	841a      	strh	r2, [r3, #32]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	845a      	strh	r2, [r3, #34]	; 0x22
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	0802d8b4 	.word	0x0802d8b4

08009a40 <_ZN8touchgfx6WidgetC1ERKS0_>:
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	4611      	mov	r1, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff ffb1 	bl	80099b8 <_ZN8touchgfx8DrawableC1ERKS0_>
 8009a56:	4a04      	ldr	r2, [pc, #16]	; (8009a68 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0802bf6c 	.word	0x0802bf6c

08009a6c <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff ffdf 	bl	8009a40 <_ZN8touchgfx6WidgetC1ERKS0_>
 8009a82:	4a19      	ldr	r2, [pc, #100]	; (8009ae8 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	3328      	adds	r3, #40	; 0x28
 8009a92:	4619      	mov	r1, r3
 8009a94:	4610      	mov	r0, r2
 8009a96:	f7fc f8b3 	bl	8005c00 <_ZN8touchgfx9TypedTextC1ERKS0_>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	869a      	strh	r2, [r3, #52]	; 0x34
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0802d3c0 	.word	0x0802d3c0

08009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff ffb5 	bl	8009a6c <_ZN8touchgfx8TextAreaC1ERKS0_>
 8009b02:	4a06      	ldr	r2, [pc, #24]	; (8009b1c <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	0802d4cc 	.word	0x0802d4cc

08009b20 <_ZN11Screen1View6setRPMEi>:

void Screen1View::setRPM(int inRPM)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b096      	sub	sp, #88	; 0x58
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	sprintf(textBuffer, "%d", inRPM);
 8009b2a:	f107 030c 	add.w	r3, r7, #12
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	490f      	ldr	r1, [pc, #60]	; (8009b70 <_ZN11Screen1View6setRPMEi+0x50>)
 8009b32:	4618      	mov	r0, r3
 8009b34:	f01d fdf4 	bl	8027720 <siprintf>
	setText(rpmArea, rpmAreaBuffer, textBuffer);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8009b3e:	f107 0318 	add.w	r3, r7, #24
 8009b42:	4611      	mov	r1, r2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff ffd1 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a09      	ldr	r2, [pc, #36]	; (8009b74 <_ZN11Screen1View6setRPMEi+0x54>)
 8009b4e:	441a      	add	r2, r3
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	f107 0118 	add.w	r1, r7, #24
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff ff11 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009b5e:	f107 0318 	add.w	r3, r7, #24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fc5a 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009b68:	bf00      	nop
 8009b6a:	3758      	adds	r7, #88	; 0x58
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	0802b890 	.word	0x0802b890
 8009b74:	0001f748 	.word	0x0001f748

08009b78 <_ZN11Screen1View7setBattEf>:

void Screen1View::setBatt(float inBatt)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b096      	sub	sp, #88	; 0x58
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	if (inBatt < 10.0f)
 8009b84:	edd7 7a00 	vldr	s15, [r7]
 8009b88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b94:	d50b      	bpl.n	8009bae <_ZN11Screen1View7setBattEf+0x36>
	{
		sprintf(textBuffer, " %.1f", inBatt);
 8009b96:	edd7 7a00 	vldr	s15, [r7]
 8009b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009b9e:	f107 000c 	add.w	r0, r7, #12
 8009ba2:	ec53 2b17 	vmov	r2, r3, d7
 8009ba6:	4915      	ldr	r1, [pc, #84]	; (8009bfc <_ZN11Screen1View7setBattEf+0x84>)
 8009ba8:	f01d fdba 	bl	8027720 <siprintf>
 8009bac:	e00a      	b.n	8009bc4 <_ZN11Screen1View7setBattEf+0x4c>
	}
	else
	{
		sprintf(textBuffer, "%.1f", inBatt);
 8009bae:	edd7 7a00 	vldr	s15, [r7]
 8009bb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009bb6:	f107 000c 	add.w	r0, r7, #12
 8009bba:	ec53 2b17 	vmov	r2, r3, d7
 8009bbe:	4910      	ldr	r1, [pc, #64]	; (8009c00 <_ZN11Screen1View7setBattEf+0x88>)
 8009bc0:	f01d fdae 	bl	8027720 <siprintf>
	}

	setText(battArea, battAreaBuffer, textBuffer);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8009bca:	f107 0318 	add.w	r3, r7, #24
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff ff8b 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a0a      	ldr	r2, [pc, #40]	; (8009c04 <_ZN11Screen1View7setBattEf+0x8c>)
 8009bda:	441a      	add	r2, r3
 8009bdc:	f107 030c 	add.w	r3, r7, #12
 8009be0:	f107 0118 	add.w	r1, r7, #24
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff fecb 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009bea:	f107 0318 	add.w	r3, r7, #24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fc14 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009bf4:	bf00      	nop
 8009bf6:	3758      	adds	r7, #88	; 0x58
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	0802b894 	.word	0x0802b894
 8009c00:	0802b89c 	.word	0x0802b89c
 8009c04:	0001f75c 	.word	0x0001f75c

08009c08 <_ZN11Screen1View11setOilPressEf>:

void Screen1View::setOilPress(float inOilPress)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b096      	sub	sp, #88	; 0x58
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	sprintf(textBuffer, "%.1f", inOilPress);
 8009c14:	edd7 7a00 	vldr	s15, [r7]
 8009c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009c1c:	f107 000c 	add.w	r0, r7, #12
 8009c20:	ec53 2b17 	vmov	r2, r3, d7
 8009c24:	490f      	ldr	r1, [pc, #60]	; (8009c64 <_ZN11Screen1View11setOilPressEf+0x5c>)
 8009c26:	f01d fd7b 	bl	8027720 <siprintf>
	setText(oilPressArea, oilPressAreaBuffer, textBuffer);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff ff58 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a0a      	ldr	r2, [pc, #40]	; (8009c68 <_ZN11Screen1View11setOilPressEf+0x60>)
 8009c40:	441a      	add	r2, r3
 8009c42:	f107 030c 	add.w	r3, r7, #12
 8009c46:	f107 0118 	add.w	r1, r7, #24
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fe98 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009c50:	f107 0318 	add.w	r3, r7, #24
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fbe1 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009c5a:	bf00      	nop
 8009c5c:	3758      	adds	r7, #88	; 0x58
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	0802b89c 	.word	0x0802b89c
 8009c68:	0001f770 	.word	0x0001f770

08009c6c <_ZN11Screen1View10setOilTempEh>:
void Screen1View::setOilTemp(uint8_t inOilTemp)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b096      	sub	sp, #88	; 0x58
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
	char textBuffer[10];
		sprintf(textBuffer, "%i", inOilTemp);
 8009c78:	78fa      	ldrb	r2, [r7, #3]
 8009c7a:	f107 030c 	add.w	r3, r7, #12
 8009c7e:	4910      	ldr	r1, [pc, #64]	; (8009cc0 <_ZN11Screen1View10setOilTempEh+0x54>)
 8009c80:	4618      	mov	r0, r3
 8009c82:	f01d fd4d 	bl	8027720 <siprintf>
		setText(oilTempArea, oilTempAreaBuffer, textBuffer);
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <_ZN11Screen1View10setOilTempEh+0x58>)
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f107 0218 	add.w	r2, r7, #24
 8009c90:	4619      	mov	r1, r3
 8009c92:	4610      	mov	r0, r2
 8009c94:	f7ff ff2a 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a0b      	ldr	r2, [pc, #44]	; (8009cc8 <_ZN11Screen1View10setOilTempEh+0x5c>)
 8009c9c:	441a      	add	r2, r3
 8009c9e:	f107 030c 	add.w	r3, r7, #12
 8009ca2:	f107 0118 	add.w	r1, r7, #24
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fe6a 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009cac:	f107 0318 	add.w	r3, r7, #24
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fbb3 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009cb6:	bf00      	nop
 8009cb8:	3758      	adds	r7, #88	; 0x58
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0802b8a4 	.word	0x0802b8a4
 8009cc4:	0001f704 	.word	0x0001f704
 8009cc8:	0001f798 	.word	0x0001f798

08009ccc <_ZN11Screen1View6setCltEs>:

void Screen1View::setClt(int16_t inClt)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b096      	sub	sp, #88	; 0x58
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	807b      	strh	r3, [r7, #2]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inClt);
 8009cd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009cdc:	f107 030c 	add.w	r3, r7, #12
 8009ce0:	490f      	ldr	r1, [pc, #60]	; (8009d20 <_ZN11Screen1View6setCltEs+0x54>)
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f01d fd1c 	bl	8027720 <siprintf>
	setText(cltArea, cltAreaBuffer, textBuffer);
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <_ZN11Screen1View6setCltEs+0x58>)
 8009cec:	4413      	add	r3, r2
 8009cee:	f107 0218 	add.w	r2, r7, #24
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7ff fef9 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <_ZN11Screen1View6setCltEs+0x5c>)
 8009cfe:	441a      	add	r2, r3
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	f107 0118 	add.w	r1, r7, #24
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff fe39 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009d0e:	f107 0318 	add.w	r3, r7, #24
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe fb82 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009d18:	bf00      	nop
 8009d1a:	3758      	adds	r7, #88	; 0x58
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	0802b8a4 	.word	0x0802b8a4
 8009d24:	0001f6c4 	.word	0x0001f6c4
 8009d28:	0001f784 	.word	0x0001f784

08009d2c <_ZN11Screen1View7setGearEi>:

void Screen1View::setGear(int inGear)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b0a6      	sub	sp, #152	; 0x98
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	if (inGear == 0)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11f      	bne.n	8009d7c <_ZN11Screen1View7setGearEi+0x50>
	{
		sprintf(textBuffer, "%s", "N");
 8009d3c:	f107 030c 	add.w	r3, r7, #12
 8009d40:	4a21      	ldr	r2, [pc, #132]	; (8009dc8 <_ZN11Screen1View7setGearEi+0x9c>)
 8009d42:	4922      	ldr	r1, [pc, #136]	; (8009dcc <_ZN11Screen1View7setGearEi+0xa0>)
 8009d44:	4618      	mov	r0, r3
 8009d46:	f01d fceb 	bl	8027720 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009d50:	f107 0318 	add.w	r3, r7, #24
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7ff fec8 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a1c      	ldr	r2, [pc, #112]	; (8009dd0 <_ZN11Screen1View7setGearEi+0xa4>)
 8009d60:	441a      	add	r2, r3
 8009d62:	f107 030c 	add.w	r3, r7, #12
 8009d66:	f107 0118 	add.w	r1, r7, #24
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff fe08 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009d70:	f107 0318 	add.w	r3, r7, #24
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fb51 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
	{
		sprintf(textBuffer, "%d", inGear);
		setText(gearArea, gearAreaBuffer, textBuffer);
	}

}
 8009d7a:	e021      	b.n	8009dc0 <_ZN11Screen1View7setGearEi+0x94>
	else if (inGear < 7)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b06      	cmp	r3, #6
 8009d80:	dc1e      	bgt.n	8009dc0 <_ZN11Screen1View7setGearEi+0x94>
		sprintf(textBuffer, "%d", inGear);
 8009d82:	f107 030c 	add.w	r3, r7, #12
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	4912      	ldr	r1, [pc, #72]	; (8009dd4 <_ZN11Screen1View7setGearEi+0xa8>)
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f01d fcc8 	bl	8027720 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff fea5 	bl	8009aec <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a0a      	ldr	r2, [pc, #40]	; (8009dd0 <_ZN11Screen1View7setGearEi+0xa4>)
 8009da6:	441a      	add	r2, r3
 8009da8:	f107 030c 	add.w	r3, r7, #12
 8009dac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fde5 	bl	8009980 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009db6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fb2e 	bl	800841c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009dc0:	bf00      	nop
 8009dc2:	3798      	adds	r7, #152	; 0x98
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	0802b8a8 	.word	0x0802b8a8
 8009dcc:	0802b8ac 	.word	0x0802b8ac
 8009dd0:	0001f744 	.word	0x0001f744
 8009dd4:	0802b890 	.word	0x0802b890

08009dd8 <_Z41__static_initialization_and_destruction_0ii>:
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b092      	sub	sp, #72	; 0x48
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	f040 8114 	bne.w	800a012 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009df0:	4293      	cmp	r3, r2
 8009df2:	f040 810e 	bne.w	800a012 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009df6:	2300      	movs	r3, #0
 8009df8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009e02:	2300      	movs	r3, #0
 8009e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e24:	041b      	lsls	r3, r3, #16
 8009e26:	461a      	mov	r2, r3
 8009e28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009e3a:	f107 0320 	add.w	r3, r7, #32
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fa f947 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009e46:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009e48:	bf00      	nop
 8009e4a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009e4c:	4b73      	ldr	r3, [pc, #460]	; (800a01c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	23ff      	movs	r3, #255	; 0xff
 8009e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009e56:	2300      	movs	r3, #0
 8009e58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009e76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	461a      	mov	r2, r3
 8009e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009e94:	f107 031c 	add.w	r3, r7, #28
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fa f91a 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009ea0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009ea2:	bf00      	nop
 8009ea4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009ea6:	4b5e      	ldr	r3, [pc, #376]	; (800a020 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009eb0:	23ff      	movs	r3, #255	; 0xff
 8009eb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009ec0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ec4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009ec8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ed0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009ed4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ed8:	041b      	lsls	r3, r3, #16
 8009eda:	461a      	mov	r2, r3
 8009edc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009eee:	f107 0318 	add.w	r3, r7, #24
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fa f8ed 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009efa:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009efc:	bf00      	nop
 8009efe:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009f00:	4b48      	ldr	r3, [pc, #288]	; (800a024 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009f10:	23ff      	movs	r3, #255	; 0xff
 8009f12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009f16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f1a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009f1e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f26:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009f2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009f2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009f32:	041b      	lsls	r3, r3, #16
 8009f34:	461a      	mov	r2, r3
 8009f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f3a:	021b      	lsls	r3, r3, #8
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009f42:	4313      	orrs	r3, r2
 8009f44:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fa f8c0 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009f54:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009f56:	bf00      	nop
 8009f58:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009f5a:	4b33      	ldr	r3, [pc, #204]	; (800a028 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	23f7      	movs	r3, #247	; 0xf7
 8009f60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009f64:	234c      	movs	r3, #76	; 0x4c
 8009f66:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f70:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009f74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009f78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009f7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009f80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f84:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009f88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009f8c:	041b      	lsls	r3, r3, #16
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	431a      	orrs	r2, r3
 8009f98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009fa2:	f107 0310 	add.w	r3, r7, #16
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fa f893 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 8009fae:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009fb0:	bf00      	nop
 8009fb2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	23f7      	movs	r3, #247	; 0xf7
 8009fba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009fbe:	23d2      	movs	r3, #210	; 0xd2
 8009fc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009fca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009fce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009fd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fda:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009fde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009fe2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009fe6:	041b      	lsls	r3, r3, #16
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009ffc:	f107 030c 	add.w	r3, r7, #12
 800a000:	4611      	mov	r1, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f7fa f866 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a008:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a00a:	bf00      	nop
 800a00c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a00e:	4b08      	ldr	r3, [pc, #32]	; (800a030 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	bf00      	nop
 800a014:	3748      	adds	r7, #72	; 0x48
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	200239a8 	.word	0x200239a8
 800a020:	200239ac 	.word	0x200239ac
 800a024:	200239b0 	.word	0x200239b0
 800a028:	200239b4 	.word	0x200239b4
 800a02c:	200239b8 	.word	0x200239b8
 800a030:	200239bc 	.word	0x200239bc

0800a034 <_GLOBAL__sub_I_EcuData>:
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
 800a038:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7ff fecb 	bl	8009dd8 <_Z41__static_initialization_and_destruction_0ii>
 800a042:	bd80      	pop	{r7, pc}

0800a044 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fea0 	bl	8008d94 <_ZN12alertBarBaseC1Ev>
 800a054:	4a0d      	ldr	r2, [pc, #52]	; (800a08c <_ZN8alertBarC1Ev+0x48>)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a0c      	ldr	r2, [pc, #48]	; (800a090 <_ZN8alertBarC1Ev+0x4c>)
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a0b      	ldr	r2, [pc, #44]	; (800a094 <_ZN8alertBarC1Ev+0x50>)
 800a068:	6812      	ldr	r2, [r2, #0]
 800a06a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a09      	ldr	r2, [pc, #36]	; (800a098 <_ZN8alertBarC1Ev+0x54>)
 800a072:	6812      	ldr	r2, [r2, #0]
 800a074:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a08      	ldr	r2, [pc, #32]	; (800a09c <_ZN8alertBarC1Ev+0x58>)
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
{
}
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0802c1dc 	.word	0x0802c1dc
 800a090:	20023a18 	.word	0x20023a18
 800a094:	20023a1c 	.word	0x20023a1c
 800a098:	20023a10 	.word	0x20023a10
 800a09c:	20023a20 	.word	0x20023a20

0800a0a0 <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe ff4e 	bl	8008f4c <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	33b0      	adds	r3, #176	; 0xb0
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f7fc fe5d 	bl	8006d7c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b06      	cmp	r3, #6
 800a0da:	d84d      	bhi.n	800a178 <_ZN8alertBar8setStateE9EBarState+0xac>
 800a0dc:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <_ZN8alertBar8setStateE9EBarState+0x18>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a101 	.word	0x0800a101
 800a0e8:	0800a119 	.word	0x0800a119
 800a0ec:	0800a129 	.word	0x0800a129
 800a0f0:	0800a139 	.word	0x0800a139
 800a0f4:	0800a149 	.word	0x0800a149
 800a0f8:	0800a159 	.word	0x0800a159
 800a0fc:	0800a169 	.word	0x0800a169
    switch (inState)
    {
    case EBarState::Blank:
    	bgBox.setColor(colors::blue);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	332c      	adds	r3, #44	; 0x2c
 800a104:	4a1f      	ldr	r2, [pc, #124]	; (800a184 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 800a106:	6811      	ldr	r1, [r2, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fc fd9b 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	setText("");
 800a10e:	491e      	ldr	r1, [pc, #120]	; (800a188 <_ZN8alertBar8setStateE9EBarState+0xbc>)
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f843 	bl	800a19c <_ZN8alertBar7setTextEPKc>
    	break;
 800a116:	e030      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Info:
        bgBox.setColor(colors::green);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	332c      	adds	r3, #44	; 0x2c
 800a11c:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <_ZN8alertBar8setStateE9EBarState+0xc0>)
 800a11e:	6811      	ldr	r1, [r2, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f7fc fd8f 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a126:	e028      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Warning:
        bgBox.setColor(colors::orange);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	332c      	adds	r3, #44	; 0x2c
 800a12c:	4a18      	ldr	r2, [pc, #96]	; (800a190 <_ZN8alertBar8setStateE9EBarState+0xc4>)
 800a12e:	6811      	ldr	r1, [r2, #0]
 800a130:	4618      	mov	r0, r3
 800a132:	f7fc fd87 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a136:	e020      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Fault:
        bgBox.setColor(colors::red);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	332c      	adds	r3, #44	; 0x2c
 800a13c:	4a15      	ldr	r2, [pc, #84]	; (800a194 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 800a13e:	6811      	ldr	r1, [r2, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f7fc fd7f 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a146:	e018      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical1:
    	bgBox.setColor(colors::red);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	332c      	adds	r3, #44	; 0x2c
 800a14c:	4a11      	ldr	r2, [pc, #68]	; (800a194 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 800a14e:	6811      	ldr	r1, [r2, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f7fc fd77 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 800a156:	e010      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical2:
    	bgBox.setColor(colors::yellow);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	332c      	adds	r3, #44	; 0x2c
 800a15c:	4a0e      	ldr	r2, [pc, #56]	; (800a198 <_ZN8alertBar8setStateE9EBarState+0xcc>)
 800a15e:	6811      	ldr	r1, [r2, #0]
 800a160:	4618      	mov	r0, r3
 800a162:	f7fc fd6f 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 800a166:	e008      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::News:
        bgBox.setColor(colors::blue);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	332c      	adds	r3, #44	; 0x2c
 800a16c:	4a05      	ldr	r2, [pc, #20]	; (800a184 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 800a16e:	6811      	ldr	r1, [r2, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f7fc fd67 	bl	8006c44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a176:	e000      	b.n	800a17a <_ZN8alertBar8setStateE9EBarState+0xae>

    default:
        break;
 800a178:	bf00      	nop
    }
}
 800a17a:	bf00      	nop
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20023a18 	.word	0x20023a18
 800a188:	0802b8b0 	.word	0x0802b8b0
 800a18c:	20023a14 	.word	0x20023a14
 800a190:	20023a1c 	.word	0x20023a1c
 800a194:	20023a10 	.word	0x20023a10
 800a198:	20023a20 	.word	0x20023a20

0800a19c <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800a1ac:	6838      	ldr	r0, [r7, #0]
 800a1ae:	f7f6 f847 	bl	8000240 <strlen>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f012 f86a 	bl	801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //frontText.resizeToCurrentText();
    frontText.invalidate();
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3360      	adds	r3, #96	; 0x60
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f00f ffe3 	bl	801a194 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a1ce:	bf00      	nop
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd90      	pop	{r4, r7, pc}
	...

0800a1d8 <_Z41__static_initialization_and_destruction_0ii>:
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b092      	sub	sp, #72	; 0x48
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	f040 8114 	bne.w	800a412 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	f040 810e 	bne.w	800a412 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a202:	2300      	movs	r3, #0
 800a204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a208:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a20c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a214:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a21c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a224:	041b      	lsls	r3, r3, #16
 800a226:	461a      	mov	r2, r3
 800a228:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a22c:	021b      	lsls	r3, r3, #8
 800a22e:	431a      	orrs	r2, r3
 800a230:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a234:	4313      	orrs	r3, r2
 800a236:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a23a:	f107 0320 	add.w	r3, r7, #32
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7f9 ff47 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a246:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a248:	bf00      	nop
 800a24a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a24c:	4b73      	ldr	r3, [pc, #460]	; (800a41c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	23ff      	movs	r3, #255	; 0xff
 800a252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a256:	2300      	movs	r3, #0
 800a258:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a25c:	2300      	movs	r3, #0
 800a25e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a266:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a26a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a276:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a27a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a27e:	041b      	lsls	r3, r3, #16
 800a280:	461a      	mov	r2, r3
 800a282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	431a      	orrs	r2, r3
 800a28a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a28e:	4313      	orrs	r3, r2
 800a290:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a294:	f107 031c 	add.w	r3, r7, #28
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f9 ff1a 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a2a0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a2a2:	bf00      	nop
 800a2a4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a2a6:	4b5e      	ldr	r3, [pc, #376]	; (800a420 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a2b0:	23ff      	movs	r3, #255	; 0xff
 800a2b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a2c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a2c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a2c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a2cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a2d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a2d8:	041b      	lsls	r3, r3, #16
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a2ee:	f107 0318 	add.w	r3, r7, #24
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7f9 feed 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a2fa:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a2fc:	bf00      	nop
 800a2fe:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800a300:	4b48      	ldr	r3, [pc, #288]	; (800a424 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a30a:	2300      	movs	r3, #0
 800a30c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a310:	23ff      	movs	r3, #255	; 0xff
 800a312:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a316:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a31a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a31e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a322:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a326:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a32a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a32e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	461a      	mov	r2, r3
 800a336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	431a      	orrs	r2, r3
 800a33e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a342:	4313      	orrs	r3, r2
 800a344:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a348:	f107 0314 	add.w	r3, r7, #20
 800a34c:	4611      	mov	r1, r2
 800a34e:	4618      	mov	r0, r3
 800a350:	f7f9 fec0 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a354:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a356:	bf00      	nop
 800a358:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a35a:	4b33      	ldr	r3, [pc, #204]	; (800a428 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	23f7      	movs	r3, #247	; 0xf7
 800a360:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a364:	234c      	movs	r3, #76	; 0x4c
 800a366:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a36a:	2302      	movs	r3, #2
 800a36c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a370:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a374:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a378:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a37c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a380:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a384:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a388:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	461a      	mov	r2, r3
 800a390:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	431a      	orrs	r2, r3
 800a398:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a3a2:	f107 0310 	add.w	r3, r7, #16
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f9 fe93 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a3ae:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a3b0:	bf00      	nop
 800a3b2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a3b4:	4b1d      	ldr	r3, [pc, #116]	; (800a42c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	23f7      	movs	r3, #247	; 0xf7
 800a3ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a3be:	23d2      	movs	r3, #210	; 0xd2
 800a3c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a3ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a3ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a3d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a3de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a3fc:	f107 030c 	add.w	r3, r7, #12
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7f9 fe66 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a408:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a40a:	bf00      	nop
 800a40c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a40e:	4b08      	ldr	r3, [pc, #32]	; (800a430 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	bf00      	nop
 800a414:	3748      	adds	r7, #72	; 0x48
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20023a0c 	.word	0x20023a0c
 800a420:	20023a10 	.word	0x20023a10
 800a424:	20023a14 	.word	0x20023a14
 800a428:	20023a18 	.word	0x20023a18
 800a42c:	20023a1c 	.word	0x20023a1c
 800a430:	20023a20 	.word	0x20023a20

0800a434 <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
 800a438:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a43c:	2001      	movs	r0, #1
 800a43e:	f7ff fecb 	bl	800a1d8 <_Z41__static_initialization_and_destruction_0ii>
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 800a444:	b5b0      	push	{r4, r5, r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af02      	add	r7, sp, #8
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fd86 	bl	8008f60 <_ZN11tempBoxBaseC1Ev>
 800a454:	4a6a      	ldr	r2, [pc, #424]	; (800a600 <_ZN7tempBoxC1Ev+0x1bc>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	22dc      	movs	r2, #220	; 0xdc
 800a466:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a470:	24db      	movs	r4, #219	; 0xdb
 800a472:	461d      	mov	r5, r3
 800a474:	2c00      	cmp	r4, #0
 800a476:	db05      	blt.n	800a484 <_ZN7tempBoxC1Ev+0x40>
 800a478:	4628      	mov	r0, r5
 800a47a:	f00c fc7b 	bl	8016d74 <_ZN8touchgfx4LineC1Ev>
 800a47e:	3574      	adds	r5, #116	; 0x74
 800a480:	3c01      	subs	r4, #1
 800a482:	e7f7      	b.n	800a474 <_ZN7tempBoxC1Ev+0x30>
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	f646 031c 	movw	r3, #26652	; 0x681c
 800a48a:	4413      	add	r3, r2
 800a48c:	24db      	movs	r4, #219	; 0xdb
 800a48e:	461d      	mov	r5, r3
 800a490:	2c00      	cmp	r4, #0
 800a492:	db0c      	blt.n	800a4ae <_ZN7tempBoxC1Ev+0x6a>
 800a494:	f107 0308 	add.w	r3, r7, #8
 800a498:	2100      	movs	r1, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7f9 fe1a 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f7fc fd82 	bl	8006fac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800a4a8:	3518      	adds	r5, #24
 800a4aa:	3c01      	subs	r4, #1
 800a4ac:	e7f0      	b.n	800a490 <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	617b      	str	r3, [r7, #20]
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2bdb      	cmp	r3, #219	; 0xdb
 800a4b6:	f300 809e 	bgt.w	800a5f6 <_ZN7tempBoxC1Ev+0x1b2>
    {
        lines[i].setPosition(0,0,220,60);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2274      	movs	r2, #116	; 0x74
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
 800a4c2:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	1d18      	adds	r0, r3, #4
 800a4cc:	233c      	movs	r3, #60	; 0x3c
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	23dc      	movs	r3, #220	; 0xdc
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	f7fc fa32 	bl	800693e <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(10 ,255, 0));
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	4413      	add	r3, r2
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	f646 0218 	movw	r2, #26648	; 0x6818
 800a4e8:	441a      	add	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	1d1c      	adds	r4, r3, #4
 800a4f0:	230a      	movs	r3, #10
 800a4f2:	74fb      	strb	r3, [r7, #19]
 800a4f4:	23ff      	movs	r3, #255	; 0xff
 800a4f6:	74bb      	strb	r3, [r7, #18]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a4fc:	7cfb      	ldrb	r3, [r7, #19]
 800a4fe:	041b      	lsls	r3, r3, #16
 800a500:	461a      	mov	r2, r3
 800a502:	7cbb      	ldrb	r3, [r7, #18]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	431a      	orrs	r2, r3
 800a508:	7c7b      	ldrb	r3, [r7, #17]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a510:	f107 030c 	add.w	r3, r7, #12
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7f9 fddc 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4619      	mov	r1, r3
 800a520:	4620      	mov	r0, r4
 800a522:	f7fc fd63 	bl	8006fec <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2274      	movs	r2, #116	; 0x74
 800a52a:	fb02 f303 	mul.w	r3, r2, r3
 800a52e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	4413      	add	r3, r2
 800a536:	1d18      	adds	r0, r3, #4
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2174      	movs	r1, #116	; 0x74
 800a53e:	fb01 f303 	mul.w	r3, r1, r3
 800a542:	4413      	add	r3, r2
 800a544:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	335c      	adds	r3, #92	; 0x5c
 800a54c:	681c      	ldr	r4, [r3, #0]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	4613      	mov	r3, r2
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	4413      	add	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	f646 0218 	movw	r2, #26648	; 0x6818
 800a55c:	441a      	add	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4413      	add	r3, r2
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	47a0      	blx	r4
        lines[i].setStart(i,0);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2274      	movs	r2, #116	; 0x74
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4413      	add	r3, r2
 800a578:	3304      	adds	r3, #4
 800a57a:	2200      	movs	r2, #0
 800a57c:	6979      	ldr	r1, [r7, #20]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fd fd32 	bl	8007fe8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2274      	movs	r2, #116	; 0x74
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	4413      	add	r3, r2
 800a594:	3304      	adds	r3, #4
 800a596:	223c      	movs	r2, #60	; 0x3c
 800a598:	6979      	ldr	r1, [r7, #20]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fd fd4a 	bl	8008034 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2274      	movs	r2, #116	; 0x74
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fd fd63 	bl	8008080 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2274      	movs	r2, #116	; 0x74
 800a5be:	fb02 f303 	mul.w	r3, r2, r3
 800a5c2:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f00c fd16 	bl	8017000 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2274      	movs	r2, #116	; 0x74
 800a5da:	fb02 f303 	mul.w	r3, r2, r3
 800a5de:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f00a ffcf 	bl	801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e75d      	b.n	800a4b2 <_ZN7tempBoxC1Ev+0x6e>
    }

}
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a600:	0802c268 	.word	0x0802c268

0800a604 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fd86 	bl	8009120 <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 25;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2219      	movs	r2, #25
 800a618:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 25;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2219      	movs	r2, #25
 800a620:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 25;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2219      	movs	r2, #25
 800a628:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 25;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2219      	movs	r2, #25
 800a630:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 25;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2219      	movs	r2, #25
 800a638:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 25;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2219      	movs	r2, #25
 800a640:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2205      	movs	r2, #5
 800a648:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <_Z41__static_initialization_and_destruction_0ii>:
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
        
        const colortype tempColor = mapTemp(endValue);
        linesPainter[i].setColor(tempColor);
    }
}
 800a654:	b580      	push	{r7, lr}
 800a656:	b092      	sub	sp, #72	; 0x48
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b01      	cmp	r3, #1
 800a662:	f040 8114 	bne.w	800a88e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a66c:	4293      	cmp	r3, r2
 800a66e:	f040 810e 	bne.w	800a88e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a672:	2300      	movs	r3, #0
 800a674:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a678:	2300      	movs	r3, #0
 800a67a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a67e:	2300      	movs	r3, #0
 800a680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a684:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a68c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a690:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a698:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800a69c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6a0:	041b      	lsls	r3, r3, #16
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a6a8:	021b      	lsls	r3, r3, #8
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a6b6:	f107 0320 	add.w	r3, r7, #32
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f9 fd09 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a6c4:	bf00      	nop
 800a6c6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a6c8:	4b73      	ldr	r3, [pc, #460]	; (800a898 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	23ff      	movs	r3, #255	; 0xff
 800a6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a6de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a6e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a6ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a6f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a6f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	431a      	orrs	r2, r3
 800a706:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a70a:	4313      	orrs	r3, r2
 800a70c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a710:	f107 031c 	add.w	r3, r7, #28
 800a714:	4611      	mov	r1, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f7f9 fcdc 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a71c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a71e:	bf00      	nop
 800a720:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a722:	4b5e      	ldr	r3, [pc, #376]	; (800a89c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	2300      	movs	r3, #0
 800a728:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a72c:	23ff      	movs	r3, #255	; 0xff
 800a72e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a732:	2300      	movs	r3, #0
 800a734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a738:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a73c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a740:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a744:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a74c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a750:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a754:	041b      	lsls	r3, r3, #16
 800a756:	461a      	mov	r2, r3
 800a758:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	431a      	orrs	r2, r3
 800a760:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a764:	4313      	orrs	r3, r2
 800a766:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a76a:	f107 0318 	add.w	r3, r7, #24
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f7f9 fcaf 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a776:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a778:	bf00      	nop
 800a77a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800a77c:	4b48      	ldr	r3, [pc, #288]	; (800a8a0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	2300      	movs	r3, #0
 800a782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a786:	2300      	movs	r3, #0
 800a788:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a78c:	23ff      	movs	r3, #255	; 0xff
 800a78e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a792:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a796:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a79a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a79e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a7a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a7a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a7aa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a7ae:	041b      	lsls	r3, r3, #16
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a7c4:	f107 0314 	add.w	r3, r7, #20
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f9 fc82 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a7d0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a7d2:	bf00      	nop
 800a7d4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a7d6:	4b33      	ldr	r3, [pc, #204]	; (800a8a4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	23f7      	movs	r3, #247	; 0xf7
 800a7dc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a7e0:	234c      	movs	r3, #76	; 0x4c
 800a7e2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a7ec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a7f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a7f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a7fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a800:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a804:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a808:	041b      	lsls	r3, r3, #16
 800a80a:	461a      	mov	r2, r3
 800a80c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	431a      	orrs	r2, r3
 800a814:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a818:	4313      	orrs	r3, r2
 800a81a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a81e:	f107 0310 	add.w	r3, r7, #16
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7f9 fc55 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a82a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a82c:	bf00      	nop
 800a82e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a830:	4b1d      	ldr	r3, [pc, #116]	; (800a8a8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	23f7      	movs	r3, #247	; 0xf7
 800a836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a83a:	23d2      	movs	r3, #210	; 0xd2
 800a83c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a840:	2302      	movs	r3, #2
 800a842:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a84a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a84e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a856:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a85a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a85e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a862:	041b      	lsls	r3, r3, #16
 800a864:	461a      	mov	r2, r3
 800a866:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	431a      	orrs	r2, r3
 800a86e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a872:	4313      	orrs	r3, r2
 800a874:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a878:	f107 030c 	add.w	r3, r7, #12
 800a87c:	4611      	mov	r1, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f9 fc28 	bl	80040d4 <_ZN8touchgfx9colortypeC1Em>
 800a884:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a886:	bf00      	nop
 800a888:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a88a:	4b08      	ldr	r3, [pc, #32]	; (800a8ac <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	bf00      	nop
 800a890:	3748      	adds	r7, #72	; 0x48
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20023a24 	.word	0x20023a24
 800a89c:	20023a28 	.word	0x20023a28
 800a8a0:	20023a2c 	.word	0x20023a2c
 800a8a4:	20023a30 	.word	0x20023a30
 800a8a8:	20023a34 	.word	0x20023a34
 800a8ac:	20023a38 	.word	0x20023a38

0800a8b0 <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f7ff fecb 	bl	800a654 <_Z41__static_initialization_and_destruction_0ii>
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <SystemInit+0x20>)
 800a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ca:	4a05      	ldr	r2, [pc, #20]	; (800a8e0 <SystemInit+0x20>)
 800a8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000ed00 	.word	0xe000ed00

0800a8e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a8e8:	2003      	movs	r0, #3
 800a8ea:	f001 fb7a 	bl	800bfe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a8ee:	200f      	movs	r0, #15
 800a8f0:	f7f8 f902 	bl	8002af8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800a8f4:	f7f8 f8d8 	bl	8002aa8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a904:	4b06      	ldr	r3, [pc, #24]	; (800a920 <HAL_IncTick+0x20>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	4b06      	ldr	r3, [pc, #24]	; (800a924 <HAL_IncTick+0x24>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4413      	add	r3, r2
 800a910:	4a04      	ldr	r2, [pc, #16]	; (800a924 <HAL_IncTick+0x24>)
 800a912:	6013      	str	r3, [r2, #0]
}
 800a914:	bf00      	nop
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	2000001c 	.word	0x2000001c
 800a924:	2005710c 	.word	0x2005710c

0800a928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  return uwTick;
 800a92c:	4b03      	ldr	r3, [pc, #12]	; (800a93c <HAL_GetTick+0x14>)
 800a92e:	681b      	ldr	r3, [r3, #0]
}
 800a930:	4618      	mov	r0, r3
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	2005710c 	.word	0x2005710c

0800a940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a948:	f7ff ffee 	bl	800a928 <HAL_GetTick>
 800a94c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a958:	d005      	beq.n	800a966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a95a:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <HAL_Delay+0x44>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a966:	bf00      	nop
 800a968:	f7ff ffde 	bl	800a928 <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	429a      	cmp	r2, r3
 800a976:	d8f7      	bhi.n	800a968 <HAL_Delay+0x28>
  {
  }
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	2000001c 	.word	0x2000001c

0800a988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e031      	b.n	800aa02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d109      	bne.n	800a9ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7f6 fb96 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	f003 0310 	and.w	r3, r3, #16
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d116      	bne.n	800a9f4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9ca:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <HAL_ADC_Init+0x84>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	f043 0202 	orr.w	r2, r3, #2
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 faca 	bl	800af70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e6:	f023 0303 	bic.w	r3, r3, #3
 800a9ea:	f043 0201 	orr.w	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	641a      	str	r2, [r3, #64]	; 0x40
 800a9f2:	e001      	b.n	800a9f8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	ffffeefd 	.word	0xffffeefd

0800aa10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d101      	bne.n	800aa2a <HAL_ADC_Start+0x1a>
 800aa26:	2302      	movs	r3, #2
 800aa28:	e0ad      	b.n	800ab86 <HAL_ADC_Start+0x176>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d018      	beq.n	800aa72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0201 	orr.w	r2, r2, #1
 800aa4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800aa50:	4b50      	ldr	r3, [pc, #320]	; (800ab94 <HAL_ADC_Start+0x184>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a50      	ldr	r2, [pc, #320]	; (800ab98 <HAL_ADC_Start+0x188>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	0c9a      	lsrs	r2, r3, #18
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	4413      	add	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800aa64:	e002      	b.n	800aa6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f9      	bne.n	800aa66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d175      	bne.n	800ab6c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa84:	4b45      	ldr	r3, [pc, #276]	; (800ab9c <HAL_ADC_Start+0x18c>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800aaa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaba:	d106      	bne.n	800aaca <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac0:	f023 0206 	bic.w	r2, r3, #6
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	645a      	str	r2, [r3, #68]	; 0x44
 800aac8:	e002      	b.n	800aad0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800aae0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800aae2:	4b2f      	ldr	r3, [pc, #188]	; (800aba0 <HAL_ADC_Start+0x190>)
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10f      	bne.n	800ab0e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d143      	bne.n	800ab84 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ab0a:	609a      	str	r2, [r3, #8]
 800ab0c:	e03a      	b.n	800ab84 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a24      	ldr	r2, [pc, #144]	; (800aba4 <HAL_ADC_Start+0x194>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d10e      	bne.n	800ab36 <HAL_ADC_Start+0x126>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d107      	bne.n	800ab36 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ab34:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800ab36:	4b1a      	ldr	r3, [pc, #104]	; (800aba0 <HAL_ADC_Start+0x190>)
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d120      	bne.n	800ab84 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a18      	ldr	r2, [pc, #96]	; (800aba8 <HAL_ADC_Start+0x198>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d11b      	bne.n	800ab84 <HAL_ADC_Start+0x174>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d114      	bne.n	800ab84 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ab68:	609a      	str	r2, [r3, #8]
 800ab6a:	e00b      	b.n	800ab84 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab70:	f043 0210 	orr.w	r2, r3, #16
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7c:	f043 0201 	orr.w	r2, r3, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20000014 	.word	0x20000014
 800ab98:	431bde83 	.word	0x431bde83
 800ab9c:	fffff8fe 	.word	0xfffff8fe
 800aba0:	40012300 	.word	0x40012300
 800aba4:	40012000 	.word	0x40012000
 800aba8:	40012200 	.word	0x40012200

0800abac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abc8:	d113      	bne.n	800abf2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800abd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd8:	d10b      	bne.n	800abf2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	f043 0220 	orr.w	r2, r3, #32
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e063      	b.n	800acba <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800abf2:	f7ff fe99 	bl	800a928 <HAL_GetTick>
 800abf6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800abf8:	e021      	b.n	800ac3e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d01d      	beq.n	800ac3e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d007      	beq.n	800ac18 <HAL_ADC_PollForConversion+0x6c>
 800ac08:	f7ff fe8e 	bl	800a928 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d212      	bcs.n	800ac3e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d00b      	beq.n	800ac3e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	f043 0204 	orr.w	r2, r3, #4
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	e03d      	b.n	800acba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d1d6      	bne.n	800abfa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0212 	mvn.w	r2, #18
 800ac54:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d123      	bne.n	800acb8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d11f      	bne.n	800acb8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d006      	beq.n	800ac94 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d111      	bne.n	800acb8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d105      	bne.n	800acb8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	f043 0201 	orr.w	r2, r3, #1
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d101      	bne.n	800acf8 <HAL_ADC_ConfigChannel+0x1c>
 800acf4:	2302      	movs	r3, #2
 800acf6:	e12a      	b.n	800af4e <HAL_ADC_ConfigChannel+0x272>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d93a      	bls.n	800ad7e <HAL_ADC_ConfigChannel+0xa2>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad10:	d035      	beq.n	800ad7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68d9      	ldr	r1, [r3, #12]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	4613      	mov	r3, r2
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	4413      	add	r3, r2
 800ad26:	3b1e      	subs	r3, #30
 800ad28:	2207      	movs	r2, #7
 800ad2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2e:	43da      	mvns	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	400a      	ands	r2, r1
 800ad36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a87      	ldr	r2, [pc, #540]	; (800af5c <HAL_ADC_ConfigChannel+0x280>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d10a      	bne.n	800ad58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68d9      	ldr	r1, [r3, #12]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	061a      	lsls	r2, r3, #24
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad56:	e035      	b.n	800adc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68d9      	ldr	r1, [r3, #12]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	689a      	ldr	r2, [r3, #8]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	4618      	mov	r0, r3
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	4403      	add	r3, r0
 800ad70:	3b1e      	subs	r3, #30
 800ad72:	409a      	lsls	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad7c:	e022      	b.n	800adc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6919      	ldr	r1, [r3, #16]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	4413      	add	r3, r2
 800ad92:	2207      	movs	r2, #7
 800ad94:	fa02 f303 	lsl.w	r3, r2, r3
 800ad98:	43da      	mvns	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	400a      	ands	r2, r1
 800ada0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6919      	ldr	r1, [r3, #16]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	4618      	mov	r0, r3
 800adb4:	4603      	mov	r3, r0
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	4403      	add	r3, r0
 800adba:	409a      	lsls	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	2b06      	cmp	r3, #6
 800adca:	d824      	bhi.n	800ae16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	3b05      	subs	r3, #5
 800adde:	221f      	movs	r2, #31
 800ade0:	fa02 f303 	lsl.w	r3, r2, r3
 800ade4:	43da      	mvns	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	400a      	ands	r2, r1
 800adec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	4618      	mov	r0, r3
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	3b05      	subs	r3, #5
 800ae08:	fa00 f203 	lsl.w	r2, r0, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	635a      	str	r2, [r3, #52]	; 0x34
 800ae14:	e04c      	b.n	800aeb0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	2b0c      	cmp	r3, #12
 800ae1c:	d824      	bhi.n	800ae68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	3b23      	subs	r3, #35	; 0x23
 800ae30:	221f      	movs	r2, #31
 800ae32:	fa02 f303 	lsl.w	r3, r2, r3
 800ae36:	43da      	mvns	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	400a      	ands	r2, r1
 800ae3e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	3b23      	subs	r3, #35	; 0x23
 800ae5a:	fa00 f203 	lsl.w	r2, r0, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	430a      	orrs	r2, r1
 800ae64:	631a      	str	r2, [r3, #48]	; 0x30
 800ae66:	e023      	b.n	800aeb0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	3b41      	subs	r3, #65	; 0x41
 800ae7a:	221f      	movs	r2, #31
 800ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae80:	43da      	mvns	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	400a      	ands	r2, r1
 800ae88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	4618      	mov	r0, r3
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	3b41      	subs	r3, #65	; 0x41
 800aea4:	fa00 f203 	lsl.w	r2, r0, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	430a      	orrs	r2, r1
 800aeae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a2a      	ldr	r2, [pc, #168]	; (800af60 <HAL_ADC_ConfigChannel+0x284>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d10a      	bne.n	800aed0 <HAL_ADC_ConfigChannel+0x1f4>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aec2:	d105      	bne.n	800aed0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800aec4:	4b27      	ldr	r3, [pc, #156]	; (800af64 <HAL_ADC_ConfigChannel+0x288>)
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4a26      	ldr	r2, [pc, #152]	; (800af64 <HAL_ADC_ConfigChannel+0x288>)
 800aeca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800aece:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a22      	ldr	r2, [pc, #136]	; (800af60 <HAL_ADC_ConfigChannel+0x284>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d109      	bne.n	800aeee <HAL_ADC_ConfigChannel+0x212>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b12      	cmp	r3, #18
 800aee0:	d105      	bne.n	800aeee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800aee2:	4b20      	ldr	r3, [pc, #128]	; (800af64 <HAL_ADC_ConfigChannel+0x288>)
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	4a1f      	ldr	r2, [pc, #124]	; (800af64 <HAL_ADC_ConfigChannel+0x288>)
 800aee8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aeec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a1b      	ldr	r2, [pc, #108]	; (800af60 <HAL_ADC_ConfigChannel+0x284>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d125      	bne.n	800af44 <HAL_ADC_ConfigChannel+0x268>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a17      	ldr	r2, [pc, #92]	; (800af5c <HAL_ADC_ConfigChannel+0x280>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d003      	beq.n	800af0a <HAL_ADC_ConfigChannel+0x22e>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b11      	cmp	r3, #17
 800af08:	d11c      	bne.n	800af44 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800af0a:	4b16      	ldr	r3, [pc, #88]	; (800af64 <HAL_ADC_ConfigChannel+0x288>)
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	4a15      	ldr	r2, [pc, #84]	; (800af64 <HAL_ADC_ConfigChannel+0x288>)
 800af10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af14:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a10      	ldr	r2, [pc, #64]	; (800af5c <HAL_ADC_ConfigChannel+0x280>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d111      	bne.n	800af44 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800af20:	4b11      	ldr	r3, [pc, #68]	; (800af68 <HAL_ADC_ConfigChannel+0x28c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a11      	ldr	r2, [pc, #68]	; (800af6c <HAL_ADC_ConfigChannel+0x290>)
 800af26:	fba2 2303 	umull	r2, r3, r2, r3
 800af2a:	0c9a      	lsrs	r2, r3, #18
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800af36:	e002      	b.n	800af3e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f9      	bne.n	800af38 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	10000012 	.word	0x10000012
 800af60:	40012000 	.word	0x40012000
 800af64:	40012300 	.word	0x40012300
 800af68:	20000014 	.word	0x20000014
 800af6c:	431bde83 	.word	0x431bde83

0800af70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800af78:	4b78      	ldr	r3, [pc, #480]	; (800b15c <ADC_Init+0x1ec>)
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	4a77      	ldr	r2, [pc, #476]	; (800b15c <ADC_Init+0x1ec>)
 800af7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800af82:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800af84:	4b75      	ldr	r3, [pc, #468]	; (800b15c <ADC_Init+0x1ec>)
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4973      	ldr	r1, [pc, #460]	; (800b15c <ADC_Init+0x1ec>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6859      	ldr	r1, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	021a      	lsls	r2, r3, #8
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800afc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6859      	ldr	r1, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689a      	ldr	r2, [r3, #8]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689a      	ldr	r2, [r3, #8]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6899      	ldr	r1, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68da      	ldr	r2, [r3, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affe:	4a58      	ldr	r2, [pc, #352]	; (800b160 <ADC_Init+0x1f0>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d022      	beq.n	800b04a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b012:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6899      	ldr	r1, [r3, #8]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6899      	ldr	r1, [r3, #8]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	609a      	str	r2, [r3, #8]
 800b048:	e00f      	b.n	800b06a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	689a      	ldr	r2, [r3, #8]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b068:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f022 0202 	bic.w	r2, r2, #2
 800b078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6899      	ldr	r1, [r3, #8]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	005a      	lsls	r2, r3, #1
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01b      	beq.n	800b0d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b0b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6859      	ldr	r1, [r3, #4]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	035a      	lsls	r2, r3, #13
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	605a      	str	r2, [r3, #4]
 800b0ce:	e007      	b.n	800b0e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b0ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	051a      	lsls	r2, r3, #20
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	689a      	ldr	r2, [r3, #8]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6899      	ldr	r1, [r3, #8]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b122:	025a      	lsls	r2, r3, #9
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689a      	ldr	r2, [r3, #8]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b13a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6899      	ldr	r1, [r3, #8]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	029a      	lsls	r2, r3, #10
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	609a      	str	r2, [r3, #8]
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	40012300 	.word	0x40012300
 800b160:	0f000001 	.word	0x0f000001

0800b164 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e0ed      	b.n	800b352 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d102      	bne.n	800b188 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7f6 fa5a 	bl	800163c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0202 	bic.w	r2, r2, #2
 800b196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b198:	f7ff fbc6 	bl	800a928 <HAL_GetTick>
 800b19c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b19e:	e012      	b.n	800b1c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b1a0:	f7ff fbc2 	bl	800a928 <HAL_GetTick>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	2b0a      	cmp	r3, #10
 800b1ac:	d90b      	bls.n	800b1c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2205      	movs	r2, #5
 800b1be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e0c5      	b.n	800b352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e5      	bne.n	800b1a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0201 	orr.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b1e4:	f7ff fba0 	bl	800a928 <HAL_GetTick>
 800b1e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b1ea:	e012      	b.n	800b212 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b1ec:	f7ff fb9c 	bl	800a928 <HAL_GetTick>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	2b0a      	cmp	r3, #10
 800b1f8:	d90b      	bls.n	800b212 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2205      	movs	r2, #5
 800b20a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e09f      	b.n	800b352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d0e5      	beq.n	800b1ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	7e1b      	ldrb	r3, [r3, #24]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d108      	bne.n	800b23a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	e007      	b.n	800b24a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7e5b      	ldrb	r3, [r3, #25]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d108      	bne.n	800b264 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e007      	b.n	800b274 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b272:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7e9b      	ldrb	r3, [r3, #26]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d108      	bne.n	800b28e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0220 	orr.w	r2, r2, #32
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	e007      	b.n	800b29e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f022 0220 	bic.w	r2, r2, #32
 800b29c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7edb      	ldrb	r3, [r3, #27]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d108      	bne.n	800b2b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0210 	bic.w	r2, r2, #16
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	e007      	b.n	800b2c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0210 	orr.w	r2, r2, #16
 800b2c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	7f1b      	ldrb	r3, [r3, #28]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d108      	bne.n	800b2e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0208 	orr.w	r2, r2, #8
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	e007      	b.n	800b2f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0208 	bic.w	r2, r2, #8
 800b2f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7f5b      	ldrb	r3, [r3, #29]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d108      	bne.n	800b30c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f042 0204 	orr.w	r2, r2, #4
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	e007      	b.n	800b31c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0204 	bic.w	r2, r2, #4
 800b31a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	431a      	orrs	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	431a      	orrs	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	ea42 0103 	orr.w	r1, r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	1e5a      	subs	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b372:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b374:	7cfb      	ldrb	r3, [r7, #19]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d003      	beq.n	800b382 <HAL_CAN_ConfigFilter+0x26>
 800b37a:	7cfb      	ldrb	r3, [r7, #19]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	f040 80c7 	bne.w	800b510 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a69      	ldr	r2, [pc, #420]	; (800b52c <HAL_CAN_ConfigFilter+0x1d0>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d001      	beq.n	800b390 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800b38c:	4b68      	ldr	r3, [pc, #416]	; (800b530 <HAL_CAN_ConfigFilter+0x1d4>)
 800b38e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b396:	f043 0201 	orr.w	r2, r3, #1
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	4a63      	ldr	r2, [pc, #396]	; (800b530 <HAL_CAN_ConfigFilter+0x1d4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d111      	bne.n	800b3cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b3ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	021b      	lsls	r3, r3, #8
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	f003 031f 	and.w	r3, r3, #31
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	43db      	mvns	r3, r3
 800b3e6:	401a      	ands	r2, r3
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	69db      	ldr	r3, [r3, #28]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d123      	bne.n	800b43e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	43db      	mvns	r3, r3
 800b400:	401a      	ands	r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b418:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	3248      	adds	r2, #72	; 0x48
 800b41e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b432:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b434:	6979      	ldr	r1, [r7, #20]
 800b436:	3348      	adds	r3, #72	; 0x48
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	440b      	add	r3, r1
 800b43c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d122      	bne.n	800b48c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	431a      	orrs	r2, r3
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b466:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	3248      	adds	r2, #72	; 0x48
 800b46c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b480:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b482:	6979      	ldr	r1, [r7, #20]
 800b484:	3348      	adds	r3, #72	; 0x48
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	440b      	add	r3, r1
 800b48a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	43db      	mvns	r3, r3
 800b49e:	401a      	ands	r2, r3
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b4a6:	e007      	b.n	800b4b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d109      	bne.n	800b4d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	43db      	mvns	r3, r3
 800b4ca:	401a      	ands	r2, r3
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b4d2:	e007      	b.n	800b4e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d107      	bne.n	800b4fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b502:	f023 0201 	bic.w	r2, r3, #1
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	e006      	b.n	800b51e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
  }
}
 800b51e:	4618      	mov	r0, r3
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40003400 	.word	0x40003400
 800b530:	40006400 	.word	0x40006400

0800b534 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b01      	cmp	r3, #1
 800b546:	d12e      	bne.n	800b5a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2202      	movs	r2, #2
 800b54c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 0201 	bic.w	r2, r2, #1
 800b55e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b560:	f7ff f9e2 	bl	800a928 <HAL_GetTick>
 800b564:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b566:	e012      	b.n	800b58e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b568:	f7ff f9de 	bl	800a928 <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b0a      	cmp	r3, #10
 800b574:	d90b      	bls.n	800b58e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2205      	movs	r2, #5
 800b586:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e012      	b.n	800b5b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e5      	bne.n	800b568 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e006      	b.n	800b5b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
  }
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b089      	sub	sp, #36	; 0x24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b5da:	7ffb      	ldrb	r3, [r7, #31]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d003      	beq.n	800b5e8 <HAL_CAN_AddTxMessage+0x2c>
 800b5e0:	7ffb      	ldrb	r3, [r7, #31]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	f040 80b8 	bne.w	800b758 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10a      	bne.n	800b608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d105      	bne.n	800b608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 80a0 	beq.w	800b748 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	0e1b      	lsrs	r3, r3, #24
 800b60c:	f003 0303 	and.w	r3, r3, #3
 800b610:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d907      	bls.n	800b628 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e09e      	b.n	800b766 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b628:	2201      	movs	r2, #1
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	409a      	lsls	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10d      	bne.n	800b656 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b644:	68f9      	ldr	r1, [r7, #12]
 800b646:	6809      	ldr	r1, [r1, #0]
 800b648:	431a      	orrs	r2, r3
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	3318      	adds	r3, #24
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	440b      	add	r3, r1
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e00f      	b.n	800b676 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b660:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b66a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	3318      	adds	r3, #24
 800b670:	011b      	lsls	r3, r3, #4
 800b672:	440b      	add	r3, r1
 800b674:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	3318      	adds	r3, #24
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	440b      	add	r3, r1
 800b686:	3304      	adds	r3, #4
 800b688:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	7d1b      	ldrb	r3, [r3, #20]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d111      	bne.n	800b6b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	3318      	adds	r3, #24
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	4413      	add	r3, r2
 800b69e:	3304      	adds	r3, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	6811      	ldr	r1, [r2, #0]
 800b6a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	3318      	adds	r3, #24
 800b6ae:	011b      	lsls	r3, r3, #4
 800b6b0:	440b      	add	r3, r1
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3307      	adds	r3, #7
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	061a      	lsls	r2, r3, #24
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3306      	adds	r3, #6
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	041b      	lsls	r3, r3, #16
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3305      	adds	r3, #5
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	3204      	adds	r2, #4
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	4610      	mov	r0, r2
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	6811      	ldr	r1, [r2, #0]
 800b6de:	ea43 0200 	orr.w	r2, r3, r0
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	440b      	add	r3, r1
 800b6e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b6ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3303      	adds	r3, #3
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	061a      	lsls	r2, r3, #24
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	041b      	lsls	r3, r3, #16
 800b6fe:	431a      	orrs	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3301      	adds	r3, #1
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	4313      	orrs	r3, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	7812      	ldrb	r2, [r2, #0]
 800b70e:	4610      	mov	r0, r2
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	6811      	ldr	r1, [r2, #0]
 800b714:	ea43 0200 	orr.w	r2, r3, r0
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	440b      	add	r3, r1
 800b71e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b722:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	3318      	adds	r3, #24
 800b72c:	011b      	lsls	r3, r3, #4
 800b72e:	4413      	add	r3, r2
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	6811      	ldr	r1, [r2, #0]
 800b736:	f043 0201 	orr.w	r2, r3, #1
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	3318      	adds	r3, #24
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	440b      	add	r3, r1
 800b742:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	e00e      	b.n	800b766 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e006      	b.n	800b766 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
  }
}
 800b766:	4618      	mov	r0, r3
 800b768:	3724      	adds	r7, #36	; 0x24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b772:	b480      	push	{r7}
 800b774:	b087      	sub	sp, #28
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b786:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d003      	beq.n	800b796 <HAL_CAN_GetRxMessage+0x24>
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	2b02      	cmp	r3, #2
 800b792:	f040 80f3 	bne.w	800b97c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10e      	bne.n	800b7ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f003 0303 	and.w	r3, r3, #3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d116      	bne.n	800b7d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e0e7      	b.n	800b98a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0303 	and.w	r3, r3, #3
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d107      	bne.n	800b7d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e0d8      	b.n	800b98a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	331b      	adds	r3, #27
 800b7e0:	011b      	lsls	r3, r3, #4
 800b7e2:	4413      	add	r3, r2
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 0204 	and.w	r2, r3, #4
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10c      	bne.n	800b810 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	331b      	adds	r3, #27
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	4413      	add	r3, r2
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	0d5b      	lsrs	r3, r3, #21
 800b806:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e00b      	b.n	800b828 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	331b      	adds	r3, #27
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	4413      	add	r3, r2
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	08db      	lsrs	r3, r3, #3
 800b820:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	331b      	adds	r3, #27
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	4413      	add	r3, r2
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0202 	and.w	r2, r3, #2
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	331b      	adds	r3, #27
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	4413      	add	r3, r2
 800b84a:	3304      	adds	r3, #4
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 020f 	and.w	r2, r3, #15
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	331b      	adds	r3, #27
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	3304      	adds	r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	0a1b      	lsrs	r3, r3, #8
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	331b      	adds	r3, #27
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	3304      	adds	r3, #4
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	0c1b      	lsrs	r3, r3, #16
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	4413      	add	r3, r2
 800b890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	b2da      	uxtb	r2, r3
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	011b      	lsls	r3, r3, #4
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	0a1a      	lsrs	r2, r3, #8
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	b2d2      	uxtb	r2, r2
 800b8b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	4413      	add	r3, r2
 800b8c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	0c1a      	lsrs	r2, r3, #16
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	3302      	adds	r3, #2
 800b8cc:	b2d2      	uxtb	r2, r2
 800b8ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	0e1a      	lsrs	r2, r3, #24
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	3303      	adds	r3, #3
 800b8e6:	b2d2      	uxtb	r2, r2
 800b8e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	011b      	lsls	r3, r3, #4
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	011b      	lsls	r3, r3, #4
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	0a1a      	lsrs	r2, r3, #8
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	3305      	adds	r3, #5
 800b918:	b2d2      	uxtb	r2, r2
 800b91a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	011b      	lsls	r3, r3, #4
 800b924:	4413      	add	r3, r2
 800b926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	0c1a      	lsrs	r2, r3, #16
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	3306      	adds	r3, #6
 800b932:	b2d2      	uxtb	r2, r2
 800b934:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	4413      	add	r3, r2
 800b940:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	0e1a      	lsrs	r2, r3, #24
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	3307      	adds	r3, #7
 800b94c:	b2d2      	uxtb	r2, r2
 800b94e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d108      	bne.n	800b968 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68da      	ldr	r2, [r3, #12]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f042 0220 	orr.w	r2, r2, #32
 800b964:	60da      	str	r2, [r3, #12]
 800b966:	e007      	b.n	800b978 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	691a      	ldr	r2, [r3, #16]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0220 	orr.w	r2, r2, #32
 800b976:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	e006      	b.n	800b98a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
  }
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800b996:	b480      	push	{r7}
 800b998:	b085      	sub	sp, #20
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d002      	beq.n	800b9b4 <HAL_CAN_ActivateNotification+0x1e>
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d109      	bne.n	800b9c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6959      	ldr	r1, [r3, #20]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	e006      	b.n	800b9d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
  }
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b08a      	sub	sp, #40	; 0x28
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d07c      	beq.n	800bb22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d023      	beq.n	800ba7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2201      	movs	r2, #1
 800ba38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f983 	bl	800bd50 <HAL_CAN_TxMailbox0CompleteCallback>
 800ba4a:	e016      	b.n	800ba7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ba5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba5e:	e00c      	b.n	800ba7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f003 0308 	and.w	r3, r3, #8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
 800ba72:	e002      	b.n	800ba7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f989 	bl	800bd8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d024      	beq.n	800bace <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f963 	bl	800bd64 <HAL_CAN_TxMailbox1CompleteCallback>
 800ba9e:	e016      	b.n	800bace <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d004      	beq.n	800bab4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bab0:	627b      	str	r3, [r7, #36]	; 0x24
 800bab2:	e00c      	b.n	800bace <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bac4:	627b      	str	r3, [r7, #36]	; 0x24
 800bac6:	e002      	b.n	800bace <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f969 	bl	800bda0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d024      	beq.n	800bb22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f943 	bl	800bd78 <HAL_CAN_TxMailbox2CompleteCallback>
 800baf2:	e016      	b.n	800bb22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d004      	beq.n	800bb08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
 800bb06:	e00c      	b.n	800bb22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d004      	beq.n	800bb1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1a:	e002      	b.n	800bb22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f949 	bl	800bdb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	f003 0308 	and.w	r3, r3, #8
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00c      	beq.n	800bb46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f003 0310 	and.w	r3, r3, #16
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2210      	movs	r2, #16
 800bb44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f003 0308 	and.w	r3, r3, #8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d006      	beq.n	800bb68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2208      	movs	r2, #8
 800bb60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f930 	bl	800bdc8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f003 0303 	and.w	r3, r3, #3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7f5 fe0f 	bl	80017a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00c      	beq.n	800bbaa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f003 0310 	and.w	r3, r3, #16
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d007      	beq.n	800bbaa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2210      	movs	r2, #16
 800bba8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	f003 0320 	and.w	r3, r3, #32
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00b      	beq.n	800bbcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f003 0308 	and.w	r3, r3, #8
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d006      	beq.n	800bbcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2208      	movs	r2, #8
 800bbc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f912 	bl	800bdf0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	f003 0303 	and.w	r3, r3, #3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f8f9 	bl	800bddc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00b      	beq.n	800bc0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	f003 0310 	and.w	r3, r3, #16
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d006      	beq.n	800bc0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2210      	movs	r2, #16
 800bc04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f8fc 	bl	800be04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00b      	beq.n	800bc2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	f003 0308 	and.w	r3, r3, #8
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d006      	beq.n	800bc2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2208      	movs	r2, #8
 800bc26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f8f5 	bl	800be18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d07b      	beq.n	800bd30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f003 0304 	and.w	r3, r3, #4
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d072      	beq.n	800bd28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d008      	beq.n	800bc5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	f043 0301 	orr.w	r3, r3, #1
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bc5e:	6a3b      	ldr	r3, [r7, #32]
 800bc60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d008      	beq.n	800bc7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	f043 0302 	orr.w	r3, r3, #2
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d008      	beq.n	800bc96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc90:	f043 0304 	orr.w	r3, r3, #4
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d043      	beq.n	800bd28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d03e      	beq.n	800bd28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcb0:	2b60      	cmp	r3, #96	; 0x60
 800bcb2:	d02b      	beq.n	800bd0c <HAL_CAN_IRQHandler+0x32a>
 800bcb4:	2b60      	cmp	r3, #96	; 0x60
 800bcb6:	d82e      	bhi.n	800bd16 <HAL_CAN_IRQHandler+0x334>
 800bcb8:	2b50      	cmp	r3, #80	; 0x50
 800bcba:	d022      	beq.n	800bd02 <HAL_CAN_IRQHandler+0x320>
 800bcbc:	2b50      	cmp	r3, #80	; 0x50
 800bcbe:	d82a      	bhi.n	800bd16 <HAL_CAN_IRQHandler+0x334>
 800bcc0:	2b40      	cmp	r3, #64	; 0x40
 800bcc2:	d019      	beq.n	800bcf8 <HAL_CAN_IRQHandler+0x316>
 800bcc4:	2b40      	cmp	r3, #64	; 0x40
 800bcc6:	d826      	bhi.n	800bd16 <HAL_CAN_IRQHandler+0x334>
 800bcc8:	2b30      	cmp	r3, #48	; 0x30
 800bcca:	d010      	beq.n	800bcee <HAL_CAN_IRQHandler+0x30c>
 800bccc:	2b30      	cmp	r3, #48	; 0x30
 800bcce:	d822      	bhi.n	800bd16 <HAL_CAN_IRQHandler+0x334>
 800bcd0:	2b10      	cmp	r3, #16
 800bcd2:	d002      	beq.n	800bcda <HAL_CAN_IRQHandler+0x2f8>
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d005      	beq.n	800bce4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800bcd8:	e01d      	b.n	800bd16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	f043 0308 	orr.w	r3, r3, #8
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bce2:	e019      	b.n	800bd18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	f043 0310 	orr.w	r3, r3, #16
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bcec:	e014      	b.n	800bd18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	f043 0320 	orr.w	r3, r3, #32
 800bcf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bcf6:	e00f      	b.n	800bd18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bd00:	e00a      	b.n	800bd18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bd0a:	e005      	b.n	800bd18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bd14:	e000      	b.n	800bd18 <HAL_CAN_IRQHandler+0x336>
            break;
 800bd16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	699a      	ldr	r2, [r3, #24]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bd26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2204      	movs	r2, #4
 800bd2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d008      	beq.n	800bd48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f872 	bl	800be2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800bd48:	bf00      	nop
 800bd4a:	3728      	adds	r7, #40	; 0x28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <__NVIC_SetPriorityGrouping>:
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <__NVIC_SetPriorityGrouping+0x40>)
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800be5c:	4013      	ands	r3, r2
 800be5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800be68:	4b06      	ldr	r3, [pc, #24]	; (800be84 <__NVIC_SetPriorityGrouping+0x44>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800be6e:	4a04      	ldr	r2, [pc, #16]	; (800be80 <__NVIC_SetPriorityGrouping+0x40>)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	60d3      	str	r3, [r2, #12]
}
 800be74:	bf00      	nop
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	e000ed00 	.word	0xe000ed00
 800be84:	05fa0000 	.word	0x05fa0000

0800be88 <__NVIC_GetPriorityGrouping>:
{
 800be88:	b480      	push	{r7}
 800be8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800be8c:	4b04      	ldr	r3, [pc, #16]	; (800bea0 <__NVIC_GetPriorityGrouping+0x18>)
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	0a1b      	lsrs	r3, r3, #8
 800be92:	f003 0307 	and.w	r3, r3, #7
}
 800be96:	4618      	mov	r0, r3
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	e000ed00 	.word	0xe000ed00

0800bea4 <__NVIC_EnableIRQ>:
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800beae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	db0b      	blt.n	800bece <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800beb6:	79fb      	ldrb	r3, [r7, #7]
 800beb8:	f003 021f 	and.w	r2, r3, #31
 800bebc:	4907      	ldr	r1, [pc, #28]	; (800bedc <__NVIC_EnableIRQ+0x38>)
 800bebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bec2:	095b      	lsrs	r3, r3, #5
 800bec4:	2001      	movs	r0, #1
 800bec6:	fa00 f202 	lsl.w	r2, r0, r2
 800beca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	e000e100 	.word	0xe000e100

0800bee0 <__NVIC_DisableIRQ>:
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800beea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	db12      	blt.n	800bf18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	f003 021f 	and.w	r2, r3, #31
 800bef8:	490a      	ldr	r1, [pc, #40]	; (800bf24 <__NVIC_DisableIRQ+0x44>)
 800befa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800befe:	095b      	lsrs	r3, r3, #5
 800bf00:	2001      	movs	r0, #1
 800bf02:	fa00 f202 	lsl.w	r2, r0, r2
 800bf06:	3320      	adds	r3, #32
 800bf08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bf0c:	f3bf 8f4f 	dsb	sy
}
 800bf10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bf12:	f3bf 8f6f 	isb	sy
}
 800bf16:	bf00      	nop
}
 800bf18:	bf00      	nop
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	e000e100 	.word	0xe000e100

0800bf28 <__NVIC_SetPriority>:
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	6039      	str	r1, [r7, #0]
 800bf32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	db0a      	blt.n	800bf52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	490c      	ldr	r1, [pc, #48]	; (800bf74 <__NVIC_SetPriority+0x4c>)
 800bf42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf46:	0112      	lsls	r2, r2, #4
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf50:	e00a      	b.n	800bf68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	4908      	ldr	r1, [pc, #32]	; (800bf78 <__NVIC_SetPriority+0x50>)
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	f003 030f 	and.w	r3, r3, #15
 800bf5e:	3b04      	subs	r3, #4
 800bf60:	0112      	lsls	r2, r2, #4
 800bf62:	b2d2      	uxtb	r2, r2
 800bf64:	440b      	add	r3, r1
 800bf66:	761a      	strb	r2, [r3, #24]
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	e000e100 	.word	0xe000e100
 800bf78:	e000ed00 	.word	0xe000ed00

0800bf7c <NVIC_EncodePriority>:
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b089      	sub	sp, #36	; 0x24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f003 0307 	and.w	r3, r3, #7
 800bf8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	f1c3 0307 	rsb	r3, r3, #7
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	bf28      	it	cs
 800bf9a:	2304      	movcs	r3, #4
 800bf9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	2b06      	cmp	r3, #6
 800bfa4:	d902      	bls.n	800bfac <NVIC_EncodePriority+0x30>
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	3b03      	subs	r3, #3
 800bfaa:	e000      	b.n	800bfae <NVIC_EncodePriority+0x32>
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfba:	43da      	mvns	r2, r3
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	401a      	ands	r2, r3
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bfc4:	f04f 31ff 	mov.w	r1, #4294967295
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	fa01 f303 	lsl.w	r3, r1, r3
 800bfce:	43d9      	mvns	r1, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bfd4:	4313      	orrs	r3, r2
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3724      	adds	r7, #36	; 0x24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff ff28 	bl	800be40 <__NVIC_SetPriorityGrouping>
}
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
 800c004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c006:	2300      	movs	r3, #0
 800c008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c00a:	f7ff ff3d 	bl	800be88 <__NVIC_GetPriorityGrouping>
 800c00e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	6978      	ldr	r0, [r7, #20]
 800c016:	f7ff ffb1 	bl	800bf7c <NVIC_EncodePriority>
 800c01a:	4602      	mov	r2, r0
 800c01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c020:	4611      	mov	r1, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff ff80 	bl	800bf28 <__NVIC_SetPriority>
}
 800c028:	bf00      	nop
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff ff30 	bl	800bea4 <__NVIC_EnableIRQ>
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff ff40 	bl	800bee0 <__NVIC_DisableIRQ>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e054      	b.n	800c124 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7f5b      	ldrb	r3, [r3, #29]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b00      	cmp	r3, #0
 800c082:	d105      	bne.n	800c090 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7f5 fd42 	bl	8001b14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	791b      	ldrb	r3, [r3, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10c      	bne.n	800c0b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a22      	ldr	r2, [pc, #136]	; (800c12c <HAL_CRC_Init+0xc4>)
 800c0a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0218 	bic.w	r2, r2, #24
 800c0b4:	609a      	str	r2, [r3, #8]
 800c0b6:	e00c      	b.n	800c0d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6899      	ldr	r1, [r3, #8]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f834 	bl	800c130 <HAL_CRCEx_Polynomial_Set>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d001      	beq.n	800c0d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e028      	b.n	800c124 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	795b      	ldrb	r3, [r3, #5]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	611a      	str	r2, [r3, #16]
 800c0e4:	e004      	b.n	800c0f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	6912      	ldr	r2, [r2, #16]
 800c0ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	695a      	ldr	r2, [r3, #20]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	430a      	orrs	r2, r1
 800c104:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	699a      	ldr	r2, [r3, #24]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	04c11db7 	.word	0x04c11db7

0800c130 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c140:	231f      	movs	r3, #31
 800c142:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c144:	bf00      	nop
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	1e5a      	subs	r2, r3, #1
 800c14a:	613a      	str	r2, [r7, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d009      	beq.n	800c164 <HAL_CRCEx_Polynomial_Set+0x34>
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f003 031f 	and.w	r3, r3, #31
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	fa22 f303 	lsr.w	r3, r2, r3
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0f0      	beq.n	800c146 <HAL_CRCEx_Polynomial_Set+0x16>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b18      	cmp	r3, #24
 800c168:	d846      	bhi.n	800c1f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c1ff 	.word	0x0800c1ff
 800c174:	0800c1f9 	.word	0x0800c1f9
 800c178:	0800c1f9 	.word	0x0800c1f9
 800c17c:	0800c1f9 	.word	0x0800c1f9
 800c180:	0800c1f9 	.word	0x0800c1f9
 800c184:	0800c1f9 	.word	0x0800c1f9
 800c188:	0800c1f9 	.word	0x0800c1f9
 800c18c:	0800c1f9 	.word	0x0800c1f9
 800c190:	0800c1ed 	.word	0x0800c1ed
 800c194:	0800c1f9 	.word	0x0800c1f9
 800c198:	0800c1f9 	.word	0x0800c1f9
 800c19c:	0800c1f9 	.word	0x0800c1f9
 800c1a0:	0800c1f9 	.word	0x0800c1f9
 800c1a4:	0800c1f9 	.word	0x0800c1f9
 800c1a8:	0800c1f9 	.word	0x0800c1f9
 800c1ac:	0800c1f9 	.word	0x0800c1f9
 800c1b0:	0800c1e1 	.word	0x0800c1e1
 800c1b4:	0800c1f9 	.word	0x0800c1f9
 800c1b8:	0800c1f9 	.word	0x0800c1f9
 800c1bc:	0800c1f9 	.word	0x0800c1f9
 800c1c0:	0800c1f9 	.word	0x0800c1f9
 800c1c4:	0800c1f9 	.word	0x0800c1f9
 800c1c8:	0800c1f9 	.word	0x0800c1f9
 800c1cc:	0800c1f9 	.word	0x0800c1f9
 800c1d0:	0800c1d5 	.word	0x0800c1d5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2b06      	cmp	r3, #6
 800c1d8:	d913      	bls.n	800c202 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1de:	e010      	b.n	800c202 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2b07      	cmp	r3, #7
 800c1e4:	d90f      	bls.n	800c206 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1ea:	e00c      	b.n	800c206 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	2b0f      	cmp	r3, #15
 800c1f0:	d90b      	bls.n	800c20a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c1f6:	e008      	b.n	800c20a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c1fc:	e006      	b.n	800c20c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c1fe:	bf00      	nop
 800c200:	e004      	b.n	800c20c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c202:	bf00      	nop
 800c204:	e002      	b.n	800c20c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c206:	bf00      	nop
 800c208:	e000      	b.n	800c20c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c20a:	bf00      	nop
  }
  if (status == HAL_OK)
 800c20c:	7dfb      	ldrb	r3, [r7, #23]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10d      	bne.n	800c22e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f023 0118 	bic.w	r1, r3, #24
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c230:	4618      	mov	r0, r3
 800c232:	371c      	adds	r7, #28
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c248:	f7fe fb6e 	bl	800a928 <HAL_GetTick>
 800c24c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d101      	bne.n	800c258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e099      	b.n	800c38c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2202      	movs	r2, #2
 800c264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f022 0201 	bic.w	r2, r2, #1
 800c276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c278:	e00f      	b.n	800c29a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c27a:	f7fe fb55 	bl	800a928 <HAL_GetTick>
 800c27e:	4602      	mov	r2, r0
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	2b05      	cmp	r3, #5
 800c286:	d908      	bls.n	800c29a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2220      	movs	r2, #32
 800c28c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2203      	movs	r2, #3
 800c292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c296:	2303      	movs	r3, #3
 800c298:	e078      	b.n	800c38c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e8      	bne.n	800c27a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	4b38      	ldr	r3, [pc, #224]	; (800c394 <HAL_DMA_Init+0x158>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d107      	bne.n	800c304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	4313      	orrs	r3, r2
 800c302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f023 0307 	bic.w	r3, r3, #7
 800c31a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	4313      	orrs	r3, r2
 800c324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d117      	bne.n	800c35e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	4313      	orrs	r3, r2
 800c336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00e      	beq.n	800c35e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fa99 	bl	800c878 <DMA_CheckFifoParam>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d008      	beq.n	800c35e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2240      	movs	r2, #64	; 0x40
 800c350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c35a:	2301      	movs	r3, #1
 800c35c:	e016      	b.n	800c38c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fa50 	bl	800c80c <DMA_CalcBaseAndBitshift>
 800c36c:	4603      	mov	r3, r0
 800c36e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c374:	223f      	movs	r2, #63	; 0x3f
 800c376:	409a      	lsls	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	e010803f 	.word	0xe010803f

0800c398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d101      	bne.n	800c3be <HAL_DMA_Start_IT+0x26>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	e048      	b.n	800c450 <HAL_DMA_Start_IT+0xb8>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d137      	bne.n	800c442 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	68b9      	ldr	r1, [r7, #8]
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f000 f9e2 	bl	800c7b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3f0:	223f      	movs	r2, #63	; 0x3f
 800c3f2:	409a      	lsls	r2, r3
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f042 0216 	orr.w	r2, r2, #22
 800c406:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	695a      	ldr	r2, [r3, #20]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c416:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d007      	beq.n	800c430 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f042 0208 	orr.w	r2, r2, #8
 800c42e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	601a      	str	r2, [r3, #0]
 800c440:	e005      	b.n	800c44e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c44a:	2302      	movs	r3, #2
 800c44c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d004      	beq.n	800c476 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2280      	movs	r2, #128	; 0x80
 800c470:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e00c      	b.n	800c490 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2205      	movs	r2, #5
 800c47a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f022 0201 	bic.w	r2, r2, #1
 800c48c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c4a8:	4b92      	ldr	r3, [pc, #584]	; (800c6f4 <HAL_DMA_IRQHandler+0x258>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a92      	ldr	r2, [pc, #584]	; (800c6f8 <HAL_DMA_IRQHandler+0x25c>)
 800c4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b2:	0a9b      	lsrs	r3, r3, #10
 800c4b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4c6:	2208      	movs	r2, #8
 800c4c8:	409a      	lsls	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01a      	beq.n	800c508 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d013      	beq.n	800c508 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 0204 	bic.w	r2, r2, #4
 800c4ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4f4:	2208      	movs	r2, #8
 800c4f6:	409a      	lsls	r2, r3
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c500:	f043 0201 	orr.w	r2, r3, #1
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c50c:	2201      	movs	r2, #1
 800c50e:	409a      	lsls	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	4013      	ands	r3, r2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d012      	beq.n	800c53e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00b      	beq.n	800c53e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c52a:	2201      	movs	r2, #1
 800c52c:	409a      	lsls	r2, r3
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c536:	f043 0202 	orr.w	r2, r3, #2
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c542:	2204      	movs	r2, #4
 800c544:	409a      	lsls	r2, r3
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	4013      	ands	r3, r2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d012      	beq.n	800c574 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 0302 	and.w	r3, r3, #2
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00b      	beq.n	800c574 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c560:	2204      	movs	r2, #4
 800c562:	409a      	lsls	r2, r3
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56c:	f043 0204 	orr.w	r2, r3, #4
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c578:	2210      	movs	r2, #16
 800c57a:	409a      	lsls	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4013      	ands	r3, r2
 800c580:	2b00      	cmp	r3, #0
 800c582:	d043      	beq.n	800c60c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0308 	and.w	r3, r3, #8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d03c      	beq.n	800c60c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c596:	2210      	movs	r2, #16
 800c598:	409a      	lsls	r2, r3
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d018      	beq.n	800c5de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d108      	bne.n	800c5cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d024      	beq.n	800c60c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	4798      	blx	r3
 800c5ca:	e01f      	b.n	800c60c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01b      	beq.n	800c60c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	4798      	blx	r3
 800c5dc:	e016      	b.n	800c60c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d107      	bne.n	800c5fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0208 	bic.w	r2, r2, #8
 800c5fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c610:	2220      	movs	r2, #32
 800c612:	409a      	lsls	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	4013      	ands	r3, r2
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 808e 	beq.w	800c73a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0310 	and.w	r3, r3, #16
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 8086 	beq.w	800c73a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c632:	2220      	movs	r2, #32
 800c634:	409a      	lsls	r2, r3
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b05      	cmp	r3, #5
 800c644:	d136      	bne.n	800c6b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f022 0216 	bic.w	r2, r2, #22
 800c654:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	695a      	ldr	r2, [r3, #20]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c664:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d103      	bne.n	800c676 <HAL_DMA_IRQHandler+0x1da>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c672:	2b00      	cmp	r3, #0
 800c674:	d007      	beq.n	800c686 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0208 	bic.w	r2, r2, #8
 800c684:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c68a:	223f      	movs	r2, #63	; 0x3f
 800c68c:	409a      	lsls	r2, r3
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d07d      	beq.n	800c7a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	4798      	blx	r3
        }
        return;
 800c6b2:	e078      	b.n	800c7a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d01c      	beq.n	800c6fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d108      	bne.n	800c6e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d030      	beq.n	800c73a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	4798      	blx	r3
 800c6e0:	e02b      	b.n	800c73a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d027      	beq.n	800c73a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	4798      	blx	r3
 800c6f2:	e022      	b.n	800c73a <HAL_DMA_IRQHandler+0x29e>
 800c6f4:	20000014 	.word	0x20000014
 800c6f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10f      	bne.n	800c72a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f022 0210 	bic.w	r2, r2, #16
 800c718:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d032      	beq.n	800c7a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d022      	beq.n	800c794 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2205      	movs	r2, #5
 800c752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f022 0201 	bic.w	r2, r2, #1
 800c764:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	3301      	adds	r3, #1
 800c76a:	60bb      	str	r3, [r7, #8]
 800c76c:	697a      	ldr	r2, [r7, #20]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d307      	bcc.n	800c782 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f2      	bne.n	800c766 <HAL_DMA_IRQHandler+0x2ca>
 800c780:	e000      	b.n	800c784 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c782:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d005      	beq.n	800c7a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
 800c7a4:	e000      	b.n	800c7a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c7a6:	bf00      	nop
    }
  }
}
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop

0800c7b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c7cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2b40      	cmp	r3, #64	; 0x40
 800c7dc:	d108      	bne.n	800c7f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c7ee:	e007      	b.n	800c800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	60da      	str	r2, [r3, #12]
}
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	3b10      	subs	r3, #16
 800c81c:	4a13      	ldr	r2, [pc, #76]	; (800c86c <DMA_CalcBaseAndBitshift+0x60>)
 800c81e:	fba2 2303 	umull	r2, r3, r2, r3
 800c822:	091b      	lsrs	r3, r3, #4
 800c824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c826:	4a12      	ldr	r2, [pc, #72]	; (800c870 <DMA_CalcBaseAndBitshift+0x64>)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4413      	add	r3, r2
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b03      	cmp	r3, #3
 800c838:	d908      	bls.n	800c84c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	4b0c      	ldr	r3, [pc, #48]	; (800c874 <DMA_CalcBaseAndBitshift+0x68>)
 800c842:	4013      	ands	r3, r2
 800c844:	1d1a      	adds	r2, r3, #4
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	659a      	str	r2, [r3, #88]	; 0x58
 800c84a:	e006      	b.n	800c85a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	461a      	mov	r2, r3
 800c852:	4b08      	ldr	r3, [pc, #32]	; (800c874 <DMA_CalcBaseAndBitshift+0x68>)
 800c854:	4013      	ands	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	aaaaaaab 	.word	0xaaaaaaab
 800c870:	0802c304 	.word	0x0802c304
 800c874:	fffffc00 	.word	0xfffffc00

0800c878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d11f      	bne.n	800c8d2 <DMA_CheckFifoParam+0x5a>
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	2b03      	cmp	r3, #3
 800c896:	d856      	bhi.n	800c946 <DMA_CheckFifoParam+0xce>
 800c898:	a201      	add	r2, pc, #4	; (adr r2, 800c8a0 <DMA_CheckFifoParam+0x28>)
 800c89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89e:	bf00      	nop
 800c8a0:	0800c8b1 	.word	0x0800c8b1
 800c8a4:	0800c8c3 	.word	0x0800c8c3
 800c8a8:	0800c8b1 	.word	0x0800c8b1
 800c8ac:	0800c947 	.word	0x0800c947
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d046      	beq.n	800c94a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8c0:	e043      	b.n	800c94a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c8ca:	d140      	bne.n	800c94e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8d0:	e03d      	b.n	800c94e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8da:	d121      	bne.n	800c920 <DMA_CheckFifoParam+0xa8>
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b03      	cmp	r3, #3
 800c8e0:	d837      	bhi.n	800c952 <DMA_CheckFifoParam+0xda>
 800c8e2:	a201      	add	r2, pc, #4	; (adr r2, 800c8e8 <DMA_CheckFifoParam+0x70>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c8f9 	.word	0x0800c8f9
 800c8ec:	0800c8ff 	.word	0x0800c8ff
 800c8f0:	0800c8f9 	.word	0x0800c8f9
 800c8f4:	0800c911 	.word	0x0800c911
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c8fc:	e030      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c906:	2b00      	cmp	r3, #0
 800c908:	d025      	beq.n	800c956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c90e:	e022      	b.n	800c956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c914:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c918:	d11f      	bne.n	800c95a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c91e:	e01c      	b.n	800c95a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b02      	cmp	r3, #2
 800c924:	d903      	bls.n	800c92e <DMA_CheckFifoParam+0xb6>
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d003      	beq.n	800c934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c92c:	e018      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	73fb      	strb	r3, [r7, #15]
      break;
 800c932:	e015      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00e      	beq.n	800c95e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	73fb      	strb	r3, [r7, #15]
      break;
 800c944:	e00b      	b.n	800c95e <DMA_CheckFifoParam+0xe6>
      break;
 800c946:	bf00      	nop
 800c948:	e00a      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      break;
 800c94a:	bf00      	nop
 800c94c:	e008      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      break;
 800c94e:	bf00      	nop
 800c950:	e006      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      break;
 800c952:	bf00      	nop
 800c954:	e004      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      break;
 800c956:	bf00      	nop
 800c958:	e002      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      break;   
 800c95a:	bf00      	nop
 800c95c:	e000      	b.n	800c960 <DMA_CheckFifoParam+0xe8>
      break;
 800c95e:	bf00      	nop
    }
  } 
  
  return status; 
 800c960:	7bfb      	ldrb	r3, [r7, #15]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop

0800c970 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	e049      	b.n	800ca16 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7f5 f93a 	bl	8001c10 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2202      	movs	r2, #2
 800c9a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c0:	f023 0107 	bic.w	r1, r3, #7
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	689a      	ldr	r2, [r3, #8]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9d6:	4b12      	ldr	r3, [pc, #72]	; (800ca20 <HAL_DMA2D_Init+0xb0>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	68d1      	ldr	r1, [r2, #12]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	6812      	ldr	r2, [r2, #0]
 800c9e2:	430b      	orrs	r3, r1
 800c9e4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	051a      	lsls	r2, r3, #20
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	055b      	lsls	r3, r3, #21
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	430a      	orrs	r2, r1
 800ca04:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	ffffc000 	.word	0xffffc000

0800ca24 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d026      	beq.n	800ca94 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d021      	beq.n	800ca94 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca5e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca64:	f043 0201 	orr.w	r2, r3, #1
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2201      	movs	r2, #1
 800ca72:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2204      	movs	r2, #4
 800ca78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	69db      	ldr	r3, [r3, #28]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	69db      	ldr	r3, [r3, #28]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d026      	beq.n	800caec <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d021      	beq.n	800caec <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cab6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2220      	movs	r2, #32
 800cabe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac4:	f043 0202 	orr.w	r2, r3, #2
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2204      	movs	r2, #4
 800cad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	69db      	ldr	r3, [r3, #28]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d003      	beq.n	800caec <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	69db      	ldr	r3, [r3, #28]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f003 0308 	and.w	r3, r3, #8
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d026      	beq.n	800cb44 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d021      	beq.n	800cb44 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb0e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2208      	movs	r2, #8
 800cb16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb1c:	f043 0204 	orr.w	r2, r3, #4
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2204      	movs	r2, #4
 800cb28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	69db      	ldr	r3, [r3, #28]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	69db      	ldr	r3, [r3, #28]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f003 0304 	and.w	r3, r3, #4
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d013      	beq.n	800cb76 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00e      	beq.n	800cb76 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb66:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2204      	movs	r2, #4
 800cb6e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 f853 	bl	800cc1c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d024      	beq.n	800cbca <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d01f      	beq.n	800cbca <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cb98:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2202      	movs	r2, #2
 800cba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	699b      	ldr	r3, [r3, #24]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f003 0310 	and.w	r3, r3, #16
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d01f      	beq.n	800cc14 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d01a      	beq.n	800cc14 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cbec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2210      	movs	r2, #16
 800cbf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f80e 	bl	800cc30 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800cc14:	bf00      	nop
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b087      	sub	sp, #28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d101      	bne.n	800cc64 <HAL_DMA2D_ConfigLayer+0x20>
 800cc60:	2302      	movs	r3, #2
 800cc62:	e084      	b.n	800cd6e <HAL_DMA2D_ConfigLayer+0x12a>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	3320      	adds	r3, #32
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	041b      	lsls	r3, r3, #16
 800cc90:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800cc98:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800cca0:	4313      	orrs	r3, r2
 800cca2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800cca4:	4b35      	ldr	r3, [pc, #212]	; (800cd7c <HAL_DMA2D_ConfigLayer+0x138>)
 800cca6:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	2b0a      	cmp	r3, #10
 800ccae:	d003      	beq.n	800ccb8 <HAL_DMA2D_ConfigLayer+0x74>
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	2b09      	cmp	r3, #9
 800ccb6:	d107      	bne.n	800ccc8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	e005      	b.n	800ccd4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	061b      	lsls	r3, r3, #24
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d120      	bne.n	800cd1c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	43db      	mvns	r3, r3
 800cce4:	ea02 0103 	and.w	r1, r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	430a      	orrs	r2, r1
 800ccf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	2b0a      	cmp	r3, #10
 800cd02:	d003      	beq.n	800cd0c <HAL_DMA2D_ConfigLayer+0xc8>
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	2b09      	cmp	r3, #9
 800cd0a:	d127      	bne.n	800cd5c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800cd18:	629a      	str	r2, [r3, #40]	; 0x28
 800cd1a:	e01f      	b.n	800cd5c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	69da      	ldr	r2, [r3, #28]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	43db      	mvns	r3, r3
 800cd26:	ea02 0103 	and.w	r1, r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	6812      	ldr	r2, [r2, #0]
 800cd3c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	2b0a      	cmp	r3, #10
 800cd44:	d003      	beq.n	800cd4e <HAL_DMA2D_ConfigLayer+0x10a>
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	2b09      	cmp	r3, #9
 800cd4c:	d106      	bne.n	800cd5c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	68da      	ldr	r2, [r3, #12]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800cd5a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	ff33000f 	.word	0xff33000f

0800cd80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b089      	sub	sp, #36	; 0x24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cd92:	2300      	movs	r3, #0
 800cd94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800cd96:	2300      	movs	r3, #0
 800cd98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	61fb      	str	r3, [r7, #28]
 800cd9e:	e175      	b.n	800d08c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cda0:	2201      	movs	r2, #1
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	fa02 f303 	lsl.w	r3, r2, r3
 800cda8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	f040 8164 	bne.w	800d086 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d00b      	beq.n	800cdde <HAL_GPIO_Init+0x5e>
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d007      	beq.n	800cdde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cdd2:	2b11      	cmp	r3, #17
 800cdd4:	d003      	beq.n	800cdde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	2b12      	cmp	r3, #18
 800cddc:	d130      	bne.n	800ce40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	005b      	lsls	r3, r3, #1
 800cde8:	2203      	movs	r2, #3
 800cdea:	fa02 f303 	lsl.w	r3, r2, r3
 800cdee:	43db      	mvns	r3, r3
 800cdf0:	69ba      	ldr	r2, [r7, #24]
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ce14:	2201      	movs	r2, #1
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	fa02 f303 	lsl.w	r3, r2, r3
 800ce1c:	43db      	mvns	r3, r3
 800ce1e:	69ba      	ldr	r2, [r7, #24]
 800ce20:	4013      	ands	r3, r2
 800ce22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	091b      	lsrs	r3, r3, #4
 800ce2a:	f003 0201 	and.w	r2, r3, #1
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	fa02 f303 	lsl.w	r3, r2, r3
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	69ba      	ldr	r2, [r7, #24]
 800ce3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	2203      	movs	r2, #3
 800ce4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce50:	43db      	mvns	r3, r3
 800ce52:	69ba      	ldr	r2, [r7, #24]
 800ce54:	4013      	ands	r3, r2
 800ce56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	689a      	ldr	r2, [r3, #8]
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	fa02 f303 	lsl.w	r3, r2, r3
 800ce64:	69ba      	ldr	r2, [r7, #24]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	69ba      	ldr	r2, [r7, #24]
 800ce6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d003      	beq.n	800ce80 <HAL_GPIO_Init+0x100>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	2b12      	cmp	r3, #18
 800ce7e:	d123      	bne.n	800cec8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	08da      	lsrs	r2, r3, #3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3208      	adds	r2, #8
 800ce88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	f003 0307 	and.w	r3, r3, #7
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	220f      	movs	r2, #15
 800ce98:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9c:	43db      	mvns	r3, r3
 800ce9e:	69ba      	ldr	r2, [r7, #24]
 800cea0:	4013      	ands	r3, r2
 800cea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	f003 0307 	and.w	r3, r3, #7
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb4:	69ba      	ldr	r2, [r7, #24]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	08da      	lsrs	r2, r3, #3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3208      	adds	r2, #8
 800cec2:	69b9      	ldr	r1, [r7, #24]
 800cec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	005b      	lsls	r3, r3, #1
 800ced2:	2203      	movs	r2, #3
 800ced4:	fa02 f303 	lsl.w	r3, r2, r3
 800ced8:	43db      	mvns	r3, r3
 800ceda:	69ba      	ldr	r2, [r7, #24]
 800cedc:	4013      	ands	r3, r2
 800cede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	f003 0203 	and.w	r2, r3, #3
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	fa02 f303 	lsl.w	r3, r2, r3
 800cef0:	69ba      	ldr	r2, [r7, #24]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	69ba      	ldr	r2, [r7, #24]
 800cefa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 80be 	beq.w	800d086 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf0a:	4b66      	ldr	r3, [pc, #408]	; (800d0a4 <HAL_GPIO_Init+0x324>)
 800cf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0e:	4a65      	ldr	r2, [pc, #404]	; (800d0a4 <HAL_GPIO_Init+0x324>)
 800cf10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf14:	6453      	str	r3, [r2, #68]	; 0x44
 800cf16:	4b63      	ldr	r3, [pc, #396]	; (800d0a4 <HAL_GPIO_Init+0x324>)
 800cf18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800cf22:	4a61      	ldr	r2, [pc, #388]	; (800d0a8 <HAL_GPIO_Init+0x328>)
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	089b      	lsrs	r3, r3, #2
 800cf28:	3302      	adds	r3, #2
 800cf2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f003 0303 	and.w	r3, r3, #3
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	220f      	movs	r2, #15
 800cf3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf3e:	43db      	mvns	r3, r3
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	4013      	ands	r3, r2
 800cf44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a58      	ldr	r2, [pc, #352]	; (800d0ac <HAL_GPIO_Init+0x32c>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d037      	beq.n	800cfbe <HAL_GPIO_Init+0x23e>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a57      	ldr	r2, [pc, #348]	; (800d0b0 <HAL_GPIO_Init+0x330>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d031      	beq.n	800cfba <HAL_GPIO_Init+0x23a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a56      	ldr	r2, [pc, #344]	; (800d0b4 <HAL_GPIO_Init+0x334>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d02b      	beq.n	800cfb6 <HAL_GPIO_Init+0x236>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a55      	ldr	r2, [pc, #340]	; (800d0b8 <HAL_GPIO_Init+0x338>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d025      	beq.n	800cfb2 <HAL_GPIO_Init+0x232>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a54      	ldr	r2, [pc, #336]	; (800d0bc <HAL_GPIO_Init+0x33c>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d01f      	beq.n	800cfae <HAL_GPIO_Init+0x22e>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a53      	ldr	r2, [pc, #332]	; (800d0c0 <HAL_GPIO_Init+0x340>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d019      	beq.n	800cfaa <HAL_GPIO_Init+0x22a>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a52      	ldr	r2, [pc, #328]	; (800d0c4 <HAL_GPIO_Init+0x344>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d013      	beq.n	800cfa6 <HAL_GPIO_Init+0x226>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a51      	ldr	r2, [pc, #324]	; (800d0c8 <HAL_GPIO_Init+0x348>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d00d      	beq.n	800cfa2 <HAL_GPIO_Init+0x222>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a50      	ldr	r2, [pc, #320]	; (800d0cc <HAL_GPIO_Init+0x34c>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d007      	beq.n	800cf9e <HAL_GPIO_Init+0x21e>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a4f      	ldr	r2, [pc, #316]	; (800d0d0 <HAL_GPIO_Init+0x350>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d101      	bne.n	800cf9a <HAL_GPIO_Init+0x21a>
 800cf96:	2309      	movs	r3, #9
 800cf98:	e012      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cf9a:	230a      	movs	r3, #10
 800cf9c:	e010      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cf9e:	2308      	movs	r3, #8
 800cfa0:	e00e      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfa2:	2307      	movs	r3, #7
 800cfa4:	e00c      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfa6:	2306      	movs	r3, #6
 800cfa8:	e00a      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfaa:	2305      	movs	r3, #5
 800cfac:	e008      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfae:	2304      	movs	r3, #4
 800cfb0:	e006      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e004      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	e002      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e000      	b.n	800cfc0 <HAL_GPIO_Init+0x240>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	69fa      	ldr	r2, [r7, #28]
 800cfc2:	f002 0203 	and.w	r2, r2, #3
 800cfc6:	0092      	lsls	r2, r2, #2
 800cfc8:	4093      	lsls	r3, r2
 800cfca:	69ba      	ldr	r2, [r7, #24]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cfd0:	4935      	ldr	r1, [pc, #212]	; (800d0a8 <HAL_GPIO_Init+0x328>)
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	089b      	lsrs	r3, r3, #2
 800cfd6:	3302      	adds	r3, #2
 800cfd8:	69ba      	ldr	r2, [r7, #24]
 800cfda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cfde:	4b3d      	ldr	r3, [pc, #244]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	43db      	mvns	r3, r3
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	4013      	ands	r3, r2
 800cfec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800cffa:	69ba      	ldr	r2, [r7, #24]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	4313      	orrs	r3, r2
 800d000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d002:	4a34      	ldr	r2, [pc, #208]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d008:	4b32      	ldr	r3, [pc, #200]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	43db      	mvns	r3, r3
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	4013      	ands	r3, r2
 800d016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d024:	69ba      	ldr	r2, [r7, #24]
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	4313      	orrs	r3, r2
 800d02a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d02c:	4a29      	ldr	r2, [pc, #164]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d032:	4b28      	ldr	r3, [pc, #160]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	43db      	mvns	r3, r3
 800d03c:	69ba      	ldr	r2, [r7, #24]
 800d03e:	4013      	ands	r3, r2
 800d040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	4313      	orrs	r3, r2
 800d054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d056:	4a1f      	ldr	r2, [pc, #124]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d05c:	4b1d      	ldr	r3, [pc, #116]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	43db      	mvns	r3, r3
 800d066:	69ba      	ldr	r2, [r7, #24]
 800d068:	4013      	ands	r3, r2
 800d06a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d074:	2b00      	cmp	r3, #0
 800d076:	d003      	beq.n	800d080 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d078:	69ba      	ldr	r2, [r7, #24]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d080:	4a14      	ldr	r2, [pc, #80]	; (800d0d4 <HAL_GPIO_Init+0x354>)
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	3301      	adds	r3, #1
 800d08a:	61fb      	str	r3, [r7, #28]
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	2b0f      	cmp	r3, #15
 800d090:	f67f ae86 	bls.w	800cda0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	3724      	adds	r7, #36	; 0x24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	40023800 	.word	0x40023800
 800d0a8:	40013800 	.word	0x40013800
 800d0ac:	40020000 	.word	0x40020000
 800d0b0:	40020400 	.word	0x40020400
 800d0b4:	40020800 	.word	0x40020800
 800d0b8:	40020c00 	.word	0x40020c00
 800d0bc:	40021000 	.word	0x40021000
 800d0c0:	40021400 	.word	0x40021400
 800d0c4:	40021800 	.word	0x40021800
 800d0c8:	40021c00 	.word	0x40021c00
 800d0cc:	40022000 	.word	0x40022000
 800d0d0:	40022400 	.word	0x40022400
 800d0d4:	40013c00 	.word	0x40013c00

0800d0d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b087      	sub	sp, #28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	617b      	str	r3, [r7, #20]
 800d0f2:	e0d9      	b.n	800d2a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	4013      	ands	r3, r2
 800d104:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	f040 80c9 	bne.w	800d2a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800d110:	4a6b      	ldr	r2, [pc, #428]	; (800d2c0 <HAL_GPIO_DeInit+0x1e8>)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	089b      	lsrs	r3, r3, #2
 800d116:	3302      	adds	r3, #2
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	f003 0303 	and.w	r3, r3, #3
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	220f      	movs	r2, #15
 800d128:	fa02 f303 	lsl.w	r3, r2, r3
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	4013      	ands	r3, r2
 800d130:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a63      	ldr	r2, [pc, #396]	; (800d2c4 <HAL_GPIO_DeInit+0x1ec>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d037      	beq.n	800d1aa <HAL_GPIO_DeInit+0xd2>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a62      	ldr	r2, [pc, #392]	; (800d2c8 <HAL_GPIO_DeInit+0x1f0>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d031      	beq.n	800d1a6 <HAL_GPIO_DeInit+0xce>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a61      	ldr	r2, [pc, #388]	; (800d2cc <HAL_GPIO_DeInit+0x1f4>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d02b      	beq.n	800d1a2 <HAL_GPIO_DeInit+0xca>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a60      	ldr	r2, [pc, #384]	; (800d2d0 <HAL_GPIO_DeInit+0x1f8>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d025      	beq.n	800d19e <HAL_GPIO_DeInit+0xc6>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a5f      	ldr	r2, [pc, #380]	; (800d2d4 <HAL_GPIO_DeInit+0x1fc>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d01f      	beq.n	800d19a <HAL_GPIO_DeInit+0xc2>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a5e      	ldr	r2, [pc, #376]	; (800d2d8 <HAL_GPIO_DeInit+0x200>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d019      	beq.n	800d196 <HAL_GPIO_DeInit+0xbe>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a5d      	ldr	r2, [pc, #372]	; (800d2dc <HAL_GPIO_DeInit+0x204>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d013      	beq.n	800d192 <HAL_GPIO_DeInit+0xba>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a5c      	ldr	r2, [pc, #368]	; (800d2e0 <HAL_GPIO_DeInit+0x208>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00d      	beq.n	800d18e <HAL_GPIO_DeInit+0xb6>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a5b      	ldr	r2, [pc, #364]	; (800d2e4 <HAL_GPIO_DeInit+0x20c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d007      	beq.n	800d18a <HAL_GPIO_DeInit+0xb2>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a5a      	ldr	r2, [pc, #360]	; (800d2e8 <HAL_GPIO_DeInit+0x210>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d101      	bne.n	800d186 <HAL_GPIO_DeInit+0xae>
 800d182:	2309      	movs	r3, #9
 800d184:	e012      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d186:	230a      	movs	r3, #10
 800d188:	e010      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d18a:	2308      	movs	r3, #8
 800d18c:	e00e      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d18e:	2307      	movs	r3, #7
 800d190:	e00c      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d192:	2306      	movs	r3, #6
 800d194:	e00a      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d196:	2305      	movs	r3, #5
 800d198:	e008      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d19a:	2304      	movs	r3, #4
 800d19c:	e006      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e004      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	e002      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e000      	b.n	800d1ac <HAL_GPIO_DeInit+0xd4>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	f002 0203 	and.w	r2, r2, #3
 800d1b2:	0092      	lsls	r2, r2, #2
 800d1b4:	4093      	lsls	r3, r2
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d132      	bne.n	800d222 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d1bc:	4b4b      	ldr	r3, [pc, #300]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	43db      	mvns	r3, r3
 800d1c4:	4949      	ldr	r1, [pc, #292]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d1ca:	4b48      	ldr	r3, [pc, #288]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	43db      	mvns	r3, r3
 800d1d2:	4946      	ldr	r1, [pc, #280]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1d4:	4013      	ands	r3, r2
 800d1d6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d1d8:	4b44      	ldr	r3, [pc, #272]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1da:	689a      	ldr	r2, [r3, #8]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	43db      	mvns	r3, r3
 800d1e0:	4942      	ldr	r1, [pc, #264]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d1e6:	4b41      	ldr	r3, [pc, #260]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1e8:	68da      	ldr	r2, [r3, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	43db      	mvns	r3, r3
 800d1ee:	493f      	ldr	r1, [pc, #252]	; (800d2ec <HAL_GPIO_DeInit+0x214>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	220f      	movs	r2, #15
 800d1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d202:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800d204:	4a2e      	ldr	r2, [pc, #184]	; (800d2c0 <HAL_GPIO_DeInit+0x1e8>)
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	089b      	lsrs	r3, r3, #2
 800d20a:	3302      	adds	r3, #2
 800d20c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	43da      	mvns	r2, r3
 800d214:	482a      	ldr	r0, [pc, #168]	; (800d2c0 <HAL_GPIO_DeInit+0x1e8>)
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	089b      	lsrs	r3, r3, #2
 800d21a:	400a      	ands	r2, r1
 800d21c:	3302      	adds	r3, #2
 800d21e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	2103      	movs	r1, #3
 800d22c:	fa01 f303 	lsl.w	r3, r1, r3
 800d230:	43db      	mvns	r3, r3
 800d232:	401a      	ands	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	08da      	lsrs	r2, r3, #3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3208      	adds	r2, #8
 800d240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	220f      	movs	r2, #15
 800d24e:	fa02 f303 	lsl.w	r3, r2, r3
 800d252:	43db      	mvns	r3, r3
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	08d2      	lsrs	r2, r2, #3
 800d258:	4019      	ands	r1, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3208      	adds	r2, #8
 800d25e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68da      	ldr	r2, [r3, #12]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	2103      	movs	r1, #3
 800d26c:	fa01 f303 	lsl.w	r3, r1, r3
 800d270:	43db      	mvns	r3, r3
 800d272:	401a      	ands	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	2101      	movs	r1, #1
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	fa01 f303 	lsl.w	r3, r1, r3
 800d284:	43db      	mvns	r3, r3
 800d286:	401a      	ands	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	689a      	ldr	r2, [r3, #8]
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	2103      	movs	r1, #3
 800d296:	fa01 f303 	lsl.w	r3, r1, r3
 800d29a:	43db      	mvns	r3, r3
 800d29c:	401a      	ands	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	617b      	str	r3, [r7, #20]
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	2b0f      	cmp	r3, #15
 800d2ac:	f67f af22 	bls.w	800d0f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d2b0:	bf00      	nop
 800d2b2:	bf00      	nop
 800d2b4:	371c      	adds	r7, #28
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	40013800 	.word	0x40013800
 800d2c4:	40020000 	.word	0x40020000
 800d2c8:	40020400 	.word	0x40020400
 800d2cc:	40020800 	.word	0x40020800
 800d2d0:	40020c00 	.word	0x40020c00
 800d2d4:	40021000 	.word	0x40021000
 800d2d8:	40021400 	.word	0x40021400
 800d2dc:	40021800 	.word	0x40021800
 800d2e0:	40021c00 	.word	0x40021c00
 800d2e4:	40022000 	.word	0x40022000
 800d2e8:	40022400 	.word	0x40022400
 800d2ec:	40013c00 	.word	0x40013c00

0800d2f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	807b      	strh	r3, [r7, #2]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d300:	787b      	ldrb	r3, [r7, #1]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d306:	887a      	ldrh	r2, [r7, #2]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d30c:	e003      	b.n	800d316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d30e:	887b      	ldrh	r3, [r7, #2]
 800d310:	041a      	lsls	r2, r3, #16
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	619a      	str	r2, [r3, #24]
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d322:	b480      	push	{r7}
 800d324:	b085      	sub	sp, #20
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	460b      	mov	r3, r1
 800d32c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d334:	887a      	ldrh	r2, [r7, #2]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	4013      	ands	r3, r2
 800d33a:	041a      	lsls	r2, r3, #16
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	43d9      	mvns	r1, r3
 800d340:	887b      	ldrh	r3, [r7, #2]
 800d342:	400b      	ands	r3, r1
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	619a      	str	r2, [r3, #24]
}
 800d34a:	bf00      	nop
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
	...

0800d358 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d366:	2301      	movs	r3, #1
 800d368:	e0bf      	b.n	800d4ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7f5 f866 	bl	8002450 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2202      	movs	r2, #2
 800d388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	699a      	ldr	r2, [r3, #24]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d39a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6999      	ldr	r1, [r3, #24]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d3b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	430a      	orrs	r2, r1
 800d3be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6899      	ldr	r1, [r3, #8]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	4b4a      	ldr	r3, [pc, #296]	; (800d4f4 <HAL_LTDC_Init+0x19c>)
 800d3cc:	400b      	ands	r3, r1
 800d3ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	041b      	lsls	r3, r3, #16
 800d3d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6899      	ldr	r1, [r3, #8]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	699a      	ldr	r2, [r3, #24]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	430a      	orrs	r2, r1
 800d3ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68d9      	ldr	r1, [r3, #12]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	4b3e      	ldr	r3, [pc, #248]	; (800d4f4 <HAL_LTDC_Init+0x19c>)
 800d3fa:	400b      	ands	r3, r1
 800d3fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	041b      	lsls	r3, r3, #16
 800d404:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68d9      	ldr	r1, [r3, #12]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a1a      	ldr	r2, [r3, #32]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	431a      	orrs	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6919      	ldr	r1, [r3, #16]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	4b33      	ldr	r3, [pc, #204]	; (800d4f4 <HAL_LTDC_Init+0x19c>)
 800d428:	400b      	ands	r3, r1
 800d42a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	041b      	lsls	r3, r3, #16
 800d432:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6919      	ldr	r1, [r3, #16]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	431a      	orrs	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6959      	ldr	r1, [r3, #20]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	4b27      	ldr	r3, [pc, #156]	; (800d4f4 <HAL_LTDC_Init+0x19c>)
 800d456:	400b      	ands	r3, r1
 800d458:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45e:	041b      	lsls	r3, r3, #16
 800d460:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6959      	ldr	r1, [r3, #20]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	431a      	orrs	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	430a      	orrs	r2, r1
 800d476:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d47e:	021b      	lsls	r3, r3, #8
 800d480:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d488:	041b      	lsls	r3, r3, #16
 800d48a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d49a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d4ae:	431a      	orrs	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	430a      	orrs	r2, r1
 800d4b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f042 0206 	orr.w	r2, r2, #6
 800d4c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	699a      	ldr	r2, [r3, #24]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f042 0201 	orr.w	r2, r2, #1
 800d4d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	f000f800 	.word	0xf000f800

0800d4f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f003 0304 	and.w	r3, r3, #4
 800d516:	2b00      	cmp	r3, #0
 800d518:	d023      	beq.n	800d562 <HAL_LTDC_IRQHandler+0x6a>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	f003 0304 	and.w	r3, r3, #4
 800d520:	2b00      	cmp	r3, #0
 800d522:	d01e      	beq.n	800d562 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 0204 	bic.w	r2, r2, #4
 800d532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2204      	movs	r2, #4
 800d53a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d542:	f043 0201 	orr.w	r2, r3, #1
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2204      	movs	r2, #4
 800d550:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f86f 	bl	800d640 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d023      	beq.n	800d5b4 <HAL_LTDC_IRQHandler+0xbc>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	f003 0302 	and.w	r3, r3, #2
 800d572:	2b00      	cmp	r3, #0
 800d574:	d01e      	beq.n	800d5b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f022 0202 	bic.w	r2, r2, #2
 800d584:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2202      	movs	r2, #2
 800d58c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d594:	f043 0202 	orr.w	r2, r3, #2
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2204      	movs	r2, #4
 800d5a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f846 	bl	800d640 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d01b      	beq.n	800d5f6 <HAL_LTDC_IRQHandler+0xfe>
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d016      	beq.n	800d5f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f022 0201 	bic.w	r2, r2, #1
 800d5d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7f8 f82d 	bl	8005650 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f003 0308 	and.w	r3, r3, #8
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d01b      	beq.n	800d638 <HAL_LTDC_IRQHandler+0x140>
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	f003 0308 	and.w	r3, r3, #8
 800d606:	2b00      	cmp	r3, #0
 800d608:	d016      	beq.n	800d638 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 0208 	bic.w	r2, r2, #8
 800d618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2208      	movs	r2, #8
 800d620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f80e 	bl	800d654 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d638:	bf00      	nop
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d668:	b5b0      	push	{r4, r5, r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d101      	bne.n	800d682 <HAL_LTDC_ConfigLayer+0x1a>
 800d67e:	2302      	movs	r3, #2
 800d680:	e02c      	b.n	800d6dc <HAL_LTDC_ConfigLayer+0x74>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2202      	movs	r2, #2
 800d68e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2134      	movs	r1, #52	; 0x34
 800d698:	fb01 f303 	mul.w	r3, r1, r3
 800d69c:	4413      	add	r3, r2
 800d69e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	4614      	mov	r4, r2
 800d6a6:	461d      	mov	r5, r3
 800d6a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	68b9      	ldr	r1, [r7, #8]
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f000 f849 	bl	800d754 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bdb0      	pop	{r4, r5, r7, pc}

0800d6e4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d101      	bne.n	800d6fc <HAL_LTDC_ProgramLineEvent+0x18>
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	e023      	b.n	800d744 <HAL_LTDC_ProgramLineEvent+0x60>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2202      	movs	r2, #2
 800d708:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f022 0201 	bic.w	r2, r2, #1
 800d71a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800d71c:	4a0c      	ldr	r2, [pc, #48]	; (800d750 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f042 0201 	orr.w	r2, r2, #1
 800d730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	40016800 	.word	0x40016800

0800d754 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d754:	b480      	push	{r7}
 800d756:	b089      	sub	sp, #36	; 0x24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	0c1b      	lsrs	r3, r3, #16
 800d76c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d770:	4413      	add	r3, r2
 800d772:	041b      	lsls	r3, r3, #16
 800d774:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	461a      	mov	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	01db      	lsls	r3, r3, #7
 800d780:	4413      	add	r3, r2
 800d782:	3384      	adds	r3, #132	; 0x84
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	6812      	ldr	r2, [r2, #0]
 800d78a:	4611      	mov	r1, r2
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	01d2      	lsls	r2, r2, #7
 800d790:	440a      	add	r2, r1
 800d792:	3284      	adds	r2, #132	; 0x84
 800d794:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d798:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	0c1b      	lsrs	r3, r3, #16
 800d7a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7aa:	4413      	add	r3, r2
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	01db      	lsls	r3, r3, #7
 800d7b8:	440b      	add	r3, r1
 800d7ba:	3384      	adds	r3, #132	; 0x84
 800d7bc:	4619      	mov	r1, r3
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	68da      	ldr	r2, [r3, #12]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7d2:	4413      	add	r3, r2
 800d7d4:	041b      	lsls	r3, r3, #16
 800d7d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	01db      	lsls	r3, r3, #7
 800d7e2:	4413      	add	r3, r2
 800d7e4:	3384      	adds	r3, #132	; 0x84
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	6812      	ldr	r2, [r2, #0]
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	01d2      	lsls	r2, r2, #7
 800d7f2:	440a      	add	r2, r1
 800d7f4:	3284      	adds	r2, #132	; 0x84
 800d7f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d7fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	689a      	ldr	r2, [r3, #8]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d80a:	4413      	add	r3, r2
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4619      	mov	r1, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	01db      	lsls	r3, r3, #7
 800d818:	440b      	add	r3, r1
 800d81a:	3384      	adds	r3, #132	; 0x84
 800d81c:	4619      	mov	r1, r3
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	4313      	orrs	r3, r2
 800d822:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	461a      	mov	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	01db      	lsls	r3, r3, #7
 800d82e:	4413      	add	r3, r2
 800d830:	3384      	adds	r3, #132	; 0x84
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	6812      	ldr	r2, [r2, #0]
 800d838:	4611      	mov	r1, r2
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	01d2      	lsls	r2, r2, #7
 800d83e:	440a      	add	r2, r1
 800d840:	3284      	adds	r2, #132	; 0x84
 800d842:	f023 0307 	bic.w	r3, r3, #7
 800d846:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	461a      	mov	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	01db      	lsls	r3, r3, #7
 800d852:	4413      	add	r3, r2
 800d854:	3384      	adds	r3, #132	; 0x84
 800d856:	461a      	mov	r2, r3
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d864:	021b      	lsls	r3, r3, #8
 800d866:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d86e:	041b      	lsls	r3, r3, #16
 800d870:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	061b      	lsls	r3, r3, #24
 800d878:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	461a      	mov	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	01db      	lsls	r3, r3, #7
 800d884:	4413      	add	r3, r2
 800d886:	3384      	adds	r3, #132	; 0x84
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	01db      	lsls	r3, r3, #7
 800d894:	4413      	add	r3, r2
 800d896:	3384      	adds	r3, #132	; 0x84
 800d898:	461a      	mov	r2, r3
 800d89a:	2300      	movs	r3, #0
 800d89c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	431a      	orrs	r2, r3
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	01db      	lsls	r3, r3, #7
 800d8b8:	440b      	add	r3, r1
 800d8ba:	3384      	adds	r3, #132	; 0x84
 800d8bc:	4619      	mov	r1, r3
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	01db      	lsls	r3, r3, #7
 800d8ce:	4413      	add	r3, r2
 800d8d0:	3384      	adds	r3, #132	; 0x84
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	6812      	ldr	r2, [r2, #0]
 800d8d8:	4611      	mov	r1, r2
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	01d2      	lsls	r2, r2, #7
 800d8de:	440a      	add	r2, r1
 800d8e0:	3284      	adds	r2, #132	; 0x84
 800d8e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	01db      	lsls	r3, r3, #7
 800d8f2:	4413      	add	r3, r2
 800d8f4:	3384      	adds	r3, #132	; 0x84
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	01db      	lsls	r3, r3, #7
 800d908:	4413      	add	r3, r2
 800d90a:	3384      	adds	r3, #132	; 0x84
 800d90c:	69da      	ldr	r2, [r3, #28]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4619      	mov	r1, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	01db      	lsls	r3, r3, #7
 800d918:	440b      	add	r3, r1
 800d91a:	3384      	adds	r3, #132	; 0x84
 800d91c:	4619      	mov	r1, r3
 800d91e:	4b58      	ldr	r3, [pc, #352]	; (800da80 <LTDC_SetConfig+0x32c>)
 800d920:	4013      	ands	r3, r2
 800d922:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	69da      	ldr	r2, [r3, #28]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	6a1b      	ldr	r3, [r3, #32]
 800d92c:	68f9      	ldr	r1, [r7, #12]
 800d92e:	6809      	ldr	r1, [r1, #0]
 800d930:	4608      	mov	r0, r1
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	01c9      	lsls	r1, r1, #7
 800d936:	4401      	add	r1, r0
 800d938:	3184      	adds	r1, #132	; 0x84
 800d93a:	4313      	orrs	r3, r2
 800d93c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	461a      	mov	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	01db      	lsls	r3, r3, #7
 800d948:	4413      	add	r3, r2
 800d94a:	3384      	adds	r3, #132	; 0x84
 800d94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	461a      	mov	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	01db      	lsls	r3, r3, #7
 800d958:	4413      	add	r3, r2
 800d95a:	3384      	adds	r3, #132	; 0x84
 800d95c:	461a      	mov	r2, r3
 800d95e:	2300      	movs	r3, #0
 800d960:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	01db      	lsls	r3, r3, #7
 800d96c:	4413      	add	r3, r2
 800d96e:	3384      	adds	r3, #132	; 0x84
 800d970:	461a      	mov	r2, r3
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	691b      	ldr	r3, [r3, #16]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800d980:	2304      	movs	r3, #4
 800d982:	61fb      	str	r3, [r7, #28]
 800d984:	e01b      	b.n	800d9be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	691b      	ldr	r3, [r3, #16]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d102      	bne.n	800d994 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800d98e:	2303      	movs	r3, #3
 800d990:	61fb      	str	r3, [r7, #28]
 800d992:	e014      	b.n	800d9be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	2b04      	cmp	r3, #4
 800d99a:	d00b      	beq.n	800d9b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d007      	beq.n	800d9b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d003      	beq.n	800d9b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d9b0:	2b07      	cmp	r3, #7
 800d9b2:	d102      	bne.n	800d9ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	61fb      	str	r3, [r7, #28]
 800d9b8:	e001      	b.n	800d9be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	01db      	lsls	r3, r3, #7
 800d9c8:	4413      	add	r3, r2
 800d9ca:	3384      	adds	r3, #132	; 0x84
 800d9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	6812      	ldr	r2, [r2, #0]
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	01d2      	lsls	r2, r2, #7
 800d9d8:	440a      	add	r2, r1
 800d9da:	3284      	adds	r2, #132	; 0x84
 800d9dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800d9e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e6:	69fa      	ldr	r2, [r7, #28]
 800d9e8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ec:	041a      	lsls	r2, r3, #16
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	6859      	ldr	r1, [r3, #4]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	1acb      	subs	r3, r1, r3
 800d9f8:	69f9      	ldr	r1, [r7, #28]
 800d9fa:	fb01 f303 	mul.w	r3, r1, r3
 800d9fe:	3303      	adds	r3, #3
 800da00:	68f9      	ldr	r1, [r7, #12]
 800da02:	6809      	ldr	r1, [r1, #0]
 800da04:	4608      	mov	r0, r1
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	01c9      	lsls	r1, r1, #7
 800da0a:	4401      	add	r1, r0
 800da0c:	3184      	adds	r1, #132	; 0x84
 800da0e:	4313      	orrs	r3, r2
 800da10:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	01db      	lsls	r3, r3, #7
 800da1c:	4413      	add	r3, r2
 800da1e:	3384      	adds	r3, #132	; 0x84
 800da20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4619      	mov	r1, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	01db      	lsls	r3, r3, #7
 800da2c:	440b      	add	r3, r1
 800da2e:	3384      	adds	r3, #132	; 0x84
 800da30:	4619      	mov	r1, r3
 800da32:	4b14      	ldr	r3, [pc, #80]	; (800da84 <LTDC_SetConfig+0x330>)
 800da34:	4013      	ands	r3, r2
 800da36:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	01db      	lsls	r3, r3, #7
 800da42:	4413      	add	r3, r2
 800da44:	3384      	adds	r3, #132	; 0x84
 800da46:	461a      	mov	r2, r3
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	461a      	mov	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	01db      	lsls	r3, r3, #7
 800da58:	4413      	add	r3, r2
 800da5a:	3384      	adds	r3, #132	; 0x84
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	6812      	ldr	r2, [r2, #0]
 800da62:	4611      	mov	r1, r2
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	01d2      	lsls	r2, r2, #7
 800da68:	440a      	add	r2, r1
 800da6a:	3284      	adds	r2, #132	; 0x84
 800da6c:	f043 0301 	orr.w	r3, r3, #1
 800da70:	6013      	str	r3, [r2, #0]
}
 800da72:	bf00      	nop
 800da74:	3724      	adds	r7, #36	; 0x24
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	fffff8f8 	.word	0xfffff8f8
 800da84:	fffff800 	.word	0xfffff800

0800da88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <HAL_PWREx_EnableOverDrive+0x98>)
 800da94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da96:	4a22      	ldr	r2, [pc, #136]	; (800db20 <HAL_PWREx_EnableOverDrive+0x98>)
 800da98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da9c:	6413      	str	r3, [r2, #64]	; 0x40
 800da9e:	4b20      	ldr	r3, [pc, #128]	; (800db20 <HAL_PWREx_EnableOverDrive+0x98>)
 800daa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800daaa:	4b1e      	ldr	r3, [pc, #120]	; (800db24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a1d      	ldr	r2, [pc, #116]	; (800db24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dab4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dab6:	f7fc ff37 	bl	800a928 <HAL_GetTick>
 800daba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dabc:	e009      	b.n	800dad2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dabe:	f7fc ff33 	bl	800a928 <HAL_GetTick>
 800dac2:	4602      	mov	r2, r0
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dacc:	d901      	bls.n	800dad2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800dace:	2303      	movs	r3, #3
 800dad0:	e022      	b.n	800db18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dad2:	4b14      	ldr	r3, [pc, #80]	; (800db24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dade:	d1ee      	bne.n	800dabe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800dae0:	4b10      	ldr	r3, [pc, #64]	; (800db24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a0f      	ldr	r2, [pc, #60]	; (800db24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800daea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800daec:	f7fc ff1c 	bl	800a928 <HAL_GetTick>
 800daf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800daf2:	e009      	b.n	800db08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800daf4:	f7fc ff18 	bl	800a928 <HAL_GetTick>
 800daf8:	4602      	mov	r2, r0
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db02:	d901      	bls.n	800db08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	e007      	b.n	800db18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800db08:	4b06      	ldr	r3, [pc, #24]	; (800db24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db14:	d1ee      	bne.n	800daf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	40023800 	.word	0x40023800
 800db24:	40007000 	.word	0x40007000

0800db28 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af02      	add	r7, sp, #8
 800db2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800db30:	f7fc fefa 	bl	800a928 <HAL_GetTick>
 800db34:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	e067      	b.n	800dc10 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10b      	bne.n	800db64 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7f4 fef5 	bl	8002944 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800db5a:	f241 3188 	movw	r1, #5000	; 0x1388
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fcf2 	bl	800e548 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	3b01      	subs	r3, #1
 800db74:	021a      	lsls	r2, r3, #8
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	430a      	orrs	r2, r1
 800db7c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	2120      	movs	r1, #32
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fd1d 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800db90:	4603      	mov	r3, r0
 800db92:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800db94:	7afb      	ldrb	r3, [r7, #11]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d135      	bne.n	800dc06 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <HAL_QSPI_Init+0xf0>)
 800dba2:	4013      	ands	r3, r2
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	6852      	ldr	r2, [r2, #4]
 800dba8:	0611      	lsls	r1, r2, #24
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	68d2      	ldr	r2, [r2, #12]
 800dbae:	4311      	orrs	r1, r2
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	69d2      	ldr	r2, [r2, #28]
 800dbb4:	4311      	orrs	r1, r2
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6a12      	ldr	r2, [r2, #32]
 800dbba:	4311      	orrs	r1, r2
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	6812      	ldr	r2, [r2, #0]
 800dbc0:	430b      	orrs	r3, r1
 800dbc2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	4b14      	ldr	r3, [pc, #80]	; (800dc1c <HAL_QSPI_Init+0xf4>)
 800dbcc:	4013      	ands	r3, r2
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	6912      	ldr	r2, [r2, #16]
 800dbd2:	0411      	lsls	r1, r2, #16
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	6952      	ldr	r2, [r2, #20]
 800dbd8:	4311      	orrs	r1, r2
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	6992      	ldr	r2, [r2, #24]
 800dbde:	4311      	orrs	r1, r2
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	6812      	ldr	r2, [r2, #0]
 800dbe4:	430b      	orrs	r3, r1
 800dbe6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f042 0201 	orr.w	r2, r2, #1
 800dbf6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	00ffff2f 	.word	0x00ffff2f
 800dc1c:	ffe0f8fe 	.word	0xffe0f8fe

0800dc20 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e016      	b.n	800dc60 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f022 0201 	bic.w	r2, r2, #1
 800dc40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7f4 ff08 	bl	8002a58 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d064      	beq.n	800dd54 <HAL_QSPI_IRQHandler+0xec>
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d05f      	beq.n	800dd54 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3320      	adds	r3, #32
 800dc9a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	2b12      	cmp	r3, #18
 800dca6:	d125      	bne.n	800dcf4 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800dca8:	e01c      	b.n	800dce4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00f      	beq.n	800dcd2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcca:	1e5a      	subs	r2, r3, #1
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	62da      	str	r2, [r3, #44]	; 0x2c
 800dcd0:	e008      	b.n	800dce4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dce0:	601a      	str	r2, [r3, #0]
          break;
 800dce2:	e033      	b.n	800dd4c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f003 0304 	and.w	r3, r3, #4
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1db      	bne.n	800dcaa <HAL_QSPI_IRQHandler+0x42>
 800dcf2:	e02b      	b.n	800dd4c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b22      	cmp	r3, #34	; 0x22
 800dcfe:	d125      	bne.n	800dd4c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800dd00:	e01d      	b.n	800dd3e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d010      	beq.n	800dd2c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	7812      	ldrb	r2, [r2, #0]
 800dd12:	b2d2      	uxtb	r2, r2
 800dd14:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1a:	1c5a      	adds	r2, r3, #1
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd24:	1e5a      	subs	r2, r3, #1
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	639a      	str	r2, [r3, #56]	; 0x38
 800dd2a:	e008      	b.n	800dd3e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dd3a:	601a      	str	r2, [r3, #0]
          break;
 800dd3c:	e006      	b.n	800dd4c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1da      	bne.n	800dd02 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fbdd 	bl	800e50c <HAL_QSPI_FifoThresholdCallback>
 800dd52:	e13c      	b.n	800dfce <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	f003 0302 	and.w	r3, r3, #2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 80b0 	beq.w	800dec0 <HAL_QSPI_IRQHandler+0x258>
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 80aa 	beq.w	800dec0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2202      	movs	r2, #2
 800dd72:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800dd82:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b12      	cmp	r3, #18
 800dd8e:	d120      	bne.n	800ddd2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f003 0304 	and.w	r3, r3, #4
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d011      	beq.n	800ddc2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f022 0204 	bic.w	r2, r2, #4
 800ddac:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f022 0201 	bic.w	r2, r2, #1
 800ddc0:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fb94 	bl	800e4f8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ddd0:	e0fa      	b.n	800dfc8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b22      	cmp	r3, #34	; 0x22
 800dddc:	d143      	bne.n	800de66 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d012      	beq.n	800de12 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f022 0204 	bic.w	r2, r2, #4
 800ddfa:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f022 0201 	bic.w	r2, r2, #1
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	e021      	b.n	800de56 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3320      	adds	r3, #32
 800de18:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800de1a:	e013      	b.n	800de44 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de20:	2b00      	cmp	r3, #0
 800de22:	d017      	beq.n	800de54 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	7812      	ldrb	r2, [r2, #0]
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3e:	1e5a      	subs	r2, r3, #1
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1e4      	bne.n	800de1c <HAL_QSPI_IRQHandler+0x1b4>
 800de52:	e000      	b.n	800de56 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800de54:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fb40 	bl	800e4e4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800de64:	e0b0      	b.n	800dfc8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d107      	bne.n	800de82 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2201      	movs	r2, #1
 800de76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 fb28 	bl	800e4d0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800de80:	e0a2      	b.n	800dfc8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b08      	cmp	r3, #8
 800de8c:	f040 809c 	bne.w	800dfc8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	695a      	ldr	r2, [r3, #20]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800de9e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deac:	2b00      	cmp	r3, #0
 800deae:	d103      	bne.n	800deb8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fb03 	bl	800e4bc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800deb6:	e087      	b.n	800dfc8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 faf5 	bl	800e4a8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800debe:	e083      	b.n	800dfc8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	f003 0308 	and.w	r3, r3, #8
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d01f      	beq.n	800df0a <HAL_QSPI_IRQHandler+0x2a2>
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d01a      	beq.n	800df0a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2208      	movs	r2, #8
 800deda:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00b      	beq.n	800df02 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800def8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2201      	movs	r2, #1
 800defe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fb0c 	bl	800e520 <HAL_QSPI_StatusMatchCallback>
 800df08:	e061      	b.n	800dfce <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	2b00      	cmp	r3, #0
 800df12:	d047      	beq.n	800dfa4 <HAL_QSPI_IRQHandler+0x33c>
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d042      	beq.n	800dfa4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2201      	movs	r2, #1
 800df24:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800df34:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df3a:	f043 0202 	orr.w	r2, r3, #2
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 0304 	and.w	r3, r3, #4
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d021      	beq.n	800df94 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0204 	bic.w	r2, r2, #4
 800df5e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df64:	4a1c      	ldr	r2, [pc, #112]	; (800dfd8 <HAL_QSPI_IRQHandler+0x370>)
 800df66:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fe fa73 	bl	800c458 <HAL_DMA_Abort_IT>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d029      	beq.n	800dfcc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df7c:	f043 0204 	orr.w	r2, r3, #4
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fa8b 	bl	800e4a8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800df92:	e01b      	b.n	800dfcc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fa83 	bl	800e4a8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800dfa2:	e013      	b.n	800dfcc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	f003 0310 	and.w	r3, r3, #16
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00f      	beq.n	800dfce <HAL_QSPI_IRQHandler+0x366>
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00a      	beq.n	800dfce <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2210      	movs	r2, #16
 800dfbe:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fab7 	bl	800e534 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800dfc6:	e002      	b.n	800dfce <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800dfc8:	bf00      	nop
 800dfca:	e000      	b.n	800dfce <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800dfcc:	bf00      	nop
}
 800dfce:	bf00      	nop
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	0800e565 	.word	0x0800e565

0800dfdc <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b088      	sub	sp, #32
 800dfe0:	af02      	add	r7, sp, #8
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800dfe8:	f7fc fc9e 	bl	800a928 <HAL_GetTick>
 800dfec:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d101      	bne.n	800dffe <HAL_QSPI_Command+0x22>
 800dffa:	2302      	movs	r3, #2
 800dffc:	e048      	b.n	800e090 <HAL_QSPI_Command+0xb4>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d137      	bne.n	800e082 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2202      	movs	r2, #2
 800e01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	2200      	movs	r2, #0
 800e028:	2120      	movs	r1, #32
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 facd 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e030:	4603      	mov	r3, r0
 800e032:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d125      	bne.n	800e086 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e03a:	2200      	movs	r2, #0
 800e03c:	68b9      	ldr	r1, [r7, #8]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f000 fafa 	bl	800e638 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d115      	bne.n	800e078 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2201      	movs	r2, #1
 800e054:	2102      	movs	r1, #2
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f000 fab7 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e05c:	4603      	mov	r3, r0
 800e05e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e060:	7dfb      	ldrb	r3, [r7, #23]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d10f      	bne.n	800e086 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2202      	movs	r2, #2
 800e06c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2201      	movs	r2, #1
 800e072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e076:	e006      	b.n	800e086 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e080:	e001      	b.n	800e086 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e082:	2302      	movs	r3, #2
 800e084:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08a      	sub	sp, #40	; 0x28
 800e09c:	af02      	add	r7, sp, #8
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e0a8:	f7fc fc3e 	bl	800a928 <HAL_GetTick>
 800e0ac:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3320      	adds	r3, #32
 800e0b4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d101      	bne.n	800e0c6 <HAL_QSPI_Transmit+0x2e>
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	e076      	b.n	800e1b4 <HAL_QSPI_Transmit+0x11c>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d165      	bne.n	800e1a6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d056      	beq.n	800e194 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2212      	movs	r2, #18
 800e0ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	1c5a      	adds	r2, r3, #1
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	695a      	ldr	r2, [r3, #20]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e11a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e11c:	e01b      	b.n	800e156 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	2201      	movs	r2, #1
 800e126:	2104      	movs	r1, #4
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 fa4e 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e12e:	4603      	mov	r3, r0
 800e130:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e132:	7ffb      	ldrb	r3, [r7, #31]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d113      	bne.n	800e160 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13c:	781a      	ldrb	r2, [r3, #0]
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e150:	1e5a      	subs	r2, r3, #1
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1df      	bne.n	800e11e <HAL_QSPI_Transmit+0x86>
 800e15e:	e000      	b.n	800e162 <HAL_QSPI_Transmit+0xca>
          break;
 800e160:	bf00      	nop
      }

      if (status == HAL_OK)
 800e162:	7ffb      	ldrb	r3, [r7, #31]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d110      	bne.n	800e18a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	2201      	movs	r2, #1
 800e170:	2102      	movs	r1, #2
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 fa29 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e178:	4603      	mov	r3, r0
 800e17a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e17c:	7ffb      	ldrb	r3, [r7, #31]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d103      	bne.n	800e18a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2202      	movs	r2, #2
 800e188:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e192:	e00a      	b.n	800e1aa <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e198:	f043 0208 	orr.w	r2, r3, #8
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	77fb      	strb	r3, [r7, #31]
 800e1a4:	e001      	b.n	800e1aa <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e1b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3720      	adds	r7, #32
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	; 0x28
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e1cc:	f7fc fbac 	bl	800a928 <HAL_GetTick>
 800e1d0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	3320      	adds	r3, #32
 800e1e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d101      	bne.n	800e1f2 <HAL_QSPI_Receive+0x36>
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e07d      	b.n	800e2ee <HAL_QSPI_Receive+0x132>
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b01      	cmp	r3, #1
 800e204:	d16c      	bne.n	800e2e0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d05d      	beq.n	800e2ce <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2222      	movs	r2, #34	; 0x22
 800e216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	1c5a      	adds	r2, r3, #1
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e24a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	697a      	ldr	r2, [r7, #20]
 800e252:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e254:	e01c      	b.n	800e290 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	2201      	movs	r2, #1
 800e25e:	2106      	movs	r1, #6
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 f9b2 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e266:	4603      	mov	r3, r0
 800e268:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e26a:	7ffb      	ldrb	r3, [r7, #31]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d114      	bne.n	800e29a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e274:	693a      	ldr	r2, [r7, #16]
 800e276:	7812      	ldrb	r2, [r2, #0]
 800e278:	b2d2      	uxtb	r2, r2
 800e27a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28a:	1e5a      	subs	r2, r3, #1
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1de      	bne.n	800e256 <HAL_QSPI_Receive+0x9a>
 800e298:	e000      	b.n	800e29c <HAL_QSPI_Receive+0xe0>
          break;
 800e29a:	bf00      	nop
      }

      if (status == HAL_OK)
 800e29c:	7ffb      	ldrb	r3, [r7, #31]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d110      	bne.n	800e2c4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	2102      	movs	r1, #2
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 f98c 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e2b6:	7ffb      	ldrb	r3, [r7, #31]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d103      	bne.n	800e2c4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2cc:	e00a      	b.n	800e2e4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d2:	f043 0208 	orr.w	r2, r3, #8
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	77fb      	strb	r3, [r7, #31]
 800e2de:	e001      	b.n	800e2e4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e2ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3720      	adds	r7, #32
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b088      	sub	sp, #32
 800e2fa:	af02      	add	r7, sp, #8
 800e2fc:	60f8      	str	r0, [r7, #12]
 800e2fe:	60b9      	str	r1, [r7, #8]
 800e300:	607a      	str	r2, [r7, #4]
 800e302:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e304:	f7fc fb10 	bl	800a928 <HAL_GetTick>
 800e308:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b01      	cmp	r3, #1
 800e314:	d101      	bne.n	800e31a <HAL_QSPI_AutoPolling+0x24>
 800e316:	2302      	movs	r3, #2
 800e318:	e060      	b.n	800e3dc <HAL_QSPI_AutoPolling+0xe6>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d14f      	bne.n	800e3ce <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2242      	movs	r2, #66	; 0x42
 800e338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	2200      	movs	r2, #0
 800e344:	2120      	movs	r1, #32
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f000 f93f 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e34c:	4603      	mov	r3, r0
 800e34e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e350:	7dfb      	ldrb	r3, [r7, #23]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d13d      	bne.n	800e3d2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	6812      	ldr	r2, [r2, #0]
 800e35e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6852      	ldr	r2, [r2, #4]
 800e368:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	6892      	ldr	r2, [r2, #8]
 800e372:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	431a      	orrs	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e38c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	68da      	ldr	r2, [r3, #12]
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f94b 	bl	800e638 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	2108      	movs	r1, #8
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 f90c 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10a      	bne.n	800e3d2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2208      	movs	r2, #8
 800e3c2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3cc:	e001      	b.n	800e3d2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3718      	adds	r7, #24
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b088      	sub	sp, #32
 800e3e8:	af02      	add	r7, sp, #8
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e3f0:	f7fc fa9a 	bl	800a928 <HAL_GetTick>
 800e3f4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d101      	bne.n	800e406 <HAL_QSPI_MemoryMapped+0x22>
 800e402:	2302      	movs	r3, #2
 800e404:	e04c      	b.n	800e4a0 <HAL_QSPI_MemoryMapped+0xbc>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e414:	b2db      	uxtb	r3, r3
 800e416:	2b01      	cmp	r3, #1
 800e418:	d13b      	bne.n	800e492 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2200      	movs	r2, #0
 800e41e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2282      	movs	r2, #130	; 0x82
 800e424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	2200      	movs	r2, #0
 800e432:	2120      	movs	r1, #32
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f000 f8c8 	bl	800e5ca <QSPI_WaitFlagStateUntilTimeout>
 800e43a:	4603      	mov	r3, r0
 800e43c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d128      	bne.n	800e496 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f023 0108 	bic.w	r1, r3, #8
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	430a      	orrs	r2, r1
 800e458:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	2b08      	cmp	r3, #8
 800e460:	d110      	bne.n	800e484 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	6812      	ldr	r2, [r2, #0]
 800e46a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2210      	movs	r2, #16
 800e472:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e482:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800e484:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f000 f8d4 	bl	800e638 <QSPI_Config>
 800e490:	e001      	b.n	800e496 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e492:	2302      	movs	r3, #2
 800e494:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3718      	adds	r7, #24
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800e500:	bf00      	nop
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr

0800e50c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	683a      	ldr	r2, [r7, #0]
 800e556:	649a      	str	r2, [r3, #72]	; 0x48
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e570:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2200      	movs	r2, #0
 800e57c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b08      	cmp	r3, #8
 800e588:	d114      	bne.n	800e5b4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2202      	movs	r2, #2
 800e590:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e5a0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f042 0202 	orr.w	r2, r2, #2
 800e5b0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800e5b2:	e006      	b.n	800e5c2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff ff73 	bl	800e4a8 <HAL_QSPI_ErrorCallback>
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	60f8      	str	r0, [r7, #12]
 800e5d2:	60b9      	str	r1, [r7, #8]
 800e5d4:	603b      	str	r3, [r7, #0]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e5da:	e01a      	b.n	800e612 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e2:	d016      	beq.n	800e612 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5e4:	f7fc f9a0 	bl	800a928 <HAL_GetTick>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	69ba      	ldr	r2, [r7, #24]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d302      	bcc.n	800e5fa <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d10b      	bne.n	800e612 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2204      	movs	r2, #4
 800e5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e606:	f043 0201 	orr.w	r2, r3, #1
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	e00e      	b.n	800e630 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	689a      	ldr	r2, [r3, #8]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	4013      	ands	r3, r2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	bf14      	ite	ne
 800e620:	2301      	movne	r3, #1
 800e622:	2300      	moveq	r3, #0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	461a      	mov	r2, r3
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d1d6      	bne.n	800e5dc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d009      	beq.n	800e660 <QSPI_Config+0x28>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e652:	d005      	beq.n	800e660 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3a01      	subs	r2, #1
 800e65e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	2b00      	cmp	r3, #0
 800e666:	f000 80b9 	beq.w	800e7dc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	6a1b      	ldr	r3, [r3, #32]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d05f      	beq.n	800e732 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	6892      	ldr	r2, [r2, #8]
 800e67a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	69db      	ldr	r3, [r3, #28]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d031      	beq.n	800e6e8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68c:	431a      	orrs	r2, r3
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e692:	431a      	orrs	r2, r3
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e698:	431a      	orrs	r2, r3
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	049b      	lsls	r3, r3, #18
 800e6a0:	431a      	orrs	r2, r3
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	431a      	orrs	r2, r3
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	6a1b      	ldr	r3, [r3, #32]
 800e6ac:	431a      	orrs	r2, r3
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	69db      	ldr	r3, [r3, #28]
 800e6b8:	431a      	orrs	r2, r3
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	699b      	ldr	r3, [r3, #24]
 800e6be:	431a      	orrs	r2, r3
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	ea42 0103 	orr.w	r1, r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	430a      	orrs	r2, r1
 800e6d0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e6d8:	f000 812e 	beq.w	800e938 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	6852      	ldr	r2, [r2, #4]
 800e6e4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e6e6:	e127      	b.n	800e938 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f0:	431a      	orrs	r2, r3
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f6:	431a      	orrs	r2, r3
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	431a      	orrs	r2, r3
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	049b      	lsls	r3, r3, #18
 800e704:	431a      	orrs	r2, r3
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	431a      	orrs	r2, r3
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	431a      	orrs	r2, r3
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	431a      	orrs	r2, r3
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	431a      	orrs	r2, r3
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	ea42 0103 	orr.w	r1, r2, r3
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	430a      	orrs	r2, r1
 800e72e:	615a      	str	r2, [r3, #20]
}
 800e730:	e102      	b.n	800e938 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	69db      	ldr	r3, [r3, #28]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d02e      	beq.n	800e798 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e742:	431a      	orrs	r2, r3
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e748:	431a      	orrs	r2, r3
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74e:	431a      	orrs	r2, r3
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	049b      	lsls	r3, r3, #18
 800e756:	431a      	orrs	r2, r3
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	6a1b      	ldr	r3, [r3, #32]
 800e75c:	431a      	orrs	r2, r3
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	431a      	orrs	r2, r3
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	69db      	ldr	r3, [r3, #28]
 800e768:	431a      	orrs	r2, r3
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	431a      	orrs	r2, r3
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	ea42 0103 	orr.w	r1, r2, r3
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	430a      	orrs	r2, r1
 800e780:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e788:	f000 80d6 	beq.w	800e938 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	6852      	ldr	r2, [r2, #4]
 800e794:	619a      	str	r2, [r3, #24]
}
 800e796:	e0cf      	b.n	800e938 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a6:	431a      	orrs	r2, r3
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	049b      	lsls	r3, r3, #18
 800e7b4:	431a      	orrs	r2, r3
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	431a      	orrs	r2, r3
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	431a      	orrs	r2, r3
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	ea42 0103 	orr.w	r1, r2, r3
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	430a      	orrs	r2, r1
 800e7d8:	615a      	str	r2, [r3, #20]
}
 800e7da:	e0ad      	b.n	800e938 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	6a1b      	ldr	r3, [r3, #32]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d058      	beq.n	800e896 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	6892      	ldr	r2, [r2, #8]
 800e7ec:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	69db      	ldr	r3, [r3, #28]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d02d      	beq.n	800e852 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fe:	431a      	orrs	r2, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e804:	431a      	orrs	r2, r3
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80a:	431a      	orrs	r2, r3
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	695b      	ldr	r3, [r3, #20]
 800e810:	049b      	lsls	r3, r3, #18
 800e812:	431a      	orrs	r2, r3
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	431a      	orrs	r2, r3
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	431a      	orrs	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	431a      	orrs	r2, r3
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	431a      	orrs	r2, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	ea42 0103 	orr.w	r1, r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	430a      	orrs	r2, r1
 800e83c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e844:	d078      	beq.n	800e938 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	6852      	ldr	r2, [r2, #4]
 800e84e:	619a      	str	r2, [r3, #24]
}
 800e850:	e072      	b.n	800e938 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85a:	431a      	orrs	r2, r3
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e860:	431a      	orrs	r2, r3
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e866:	431a      	orrs	r2, r3
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	049b      	lsls	r3, r3, #18
 800e86e:	431a      	orrs	r2, r3
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	431a      	orrs	r2, r3
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	6a1b      	ldr	r3, [r3, #32]
 800e87a:	431a      	orrs	r2, r3
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	69db      	ldr	r3, [r3, #28]
 800e880:	431a      	orrs	r2, r3
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	ea42 0103 	orr.w	r1, r2, r3
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	430a      	orrs	r2, r1
 800e892:	615a      	str	r2, [r3, #20]
}
 800e894:	e050      	b.n	800e938 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	69db      	ldr	r3, [r3, #28]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d02a      	beq.n	800e8f4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a6:	431a      	orrs	r2, r3
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	431a      	orrs	r2, r3
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b2:	431a      	orrs	r2, r3
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	695b      	ldr	r3, [r3, #20]
 800e8b8:	049b      	lsls	r3, r3, #18
 800e8ba:	431a      	orrs	r2, r3
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	6a1b      	ldr	r3, [r3, #32]
 800e8c0:	431a      	orrs	r2, r3
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	431a      	orrs	r2, r3
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	69db      	ldr	r3, [r3, #28]
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	699b      	ldr	r3, [r3, #24]
 800e8d2:	ea42 0103 	orr.w	r1, r2, r3
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e8e6:	d027      	beq.n	800e938 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	6852      	ldr	r2, [r2, #4]
 800e8f0:	619a      	str	r2, [r3, #24]
}
 800e8f2:	e021      	b.n	800e938 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d01d      	beq.n	800e938 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e904:	431a      	orrs	r2, r3
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90a:	431a      	orrs	r2, r3
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e910:	431a      	orrs	r2, r3
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	049b      	lsls	r3, r3, #18
 800e918:	431a      	orrs	r2, r3
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	431a      	orrs	r2, r3
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	69db      	ldr	r3, [r3, #28]
 800e924:	431a      	orrs	r2, r3
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	ea42 0103 	orr.w	r1, r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	430a      	orrs	r2, r1
 800e936:	615a      	str	r2, [r3, #20]
}
 800e938:	bf00      	nop
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800e94c:	2300      	movs	r3, #0
 800e94e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	e29b      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 0301 	and.w	r3, r3, #1
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 8087 	beq.w	800ea76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e968:	4b96      	ldr	r3, [pc, #600]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	f003 030c 	and.w	r3, r3, #12
 800e970:	2b04      	cmp	r3, #4
 800e972:	d00c      	beq.n	800e98e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e974:	4b93      	ldr	r3, [pc, #588]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	f003 030c 	and.w	r3, r3, #12
 800e97c:	2b08      	cmp	r3, #8
 800e97e:	d112      	bne.n	800e9a6 <HAL_RCC_OscConfig+0x62>
 800e980:	4b90      	ldr	r3, [pc, #576]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e98c:	d10b      	bne.n	800e9a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e98e:	4b8d      	ldr	r3, [pc, #564]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e996:	2b00      	cmp	r3, #0
 800e998:	d06c      	beq.n	800ea74 <HAL_RCC_OscConfig+0x130>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d168      	bne.n	800ea74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e275      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9ae:	d106      	bne.n	800e9be <HAL_RCC_OscConfig+0x7a>
 800e9b0:	4b84      	ldr	r3, [pc, #528]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a83      	ldr	r2, [pc, #524]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	e02e      	b.n	800ea1c <HAL_RCC_OscConfig+0xd8>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10c      	bne.n	800e9e0 <HAL_RCC_OscConfig+0x9c>
 800e9c6:	4b7f      	ldr	r3, [pc, #508]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a7e      	ldr	r2, [pc, #504]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9d0:	6013      	str	r3, [r2, #0]
 800e9d2:	4b7c      	ldr	r3, [pc, #496]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a7b      	ldr	r2, [pc, #492]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e9dc:	6013      	str	r3, [r2, #0]
 800e9de:	e01d      	b.n	800ea1c <HAL_RCC_OscConfig+0xd8>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e9e8:	d10c      	bne.n	800ea04 <HAL_RCC_OscConfig+0xc0>
 800e9ea:	4b76      	ldr	r3, [pc, #472]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a75      	ldr	r2, [pc, #468]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	4b73      	ldr	r3, [pc, #460]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a72      	ldr	r2, [pc, #456]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800e9fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	e00b      	b.n	800ea1c <HAL_RCC_OscConfig+0xd8>
 800ea04:	4b6f      	ldr	r3, [pc, #444]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a6e      	ldr	r2, [pc, #440]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea0e:	6013      	str	r3, [r2, #0]
 800ea10:	4b6c      	ldr	r3, [pc, #432]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a6b      	ldr	r2, [pc, #428]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d013      	beq.n	800ea4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea24:	f7fb ff80 	bl	800a928 <HAL_GetTick>
 800ea28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea2a:	e008      	b.n	800ea3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea2c:	f7fb ff7c 	bl	800a928 <HAL_GetTick>
 800ea30:	4602      	mov	r2, r0
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b64      	cmp	r3, #100	; 0x64
 800ea38:	d901      	bls.n	800ea3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	e229      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea3e:	4b61      	ldr	r3, [pc, #388]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0f0      	beq.n	800ea2c <HAL_RCC_OscConfig+0xe8>
 800ea4a:	e014      	b.n	800ea76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea4c:	f7fb ff6c 	bl	800a928 <HAL_GetTick>
 800ea50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea52:	e008      	b.n	800ea66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea54:	f7fb ff68 	bl	800a928 <HAL_GetTick>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	2b64      	cmp	r3, #100	; 0x64
 800ea60:	d901      	bls.n	800ea66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e215      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea66:	4b57      	ldr	r3, [pc, #348]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1f0      	bne.n	800ea54 <HAL_RCC_OscConfig+0x110>
 800ea72:	e000      	b.n	800ea76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f003 0302 	and.w	r3, r3, #2
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d069      	beq.n	800eb56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ea82:	4b50      	ldr	r3, [pc, #320]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f003 030c 	and.w	r3, r3, #12
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00b      	beq.n	800eaa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea8e:	4b4d      	ldr	r3, [pc, #308]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	f003 030c 	and.w	r3, r3, #12
 800ea96:	2b08      	cmp	r3, #8
 800ea98:	d11c      	bne.n	800ead4 <HAL_RCC_OscConfig+0x190>
 800ea9a:	4b4a      	ldr	r3, [pc, #296]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d116      	bne.n	800ead4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eaa6:	4b47      	ldr	r3, [pc, #284]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d005      	beq.n	800eabe <HAL_RCC_OscConfig+0x17a>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d001      	beq.n	800eabe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e1e9      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eabe:	4b41      	ldr	r3, [pc, #260]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	493d      	ldr	r1, [pc, #244]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eace:	4313      	orrs	r3, r2
 800ead0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ead2:	e040      	b.n	800eb56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d023      	beq.n	800eb24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eadc:	4b39      	ldr	r3, [pc, #228]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a38      	ldr	r2, [pc, #224]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eae2:	f043 0301 	orr.w	r3, r3, #1
 800eae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eae8:	f7fb ff1e 	bl	800a928 <HAL_GetTick>
 800eaec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eaee:	e008      	b.n	800eb02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eaf0:	f7fb ff1a 	bl	800a928 <HAL_GetTick>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d901      	bls.n	800eb02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800eafe:	2303      	movs	r3, #3
 800eb00:	e1c7      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb02:	4b30      	ldr	r3, [pc, #192]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0f0      	beq.n	800eaf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb0e:	4b2d      	ldr	r3, [pc, #180]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	691b      	ldr	r3, [r3, #16]
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	4929      	ldr	r1, [pc, #164]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	600b      	str	r3, [r1, #0]
 800eb22:	e018      	b.n	800eb56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eb24:	4b27      	ldr	r3, [pc, #156]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a26      	ldr	r2, [pc, #152]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb2a:	f023 0301 	bic.w	r3, r3, #1
 800eb2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb30:	f7fb fefa 	bl	800a928 <HAL_GetTick>
 800eb34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb36:	e008      	b.n	800eb4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb38:	f7fb fef6 	bl	800a928 <HAL_GetTick>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d901      	bls.n	800eb4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e1a3      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb4a:	4b1e      	ldr	r3, [pc, #120]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 0302 	and.w	r3, r3, #2
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1f0      	bne.n	800eb38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 0308 	and.w	r3, r3, #8
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d038      	beq.n	800ebd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d019      	beq.n	800eb9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb6a:	4b16      	ldr	r3, [pc, #88]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb6e:	4a15      	ldr	r2, [pc, #84]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb70:	f043 0301 	orr.w	r3, r3, #1
 800eb74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb76:	f7fb fed7 	bl	800a928 <HAL_GetTick>
 800eb7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb7c:	e008      	b.n	800eb90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb7e:	f7fb fed3 	bl	800a928 <HAL_GetTick>
 800eb82:	4602      	mov	r2, r0
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d901      	bls.n	800eb90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800eb8c:	2303      	movs	r3, #3
 800eb8e:	e180      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb90:	4b0c      	ldr	r3, [pc, #48]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eb92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb94:	f003 0302 	and.w	r3, r3, #2
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d0f0      	beq.n	800eb7e <HAL_RCC_OscConfig+0x23a>
 800eb9c:	e01a      	b.n	800ebd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb9e:	4b09      	ldr	r3, [pc, #36]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba2:	4a08      	ldr	r2, [pc, #32]	; (800ebc4 <HAL_RCC_OscConfig+0x280>)
 800eba4:	f023 0301 	bic.w	r3, r3, #1
 800eba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebaa:	f7fb febd 	bl	800a928 <HAL_GetTick>
 800ebae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ebb0:	e00a      	b.n	800ebc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ebb2:	f7fb feb9 	bl	800a928 <HAL_GetTick>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d903      	bls.n	800ebc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	e166      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
 800ebc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ebc8:	4b92      	ldr	r3, [pc, #584]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ebca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebcc:	f003 0302 	and.w	r3, r3, #2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1ee      	bne.n	800ebb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f003 0304 	and.w	r3, r3, #4
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 80a4 	beq.w	800ed2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ebe2:	4b8c      	ldr	r3, [pc, #560]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ebe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10d      	bne.n	800ec0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ebee:	4b89      	ldr	r3, [pc, #548]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ebf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebf2:	4a88      	ldr	r2, [pc, #544]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ebf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebf8:	6413      	str	r3, [r2, #64]	; 0x40
 800ebfa:	4b86      	ldr	r3, [pc, #536]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ebfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec02:	60bb      	str	r3, [r7, #8]
 800ec04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ec06:	2301      	movs	r3, #1
 800ec08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec0a:	4b83      	ldr	r3, [pc, #524]	; (800ee18 <HAL_RCC_OscConfig+0x4d4>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d118      	bne.n	800ec48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ec16:	4b80      	ldr	r3, [pc, #512]	; (800ee18 <HAL_RCC_OscConfig+0x4d4>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a7f      	ldr	r2, [pc, #508]	; (800ee18 <HAL_RCC_OscConfig+0x4d4>)
 800ec1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ec22:	f7fb fe81 	bl	800a928 <HAL_GetTick>
 800ec26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec28:	e008      	b.n	800ec3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec2a:	f7fb fe7d 	bl	800a928 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b64      	cmp	r3, #100	; 0x64
 800ec36:	d901      	bls.n	800ec3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e12a      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ec3c:	4b76      	ldr	r3, [pc, #472]	; (800ee18 <HAL_RCC_OscConfig+0x4d4>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d0f0      	beq.n	800ec2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d106      	bne.n	800ec5e <HAL_RCC_OscConfig+0x31a>
 800ec50:	4b70      	ldr	r3, [pc, #448]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec54:	4a6f      	ldr	r2, [pc, #444]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec56:	f043 0301 	orr.w	r3, r3, #1
 800ec5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ec5c:	e02d      	b.n	800ecba <HAL_RCC_OscConfig+0x376>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d10c      	bne.n	800ec80 <HAL_RCC_OscConfig+0x33c>
 800ec66:	4b6b      	ldr	r3, [pc, #428]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec6a:	4a6a      	ldr	r2, [pc, #424]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec6c:	f023 0301 	bic.w	r3, r3, #1
 800ec70:	6713      	str	r3, [r2, #112]	; 0x70
 800ec72:	4b68      	ldr	r3, [pc, #416]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec76:	4a67      	ldr	r2, [pc, #412]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec78:	f023 0304 	bic.w	r3, r3, #4
 800ec7c:	6713      	str	r3, [r2, #112]	; 0x70
 800ec7e:	e01c      	b.n	800ecba <HAL_RCC_OscConfig+0x376>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	2b05      	cmp	r3, #5
 800ec86:	d10c      	bne.n	800eca2 <HAL_RCC_OscConfig+0x35e>
 800ec88:	4b62      	ldr	r3, [pc, #392]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec8c:	4a61      	ldr	r2, [pc, #388]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec8e:	f043 0304 	orr.w	r3, r3, #4
 800ec92:	6713      	str	r3, [r2, #112]	; 0x70
 800ec94:	4b5f      	ldr	r3, [pc, #380]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec98:	4a5e      	ldr	r2, [pc, #376]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ec9a:	f043 0301 	orr.w	r3, r3, #1
 800ec9e:	6713      	str	r3, [r2, #112]	; 0x70
 800eca0:	e00b      	b.n	800ecba <HAL_RCC_OscConfig+0x376>
 800eca2:	4b5c      	ldr	r3, [pc, #368]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800eca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eca6:	4a5b      	ldr	r2, [pc, #364]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800eca8:	f023 0301 	bic.w	r3, r3, #1
 800ecac:	6713      	str	r3, [r2, #112]	; 0x70
 800ecae:	4b59      	ldr	r3, [pc, #356]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ecb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb2:	4a58      	ldr	r2, [pc, #352]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ecb4:	f023 0304 	bic.w	r3, r3, #4
 800ecb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d015      	beq.n	800ecee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecc2:	f7fb fe31 	bl	800a928 <HAL_GetTick>
 800ecc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ecc8:	e00a      	b.n	800ece0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecca:	f7fb fe2d 	bl	800a928 <HAL_GetTick>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d901      	bls.n	800ece0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ecdc:	2303      	movs	r3, #3
 800ecde:	e0d8      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ece0:	4b4c      	ldr	r3, [pc, #304]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ece2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ece4:	f003 0302 	and.w	r3, r3, #2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d0ee      	beq.n	800ecca <HAL_RCC_OscConfig+0x386>
 800ecec:	e014      	b.n	800ed18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecee:	f7fb fe1b 	bl	800a928 <HAL_GetTick>
 800ecf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ecf4:	e00a      	b.n	800ed0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecf6:	f7fb fe17 	bl	800a928 <HAL_GetTick>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d901      	bls.n	800ed0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ed08:	2303      	movs	r3, #3
 800ed0a:	e0c2      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ed0c:	4b41      	ldr	r3, [pc, #260]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d1ee      	bne.n	800ecf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ed18:	7dfb      	ldrb	r3, [r7, #23]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d105      	bne.n	800ed2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ed1e:	4b3d      	ldr	r3, [pc, #244]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed22:	4a3c      	ldr	r2, [pc, #240]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 80ae 	beq.w	800ee90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ed34:	4b37      	ldr	r3, [pc, #220]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f003 030c 	and.w	r3, r3, #12
 800ed3c:	2b08      	cmp	r3, #8
 800ed3e:	d06d      	beq.n	800ee1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	699b      	ldr	r3, [r3, #24]
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d14b      	bne.n	800ede0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed48:	4b32      	ldr	r3, [pc, #200]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a31      	ldr	r2, [pc, #196]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed54:	f7fb fde8 	bl	800a928 <HAL_GetTick>
 800ed58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed5a:	e008      	b.n	800ed6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed5c:	f7fb fde4 	bl	800a928 <HAL_GetTick>
 800ed60:	4602      	mov	r2, r0
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d901      	bls.n	800ed6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	e091      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed6e:	4b29      	ldr	r3, [pc, #164]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1f0      	bne.n	800ed5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	69da      	ldr	r2, [r3, #28]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a1b      	ldr	r3, [r3, #32]
 800ed82:	431a      	orrs	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	019b      	lsls	r3, r3, #6
 800ed8a:	431a      	orrs	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed90:	085b      	lsrs	r3, r3, #1
 800ed92:	3b01      	subs	r3, #1
 800ed94:	041b      	lsls	r3, r3, #16
 800ed96:	431a      	orrs	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9c:	061b      	lsls	r3, r3, #24
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda4:	071b      	lsls	r3, r3, #28
 800eda6:	491b      	ldr	r1, [pc, #108]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800eda8:	4313      	orrs	r3, r2
 800edaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800edac:	4b19      	ldr	r3, [pc, #100]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a18      	ldr	r2, [pc, #96]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800edb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800edb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edb8:	f7fb fdb6 	bl	800a928 <HAL_GetTick>
 800edbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800edbe:	e008      	b.n	800edd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edc0:	f7fb fdb2 	bl	800a928 <HAL_GetTick>
 800edc4:	4602      	mov	r2, r0
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d901      	bls.n	800edd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800edce:	2303      	movs	r3, #3
 800edd0:	e05f      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800edd2:	4b10      	ldr	r3, [pc, #64]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0f0      	beq.n	800edc0 <HAL_RCC_OscConfig+0x47c>
 800edde:	e057      	b.n	800ee90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ede0:	4b0c      	ldr	r3, [pc, #48]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a0b      	ldr	r2, [pc, #44]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ede6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800edea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edec:	f7fb fd9c 	bl	800a928 <HAL_GetTick>
 800edf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800edf2:	e008      	b.n	800ee06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edf4:	f7fb fd98 	bl	800a928 <HAL_GetTick>
 800edf8:	4602      	mov	r2, r0
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	d901      	bls.n	800ee06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e045      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee06:	4b03      	ldr	r3, [pc, #12]	; (800ee14 <HAL_RCC_OscConfig+0x4d0>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1f0      	bne.n	800edf4 <HAL_RCC_OscConfig+0x4b0>
 800ee12:	e03d      	b.n	800ee90 <HAL_RCC_OscConfig+0x54c>
 800ee14:	40023800 	.word	0x40023800
 800ee18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ee1c:	4b1f      	ldr	r3, [pc, #124]	; (800ee9c <HAL_RCC_OscConfig+0x558>)
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d030      	beq.n	800ee8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d129      	bne.n	800ee8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d122      	bne.n	800ee8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ee4c:	4013      	ands	r3, r2
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ee52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d119      	bne.n	800ee8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee62:	085b      	lsrs	r3, r3, #1
 800ee64:	3b01      	subs	r3, #1
 800ee66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d10f      	bne.n	800ee8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d107      	bne.n	800ee8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d001      	beq.n	800ee90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e000      	b.n	800ee92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	40023800 	.word	0x40023800

0800eea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e0d0      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800eeb8:	4b6a      	ldr	r3, [pc, #424]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f003 030f 	and.w	r3, r3, #15
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d910      	bls.n	800eee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eec6:	4b67      	ldr	r3, [pc, #412]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f023 020f 	bic.w	r2, r3, #15
 800eece:	4965      	ldr	r1, [pc, #404]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	4313      	orrs	r3, r2
 800eed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eed6:	4b63      	ldr	r3, [pc, #396]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f003 030f 	and.w	r3, r3, #15
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d001      	beq.n	800eee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	e0b8      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 0302 	and.w	r3, r3, #2
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d020      	beq.n	800ef36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f003 0304 	and.w	r3, r3, #4
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d005      	beq.n	800ef0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ef00:	4b59      	ldr	r3, [pc, #356]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	4a58      	ldr	r2, [pc, #352]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ef0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f003 0308 	and.w	r3, r3, #8
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d005      	beq.n	800ef24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ef18:	4b53      	ldr	r3, [pc, #332]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	4a52      	ldr	r2, [pc, #328]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ef22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef24:	4b50      	ldr	r3, [pc, #320]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	494d      	ldr	r1, [pc, #308]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef32:	4313      	orrs	r3, r2
 800ef34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d040      	beq.n	800efc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d107      	bne.n	800ef5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef4a:	4b47      	ldr	r3, [pc, #284]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d115      	bne.n	800ef82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e07f      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d107      	bne.n	800ef72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef62:	4b41      	ldr	r3, [pc, #260]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d109      	bne.n	800ef82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e073      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef72:	4b3d      	ldr	r3, [pc, #244]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d101      	bne.n	800ef82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e06b      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ef82:	4b39      	ldr	r3, [pc, #228]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	f023 0203 	bic.w	r2, r3, #3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	4936      	ldr	r1, [pc, #216]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800ef90:	4313      	orrs	r3, r2
 800ef92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef94:	f7fb fcc8 	bl	800a928 <HAL_GetTick>
 800ef98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef9a:	e00a      	b.n	800efb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef9c:	f7fb fcc4 	bl	800a928 <HAL_GetTick>
 800efa0:	4602      	mov	r2, r0
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800efaa:	4293      	cmp	r3, r2
 800efac:	d901      	bls.n	800efb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e053      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800efb2:	4b2d      	ldr	r3, [pc, #180]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	f003 020c 	and.w	r2, r3, #12
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d1eb      	bne.n	800ef9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800efc4:	4b27      	ldr	r3, [pc, #156]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f003 030f 	and.w	r3, r3, #15
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d210      	bcs.n	800eff4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efd2:	4b24      	ldr	r3, [pc, #144]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f023 020f 	bic.w	r2, r3, #15
 800efda:	4922      	ldr	r1, [pc, #136]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	4313      	orrs	r3, r2
 800efe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800efe2:	4b20      	ldr	r3, [pc, #128]	; (800f064 <HAL_RCC_ClockConfig+0x1c4>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f003 030f 	and.w	r3, r3, #15
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d001      	beq.n	800eff4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800eff0:	2301      	movs	r3, #1
 800eff2:	e032      	b.n	800f05a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f003 0304 	and.w	r3, r3, #4
 800effc:	2b00      	cmp	r3, #0
 800effe:	d008      	beq.n	800f012 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f000:	4b19      	ldr	r3, [pc, #100]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	4916      	ldr	r1, [pc, #88]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800f00e:	4313      	orrs	r3, r2
 800f010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f003 0308 	and.w	r3, r3, #8
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d009      	beq.n	800f032 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f01e:	4b12      	ldr	r3, [pc, #72]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	490e      	ldr	r1, [pc, #56]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800f02e:	4313      	orrs	r3, r2
 800f030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f032:	f000 f821 	bl	800f078 <HAL_RCC_GetSysClockFreq>
 800f036:	4602      	mov	r2, r0
 800f038:	4b0b      	ldr	r3, [pc, #44]	; (800f068 <HAL_RCC_ClockConfig+0x1c8>)
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	091b      	lsrs	r3, r3, #4
 800f03e:	f003 030f 	and.w	r3, r3, #15
 800f042:	490a      	ldr	r1, [pc, #40]	; (800f06c <HAL_RCC_ClockConfig+0x1cc>)
 800f044:	5ccb      	ldrb	r3, [r1, r3]
 800f046:	fa22 f303 	lsr.w	r3, r2, r3
 800f04a:	4a09      	ldr	r2, [pc, #36]	; (800f070 <HAL_RCC_ClockConfig+0x1d0>)
 800f04c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f04e:	4b09      	ldr	r3, [pc, #36]	; (800f074 <HAL_RCC_ClockConfig+0x1d4>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4618      	mov	r0, r3
 800f054:	f7f3 fd50 	bl	8002af8 <HAL_InitTick>

  return HAL_OK;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	40023c00 	.word	0x40023c00
 800f068:	40023800 	.word	0x40023800
 800f06c:	0802c2ec 	.word	0x0802c2ec
 800f070:	20000014 	.word	0x20000014
 800f074:	20000018 	.word	0x20000018

0800f078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f078:	b5b0      	push	{r4, r5, r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800f07e:	2100      	movs	r1, #0
 800f080:	6079      	str	r1, [r7, #4]
 800f082:	2100      	movs	r1, #0
 800f084:	60f9      	str	r1, [r7, #12]
 800f086:	2100      	movs	r1, #0
 800f088:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800f08a:	2100      	movs	r1, #0
 800f08c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f08e:	4952      	ldr	r1, [pc, #328]	; (800f1d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f090:	6889      	ldr	r1, [r1, #8]
 800f092:	f001 010c 	and.w	r1, r1, #12
 800f096:	2908      	cmp	r1, #8
 800f098:	d00d      	beq.n	800f0b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800f09a:	2908      	cmp	r1, #8
 800f09c:	f200 8094 	bhi.w	800f1c8 <HAL_RCC_GetSysClockFreq+0x150>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	d002      	beq.n	800f0aa <HAL_RCC_GetSysClockFreq+0x32>
 800f0a4:	2904      	cmp	r1, #4
 800f0a6:	d003      	beq.n	800f0b0 <HAL_RCC_GetSysClockFreq+0x38>
 800f0a8:	e08e      	b.n	800f1c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f0aa:	4b4c      	ldr	r3, [pc, #304]	; (800f1dc <HAL_RCC_GetSysClockFreq+0x164>)
 800f0ac:	60bb      	str	r3, [r7, #8]
      break;
 800f0ae:	e08e      	b.n	800f1ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f0b0:	4b4b      	ldr	r3, [pc, #300]	; (800f1e0 <HAL_RCC_GetSysClockFreq+0x168>)
 800f0b2:	60bb      	str	r3, [r7, #8]
      break;
 800f0b4:	e08b      	b.n	800f1ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f0b6:	4948      	ldr	r1, [pc, #288]	; (800f1d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f0b8:	6849      	ldr	r1, [r1, #4]
 800f0ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800f0be:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800f0c0:	4945      	ldr	r1, [pc, #276]	; (800f1d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f0c2:	6849      	ldr	r1, [r1, #4]
 800f0c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f0c8:	2900      	cmp	r1, #0
 800f0ca:	d024      	beq.n	800f116 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f0cc:	4942      	ldr	r1, [pc, #264]	; (800f1d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f0ce:	6849      	ldr	r1, [r1, #4]
 800f0d0:	0989      	lsrs	r1, r1, #6
 800f0d2:	4608      	mov	r0, r1
 800f0d4:	f04f 0100 	mov.w	r1, #0
 800f0d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800f0dc:	f04f 0500 	mov.w	r5, #0
 800f0e0:	ea00 0204 	and.w	r2, r0, r4
 800f0e4:	ea01 0305 	and.w	r3, r1, r5
 800f0e8:	493d      	ldr	r1, [pc, #244]	; (800f1e0 <HAL_RCC_GetSysClockFreq+0x168>)
 800f0ea:	fb01 f003 	mul.w	r0, r1, r3
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	fb01 f102 	mul.w	r1, r1, r2
 800f0f4:	1844      	adds	r4, r0, r1
 800f0f6:	493a      	ldr	r1, [pc, #232]	; (800f1e0 <HAL_RCC_GetSysClockFreq+0x168>)
 800f0f8:	fba2 0101 	umull	r0, r1, r2, r1
 800f0fc:	1863      	adds	r3, r4, r1
 800f0fe:	4619      	mov	r1, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	461a      	mov	r2, r3
 800f104:	f04f 0300 	mov.w	r3, #0
 800f108:	f7f1 faae 	bl	8000668 <__aeabi_uldivmod>
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	4613      	mov	r3, r2
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	e04a      	b.n	800f1ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f116:	4b30      	ldr	r3, [pc, #192]	; (800f1d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	099b      	lsrs	r3, r3, #6
 800f11c:	461a      	mov	r2, r3
 800f11e:	f04f 0300 	mov.w	r3, #0
 800f122:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f126:	f04f 0100 	mov.w	r1, #0
 800f12a:	ea02 0400 	and.w	r4, r2, r0
 800f12e:	ea03 0501 	and.w	r5, r3, r1
 800f132:	4620      	mov	r0, r4
 800f134:	4629      	mov	r1, r5
 800f136:	f04f 0200 	mov.w	r2, #0
 800f13a:	f04f 0300 	mov.w	r3, #0
 800f13e:	014b      	lsls	r3, r1, #5
 800f140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f144:	0142      	lsls	r2, r0, #5
 800f146:	4610      	mov	r0, r2
 800f148:	4619      	mov	r1, r3
 800f14a:	1b00      	subs	r0, r0, r4
 800f14c:	eb61 0105 	sbc.w	r1, r1, r5
 800f150:	f04f 0200 	mov.w	r2, #0
 800f154:	f04f 0300 	mov.w	r3, #0
 800f158:	018b      	lsls	r3, r1, #6
 800f15a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f15e:	0182      	lsls	r2, r0, #6
 800f160:	1a12      	subs	r2, r2, r0
 800f162:	eb63 0301 	sbc.w	r3, r3, r1
 800f166:	f04f 0000 	mov.w	r0, #0
 800f16a:	f04f 0100 	mov.w	r1, #0
 800f16e:	00d9      	lsls	r1, r3, #3
 800f170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f174:	00d0      	lsls	r0, r2, #3
 800f176:	4602      	mov	r2, r0
 800f178:	460b      	mov	r3, r1
 800f17a:	1912      	adds	r2, r2, r4
 800f17c:	eb45 0303 	adc.w	r3, r5, r3
 800f180:	f04f 0000 	mov.w	r0, #0
 800f184:	f04f 0100 	mov.w	r1, #0
 800f188:	0299      	lsls	r1, r3, #10
 800f18a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f18e:	0290      	lsls	r0, r2, #10
 800f190:	4602      	mov	r2, r0
 800f192:	460b      	mov	r3, r1
 800f194:	4610      	mov	r0, r2
 800f196:	4619      	mov	r1, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	461a      	mov	r2, r3
 800f19c:	f04f 0300 	mov.w	r3, #0
 800f1a0:	f7f1 fa62 	bl	8000668 <__aeabi_uldivmod>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800f1ac:	4b0a      	ldr	r3, [pc, #40]	; (800f1d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	0c1b      	lsrs	r3, r3, #16
 800f1b2:	f003 0303 	and.w	r3, r3, #3
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	005b      	lsls	r3, r3, #1
 800f1ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1c4:	60bb      	str	r3, [r7, #8]
      break;
 800f1c6:	e002      	b.n	800f1ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f1c8:	4b04      	ldr	r3, [pc, #16]	; (800f1dc <HAL_RCC_GetSysClockFreq+0x164>)
 800f1ca:	60bb      	str	r3, [r7, #8]
      break;
 800f1cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f1ce:	68bb      	ldr	r3, [r7, #8]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bdb0      	pop	{r4, r5, r7, pc}
 800f1d8:	40023800 	.word	0x40023800
 800f1dc:	00f42400 	.word	0x00f42400
 800f1e0:	017d7840 	.word	0x017d7840

0800f1e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f1e8:	4b03      	ldr	r3, [pc, #12]	; (800f1f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	20000014 	.word	0x20000014

0800f1fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f200:	f7ff fff0 	bl	800f1e4 <HAL_RCC_GetHCLKFreq>
 800f204:	4602      	mov	r2, r0
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <HAL_RCC_GetPCLK1Freq+0x20>)
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	0a9b      	lsrs	r3, r3, #10
 800f20c:	f003 0307 	and.w	r3, r3, #7
 800f210:	4903      	ldr	r1, [pc, #12]	; (800f220 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f212:	5ccb      	ldrb	r3, [r1, r3]
 800f214:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f218:	4618      	mov	r0, r3
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	40023800 	.word	0x40023800
 800f220:	0802c2fc 	.word	0x0802c2fc

0800f224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	220f      	movs	r2, #15
 800f232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f234:	4b12      	ldr	r3, [pc, #72]	; (800f280 <HAL_RCC_GetClockConfig+0x5c>)
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	f003 0203 	and.w	r2, r3, #3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f240:	4b0f      	ldr	r3, [pc, #60]	; (800f280 <HAL_RCC_GetClockConfig+0x5c>)
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f24c:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <HAL_RCC_GetClockConfig+0x5c>)
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800f258:	4b09      	ldr	r3, [pc, #36]	; (800f280 <HAL_RCC_GetClockConfig+0x5c>)
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	08db      	lsrs	r3, r3, #3
 800f25e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f266:	4b07      	ldr	r3, [pc, #28]	; (800f284 <HAL_RCC_GetClockConfig+0x60>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 020f 	and.w	r2, r3, #15
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	601a      	str	r2, [r3, #0]
}
 800f272:	bf00      	nop
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	40023800 	.word	0x40023800
 800f284:	40023c00 	.word	0x40023c00

0800f288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b088      	sub	sp, #32
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f290:	2300      	movs	r3, #0
 800f292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800f294:	2300      	movs	r3, #0
 800f296:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800f29c:	2300      	movs	r3, #0
 800f29e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 0301 	and.w	r3, r3, #1
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d012      	beq.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f2b0:	4b69      	ldr	r3, [pc, #420]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	4a68      	ldr	r2, [pc, #416]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f2ba:	6093      	str	r3, [r2, #8]
 800f2bc:	4b66      	ldr	r3, [pc, #408]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c4:	4964      	ldr	r1, [pc, #400]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d101      	bne.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d017      	beq.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f2e2:	4b5d      	ldr	r3, [pc, #372]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2f0:	4959      	ldr	r1, [pc, #356]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f300:	d101      	bne.n	800f306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800f302:	2301      	movs	r3, #1
 800f304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800f30e:	2301      	movs	r3, #1
 800f310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d017      	beq.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f31e:	4b4e      	ldr	r3, [pc, #312]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32c:	494a      	ldr	r1, [pc, #296]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f32e:	4313      	orrs	r3, r2
 800f330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f33c:	d101      	bne.n	800f342 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800f33e:	2301      	movs	r3, #1
 800f340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800f34a:	2301      	movs	r3, #1
 800f34c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800f35a:	2301      	movs	r3, #1
 800f35c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f003 0320 	and.w	r3, r3, #32
 800f366:	2b00      	cmp	r3, #0
 800f368:	f000 808b 	beq.w	800f482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f36c:	4b3a      	ldr	r3, [pc, #232]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f370:	4a39      	ldr	r2, [pc, #228]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f376:	6413      	str	r3, [r2, #64]	; 0x40
 800f378:	4b37      	ldr	r3, [pc, #220]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f380:	60bb      	str	r3, [r7, #8]
 800f382:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f384:	4b35      	ldr	r3, [pc, #212]	; (800f45c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a34      	ldr	r2, [pc, #208]	; (800f45c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f38a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f38e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f390:	f7fb faca 	bl	800a928 <HAL_GetTick>
 800f394:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f396:	e008      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f398:	f7fb fac6 	bl	800a928 <HAL_GetTick>
 800f39c:	4602      	mov	r2, r0
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	2b64      	cmp	r3, #100	; 0x64
 800f3a4:	d901      	bls.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800f3a6:	2303      	movs	r3, #3
 800f3a8:	e38f      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f3aa:	4b2c      	ldr	r3, [pc, #176]	; (800f45c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d0f0      	beq.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f3b6:	4b28      	ldr	r3, [pc, #160]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d035      	beq.n	800f432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d02e      	beq.n	800f432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f3d4:	4b20      	ldr	r3, [pc, #128]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f3de:	4b1e      	ldr	r3, [pc, #120]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3e2:	4a1d      	ldr	r2, [pc, #116]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f3ea:	4b1b      	ldr	r3, [pc, #108]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ee:	4a1a      	ldr	r2, [pc, #104]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f3f6:	4a18      	ldr	r2, [pc, #96]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f3fc:	4b16      	ldr	r3, [pc, #88]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	2b01      	cmp	r3, #1
 800f406:	d114      	bne.n	800f432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f408:	f7fb fa8e 	bl	800a928 <HAL_GetTick>
 800f40c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f40e:	e00a      	b.n	800f426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f410:	f7fb fa8a 	bl	800a928 <HAL_GetTick>
 800f414:	4602      	mov	r2, r0
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f41e:	4293      	cmp	r3, r2
 800f420:	d901      	bls.n	800f426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800f422:	2303      	movs	r3, #3
 800f424:	e351      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f426:	4b0c      	ldr	r3, [pc, #48]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d0ee      	beq.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f43e:	d111      	bne.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800f440:	4b05      	ldr	r3, [pc, #20]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f44c:	4b04      	ldr	r3, [pc, #16]	; (800f460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800f44e:	400b      	ands	r3, r1
 800f450:	4901      	ldr	r1, [pc, #4]	; (800f458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f452:	4313      	orrs	r3, r2
 800f454:	608b      	str	r3, [r1, #8]
 800f456:	e00b      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f458:	40023800 	.word	0x40023800
 800f45c:	40007000 	.word	0x40007000
 800f460:	0ffffcff 	.word	0x0ffffcff
 800f464:	4bb3      	ldr	r3, [pc, #716]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	4ab2      	ldr	r2, [pc, #712]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f46a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f46e:	6093      	str	r3, [r2, #8]
 800f470:	4bb0      	ldr	r3, [pc, #704]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f47c:	49ad      	ldr	r1, [pc, #692]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f47e:	4313      	orrs	r3, r2
 800f480:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f003 0310 	and.w	r3, r3, #16
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d010      	beq.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f48e:	4ba9      	ldr	r3, [pc, #676]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f494:	4aa7      	ldr	r2, [pc, #668]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f49a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f49e:	4ba5      	ldr	r3, [pc, #660]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f4a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a8:	49a2      	ldr	r1, [pc, #648]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00a      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f4bc:	4b9d      	ldr	r3, [pc, #628]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4ca:	499a      	ldr	r1, [pc, #616]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00a      	beq.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f4de:	4b95      	ldr	r3, [pc, #596]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4ec:	4991      	ldr	r1, [pc, #580]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00a      	beq.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f500:	4b8c      	ldr	r3, [pc, #560]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f50e:	4989      	ldr	r1, [pc, #548]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f510:	4313      	orrs	r3, r2
 800f512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00a      	beq.n	800f538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f522:	4b84      	ldr	r3, [pc, #528]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f530:	4980      	ldr	r1, [pc, #512]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f532:	4313      	orrs	r3, r2
 800f534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00a      	beq.n	800f55a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f544:	4b7b      	ldr	r3, [pc, #492]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f54a:	f023 0203 	bic.w	r2, r3, #3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f552:	4978      	ldr	r1, [pc, #480]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f554:	4313      	orrs	r3, r2
 800f556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00a      	beq.n	800f57c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f566:	4b73      	ldr	r3, [pc, #460]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f56c:	f023 020c 	bic.w	r2, r3, #12
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f574:	496f      	ldr	r1, [pc, #444]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f576:	4313      	orrs	r3, r2
 800f578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00a      	beq.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f588:	4b6a      	ldr	r3, [pc, #424]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f58e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f596:	4967      	ldr	r1, [pc, #412]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f598:	4313      	orrs	r3, r2
 800f59a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f5aa:	4b62      	ldr	r3, [pc, #392]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5b8:	495e      	ldr	r1, [pc, #376]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00a      	beq.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f5cc:	4b59      	ldr	r3, [pc, #356]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5da:	4956      	ldr	r1, [pc, #344]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00a      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f5ee:	4b51      	ldr	r3, [pc, #324]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5fc:	494d      	ldr	r1, [pc, #308]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f5fe:	4313      	orrs	r3, r2
 800f600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00a      	beq.n	800f626 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f610:	4b48      	ldr	r3, [pc, #288]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f616:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f61e:	4945      	ldr	r1, [pc, #276]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f620:	4313      	orrs	r3, r2
 800f622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00a      	beq.n	800f648 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f632:	4b40      	ldr	r3, [pc, #256]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f638:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f640:	493c      	ldr	r1, [pc, #240]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f642:	4313      	orrs	r3, r2
 800f644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00a      	beq.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f654:	4b37      	ldr	r3, [pc, #220]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f65a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f662:	4934      	ldr	r1, [pc, #208]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f664:	4313      	orrs	r3, r2
 800f666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f672:	2b00      	cmp	r3, #0
 800f674:	d011      	beq.n	800f69a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f676:	4b2f      	ldr	r3, [pc, #188]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f67c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f684:	492b      	ldr	r1, [pc, #172]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f686:	4313      	orrs	r3, r2
 800f688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f694:	d101      	bne.n	800f69a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800f696:	2301      	movs	r3, #1
 800f698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f003 0308 	and.w	r3, r3, #8
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d00a      	beq.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f6b6:	4b1f      	ldr	r3, [pc, #124]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6c4:	491b      	ldr	r1, [pc, #108]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00b      	beq.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f6d8:	4b16      	ldr	r3, [pc, #88]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6e8:	4912      	ldr	r1, [pc, #72]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00b      	beq.n	800f714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f6fc:	4b0d      	ldr	r3, [pc, #52]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f702:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f70c:	4909      	ldr	r1, [pc, #36]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f70e:	4313      	orrs	r3, r2
 800f710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00f      	beq.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f720:	4b04      	ldr	r3, [pc, #16]	; (800f734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f730:	e002      	b.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800f732:	bf00      	nop
 800f734:	40023800 	.word	0x40023800
 800f738:	4986      	ldr	r1, [pc, #536]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f73a:	4313      	orrs	r3, r2
 800f73c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00b      	beq.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f74c:	4b81      	ldr	r3, [pc, #516]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f752:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f75c:	497d      	ldr	r1, [pc, #500]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f75e:	4313      	orrs	r3, r2
 800f760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d006      	beq.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f772:	2b00      	cmp	r3, #0
 800f774:	f000 80d6 	beq.w	800f924 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f778:	4b76      	ldr	r3, [pc, #472]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a75      	ldr	r2, [pc, #468]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f77e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f784:	f7fb f8d0 	bl	800a928 <HAL_GetTick>
 800f788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f78a:	e008      	b.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f78c:	f7fb f8cc 	bl	800a928 <HAL_GetTick>
 800f790:	4602      	mov	r2, r0
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	2b64      	cmp	r3, #100	; 0x64
 800f798:	d901      	bls.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f79a:	2303      	movs	r3, #3
 800f79c:	e195      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f79e:	4b6d      	ldr	r3, [pc, #436]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1f0      	bne.n	800f78c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f003 0301 	and.w	r3, r3, #1
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d021      	beq.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d11d      	bne.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f7be:	4b65      	ldr	r3, [pc, #404]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7c4:	0c1b      	lsrs	r3, r3, #16
 800f7c6:	f003 0303 	and.w	r3, r3, #3
 800f7ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f7cc:	4b61      	ldr	r3, [pc, #388]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7d2:	0e1b      	lsrs	r3, r3, #24
 800f7d4:	f003 030f 	and.w	r3, r3, #15
 800f7d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	019a      	lsls	r2, r3, #6
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	041b      	lsls	r3, r3, #16
 800f7e4:	431a      	orrs	r2, r3
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	061b      	lsls	r3, r3, #24
 800f7ea:	431a      	orrs	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	071b      	lsls	r3, r3, #28
 800f7f2:	4958      	ldr	r1, [pc, #352]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f802:	2b00      	cmp	r3, #0
 800f804:	d004      	beq.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f80a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f80e:	d00a      	beq.n	800f826 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d02e      	beq.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f824:	d129      	bne.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f826:	4b4b      	ldr	r3, [pc, #300]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f82c:	0c1b      	lsrs	r3, r3, #16
 800f82e:	f003 0303 	and.w	r3, r3, #3
 800f832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f834:	4b47      	ldr	r3, [pc, #284]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f83a:	0f1b      	lsrs	r3, r3, #28
 800f83c:	f003 0307 	and.w	r3, r3, #7
 800f840:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	019a      	lsls	r2, r3, #6
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	041b      	lsls	r3, r3, #16
 800f84c:	431a      	orrs	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	061b      	lsls	r3, r3, #24
 800f854:	431a      	orrs	r2, r3
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	071b      	lsls	r3, r3, #28
 800f85a:	493e      	ldr	r1, [pc, #248]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f85c:	4313      	orrs	r3, r2
 800f85e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f862:	4b3c      	ldr	r3, [pc, #240]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f868:	f023 021f 	bic.w	r2, r3, #31
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f870:	3b01      	subs	r3, #1
 800f872:	4938      	ldr	r1, [pc, #224]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f874:	4313      	orrs	r3, r2
 800f876:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f882:	2b00      	cmp	r3, #0
 800f884:	d01d      	beq.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f886:	4b33      	ldr	r3, [pc, #204]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f88c:	0e1b      	lsrs	r3, r3, #24
 800f88e:	f003 030f 	and.w	r3, r3, #15
 800f892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f894:	4b2f      	ldr	r3, [pc, #188]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f89a:	0f1b      	lsrs	r3, r3, #28
 800f89c:	f003 0307 	and.w	r3, r3, #7
 800f8a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	019a      	lsls	r2, r3, #6
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	041b      	lsls	r3, r3, #16
 800f8ae:	431a      	orrs	r2, r3
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	061b      	lsls	r3, r3, #24
 800f8b4:	431a      	orrs	r2, r3
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	071b      	lsls	r3, r3, #28
 800f8ba:	4926      	ldr	r1, [pc, #152]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d011      	beq.n	800f8f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	019a      	lsls	r2, r3, #6
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	691b      	ldr	r3, [r3, #16]
 800f8d8:	041b      	lsls	r3, r3, #16
 800f8da:	431a      	orrs	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	061b      	lsls	r3, r3, #24
 800f8e2:	431a      	orrs	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	071b      	lsls	r3, r3, #28
 800f8ea:	491a      	ldr	r1, [pc, #104]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f8f2:	4b18      	ldr	r3, [pc, #96]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a17      	ldr	r2, [pc, #92]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f8f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f8fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f8fe:	f7fb f813 	bl	800a928 <HAL_GetTick>
 800f902:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f904:	e008      	b.n	800f918 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f906:	f7fb f80f 	bl	800a928 <HAL_GetTick>
 800f90a:	4602      	mov	r2, r0
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	2b64      	cmp	r3, #100	; 0x64
 800f912:	d901      	bls.n	800f918 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f914:	2303      	movs	r3, #3
 800f916:	e0d8      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f918:	4b0e      	ldr	r3, [pc, #56]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f920:	2b00      	cmp	r3, #0
 800f922:	d0f0      	beq.n	800f906 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	2b01      	cmp	r3, #1
 800f928:	f040 80ce 	bne.w	800fac8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f92c:	4b09      	ldr	r3, [pc, #36]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a08      	ldr	r2, [pc, #32]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f938:	f7fa fff6 	bl	800a928 <HAL_GetTick>
 800f93c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f93e:	e00b      	b.n	800f958 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f940:	f7fa fff2 	bl	800a928 <HAL_GetTick>
 800f944:	4602      	mov	r2, r0
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	2b64      	cmp	r3, #100	; 0x64
 800f94c:	d904      	bls.n	800f958 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f94e:	2303      	movs	r3, #3
 800f950:	e0bb      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x842>
 800f952:	bf00      	nop
 800f954:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f958:	4b5e      	ldr	r3, [pc, #376]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f964:	d0ec      	beq.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d003      	beq.n	800f97a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f976:	2b00      	cmp	r3, #0
 800f978:	d009      	beq.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f982:	2b00      	cmp	r3, #0
 800f984:	d02e      	beq.n	800f9e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d12a      	bne.n	800f9e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f98e:	4b51      	ldr	r3, [pc, #324]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f994:	0c1b      	lsrs	r3, r3, #16
 800f996:	f003 0303 	and.w	r3, r3, #3
 800f99a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f99c:	4b4d      	ldr	r3, [pc, #308]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9a2:	0f1b      	lsrs	r3, r3, #28
 800f9a4:	f003 0307 	and.w	r3, r3, #7
 800f9a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	695b      	ldr	r3, [r3, #20]
 800f9ae:	019a      	lsls	r2, r3, #6
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	041b      	lsls	r3, r3, #16
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	699b      	ldr	r3, [r3, #24]
 800f9ba:	061b      	lsls	r3, r3, #24
 800f9bc:	431a      	orrs	r2, r3
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	071b      	lsls	r3, r3, #28
 800f9c2:	4944      	ldr	r1, [pc, #272]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f9ca:	4b42      	ldr	r3, [pc, #264]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	021b      	lsls	r3, r3, #8
 800f9dc:	493d      	ldr	r1, [pc, #244]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d022      	beq.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f9f8:	d11d      	bne.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f9fa:	4b36      	ldr	r3, [pc, #216]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa00:	0e1b      	lsrs	r3, r3, #24
 800fa02:	f003 030f 	and.w	r3, r3, #15
 800fa06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800fa08:	4b32      	ldr	r3, [pc, #200]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa0e:	0f1b      	lsrs	r3, r3, #28
 800fa10:	f003 0307 	and.w	r3, r3, #7
 800fa14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	695b      	ldr	r3, [r3, #20]
 800fa1a:	019a      	lsls	r2, r3, #6
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6a1b      	ldr	r3, [r3, #32]
 800fa20:	041b      	lsls	r3, r3, #16
 800fa22:	431a      	orrs	r2, r3
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	061b      	lsls	r3, r3, #24
 800fa28:	431a      	orrs	r2, r3
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	071b      	lsls	r3, r3, #28
 800fa2e:	4929      	ldr	r1, [pc, #164]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa30:	4313      	orrs	r3, r2
 800fa32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f003 0308 	and.w	r3, r3, #8
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d028      	beq.n	800fa94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800fa42:	4b24      	ldr	r3, [pc, #144]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa48:	0e1b      	lsrs	r3, r3, #24
 800fa4a:	f003 030f 	and.w	r3, r3, #15
 800fa4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800fa50:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa56:	0c1b      	lsrs	r3, r3, #16
 800fa58:	f003 0303 	and.w	r3, r3, #3
 800fa5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	695b      	ldr	r3, [r3, #20]
 800fa62:	019a      	lsls	r2, r3, #6
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	041b      	lsls	r3, r3, #16
 800fa68:	431a      	orrs	r2, r3
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	061b      	lsls	r3, r3, #24
 800fa6e:	431a      	orrs	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	071b      	lsls	r3, r3, #28
 800fa76:	4917      	ldr	r1, [pc, #92]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800fa7e:	4b15      	ldr	r3, [pc, #84]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8c:	4911      	ldr	r1, [pc, #68]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800fa94:	4b0f      	ldr	r3, [pc, #60]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a0e      	ldr	r2, [pc, #56]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fa9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800faa0:	f7fa ff42 	bl	800a928 <HAL_GetTick>
 800faa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800faa6:	e008      	b.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800faa8:	f7fa ff3e 	bl	800a928 <HAL_GetTick>
 800faac:	4602      	mov	r2, r0
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	2b64      	cmp	r3, #100	; 0x64
 800fab4:	d901      	bls.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fab6:	2303      	movs	r3, #3
 800fab8:	e007      	b.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800faba:	4b06      	ldr	r3, [pc, #24]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fac6:	d1ef      	bne.n	800faa8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3720      	adds	r7, #32
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	40023800 	.word	0x40023800

0800fad8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d101      	bne.n	800faec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800fae8:	2301      	movs	r3, #1
 800faea:	e025      	b.n	800fb38 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d106      	bne.n	800fb06 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7f2 f9e3 	bl	8001ecc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2202      	movs	r2, #2
 800fb0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	3304      	adds	r3, #4
 800fb16:	4619      	mov	r1, r3
 800fb18:	4610      	mov	r0, r2
 800fb1a:	f001 fdd1 	bl	80116c0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6818      	ldr	r0, [r3, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	461a      	mov	r2, r3
 800fb28:	6839      	ldr	r1, [r7, #0]
 800fb2a:	f001 fe3b 	bl	80117a4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	2b02      	cmp	r3, #2
 800fb56:	d101      	bne.n	800fb5c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800fb58:	2302      	movs	r3, #2
 800fb5a:	e018      	b.n	800fb8e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2202      	movs	r2, #2
 800fb60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	68b9      	ldr	r1, [r7, #8]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f001 fe99 	bl	80118a4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d104      	bne.n	800fb84 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2205      	movs	r2, #5
 800fb7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800fb82:	e003      	b.n	800fb8c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2201      	movs	r2, #1
 800fb88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	2b02      	cmp	r3, #2
 800fbaa:	d101      	bne.n	800fbb0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800fbac:	2302      	movs	r3, #2
 800fbae:	e00e      	b.n	800fbce <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f001 fe94 	bl	80118ec <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800fbcc:	2300      	movs	r3, #0
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b082      	sub	sp, #8
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d101      	bne.n	800fbe8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e049      	b.n	800fc7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d106      	bne.n	800fc02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7f3 f9eb 	bl	8002fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2202      	movs	r2, #2
 800fc06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	3304      	adds	r3, #4
 800fc12:	4619      	mov	r1, r3
 800fc14:	4610      	mov	r0, r2
 800fc16:	f001 f8e9 	bl	8010dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2201      	movs	r2, #1
 800fc26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2201      	movs	r2, #1
 800fc66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d001      	beq.n	800fc9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e054      	b.n	800fd46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2202      	movs	r2, #2
 800fca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	68da      	ldr	r2, [r3, #12]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f042 0201 	orr.w	r2, r2, #1
 800fcb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a26      	ldr	r2, [pc, #152]	; (800fd54 <HAL_TIM_Base_Start_IT+0xd0>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d022      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcc6:	d01d      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a22      	ldr	r2, [pc, #136]	; (800fd58 <HAL_TIM_Base_Start_IT+0xd4>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d018      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a21      	ldr	r2, [pc, #132]	; (800fd5c <HAL_TIM_Base_Start_IT+0xd8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d013      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a1f      	ldr	r2, [pc, #124]	; (800fd60 <HAL_TIM_Base_Start_IT+0xdc>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d00e      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a1e      	ldr	r2, [pc, #120]	; (800fd64 <HAL_TIM_Base_Start_IT+0xe0>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d009      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a1c      	ldr	r2, [pc, #112]	; (800fd68 <HAL_TIM_Base_Start_IT+0xe4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d004      	beq.n	800fd04 <HAL_TIM_Base_Start_IT+0x80>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a1b      	ldr	r2, [pc, #108]	; (800fd6c <HAL_TIM_Base_Start_IT+0xe8>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d115      	bne.n	800fd30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	689a      	ldr	r2, [r3, #8]
 800fd0a:	4b19      	ldr	r3, [pc, #100]	; (800fd70 <HAL_TIM_Base_Start_IT+0xec>)
 800fd0c:	4013      	ands	r3, r2
 800fd0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b06      	cmp	r3, #6
 800fd14:	d015      	beq.n	800fd42 <HAL_TIM_Base_Start_IT+0xbe>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd1c:	d011      	beq.n	800fd42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f042 0201 	orr.w	r2, r2, #1
 800fd2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd2e:	e008      	b.n	800fd42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f042 0201 	orr.w	r2, r2, #1
 800fd3e:	601a      	str	r2, [r3, #0]
 800fd40:	e000      	b.n	800fd44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3714      	adds	r7, #20
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	40010000 	.word	0x40010000
 800fd58:	40000400 	.word	0x40000400
 800fd5c:	40000800 	.word	0x40000800
 800fd60:	40000c00 	.word	0x40000c00
 800fd64:	40010400 	.word	0x40010400
 800fd68:	40014000 	.word	0x40014000
 800fd6c:	40001800 	.word	0x40001800
 800fd70:	00010007 	.word	0x00010007

0800fd74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d101      	bne.n	800fd86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fd82:	2301      	movs	r3, #1
 800fd84:	e049      	b.n	800fe1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d106      	bne.n	800fda0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f841 	bl	800fe22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2202      	movs	r2, #2
 800fda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	3304      	adds	r3, #4
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	f001 f81a 	bl	8010dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2201      	movs	r2, #1
 800fddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2201      	movs	r2, #1
 800fde4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2201      	movs	r2, #1
 800fdec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2201      	movs	r2, #1
 800fe04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2201      	movs	r2, #1
 800fe14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fe22:	b480      	push	{r7}
 800fe24:	b083      	sub	sp, #12
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fe2a:	bf00      	nop
 800fe2c:	370c      	adds	r7, #12
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
	...

0800fe38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d109      	bne.n	800fe5c <HAL_TIM_PWM_Start+0x24>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	bf14      	ite	ne
 800fe54:	2301      	movne	r3, #1
 800fe56:	2300      	moveq	r3, #0
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	e03c      	b.n	800fed6 <HAL_TIM_PWM_Start+0x9e>
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	2b04      	cmp	r3, #4
 800fe60:	d109      	bne.n	800fe76 <HAL_TIM_PWM_Start+0x3e>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	bf14      	ite	ne
 800fe6e:	2301      	movne	r3, #1
 800fe70:	2300      	moveq	r3, #0
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	e02f      	b.n	800fed6 <HAL_TIM_PWM_Start+0x9e>
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	2b08      	cmp	r3, #8
 800fe7a:	d109      	bne.n	800fe90 <HAL_TIM_PWM_Start+0x58>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	bf14      	ite	ne
 800fe88:	2301      	movne	r3, #1
 800fe8a:	2300      	moveq	r3, #0
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	e022      	b.n	800fed6 <HAL_TIM_PWM_Start+0x9e>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	2b0c      	cmp	r3, #12
 800fe94:	d109      	bne.n	800feaa <HAL_TIM_PWM_Start+0x72>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	bf14      	ite	ne
 800fea2:	2301      	movne	r3, #1
 800fea4:	2300      	moveq	r3, #0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	e015      	b.n	800fed6 <HAL_TIM_PWM_Start+0x9e>
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b10      	cmp	r3, #16
 800feae:	d109      	bne.n	800fec4 <HAL_TIM_PWM_Start+0x8c>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b01      	cmp	r3, #1
 800feba:	bf14      	ite	ne
 800febc:	2301      	movne	r3, #1
 800febe:	2300      	moveq	r3, #0
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	e008      	b.n	800fed6 <HAL_TIM_PWM_Start+0x9e>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b01      	cmp	r3, #1
 800fece:	bf14      	ite	ne
 800fed0:	2301      	movne	r3, #1
 800fed2:	2300      	moveq	r3, #0
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d001      	beq.n	800fede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	e092      	b.n	8010004 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d104      	bne.n	800feee <HAL_TIM_PWM_Start+0xb6>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2202      	movs	r2, #2
 800fee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800feec:	e023      	b.n	800ff36 <HAL_TIM_PWM_Start+0xfe>
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	2b04      	cmp	r3, #4
 800fef2:	d104      	bne.n	800fefe <HAL_TIM_PWM_Start+0xc6>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2202      	movs	r2, #2
 800fef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fefc:	e01b      	b.n	800ff36 <HAL_TIM_PWM_Start+0xfe>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	2b08      	cmp	r3, #8
 800ff02:	d104      	bne.n	800ff0e <HAL_TIM_PWM_Start+0xd6>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2202      	movs	r2, #2
 800ff08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff0c:	e013      	b.n	800ff36 <HAL_TIM_PWM_Start+0xfe>
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	2b0c      	cmp	r3, #12
 800ff12:	d104      	bne.n	800ff1e <HAL_TIM_PWM_Start+0xe6>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2202      	movs	r2, #2
 800ff18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff1c:	e00b      	b.n	800ff36 <HAL_TIM_PWM_Start+0xfe>
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	2b10      	cmp	r3, #16
 800ff22:	d104      	bne.n	800ff2e <HAL_TIM_PWM_Start+0xf6>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2202      	movs	r2, #2
 800ff28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ff2c:	e003      	b.n	800ff36 <HAL_TIM_PWM_Start+0xfe>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2202      	movs	r2, #2
 800ff32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	6839      	ldr	r1, [r7, #0]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f001 faec 	bl	801151c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a30      	ldr	r2, [pc, #192]	; (801000c <HAL_TIM_PWM_Start+0x1d4>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d004      	beq.n	800ff58 <HAL_TIM_PWM_Start+0x120>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a2f      	ldr	r2, [pc, #188]	; (8010010 <HAL_TIM_PWM_Start+0x1d8>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d101      	bne.n	800ff5c <HAL_TIM_PWM_Start+0x124>
 800ff58:	2301      	movs	r3, #1
 800ff5a:	e000      	b.n	800ff5e <HAL_TIM_PWM_Start+0x126>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d007      	beq.n	800ff72 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a25      	ldr	r2, [pc, #148]	; (801000c <HAL_TIM_PWM_Start+0x1d4>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d022      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff84:	d01d      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a22      	ldr	r2, [pc, #136]	; (8010014 <HAL_TIM_PWM_Start+0x1dc>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d018      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a20      	ldr	r2, [pc, #128]	; (8010018 <HAL_TIM_PWM_Start+0x1e0>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d013      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a1f      	ldr	r2, [pc, #124]	; (801001c <HAL_TIM_PWM_Start+0x1e4>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d00e      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a19      	ldr	r2, [pc, #100]	; (8010010 <HAL_TIM_PWM_Start+0x1d8>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d009      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a1b      	ldr	r2, [pc, #108]	; (8010020 <HAL_TIM_PWM_Start+0x1e8>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d004      	beq.n	800ffc2 <HAL_TIM_PWM_Start+0x18a>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a19      	ldr	r2, [pc, #100]	; (8010024 <HAL_TIM_PWM_Start+0x1ec>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d115      	bne.n	800ffee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	689a      	ldr	r2, [r3, #8]
 800ffc8:	4b17      	ldr	r3, [pc, #92]	; (8010028 <HAL_TIM_PWM_Start+0x1f0>)
 800ffca:	4013      	ands	r3, r2
 800ffcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2b06      	cmp	r3, #6
 800ffd2:	d015      	beq.n	8010000 <HAL_TIM_PWM_Start+0x1c8>
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffda:	d011      	beq.n	8010000 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f042 0201 	orr.w	r2, r2, #1
 800ffea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffec:	e008      	b.n	8010000 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f042 0201 	orr.w	r2, r2, #1
 800fffc:	601a      	str	r2, [r3, #0]
 800fffe:	e000      	b.n	8010002 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010000:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	40010000 	.word	0x40010000
 8010010:	40010400 	.word	0x40010400
 8010014:	40000400 	.word	0x40000400
 8010018:	40000800 	.word	0x40000800
 801001c:	40000c00 	.word	0x40000c00
 8010020:	40014000 	.word	0x40014000
 8010024:	40001800 	.word	0x40001800
 8010028:	00010007 	.word	0x00010007

0801002c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d109      	bne.n	8010054 <HAL_TIM_PWM_Start_DMA+0x28>
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010046:	b2db      	uxtb	r3, r3
 8010048:	2b02      	cmp	r3, #2
 801004a:	bf0c      	ite	eq
 801004c:	2301      	moveq	r3, #1
 801004e:	2300      	movne	r3, #0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	e03c      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0xa2>
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2b04      	cmp	r3, #4
 8010058:	d109      	bne.n	801006e <HAL_TIM_PWM_Start_DMA+0x42>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010060:	b2db      	uxtb	r3, r3
 8010062:	2b02      	cmp	r3, #2
 8010064:	bf0c      	ite	eq
 8010066:	2301      	moveq	r3, #1
 8010068:	2300      	movne	r3, #0
 801006a:	b2db      	uxtb	r3, r3
 801006c:	e02f      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0xa2>
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	2b08      	cmp	r3, #8
 8010072:	d109      	bne.n	8010088 <HAL_TIM_PWM_Start_DMA+0x5c>
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b02      	cmp	r3, #2
 801007e:	bf0c      	ite	eq
 8010080:	2301      	moveq	r3, #1
 8010082:	2300      	movne	r3, #0
 8010084:	b2db      	uxtb	r3, r3
 8010086:	e022      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0xa2>
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	2b0c      	cmp	r3, #12
 801008c:	d109      	bne.n	80100a2 <HAL_TIM_PWM_Start_DMA+0x76>
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010094:	b2db      	uxtb	r3, r3
 8010096:	2b02      	cmp	r3, #2
 8010098:	bf0c      	ite	eq
 801009a:	2301      	moveq	r3, #1
 801009c:	2300      	movne	r3, #0
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	e015      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0xa2>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	2b10      	cmp	r3, #16
 80100a6:	d109      	bne.n	80100bc <HAL_TIM_PWM_Start_DMA+0x90>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b02      	cmp	r3, #2
 80100b2:	bf0c      	ite	eq
 80100b4:	2301      	moveq	r3, #1
 80100b6:	2300      	movne	r3, #0
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	e008      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0xa2>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	bf0c      	ite	eq
 80100c8:	2301      	moveq	r3, #1
 80100ca:	2300      	movne	r3, #0
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80100d2:	2302      	movs	r3, #2
 80100d4:	e19c      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d109      	bne.n	80100f0 <HAL_TIM_PWM_Start_DMA+0xc4>
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	bf0c      	ite	eq
 80100e8:	2301      	moveq	r3, #1
 80100ea:	2300      	movne	r3, #0
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	e03c      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x13e>
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d109      	bne.n	801010a <HAL_TIM_PWM_Start_DMA+0xde>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b01      	cmp	r3, #1
 8010100:	bf0c      	ite	eq
 8010102:	2301      	moveq	r3, #1
 8010104:	2300      	movne	r3, #0
 8010106:	b2db      	uxtb	r3, r3
 8010108:	e02f      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x13e>
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	2b08      	cmp	r3, #8
 801010e:	d109      	bne.n	8010124 <HAL_TIM_PWM_Start_DMA+0xf8>
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010116:	b2db      	uxtb	r3, r3
 8010118:	2b01      	cmp	r3, #1
 801011a:	bf0c      	ite	eq
 801011c:	2301      	moveq	r3, #1
 801011e:	2300      	movne	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	e022      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x13e>
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	2b0c      	cmp	r3, #12
 8010128:	d109      	bne.n	801013e <HAL_TIM_PWM_Start_DMA+0x112>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b01      	cmp	r3, #1
 8010134:	bf0c      	ite	eq
 8010136:	2301      	moveq	r3, #1
 8010138:	2300      	movne	r3, #0
 801013a:	b2db      	uxtb	r3, r3
 801013c:	e015      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x13e>
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	2b10      	cmp	r3, #16
 8010142:	d109      	bne.n	8010158 <HAL_TIM_PWM_Start_DMA+0x12c>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801014a:	b2db      	uxtb	r3, r3
 801014c:	2b01      	cmp	r3, #1
 801014e:	bf0c      	ite	eq
 8010150:	2301      	moveq	r3, #1
 8010152:	2300      	movne	r3, #0
 8010154:	b2db      	uxtb	r3, r3
 8010156:	e008      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x13e>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801015e:	b2db      	uxtb	r3, r3
 8010160:	2b01      	cmp	r3, #1
 8010162:	bf0c      	ite	eq
 8010164:	2301      	moveq	r3, #1
 8010166:	2300      	movne	r3, #0
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d034      	beq.n	80101d8 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d104      	bne.n	801017e <HAL_TIM_PWM_Start_DMA+0x152>
 8010174:	887b      	ldrh	r3, [r7, #2]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	e148      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d104      	bne.n	801018e <HAL_TIM_PWM_Start_DMA+0x162>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2202      	movs	r2, #2
 8010188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801018c:	e026      	b.n	80101dc <HAL_TIM_PWM_Start_DMA+0x1b0>
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	2b04      	cmp	r3, #4
 8010192:	d104      	bne.n	801019e <HAL_TIM_PWM_Start_DMA+0x172>
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2202      	movs	r2, #2
 8010198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801019c:	e01e      	b.n	80101dc <HAL_TIM_PWM_Start_DMA+0x1b0>
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	2b08      	cmp	r3, #8
 80101a2:	d104      	bne.n	80101ae <HAL_TIM_PWM_Start_DMA+0x182>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2202      	movs	r2, #2
 80101a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101ac:	e016      	b.n	80101dc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	2b0c      	cmp	r3, #12
 80101b2:	d104      	bne.n	80101be <HAL_TIM_PWM_Start_DMA+0x192>
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2202      	movs	r2, #2
 80101b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101bc:	e00e      	b.n	80101dc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	2b10      	cmp	r3, #16
 80101c2:	d104      	bne.n	80101ce <HAL_TIM_PWM_Start_DMA+0x1a2>
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2202      	movs	r2, #2
 80101c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80101cc:	e006      	b.n	80101dc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2202      	movs	r2, #2
 80101d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80101d6:	e001      	b.n	80101dc <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 80101d8:	2301      	movs	r3, #1
 80101da:	e119      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2b0c      	cmp	r3, #12
 80101e0:	f200 80ae 	bhi.w	8010340 <HAL_TIM_PWM_Start_DMA+0x314>
 80101e4:	a201      	add	r2, pc, #4	; (adr r2, 80101ec <HAL_TIM_PWM_Start_DMA+0x1c0>)
 80101e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ea:	bf00      	nop
 80101ec:	08010221 	.word	0x08010221
 80101f0:	08010341 	.word	0x08010341
 80101f4:	08010341 	.word	0x08010341
 80101f8:	08010341 	.word	0x08010341
 80101fc:	08010269 	.word	0x08010269
 8010200:	08010341 	.word	0x08010341
 8010204:	08010341 	.word	0x08010341
 8010208:	08010341 	.word	0x08010341
 801020c:	080102b1 	.word	0x080102b1
 8010210:	08010341 	.word	0x08010341
 8010214:	08010341 	.word	0x08010341
 8010218:	08010341 	.word	0x08010341
 801021c:	080102f9 	.word	0x080102f9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010224:	4a7c      	ldr	r2, [pc, #496]	; (8010418 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8010226:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022c:	4a7b      	ldr	r2, [pc, #492]	; (801041c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 801022e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010234:	4a7a      	ldr	r2, [pc, #488]	; (8010420 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8010236:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801023c:	6879      	ldr	r1, [r7, #4]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3334      	adds	r3, #52	; 0x34
 8010244:	461a      	mov	r2, r3
 8010246:	887b      	ldrh	r3, [r7, #2]
 8010248:	f7fc f8a6 	bl	800c398 <HAL_DMA_Start_IT>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d001      	beq.n	8010256 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8010252:	2301      	movs	r3, #1
 8010254:	e0dc      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	68da      	ldr	r2, [r3, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010264:	60da      	str	r2, [r3, #12]
      break;
 8010266:	e06c      	b.n	8010342 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801026c:	4a6a      	ldr	r2, [pc, #424]	; (8010418 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 801026e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010274:	4a69      	ldr	r2, [pc, #420]	; (801041c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8010276:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801027c:	4a68      	ldr	r2, [pc, #416]	; (8010420 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 801027e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010284:	6879      	ldr	r1, [r7, #4]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	3338      	adds	r3, #56	; 0x38
 801028c:	461a      	mov	r2, r3
 801028e:	887b      	ldrh	r3, [r7, #2]
 8010290:	f7fc f882 	bl	800c398 <HAL_DMA_Start_IT>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d001      	beq.n	801029e <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 801029a:	2301      	movs	r3, #1
 801029c:	e0b8      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	68da      	ldr	r2, [r3, #12]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80102ac:	60da      	str	r2, [r3, #12]
      break;
 80102ae:	e048      	b.n	8010342 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b4:	4a58      	ldr	r2, [pc, #352]	; (8010418 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80102b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102bc:	4a57      	ldr	r2, [pc, #348]	; (801041c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80102be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c4:	4a56      	ldr	r2, [pc, #344]	; (8010420 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80102c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80102cc:	6879      	ldr	r1, [r7, #4]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	333c      	adds	r3, #60	; 0x3c
 80102d4:	461a      	mov	r2, r3
 80102d6:	887b      	ldrh	r3, [r7, #2]
 80102d8:	f7fc f85e 	bl	800c398 <HAL_DMA_Start_IT>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d001      	beq.n	80102e6 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 80102e2:	2301      	movs	r3, #1
 80102e4:	e094      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	68da      	ldr	r2, [r3, #12]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80102f4:	60da      	str	r2, [r3, #12]
      break;
 80102f6:	e024      	b.n	8010342 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102fc:	4a46      	ldr	r2, [pc, #280]	; (8010418 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80102fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010304:	4a45      	ldr	r2, [pc, #276]	; (801041c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8010306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801030c:	4a44      	ldr	r2, [pc, #272]	; (8010420 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 801030e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010314:	6879      	ldr	r1, [r7, #4]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3340      	adds	r3, #64	; 0x40
 801031c:	461a      	mov	r2, r3
 801031e:	887b      	ldrh	r3, [r7, #2]
 8010320:	f7fc f83a 	bl	800c398 <HAL_DMA_Start_IT>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d001      	beq.n	801032e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	e070      	b.n	8010410 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68da      	ldr	r2, [r3, #12]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801033c:	60da      	str	r2, [r3, #12]
      break;
 801033e:	e000      	b.n	8010342 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8010340:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2201      	movs	r2, #1
 8010348:	68b9      	ldr	r1, [r7, #8]
 801034a:	4618      	mov	r0, r3
 801034c:	f001 f8e6 	bl	801151c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4a33      	ldr	r2, [pc, #204]	; (8010424 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d004      	beq.n	8010364 <HAL_TIM_PWM_Start_DMA+0x338>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a32      	ldr	r2, [pc, #200]	; (8010428 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d101      	bne.n	8010368 <HAL_TIM_PWM_Start_DMA+0x33c>
 8010364:	2301      	movs	r3, #1
 8010366:	e000      	b.n	801036a <HAL_TIM_PWM_Start_DMA+0x33e>
 8010368:	2300      	movs	r3, #0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d007      	beq.n	801037e <HAL_TIM_PWM_Start_DMA+0x352>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801037c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a28      	ldr	r2, [pc, #160]	; (8010424 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d022      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010390:	d01d      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4a25      	ldr	r2, [pc, #148]	; (801042c <HAL_TIM_PWM_Start_DMA+0x400>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d018      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a23      	ldr	r2, [pc, #140]	; (8010430 <HAL_TIM_PWM_Start_DMA+0x404>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d013      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a22      	ldr	r2, [pc, #136]	; (8010434 <HAL_TIM_PWM_Start_DMA+0x408>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d00e      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a1c      	ldr	r2, [pc, #112]	; (8010428 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d009      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a1e      	ldr	r2, [pc, #120]	; (8010438 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d004      	beq.n	80103ce <HAL_TIM_PWM_Start_DMA+0x3a2>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a1c      	ldr	r2, [pc, #112]	; (801043c <HAL_TIM_PWM_Start_DMA+0x410>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d115      	bne.n	80103fa <HAL_TIM_PWM_Start_DMA+0x3ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	689a      	ldr	r2, [r3, #8]
 80103d4:	4b1a      	ldr	r3, [pc, #104]	; (8010440 <HAL_TIM_PWM_Start_DMA+0x414>)
 80103d6:	4013      	ands	r3, r2
 80103d8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	2b06      	cmp	r3, #6
 80103de:	d015      	beq.n	801040c <HAL_TIM_PWM_Start_DMA+0x3e0>
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103e6:	d011      	beq.n	801040c <HAL_TIM_PWM_Start_DMA+0x3e0>
    {
      __HAL_TIM_ENABLE(htim);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f042 0201 	orr.w	r2, r2, #1
 80103f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103f8:	e008      	b.n	801040c <HAL_TIM_PWM_Start_DMA+0x3e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f042 0201 	orr.w	r2, r2, #1
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	e000      	b.n	801040e <HAL_TIM_PWM_Start_DMA+0x3e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801040c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801040e:	2300      	movs	r3, #0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3718      	adds	r7, #24
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	08010cdb 	.word	0x08010cdb
 801041c:	08010d83 	.word	0x08010d83
 8010420:	08010c49 	.word	0x08010c49
 8010424:	40010000 	.word	0x40010000
 8010428:	40010400 	.word	0x40010400
 801042c:	40000400 	.word	0x40000400
 8010430:	40000800 	.word	0x40000800
 8010434:	40000c00 	.word	0x40000c00
 8010438:	40014000 	.word	0x40014000
 801043c:	40001800 	.word	0x40001800
 8010440:	00010007 	.word	0x00010007

08010444 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	2b0c      	cmp	r3, #12
 8010452:	d855      	bhi.n	8010500 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8010454:	a201      	add	r2, pc, #4	; (adr r2, 801045c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8010456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045a:	bf00      	nop
 801045c:	08010491 	.word	0x08010491
 8010460:	08010501 	.word	0x08010501
 8010464:	08010501 	.word	0x08010501
 8010468:	08010501 	.word	0x08010501
 801046c:	080104ad 	.word	0x080104ad
 8010470:	08010501 	.word	0x08010501
 8010474:	08010501 	.word	0x08010501
 8010478:	08010501 	.word	0x08010501
 801047c:	080104c9 	.word	0x080104c9
 8010480:	08010501 	.word	0x08010501
 8010484:	08010501 	.word	0x08010501
 8010488:	08010501 	.word	0x08010501
 801048c:	080104e5 	.word	0x080104e5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	68da      	ldr	r2, [r3, #12]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801049e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fb ffd7 	bl	800c458 <HAL_DMA_Abort_IT>
      break;
 80104aa:	e02a      	b.n	8010502 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68da      	ldr	r2, [r3, #12]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fb ffc9 	bl	800c458 <HAL_DMA_Abort_IT>
      break;
 80104c6:	e01c      	b.n	8010502 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68da      	ldr	r2, [r3, #12]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fb ffbb 	bl	800c458 <HAL_DMA_Abort_IT>
      break;
 80104e2:	e00e      	b.n	8010502 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80104f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fb ffad 	bl	800c458 <HAL_DMA_Abort_IT>
      break;
 80104fe:	e000      	b.n	8010502 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8010500:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2200      	movs	r2, #0
 8010508:	6839      	ldr	r1, [r7, #0]
 801050a:	4618      	mov	r0, r3
 801050c:	f001 f806 	bl	801151c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a36      	ldr	r2, [pc, #216]	; (80105f0 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d004      	beq.n	8010524 <HAL_TIM_PWM_Stop_DMA+0xe0>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a35      	ldr	r2, [pc, #212]	; (80105f4 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d101      	bne.n	8010528 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8010524:	2301      	movs	r3, #1
 8010526:	e000      	b.n	801052a <HAL_TIM_PWM_Stop_DMA+0xe6>
 8010528:	2300      	movs	r3, #0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d017      	beq.n	801055e <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	6a1a      	ldr	r2, [r3, #32]
 8010534:	f241 1311 	movw	r3, #4369	; 0x1111
 8010538:	4013      	ands	r3, r2
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10f      	bne.n	801055e <HAL_TIM_PWM_Stop_DMA+0x11a>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	6a1a      	ldr	r2, [r3, #32]
 8010544:	f240 4344 	movw	r3, #1092	; 0x444
 8010548:	4013      	ands	r3, r2
 801054a:	2b00      	cmp	r3, #0
 801054c:	d107      	bne.n	801055e <HAL_TIM_PWM_Stop_DMA+0x11a>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801055c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	6a1a      	ldr	r2, [r3, #32]
 8010564:	f241 1311 	movw	r3, #4369	; 0x1111
 8010568:	4013      	ands	r3, r2
 801056a:	2b00      	cmp	r3, #0
 801056c:	d10f      	bne.n	801058e <HAL_TIM_PWM_Stop_DMA+0x14a>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6a1a      	ldr	r2, [r3, #32]
 8010574:	f240 4344 	movw	r3, #1092	; 0x444
 8010578:	4013      	ands	r3, r2
 801057a:	2b00      	cmp	r3, #0
 801057c:	d107      	bne.n	801058e <HAL_TIM_PWM_Stop_DMA+0x14a>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f022 0201 	bic.w	r2, r2, #1
 801058c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d104      	bne.n	801059e <HAL_TIM_PWM_Stop_DMA+0x15a>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801059c:	e023      	b.n	80105e6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b04      	cmp	r3, #4
 80105a2:	d104      	bne.n	80105ae <HAL_TIM_PWM_Stop_DMA+0x16a>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105ac:	e01b      	b.n	80105e6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	2b08      	cmp	r3, #8
 80105b2:	d104      	bne.n	80105be <HAL_TIM_PWM_Stop_DMA+0x17a>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105bc:	e013      	b.n	80105e6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	2b0c      	cmp	r3, #12
 80105c2:	d104      	bne.n	80105ce <HAL_TIM_PWM_Stop_DMA+0x18a>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105cc:	e00b      	b.n	80105e6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	2b10      	cmp	r3, #16
 80105d2:	d104      	bne.n	80105de <HAL_TIM_PWM_Stop_DMA+0x19a>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105dc:	e003      	b.n	80105e6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2201      	movs	r2, #1
 80105e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80105e6:	2300      	movs	r3, #0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	40010000 	.word	0x40010000
 80105f4:	40010400 	.word	0x40010400

080105f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	f003 0302 	and.w	r3, r3, #2
 801060a:	2b02      	cmp	r3, #2
 801060c:	d122      	bne.n	8010654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	f003 0302 	and.w	r3, r3, #2
 8010618:	2b02      	cmp	r3, #2
 801061a:	d11b      	bne.n	8010654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f06f 0202 	mvn.w	r2, #2
 8010624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2201      	movs	r2, #1
 801062a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	f003 0303 	and.w	r3, r3, #3
 8010636:	2b00      	cmp	r3, #0
 8010638:	d003      	beq.n	8010642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 fadc 	bl	8010bf8 <HAL_TIM_IC_CaptureCallback>
 8010640:	e005      	b.n	801064e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 face 	bl	8010be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7f0 f9c1 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	f003 0304 	and.w	r3, r3, #4
 801065e:	2b04      	cmp	r3, #4
 8010660:	d122      	bne.n	80106a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b04      	cmp	r3, #4
 801066e:	d11b      	bne.n	80106a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f06f 0204 	mvn.w	r2, #4
 8010678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2202      	movs	r2, #2
 801067e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801068a:	2b00      	cmp	r3, #0
 801068c:	d003      	beq.n	8010696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fab2 	bl	8010bf8 <HAL_TIM_IC_CaptureCallback>
 8010694:	e005      	b.n	80106a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 faa4 	bl	8010be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7f0 f997 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	f003 0308 	and.w	r3, r3, #8
 80106b2:	2b08      	cmp	r3, #8
 80106b4:	d122      	bne.n	80106fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	f003 0308 	and.w	r3, r3, #8
 80106c0:	2b08      	cmp	r3, #8
 80106c2:	d11b      	bne.n	80106fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f06f 0208 	mvn.w	r2, #8
 80106cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2204      	movs	r2, #4
 80106d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	69db      	ldr	r3, [r3, #28]
 80106da:	f003 0303 	and.w	r3, r3, #3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 fa88 	bl	8010bf8 <HAL_TIM_IC_CaptureCallback>
 80106e8:	e005      	b.n	80106f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 fa7a 	bl	8010be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7f0 f96d 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	f003 0310 	and.w	r3, r3, #16
 8010706:	2b10      	cmp	r3, #16
 8010708:	d122      	bne.n	8010750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	f003 0310 	and.w	r3, r3, #16
 8010714:	2b10      	cmp	r3, #16
 8010716:	d11b      	bne.n	8010750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f06f 0210 	mvn.w	r2, #16
 8010720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2208      	movs	r2, #8
 8010726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	69db      	ldr	r3, [r3, #28]
 801072e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010732:	2b00      	cmp	r3, #0
 8010734:	d003      	beq.n	801073e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 fa5e 	bl	8010bf8 <HAL_TIM_IC_CaptureCallback>
 801073c:	e005      	b.n	801074a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fa50 	bl	8010be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7f0 f943 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	f003 0301 	and.w	r3, r3, #1
 801075a:	2b01      	cmp	r3, #1
 801075c:	d10e      	bne.n	801077c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b01      	cmp	r3, #1
 801076a:	d107      	bne.n	801077c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f06f 0201 	mvn.w	r2, #1
 8010774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f7f2 f8a0 	bl	80028bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010786:	2b80      	cmp	r3, #128	; 0x80
 8010788:	d10e      	bne.n	80107a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010794:	2b80      	cmp	r3, #128	; 0x80
 8010796:	d107      	bne.n	80107a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80107a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 ff78 	bl	8011698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	691b      	ldr	r3, [r3, #16]
 80107ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107b6:	d10e      	bne.n	80107d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107c2:	2b80      	cmp	r3, #128	; 0x80
 80107c4:	d107      	bne.n	80107d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80107ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 ff6b 	bl	80116ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	691b      	ldr	r3, [r3, #16]
 80107dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107e0:	2b40      	cmp	r3, #64	; 0x40
 80107e2:	d10e      	bne.n	8010802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ee:	2b40      	cmp	r3, #64	; 0x40
 80107f0:	d107      	bne.n	8010802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80107fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 fa0f 	bl	8010c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	691b      	ldr	r3, [r3, #16]
 8010808:	f003 0320 	and.w	r3, r3, #32
 801080c:	2b20      	cmp	r3, #32
 801080e:	d10e      	bne.n	801082e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	f003 0320 	and.w	r3, r3, #32
 801081a:	2b20      	cmp	r3, #32
 801081c:	d107      	bne.n	801082e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f06f 0220 	mvn.w	r2, #32
 8010826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 ff2b 	bl	8011684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801082e:	bf00      	nop
 8010830:	3708      	adds	r7, #8
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
	...

08010838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801084a:	2b01      	cmp	r3, #1
 801084c:	d101      	bne.n	8010852 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801084e:	2302      	movs	r3, #2
 8010850:	e0fd      	b.n	8010a4e <HAL_TIM_PWM_ConfigChannel+0x216>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2201      	movs	r2, #1
 8010856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b14      	cmp	r3, #20
 801085e:	f200 80f0 	bhi.w	8010a42 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010862:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010868:	080108bd 	.word	0x080108bd
 801086c:	08010a43 	.word	0x08010a43
 8010870:	08010a43 	.word	0x08010a43
 8010874:	08010a43 	.word	0x08010a43
 8010878:	080108fd 	.word	0x080108fd
 801087c:	08010a43 	.word	0x08010a43
 8010880:	08010a43 	.word	0x08010a43
 8010884:	08010a43 	.word	0x08010a43
 8010888:	0801093f 	.word	0x0801093f
 801088c:	08010a43 	.word	0x08010a43
 8010890:	08010a43 	.word	0x08010a43
 8010894:	08010a43 	.word	0x08010a43
 8010898:	0801097f 	.word	0x0801097f
 801089c:	08010a43 	.word	0x08010a43
 80108a0:	08010a43 	.word	0x08010a43
 80108a4:	08010a43 	.word	0x08010a43
 80108a8:	080109c1 	.word	0x080109c1
 80108ac:	08010a43 	.word	0x08010a43
 80108b0:	08010a43 	.word	0x08010a43
 80108b4:	08010a43 	.word	0x08010a43
 80108b8:	08010a01 	.word	0x08010a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68b9      	ldr	r1, [r7, #8]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 fb32 	bl	8010f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	699a      	ldr	r2, [r3, #24]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f042 0208 	orr.w	r2, r2, #8
 80108d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	699a      	ldr	r2, [r3, #24]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f022 0204 	bic.w	r2, r2, #4
 80108e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	6999      	ldr	r1, [r3, #24]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	691a      	ldr	r2, [r3, #16]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	430a      	orrs	r2, r1
 80108f8:	619a      	str	r2, [r3, #24]
      break;
 80108fa:	e0a3      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68b9      	ldr	r1, [r7, #8]
 8010902:	4618      	mov	r0, r3
 8010904:	f000 fb84 	bl	8011010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	699a      	ldr	r2, [r3, #24]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	699a      	ldr	r2, [r3, #24]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	6999      	ldr	r1, [r3, #24]
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	691b      	ldr	r3, [r3, #16]
 8010932:	021a      	lsls	r2, r3, #8
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	430a      	orrs	r2, r1
 801093a:	619a      	str	r2, [r3, #24]
      break;
 801093c:	e082      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68b9      	ldr	r1, [r7, #8]
 8010944:	4618      	mov	r0, r3
 8010946:	f000 fbdb 	bl	8011100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	69da      	ldr	r2, [r3, #28]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f042 0208 	orr.w	r2, r2, #8
 8010958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	69da      	ldr	r2, [r3, #28]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f022 0204 	bic.w	r2, r2, #4
 8010968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	69d9      	ldr	r1, [r3, #28]
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	691a      	ldr	r2, [r3, #16]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	430a      	orrs	r2, r1
 801097a:	61da      	str	r2, [r3, #28]
      break;
 801097c:	e062      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	68b9      	ldr	r1, [r7, #8]
 8010984:	4618      	mov	r0, r3
 8010986:	f000 fc31 	bl	80111ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	69da      	ldr	r2, [r3, #28]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	69da      	ldr	r2, [r3, #28]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	69d9      	ldr	r1, [r3, #28]
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	021a      	lsls	r2, r3, #8
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	430a      	orrs	r2, r1
 80109bc:	61da      	str	r2, [r3, #28]
      break;
 80109be:	e041      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	68b9      	ldr	r1, [r7, #8]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 fc68 	bl	801129c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f042 0208 	orr.w	r2, r2, #8
 80109da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	f022 0204 	bic.w	r2, r2, #4
 80109ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	691a      	ldr	r2, [r3, #16]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	430a      	orrs	r2, r1
 80109fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80109fe:	e021      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	68b9      	ldr	r1, [r7, #8]
 8010a06:	4618      	mov	r0, r3
 8010a08:	f000 fc9a 	bl	8011340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	691b      	ldr	r3, [r3, #16]
 8010a36:	021a      	lsls	r2, r3, #8
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	430a      	orrs	r2, r1
 8010a3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010a40:	e000      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010a42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop

08010a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d101      	bne.n	8010a70 <HAL_TIM_ConfigClockSource+0x18>
 8010a6c:	2302      	movs	r3, #2
 8010a6e:	e0b3      	b.n	8010bd8 <HAL_TIM_ConfigClockSource+0x180>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2201      	movs	r2, #1
 8010a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2202      	movs	r2, #2
 8010a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	4b55      	ldr	r3, [pc, #340]	; (8010be0 <HAL_TIM_ConfigClockSource+0x188>)
 8010a8c:	4013      	ands	r3, r2
 8010a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010a96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010aa8:	d03e      	beq.n	8010b28 <HAL_TIM_ConfigClockSource+0xd0>
 8010aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010aae:	f200 8087 	bhi.w	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ab6:	f000 8085 	beq.w	8010bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8010aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010abe:	d87f      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ac0:	2b70      	cmp	r3, #112	; 0x70
 8010ac2:	d01a      	beq.n	8010afa <HAL_TIM_ConfigClockSource+0xa2>
 8010ac4:	2b70      	cmp	r3, #112	; 0x70
 8010ac6:	d87b      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ac8:	2b60      	cmp	r3, #96	; 0x60
 8010aca:	d050      	beq.n	8010b6e <HAL_TIM_ConfigClockSource+0x116>
 8010acc:	2b60      	cmp	r3, #96	; 0x60
 8010ace:	d877      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ad0:	2b50      	cmp	r3, #80	; 0x50
 8010ad2:	d03c      	beq.n	8010b4e <HAL_TIM_ConfigClockSource+0xf6>
 8010ad4:	2b50      	cmp	r3, #80	; 0x50
 8010ad6:	d873      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ad8:	2b40      	cmp	r3, #64	; 0x40
 8010ada:	d058      	beq.n	8010b8e <HAL_TIM_ConfigClockSource+0x136>
 8010adc:	2b40      	cmp	r3, #64	; 0x40
 8010ade:	d86f      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ae0:	2b30      	cmp	r3, #48	; 0x30
 8010ae2:	d064      	beq.n	8010bae <HAL_TIM_ConfigClockSource+0x156>
 8010ae4:	2b30      	cmp	r3, #48	; 0x30
 8010ae6:	d86b      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010ae8:	2b20      	cmp	r3, #32
 8010aea:	d060      	beq.n	8010bae <HAL_TIM_ConfigClockSource+0x156>
 8010aec:	2b20      	cmp	r3, #32
 8010aee:	d867      	bhi.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d05c      	beq.n	8010bae <HAL_TIM_ConfigClockSource+0x156>
 8010af4:	2b10      	cmp	r3, #16
 8010af6:	d05a      	beq.n	8010bae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8010af8:	e062      	b.n	8010bc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6818      	ldr	r0, [r3, #0]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	6899      	ldr	r1, [r3, #8]
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	f000 fce7 	bl	80114dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010b1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	609a      	str	r2, [r3, #8]
      break;
 8010b26:	e04e      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6818      	ldr	r0, [r3, #0]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	6899      	ldr	r1, [r3, #8]
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	685a      	ldr	r2, [r3, #4]
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	f000 fcd0 	bl	80114dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	689a      	ldr	r2, [r3, #8]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010b4a:	609a      	str	r2, [r3, #8]
      break;
 8010b4c:	e03b      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6818      	ldr	r0, [r3, #0]
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	6859      	ldr	r1, [r3, #4]
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	f000 fc44 	bl	80113e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2150      	movs	r1, #80	; 0x50
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 fc9d 	bl	80114a6 <TIM_ITRx_SetConfig>
      break;
 8010b6c:	e02b      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	6859      	ldr	r1, [r3, #4]
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	f000 fc63 	bl	8011446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2160      	movs	r1, #96	; 0x60
 8010b86:	4618      	mov	r0, r3
 8010b88:	f000 fc8d 	bl	80114a6 <TIM_ITRx_SetConfig>
      break;
 8010b8c:	e01b      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6818      	ldr	r0, [r3, #0]
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	6859      	ldr	r1, [r3, #4]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f000 fc24 	bl	80113e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2140      	movs	r1, #64	; 0x40
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f000 fc7d 	bl	80114a6 <TIM_ITRx_SetConfig>
      break;
 8010bac:	e00b      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	4610      	mov	r0, r2
 8010bba:	f000 fc74 	bl	80114a6 <TIM_ITRx_SetConfig>
        break;
 8010bbe:	e002      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010bc0:	bf00      	nop
 8010bc2:	e000      	b.n	8010bc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010bc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	fffeff88 	.word	0xfffeff88

08010be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010bec:	bf00      	nop
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010c00:	bf00      	nop
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010c14:	bf00      	nop
 8010c16:	370c      	adds	r7, #12
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010c28:	bf00      	nop
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d107      	bne.n	8010c70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2201      	movs	r2, #1
 8010c64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2201      	movs	r2, #1
 8010c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c6e:	e02a      	b.n	8010cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d107      	bne.n	8010c8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2202      	movs	r2, #2
 8010c7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c88:	e01d      	b.n	8010cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d107      	bne.n	8010ca4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2204      	movs	r2, #4
 8010c98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2201      	movs	r2, #1
 8010c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ca2:	e010      	b.n	8010cc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d107      	bne.n	8010cbe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2208      	movs	r2, #8
 8010cb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010cbc:	e003      	b.n	8010cc6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010cc6:	68f8      	ldr	r0, [r7, #12]
 8010cc8:	f7ff ffb4 	bl	8010c34 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	771a      	strb	r2, [r3, #28]
}
 8010cd2:	bf00      	nop
 8010cd4:	3710      	adds	r7, #16
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b084      	sub	sp, #16
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d10b      	bne.n	8010d0a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	69db      	ldr	r3, [r3, #28]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d136      	bne.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d08:	e031      	b.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d10b      	bne.n	8010d2c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	2202      	movs	r2, #2
 8010d18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	69db      	ldr	r3, [r3, #28]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d125      	bne.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2201      	movs	r2, #1
 8010d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d2a:	e020      	b.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d10b      	bne.n	8010d4e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2204      	movs	r2, #4
 8010d3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	69db      	ldr	r3, [r3, #28]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d114      	bne.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2201      	movs	r2, #1
 8010d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d4c:	e00f      	b.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d10a      	bne.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2208      	movs	r2, #8
 8010d5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	69db      	ldr	r3, [r3, #28]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d103      	bne.n	8010d6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f7ef fe2e 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2200      	movs	r2, #0
 8010d78:	771a      	strb	r2, [r3, #28]
}
 8010d7a:	bf00      	nop
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b084      	sub	sp, #16
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d103      	bne.n	8010da2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	771a      	strb	r2, [r3, #28]
 8010da0:	e019      	b.n	8010dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d103      	bne.n	8010db4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2202      	movs	r2, #2
 8010db0:	771a      	strb	r2, [r3, #28]
 8010db2:	e010      	b.n	8010dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d103      	bne.n	8010dc6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2204      	movs	r2, #4
 8010dc2:	771a      	strb	r2, [r3, #28]
 8010dc4:	e007      	b.n	8010dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d102      	bne.n	8010dd6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2208      	movs	r2, #8
 8010dd4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f7ff ff18 	bl	8010c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2200      	movs	r2, #0
 8010de0:	771a      	strb	r2, [r3, #28]
}
 8010de2:	bf00      	nop
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
	...

08010dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a40      	ldr	r2, [pc, #256]	; (8010f00 <TIM_Base_SetConfig+0x114>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d013      	beq.n	8010e2c <TIM_Base_SetConfig+0x40>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e0a:	d00f      	beq.n	8010e2c <TIM_Base_SetConfig+0x40>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4a3d      	ldr	r2, [pc, #244]	; (8010f04 <TIM_Base_SetConfig+0x118>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d00b      	beq.n	8010e2c <TIM_Base_SetConfig+0x40>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4a3c      	ldr	r2, [pc, #240]	; (8010f08 <TIM_Base_SetConfig+0x11c>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d007      	beq.n	8010e2c <TIM_Base_SetConfig+0x40>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4a3b      	ldr	r2, [pc, #236]	; (8010f0c <TIM_Base_SetConfig+0x120>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d003      	beq.n	8010e2c <TIM_Base_SetConfig+0x40>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	4a3a      	ldr	r2, [pc, #232]	; (8010f10 <TIM_Base_SetConfig+0x124>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d108      	bne.n	8010e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4a2f      	ldr	r2, [pc, #188]	; (8010f00 <TIM_Base_SetConfig+0x114>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d02b      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e4c:	d027      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4a2c      	ldr	r2, [pc, #176]	; (8010f04 <TIM_Base_SetConfig+0x118>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d023      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4a2b      	ldr	r2, [pc, #172]	; (8010f08 <TIM_Base_SetConfig+0x11c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d01f      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4a2a      	ldr	r2, [pc, #168]	; (8010f0c <TIM_Base_SetConfig+0x120>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d01b      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4a29      	ldr	r2, [pc, #164]	; (8010f10 <TIM_Base_SetConfig+0x124>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d017      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4a28      	ldr	r2, [pc, #160]	; (8010f14 <TIM_Base_SetConfig+0x128>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d013      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a27      	ldr	r2, [pc, #156]	; (8010f18 <TIM_Base_SetConfig+0x12c>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d00f      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4a26      	ldr	r2, [pc, #152]	; (8010f1c <TIM_Base_SetConfig+0x130>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d00b      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4a25      	ldr	r2, [pc, #148]	; (8010f20 <TIM_Base_SetConfig+0x134>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d007      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	4a24      	ldr	r2, [pc, #144]	; (8010f24 <TIM_Base_SetConfig+0x138>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d003      	beq.n	8010e9e <TIM_Base_SetConfig+0xb2>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4a23      	ldr	r2, [pc, #140]	; (8010f28 <TIM_Base_SetConfig+0x13c>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d108      	bne.n	8010eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	68fa      	ldr	r2, [r7, #12]
 8010eac:	4313      	orrs	r3, r2
 8010eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	695b      	ldr	r3, [r3, #20]
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	689a      	ldr	r2, [r3, #8]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a0a      	ldr	r2, [pc, #40]	; (8010f00 <TIM_Base_SetConfig+0x114>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d003      	beq.n	8010ee4 <TIM_Base_SetConfig+0xf8>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a0c      	ldr	r2, [pc, #48]	; (8010f10 <TIM_Base_SetConfig+0x124>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d103      	bne.n	8010eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	691a      	ldr	r2, [r3, #16]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	615a      	str	r2, [r3, #20]
}
 8010ef2:	bf00      	nop
 8010ef4:	3714      	adds	r7, #20
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	40010000 	.word	0x40010000
 8010f04:	40000400 	.word	0x40000400
 8010f08:	40000800 	.word	0x40000800
 8010f0c:	40000c00 	.word	0x40000c00
 8010f10:	40010400 	.word	0x40010400
 8010f14:	40014000 	.word	0x40014000
 8010f18:	40014400 	.word	0x40014400
 8010f1c:	40014800 	.word	0x40014800
 8010f20:	40001800 	.word	0x40001800
 8010f24:	40001c00 	.word	0x40001c00
 8010f28:	40002000 	.word	0x40002000

08010f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b087      	sub	sp, #28
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a1b      	ldr	r3, [r3, #32]
 8010f3a:	f023 0201 	bic.w	r2, r3, #1
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	699b      	ldr	r3, [r3, #24]
 8010f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	4b2b      	ldr	r3, [pc, #172]	; (8011004 <TIM_OC1_SetConfig+0xd8>)
 8010f58:	4013      	ands	r3, r2
 8010f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f023 0303 	bic.w	r3, r3, #3
 8010f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	4313      	orrs	r3, r2
 8010f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	f023 0302 	bic.w	r3, r3, #2
 8010f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	689b      	ldr	r3, [r3, #8]
 8010f7a:	697a      	ldr	r2, [r7, #20]
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4a21      	ldr	r2, [pc, #132]	; (8011008 <TIM_OC1_SetConfig+0xdc>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d003      	beq.n	8010f90 <TIM_OC1_SetConfig+0x64>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	4a20      	ldr	r2, [pc, #128]	; (801100c <TIM_OC1_SetConfig+0xe0>)
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d10c      	bne.n	8010faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	f023 0308 	bic.w	r3, r3, #8
 8010f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	697a      	ldr	r2, [r7, #20]
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	f023 0304 	bic.w	r3, r3, #4
 8010fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a16      	ldr	r2, [pc, #88]	; (8011008 <TIM_OC1_SetConfig+0xdc>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d003      	beq.n	8010fba <TIM_OC1_SetConfig+0x8e>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4a15      	ldr	r2, [pc, #84]	; (801100c <TIM_OC1_SetConfig+0xe0>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d111      	bne.n	8010fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	695b      	ldr	r3, [r3, #20]
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	699b      	ldr	r3, [r3, #24]
 8010fd8:	693a      	ldr	r2, [r7, #16]
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	693a      	ldr	r2, [r7, #16]
 8010fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	685a      	ldr	r2, [r3, #4]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	621a      	str	r2, [r3, #32]
}
 8010ff8:	bf00      	nop
 8010ffa:	371c      	adds	r7, #28
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr
 8011004:	fffeff8f 	.word	0xfffeff8f
 8011008:	40010000 	.word	0x40010000
 801100c:	40010400 	.word	0x40010400

08011010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011010:	b480      	push	{r7}
 8011012:	b087      	sub	sp, #28
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	f023 0210 	bic.w	r2, r3, #16
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a1b      	ldr	r3, [r3, #32]
 801102a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	4b2e      	ldr	r3, [pc, #184]	; (80110f4 <TIM_OC2_SetConfig+0xe4>)
 801103c:	4013      	ands	r3, r2
 801103e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	021b      	lsls	r3, r3, #8
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	4313      	orrs	r3, r2
 8011052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	f023 0320 	bic.w	r3, r3, #32
 801105a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	689b      	ldr	r3, [r3, #8]
 8011060:	011b      	lsls	r3, r3, #4
 8011062:	697a      	ldr	r2, [r7, #20]
 8011064:	4313      	orrs	r3, r2
 8011066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4a23      	ldr	r2, [pc, #140]	; (80110f8 <TIM_OC2_SetConfig+0xe8>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d003      	beq.n	8011078 <TIM_OC2_SetConfig+0x68>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4a22      	ldr	r2, [pc, #136]	; (80110fc <TIM_OC2_SetConfig+0xec>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d10d      	bne.n	8011094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801107e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	011b      	lsls	r3, r3, #4
 8011086:	697a      	ldr	r2, [r7, #20]
 8011088:	4313      	orrs	r3, r2
 801108a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011092:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4a18      	ldr	r2, [pc, #96]	; (80110f8 <TIM_OC2_SetConfig+0xe8>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d003      	beq.n	80110a4 <TIM_OC2_SetConfig+0x94>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	4a17      	ldr	r2, [pc, #92]	; (80110fc <TIM_OC2_SetConfig+0xec>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d113      	bne.n	80110cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	695b      	ldr	r3, [r3, #20]
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	693a      	ldr	r2, [r7, #16]
 80110bc:	4313      	orrs	r3, r2
 80110be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	699b      	ldr	r3, [r3, #24]
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	693a      	ldr	r2, [r7, #16]
 80110c8:	4313      	orrs	r3, r2
 80110ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	693a      	ldr	r2, [r7, #16]
 80110d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	685a      	ldr	r2, [r3, #4]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	621a      	str	r2, [r3, #32]
}
 80110e6:	bf00      	nop
 80110e8:	371c      	adds	r7, #28
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop
 80110f4:	feff8fff 	.word	0xfeff8fff
 80110f8:	40010000 	.word	0x40010000
 80110fc:	40010400 	.word	0x40010400

08011100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011100:	b480      	push	{r7}
 8011102:	b087      	sub	sp, #28
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6a1b      	ldr	r3, [r3, #32]
 801110e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6a1b      	ldr	r3, [r3, #32]
 801111a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	69db      	ldr	r3, [r3, #28]
 8011126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	4b2d      	ldr	r3, [pc, #180]	; (80111e0 <TIM_OC3_SetConfig+0xe0>)
 801112c:	4013      	ands	r3, r2
 801112e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f023 0303 	bic.w	r3, r3, #3
 8011136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	68fa      	ldr	r2, [r7, #12]
 801113e:	4313      	orrs	r3, r2
 8011140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	021b      	lsls	r3, r3, #8
 8011150:	697a      	ldr	r2, [r7, #20]
 8011152:	4313      	orrs	r3, r2
 8011154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	4a22      	ldr	r2, [pc, #136]	; (80111e4 <TIM_OC3_SetConfig+0xe4>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d003      	beq.n	8011166 <TIM_OC3_SetConfig+0x66>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4a21      	ldr	r2, [pc, #132]	; (80111e8 <TIM_OC3_SetConfig+0xe8>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d10d      	bne.n	8011182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801116c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	021b      	lsls	r3, r3, #8
 8011174:	697a      	ldr	r2, [r7, #20]
 8011176:	4313      	orrs	r3, r2
 8011178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4a17      	ldr	r2, [pc, #92]	; (80111e4 <TIM_OC3_SetConfig+0xe4>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d003      	beq.n	8011192 <TIM_OC3_SetConfig+0x92>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a16      	ldr	r2, [pc, #88]	; (80111e8 <TIM_OC3_SetConfig+0xe8>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d113      	bne.n	80111ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	695b      	ldr	r3, [r3, #20]
 80111a6:	011b      	lsls	r3, r3, #4
 80111a8:	693a      	ldr	r2, [r7, #16]
 80111aa:	4313      	orrs	r3, r2
 80111ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	699b      	ldr	r3, [r3, #24]
 80111b2:	011b      	lsls	r3, r3, #4
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	4313      	orrs	r3, r2
 80111b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	68fa      	ldr	r2, [r7, #12]
 80111c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	685a      	ldr	r2, [r3, #4]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	697a      	ldr	r2, [r7, #20]
 80111d2:	621a      	str	r2, [r3, #32]
}
 80111d4:	bf00      	nop
 80111d6:	371c      	adds	r7, #28
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	fffeff8f 	.word	0xfffeff8f
 80111e4:	40010000 	.word	0x40010000
 80111e8:	40010400 	.word	0x40010400

080111ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b087      	sub	sp, #28
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a1b      	ldr	r3, [r3, #32]
 80111fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a1b      	ldr	r3, [r3, #32]
 8011206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	69db      	ldr	r3, [r3, #28]
 8011212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	4b1e      	ldr	r3, [pc, #120]	; (8011290 <TIM_OC4_SetConfig+0xa4>)
 8011218:	4013      	ands	r3, r2
 801121a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	021b      	lsls	r3, r3, #8
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	4313      	orrs	r3, r2
 801122e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	031b      	lsls	r3, r3, #12
 801123e:	693a      	ldr	r2, [r7, #16]
 8011240:	4313      	orrs	r3, r2
 8011242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4a13      	ldr	r2, [pc, #76]	; (8011294 <TIM_OC4_SetConfig+0xa8>)
 8011248:	4293      	cmp	r3, r2
 801124a:	d003      	beq.n	8011254 <TIM_OC4_SetConfig+0x68>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	4a12      	ldr	r2, [pc, #72]	; (8011298 <TIM_OC4_SetConfig+0xac>)
 8011250:	4293      	cmp	r3, r2
 8011252:	d109      	bne.n	8011268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801125a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	695b      	ldr	r3, [r3, #20]
 8011260:	019b      	lsls	r3, r3, #6
 8011262:	697a      	ldr	r2, [r7, #20]
 8011264:	4313      	orrs	r3, r2
 8011266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	685a      	ldr	r2, [r3, #4]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	693a      	ldr	r2, [r7, #16]
 8011280:	621a      	str	r2, [r3, #32]
}
 8011282:	bf00      	nop
 8011284:	371c      	adds	r7, #28
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	feff8fff 	.word	0xfeff8fff
 8011294:	40010000 	.word	0x40010000
 8011298:	40010400 	.word	0x40010400

0801129c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801129c:	b480      	push	{r7}
 801129e:	b087      	sub	sp, #28
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6a1b      	ldr	r3, [r3, #32]
 80112aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6a1b      	ldr	r3, [r3, #32]
 80112b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	4b1b      	ldr	r3, [pc, #108]	; (8011334 <TIM_OC5_SetConfig+0x98>)
 80112c8:	4013      	ands	r3, r2
 80112ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	68fa      	ldr	r2, [r7, #12]
 80112d2:	4313      	orrs	r3, r2
 80112d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80112dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	041b      	lsls	r3, r3, #16
 80112e4:	693a      	ldr	r2, [r7, #16]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	4a12      	ldr	r2, [pc, #72]	; (8011338 <TIM_OC5_SetConfig+0x9c>)
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d003      	beq.n	80112fa <TIM_OC5_SetConfig+0x5e>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4a11      	ldr	r2, [pc, #68]	; (801133c <TIM_OC5_SetConfig+0xa0>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d109      	bne.n	801130e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	695b      	ldr	r3, [r3, #20]
 8011306:	021b      	lsls	r3, r3, #8
 8011308:	697a      	ldr	r2, [r7, #20]
 801130a:	4313      	orrs	r3, r2
 801130c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	697a      	ldr	r2, [r7, #20]
 8011312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	693a      	ldr	r2, [r7, #16]
 8011326:	621a      	str	r2, [r3, #32]
}
 8011328:	bf00      	nop
 801132a:	371c      	adds	r7, #28
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr
 8011334:	fffeff8f 	.word	0xfffeff8f
 8011338:	40010000 	.word	0x40010000
 801133c:	40010400 	.word	0x40010400

08011340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011340:	b480      	push	{r7}
 8011342:	b087      	sub	sp, #28
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a1b      	ldr	r3, [r3, #32]
 801134e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a1b      	ldr	r3, [r3, #32]
 801135a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	4b1c      	ldr	r3, [pc, #112]	; (80113dc <TIM_OC6_SetConfig+0x9c>)
 801136c:	4013      	ands	r3, r2
 801136e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	021b      	lsls	r3, r3, #8
 8011376:	68fa      	ldr	r2, [r7, #12]
 8011378:	4313      	orrs	r3, r2
 801137a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	051b      	lsls	r3, r3, #20
 801138a:	693a      	ldr	r2, [r7, #16]
 801138c:	4313      	orrs	r3, r2
 801138e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4a13      	ldr	r2, [pc, #76]	; (80113e0 <TIM_OC6_SetConfig+0xa0>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d003      	beq.n	80113a0 <TIM_OC6_SetConfig+0x60>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a12      	ldr	r2, [pc, #72]	; (80113e4 <TIM_OC6_SetConfig+0xa4>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d109      	bne.n	80113b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80113a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	695b      	ldr	r3, [r3, #20]
 80113ac:	029b      	lsls	r3, r3, #10
 80113ae:	697a      	ldr	r2, [r7, #20]
 80113b0:	4313      	orrs	r3, r2
 80113b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	697a      	ldr	r2, [r7, #20]
 80113b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	693a      	ldr	r2, [r7, #16]
 80113cc:	621a      	str	r2, [r3, #32]
}
 80113ce:	bf00      	nop
 80113d0:	371c      	adds	r7, #28
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	feff8fff 	.word	0xfeff8fff
 80113e0:	40010000 	.word	0x40010000
 80113e4:	40010400 	.word	0x40010400

080113e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b087      	sub	sp, #28
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6a1b      	ldr	r3, [r3, #32]
 80113f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6a1b      	ldr	r3, [r3, #32]
 80113fe:	f023 0201 	bic.w	r2, r3, #1
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	699b      	ldr	r3, [r3, #24]
 801140a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	011b      	lsls	r3, r3, #4
 8011418:	693a      	ldr	r2, [r7, #16]
 801141a:	4313      	orrs	r3, r2
 801141c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	f023 030a 	bic.w	r3, r3, #10
 8011424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011426:	697a      	ldr	r2, [r7, #20]
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	4313      	orrs	r3, r2
 801142c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	693a      	ldr	r2, [r7, #16]
 8011432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	697a      	ldr	r2, [r7, #20]
 8011438:	621a      	str	r2, [r3, #32]
}
 801143a:	bf00      	nop
 801143c:	371c      	adds	r7, #28
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr

08011446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011446:	b480      	push	{r7}
 8011448:	b087      	sub	sp, #28
 801144a:	af00      	add	r7, sp, #0
 801144c:	60f8      	str	r0, [r7, #12]
 801144e:	60b9      	str	r1, [r7, #8]
 8011450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6a1b      	ldr	r3, [r3, #32]
 8011456:	f023 0210 	bic.w	r2, r3, #16
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	699b      	ldr	r3, [r3, #24]
 8011462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6a1b      	ldr	r3, [r3, #32]
 8011468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	031b      	lsls	r3, r3, #12
 8011476:	697a      	ldr	r2, [r7, #20]
 8011478:	4313      	orrs	r3, r2
 801147a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	011b      	lsls	r3, r3, #4
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	4313      	orrs	r3, r2
 801148c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	697a      	ldr	r2, [r7, #20]
 8011492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	693a      	ldr	r2, [r7, #16]
 8011498:	621a      	str	r2, [r3, #32]
}
 801149a:	bf00      	nop
 801149c:	371c      	adds	r7, #28
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr

080114a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80114a6:	b480      	push	{r7}
 80114a8:	b085      	sub	sp, #20
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	6078      	str	r0, [r7, #4]
 80114ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80114be:	683a      	ldr	r2, [r7, #0]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	4313      	orrs	r3, r2
 80114c4:	f043 0307 	orr.w	r3, r3, #7
 80114c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	68fa      	ldr	r2, [r7, #12]
 80114ce:	609a      	str	r2, [r3, #8]
}
 80114d0:	bf00      	nop
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80114dc:	b480      	push	{r7}
 80114de:	b087      	sub	sp, #28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
 80114e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80114f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	021a      	lsls	r2, r3, #8
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	431a      	orrs	r2, r3
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	4313      	orrs	r3, r2
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	4313      	orrs	r3, r2
 8011508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	697a      	ldr	r2, [r7, #20]
 801150e:	609a      	str	r2, [r3, #8]
}
 8011510:	bf00      	nop
 8011512:	371c      	adds	r7, #28
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr

0801151c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801151c:	b480      	push	{r7}
 801151e:	b087      	sub	sp, #28
 8011520:	af00      	add	r7, sp, #0
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	f003 031f 	and.w	r3, r3, #31
 801152e:	2201      	movs	r2, #1
 8011530:	fa02 f303 	lsl.w	r3, r2, r3
 8011534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	6a1a      	ldr	r2, [r3, #32]
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	43db      	mvns	r3, r3
 801153e:	401a      	ands	r2, r3
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6a1a      	ldr	r2, [r3, #32]
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	f003 031f 	and.w	r3, r3, #31
 801154e:	6879      	ldr	r1, [r7, #4]
 8011550:	fa01 f303 	lsl.w	r3, r1, r3
 8011554:	431a      	orrs	r2, r3
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	621a      	str	r2, [r3, #32]
}
 801155a:	bf00      	nop
 801155c:	371c      	adds	r7, #28
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
	...

08011568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011568:	b480      	push	{r7}
 801156a:	b085      	sub	sp, #20
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011578:	2b01      	cmp	r3, #1
 801157a:	d101      	bne.n	8011580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801157c:	2302      	movs	r3, #2
 801157e:	e06d      	b.n	801165c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2201      	movs	r2, #1
 8011584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2202      	movs	r2, #2
 801158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	689b      	ldr	r3, [r3, #8]
 801159e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a30      	ldr	r2, [pc, #192]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d004      	beq.n	80115b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4a2f      	ldr	r2, [pc, #188]	; (801166c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d108      	bne.n	80115c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80115ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	68fa      	ldr	r2, [r7, #12]
 80115c2:	4313      	orrs	r3, r2
 80115c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	68fa      	ldr	r2, [r7, #12]
 80115d4:	4313      	orrs	r3, r2
 80115d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	68fa      	ldr	r2, [r7, #12]
 80115de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4a20      	ldr	r2, [pc, #128]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d022      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115f2:	d01d      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4a1d      	ldr	r2, [pc, #116]	; (8011670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d018      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4a1c      	ldr	r2, [pc, #112]	; (8011674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d013      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4a1a      	ldr	r2, [pc, #104]	; (8011678 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801160e:	4293      	cmp	r3, r2
 8011610:	d00e      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	4a15      	ldr	r2, [pc, #84]	; (801166c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d009      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4a16      	ldr	r2, [pc, #88]	; (801167c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d004      	beq.n	8011630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4a15      	ldr	r2, [pc, #84]	; (8011680 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d10c      	bne.n	801164a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	68ba      	ldr	r2, [r7, #8]
 801163e:	4313      	orrs	r3, r2
 8011640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2201      	movs	r2, #1
 801164e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2200      	movs	r2, #0
 8011656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3714      	adds	r7, #20
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr
 8011668:	40010000 	.word	0x40010000
 801166c:	40010400 	.word	0x40010400
 8011670:	40000400 	.word	0x40000400
 8011674:	40000800 	.word	0x40000800
 8011678:	40000c00 	.word	0x40000c00
 801167c:	40014000 	.word	0x40014000
 8011680:	40001800 	.word	0x40001800

08011684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801168c:	bf00      	nop
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80116a0:	bf00      	nop
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80116b4:	bf00      	nop
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b085      	sub	sp, #20
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d027      	beq.n	801172a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	4b2f      	ldr	r3, [pc, #188]	; (80117a0 <FMC_SDRAM_Init+0xe0>)
 80116e4:	4013      	ands	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80116f0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80116f6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80116fc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011702:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011708:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 801170e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011714:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801171a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	4313      	orrs	r3, r2
 8011720:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	601a      	str	r2, [r3, #0]
 8011728:	e032      	b.n	8011790 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011736:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011740:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011746:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	4313      	orrs	r3, r2
 801174c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	4b12      	ldr	r3, [pc, #72]	; (80117a0 <FMC_SDRAM_Init+0xe0>)
 8011758:	4013      	ands	r3, r2
 801175a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011764:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 801176a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8011770:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8011776:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 801177c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801177e:	68ba      	ldr	r2, [r7, #8]
 8011780:	4313      	orrs	r3, r2
 8011782:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	68ba      	ldr	r2, [r7, #8]
 801178e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3714      	adds	r7, #20
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr
 801179e:	bf00      	nop
 80117a0:	ffff8000 	.word	0xffff8000

080117a4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b087      	sub	sp, #28
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80117b0:	2300      	movs	r3, #0
 80117b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80117b4:	2300      	movs	r3, #0
 80117b6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d02e      	beq.n	801181c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80117ca:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	3b01      	subs	r3, #1
 80117d8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80117da:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80117e4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	3b01      	subs	r3, #1
 80117ec:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80117ee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	3b01      	subs	r3, #1
 80117f6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80117f8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	695b      	ldr	r3, [r3, #20]
 80117fe:	3b01      	subs	r3, #1
 8011800:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011802:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	3b01      	subs	r3, #1
 801180a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801180c:	4313      	orrs	r3, r2
 801180e:	697a      	ldr	r2, [r7, #20]
 8011810:	4313      	orrs	r3, r2
 8011812:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	609a      	str	r2, [r3, #8]
 801181a:	e039      	b.n	8011890 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	689b      	ldr	r3, [r3, #8]
 8011820:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8011822:	697a      	ldr	r2, [r7, #20]
 8011824:	4b1e      	ldr	r3, [pc, #120]	; (80118a0 <FMC_SDRAM_Timing_Init+0xfc>)
 8011826:	4013      	ands	r3, r2
 8011828:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	3b01      	subs	r3, #1
 8011830:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	695b      	ldr	r3, [r3, #20]
 8011836:	3b01      	subs	r3, #1
 8011838:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801183a:	4313      	orrs	r3, r2
 801183c:	697a      	ldr	r2, [r7, #20]
 801183e:	4313      	orrs	r3, r2
 8011840:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801184e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	3b01      	subs	r3, #1
 801185c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801185e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	3b01      	subs	r3, #1
 8011866:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011868:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	691b      	ldr	r3, [r3, #16]
 801186e:	3b01      	subs	r3, #1
 8011870:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011872:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	699b      	ldr	r3, [r3, #24]
 8011878:	3b01      	subs	r3, #1
 801187a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801187c:	4313      	orrs	r3, r2
 801187e:	693a      	ldr	r2, [r7, #16]
 8011880:	4313      	orrs	r3, r2
 8011882:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	697a      	ldr	r2, [r7, #20]
 8011888:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	693a      	ldr	r2, [r7, #16]
 801188e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8011890:	2300      	movs	r3, #0
}
 8011892:	4618      	mov	r0, r3
 8011894:	371c      	adds	r7, #28
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	ff0f0fff 	.word	0xff0f0fff

080118a4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	691a      	ldr	r2, [r3, #16]
 80118b4:	4b0c      	ldr	r3, [pc, #48]	; (80118e8 <FMC_SDRAM_SendCommand+0x44>)
 80118b6:	4013      	ands	r3, r2
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	6811      	ldr	r1, [r2, #0]
 80118bc:	68ba      	ldr	r2, [r7, #8]
 80118be:	6852      	ldr	r2, [r2, #4]
 80118c0:	4311      	orrs	r1, r2
 80118c2:	68ba      	ldr	r2, [r7, #8]
 80118c4:	6892      	ldr	r2, [r2, #8]
 80118c6:	3a01      	subs	r2, #1
 80118c8:	0152      	lsls	r2, r2, #5
 80118ca:	4311      	orrs	r1, r2
 80118cc:	68ba      	ldr	r2, [r7, #8]
 80118ce:	68d2      	ldr	r2, [r2, #12]
 80118d0:	0252      	lsls	r2, r2, #9
 80118d2:	430a      	orrs	r2, r1
 80118d4:	431a      	orrs	r2, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80118da:	2300      	movs	r3, #0
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3714      	adds	r7, #20
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	ffc00000 	.word	0xffc00000

080118ec <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	695a      	ldr	r2, [r3, #20]
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	431a      	orrs	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8011904:	2300      	movs	r3, #0
}
 8011906:	4618      	mov	r0, r3
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011912:	b480      	push	{r7}
 8011914:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011916:	bf00      	nop
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011920:	b480      	push	{r7}
 8011922:	b085      	sub	sp, #20
 8011924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011926:	f3ef 8305 	mrs	r3, IPSR
 801192a:	60bb      	str	r3, [r7, #8]
  return(result);
 801192c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801192e:	2b00      	cmp	r3, #0
 8011930:	d10f      	bne.n	8011952 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011932:	f3ef 8310 	mrs	r3, PRIMASK
 8011936:	607b      	str	r3, [r7, #4]
  return(result);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d105      	bne.n	801194a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801193e:	f3ef 8311 	mrs	r3, BASEPRI
 8011942:	603b      	str	r3, [r7, #0]
  return(result);
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d007      	beq.n	801195a <osKernelInitialize+0x3a>
 801194a:	4b0e      	ldr	r3, [pc, #56]	; (8011984 <osKernelInitialize+0x64>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2b02      	cmp	r3, #2
 8011950:	d103      	bne.n	801195a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011952:	f06f 0305 	mvn.w	r3, #5
 8011956:	60fb      	str	r3, [r7, #12]
 8011958:	e00c      	b.n	8011974 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801195a:	4b0a      	ldr	r3, [pc, #40]	; (8011984 <osKernelInitialize+0x64>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d105      	bne.n	801196e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011962:	4b08      	ldr	r3, [pc, #32]	; (8011984 <osKernelInitialize+0x64>)
 8011964:	2201      	movs	r2, #1
 8011966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011968:	2300      	movs	r3, #0
 801196a:	60fb      	str	r3, [r7, #12]
 801196c:	e002      	b.n	8011974 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801196e:	f04f 33ff 	mov.w	r3, #4294967295
 8011972:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011974:	68fb      	ldr	r3, [r7, #12]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3714      	adds	r7, #20
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	20023a3c 	.word	0x20023a3c

08011988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801198e:	f3ef 8305 	mrs	r3, IPSR
 8011992:	60bb      	str	r3, [r7, #8]
  return(result);
 8011994:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011996:	2b00      	cmp	r3, #0
 8011998:	d10f      	bne.n	80119ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801199a:	f3ef 8310 	mrs	r3, PRIMASK
 801199e:	607b      	str	r3, [r7, #4]
  return(result);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d105      	bne.n	80119b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80119a6:	f3ef 8311 	mrs	r3, BASEPRI
 80119aa:	603b      	str	r3, [r7, #0]
  return(result);
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d007      	beq.n	80119c2 <osKernelStart+0x3a>
 80119b2:	4b0f      	ldr	r3, [pc, #60]	; (80119f0 <osKernelStart+0x68>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	2b02      	cmp	r3, #2
 80119b8:	d103      	bne.n	80119c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80119ba:	f06f 0305 	mvn.w	r3, #5
 80119be:	60fb      	str	r3, [r7, #12]
 80119c0:	e010      	b.n	80119e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80119c2:	4b0b      	ldr	r3, [pc, #44]	; (80119f0 <osKernelStart+0x68>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d109      	bne.n	80119de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80119ca:	f7ff ffa2 	bl	8011912 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80119ce:	4b08      	ldr	r3, [pc, #32]	; (80119f0 <osKernelStart+0x68>)
 80119d0:	2202      	movs	r2, #2
 80119d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80119d4:	f002 fb14 	bl	8014000 <vTaskStartScheduler>
      stat = osOK;
 80119d8:	2300      	movs	r3, #0
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e002      	b.n	80119e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80119de:	f04f 33ff 	mov.w	r3, #4294967295
 80119e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80119e4:	68fb      	ldr	r3, [r7, #12]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3710      	adds	r7, #16
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	20023a3c 	.word	0x20023a3c

080119f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b090      	sub	sp, #64	; 0x40
 80119f8:	af04      	add	r7, sp, #16
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011a00:	2300      	movs	r3, #0
 8011a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a04:	f3ef 8305 	mrs	r3, IPSR
 8011a08:	61fb      	str	r3, [r7, #28]
  return(result);
 8011a0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f040 808f 	bne.w	8011b30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a12:	f3ef 8310 	mrs	r3, PRIMASK
 8011a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d105      	bne.n	8011a2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8011a22:	617b      	str	r3, [r7, #20]
  return(result);
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <osThreadNew+0x3e>
 8011a2a:	4b44      	ldr	r3, [pc, #272]	; (8011b3c <osThreadNew+0x148>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b02      	cmp	r3, #2
 8011a30:	d07e      	beq.n	8011b30 <osThreadNew+0x13c>
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d07b      	beq.n	8011b30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011a38:	2380      	movs	r3, #128	; 0x80
 8011a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011a3c:	2318      	movs	r3, #24
 8011a3e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011a40:	2300      	movs	r3, #0
 8011a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011a44:	f04f 33ff 	mov.w	r3, #4294967295
 8011a48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d045      	beq.n	8011adc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <osThreadNew+0x6a>
        name = attr->name;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	699b      	ldr	r3, [r3, #24]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d002      	beq.n	8011a6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	699b      	ldr	r3, [r3, #24]
 8011a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d008      	beq.n	8011a84 <osThreadNew+0x90>
 8011a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a74:	2b38      	cmp	r3, #56	; 0x38
 8011a76:	d805      	bhi.n	8011a84 <osThreadNew+0x90>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	f003 0301 	and.w	r3, r3, #1
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d001      	beq.n	8011a88 <osThreadNew+0x94>
        return (NULL);
 8011a84:	2300      	movs	r3, #0
 8011a86:	e054      	b.n	8011b32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	695b      	ldr	r3, [r3, #20]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d003      	beq.n	8011a98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	695b      	ldr	r3, [r3, #20]
 8011a94:	089b      	lsrs	r3, r3, #2
 8011a96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	689b      	ldr	r3, [r3, #8]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d00e      	beq.n	8011abe <osThreadNew+0xca>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	2b5b      	cmp	r3, #91	; 0x5b
 8011aa6:	d90a      	bls.n	8011abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d006      	beq.n	8011abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	695b      	ldr	r3, [r3, #20]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d002      	beq.n	8011abe <osThreadNew+0xca>
        mem = 1;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	623b      	str	r3, [r7, #32]
 8011abc:	e010      	b.n	8011ae0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	689b      	ldr	r3, [r3, #8]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10c      	bne.n	8011ae0 <osThreadNew+0xec>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	68db      	ldr	r3, [r3, #12]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d108      	bne.n	8011ae0 <osThreadNew+0xec>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	691b      	ldr	r3, [r3, #16]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d104      	bne.n	8011ae0 <osThreadNew+0xec>
          mem = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	623b      	str	r3, [r7, #32]
 8011ada:	e001      	b.n	8011ae0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011ae0:	6a3b      	ldr	r3, [r7, #32]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d110      	bne.n	8011b08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011aee:	9202      	str	r2, [sp, #8]
 8011af0:	9301      	str	r3, [sp, #4]
 8011af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011afc:	68f8      	ldr	r0, [r7, #12]
 8011afe:	f002 f89f 	bl	8013c40 <xTaskCreateStatic>
 8011b02:	4603      	mov	r3, r0
 8011b04:	613b      	str	r3, [r7, #16]
 8011b06:	e013      	b.n	8011b30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d110      	bne.n	8011b30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	f107 0310 	add.w	r3, r7, #16
 8011b16:	9301      	str	r3, [sp, #4]
 8011b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b20:	68f8      	ldr	r0, [r7, #12]
 8011b22:	f002 f8f0 	bl	8013d06 <xTaskCreate>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d001      	beq.n	8011b30 <osThreadNew+0x13c>
          hTask = NULL;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011b30:	693b      	ldr	r3, [r7, #16]
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3730      	adds	r7, #48	; 0x30
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	20023a3c 	.word	0x20023a3c

08011b40 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b46:	f3ef 8305 	mrs	r3, IPSR
 8011b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d10f      	bne.n	8011b72 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b52:	f3ef 8310 	mrs	r3, PRIMASK
 8011b56:	607b      	str	r3, [r7, #4]
  return(result);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d105      	bne.n	8011b6a <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8011b62:	603b      	str	r3, [r7, #0]
  return(result);
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d007      	beq.n	8011b7a <osThreadYield+0x3a>
 8011b6a:	4b0c      	ldr	r3, [pc, #48]	; (8011b9c <osThreadYield+0x5c>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b02      	cmp	r3, #2
 8011b70:	d103      	bne.n	8011b7a <osThreadYield+0x3a>
    stat = osErrorISR;
 8011b72:	f06f 0305 	mvn.w	r3, #5
 8011b76:	60fb      	str	r3, [r7, #12]
 8011b78:	e009      	b.n	8011b8e <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8011b7e:	4b08      	ldr	r3, [pc, #32]	; (8011ba0 <osThreadYield+0x60>)
 8011b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b84:	601a      	str	r2, [r3, #0]
 8011b86:	f3bf 8f4f 	dsb	sy
 8011b8a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3714      	adds	r7, #20
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	20023a3c 	.word	0x20023a3c
 8011ba0:	e000ed04 	.word	0xe000ed04

08011ba4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b086      	sub	sp, #24
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bac:	f3ef 8305 	mrs	r3, IPSR
 8011bb0:	613b      	str	r3, [r7, #16]
  return(result);
 8011bb2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10f      	bne.n	8011bd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8011bbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d105      	bne.n	8011bd0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8011bc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d007      	beq.n	8011be0 <osDelay+0x3c>
 8011bd0:	4b0a      	ldr	r3, [pc, #40]	; (8011bfc <osDelay+0x58>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2b02      	cmp	r3, #2
 8011bd6:	d103      	bne.n	8011be0 <osDelay+0x3c>
    stat = osErrorISR;
 8011bd8:	f06f 0305 	mvn.w	r3, #5
 8011bdc:	617b      	str	r3, [r7, #20]
 8011bde:	e007      	b.n	8011bf0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011be0:	2300      	movs	r3, #0
 8011be2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f002 f9d2 	bl	8013f94 <vTaskDelay>
    }
  }

  return (stat);
 8011bf0:	697b      	ldr	r3, [r7, #20]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3718      	adds	r7, #24
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	20023a3c 	.word	0x20023a3c

08011c00 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b08c      	sub	sp, #48	; 0x30
 8011c04:	af02      	add	r7, sp, #8
 8011c06:	60f8      	str	r0, [r7, #12]
 8011c08:	60b9      	str	r1, [r7, #8]
 8011c0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c10:	f3ef 8305 	mrs	r3, IPSR
 8011c14:	61bb      	str	r3, [r7, #24]
  return(result);
 8011c16:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	f040 8086 	bne.w	8011d2a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8011c22:	617b      	str	r3, [r7, #20]
  return(result);
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d105      	bne.n	8011c36 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8011c2e:	613b      	str	r3, [r7, #16]
  return(result);
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d003      	beq.n	8011c3e <osSemaphoreNew+0x3e>
 8011c36:	4b3f      	ldr	r3, [pc, #252]	; (8011d34 <osSemaphoreNew+0x134>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b02      	cmp	r3, #2
 8011c3c:	d075      	beq.n	8011d2a <osSemaphoreNew+0x12a>
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d072      	beq.n	8011d2a <osSemaphoreNew+0x12a>
 8011c44:	68ba      	ldr	r2, [r7, #8]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d86e      	bhi.n	8011d2a <osSemaphoreNew+0x12a>
    mem = -1;
 8011c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d015      	beq.n	8011c84 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	689b      	ldr	r3, [r3, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d006      	beq.n	8011c6e <osSemaphoreNew+0x6e>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	2b4f      	cmp	r3, #79	; 0x4f
 8011c66:	d902      	bls.n	8011c6e <osSemaphoreNew+0x6e>
        mem = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	623b      	str	r3, [r7, #32]
 8011c6c:	e00c      	b.n	8011c88 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d108      	bne.n	8011c88 <osSemaphoreNew+0x88>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d104      	bne.n	8011c88 <osSemaphoreNew+0x88>
          mem = 0;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	623b      	str	r3, [r7, #32]
 8011c82:	e001      	b.n	8011c88 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011c84:	2300      	movs	r3, #0
 8011c86:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c8e:	d04c      	beq.n	8011d2a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d128      	bne.n	8011ce8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d10a      	bne.n	8011cb2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	2203      	movs	r2, #3
 8011ca2:	9200      	str	r2, [sp, #0]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f000 ffdd 	bl	8012c68 <xQueueGenericCreateStatic>
 8011cae:	6278      	str	r0, [r7, #36]	; 0x24
 8011cb0:	e005      	b.n	8011cbe <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011cb2:	2203      	movs	r2, #3
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	2001      	movs	r0, #1
 8011cb8:	f001 f858 	bl	8012d6c <xQueueGenericCreate>
 8011cbc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d022      	beq.n	8011d0a <osSemaphoreNew+0x10a>
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d01f      	beq.n	8011d0a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011cca:	2300      	movs	r3, #0
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2100      	movs	r1, #0
 8011cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cd2:	f001 f923 	bl	8012f1c <xQueueGenericSend>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d016      	beq.n	8011d0a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8011cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cde:	f001 fdd9 	bl	8013894 <vQueueDelete>
            hSemaphore = NULL;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8011ce6:	e010      	b.n	8011d0a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8011ce8:	6a3b      	ldr	r3, [r7, #32]
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d108      	bne.n	8011d00 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	689b      	ldr	r3, [r3, #8]
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	68b9      	ldr	r1, [r7, #8]
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f001 f89d 	bl	8012e36 <xQueueCreateCountingSemaphoreStatic>
 8011cfc:	6278      	str	r0, [r7, #36]	; 0x24
 8011cfe:	e004      	b.n	8011d0a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d00:	68b9      	ldr	r1, [r7, #8]
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f001 f8d2 	bl	8012eac <xQueueCreateCountingSemaphore>
 8011d08:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00c      	beq.n	8011d2a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d003      	beq.n	8011d1e <osSemaphoreNew+0x11e>
          name = attr->name;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	61fb      	str	r3, [r7, #28]
 8011d1c:	e001      	b.n	8011d22 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011d22:	69f9      	ldr	r1, [r7, #28]
 8011d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d26:	f001 ff03 	bl	8013b30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3728      	adds	r7, #40	; 0x28
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	20023a3c 	.word	0x20023a3c

08011d38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b088      	sub	sp, #32
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d103      	bne.n	8011d58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011d50:	f06f 0303 	mvn.w	r3, #3
 8011d54:	61fb      	str	r3, [r7, #28]
 8011d56:	e04b      	b.n	8011df0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d58:	f3ef 8305 	mrs	r3, IPSR
 8011d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8011d5e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10f      	bne.n	8011d84 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d64:	f3ef 8310 	mrs	r3, PRIMASK
 8011d68:	613b      	str	r3, [r7, #16]
  return(result);
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d105      	bne.n	8011d7c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d70:	f3ef 8311 	mrs	r3, BASEPRI
 8011d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d026      	beq.n	8011dca <osSemaphoreAcquire+0x92>
 8011d7c:	4b1f      	ldr	r3, [pc, #124]	; (8011dfc <osSemaphoreAcquire+0xc4>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	d122      	bne.n	8011dca <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d003      	beq.n	8011d92 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011d8a:	f06f 0303 	mvn.w	r3, #3
 8011d8e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011d90:	e02d      	b.n	8011dee <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011d92:	2300      	movs	r3, #0
 8011d94:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011d96:	f107 0308 	add.w	r3, r7, #8
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	69b8      	ldr	r0, [r7, #24]
 8011da0:	f001 fcf2 	bl	8013788 <xQueueReceiveFromISR>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d003      	beq.n	8011db2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8011daa:	f06f 0302 	mvn.w	r3, #2
 8011dae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011db0:	e01d      	b.n	8011dee <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d01a      	beq.n	8011dee <osSemaphoreAcquire+0xb6>
 8011db8:	4b11      	ldr	r3, [pc, #68]	; (8011e00 <osSemaphoreAcquire+0xc8>)
 8011dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dbe:	601a      	str	r2, [r3, #0]
 8011dc0:	f3bf 8f4f 	dsb	sy
 8011dc4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011dc8:	e011      	b.n	8011dee <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	69b8      	ldr	r0, [r7, #24]
 8011dce:	f001 fbc7 	bl	8013560 <xQueueSemaphoreTake>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d00b      	beq.n	8011df0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d003      	beq.n	8011de6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011dde:	f06f 0301 	mvn.w	r3, #1
 8011de2:	61fb      	str	r3, [r7, #28]
 8011de4:	e004      	b.n	8011df0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8011de6:	f06f 0302 	mvn.w	r3, #2
 8011dea:	61fb      	str	r3, [r7, #28]
 8011dec:	e000      	b.n	8011df0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011dee:	bf00      	nop
      }
    }
  }

  return (stat);
 8011df0:	69fb      	ldr	r3, [r7, #28]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3720      	adds	r7, #32
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	20023a3c 	.word	0x20023a3c
 8011e00:	e000ed04 	.word	0xe000ed04

08011e04 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b088      	sub	sp, #32
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d103      	bne.n	8011e22 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011e1a:	f06f 0303 	mvn.w	r3, #3
 8011e1e:	61fb      	str	r3, [r7, #28]
 8011e20:	e03e      	b.n	8011ea0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e22:	f3ef 8305 	mrs	r3, IPSR
 8011e26:	617b      	str	r3, [r7, #20]
  return(result);
 8011e28:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10f      	bne.n	8011e4e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e32:	613b      	str	r3, [r7, #16]
  return(result);
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d105      	bne.n	8011e46 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8011e3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d01e      	beq.n	8011e84 <osSemaphoreRelease+0x80>
 8011e46:	4b19      	ldr	r3, [pc, #100]	; (8011eac <osSemaphoreRelease+0xa8>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b02      	cmp	r3, #2
 8011e4c:	d11a      	bne.n	8011e84 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e52:	f107 0308 	add.w	r3, r7, #8
 8011e56:	4619      	mov	r1, r3
 8011e58:	69b8      	ldr	r0, [r7, #24]
 8011e5a:	f001 fa05 	bl	8013268 <xQueueGiveFromISR>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d003      	beq.n	8011e6c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011e64:	f06f 0302 	mvn.w	r3, #2
 8011e68:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e6a:	e018      	b.n	8011e9e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d015      	beq.n	8011e9e <osSemaphoreRelease+0x9a>
 8011e72:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <osSemaphoreRelease+0xac>)
 8011e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e78:	601a      	str	r2, [r3, #0]
 8011e7a:	f3bf 8f4f 	dsb	sy
 8011e7e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e82:	e00c      	b.n	8011e9e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011e84:	2300      	movs	r3, #0
 8011e86:	2200      	movs	r2, #0
 8011e88:	2100      	movs	r1, #0
 8011e8a:	69b8      	ldr	r0, [r7, #24]
 8011e8c:	f001 f846 	bl	8012f1c <xQueueGenericSend>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d004      	beq.n	8011ea0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8011e96:	f06f 0302 	mvn.w	r3, #2
 8011e9a:	61fb      	str	r3, [r7, #28]
 8011e9c:	e000      	b.n	8011ea0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e9e:	bf00      	nop
    }
  }

  return (stat);
 8011ea0:	69fb      	ldr	r3, [r7, #28]
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3720      	adds	r7, #32
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	20023a3c 	.word	0x20023a3c
 8011eb0:	e000ed04 	.word	0xe000ed04

08011eb4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b08c      	sub	sp, #48	; 0x30
 8011eb8:	af02      	add	r7, sp, #8
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ec4:	f3ef 8305 	mrs	r3, IPSR
 8011ec8:	61bb      	str	r3, [r7, #24]
  return(result);
 8011eca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d16f      	bne.n	8011fb0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d105      	bne.n	8011ee8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011edc:	f3ef 8311 	mrs	r3, BASEPRI
 8011ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d003      	beq.n	8011ef0 <osMessageQueueNew+0x3c>
 8011ee8:	4b34      	ldr	r3, [pc, #208]	; (8011fbc <osMessageQueueNew+0x108>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b02      	cmp	r3, #2
 8011eee:	d05f      	beq.n	8011fb0 <osMessageQueueNew+0xfc>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d05c      	beq.n	8011fb0 <osMessageQueueNew+0xfc>
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d059      	beq.n	8011fb0 <osMessageQueueNew+0xfc>
    mem = -1;
 8011efc:	f04f 33ff 	mov.w	r3, #4294967295
 8011f00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d029      	beq.n	8011f5c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d012      	beq.n	8011f36 <osMessageQueueNew+0x82>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	2b4f      	cmp	r3, #79	; 0x4f
 8011f16:	d90e      	bls.n	8011f36 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00a      	beq.n	8011f36 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	695a      	ldr	r2, [r3, #20]
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	68b9      	ldr	r1, [r7, #8]
 8011f28:	fb01 f303 	mul.w	r3, r1, r3
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d302      	bcc.n	8011f36 <osMessageQueueNew+0x82>
        mem = 1;
 8011f30:	2301      	movs	r3, #1
 8011f32:	623b      	str	r3, [r7, #32]
 8011f34:	e014      	b.n	8011f60 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	689b      	ldr	r3, [r3, #8]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d110      	bne.n	8011f60 <osMessageQueueNew+0xac>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d10c      	bne.n	8011f60 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d108      	bne.n	8011f60 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	695b      	ldr	r3, [r3, #20]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d104      	bne.n	8011f60 <osMessageQueueNew+0xac>
          mem = 0;
 8011f56:	2300      	movs	r3, #0
 8011f58:	623b      	str	r3, [r7, #32]
 8011f5a:	e001      	b.n	8011f60 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011f60:	6a3b      	ldr	r3, [r7, #32]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d10b      	bne.n	8011f7e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	691a      	ldr	r2, [r3, #16]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	2100      	movs	r1, #0
 8011f70:	9100      	str	r1, [sp, #0]
 8011f72:	68b9      	ldr	r1, [r7, #8]
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f000 fe77 	bl	8012c68 <xQueueGenericCreateStatic>
 8011f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8011f7c:	e008      	b.n	8011f90 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8011f7e:	6a3b      	ldr	r3, [r7, #32]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d105      	bne.n	8011f90 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011f84:	2200      	movs	r2, #0
 8011f86:	68b9      	ldr	r1, [r7, #8]
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f000 feef 	bl	8012d6c <xQueueGenericCreate>
 8011f8e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00c      	beq.n	8011fb0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d003      	beq.n	8011fa4 <osMessageQueueNew+0xf0>
        name = attr->name;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	61fb      	str	r3, [r7, #28]
 8011fa2:	e001      	b.n	8011fa8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8011fa8:	69f9      	ldr	r1, [r7, #28]
 8011faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fac:	f001 fdc0 	bl	8013b30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3728      	adds	r7, #40	; 0x28
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	20023a3c 	.word	0x20023a3c

08011fc0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b08a      	sub	sp, #40	; 0x28
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	603b      	str	r3, [r7, #0]
 8011fcc:	4613      	mov	r3, r2
 8011fce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fd8:	f3ef 8305 	mrs	r3, IPSR
 8011fdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8011fde:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10f      	bne.n	8012004 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8011fe8:	61bb      	str	r3, [r7, #24]
  return(result);
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d105      	bne.n	8011ffc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8011ff4:	617b      	str	r3, [r7, #20]
  return(result);
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d02c      	beq.n	8012056 <osMessageQueuePut+0x96>
 8011ffc:	4b28      	ldr	r3, [pc, #160]	; (80120a0 <osMessageQueuePut+0xe0>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2b02      	cmp	r3, #2
 8012002:	d128      	bne.n	8012056 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d005      	beq.n	8012016 <osMessageQueuePut+0x56>
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <osMessageQueuePut+0x56>
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d003      	beq.n	801201e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012016:	f06f 0303 	mvn.w	r3, #3
 801201a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801201c:	e039      	b.n	8012092 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801201e:	2300      	movs	r3, #0
 8012020:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012022:	f107 0210 	add.w	r2, r7, #16
 8012026:	2300      	movs	r3, #0
 8012028:	68b9      	ldr	r1, [r7, #8]
 801202a:	6a38      	ldr	r0, [r7, #32]
 801202c:	f001 f87c 	bl	8013128 <xQueueGenericSendFromISR>
 8012030:	4603      	mov	r3, r0
 8012032:	2b01      	cmp	r3, #1
 8012034:	d003      	beq.n	801203e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012036:	f06f 0302 	mvn.w	r3, #2
 801203a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801203c:	e029      	b.n	8012092 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d026      	beq.n	8012092 <osMessageQueuePut+0xd2>
 8012044:	4b17      	ldr	r3, [pc, #92]	; (80120a4 <osMessageQueuePut+0xe4>)
 8012046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801204a:	601a      	str	r2, [r3, #0]
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012054:	e01d      	b.n	8012092 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <osMessageQueuePut+0xa2>
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d103      	bne.n	801206a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012062:	f06f 0303 	mvn.w	r3, #3
 8012066:	627b      	str	r3, [r7, #36]	; 0x24
 8012068:	e014      	b.n	8012094 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801206a:	2300      	movs	r3, #0
 801206c:	683a      	ldr	r2, [r7, #0]
 801206e:	68b9      	ldr	r1, [r7, #8]
 8012070:	6a38      	ldr	r0, [r7, #32]
 8012072:	f000 ff53 	bl	8012f1c <xQueueGenericSend>
 8012076:	4603      	mov	r3, r0
 8012078:	2b01      	cmp	r3, #1
 801207a:	d00b      	beq.n	8012094 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012082:	f06f 0301 	mvn.w	r3, #1
 8012086:	627b      	str	r3, [r7, #36]	; 0x24
 8012088:	e004      	b.n	8012094 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801208a:	f06f 0302 	mvn.w	r3, #2
 801208e:	627b      	str	r3, [r7, #36]	; 0x24
 8012090:	e000      	b.n	8012094 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012092:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012096:	4618      	mov	r0, r3
 8012098:	3728      	adds	r7, #40	; 0x28
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	20023a3c 	.word	0x20023a3c
 80120a4:	e000ed04 	.word	0xe000ed04

080120a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b08a      	sub	sp, #40	; 0x28
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80120ba:	2300      	movs	r3, #0
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120be:	f3ef 8305 	mrs	r3, IPSR
 80120c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80120c4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d10f      	bne.n	80120ea <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ca:	f3ef 8310 	mrs	r3, PRIMASK
 80120ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d105      	bne.n	80120e2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120d6:	f3ef 8311 	mrs	r3, BASEPRI
 80120da:	617b      	str	r3, [r7, #20]
  return(result);
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d02c      	beq.n	801213c <osMessageQueueGet+0x94>
 80120e2:	4b28      	ldr	r3, [pc, #160]	; (8012184 <osMessageQueueGet+0xdc>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	d128      	bne.n	801213c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d005      	beq.n	80120fc <osMessageQueueGet+0x54>
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d002      	beq.n	80120fc <osMessageQueueGet+0x54>
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d003      	beq.n	8012104 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80120fc:	f06f 0303 	mvn.w	r3, #3
 8012100:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012102:	e038      	b.n	8012176 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012104:	2300      	movs	r3, #0
 8012106:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012108:	f107 0310 	add.w	r3, r7, #16
 801210c:	461a      	mov	r2, r3
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	6a38      	ldr	r0, [r7, #32]
 8012112:	f001 fb39 	bl	8013788 <xQueueReceiveFromISR>
 8012116:	4603      	mov	r3, r0
 8012118:	2b01      	cmp	r3, #1
 801211a:	d003      	beq.n	8012124 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801211c:	f06f 0302 	mvn.w	r3, #2
 8012120:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012122:	e028      	b.n	8012176 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d025      	beq.n	8012176 <osMessageQueueGet+0xce>
 801212a:	4b17      	ldr	r3, [pc, #92]	; (8012188 <osMessageQueueGet+0xe0>)
 801212c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012130:	601a      	str	r2, [r3, #0]
 8012132:	f3bf 8f4f 	dsb	sy
 8012136:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801213a:	e01c      	b.n	8012176 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801213c:	6a3b      	ldr	r3, [r7, #32]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d002      	beq.n	8012148 <osMessageQueueGet+0xa0>
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d103      	bne.n	8012150 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012148:	f06f 0303 	mvn.w	r3, #3
 801214c:	627b      	str	r3, [r7, #36]	; 0x24
 801214e:	e013      	b.n	8012178 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012150:	683a      	ldr	r2, [r7, #0]
 8012152:	68b9      	ldr	r1, [r7, #8]
 8012154:	6a38      	ldr	r0, [r7, #32]
 8012156:	f001 f91d 	bl	8013394 <xQueueReceive>
 801215a:	4603      	mov	r3, r0
 801215c:	2b01      	cmp	r3, #1
 801215e:	d00b      	beq.n	8012178 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d003      	beq.n	801216e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012166:	f06f 0301 	mvn.w	r3, #1
 801216a:	627b      	str	r3, [r7, #36]	; 0x24
 801216c:	e004      	b.n	8012178 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801216e:	f06f 0302 	mvn.w	r3, #2
 8012172:	627b      	str	r3, [r7, #36]	; 0x24
 8012174:	e000      	b.n	8012178 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012176:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801217a:	4618      	mov	r0, r3
 801217c:	3728      	adds	r7, #40	; 0x28
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	20023a3c 	.word	0x20023a3c
 8012188:	e000ed04 	.word	0xe000ed04

0801218c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	4a07      	ldr	r2, [pc, #28]	; (80121b8 <vApplicationGetIdleTaskMemory+0x2c>)
 801219c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	4a06      	ldr	r2, [pc, #24]	; (80121bc <vApplicationGetIdleTaskMemory+0x30>)
 80121a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2280      	movs	r2, #128	; 0x80
 80121a8:	601a      	str	r2, [r3, #0]
}
 80121aa:	bf00      	nop
 80121ac:	3714      	adds	r7, #20
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20023a40 	.word	0x20023a40
 80121bc:	20023a9c 	.word	0x20023a9c

080121c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80121c0:	b480      	push	{r7}
 80121c2:	b085      	sub	sp, #20
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	4a07      	ldr	r2, [pc, #28]	; (80121ec <vApplicationGetTimerTaskMemory+0x2c>)
 80121d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	4a06      	ldr	r2, [pc, #24]	; (80121f0 <vApplicationGetTimerTaskMemory+0x30>)
 80121d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121de:	601a      	str	r2, [r3, #0]
}
 80121e0:	bf00      	nop
 80121e2:	3714      	adds	r7, #20
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr
 80121ec:	20023c9c 	.word	0x20023c9c
 80121f0:	20023cf8 	.word	0x20023cf8

080121f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b08a      	sub	sp, #40	; 0x28
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80121fc:	2300      	movs	r3, #0
 80121fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012200:	f001 ff68 	bl	80140d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012204:	4b5b      	ldr	r3, [pc, #364]	; (8012374 <pvPortMalloc+0x180>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d101      	bne.n	8012210 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801220c:	f000 f91a 	bl	8012444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012210:	4b59      	ldr	r3, [pc, #356]	; (8012378 <pvPortMalloc+0x184>)
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	4013      	ands	r3, r2
 8012218:	2b00      	cmp	r3, #0
 801221a:	f040 8092 	bne.w	8012342 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d01f      	beq.n	8012264 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012224:	2208      	movs	r2, #8
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	4413      	add	r3, r2
 801222a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f003 0307 	and.w	r3, r3, #7
 8012232:	2b00      	cmp	r3, #0
 8012234:	d016      	beq.n	8012264 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f023 0307 	bic.w	r3, r3, #7
 801223c:	3308      	adds	r3, #8
 801223e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f003 0307 	and.w	r3, r3, #7
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00c      	beq.n	8012264 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801224a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801224e:	b672      	cpsid	i
 8012250:	f383 8811 	msr	BASEPRI, r3
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	b662      	cpsie	i
 801225e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012260:	bf00      	nop
 8012262:	e7fe      	b.n	8012262 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d06b      	beq.n	8012342 <pvPortMalloc+0x14e>
 801226a:	4b44      	ldr	r3, [pc, #272]	; (801237c <pvPortMalloc+0x188>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	429a      	cmp	r2, r3
 8012272:	d866      	bhi.n	8012342 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012274:	4b42      	ldr	r3, [pc, #264]	; (8012380 <pvPortMalloc+0x18c>)
 8012276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012278:	4b41      	ldr	r3, [pc, #260]	; (8012380 <pvPortMalloc+0x18c>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801227e:	e004      	b.n	801228a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	429a      	cmp	r2, r3
 8012292:	d903      	bls.n	801229c <pvPortMalloc+0xa8>
 8012294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d1f1      	bne.n	8012280 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801229c:	4b35      	ldr	r3, [pc, #212]	; (8012374 <pvPortMalloc+0x180>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d04d      	beq.n	8012342 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2208      	movs	r2, #8
 80122ac:	4413      	add	r3, r2
 80122ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	6a3b      	ldr	r3, [r7, #32]
 80122b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	685a      	ldr	r2, [r3, #4]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	1ad2      	subs	r2, r2, r3
 80122c0:	2308      	movs	r3, #8
 80122c2:	005b      	lsls	r3, r3, #1
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d921      	bls.n	801230c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80122c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	4413      	add	r3, r2
 80122ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	f003 0307 	and.w	r3, r3, #7
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00c      	beq.n	80122f4 <pvPortMalloc+0x100>
	__asm volatile
 80122da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122de:	b672      	cpsid	i
 80122e0:	f383 8811 	msr	BASEPRI, r3
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	b662      	cpsie	i
 80122ee:	613b      	str	r3, [r7, #16]
}
 80122f0:	bf00      	nop
 80122f2:	e7fe      	b.n	80122f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80122f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f6:	685a      	ldr	r2, [r3, #4]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	1ad2      	subs	r2, r2, r3
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012302:	687a      	ldr	r2, [r7, #4]
 8012304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012306:	69b8      	ldr	r0, [r7, #24]
 8012308:	f000 f8fe 	bl	8012508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801230c:	4b1b      	ldr	r3, [pc, #108]	; (801237c <pvPortMalloc+0x188>)
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	1ad3      	subs	r3, r2, r3
 8012316:	4a19      	ldr	r2, [pc, #100]	; (801237c <pvPortMalloc+0x188>)
 8012318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801231a:	4b18      	ldr	r3, [pc, #96]	; (801237c <pvPortMalloc+0x188>)
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	4b19      	ldr	r3, [pc, #100]	; (8012384 <pvPortMalloc+0x190>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	429a      	cmp	r2, r3
 8012324:	d203      	bcs.n	801232e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012326:	4b15      	ldr	r3, [pc, #84]	; (801237c <pvPortMalloc+0x188>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a16      	ldr	r2, [pc, #88]	; (8012384 <pvPortMalloc+0x190>)
 801232c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	685a      	ldr	r2, [r3, #4]
 8012332:	4b11      	ldr	r3, [pc, #68]	; (8012378 <pvPortMalloc+0x184>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	431a      	orrs	r2, r3
 8012338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233e:	2200      	movs	r2, #0
 8012340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012342:	f001 fed5 	bl	80140f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	f003 0307 	and.w	r3, r3, #7
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00c      	beq.n	801236a <pvPortMalloc+0x176>
	__asm volatile
 8012350:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012354:	b672      	cpsid	i
 8012356:	f383 8811 	msr	BASEPRI, r3
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	b662      	cpsie	i
 8012364:	60fb      	str	r3, [r7, #12]
}
 8012366:	bf00      	nop
 8012368:	e7fe      	b.n	8012368 <pvPortMalloc+0x174>
	return pvReturn;
 801236a:	69fb      	ldr	r3, [r7, #28]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3728      	adds	r7, #40	; 0x28
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	20056100 	.word	0x20056100
 8012378:	2005610c 	.word	0x2005610c
 801237c:	20056104 	.word	0x20056104
 8012380:	200560f8 	.word	0x200560f8
 8012384:	20056108 	.word	0x20056108

08012388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b086      	sub	sp, #24
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d04c      	beq.n	8012434 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801239a:	2308      	movs	r3, #8
 801239c:	425b      	negs	r3, r3
 801239e:	697a      	ldr	r2, [r7, #20]
 80123a0:	4413      	add	r3, r2
 80123a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	4b23      	ldr	r3, [pc, #140]	; (801243c <vPortFree+0xb4>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4013      	ands	r3, r2
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d10c      	bne.n	80123d0 <vPortFree+0x48>
	__asm volatile
 80123b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123ba:	b672      	cpsid	i
 80123bc:	f383 8811 	msr	BASEPRI, r3
 80123c0:	f3bf 8f6f 	isb	sy
 80123c4:	f3bf 8f4f 	dsb	sy
 80123c8:	b662      	cpsie	i
 80123ca:	60fb      	str	r3, [r7, #12]
}
 80123cc:	bf00      	nop
 80123ce:	e7fe      	b.n	80123ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d00c      	beq.n	80123f2 <vPortFree+0x6a>
	__asm volatile
 80123d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123dc:	b672      	cpsid	i
 80123de:	f383 8811 	msr	BASEPRI, r3
 80123e2:	f3bf 8f6f 	isb	sy
 80123e6:	f3bf 8f4f 	dsb	sy
 80123ea:	b662      	cpsie	i
 80123ec:	60bb      	str	r3, [r7, #8]
}
 80123ee:	bf00      	nop
 80123f0:	e7fe      	b.n	80123f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	685a      	ldr	r2, [r3, #4]
 80123f6:	4b11      	ldr	r3, [pc, #68]	; (801243c <vPortFree+0xb4>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4013      	ands	r3, r2
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d019      	beq.n	8012434 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d115      	bne.n	8012434 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	685a      	ldr	r2, [r3, #4]
 801240c:	4b0b      	ldr	r3, [pc, #44]	; (801243c <vPortFree+0xb4>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	43db      	mvns	r3, r3
 8012412:	401a      	ands	r2, r3
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012418:	f001 fe5c 	bl	80140d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	685a      	ldr	r2, [r3, #4]
 8012420:	4b07      	ldr	r3, [pc, #28]	; (8012440 <vPortFree+0xb8>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4413      	add	r3, r2
 8012426:	4a06      	ldr	r2, [pc, #24]	; (8012440 <vPortFree+0xb8>)
 8012428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801242a:	6938      	ldr	r0, [r7, #16]
 801242c:	f000 f86c 	bl	8012508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012430:	f001 fe5e 	bl	80140f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012434:	bf00      	nop
 8012436:	3718      	adds	r7, #24
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	2005610c 	.word	0x2005610c
 8012440:	20056104 	.word	0x20056104

08012444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012444:	b480      	push	{r7}
 8012446:	b085      	sub	sp, #20
 8012448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801244a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 801244e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012450:	4b27      	ldr	r3, [pc, #156]	; (80124f0 <prvHeapInit+0xac>)
 8012452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f003 0307 	and.w	r3, r3, #7
 801245a:	2b00      	cmp	r3, #0
 801245c:	d00c      	beq.n	8012478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	3307      	adds	r3, #7
 8012462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f023 0307 	bic.w	r3, r3, #7
 801246a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801246c:	68ba      	ldr	r2, [r7, #8]
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	4a1f      	ldr	r2, [pc, #124]	; (80124f0 <prvHeapInit+0xac>)
 8012474:	4413      	add	r3, r2
 8012476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801247c:	4a1d      	ldr	r2, [pc, #116]	; (80124f4 <prvHeapInit+0xb0>)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012482:	4b1c      	ldr	r3, [pc, #112]	; (80124f4 <prvHeapInit+0xb0>)
 8012484:	2200      	movs	r2, #0
 8012486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	4413      	add	r3, r2
 801248e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012490:	2208      	movs	r2, #8
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	1a9b      	subs	r3, r3, r2
 8012496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f023 0307 	bic.w	r3, r3, #7
 801249e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	4a15      	ldr	r2, [pc, #84]	; (80124f8 <prvHeapInit+0xb4>)
 80124a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80124a6:	4b14      	ldr	r3, [pc, #80]	; (80124f8 <prvHeapInit+0xb4>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2200      	movs	r2, #0
 80124ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80124ae:	4b12      	ldr	r3, [pc, #72]	; (80124f8 <prvHeapInit+0xb4>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2200      	movs	r2, #0
 80124b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	1ad2      	subs	r2, r2, r3
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80124c4:	4b0c      	ldr	r3, [pc, #48]	; (80124f8 <prvHeapInit+0xb4>)
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	4a0a      	ldr	r2, [pc, #40]	; (80124fc <prvHeapInit+0xb8>)
 80124d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	4a09      	ldr	r2, [pc, #36]	; (8012500 <prvHeapInit+0xbc>)
 80124da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80124dc:	4b09      	ldr	r3, [pc, #36]	; (8012504 <prvHeapInit+0xc0>)
 80124de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80124e2:	601a      	str	r2, [r3, #0]
}
 80124e4:	bf00      	nop
 80124e6:	3714      	adds	r7, #20
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr
 80124f0:	200240f8 	.word	0x200240f8
 80124f4:	200560f8 	.word	0x200560f8
 80124f8:	20056100 	.word	0x20056100
 80124fc:	20056108 	.word	0x20056108
 8012500:	20056104 	.word	0x20056104
 8012504:	2005610c 	.word	0x2005610c

08012508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012508:	b480      	push	{r7}
 801250a:	b085      	sub	sp, #20
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012510:	4b28      	ldr	r3, [pc, #160]	; (80125b4 <prvInsertBlockIntoFreeList+0xac>)
 8012512:	60fb      	str	r3, [r7, #12]
 8012514:	e002      	b.n	801251c <prvInsertBlockIntoFreeList+0x14>
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	60fb      	str	r3, [r7, #12]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d8f7      	bhi.n	8012516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	68ba      	ldr	r2, [r7, #8]
 8012530:	4413      	add	r3, r2
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	429a      	cmp	r2, r3
 8012536:	d108      	bne.n	801254a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	685a      	ldr	r2, [r3, #4]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	441a      	add	r2, r3
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	441a      	add	r2, r3
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	429a      	cmp	r2, r3
 801255c:	d118      	bne.n	8012590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	4b15      	ldr	r3, [pc, #84]	; (80125b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	429a      	cmp	r2, r3
 8012568:	d00d      	beq.n	8012586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	685a      	ldr	r2, [r3, #4]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	441a      	add	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	601a      	str	r2, [r3, #0]
 8012584:	e008      	b.n	8012598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012586:	4b0c      	ldr	r3, [pc, #48]	; (80125b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012588:	681a      	ldr	r2, [r3, #0]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	601a      	str	r2, [r3, #0]
 801258e:	e003      	b.n	8012598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012598:	68fa      	ldr	r2, [r7, #12]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	429a      	cmp	r2, r3
 801259e:	d002      	beq.n	80125a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125a6:	bf00      	nop
 80125a8:	3714      	adds	r7, #20
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	200560f8 	.word	0x200560f8
 80125b8:	20056100 	.word	0x20056100

080125bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f103 0208 	add.w	r2, r3, #8
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f04f 32ff 	mov.w	r2, #4294967295
 80125d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f103 0208 	add.w	r2, r3, #8
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f103 0208 	add.w	r2, r3, #8
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2200      	movs	r2, #0
 80125ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80125f0:	bf00      	nop
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2200      	movs	r2, #0
 8012608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801260a:	bf00      	nop
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr

08012616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012616:	b480      	push	{r7}
 8012618:	b085      	sub	sp, #20
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	689a      	ldr	r2, [r3, #8]
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	683a      	ldr	r2, [r7, #0]
 801263a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	683a      	ldr	r2, [r7, #0]
 8012640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	1c5a      	adds	r2, r3, #1
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	601a      	str	r2, [r3, #0]
}
 8012652:	bf00      	nop
 8012654:	3714      	adds	r7, #20
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr

0801265e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801265e:	b480      	push	{r7}
 8012660:	b085      	sub	sp, #20
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
 8012666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012674:	d103      	bne.n	801267e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	691b      	ldr	r3, [r3, #16]
 801267a:	60fb      	str	r3, [r7, #12]
 801267c:	e00c      	b.n	8012698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	3308      	adds	r3, #8
 8012682:	60fb      	str	r3, [r7, #12]
 8012684:	e002      	b.n	801268c <vListInsert+0x2e>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	429a      	cmp	r2, r3
 8012696:	d2f6      	bcs.n	8012686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	685a      	ldr	r2, [r3, #4]
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	68fa      	ldr	r2, [r7, #12]
 80126ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	683a      	ldr	r2, [r7, #0]
 80126b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	1c5a      	adds	r2, r3, #1
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	601a      	str	r2, [r3, #0]
}
 80126c4:	bf00      	nop
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr

080126d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	691b      	ldr	r3, [r3, #16]
 80126dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	6892      	ldr	r2, [r2, #8]
 80126e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	689b      	ldr	r3, [r3, #8]
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	6852      	ldr	r2, [r2, #4]
 80126f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d103      	bne.n	8012704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	689a      	ldr	r2, [r3, #8]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2200      	movs	r2, #0
 8012708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	1e5a      	subs	r2, r3, #1
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
}
 8012718:	4618      	mov	r0, r3
 801271a:	3714      	adds	r7, #20
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr

08012724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012724:	b480      	push	{r7}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	3b04      	subs	r3, #4
 8012734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801273c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	3b04      	subs	r3, #4
 8012742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	f023 0201 	bic.w	r2, r3, #1
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	3b04      	subs	r3, #4
 8012752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012754:	4a0c      	ldr	r2, [pc, #48]	; (8012788 <pxPortInitialiseStack+0x64>)
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3b14      	subs	r3, #20
 801275e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3b04      	subs	r3, #4
 801276a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f06f 0202 	mvn.w	r2, #2
 8012772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3b20      	subs	r3, #32
 8012778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801277a:	68fb      	ldr	r3, [r7, #12]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr
 8012788:	0801278d 	.word	0x0801278d

0801278c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012792:	2300      	movs	r3, #0
 8012794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012796:	4b14      	ldr	r3, [pc, #80]	; (80127e8 <prvTaskExitError+0x5c>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801279e:	d00c      	beq.n	80127ba <prvTaskExitError+0x2e>
	__asm volatile
 80127a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127a4:	b672      	cpsid	i
 80127a6:	f383 8811 	msr	BASEPRI, r3
 80127aa:	f3bf 8f6f 	isb	sy
 80127ae:	f3bf 8f4f 	dsb	sy
 80127b2:	b662      	cpsie	i
 80127b4:	60fb      	str	r3, [r7, #12]
}
 80127b6:	bf00      	nop
 80127b8:	e7fe      	b.n	80127b8 <prvTaskExitError+0x2c>
	__asm volatile
 80127ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127be:	b672      	cpsid	i
 80127c0:	f383 8811 	msr	BASEPRI, r3
 80127c4:	f3bf 8f6f 	isb	sy
 80127c8:	f3bf 8f4f 	dsb	sy
 80127cc:	b662      	cpsie	i
 80127ce:	60bb      	str	r3, [r7, #8]
}
 80127d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80127d2:	bf00      	nop
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d0fc      	beq.n	80127d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80127da:	bf00      	nop
 80127dc:	bf00      	nop
 80127de:	3714      	adds	r7, #20
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr
 80127e8:	20000020 	.word	0x20000020
 80127ec:	00000000 	.word	0x00000000

080127f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <pxCurrentTCBConst2>)
 80127f2:	6819      	ldr	r1, [r3, #0]
 80127f4:	6808      	ldr	r0, [r1, #0]
 80127f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fa:	f380 8809 	msr	PSP, r0
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f04f 0000 	mov.w	r0, #0
 8012806:	f380 8811 	msr	BASEPRI, r0
 801280a:	4770      	bx	lr
 801280c:	f3af 8000 	nop.w

08012810 <pxCurrentTCBConst2>:
 8012810:	20056118 	.word	0x20056118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012814:	bf00      	nop
 8012816:	bf00      	nop

08012818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012818:	4808      	ldr	r0, [pc, #32]	; (801283c <prvPortStartFirstTask+0x24>)
 801281a:	6800      	ldr	r0, [r0, #0]
 801281c:	6800      	ldr	r0, [r0, #0]
 801281e:	f380 8808 	msr	MSP, r0
 8012822:	f04f 0000 	mov.w	r0, #0
 8012826:	f380 8814 	msr	CONTROL, r0
 801282a:	b662      	cpsie	i
 801282c:	b661      	cpsie	f
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	df00      	svc	0
 8012838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801283a:	bf00      	nop
 801283c:	e000ed08 	.word	0xe000ed08

08012840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012846:	4b37      	ldr	r3, [pc, #220]	; (8012924 <xPortStartScheduler+0xe4>)
 8012848:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	b2db      	uxtb	r3, r3
 8012850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	22ff      	movs	r2, #255	; 0xff
 8012856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	b2db      	uxtb	r3, r3
 801285e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012860:	78fb      	ldrb	r3, [r7, #3]
 8012862:	b2db      	uxtb	r3, r3
 8012864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012868:	b2da      	uxtb	r2, r3
 801286a:	4b2f      	ldr	r3, [pc, #188]	; (8012928 <xPortStartScheduler+0xe8>)
 801286c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801286e:	4b2f      	ldr	r3, [pc, #188]	; (801292c <xPortStartScheduler+0xec>)
 8012870:	2207      	movs	r2, #7
 8012872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012874:	e009      	b.n	801288a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012876:	4b2d      	ldr	r3, [pc, #180]	; (801292c <xPortStartScheduler+0xec>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	3b01      	subs	r3, #1
 801287c:	4a2b      	ldr	r2, [pc, #172]	; (801292c <xPortStartScheduler+0xec>)
 801287e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012880:	78fb      	ldrb	r3, [r7, #3]
 8012882:	b2db      	uxtb	r3, r3
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	b2db      	uxtb	r3, r3
 8012888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801288a:	78fb      	ldrb	r3, [r7, #3]
 801288c:	b2db      	uxtb	r3, r3
 801288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012892:	2b80      	cmp	r3, #128	; 0x80
 8012894:	d0ef      	beq.n	8012876 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012896:	4b25      	ldr	r3, [pc, #148]	; (801292c <xPortStartScheduler+0xec>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f1c3 0307 	rsb	r3, r3, #7
 801289e:	2b04      	cmp	r3, #4
 80128a0:	d00c      	beq.n	80128bc <xPortStartScheduler+0x7c>
	__asm volatile
 80128a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128a6:	b672      	cpsid	i
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	b662      	cpsie	i
 80128b6:	60bb      	str	r3, [r7, #8]
}
 80128b8:	bf00      	nop
 80128ba:	e7fe      	b.n	80128ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80128bc:	4b1b      	ldr	r3, [pc, #108]	; (801292c <xPortStartScheduler+0xec>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	021b      	lsls	r3, r3, #8
 80128c2:	4a1a      	ldr	r2, [pc, #104]	; (801292c <xPortStartScheduler+0xec>)
 80128c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80128c6:	4b19      	ldr	r3, [pc, #100]	; (801292c <xPortStartScheduler+0xec>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80128ce:	4a17      	ldr	r2, [pc, #92]	; (801292c <xPortStartScheduler+0xec>)
 80128d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	b2da      	uxtb	r2, r3
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80128da:	4b15      	ldr	r3, [pc, #84]	; (8012930 <xPortStartScheduler+0xf0>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	4a14      	ldr	r2, [pc, #80]	; (8012930 <xPortStartScheduler+0xf0>)
 80128e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80128e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80128e6:	4b12      	ldr	r3, [pc, #72]	; (8012930 <xPortStartScheduler+0xf0>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a11      	ldr	r2, [pc, #68]	; (8012930 <xPortStartScheduler+0xf0>)
 80128ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80128f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80128f2:	f000 f8dd 	bl	8012ab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80128f6:	4b0f      	ldr	r3, [pc, #60]	; (8012934 <xPortStartScheduler+0xf4>)
 80128f8:	2200      	movs	r2, #0
 80128fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80128fc:	f000 f8fc 	bl	8012af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012900:	4b0d      	ldr	r3, [pc, #52]	; (8012938 <xPortStartScheduler+0xf8>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	4a0c      	ldr	r2, [pc, #48]	; (8012938 <xPortStartScheduler+0xf8>)
 8012906:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801290a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801290c:	f7ff ff84 	bl	8012818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012910:	f001 fd5a 	bl	80143c8 <vTaskSwitchContext>
	prvTaskExitError();
 8012914:	f7ff ff3a 	bl	801278c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012918:	2300      	movs	r3, #0
}
 801291a:	4618      	mov	r0, r3
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	e000e400 	.word	0xe000e400
 8012928:	20056110 	.word	0x20056110
 801292c:	20056114 	.word	0x20056114
 8012930:	e000ed20 	.word	0xe000ed20
 8012934:	20000020 	.word	0x20000020
 8012938:	e000ef34 	.word	0xe000ef34

0801293c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
	__asm volatile
 8012942:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012946:	b672      	cpsid	i
 8012948:	f383 8811 	msr	BASEPRI, r3
 801294c:	f3bf 8f6f 	isb	sy
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	b662      	cpsie	i
 8012956:	607b      	str	r3, [r7, #4]
}
 8012958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801295a:	4b10      	ldr	r3, [pc, #64]	; (801299c <vPortEnterCritical+0x60>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	3301      	adds	r3, #1
 8012960:	4a0e      	ldr	r2, [pc, #56]	; (801299c <vPortEnterCritical+0x60>)
 8012962:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012964:	4b0d      	ldr	r3, [pc, #52]	; (801299c <vPortEnterCritical+0x60>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	2b01      	cmp	r3, #1
 801296a:	d111      	bne.n	8012990 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801296c:	4b0c      	ldr	r3, [pc, #48]	; (80129a0 <vPortEnterCritical+0x64>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	b2db      	uxtb	r3, r3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d00c      	beq.n	8012990 <vPortEnterCritical+0x54>
	__asm volatile
 8012976:	f04f 0330 	mov.w	r3, #48	; 0x30
 801297a:	b672      	cpsid	i
 801297c:	f383 8811 	msr	BASEPRI, r3
 8012980:	f3bf 8f6f 	isb	sy
 8012984:	f3bf 8f4f 	dsb	sy
 8012988:	b662      	cpsie	i
 801298a:	603b      	str	r3, [r7, #0]
}
 801298c:	bf00      	nop
 801298e:	e7fe      	b.n	801298e <vPortEnterCritical+0x52>
	}
}
 8012990:	bf00      	nop
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr
 801299c:	20000020 	.word	0x20000020
 80129a0:	e000ed04 	.word	0xe000ed04

080129a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80129aa:	4b13      	ldr	r3, [pc, #76]	; (80129f8 <vPortExitCritical+0x54>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10c      	bne.n	80129cc <vPortExitCritical+0x28>
	__asm volatile
 80129b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129b6:	b672      	cpsid	i
 80129b8:	f383 8811 	msr	BASEPRI, r3
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f3bf 8f4f 	dsb	sy
 80129c4:	b662      	cpsie	i
 80129c6:	607b      	str	r3, [r7, #4]
}
 80129c8:	bf00      	nop
 80129ca:	e7fe      	b.n	80129ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80129cc:	4b0a      	ldr	r3, [pc, #40]	; (80129f8 <vPortExitCritical+0x54>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	4a09      	ldr	r2, [pc, #36]	; (80129f8 <vPortExitCritical+0x54>)
 80129d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80129d6:	4b08      	ldr	r3, [pc, #32]	; (80129f8 <vPortExitCritical+0x54>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d105      	bne.n	80129ea <vPortExitCritical+0x46>
 80129de:	2300      	movs	r3, #0
 80129e0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80129e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80129ea:	bf00      	nop
 80129ec:	370c      	adds	r7, #12
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	20000020 	.word	0x20000020
 80129fc:	00000000 	.word	0x00000000

08012a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a00:	f3ef 8009 	mrs	r0, PSP
 8012a04:	f3bf 8f6f 	isb	sy
 8012a08:	4b15      	ldr	r3, [pc, #84]	; (8012a60 <pxCurrentTCBConst>)
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	f01e 0f10 	tst.w	lr, #16
 8012a10:	bf08      	it	eq
 8012a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1a:	6010      	str	r0, [r2, #0]
 8012a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a20:	f04f 0030 	mov.w	r0, #48	; 0x30
 8012a24:	b672      	cpsid	i
 8012a26:	f380 8811 	msr	BASEPRI, r0
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	f3bf 8f6f 	isb	sy
 8012a32:	b662      	cpsie	i
 8012a34:	f001 fcc8 	bl	80143c8 <vTaskSwitchContext>
 8012a38:	f04f 0000 	mov.w	r0, #0
 8012a3c:	f380 8811 	msr	BASEPRI, r0
 8012a40:	bc09      	pop	{r0, r3}
 8012a42:	6819      	ldr	r1, [r3, #0]
 8012a44:	6808      	ldr	r0, [r1, #0]
 8012a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a4a:	f01e 0f10 	tst.w	lr, #16
 8012a4e:	bf08      	it	eq
 8012a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a54:	f380 8809 	msr	PSP, r0
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop

08012a60 <pxCurrentTCBConst>:
 8012a60:	20056118 	.word	0x20056118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a64:	bf00      	nop
 8012a66:	bf00      	nop

08012a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a72:	b672      	cpsid	i
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
 8012a80:	b662      	cpsie	i
 8012a82:	607b      	str	r3, [r7, #4]
}
 8012a84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a86:	f001 fbe3 	bl	8014250 <xTaskIncrementTick>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d003      	beq.n	8012a98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a90:	4b06      	ldr	r3, [pc, #24]	; (8012aac <SysTick_Handler+0x44>)
 8012a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a96:	601a      	str	r2, [r3, #0]
 8012a98:	2300      	movs	r3, #0
 8012a9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	f383 8811 	msr	BASEPRI, r3
}
 8012aa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012aa4:	bf00      	nop
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	e000ed04 	.word	0xe000ed04

08012ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ab4:	4b0b      	ldr	r3, [pc, #44]	; (8012ae4 <vPortSetupTimerInterrupt+0x34>)
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012aba:	4b0b      	ldr	r3, [pc, #44]	; (8012ae8 <vPortSetupTimerInterrupt+0x38>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012ac0:	4b0a      	ldr	r3, [pc, #40]	; (8012aec <vPortSetupTimerInterrupt+0x3c>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a0a      	ldr	r2, [pc, #40]	; (8012af0 <vPortSetupTimerInterrupt+0x40>)
 8012ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8012aca:	099b      	lsrs	r3, r3, #6
 8012acc:	4a09      	ldr	r2, [pc, #36]	; (8012af4 <vPortSetupTimerInterrupt+0x44>)
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012ad2:	4b04      	ldr	r3, [pc, #16]	; (8012ae4 <vPortSetupTimerInterrupt+0x34>)
 8012ad4:	2207      	movs	r2, #7
 8012ad6:	601a      	str	r2, [r3, #0]
}
 8012ad8:	bf00      	nop
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	e000e010 	.word	0xe000e010
 8012ae8:	e000e018 	.word	0xe000e018
 8012aec:	20000014 	.word	0x20000014
 8012af0:	10624dd3 	.word	0x10624dd3
 8012af4:	e000e014 	.word	0xe000e014

08012af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b08 <vPortEnableVFP+0x10>
 8012afc:	6801      	ldr	r1, [r0, #0]
 8012afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b02:	6001      	str	r1, [r0, #0]
 8012b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b06:	bf00      	nop
 8012b08:	e000ed88 	.word	0xe000ed88

08012b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b12:	f3ef 8305 	mrs	r3, IPSR
 8012b16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	2b0f      	cmp	r3, #15
 8012b1c:	d916      	bls.n	8012b4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b1e:	4a19      	ldr	r2, [pc, #100]	; (8012b84 <vPortValidateInterruptPriority+0x78>)
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	4413      	add	r3, r2
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b28:	4b17      	ldr	r3, [pc, #92]	; (8012b88 <vPortValidateInterruptPriority+0x7c>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	7afa      	ldrb	r2, [r7, #11]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d20c      	bcs.n	8012b4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012b32:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b36:	b672      	cpsid	i
 8012b38:	f383 8811 	msr	BASEPRI, r3
 8012b3c:	f3bf 8f6f 	isb	sy
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	b662      	cpsie	i
 8012b46:	607b      	str	r3, [r7, #4]
}
 8012b48:	bf00      	nop
 8012b4a:	e7fe      	b.n	8012b4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b4c:	4b0f      	ldr	r3, [pc, #60]	; (8012b8c <vPortValidateInterruptPriority+0x80>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b54:	4b0e      	ldr	r3, [pc, #56]	; (8012b90 <vPortValidateInterruptPriority+0x84>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d90c      	bls.n	8012b76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8012b5c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b60:	b672      	cpsid	i
 8012b62:	f383 8811 	msr	BASEPRI, r3
 8012b66:	f3bf 8f6f 	isb	sy
 8012b6a:	f3bf 8f4f 	dsb	sy
 8012b6e:	b662      	cpsie	i
 8012b70:	603b      	str	r3, [r7, #0]
}
 8012b72:	bf00      	nop
 8012b74:	e7fe      	b.n	8012b74 <vPortValidateInterruptPriority+0x68>
	}
 8012b76:	bf00      	nop
 8012b78:	3714      	adds	r7, #20
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	e000e3f0 	.word	0xe000e3f0
 8012b88:	20056110 	.word	0x20056110
 8012b8c:	e000ed0c 	.word	0xe000ed0c
 8012b90:	20056114 	.word	0x20056114

08012b94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d10c      	bne.n	8012bc2 <xQueueGenericReset+0x2e>
	__asm volatile
 8012ba8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bac:	b672      	cpsid	i
 8012bae:	f383 8811 	msr	BASEPRI, r3
 8012bb2:	f3bf 8f6f 	isb	sy
 8012bb6:	f3bf 8f4f 	dsb	sy
 8012bba:	b662      	cpsie	i
 8012bbc:	60bb      	str	r3, [r7, #8]
}
 8012bbe:	bf00      	nop
 8012bc0:	e7fe      	b.n	8012bc0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012bc2:	f7ff febb 	bl	801293c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bce:	68f9      	ldr	r1, [r7, #12]
 8012bd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012bd2:	fb01 f303 	mul.w	r3, r1, r3
 8012bd6:	441a      	add	r2, r3
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2200      	movs	r2, #0
 8012be0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	68f9      	ldr	r1, [r7, #12]
 8012bf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012bf8:	fb01 f303 	mul.w	r3, r1, r3
 8012bfc:	441a      	add	r2, r3
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	22ff      	movs	r2, #255	; 0xff
 8012c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	22ff      	movs	r2, #255	; 0xff
 8012c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d114      	bne.n	8012c42 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	691b      	ldr	r3, [r3, #16]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d01a      	beq.n	8012c56 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	3310      	adds	r3, #16
 8012c24:	4618      	mov	r0, r3
 8012c26:	f001 fc83 	bl	8014530 <xTaskRemoveFromEventList>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d012      	beq.n	8012c56 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c30:	4b0c      	ldr	r3, [pc, #48]	; (8012c64 <xQueueGenericReset+0xd0>)
 8012c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c36:	601a      	str	r2, [r3, #0]
 8012c38:	f3bf 8f4f 	dsb	sy
 8012c3c:	f3bf 8f6f 	isb	sy
 8012c40:	e009      	b.n	8012c56 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	3310      	adds	r3, #16
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff fcb8 	bl	80125bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	3324      	adds	r3, #36	; 0x24
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7ff fcb3 	bl	80125bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c56:	f7ff fea5 	bl	80129a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c5a:	2301      	movs	r3, #1
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	e000ed04 	.word	0xe000ed04

08012c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b08e      	sub	sp, #56	; 0x38
 8012c6c:	af02      	add	r7, sp, #8
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
 8012c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d10c      	bne.n	8012c96 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8012c7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012c80:	b672      	cpsid	i
 8012c82:	f383 8811 	msr	BASEPRI, r3
 8012c86:	f3bf 8f6f 	isb	sy
 8012c8a:	f3bf 8f4f 	dsb	sy
 8012c8e:	b662      	cpsie	i
 8012c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012c92:	bf00      	nop
 8012c94:	e7fe      	b.n	8012c94 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d10c      	bne.n	8012cb6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8012c9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ca0:	b672      	cpsid	i
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	b662      	cpsie	i
 8012cb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012cb2:	bf00      	nop
 8012cb4:	e7fe      	b.n	8012cb4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d002      	beq.n	8012cc2 <xQueueGenericCreateStatic+0x5a>
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d001      	beq.n	8012cc6 <xQueueGenericCreateStatic+0x5e>
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	e000      	b.n	8012cc8 <xQueueGenericCreateStatic+0x60>
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d10c      	bne.n	8012ce6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8012ccc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cd0:	b672      	cpsid	i
 8012cd2:	f383 8811 	msr	BASEPRI, r3
 8012cd6:	f3bf 8f6f 	isb	sy
 8012cda:	f3bf 8f4f 	dsb	sy
 8012cde:	b662      	cpsie	i
 8012ce0:	623b      	str	r3, [r7, #32]
}
 8012ce2:	bf00      	nop
 8012ce4:	e7fe      	b.n	8012ce4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d102      	bne.n	8012cf2 <xQueueGenericCreateStatic+0x8a>
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d101      	bne.n	8012cf6 <xQueueGenericCreateStatic+0x8e>
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	e000      	b.n	8012cf8 <xQueueGenericCreateStatic+0x90>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d10c      	bne.n	8012d16 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8012cfc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d00:	b672      	cpsid	i
 8012d02:	f383 8811 	msr	BASEPRI, r3
 8012d06:	f3bf 8f6f 	isb	sy
 8012d0a:	f3bf 8f4f 	dsb	sy
 8012d0e:	b662      	cpsie	i
 8012d10:	61fb      	str	r3, [r7, #28]
}
 8012d12:	bf00      	nop
 8012d14:	e7fe      	b.n	8012d14 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d16:	2350      	movs	r3, #80	; 0x50
 8012d18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	2b50      	cmp	r3, #80	; 0x50
 8012d1e:	d00c      	beq.n	8012d3a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8012d20:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d24:	b672      	cpsid	i
 8012d26:	f383 8811 	msr	BASEPRI, r3
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	b662      	cpsie	i
 8012d34:	61bb      	str	r3, [r7, #24]
}
 8012d36:	bf00      	nop
 8012d38:	e7fe      	b.n	8012d38 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d00d      	beq.n	8012d62 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d48:	2201      	movs	r2, #1
 8012d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	4613      	mov	r3, r2
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	68b9      	ldr	r1, [r7, #8]
 8012d5c:	68f8      	ldr	r0, [r7, #12]
 8012d5e:	f000 f847 	bl	8012df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3730      	adds	r7, #48	; 0x30
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08a      	sub	sp, #40	; 0x28
 8012d70:	af02      	add	r7, sp, #8
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	4613      	mov	r3, r2
 8012d78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d10c      	bne.n	8012d9a <xQueueGenericCreate+0x2e>
	__asm volatile
 8012d80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d84:	b672      	cpsid	i
 8012d86:	f383 8811 	msr	BASEPRI, r3
 8012d8a:	f3bf 8f6f 	isb	sy
 8012d8e:	f3bf 8f4f 	dsb	sy
 8012d92:	b662      	cpsie	i
 8012d94:	613b      	str	r3, [r7, #16]
}
 8012d96:	bf00      	nop
 8012d98:	e7fe      	b.n	8012d98 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d102      	bne.n	8012da6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012da0:	2300      	movs	r3, #0
 8012da2:	61fb      	str	r3, [r7, #28]
 8012da4:	e004      	b.n	8012db0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	68ba      	ldr	r2, [r7, #8]
 8012daa:	fb02 f303 	mul.w	r3, r2, r3
 8012dae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	3350      	adds	r3, #80	; 0x50
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff fa1d 	bl	80121f4 <pvPortMalloc>
 8012dba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d011      	beq.n	8012de6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	3350      	adds	r3, #80	; 0x50
 8012dca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012dd4:	79fa      	ldrb	r2, [r7, #7]
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	9300      	str	r3, [sp, #0]
 8012dda:	4613      	mov	r3, r2
 8012ddc:	697a      	ldr	r2, [r7, #20]
 8012dde:	68b9      	ldr	r1, [r7, #8]
 8012de0:	68f8      	ldr	r0, [r7, #12]
 8012de2:	f000 f805 	bl	8012df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012de6:	69bb      	ldr	r3, [r7, #24]
	}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3720      	adds	r7, #32
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d103      	bne.n	8012e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012e04:	69bb      	ldr	r3, [r7, #24]
 8012e06:	69ba      	ldr	r2, [r7, #24]
 8012e08:	601a      	str	r2, [r3, #0]
 8012e0a:	e002      	b.n	8012e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012e0c:	69bb      	ldr	r3, [r7, #24]
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	68fa      	ldr	r2, [r7, #12]
 8012e16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e1e:	2101      	movs	r1, #1
 8012e20:	69b8      	ldr	r0, [r7, #24]
 8012e22:	f7ff feb7 	bl	8012b94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	78fa      	ldrb	r2, [r7, #3]
 8012e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e2e:	bf00      	nop
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b08a      	sub	sp, #40	; 0x28
 8012e3a:	af02      	add	r7, sp, #8
 8012e3c:	60f8      	str	r0, [r7, #12]
 8012e3e:	60b9      	str	r1, [r7, #8]
 8012e40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d10c      	bne.n	8012e62 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8012e48:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e4c:	b672      	cpsid	i
 8012e4e:	f383 8811 	msr	BASEPRI, r3
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	b662      	cpsie	i
 8012e5c:	61bb      	str	r3, [r7, #24]
}
 8012e5e:	bf00      	nop
 8012e60:	e7fe      	b.n	8012e60 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d90c      	bls.n	8012e84 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8012e6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e6e:	b672      	cpsid	i
 8012e70:	f383 8811 	msr	BASEPRI, r3
 8012e74:	f3bf 8f6f 	isb	sy
 8012e78:	f3bf 8f4f 	dsb	sy
 8012e7c:	b662      	cpsie	i
 8012e7e:	617b      	str	r3, [r7, #20]
}
 8012e80:	bf00      	nop
 8012e82:	e7fe      	b.n	8012e82 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012e84:	2302      	movs	r3, #2
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f7ff feea 	bl	8012c68 <xQueueGenericCreateStatic>
 8012e94:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d002      	beq.n	8012ea2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012e9c:	69fb      	ldr	r3, [r7, #28]
 8012e9e:	68ba      	ldr	r2, [r7, #8]
 8012ea0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012ea2:	69fb      	ldr	r3, [r7, #28]
	}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3720      	adds	r7, #32
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b086      	sub	sp, #24
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d10c      	bne.n	8012ed6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8012ebc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ec0:	b672      	cpsid	i
 8012ec2:	f383 8811 	msr	BASEPRI, r3
 8012ec6:	f3bf 8f6f 	isb	sy
 8012eca:	f3bf 8f4f 	dsb	sy
 8012ece:	b662      	cpsie	i
 8012ed0:	613b      	str	r3, [r7, #16]
}
 8012ed2:	bf00      	nop
 8012ed4:	e7fe      	b.n	8012ed4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012ed6:	683a      	ldr	r2, [r7, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d90c      	bls.n	8012ef8 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8012ede:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ee2:	b672      	cpsid	i
 8012ee4:	f383 8811 	msr	BASEPRI, r3
 8012ee8:	f3bf 8f6f 	isb	sy
 8012eec:	f3bf 8f4f 	dsb	sy
 8012ef0:	b662      	cpsie	i
 8012ef2:	60fb      	str	r3, [r7, #12]
}
 8012ef4:	bf00      	nop
 8012ef6:	e7fe      	b.n	8012ef6 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012ef8:	2202      	movs	r2, #2
 8012efa:	2100      	movs	r1, #0
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7ff ff35 	bl	8012d6c <xQueueGenericCreate>
 8012f02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d002      	beq.n	8012f10 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012f10:	697b      	ldr	r3, [r7, #20]
	}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3718      	adds	r7, #24
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
	...

08012f1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b08e      	sub	sp, #56	; 0x38
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
 8012f28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d10c      	bne.n	8012f52 <xQueueGenericSend+0x36>
	__asm volatile
 8012f38:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f3c:	b672      	cpsid	i
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	b662      	cpsie	i
 8012f4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012f4e:	bf00      	nop
 8012f50:	e7fe      	b.n	8012f50 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d103      	bne.n	8012f60 <xQueueGenericSend+0x44>
 8012f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d101      	bne.n	8012f64 <xQueueGenericSend+0x48>
 8012f60:	2301      	movs	r3, #1
 8012f62:	e000      	b.n	8012f66 <xQueueGenericSend+0x4a>
 8012f64:	2300      	movs	r3, #0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d10c      	bne.n	8012f84 <xQueueGenericSend+0x68>
	__asm volatile
 8012f6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f6e:	b672      	cpsid	i
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	b662      	cpsie	i
 8012f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012f80:	bf00      	nop
 8012f82:	e7fe      	b.n	8012f82 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d103      	bne.n	8012f92 <xQueueGenericSend+0x76>
 8012f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d101      	bne.n	8012f96 <xQueueGenericSend+0x7a>
 8012f92:	2301      	movs	r3, #1
 8012f94:	e000      	b.n	8012f98 <xQueueGenericSend+0x7c>
 8012f96:	2300      	movs	r3, #0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d10c      	bne.n	8012fb6 <xQueueGenericSend+0x9a>
	__asm volatile
 8012f9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fa0:	b672      	cpsid	i
 8012fa2:	f383 8811 	msr	BASEPRI, r3
 8012fa6:	f3bf 8f6f 	isb	sy
 8012faa:	f3bf 8f4f 	dsb	sy
 8012fae:	b662      	cpsie	i
 8012fb0:	623b      	str	r3, [r7, #32]
}
 8012fb2:	bf00      	nop
 8012fb4:	e7fe      	b.n	8012fb4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fb6:	f001 fc81 	bl	80148bc <xTaskGetSchedulerState>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d102      	bne.n	8012fc6 <xQueueGenericSend+0xaa>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d101      	bne.n	8012fca <xQueueGenericSend+0xae>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e000      	b.n	8012fcc <xQueueGenericSend+0xb0>
 8012fca:	2300      	movs	r3, #0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10c      	bne.n	8012fea <xQueueGenericSend+0xce>
	__asm volatile
 8012fd0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fd4:	b672      	cpsid	i
 8012fd6:	f383 8811 	msr	BASEPRI, r3
 8012fda:	f3bf 8f6f 	isb	sy
 8012fde:	f3bf 8f4f 	dsb	sy
 8012fe2:	b662      	cpsie	i
 8012fe4:	61fb      	str	r3, [r7, #28]
}
 8012fe6:	bf00      	nop
 8012fe8:	e7fe      	b.n	8012fe8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fea:	f7ff fca7 	bl	801293c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d302      	bcc.n	8013000 <xQueueGenericSend+0xe4>
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d129      	bne.n	8013054 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	68b9      	ldr	r1, [r7, #8]
 8013004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013006:	f000 fc82 	bl	801390e <prvCopyDataToQueue>
 801300a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013010:	2b00      	cmp	r3, #0
 8013012:	d010      	beq.n	8013036 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013016:	3324      	adds	r3, #36	; 0x24
 8013018:	4618      	mov	r0, r3
 801301a:	f001 fa89 	bl	8014530 <xTaskRemoveFromEventList>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d013      	beq.n	801304c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013024:	4b3f      	ldr	r3, [pc, #252]	; (8013124 <xQueueGenericSend+0x208>)
 8013026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801302a:	601a      	str	r2, [r3, #0]
 801302c:	f3bf 8f4f 	dsb	sy
 8013030:	f3bf 8f6f 	isb	sy
 8013034:	e00a      	b.n	801304c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013038:	2b00      	cmp	r3, #0
 801303a:	d007      	beq.n	801304c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801303c:	4b39      	ldr	r3, [pc, #228]	; (8013124 <xQueueGenericSend+0x208>)
 801303e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013042:	601a      	str	r2, [r3, #0]
 8013044:	f3bf 8f4f 	dsb	sy
 8013048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801304c:	f7ff fcaa 	bl	80129a4 <vPortExitCritical>
				return pdPASS;
 8013050:	2301      	movs	r3, #1
 8013052:	e063      	b.n	801311c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d103      	bne.n	8013062 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801305a:	f7ff fca3 	bl	80129a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801305e:	2300      	movs	r3, #0
 8013060:	e05c      	b.n	801311c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013064:	2b00      	cmp	r3, #0
 8013066:	d106      	bne.n	8013076 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013068:	f107 0314 	add.w	r3, r7, #20
 801306c:	4618      	mov	r0, r3
 801306e:	f001 fac5 	bl	80145fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013072:	2301      	movs	r3, #1
 8013074:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013076:	f7ff fc95 	bl	80129a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801307a:	f001 f82b 	bl	80140d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801307e:	f7ff fc5d 	bl	801293c <vPortEnterCritical>
 8013082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013088:	b25b      	sxtb	r3, r3
 801308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801308e:	d103      	bne.n	8013098 <xQueueGenericSend+0x17c>
 8013090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013092:	2200      	movs	r2, #0
 8013094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801309e:	b25b      	sxtb	r3, r3
 80130a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130a4:	d103      	bne.n	80130ae <xQueueGenericSend+0x192>
 80130a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a8:	2200      	movs	r2, #0
 80130aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130ae:	f7ff fc79 	bl	80129a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130b2:	1d3a      	adds	r2, r7, #4
 80130b4:	f107 0314 	add.w	r3, r7, #20
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f001 fab4 	bl	8014628 <xTaskCheckForTimeOut>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d124      	bne.n	8013110 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80130c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130c8:	f000 fd19 	bl	8013afe <prvIsQueueFull>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d018      	beq.n	8013104 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80130d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d4:	3310      	adds	r3, #16
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	4611      	mov	r1, r2
 80130da:	4618      	mov	r0, r3
 80130dc:	f001 f9d4 	bl	8014488 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80130e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130e2:	f000 fca4 	bl	8013a2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80130e6:	f001 f803 	bl	80140f0 <xTaskResumeAll>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f47f af7c 	bne.w	8012fea <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80130f2:	4b0c      	ldr	r3, [pc, #48]	; (8013124 <xQueueGenericSend+0x208>)
 80130f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	e772      	b.n	8012fea <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013106:	f000 fc92 	bl	8013a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801310a:	f000 fff1 	bl	80140f0 <xTaskResumeAll>
 801310e:	e76c      	b.n	8012fea <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013112:	f000 fc8c 	bl	8013a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013116:	f000 ffeb 	bl	80140f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801311a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801311c:	4618      	mov	r0, r3
 801311e:	3738      	adds	r7, #56	; 0x38
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b08e      	sub	sp, #56	; 0x38
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
 8013134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313c:	2b00      	cmp	r3, #0
 801313e:	d10c      	bne.n	801315a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8013140:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013144:	b672      	cpsid	i
 8013146:	f383 8811 	msr	BASEPRI, r3
 801314a:	f3bf 8f6f 	isb	sy
 801314e:	f3bf 8f4f 	dsb	sy
 8013152:	b662      	cpsie	i
 8013154:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013156:	bf00      	nop
 8013158:	e7fe      	b.n	8013158 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d103      	bne.n	8013168 <xQueueGenericSendFromISR+0x40>
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013164:	2b00      	cmp	r3, #0
 8013166:	d101      	bne.n	801316c <xQueueGenericSendFromISR+0x44>
 8013168:	2301      	movs	r3, #1
 801316a:	e000      	b.n	801316e <xQueueGenericSendFromISR+0x46>
 801316c:	2300      	movs	r3, #0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d10c      	bne.n	801318c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8013172:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013176:	b672      	cpsid	i
 8013178:	f383 8811 	msr	BASEPRI, r3
 801317c:	f3bf 8f6f 	isb	sy
 8013180:	f3bf 8f4f 	dsb	sy
 8013184:	b662      	cpsie	i
 8013186:	623b      	str	r3, [r7, #32]
}
 8013188:	bf00      	nop
 801318a:	e7fe      	b.n	801318a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	2b02      	cmp	r3, #2
 8013190:	d103      	bne.n	801319a <xQueueGenericSendFromISR+0x72>
 8013192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013196:	2b01      	cmp	r3, #1
 8013198:	d101      	bne.n	801319e <xQueueGenericSendFromISR+0x76>
 801319a:	2301      	movs	r3, #1
 801319c:	e000      	b.n	80131a0 <xQueueGenericSendFromISR+0x78>
 801319e:	2300      	movs	r3, #0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d10c      	bne.n	80131be <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80131a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131a8:	b672      	cpsid	i
 80131aa:	f383 8811 	msr	BASEPRI, r3
 80131ae:	f3bf 8f6f 	isb	sy
 80131b2:	f3bf 8f4f 	dsb	sy
 80131b6:	b662      	cpsie	i
 80131b8:	61fb      	str	r3, [r7, #28]
}
 80131ba:	bf00      	nop
 80131bc:	e7fe      	b.n	80131bc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80131be:	f7ff fca5 	bl	8012b0c <vPortValidateInterruptPriority>
	__asm volatile
 80131c2:	f3ef 8211 	mrs	r2, BASEPRI
 80131c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131ca:	b672      	cpsid	i
 80131cc:	f383 8811 	msr	BASEPRI, r3
 80131d0:	f3bf 8f6f 	isb	sy
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	b662      	cpsie	i
 80131da:	61ba      	str	r2, [r7, #24]
 80131dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80131de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80131e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d302      	bcc.n	80131f4 <xQueueGenericSendFromISR+0xcc>
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	2b02      	cmp	r3, #2
 80131f2:	d12c      	bne.n	801324e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131fe:	683a      	ldr	r2, [r7, #0]
 8013200:	68b9      	ldr	r1, [r7, #8]
 8013202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013204:	f000 fb83 	bl	801390e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013208:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013210:	d112      	bne.n	8013238 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013216:	2b00      	cmp	r3, #0
 8013218:	d016      	beq.n	8013248 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321c:	3324      	adds	r3, #36	; 0x24
 801321e:	4618      	mov	r0, r3
 8013220:	f001 f986 	bl	8014530 <xTaskRemoveFromEventList>
 8013224:	4603      	mov	r3, r0
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00e      	beq.n	8013248 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d00b      	beq.n	8013248 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2201      	movs	r2, #1
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	e007      	b.n	8013248 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801323c:	3301      	adds	r3, #1
 801323e:	b2db      	uxtb	r3, r3
 8013240:	b25a      	sxtb	r2, r3
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013248:	2301      	movs	r3, #1
 801324a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801324c:	e001      	b.n	8013252 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801324e:	2300      	movs	r3, #0
 8013250:	637b      	str	r3, [r7, #52]	; 0x34
 8013252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013254:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	f383 8811 	msr	BASEPRI, r3
}
 801325c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013260:	4618      	mov	r0, r3
 8013262:	3738      	adds	r7, #56	; 0x38
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}

08013268 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b08e      	sub	sp, #56	; 0x38
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013278:	2b00      	cmp	r3, #0
 801327a:	d10c      	bne.n	8013296 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801327c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013280:	b672      	cpsid	i
 8013282:	f383 8811 	msr	BASEPRI, r3
 8013286:	f3bf 8f6f 	isb	sy
 801328a:	f3bf 8f4f 	dsb	sy
 801328e:	b662      	cpsie	i
 8013290:	623b      	str	r3, [r7, #32]
}
 8013292:	bf00      	nop
 8013294:	e7fe      	b.n	8013294 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801329a:	2b00      	cmp	r3, #0
 801329c:	d00c      	beq.n	80132b8 <xQueueGiveFromISR+0x50>
	__asm volatile
 801329e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132a2:	b672      	cpsid	i
 80132a4:	f383 8811 	msr	BASEPRI, r3
 80132a8:	f3bf 8f6f 	isb	sy
 80132ac:	f3bf 8f4f 	dsb	sy
 80132b0:	b662      	cpsie	i
 80132b2:	61fb      	str	r3, [r7, #28]
}
 80132b4:	bf00      	nop
 80132b6:	e7fe      	b.n	80132b6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80132b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d103      	bne.n	80132c8 <xQueueGiveFromISR+0x60>
 80132c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c2:	689b      	ldr	r3, [r3, #8]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d101      	bne.n	80132cc <xQueueGiveFromISR+0x64>
 80132c8:	2301      	movs	r3, #1
 80132ca:	e000      	b.n	80132ce <xQueueGiveFromISR+0x66>
 80132cc:	2300      	movs	r3, #0
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d10c      	bne.n	80132ec <xQueueGiveFromISR+0x84>
	__asm volatile
 80132d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132d6:	b672      	cpsid	i
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	b662      	cpsie	i
 80132e6:	61bb      	str	r3, [r7, #24]
}
 80132e8:	bf00      	nop
 80132ea:	e7fe      	b.n	80132ea <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80132ec:	f7ff fc0e 	bl	8012b0c <vPortValidateInterruptPriority>
	__asm volatile
 80132f0:	f3ef 8211 	mrs	r2, BASEPRI
 80132f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132f8:	b672      	cpsid	i
 80132fa:	f383 8811 	msr	BASEPRI, r3
 80132fe:	f3bf 8f6f 	isb	sy
 8013302:	f3bf 8f4f 	dsb	sy
 8013306:	b662      	cpsie	i
 8013308:	617a      	str	r2, [r7, #20]
 801330a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801330c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801330e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013314:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801331a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801331c:	429a      	cmp	r2, r3
 801331e:	d22b      	bcs.n	8013378 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332c:	1c5a      	adds	r2, r3, #1
 801332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013330:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013332:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801333a:	d112      	bne.n	8013362 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013340:	2b00      	cmp	r3, #0
 8013342:	d016      	beq.n	8013372 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013346:	3324      	adds	r3, #36	; 0x24
 8013348:	4618      	mov	r0, r3
 801334a:	f001 f8f1 	bl	8014530 <xTaskRemoveFromEventList>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00e      	beq.n	8013372 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00b      	beq.n	8013372 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2201      	movs	r2, #1
 801335e:	601a      	str	r2, [r3, #0]
 8013360:	e007      	b.n	8013372 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013366:	3301      	adds	r3, #1
 8013368:	b2db      	uxtb	r3, r3
 801336a:	b25a      	sxtb	r2, r3
 801336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013372:	2301      	movs	r3, #1
 8013374:	637b      	str	r3, [r7, #52]	; 0x34
 8013376:	e001      	b.n	801337c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013378:	2300      	movs	r3, #0
 801337a:	637b      	str	r3, [r7, #52]	; 0x34
 801337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	f383 8811 	msr	BASEPRI, r3
}
 8013386:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801338a:	4618      	mov	r0, r3
 801338c:	3738      	adds	r7, #56	; 0x38
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
	...

08013394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b08c      	sub	sp, #48	; 0x30
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80133a0:	2300      	movs	r3, #0
 80133a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80133a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d10c      	bne.n	80133c8 <xQueueReceive+0x34>
	__asm volatile
 80133ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133b2:	b672      	cpsid	i
 80133b4:	f383 8811 	msr	BASEPRI, r3
 80133b8:	f3bf 8f6f 	isb	sy
 80133bc:	f3bf 8f4f 	dsb	sy
 80133c0:	b662      	cpsie	i
 80133c2:	623b      	str	r3, [r7, #32]
}
 80133c4:	bf00      	nop
 80133c6:	e7fe      	b.n	80133c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d103      	bne.n	80133d6 <xQueueReceive+0x42>
 80133ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d101      	bne.n	80133da <xQueueReceive+0x46>
 80133d6:	2301      	movs	r3, #1
 80133d8:	e000      	b.n	80133dc <xQueueReceive+0x48>
 80133da:	2300      	movs	r3, #0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10c      	bne.n	80133fa <xQueueReceive+0x66>
	__asm volatile
 80133e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133e4:	b672      	cpsid	i
 80133e6:	f383 8811 	msr	BASEPRI, r3
 80133ea:	f3bf 8f6f 	isb	sy
 80133ee:	f3bf 8f4f 	dsb	sy
 80133f2:	b662      	cpsie	i
 80133f4:	61fb      	str	r3, [r7, #28]
}
 80133f6:	bf00      	nop
 80133f8:	e7fe      	b.n	80133f8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133fa:	f001 fa5f 	bl	80148bc <xTaskGetSchedulerState>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d102      	bne.n	801340a <xQueueReceive+0x76>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d101      	bne.n	801340e <xQueueReceive+0x7a>
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <xQueueReceive+0x7c>
 801340e:	2300      	movs	r3, #0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d10c      	bne.n	801342e <xQueueReceive+0x9a>
	__asm volatile
 8013414:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013418:	b672      	cpsid	i
 801341a:	f383 8811 	msr	BASEPRI, r3
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	b662      	cpsie	i
 8013428:	61bb      	str	r3, [r7, #24]
}
 801342a:	bf00      	nop
 801342c:	e7fe      	b.n	801342c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801342e:	f7ff fa85 	bl	801293c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013436:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343a:	2b00      	cmp	r3, #0
 801343c:	d01f      	beq.n	801347e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801343e:	68b9      	ldr	r1, [r7, #8]
 8013440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013442:	f000 face 	bl	80139e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013448:	1e5a      	subs	r2, r3, #1
 801344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013450:	691b      	ldr	r3, [r3, #16]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d00f      	beq.n	8013476 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013458:	3310      	adds	r3, #16
 801345a:	4618      	mov	r0, r3
 801345c:	f001 f868 	bl	8014530 <xTaskRemoveFromEventList>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d007      	beq.n	8013476 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013466:	4b3d      	ldr	r3, [pc, #244]	; (801355c <xQueueReceive+0x1c8>)
 8013468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	f3bf 8f4f 	dsb	sy
 8013472:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013476:	f7ff fa95 	bl	80129a4 <vPortExitCritical>
				return pdPASS;
 801347a:	2301      	movs	r3, #1
 801347c:	e069      	b.n	8013552 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d103      	bne.n	801348c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013484:	f7ff fa8e 	bl	80129a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013488:	2300      	movs	r3, #0
 801348a:	e062      	b.n	8013552 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348e:	2b00      	cmp	r3, #0
 8013490:	d106      	bne.n	80134a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013492:	f107 0310 	add.w	r3, r7, #16
 8013496:	4618      	mov	r0, r3
 8013498:	f001 f8b0 	bl	80145fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801349c:	2301      	movs	r3, #1
 801349e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80134a0:	f7ff fa80 	bl	80129a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80134a4:	f000 fe16 	bl	80140d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134a8:	f7ff fa48 	bl	801293c <vPortEnterCritical>
 80134ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80134b2:	b25b      	sxtb	r3, r3
 80134b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134b8:	d103      	bne.n	80134c2 <xQueueReceive+0x12e>
 80134ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134bc:	2200      	movs	r2, #0
 80134be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80134c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80134c8:	b25b      	sxtb	r3, r3
 80134ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134ce:	d103      	bne.n	80134d8 <xQueueReceive+0x144>
 80134d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d2:	2200      	movs	r2, #0
 80134d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80134d8:	f7ff fa64 	bl	80129a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134dc:	1d3a      	adds	r2, r7, #4
 80134de:	f107 0310 	add.w	r3, r7, #16
 80134e2:	4611      	mov	r1, r2
 80134e4:	4618      	mov	r0, r3
 80134e6:	f001 f89f 	bl	8014628 <xTaskCheckForTimeOut>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d123      	bne.n	8013538 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134f2:	f000 faee 	bl	8013ad2 <prvIsQueueEmpty>
 80134f6:	4603      	mov	r3, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d017      	beq.n	801352c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80134fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fe:	3324      	adds	r3, #36	; 0x24
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	4611      	mov	r1, r2
 8013504:	4618      	mov	r0, r3
 8013506:	f000 ffbf 	bl	8014488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801350a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801350c:	f000 fa8f 	bl	8013a2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013510:	f000 fdee 	bl	80140f0 <xTaskResumeAll>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d189      	bne.n	801342e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801351a:	4b10      	ldr	r3, [pc, #64]	; (801355c <xQueueReceive+0x1c8>)
 801351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013520:	601a      	str	r2, [r3, #0]
 8013522:	f3bf 8f4f 	dsb	sy
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	e780      	b.n	801342e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801352c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801352e:	f000 fa7e 	bl	8013a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013532:	f000 fddd 	bl	80140f0 <xTaskResumeAll>
 8013536:	e77a      	b.n	801342e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801353a:	f000 fa78 	bl	8013a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801353e:	f000 fdd7 	bl	80140f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013544:	f000 fac5 	bl	8013ad2 <prvIsQueueEmpty>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	f43f af6f 	beq.w	801342e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013552:	4618      	mov	r0, r3
 8013554:	3730      	adds	r7, #48	; 0x30
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	e000ed04 	.word	0xe000ed04

08013560 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b08e      	sub	sp, #56	; 0x38
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801356a:	2300      	movs	r3, #0
 801356c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013572:	2300      	movs	r3, #0
 8013574:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013578:	2b00      	cmp	r3, #0
 801357a:	d10c      	bne.n	8013596 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801357c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013580:	b672      	cpsid	i
 8013582:	f383 8811 	msr	BASEPRI, r3
 8013586:	f3bf 8f6f 	isb	sy
 801358a:	f3bf 8f4f 	dsb	sy
 801358e:	b662      	cpsie	i
 8013590:	623b      	str	r3, [r7, #32]
}
 8013592:	bf00      	nop
 8013594:	e7fe      	b.n	8013594 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00c      	beq.n	80135b8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801359e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80135a2:	b672      	cpsid	i
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	b662      	cpsie	i
 80135b2:	61fb      	str	r3, [r7, #28]
}
 80135b4:	bf00      	nop
 80135b6:	e7fe      	b.n	80135b6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135b8:	f001 f980 	bl	80148bc <xTaskGetSchedulerState>
 80135bc:	4603      	mov	r3, r0
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d102      	bne.n	80135c8 <xQueueSemaphoreTake+0x68>
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d101      	bne.n	80135cc <xQueueSemaphoreTake+0x6c>
 80135c8:	2301      	movs	r3, #1
 80135ca:	e000      	b.n	80135ce <xQueueSemaphoreTake+0x6e>
 80135cc:	2300      	movs	r3, #0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d10c      	bne.n	80135ec <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80135d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80135d6:	b672      	cpsid	i
 80135d8:	f383 8811 	msr	BASEPRI, r3
 80135dc:	f3bf 8f6f 	isb	sy
 80135e0:	f3bf 8f4f 	dsb	sy
 80135e4:	b662      	cpsie	i
 80135e6:	61bb      	str	r3, [r7, #24]
}
 80135e8:	bf00      	nop
 80135ea:	e7fe      	b.n	80135ea <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80135ec:	f7ff f9a6 	bl	801293c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80135f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80135f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d024      	beq.n	8013646 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80135fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fe:	1e5a      	subs	r2, r3, #1
 8013600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013602:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d104      	bne.n	8013616 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801360c:	f001 fad4 	bl	8014bb8 <pvTaskIncrementMutexHeldCount>
 8013610:	4602      	mov	r2, r0
 8013612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013614:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013618:	691b      	ldr	r3, [r3, #16]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00f      	beq.n	801363e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013620:	3310      	adds	r3, #16
 8013622:	4618      	mov	r0, r3
 8013624:	f000 ff84 	bl	8014530 <xTaskRemoveFromEventList>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d007      	beq.n	801363e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801362e:	4b55      	ldr	r3, [pc, #340]	; (8013784 <xQueueSemaphoreTake+0x224>)
 8013630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	f3bf 8f4f 	dsb	sy
 801363a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801363e:	f7ff f9b1 	bl	80129a4 <vPortExitCritical>
				return pdPASS;
 8013642:	2301      	movs	r3, #1
 8013644:	e099      	b.n	801377a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d113      	bne.n	8013674 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00c      	beq.n	801366c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8013652:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013656:	b672      	cpsid	i
 8013658:	f383 8811 	msr	BASEPRI, r3
 801365c:	f3bf 8f6f 	isb	sy
 8013660:	f3bf 8f4f 	dsb	sy
 8013664:	b662      	cpsie	i
 8013666:	617b      	str	r3, [r7, #20]
}
 8013668:	bf00      	nop
 801366a:	e7fe      	b.n	801366a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801366c:	f7ff f99a 	bl	80129a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013670:	2300      	movs	r3, #0
 8013672:	e082      	b.n	801377a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013676:	2b00      	cmp	r3, #0
 8013678:	d106      	bne.n	8013688 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801367a:	f107 030c 	add.w	r3, r7, #12
 801367e:	4618      	mov	r0, r3
 8013680:	f000 ffbc 	bl	80145fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013684:	2301      	movs	r3, #1
 8013686:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013688:	f7ff f98c 	bl	80129a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801368c:	f000 fd22 	bl	80140d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013690:	f7ff f954 	bl	801293c <vPortEnterCritical>
 8013694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801369a:	b25b      	sxtb	r3, r3
 801369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136a0:	d103      	bne.n	80136aa <xQueueSemaphoreTake+0x14a>
 80136a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a4:	2200      	movs	r2, #0
 80136a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136b0:	b25b      	sxtb	r3, r3
 80136b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136b6:	d103      	bne.n	80136c0 <xQueueSemaphoreTake+0x160>
 80136b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ba:	2200      	movs	r2, #0
 80136bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136c0:	f7ff f970 	bl	80129a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136c4:	463a      	mov	r2, r7
 80136c6:	f107 030c 	add.w	r3, r7, #12
 80136ca:	4611      	mov	r1, r2
 80136cc:	4618      	mov	r0, r3
 80136ce:	f000 ffab 	bl	8014628 <xTaskCheckForTimeOut>
 80136d2:	4603      	mov	r3, r0
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d132      	bne.n	801373e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136da:	f000 f9fa 	bl	8013ad2 <prvIsQueueEmpty>
 80136de:	4603      	mov	r3, r0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d026      	beq.n	8013732 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80136e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d109      	bne.n	8013700 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80136ec:	f7ff f926 	bl	801293c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80136f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f001 f8ff 	bl	80148f8 <xTaskPriorityInherit>
 80136fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80136fc:	f7ff f952 	bl	80129a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013702:	3324      	adds	r3, #36	; 0x24
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	4611      	mov	r1, r2
 8013708:	4618      	mov	r0, r3
 801370a:	f000 febd 	bl	8014488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801370e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013710:	f000 f98d 	bl	8013a2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013714:	f000 fcec 	bl	80140f0 <xTaskResumeAll>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	f47f af66 	bne.w	80135ec <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8013720:	4b18      	ldr	r3, [pc, #96]	; (8013784 <xQueueSemaphoreTake+0x224>)
 8013722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013726:	601a      	str	r2, [r3, #0]
 8013728:	f3bf 8f4f 	dsb	sy
 801372c:	f3bf 8f6f 	isb	sy
 8013730:	e75c      	b.n	80135ec <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013734:	f000 f97b 	bl	8013a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013738:	f000 fcda 	bl	80140f0 <xTaskResumeAll>
 801373c:	e756      	b.n	80135ec <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801373e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013740:	f000 f975 	bl	8013a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013744:	f000 fcd4 	bl	80140f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801374a:	f000 f9c2 	bl	8013ad2 <prvIsQueueEmpty>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	f43f af4b 	beq.w	80135ec <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00d      	beq.n	8013778 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801375c:	f7ff f8ee 	bl	801293c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013762:	f000 f8bc 	bl	80138de <prvGetDisinheritPriorityAfterTimeout>
 8013766:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376a:	689b      	ldr	r3, [r3, #8]
 801376c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801376e:	4618      	mov	r0, r3
 8013770:	f001 f99c 	bl	8014aac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013774:	f7ff f916 	bl	80129a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801377a:	4618      	mov	r0, r3
 801377c:	3738      	adds	r7, #56	; 0x38
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	e000ed04 	.word	0xe000ed04

08013788 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b08e      	sub	sp, #56	; 0x38
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379a:	2b00      	cmp	r3, #0
 801379c:	d10c      	bne.n	80137b8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801379e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137a2:	b672      	cpsid	i
 80137a4:	f383 8811 	msr	BASEPRI, r3
 80137a8:	f3bf 8f6f 	isb	sy
 80137ac:	f3bf 8f4f 	dsb	sy
 80137b0:	b662      	cpsie	i
 80137b2:	623b      	str	r3, [r7, #32]
}
 80137b4:	bf00      	nop
 80137b6:	e7fe      	b.n	80137b6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d103      	bne.n	80137c6 <xQueueReceiveFromISR+0x3e>
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <xQueueReceiveFromISR+0x42>
 80137c6:	2301      	movs	r3, #1
 80137c8:	e000      	b.n	80137cc <xQueueReceiveFromISR+0x44>
 80137ca:	2300      	movs	r3, #0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d10c      	bne.n	80137ea <xQueueReceiveFromISR+0x62>
	__asm volatile
 80137d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137d4:	b672      	cpsid	i
 80137d6:	f383 8811 	msr	BASEPRI, r3
 80137da:	f3bf 8f6f 	isb	sy
 80137de:	f3bf 8f4f 	dsb	sy
 80137e2:	b662      	cpsie	i
 80137e4:	61fb      	str	r3, [r7, #28]
}
 80137e6:	bf00      	nop
 80137e8:	e7fe      	b.n	80137e8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137ea:	f7ff f98f 	bl	8012b0c <vPortValidateInterruptPriority>
	__asm volatile
 80137ee:	f3ef 8211 	mrs	r2, BASEPRI
 80137f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137f6:	b672      	cpsid	i
 80137f8:	f383 8811 	msr	BASEPRI, r3
 80137fc:	f3bf 8f6f 	isb	sy
 8013800:	f3bf 8f4f 	dsb	sy
 8013804:	b662      	cpsie	i
 8013806:	61ba      	str	r2, [r7, #24]
 8013808:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801380a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801380c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013812:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	2b00      	cmp	r3, #0
 8013818:	d02f      	beq.n	801387a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013824:	68b9      	ldr	r1, [r7, #8]
 8013826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013828:	f000 f8db 	bl	80139e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382e:	1e5a      	subs	r2, r3, #1
 8013830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013832:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801383c:	d112      	bne.n	8013864 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d016      	beq.n	8013874 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013848:	3310      	adds	r3, #16
 801384a:	4618      	mov	r0, r3
 801384c:	f000 fe70 	bl	8014530 <xTaskRemoveFromEventList>
 8013850:	4603      	mov	r3, r0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00e      	beq.n	8013874 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d00b      	beq.n	8013874 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2201      	movs	r2, #1
 8013860:	601a      	str	r2, [r3, #0]
 8013862:	e007      	b.n	8013874 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013868:	3301      	adds	r3, #1
 801386a:	b2db      	uxtb	r3, r3
 801386c:	b25a      	sxtb	r2, r3
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013874:	2301      	movs	r3, #1
 8013876:	637b      	str	r3, [r7, #52]	; 0x34
 8013878:	e001      	b.n	801387e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801387a:	2300      	movs	r3, #0
 801387c:	637b      	str	r3, [r7, #52]	; 0x34
 801387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013880:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	f383 8811 	msr	BASEPRI, r3
}
 8013888:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801388c:	4618      	mov	r0, r3
 801388e:	3738      	adds	r7, #56	; 0x38
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d10c      	bne.n	80138c0 <vQueueDelete+0x2c>
	__asm volatile
 80138a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138aa:	b672      	cpsid	i
 80138ac:	f383 8811 	msr	BASEPRI, r3
 80138b0:	f3bf 8f6f 	isb	sy
 80138b4:	f3bf 8f4f 	dsb	sy
 80138b8:	b662      	cpsie	i
 80138ba:	60bb      	str	r3, [r7, #8]
}
 80138bc:	bf00      	nop
 80138be:	e7fe      	b.n	80138be <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80138c0:	68f8      	ldr	r0, [r7, #12]
 80138c2:	f000 f95f 	bl	8013b84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d102      	bne.n	80138d6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80138d0:	68f8      	ldr	r0, [r7, #12]
 80138d2:	f7fe fd59 	bl	8012388 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80138d6:	bf00      	nop
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80138de:	b480      	push	{r7}
 80138e0:	b085      	sub	sp, #20
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d006      	beq.n	80138fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80138f8:	60fb      	str	r3, [r7, #12]
 80138fa:	e001      	b.n	8013900 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80138fc:	2300      	movs	r3, #0
 80138fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013900:	68fb      	ldr	r3, [r7, #12]
	}
 8013902:	4618      	mov	r0, r3
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr

0801390e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801390e:	b580      	push	{r7, lr}
 8013910:	b086      	sub	sp, #24
 8013912:	af00      	add	r7, sp, #0
 8013914:	60f8      	str	r0, [r7, #12]
 8013916:	60b9      	str	r1, [r7, #8]
 8013918:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801391a:	2300      	movs	r3, #0
 801391c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013922:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10d      	bne.n	8013948 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d14d      	bne.n	80139d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	689b      	ldr	r3, [r3, #8]
 8013938:	4618      	mov	r0, r3
 801393a:	f001 f845 	bl	80149c8 <xTaskPriorityDisinherit>
 801393e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2200      	movs	r2, #0
 8013944:	609a      	str	r2, [r3, #8]
 8013946:	e043      	b.n	80139d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d119      	bne.n	8013982 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	6858      	ldr	r0, [r3, #4]
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013956:	461a      	mov	r2, r3
 8013958:	68b9      	ldr	r1, [r7, #8]
 801395a:	f012 fe27 	bl	80265ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	685a      	ldr	r2, [r3, #4]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013966:	441a      	add	r2, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	685a      	ldr	r2, [r3, #4]
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	429a      	cmp	r2, r3
 8013976:	d32b      	bcc.n	80139d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	605a      	str	r2, [r3, #4]
 8013980:	e026      	b.n	80139d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	68d8      	ldr	r0, [r3, #12]
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801398a:	461a      	mov	r2, r3
 801398c:	68b9      	ldr	r1, [r7, #8]
 801398e:	f012 fe0d 	bl	80265ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	68da      	ldr	r2, [r3, #12]
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801399a:	425b      	negs	r3, r3
 801399c:	441a      	add	r2, r3
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	68da      	ldr	r2, [r3, #12]
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d207      	bcs.n	80139be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	689a      	ldr	r2, [r3, #8]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139b6:	425b      	negs	r3, r3
 80139b8:	441a      	add	r2, r3
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d105      	bne.n	80139d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d002      	beq.n	80139d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	3b01      	subs	r3, #1
 80139ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	1c5a      	adds	r2, r3, #1
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80139d8:	697b      	ldr	r3, [r7, #20]
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3718      	adds	r7, #24
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}

080139e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b082      	sub	sp, #8
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	6078      	str	r0, [r7, #4]
 80139ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d018      	beq.n	8013a26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	68da      	ldr	r2, [r3, #12]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139fc:	441a      	add	r2, r3
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	68da      	ldr	r2, [r3, #12]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d303      	bcc.n	8013a16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	68d9      	ldr	r1, [r3, #12]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a1e:	461a      	mov	r2, r3
 8013a20:	6838      	ldr	r0, [r7, #0]
 8013a22:	f012 fdc3 	bl	80265ac <memcpy>
	}
}
 8013a26:	bf00      	nop
 8013a28:	3708      	adds	r7, #8
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b084      	sub	sp, #16
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a36:	f7fe ff81 	bl	801293c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a42:	e011      	b.n	8013a68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d012      	beq.n	8013a72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	3324      	adds	r3, #36	; 0x24
 8013a50:	4618      	mov	r0, r3
 8013a52:	f000 fd6d 	bl	8014530 <xTaskRemoveFromEventList>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d001      	beq.n	8013a60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013a5c:	f000 fe4a 	bl	80146f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a60:	7bfb      	ldrb	r3, [r7, #15]
 8013a62:	3b01      	subs	r3, #1
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	dce9      	bgt.n	8013a44 <prvUnlockQueue+0x16>
 8013a70:	e000      	b.n	8013a74 <prvUnlockQueue+0x46>
					break;
 8013a72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	22ff      	movs	r2, #255	; 0xff
 8013a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013a7c:	f7fe ff92 	bl	80129a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a80:	f7fe ff5c 	bl	801293c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a8c:	e011      	b.n	8013ab2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	691b      	ldr	r3, [r3, #16]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d012      	beq.n	8013abc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	3310      	adds	r3, #16
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f000 fd48 	bl	8014530 <xTaskRemoveFromEventList>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013aa6:	f000 fe25 	bl	80146f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013aaa:	7bbb      	ldrb	r3, [r7, #14]
 8013aac:	3b01      	subs	r3, #1
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	dce9      	bgt.n	8013a8e <prvUnlockQueue+0x60>
 8013aba:	e000      	b.n	8013abe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013abc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	22ff      	movs	r2, #255	; 0xff
 8013ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013ac6:	f7fe ff6d 	bl	80129a4 <vPortExitCritical>
}
 8013aca:	bf00      	nop
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b084      	sub	sp, #16
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ada:	f7fe ff2f 	bl	801293c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d102      	bne.n	8013aec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	60fb      	str	r3, [r7, #12]
 8013aea:	e001      	b.n	8013af0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013aec:	2300      	movs	r3, #0
 8013aee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013af0:	f7fe ff58 	bl	80129a4 <vPortExitCritical>

	return xReturn;
 8013af4:	68fb      	ldr	r3, [r7, #12]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b084      	sub	sp, #16
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013b06:	f7fe ff19 	bl	801293c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d102      	bne.n	8013b1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013b16:	2301      	movs	r3, #1
 8013b18:	60fb      	str	r3, [r7, #12]
 8013b1a:	e001      	b.n	8013b20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013b20:	f7fe ff40 	bl	80129a4 <vPortExitCritical>

	return xReturn;
 8013b24:	68fb      	ldr	r3, [r7, #12]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
	...

08013b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013b30:	b480      	push	{r7}
 8013b32:	b085      	sub	sp, #20
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	60fb      	str	r3, [r7, #12]
 8013b3e:	e014      	b.n	8013b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013b40:	4a0f      	ldr	r2, [pc, #60]	; (8013b80 <vQueueAddToRegistry+0x50>)
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10b      	bne.n	8013b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013b4c:	490c      	ldr	r1, [pc, #48]	; (8013b80 <vQueueAddToRegistry+0x50>)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013b56:	4a0a      	ldr	r2, [pc, #40]	; (8013b80 <vQueueAddToRegistry+0x50>)
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	00db      	lsls	r3, r3, #3
 8013b5c:	4413      	add	r3, r2
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013b62:	e006      	b.n	8013b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	3301      	adds	r3, #1
 8013b68:	60fb      	str	r3, [r7, #12]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2b07      	cmp	r3, #7
 8013b6e:	d9e7      	bls.n	8013b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013b70:	bf00      	nop
 8013b72:	bf00      	nop
 8013b74:	3714      	adds	r7, #20
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr
 8013b7e:	bf00      	nop
 8013b80:	20057110 	.word	0x20057110

08013b84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	60fb      	str	r3, [r7, #12]
 8013b90:	e016      	b.n	8013bc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013b92:	4a10      	ldr	r2, [pc, #64]	; (8013bd4 <vQueueUnregisterQueue+0x50>)
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	00db      	lsls	r3, r3, #3
 8013b98:	4413      	add	r3, r2
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d10b      	bne.n	8013bba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013ba2:	4a0c      	ldr	r2, [pc, #48]	; (8013bd4 <vQueueUnregisterQueue+0x50>)
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013bac:	4a09      	ldr	r2, [pc, #36]	; (8013bd4 <vQueueUnregisterQueue+0x50>)
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	00db      	lsls	r3, r3, #3
 8013bb2:	4413      	add	r3, r2
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	605a      	str	r2, [r3, #4]
				break;
 8013bb8:	e006      	b.n	8013bc8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	60fb      	str	r3, [r7, #12]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b07      	cmp	r3, #7
 8013bc4:	d9e5      	bls.n	8013b92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013bc6:	bf00      	nop
 8013bc8:	bf00      	nop
 8013bca:	3714      	adds	r7, #20
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	20057110 	.word	0x20057110

08013bd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013be8:	f7fe fea8 	bl	801293c <vPortEnterCritical>
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013bf2:	b25b      	sxtb	r3, r3
 8013bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf8:	d103      	bne.n	8013c02 <vQueueWaitForMessageRestricted+0x2a>
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c08:	b25b      	sxtb	r3, r3
 8013c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0e:	d103      	bne.n	8013c18 <vQueueWaitForMessageRestricted+0x40>
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	2200      	movs	r2, #0
 8013c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c18:	f7fe fec4 	bl	80129a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d106      	bne.n	8013c32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	3324      	adds	r3, #36	; 0x24
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	68b9      	ldr	r1, [r7, #8]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f000 fc51 	bl	80144d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013c32:	6978      	ldr	r0, [r7, #20]
 8013c34:	f7ff fefb 	bl	8013a2e <prvUnlockQueue>
	}
 8013c38:	bf00      	nop
 8013c3a:	3718      	adds	r7, #24
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b08e      	sub	sp, #56	; 0x38
 8013c44:	af04      	add	r7, sp, #16
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
 8013c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d10c      	bne.n	8013c6e <xTaskCreateStatic+0x2e>
	__asm volatile
 8013c54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c58:	b672      	cpsid	i
 8013c5a:	f383 8811 	msr	BASEPRI, r3
 8013c5e:	f3bf 8f6f 	isb	sy
 8013c62:	f3bf 8f4f 	dsb	sy
 8013c66:	b662      	cpsie	i
 8013c68:	623b      	str	r3, [r7, #32]
}
 8013c6a:	bf00      	nop
 8013c6c:	e7fe      	b.n	8013c6c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10c      	bne.n	8013c8e <xTaskCreateStatic+0x4e>
	__asm volatile
 8013c74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c78:	b672      	cpsid	i
 8013c7a:	f383 8811 	msr	BASEPRI, r3
 8013c7e:	f3bf 8f6f 	isb	sy
 8013c82:	f3bf 8f4f 	dsb	sy
 8013c86:	b662      	cpsie	i
 8013c88:	61fb      	str	r3, [r7, #28]
}
 8013c8a:	bf00      	nop
 8013c8c:	e7fe      	b.n	8013c8c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013c8e:	235c      	movs	r3, #92	; 0x5c
 8013c90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	2b5c      	cmp	r3, #92	; 0x5c
 8013c96:	d00c      	beq.n	8013cb2 <xTaskCreateStatic+0x72>
	__asm volatile
 8013c98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c9c:	b672      	cpsid	i
 8013c9e:	f383 8811 	msr	BASEPRI, r3
 8013ca2:	f3bf 8f6f 	isb	sy
 8013ca6:	f3bf 8f4f 	dsb	sy
 8013caa:	b662      	cpsie	i
 8013cac:	61bb      	str	r3, [r7, #24]
}
 8013cae:	bf00      	nop
 8013cb0:	e7fe      	b.n	8013cb0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013cb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d01e      	beq.n	8013cf8 <xTaskCreateStatic+0xb8>
 8013cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d01b      	beq.n	8013cf8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ccc:	2202      	movs	r2, #2
 8013cce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	9303      	str	r3, [sp, #12]
 8013cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd8:	9302      	str	r3, [sp, #8]
 8013cda:	f107 0314 	add.w	r3, r7, #20
 8013cde:	9301      	str	r3, [sp, #4]
 8013ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	68b9      	ldr	r1, [r7, #8]
 8013cea:	68f8      	ldr	r0, [r7, #12]
 8013cec:	f000 f850 	bl	8013d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cf2:	f000 f8df 	bl	8013eb4 <prvAddNewTaskToReadyList>
 8013cf6:	e001      	b.n	8013cfc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013cfc:	697b      	ldr	r3, [r7, #20]
	}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3728      	adds	r7, #40	; 0x28
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013d06:	b580      	push	{r7, lr}
 8013d08:	b08c      	sub	sp, #48	; 0x30
 8013d0a:	af04      	add	r7, sp, #16
 8013d0c:	60f8      	str	r0, [r7, #12]
 8013d0e:	60b9      	str	r1, [r7, #8]
 8013d10:	603b      	str	r3, [r7, #0]
 8013d12:	4613      	mov	r3, r2
 8013d14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013d16:	88fb      	ldrh	r3, [r7, #6]
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fe fa6a 	bl	80121f4 <pvPortMalloc>
 8013d20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d00e      	beq.n	8013d46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013d28:	205c      	movs	r0, #92	; 0x5c
 8013d2a:	f7fe fa63 	bl	80121f4 <pvPortMalloc>
 8013d2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d003      	beq.n	8013d3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8013d3c:	e005      	b.n	8013d4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013d3e:	6978      	ldr	r0, [r7, #20]
 8013d40:	f7fe fb22 	bl	8012388 <vPortFree>
 8013d44:	e001      	b.n	8013d4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013d46:	2300      	movs	r3, #0
 8013d48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d017      	beq.n	8013d80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	2200      	movs	r2, #0
 8013d54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013d58:	88fa      	ldrh	r2, [r7, #6]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	9303      	str	r3, [sp, #12]
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	9302      	str	r3, [sp, #8]
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	9301      	str	r3, [sp, #4]
 8013d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d68:	9300      	str	r3, [sp, #0]
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	68b9      	ldr	r1, [r7, #8]
 8013d6e:	68f8      	ldr	r0, [r7, #12]
 8013d70:	f000 f80e 	bl	8013d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013d74:	69f8      	ldr	r0, [r7, #28]
 8013d76:	f000 f89d 	bl	8013eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	61bb      	str	r3, [r7, #24]
 8013d7e:	e002      	b.n	8013d86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013d80:	f04f 33ff 	mov.w	r3, #4294967295
 8013d84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013d86:	69bb      	ldr	r3, [r7, #24]
	}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3720      	adds	r7, #32
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b088      	sub	sp, #32
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	607a      	str	r2, [r7, #4]
 8013d9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	461a      	mov	r2, r3
 8013da8:	21a5      	movs	r1, #165	; 0xa5
 8013daa:	f012 fc0d 	bl	80265c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013db2:	6879      	ldr	r1, [r7, #4]
 8013db4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013db8:	440b      	add	r3, r1
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	4413      	add	r3, r2
 8013dbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	f023 0307 	bic.w	r3, r3, #7
 8013dc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	f003 0307 	and.w	r3, r3, #7
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d00c      	beq.n	8013dec <prvInitialiseNewTask+0x5c>
	__asm volatile
 8013dd2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013dd6:	b672      	cpsid	i
 8013dd8:	f383 8811 	msr	BASEPRI, r3
 8013ddc:	f3bf 8f6f 	isb	sy
 8013de0:	f3bf 8f4f 	dsb	sy
 8013de4:	b662      	cpsie	i
 8013de6:	617b      	str	r3, [r7, #20]
}
 8013de8:	bf00      	nop
 8013dea:	e7fe      	b.n	8013dea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d01f      	beq.n	8013e32 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013df2:	2300      	movs	r3, #0
 8013df4:	61fb      	str	r3, [r7, #28]
 8013df6:	e012      	b.n	8013e1e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013df8:	68ba      	ldr	r2, [r7, #8]
 8013dfa:	69fb      	ldr	r3, [r7, #28]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	7819      	ldrb	r1, [r3, #0]
 8013e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	4413      	add	r3, r2
 8013e06:	3334      	adds	r3, #52	; 0x34
 8013e08:	460a      	mov	r2, r1
 8013e0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013e0c:	68ba      	ldr	r2, [r7, #8]
 8013e0e:	69fb      	ldr	r3, [r7, #28]
 8013e10:	4413      	add	r3, r2
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d006      	beq.n	8013e26 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	61fb      	str	r3, [r7, #28]
 8013e1e:	69fb      	ldr	r3, [r7, #28]
 8013e20:	2b0f      	cmp	r3, #15
 8013e22:	d9e9      	bls.n	8013df8 <prvInitialiseNewTask+0x68>
 8013e24:	e000      	b.n	8013e28 <prvInitialiseNewTask+0x98>
			{
				break;
 8013e26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013e30:	e003      	b.n	8013e3a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e34:	2200      	movs	r2, #0
 8013e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3c:	2b37      	cmp	r3, #55	; 0x37
 8013e3e:	d901      	bls.n	8013e44 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013e40:	2337      	movs	r3, #55	; 0x37
 8013e42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	2200      	movs	r2, #0
 8013e54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e58:	3304      	adds	r3, #4
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe fbce 	bl	80125fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e62:	3318      	adds	r3, #24
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fe fbc9 	bl	80125fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e82:	2200      	movs	r2, #0
 8013e84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013e8e:	683a      	ldr	r2, [r7, #0]
 8013e90:	68f9      	ldr	r1, [r7, #12]
 8013e92:	69b8      	ldr	r0, [r7, #24]
 8013e94:	f7fe fc46 	bl	8012724 <pxPortInitialiseStack>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d002      	beq.n	8013eaa <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013eaa:	bf00      	nop
 8013eac:	3720      	adds	r7, #32
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
	...

08013eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013ebc:	f7fe fd3e 	bl	801293c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013ec0:	4b2d      	ldr	r3, [pc, #180]	; (8013f78 <prvAddNewTaskToReadyList+0xc4>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	4a2c      	ldr	r2, [pc, #176]	; (8013f78 <prvAddNewTaskToReadyList+0xc4>)
 8013ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013eca:	4b2c      	ldr	r3, [pc, #176]	; (8013f7c <prvAddNewTaskToReadyList+0xc8>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d109      	bne.n	8013ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013ed2:	4a2a      	ldr	r2, [pc, #168]	; (8013f7c <prvAddNewTaskToReadyList+0xc8>)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013ed8:	4b27      	ldr	r3, [pc, #156]	; (8013f78 <prvAddNewTaskToReadyList+0xc4>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d110      	bne.n	8013f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013ee0:	f000 fc2c 	bl	801473c <prvInitialiseTaskLists>
 8013ee4:	e00d      	b.n	8013f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013ee6:	4b26      	ldr	r3, [pc, #152]	; (8013f80 <prvAddNewTaskToReadyList+0xcc>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d109      	bne.n	8013f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013eee:	4b23      	ldr	r3, [pc, #140]	; (8013f7c <prvAddNewTaskToReadyList+0xc8>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d802      	bhi.n	8013f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013efc:	4a1f      	ldr	r2, [pc, #124]	; (8013f7c <prvAddNewTaskToReadyList+0xc8>)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013f02:	4b20      	ldr	r3, [pc, #128]	; (8013f84 <prvAddNewTaskToReadyList+0xd0>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	3301      	adds	r3, #1
 8013f08:	4a1e      	ldr	r2, [pc, #120]	; (8013f84 <prvAddNewTaskToReadyList+0xd0>)
 8013f0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013f0c:	4b1d      	ldr	r3, [pc, #116]	; (8013f84 <prvAddNewTaskToReadyList+0xd0>)
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f18:	4b1b      	ldr	r3, [pc, #108]	; (8013f88 <prvAddNewTaskToReadyList+0xd4>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d903      	bls.n	8013f28 <prvAddNewTaskToReadyList+0x74>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f24:	4a18      	ldr	r2, [pc, #96]	; (8013f88 <prvAddNewTaskToReadyList+0xd4>)
 8013f26:	6013      	str	r3, [r2, #0]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	009b      	lsls	r3, r3, #2
 8013f30:	4413      	add	r3, r2
 8013f32:	009b      	lsls	r3, r3, #2
 8013f34:	4a15      	ldr	r2, [pc, #84]	; (8013f8c <prvAddNewTaskToReadyList+0xd8>)
 8013f36:	441a      	add	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	3304      	adds	r3, #4
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	4610      	mov	r0, r2
 8013f40:	f7fe fb69 	bl	8012616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013f44:	f7fe fd2e 	bl	80129a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013f48:	4b0d      	ldr	r3, [pc, #52]	; (8013f80 <prvAddNewTaskToReadyList+0xcc>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00e      	beq.n	8013f6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013f50:	4b0a      	ldr	r3, [pc, #40]	; (8013f7c <prvAddNewTaskToReadyList+0xc8>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d207      	bcs.n	8013f6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013f5e:	4b0c      	ldr	r3, [pc, #48]	; (8013f90 <prvAddNewTaskToReadyList+0xdc>)
 8013f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f64:	601a      	str	r2, [r3, #0]
 8013f66:	f3bf 8f4f 	dsb	sy
 8013f6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f6e:	bf00      	nop
 8013f70:	3708      	adds	r7, #8
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	bf00      	nop
 8013f78:	200565ec 	.word	0x200565ec
 8013f7c:	20056118 	.word	0x20056118
 8013f80:	200565f8 	.word	0x200565f8
 8013f84:	20056608 	.word	0x20056608
 8013f88:	200565f4 	.word	0x200565f4
 8013f8c:	2005611c 	.word	0x2005611c
 8013f90:	e000ed04 	.word	0xe000ed04

08013f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d019      	beq.n	8013fda <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013fa6:	4b14      	ldr	r3, [pc, #80]	; (8013ff8 <vTaskDelay+0x64>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00c      	beq.n	8013fc8 <vTaskDelay+0x34>
	__asm volatile
 8013fae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013fb2:	b672      	cpsid	i
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	b662      	cpsie	i
 8013fc2:	60bb      	str	r3, [r7, #8]
}
 8013fc4:	bf00      	nop
 8013fc6:	e7fe      	b.n	8013fc6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013fc8:	f000 f884 	bl	80140d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013fcc:	2100      	movs	r1, #0
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f000 fe06 	bl	8014be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013fd4:	f000 f88c 	bl	80140f0 <xTaskResumeAll>
 8013fd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d107      	bne.n	8013ff0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8013fe0:	4b06      	ldr	r3, [pc, #24]	; (8013ffc <vTaskDelay+0x68>)
 8013fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fe6:	601a      	str	r2, [r3, #0]
 8013fe8:	f3bf 8f4f 	dsb	sy
 8013fec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ff0:	bf00      	nop
 8013ff2:	3710      	adds	r7, #16
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	20056614 	.word	0x20056614
 8013ffc:	e000ed04 	.word	0xe000ed04

08014000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b08a      	sub	sp, #40	; 0x28
 8014004:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014006:	2300      	movs	r3, #0
 8014008:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801400a:	2300      	movs	r3, #0
 801400c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801400e:	463a      	mov	r2, r7
 8014010:	1d39      	adds	r1, r7, #4
 8014012:	f107 0308 	add.w	r3, r7, #8
 8014016:	4618      	mov	r0, r3
 8014018:	f7fe f8b8 	bl	801218c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801401c:	6839      	ldr	r1, [r7, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	68ba      	ldr	r2, [r7, #8]
 8014022:	9202      	str	r2, [sp, #8]
 8014024:	9301      	str	r3, [sp, #4]
 8014026:	2300      	movs	r3, #0
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	2300      	movs	r3, #0
 801402c:	460a      	mov	r2, r1
 801402e:	4923      	ldr	r1, [pc, #140]	; (80140bc <vTaskStartScheduler+0xbc>)
 8014030:	4823      	ldr	r0, [pc, #140]	; (80140c0 <vTaskStartScheduler+0xc0>)
 8014032:	f7ff fe05 	bl	8013c40 <xTaskCreateStatic>
 8014036:	4603      	mov	r3, r0
 8014038:	4a22      	ldr	r2, [pc, #136]	; (80140c4 <vTaskStartScheduler+0xc4>)
 801403a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801403c:	4b21      	ldr	r3, [pc, #132]	; (80140c4 <vTaskStartScheduler+0xc4>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d002      	beq.n	801404a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014044:	2301      	movs	r3, #1
 8014046:	617b      	str	r3, [r7, #20]
 8014048:	e001      	b.n	801404e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801404a:	2300      	movs	r3, #0
 801404c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	2b01      	cmp	r3, #1
 8014052:	d102      	bne.n	801405a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014054:	f000 fe18 	bl	8014c88 <xTimerCreateTimerTask>
 8014058:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d118      	bne.n	8014092 <vTaskStartScheduler+0x92>
	__asm volatile
 8014060:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014064:	b672      	cpsid	i
 8014066:	f383 8811 	msr	BASEPRI, r3
 801406a:	f3bf 8f6f 	isb	sy
 801406e:	f3bf 8f4f 	dsb	sy
 8014072:	b662      	cpsie	i
 8014074:	613b      	str	r3, [r7, #16]
}
 8014076:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014078:	4b13      	ldr	r3, [pc, #76]	; (80140c8 <vTaskStartScheduler+0xc8>)
 801407a:	f04f 32ff 	mov.w	r2, #4294967295
 801407e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014080:	4b12      	ldr	r3, [pc, #72]	; (80140cc <vTaskStartScheduler+0xcc>)
 8014082:	2201      	movs	r2, #1
 8014084:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014086:	4b12      	ldr	r3, [pc, #72]	; (80140d0 <vTaskStartScheduler+0xd0>)
 8014088:	2200      	movs	r2, #0
 801408a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801408c:	f7fe fbd8 	bl	8012840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014090:	e010      	b.n	80140b4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014098:	d10c      	bne.n	80140b4 <vTaskStartScheduler+0xb4>
	__asm volatile
 801409a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801409e:	b672      	cpsid	i
 80140a0:	f383 8811 	msr	BASEPRI, r3
 80140a4:	f3bf 8f6f 	isb	sy
 80140a8:	f3bf 8f4f 	dsb	sy
 80140ac:	b662      	cpsie	i
 80140ae:	60fb      	str	r3, [r7, #12]
}
 80140b0:	bf00      	nop
 80140b2:	e7fe      	b.n	80140b2 <vTaskStartScheduler+0xb2>
}
 80140b4:	bf00      	nop
 80140b6:	3718      	adds	r7, #24
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	0802b8b4 	.word	0x0802b8b4
 80140c0:	0801470d 	.word	0x0801470d
 80140c4:	20056610 	.word	0x20056610
 80140c8:	2005660c 	.word	0x2005660c
 80140cc:	200565f8 	.word	0x200565f8
 80140d0:	200565f0 	.word	0x200565f0

080140d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80140d4:	b480      	push	{r7}
 80140d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80140d8:	4b04      	ldr	r3, [pc, #16]	; (80140ec <vTaskSuspendAll+0x18>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	3301      	adds	r3, #1
 80140de:	4a03      	ldr	r2, [pc, #12]	; (80140ec <vTaskSuspendAll+0x18>)
 80140e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80140e2:	bf00      	nop
 80140e4:	46bd      	mov	sp, r7
 80140e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ea:	4770      	bx	lr
 80140ec:	20056614 	.word	0x20056614

080140f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b084      	sub	sp, #16
 80140f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80140f6:	2300      	movs	r3, #0
 80140f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80140fa:	2300      	movs	r3, #0
 80140fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80140fe:	4b43      	ldr	r3, [pc, #268]	; (801420c <xTaskResumeAll+0x11c>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d10c      	bne.n	8014120 <xTaskResumeAll+0x30>
	__asm volatile
 8014106:	f04f 0330 	mov.w	r3, #48	; 0x30
 801410a:	b672      	cpsid	i
 801410c:	f383 8811 	msr	BASEPRI, r3
 8014110:	f3bf 8f6f 	isb	sy
 8014114:	f3bf 8f4f 	dsb	sy
 8014118:	b662      	cpsie	i
 801411a:	603b      	str	r3, [r7, #0]
}
 801411c:	bf00      	nop
 801411e:	e7fe      	b.n	801411e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014120:	f7fe fc0c 	bl	801293c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014124:	4b39      	ldr	r3, [pc, #228]	; (801420c <xTaskResumeAll+0x11c>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	3b01      	subs	r3, #1
 801412a:	4a38      	ldr	r2, [pc, #224]	; (801420c <xTaskResumeAll+0x11c>)
 801412c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801412e:	4b37      	ldr	r3, [pc, #220]	; (801420c <xTaskResumeAll+0x11c>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d162      	bne.n	80141fc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014136:	4b36      	ldr	r3, [pc, #216]	; (8014210 <xTaskResumeAll+0x120>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d05e      	beq.n	80141fc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801413e:	e02f      	b.n	80141a0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014140:	4b34      	ldr	r3, [pc, #208]	; (8014214 <xTaskResumeAll+0x124>)
 8014142:	68db      	ldr	r3, [r3, #12]
 8014144:	68db      	ldr	r3, [r3, #12]
 8014146:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	3318      	adds	r3, #24
 801414c:	4618      	mov	r0, r3
 801414e:	f7fe fabf 	bl	80126d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	3304      	adds	r3, #4
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe faba 	bl	80126d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014160:	4b2d      	ldr	r3, [pc, #180]	; (8014218 <xTaskResumeAll+0x128>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	429a      	cmp	r2, r3
 8014166:	d903      	bls.n	8014170 <xTaskResumeAll+0x80>
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416c:	4a2a      	ldr	r2, [pc, #168]	; (8014218 <xTaskResumeAll+0x128>)
 801416e:	6013      	str	r3, [r2, #0]
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014174:	4613      	mov	r3, r2
 8014176:	009b      	lsls	r3, r3, #2
 8014178:	4413      	add	r3, r2
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	4a27      	ldr	r2, [pc, #156]	; (801421c <xTaskResumeAll+0x12c>)
 801417e:	441a      	add	r2, r3
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	3304      	adds	r3, #4
 8014184:	4619      	mov	r1, r3
 8014186:	4610      	mov	r0, r2
 8014188:	f7fe fa45 	bl	8012616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014190:	4b23      	ldr	r3, [pc, #140]	; (8014220 <xTaskResumeAll+0x130>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014196:	429a      	cmp	r2, r3
 8014198:	d302      	bcc.n	80141a0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801419a:	4b22      	ldr	r3, [pc, #136]	; (8014224 <xTaskResumeAll+0x134>)
 801419c:	2201      	movs	r2, #1
 801419e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80141a0:	4b1c      	ldr	r3, [pc, #112]	; (8014214 <xTaskResumeAll+0x124>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d1cb      	bne.n	8014140 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d001      	beq.n	80141b2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80141ae:	f000 fb65 	bl	801487c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80141b2:	4b1d      	ldr	r3, [pc, #116]	; (8014228 <xTaskResumeAll+0x138>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d010      	beq.n	80141e0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80141be:	f000 f847 	bl	8014250 <xTaskIncrementTick>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d002      	beq.n	80141ce <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80141c8:	4b16      	ldr	r3, [pc, #88]	; (8014224 <xTaskResumeAll+0x134>)
 80141ca:	2201      	movs	r2, #1
 80141cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	3b01      	subs	r3, #1
 80141d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d1f1      	bne.n	80141be <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80141da:	4b13      	ldr	r3, [pc, #76]	; (8014228 <xTaskResumeAll+0x138>)
 80141dc:	2200      	movs	r2, #0
 80141de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80141e0:	4b10      	ldr	r3, [pc, #64]	; (8014224 <xTaskResumeAll+0x134>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d009      	beq.n	80141fc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80141e8:	2301      	movs	r3, #1
 80141ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80141ec:	4b0f      	ldr	r3, [pc, #60]	; (801422c <xTaskResumeAll+0x13c>)
 80141ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141f2:	601a      	str	r2, [r3, #0]
 80141f4:	f3bf 8f4f 	dsb	sy
 80141f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80141fc:	f7fe fbd2 	bl	80129a4 <vPortExitCritical>

	return xAlreadyYielded;
 8014200:	68bb      	ldr	r3, [r7, #8]
}
 8014202:	4618      	mov	r0, r3
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	20056614 	.word	0x20056614
 8014210:	200565ec 	.word	0x200565ec
 8014214:	200565ac 	.word	0x200565ac
 8014218:	200565f4 	.word	0x200565f4
 801421c:	2005611c 	.word	0x2005611c
 8014220:	20056118 	.word	0x20056118
 8014224:	20056600 	.word	0x20056600
 8014228:	200565fc 	.word	0x200565fc
 801422c:	e000ed04 	.word	0xe000ed04

08014230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014236:	4b05      	ldr	r3, [pc, #20]	; (801424c <xTaskGetTickCount+0x1c>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801423c:	687b      	ldr	r3, [r7, #4]
}
 801423e:	4618      	mov	r0, r3
 8014240:	370c      	adds	r7, #12
 8014242:	46bd      	mov	sp, r7
 8014244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014248:	4770      	bx	lr
 801424a:	bf00      	nop
 801424c:	200565f0 	.word	0x200565f0

08014250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b086      	sub	sp, #24
 8014254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014256:	2300      	movs	r3, #0
 8014258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801425a:	4b50      	ldr	r3, [pc, #320]	; (801439c <xTaskIncrementTick+0x14c>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	f040 808b 	bne.w	801437a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014264:	4b4e      	ldr	r3, [pc, #312]	; (80143a0 <xTaskIncrementTick+0x150>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	3301      	adds	r3, #1
 801426a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801426c:	4a4c      	ldr	r2, [pc, #304]	; (80143a0 <xTaskIncrementTick+0x150>)
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d122      	bne.n	80142be <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8014278:	4b4a      	ldr	r3, [pc, #296]	; (80143a4 <xTaskIncrementTick+0x154>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d00c      	beq.n	801429c <xTaskIncrementTick+0x4c>
	__asm volatile
 8014282:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014286:	b672      	cpsid	i
 8014288:	f383 8811 	msr	BASEPRI, r3
 801428c:	f3bf 8f6f 	isb	sy
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	b662      	cpsie	i
 8014296:	603b      	str	r3, [r7, #0]
}
 8014298:	bf00      	nop
 801429a:	e7fe      	b.n	801429a <xTaskIncrementTick+0x4a>
 801429c:	4b41      	ldr	r3, [pc, #260]	; (80143a4 <xTaskIncrementTick+0x154>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	60fb      	str	r3, [r7, #12]
 80142a2:	4b41      	ldr	r3, [pc, #260]	; (80143a8 <xTaskIncrementTick+0x158>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	4a3f      	ldr	r2, [pc, #252]	; (80143a4 <xTaskIncrementTick+0x154>)
 80142a8:	6013      	str	r3, [r2, #0]
 80142aa:	4a3f      	ldr	r2, [pc, #252]	; (80143a8 <xTaskIncrementTick+0x158>)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6013      	str	r3, [r2, #0]
 80142b0:	4b3e      	ldr	r3, [pc, #248]	; (80143ac <xTaskIncrementTick+0x15c>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3301      	adds	r3, #1
 80142b6:	4a3d      	ldr	r2, [pc, #244]	; (80143ac <xTaskIncrementTick+0x15c>)
 80142b8:	6013      	str	r3, [r2, #0]
 80142ba:	f000 fadf 	bl	801487c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80142be:	4b3c      	ldr	r3, [pc, #240]	; (80143b0 <xTaskIncrementTick+0x160>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	693a      	ldr	r2, [r7, #16]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d349      	bcc.n	801435c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142c8:	4b36      	ldr	r3, [pc, #216]	; (80143a4 <xTaskIncrementTick+0x154>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d104      	bne.n	80142dc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142d2:	4b37      	ldr	r3, [pc, #220]	; (80143b0 <xTaskIncrementTick+0x160>)
 80142d4:	f04f 32ff 	mov.w	r2, #4294967295
 80142d8:	601a      	str	r2, [r3, #0]
					break;
 80142da:	e03f      	b.n	801435c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142dc:	4b31      	ldr	r3, [pc, #196]	; (80143a4 <xTaskIncrementTick+0x154>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80142ec:	693a      	ldr	r2, [r7, #16]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d203      	bcs.n	80142fc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80142f4:	4a2e      	ldr	r2, [pc, #184]	; (80143b0 <xTaskIncrementTick+0x160>)
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80142fa:	e02f      	b.n	801435c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	3304      	adds	r3, #4
 8014300:	4618      	mov	r0, r3
 8014302:	f7fe f9e5 	bl	80126d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801430a:	2b00      	cmp	r3, #0
 801430c:	d004      	beq.n	8014318 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	3318      	adds	r3, #24
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe f9dc 	bl	80126d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801431c:	4b25      	ldr	r3, [pc, #148]	; (80143b4 <xTaskIncrementTick+0x164>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	429a      	cmp	r2, r3
 8014322:	d903      	bls.n	801432c <xTaskIncrementTick+0xdc>
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014328:	4a22      	ldr	r2, [pc, #136]	; (80143b4 <xTaskIncrementTick+0x164>)
 801432a:	6013      	str	r3, [r2, #0]
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014330:	4613      	mov	r3, r2
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	4413      	add	r3, r2
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	4a1f      	ldr	r2, [pc, #124]	; (80143b8 <xTaskIncrementTick+0x168>)
 801433a:	441a      	add	r2, r3
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	3304      	adds	r3, #4
 8014340:	4619      	mov	r1, r3
 8014342:	4610      	mov	r0, r2
 8014344:	f7fe f967 	bl	8012616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801434c:	4b1b      	ldr	r3, [pc, #108]	; (80143bc <xTaskIncrementTick+0x16c>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014352:	429a      	cmp	r2, r3
 8014354:	d3b8      	bcc.n	80142c8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8014356:	2301      	movs	r3, #1
 8014358:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801435a:	e7b5      	b.n	80142c8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801435c:	4b17      	ldr	r3, [pc, #92]	; (80143bc <xTaskIncrementTick+0x16c>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014362:	4915      	ldr	r1, [pc, #84]	; (80143b8 <xTaskIncrementTick+0x168>)
 8014364:	4613      	mov	r3, r2
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4413      	add	r3, r2
 801436a:	009b      	lsls	r3, r3, #2
 801436c:	440b      	add	r3, r1
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b01      	cmp	r3, #1
 8014372:	d907      	bls.n	8014384 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014374:	2301      	movs	r3, #1
 8014376:	617b      	str	r3, [r7, #20]
 8014378:	e004      	b.n	8014384 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801437a:	4b11      	ldr	r3, [pc, #68]	; (80143c0 <xTaskIncrementTick+0x170>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	3301      	adds	r3, #1
 8014380:	4a0f      	ldr	r2, [pc, #60]	; (80143c0 <xTaskIncrementTick+0x170>)
 8014382:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014384:	4b0f      	ldr	r3, [pc, #60]	; (80143c4 <xTaskIncrementTick+0x174>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d001      	beq.n	8014390 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801438c:	2301      	movs	r3, #1
 801438e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014390:	697b      	ldr	r3, [r7, #20]
}
 8014392:	4618      	mov	r0, r3
 8014394:	3718      	adds	r7, #24
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	20056614 	.word	0x20056614
 80143a0:	200565f0 	.word	0x200565f0
 80143a4:	200565a4 	.word	0x200565a4
 80143a8:	200565a8 	.word	0x200565a8
 80143ac:	20056604 	.word	0x20056604
 80143b0:	2005660c 	.word	0x2005660c
 80143b4:	200565f4 	.word	0x200565f4
 80143b8:	2005611c 	.word	0x2005611c
 80143bc:	20056118 	.word	0x20056118
 80143c0:	200565fc 	.word	0x200565fc
 80143c4:	20056600 	.word	0x20056600

080143c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80143c8:	b480      	push	{r7}
 80143ca:	b085      	sub	sp, #20
 80143cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80143ce:	4b29      	ldr	r3, [pc, #164]	; (8014474 <vTaskSwitchContext+0xac>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d003      	beq.n	80143de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80143d6:	4b28      	ldr	r3, [pc, #160]	; (8014478 <vTaskSwitchContext+0xb0>)
 80143d8:	2201      	movs	r2, #1
 80143da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80143dc:	e043      	b.n	8014466 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80143de:	4b26      	ldr	r3, [pc, #152]	; (8014478 <vTaskSwitchContext+0xb0>)
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143e4:	4b25      	ldr	r3, [pc, #148]	; (801447c <vTaskSwitchContext+0xb4>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	60fb      	str	r3, [r7, #12]
 80143ea:	e012      	b.n	8014412 <vTaskSwitchContext+0x4a>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d10c      	bne.n	801440c <vTaskSwitchContext+0x44>
	__asm volatile
 80143f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80143f6:	b672      	cpsid	i
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	b662      	cpsie	i
 8014406:	607b      	str	r3, [r7, #4]
}
 8014408:	bf00      	nop
 801440a:	e7fe      	b.n	801440a <vTaskSwitchContext+0x42>
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	3b01      	subs	r3, #1
 8014410:	60fb      	str	r3, [r7, #12]
 8014412:	491b      	ldr	r1, [pc, #108]	; (8014480 <vTaskSwitchContext+0xb8>)
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	4613      	mov	r3, r2
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	4413      	add	r3, r2
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	440b      	add	r3, r1
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d0e2      	beq.n	80143ec <vTaskSwitchContext+0x24>
 8014426:	68fa      	ldr	r2, [r7, #12]
 8014428:	4613      	mov	r3, r2
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	4413      	add	r3, r2
 801442e:	009b      	lsls	r3, r3, #2
 8014430:	4a13      	ldr	r2, [pc, #76]	; (8014480 <vTaskSwitchContext+0xb8>)
 8014432:	4413      	add	r3, r2
 8014434:	60bb      	str	r3, [r7, #8]
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	685a      	ldr	r2, [r3, #4]
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	605a      	str	r2, [r3, #4]
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	685a      	ldr	r2, [r3, #4]
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	3308      	adds	r3, #8
 8014448:	429a      	cmp	r2, r3
 801444a:	d104      	bne.n	8014456 <vTaskSwitchContext+0x8e>
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	685a      	ldr	r2, [r3, #4]
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	605a      	str	r2, [r3, #4]
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	4a09      	ldr	r2, [pc, #36]	; (8014484 <vTaskSwitchContext+0xbc>)
 801445e:	6013      	str	r3, [r2, #0]
 8014460:	4a06      	ldr	r2, [pc, #24]	; (801447c <vTaskSwitchContext+0xb4>)
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	6013      	str	r3, [r2, #0]
}
 8014466:	bf00      	nop
 8014468:	3714      	adds	r7, #20
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr
 8014472:	bf00      	nop
 8014474:	20056614 	.word	0x20056614
 8014478:	20056600 	.word	0x20056600
 801447c:	200565f4 	.word	0x200565f4
 8014480:	2005611c 	.word	0x2005611c
 8014484:	20056118 	.word	0x20056118

08014488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d10c      	bne.n	80144b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8014498:	f04f 0330 	mov.w	r3, #48	; 0x30
 801449c:	b672      	cpsid	i
 801449e:	f383 8811 	msr	BASEPRI, r3
 80144a2:	f3bf 8f6f 	isb	sy
 80144a6:	f3bf 8f4f 	dsb	sy
 80144aa:	b662      	cpsie	i
 80144ac:	60fb      	str	r3, [r7, #12]
}
 80144ae:	bf00      	nop
 80144b0:	e7fe      	b.n	80144b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80144b2:	4b07      	ldr	r3, [pc, #28]	; (80144d0 <vTaskPlaceOnEventList+0x48>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	3318      	adds	r3, #24
 80144b8:	4619      	mov	r1, r3
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7fe f8cf 	bl	801265e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80144c0:	2101      	movs	r1, #1
 80144c2:	6838      	ldr	r0, [r7, #0]
 80144c4:	f000 fb8c 	bl	8014be0 <prvAddCurrentTaskToDelayedList>
}
 80144c8:	bf00      	nop
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	20056118 	.word	0x20056118

080144d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af00      	add	r7, sp, #0
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d10c      	bne.n	8014500 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80144e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80144ea:	b672      	cpsid	i
 80144ec:	f383 8811 	msr	BASEPRI, r3
 80144f0:	f3bf 8f6f 	isb	sy
 80144f4:	f3bf 8f4f 	dsb	sy
 80144f8:	b662      	cpsie	i
 80144fa:	617b      	str	r3, [r7, #20]
}
 80144fc:	bf00      	nop
 80144fe:	e7fe      	b.n	80144fe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014500:	4b0a      	ldr	r3, [pc, #40]	; (801452c <vTaskPlaceOnEventListRestricted+0x58>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	3318      	adds	r3, #24
 8014506:	4619      	mov	r1, r3
 8014508:	68f8      	ldr	r0, [r7, #12]
 801450a:	f7fe f884 	bl	8012616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d002      	beq.n	801451a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8014514:	f04f 33ff 	mov.w	r3, #4294967295
 8014518:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801451a:	6879      	ldr	r1, [r7, #4]
 801451c:	68b8      	ldr	r0, [r7, #8]
 801451e:	f000 fb5f 	bl	8014be0 <prvAddCurrentTaskToDelayedList>
	}
 8014522:	bf00      	nop
 8014524:	3718      	adds	r7, #24
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	20056118 	.word	0x20056118

08014530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	68db      	ldr	r3, [r3, #12]
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d10c      	bne.n	8014560 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8014546:	f04f 0330 	mov.w	r3, #48	; 0x30
 801454a:	b672      	cpsid	i
 801454c:	f383 8811 	msr	BASEPRI, r3
 8014550:	f3bf 8f6f 	isb	sy
 8014554:	f3bf 8f4f 	dsb	sy
 8014558:	b662      	cpsie	i
 801455a:	60fb      	str	r3, [r7, #12]
}
 801455c:	bf00      	nop
 801455e:	e7fe      	b.n	801455e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	3318      	adds	r3, #24
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe f8b3 	bl	80126d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801456a:	4b1e      	ldr	r3, [pc, #120]	; (80145e4 <xTaskRemoveFromEventList+0xb4>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d11d      	bne.n	80145ae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	3304      	adds	r3, #4
 8014576:	4618      	mov	r0, r3
 8014578:	f7fe f8aa 	bl	80126d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014580:	4b19      	ldr	r3, [pc, #100]	; (80145e8 <xTaskRemoveFromEventList+0xb8>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	429a      	cmp	r2, r3
 8014586:	d903      	bls.n	8014590 <xTaskRemoveFromEventList+0x60>
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801458c:	4a16      	ldr	r2, [pc, #88]	; (80145e8 <xTaskRemoveFromEventList+0xb8>)
 801458e:	6013      	str	r3, [r2, #0]
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014594:	4613      	mov	r3, r2
 8014596:	009b      	lsls	r3, r3, #2
 8014598:	4413      	add	r3, r2
 801459a:	009b      	lsls	r3, r3, #2
 801459c:	4a13      	ldr	r2, [pc, #76]	; (80145ec <xTaskRemoveFromEventList+0xbc>)
 801459e:	441a      	add	r2, r3
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	3304      	adds	r3, #4
 80145a4:	4619      	mov	r1, r3
 80145a6:	4610      	mov	r0, r2
 80145a8:	f7fe f835 	bl	8012616 <vListInsertEnd>
 80145ac:	e005      	b.n	80145ba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	3318      	adds	r3, #24
 80145b2:	4619      	mov	r1, r3
 80145b4:	480e      	ldr	r0, [pc, #56]	; (80145f0 <xTaskRemoveFromEventList+0xc0>)
 80145b6:	f7fe f82e 	bl	8012616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80145ba:	693b      	ldr	r3, [r7, #16]
 80145bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145be:	4b0d      	ldr	r3, [pc, #52]	; (80145f4 <xTaskRemoveFromEventList+0xc4>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d905      	bls.n	80145d4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80145c8:	2301      	movs	r3, #1
 80145ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80145cc:	4b0a      	ldr	r3, [pc, #40]	; (80145f8 <xTaskRemoveFromEventList+0xc8>)
 80145ce:	2201      	movs	r2, #1
 80145d0:	601a      	str	r2, [r3, #0]
 80145d2:	e001      	b.n	80145d8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80145d4:	2300      	movs	r3, #0
 80145d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80145d8:	697b      	ldr	r3, [r7, #20]
}
 80145da:	4618      	mov	r0, r3
 80145dc:	3718      	adds	r7, #24
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}
 80145e2:	bf00      	nop
 80145e4:	20056614 	.word	0x20056614
 80145e8:	200565f4 	.word	0x200565f4
 80145ec:	2005611c 	.word	0x2005611c
 80145f0:	200565ac 	.word	0x200565ac
 80145f4:	20056118 	.word	0x20056118
 80145f8:	20056600 	.word	0x20056600

080145fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80145fc:	b480      	push	{r7}
 80145fe:	b083      	sub	sp, #12
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014604:	4b06      	ldr	r3, [pc, #24]	; (8014620 <vTaskInternalSetTimeOutState+0x24>)
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801460c:	4b05      	ldr	r3, [pc, #20]	; (8014624 <vTaskInternalSetTimeOutState+0x28>)
 801460e:	681a      	ldr	r2, [r3, #0]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	605a      	str	r2, [r3, #4]
}
 8014614:	bf00      	nop
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr
 8014620:	20056604 	.word	0x20056604
 8014624:	200565f0 	.word	0x200565f0

08014628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b088      	sub	sp, #32
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d10c      	bne.n	8014652 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8014638:	f04f 0330 	mov.w	r3, #48	; 0x30
 801463c:	b672      	cpsid	i
 801463e:	f383 8811 	msr	BASEPRI, r3
 8014642:	f3bf 8f6f 	isb	sy
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	b662      	cpsie	i
 801464c:	613b      	str	r3, [r7, #16]
}
 801464e:	bf00      	nop
 8014650:	e7fe      	b.n	8014650 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d10c      	bne.n	8014672 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8014658:	f04f 0330 	mov.w	r3, #48	; 0x30
 801465c:	b672      	cpsid	i
 801465e:	f383 8811 	msr	BASEPRI, r3
 8014662:	f3bf 8f6f 	isb	sy
 8014666:	f3bf 8f4f 	dsb	sy
 801466a:	b662      	cpsie	i
 801466c:	60fb      	str	r3, [r7, #12]
}
 801466e:	bf00      	nop
 8014670:	e7fe      	b.n	8014670 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8014672:	f7fe f963 	bl	801293c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014676:	4b1d      	ldr	r3, [pc, #116]	; (80146ec <xTaskCheckForTimeOut+0xc4>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	69ba      	ldr	r2, [r7, #24]
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801468e:	d102      	bne.n	8014696 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014690:	2300      	movs	r3, #0
 8014692:	61fb      	str	r3, [r7, #28]
 8014694:	e023      	b.n	80146de <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	4b15      	ldr	r3, [pc, #84]	; (80146f0 <xTaskCheckForTimeOut+0xc8>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d007      	beq.n	80146b2 <xTaskCheckForTimeOut+0x8a>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	69ba      	ldr	r2, [r7, #24]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d302      	bcc.n	80146b2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80146ac:	2301      	movs	r3, #1
 80146ae:	61fb      	str	r3, [r7, #28]
 80146b0:	e015      	b.n	80146de <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	697a      	ldr	r2, [r7, #20]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d20b      	bcs.n	80146d4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	1ad2      	subs	r2, r2, r3
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f7ff ff97 	bl	80145fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80146ce:	2300      	movs	r3, #0
 80146d0:	61fb      	str	r3, [r7, #28]
 80146d2:	e004      	b.n	80146de <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	2200      	movs	r2, #0
 80146d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80146da:	2301      	movs	r3, #1
 80146dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80146de:	f7fe f961 	bl	80129a4 <vPortExitCritical>

	return xReturn;
 80146e2:	69fb      	ldr	r3, [r7, #28]
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3720      	adds	r7, #32
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	200565f0 	.word	0x200565f0
 80146f0:	20056604 	.word	0x20056604

080146f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80146f4:	b480      	push	{r7}
 80146f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80146f8:	4b03      	ldr	r3, [pc, #12]	; (8014708 <vTaskMissedYield+0x14>)
 80146fa:	2201      	movs	r2, #1
 80146fc:	601a      	str	r2, [r3, #0]
}
 80146fe:	bf00      	nop
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr
 8014708:	20056600 	.word	0x20056600

0801470c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014714:	f000 f852 	bl	80147bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014718:	4b06      	ldr	r3, [pc, #24]	; (8014734 <prvIdleTask+0x28>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d9f9      	bls.n	8014714 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014720:	4b05      	ldr	r3, [pc, #20]	; (8014738 <prvIdleTask+0x2c>)
 8014722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014726:	601a      	str	r2, [r3, #0]
 8014728:	f3bf 8f4f 	dsb	sy
 801472c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014730:	e7f0      	b.n	8014714 <prvIdleTask+0x8>
 8014732:	bf00      	nop
 8014734:	2005611c 	.word	0x2005611c
 8014738:	e000ed04 	.word	0xe000ed04

0801473c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014742:	2300      	movs	r3, #0
 8014744:	607b      	str	r3, [r7, #4]
 8014746:	e00c      	b.n	8014762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	4613      	mov	r3, r2
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	4413      	add	r3, r2
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	4a12      	ldr	r2, [pc, #72]	; (801479c <prvInitialiseTaskLists+0x60>)
 8014754:	4413      	add	r3, r2
 8014756:	4618      	mov	r0, r3
 8014758:	f7fd ff30 	bl	80125bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	3301      	adds	r3, #1
 8014760:	607b      	str	r3, [r7, #4]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2b37      	cmp	r3, #55	; 0x37
 8014766:	d9ef      	bls.n	8014748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014768:	480d      	ldr	r0, [pc, #52]	; (80147a0 <prvInitialiseTaskLists+0x64>)
 801476a:	f7fd ff27 	bl	80125bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801476e:	480d      	ldr	r0, [pc, #52]	; (80147a4 <prvInitialiseTaskLists+0x68>)
 8014770:	f7fd ff24 	bl	80125bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014774:	480c      	ldr	r0, [pc, #48]	; (80147a8 <prvInitialiseTaskLists+0x6c>)
 8014776:	f7fd ff21 	bl	80125bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801477a:	480c      	ldr	r0, [pc, #48]	; (80147ac <prvInitialiseTaskLists+0x70>)
 801477c:	f7fd ff1e 	bl	80125bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014780:	480b      	ldr	r0, [pc, #44]	; (80147b0 <prvInitialiseTaskLists+0x74>)
 8014782:	f7fd ff1b 	bl	80125bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014786:	4b0b      	ldr	r3, [pc, #44]	; (80147b4 <prvInitialiseTaskLists+0x78>)
 8014788:	4a05      	ldr	r2, [pc, #20]	; (80147a0 <prvInitialiseTaskLists+0x64>)
 801478a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801478c:	4b0a      	ldr	r3, [pc, #40]	; (80147b8 <prvInitialiseTaskLists+0x7c>)
 801478e:	4a05      	ldr	r2, [pc, #20]	; (80147a4 <prvInitialiseTaskLists+0x68>)
 8014790:	601a      	str	r2, [r3, #0]
}
 8014792:	bf00      	nop
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	2005611c 	.word	0x2005611c
 80147a0:	2005657c 	.word	0x2005657c
 80147a4:	20056590 	.word	0x20056590
 80147a8:	200565ac 	.word	0x200565ac
 80147ac:	200565c0 	.word	0x200565c0
 80147b0:	200565d8 	.word	0x200565d8
 80147b4:	200565a4 	.word	0x200565a4
 80147b8:	200565a8 	.word	0x200565a8

080147bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80147c2:	e019      	b.n	80147f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80147c4:	f7fe f8ba 	bl	801293c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147c8:	4b10      	ldr	r3, [pc, #64]	; (801480c <prvCheckTasksWaitingTermination+0x50>)
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	3304      	adds	r3, #4
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7fd ff7b 	bl	80126d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80147da:	4b0d      	ldr	r3, [pc, #52]	; (8014810 <prvCheckTasksWaitingTermination+0x54>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	3b01      	subs	r3, #1
 80147e0:	4a0b      	ldr	r2, [pc, #44]	; (8014810 <prvCheckTasksWaitingTermination+0x54>)
 80147e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80147e4:	4b0b      	ldr	r3, [pc, #44]	; (8014814 <prvCheckTasksWaitingTermination+0x58>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	4a0a      	ldr	r2, [pc, #40]	; (8014814 <prvCheckTasksWaitingTermination+0x58>)
 80147ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80147ee:	f7fe f8d9 	bl	80129a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 f810 	bl	8014818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80147f8:	4b06      	ldr	r3, [pc, #24]	; (8014814 <prvCheckTasksWaitingTermination+0x58>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d1e1      	bne.n	80147c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014800:	bf00      	nop
 8014802:	bf00      	nop
 8014804:	3708      	adds	r7, #8
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	200565c0 	.word	0x200565c0
 8014810:	200565ec 	.word	0x200565ec
 8014814:	200565d4 	.word	0x200565d4

08014818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014826:	2b00      	cmp	r3, #0
 8014828:	d108      	bne.n	801483c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801482e:	4618      	mov	r0, r3
 8014830:	f7fd fdaa 	bl	8012388 <vPortFree>
				vPortFree( pxTCB );
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f7fd fda7 	bl	8012388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801483a:	e01a      	b.n	8014872 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014842:	2b01      	cmp	r3, #1
 8014844:	d103      	bne.n	801484e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f7fd fd9e 	bl	8012388 <vPortFree>
	}
 801484c:	e011      	b.n	8014872 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014854:	2b02      	cmp	r3, #2
 8014856:	d00c      	beq.n	8014872 <prvDeleteTCB+0x5a>
	__asm volatile
 8014858:	f04f 0330 	mov.w	r3, #48	; 0x30
 801485c:	b672      	cpsid	i
 801485e:	f383 8811 	msr	BASEPRI, r3
 8014862:	f3bf 8f6f 	isb	sy
 8014866:	f3bf 8f4f 	dsb	sy
 801486a:	b662      	cpsie	i
 801486c:	60fb      	str	r3, [r7, #12]
}
 801486e:	bf00      	nop
 8014870:	e7fe      	b.n	8014870 <prvDeleteTCB+0x58>
	}
 8014872:	bf00      	nop
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
	...

0801487c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014882:	4b0c      	ldr	r3, [pc, #48]	; (80148b4 <prvResetNextTaskUnblockTime+0x38>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d104      	bne.n	8014896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801488c:	4b0a      	ldr	r3, [pc, #40]	; (80148b8 <prvResetNextTaskUnblockTime+0x3c>)
 801488e:	f04f 32ff 	mov.w	r2, #4294967295
 8014892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014894:	e008      	b.n	80148a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014896:	4b07      	ldr	r3, [pc, #28]	; (80148b4 <prvResetNextTaskUnblockTime+0x38>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	4a04      	ldr	r2, [pc, #16]	; (80148b8 <prvResetNextTaskUnblockTime+0x3c>)
 80148a6:	6013      	str	r3, [r2, #0]
}
 80148a8:	bf00      	nop
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr
 80148b4:	200565a4 	.word	0x200565a4
 80148b8:	2005660c 	.word	0x2005660c

080148bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80148bc:	b480      	push	{r7}
 80148be:	b083      	sub	sp, #12
 80148c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80148c2:	4b0b      	ldr	r3, [pc, #44]	; (80148f0 <xTaskGetSchedulerState+0x34>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d102      	bne.n	80148d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80148ca:	2301      	movs	r3, #1
 80148cc:	607b      	str	r3, [r7, #4]
 80148ce:	e008      	b.n	80148e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148d0:	4b08      	ldr	r3, [pc, #32]	; (80148f4 <xTaskGetSchedulerState+0x38>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d102      	bne.n	80148de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80148d8:	2302      	movs	r3, #2
 80148da:	607b      	str	r3, [r7, #4]
 80148dc:	e001      	b.n	80148e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80148de:	2300      	movs	r3, #0
 80148e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80148e2:	687b      	ldr	r3, [r7, #4]
	}
 80148e4:	4618      	mov	r0, r3
 80148e6:	370c      	adds	r7, #12
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr
 80148f0:	200565f8 	.word	0x200565f8
 80148f4:	20056614 	.word	0x20056614

080148f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014904:	2300      	movs	r3, #0
 8014906:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d051      	beq.n	80149b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014912:	4b2a      	ldr	r3, [pc, #168]	; (80149bc <xTaskPriorityInherit+0xc4>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014918:	429a      	cmp	r2, r3
 801491a:	d241      	bcs.n	80149a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	699b      	ldr	r3, [r3, #24]
 8014920:	2b00      	cmp	r3, #0
 8014922:	db06      	blt.n	8014932 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014924:	4b25      	ldr	r3, [pc, #148]	; (80149bc <xTaskPriorityInherit+0xc4>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801492a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	6959      	ldr	r1, [r3, #20]
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801493a:	4613      	mov	r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	4413      	add	r3, r2
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	4a1f      	ldr	r2, [pc, #124]	; (80149c0 <xTaskPriorityInherit+0xc8>)
 8014944:	4413      	add	r3, r2
 8014946:	4299      	cmp	r1, r3
 8014948:	d122      	bne.n	8014990 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	3304      	adds	r3, #4
 801494e:	4618      	mov	r0, r3
 8014950:	f7fd febe 	bl	80126d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014954:	4b19      	ldr	r3, [pc, #100]	; (80149bc <xTaskPriorityInherit+0xc4>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014962:	4b18      	ldr	r3, [pc, #96]	; (80149c4 <xTaskPriorityInherit+0xcc>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	429a      	cmp	r2, r3
 8014968:	d903      	bls.n	8014972 <xTaskPriorityInherit+0x7a>
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801496e:	4a15      	ldr	r2, [pc, #84]	; (80149c4 <xTaskPriorityInherit+0xcc>)
 8014970:	6013      	str	r3, [r2, #0]
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014976:	4613      	mov	r3, r2
 8014978:	009b      	lsls	r3, r3, #2
 801497a:	4413      	add	r3, r2
 801497c:	009b      	lsls	r3, r3, #2
 801497e:	4a10      	ldr	r2, [pc, #64]	; (80149c0 <xTaskPriorityInherit+0xc8>)
 8014980:	441a      	add	r2, r3
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	3304      	adds	r3, #4
 8014986:	4619      	mov	r1, r3
 8014988:	4610      	mov	r0, r2
 801498a:	f7fd fe44 	bl	8012616 <vListInsertEnd>
 801498e:	e004      	b.n	801499a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014990:	4b0a      	ldr	r3, [pc, #40]	; (80149bc <xTaskPriorityInherit+0xc4>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801499a:	2301      	movs	r3, #1
 801499c:	60fb      	str	r3, [r7, #12]
 801499e:	e008      	b.n	80149b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149a4:	4b05      	ldr	r3, [pc, #20]	; (80149bc <xTaskPriorityInherit+0xc4>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d201      	bcs.n	80149b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80149ae:	2301      	movs	r3, #1
 80149b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80149b2:	68fb      	ldr	r3, [r7, #12]
	}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3710      	adds	r7, #16
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	20056118 	.word	0x20056118
 80149c0:	2005611c 	.word	0x2005611c
 80149c4:	200565f4 	.word	0x200565f4

080149c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b086      	sub	sp, #24
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80149d4:	2300      	movs	r3, #0
 80149d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d05a      	beq.n	8014a94 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80149de:	4b30      	ldr	r3, [pc, #192]	; (8014aa0 <xTaskPriorityDisinherit+0xd8>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	693a      	ldr	r2, [r7, #16]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d00c      	beq.n	8014a02 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80149e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149ec:	b672      	cpsid	i
 80149ee:	f383 8811 	msr	BASEPRI, r3
 80149f2:	f3bf 8f6f 	isb	sy
 80149f6:	f3bf 8f4f 	dsb	sy
 80149fa:	b662      	cpsie	i
 80149fc:	60fb      	str	r3, [r7, #12]
}
 80149fe:	bf00      	nop
 8014a00:	e7fe      	b.n	8014a00 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d10c      	bne.n	8014a24 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8014a0a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a0e:	b672      	cpsid	i
 8014a10:	f383 8811 	msr	BASEPRI, r3
 8014a14:	f3bf 8f6f 	isb	sy
 8014a18:	f3bf 8f4f 	dsb	sy
 8014a1c:	b662      	cpsie	i
 8014a1e:	60bb      	str	r3, [r7, #8]
}
 8014a20:	bf00      	nop
 8014a22:	e7fe      	b.n	8014a22 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a28:	1e5a      	subs	r2, r3, #1
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a32:	693b      	ldr	r3, [r7, #16]
 8014a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d02c      	beq.n	8014a94 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014a3a:	693b      	ldr	r3, [r7, #16]
 8014a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d128      	bne.n	8014a94 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	3304      	adds	r3, #4
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7fd fe42 	bl	80126d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a64:	4b0f      	ldr	r3, [pc, #60]	; (8014aa4 <xTaskPriorityDisinherit+0xdc>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d903      	bls.n	8014a74 <xTaskPriorityDisinherit+0xac>
 8014a6c:	693b      	ldr	r3, [r7, #16]
 8014a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a70:	4a0c      	ldr	r2, [pc, #48]	; (8014aa4 <xTaskPriorityDisinherit+0xdc>)
 8014a72:	6013      	str	r3, [r2, #0]
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a78:	4613      	mov	r3, r2
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	4413      	add	r3, r2
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	4a09      	ldr	r2, [pc, #36]	; (8014aa8 <xTaskPriorityDisinherit+0xe0>)
 8014a82:	441a      	add	r2, r3
 8014a84:	693b      	ldr	r3, [r7, #16]
 8014a86:	3304      	adds	r3, #4
 8014a88:	4619      	mov	r1, r3
 8014a8a:	4610      	mov	r0, r2
 8014a8c:	f7fd fdc3 	bl	8012616 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014a90:	2301      	movs	r3, #1
 8014a92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a94:	697b      	ldr	r3, [r7, #20]
	}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3718      	adds	r7, #24
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	20056118 	.word	0x20056118
 8014aa4:	200565f4 	.word	0x200565f4
 8014aa8:	2005611c 	.word	0x2005611c

08014aac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b088      	sub	sp, #32
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014aba:	2301      	movs	r3, #1
 8014abc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d06e      	beq.n	8014ba2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014ac4:	69bb      	ldr	r3, [r7, #24]
 8014ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d10c      	bne.n	8014ae6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8014acc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014ad0:	b672      	cpsid	i
 8014ad2:	f383 8811 	msr	BASEPRI, r3
 8014ad6:	f3bf 8f6f 	isb	sy
 8014ada:	f3bf 8f4f 	dsb	sy
 8014ade:	b662      	cpsie	i
 8014ae0:	60fb      	str	r3, [r7, #12]
}
 8014ae2:	bf00      	nop
 8014ae4:	e7fe      	b.n	8014ae4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014aea:	683a      	ldr	r2, [r7, #0]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d902      	bls.n	8014af6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	61fb      	str	r3, [r7, #28]
 8014af4:	e002      	b.n	8014afc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014afa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014afc:	69bb      	ldr	r3, [r7, #24]
 8014afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b00:	69fa      	ldr	r2, [r7, #28]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d04d      	beq.n	8014ba2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b0a:	697a      	ldr	r2, [r7, #20]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d148      	bne.n	8014ba2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014b10:	4b26      	ldr	r3, [pc, #152]	; (8014bac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	69ba      	ldr	r2, [r7, #24]
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d10c      	bne.n	8014b34 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8014b1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b1e:	b672      	cpsid	i
 8014b20:	f383 8811 	msr	BASEPRI, r3
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	b662      	cpsie	i
 8014b2e:	60bb      	str	r3, [r7, #8]
}
 8014b30:	bf00      	nop
 8014b32:	e7fe      	b.n	8014b32 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	69fa      	ldr	r2, [r7, #28]
 8014b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	699b      	ldr	r3, [r3, #24]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	db04      	blt.n	8014b52 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	6959      	ldr	r1, [r3, #20]
 8014b56:	693a      	ldr	r2, [r7, #16]
 8014b58:	4613      	mov	r3, r2
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	4413      	add	r3, r2
 8014b5e:	009b      	lsls	r3, r3, #2
 8014b60:	4a13      	ldr	r2, [pc, #76]	; (8014bb0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014b62:	4413      	add	r3, r2
 8014b64:	4299      	cmp	r1, r3
 8014b66:	d11c      	bne.n	8014ba2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7fd fdaf 	bl	80126d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b76:	4b0f      	ldr	r3, [pc, #60]	; (8014bb4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d903      	bls.n	8014b86 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8014b7e:	69bb      	ldr	r3, [r7, #24]
 8014b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b82:	4a0c      	ldr	r2, [pc, #48]	; (8014bb4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8014b84:	6013      	str	r3, [r2, #0]
 8014b86:	69bb      	ldr	r3, [r7, #24]
 8014b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	009b      	lsls	r3, r3, #2
 8014b8e:	4413      	add	r3, r2
 8014b90:	009b      	lsls	r3, r3, #2
 8014b92:	4a07      	ldr	r2, [pc, #28]	; (8014bb0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014b94:	441a      	add	r2, r3
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	3304      	adds	r3, #4
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	4610      	mov	r0, r2
 8014b9e:	f7fd fd3a 	bl	8012616 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ba2:	bf00      	nop
 8014ba4:	3720      	adds	r7, #32
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	20056118 	.word	0x20056118
 8014bb0:	2005611c 	.word	0x2005611c
 8014bb4:	200565f4 	.word	0x200565f4

08014bb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014bb8:	b480      	push	{r7}
 8014bba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014bbc:	4b07      	ldr	r3, [pc, #28]	; (8014bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d004      	beq.n	8014bce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014bc4:	4b05      	ldr	r3, [pc, #20]	; (8014bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014bca:	3201      	adds	r2, #1
 8014bcc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014bce:	4b03      	ldr	r3, [pc, #12]	; (8014bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
	}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr
 8014bdc:	20056118 	.word	0x20056118

08014be0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014bea:	4b21      	ldr	r3, [pc, #132]	; (8014c70 <prvAddCurrentTaskToDelayedList+0x90>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014bf0:	4b20      	ldr	r3, [pc, #128]	; (8014c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	3304      	adds	r3, #4
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fd fd6a 	bl	80126d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c02:	d10a      	bne.n	8014c1a <prvAddCurrentTaskToDelayedList+0x3a>
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d007      	beq.n	8014c1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c0a:	4b1a      	ldr	r3, [pc, #104]	; (8014c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	3304      	adds	r3, #4
 8014c10:	4619      	mov	r1, r3
 8014c12:	4819      	ldr	r0, [pc, #100]	; (8014c78 <prvAddCurrentTaskToDelayedList+0x98>)
 8014c14:	f7fd fcff 	bl	8012616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c18:	e026      	b.n	8014c68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	4413      	add	r3, r2
 8014c20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c22:	4b14      	ldr	r3, [pc, #80]	; (8014c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	68ba      	ldr	r2, [r7, #8]
 8014c28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c2a:	68ba      	ldr	r2, [r7, #8]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d209      	bcs.n	8014c46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c32:	4b12      	ldr	r3, [pc, #72]	; (8014c7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	4b0f      	ldr	r3, [pc, #60]	; (8014c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	3304      	adds	r3, #4
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	4610      	mov	r0, r2
 8014c40:	f7fd fd0d 	bl	801265e <vListInsert>
}
 8014c44:	e010      	b.n	8014c68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c46:	4b0e      	ldr	r3, [pc, #56]	; (8014c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	4b0a      	ldr	r3, [pc, #40]	; (8014c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	3304      	adds	r3, #4
 8014c50:	4619      	mov	r1, r3
 8014c52:	4610      	mov	r0, r2
 8014c54:	f7fd fd03 	bl	801265e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014c58:	4b0a      	ldr	r3, [pc, #40]	; (8014c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	68ba      	ldr	r2, [r7, #8]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d202      	bcs.n	8014c68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014c62:	4a08      	ldr	r2, [pc, #32]	; (8014c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	6013      	str	r3, [r2, #0]
}
 8014c68:	bf00      	nop
 8014c6a:	3710      	adds	r7, #16
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	200565f0 	.word	0x200565f0
 8014c74:	20056118 	.word	0x20056118
 8014c78:	200565d8 	.word	0x200565d8
 8014c7c:	200565a8 	.word	0x200565a8
 8014c80:	200565a4 	.word	0x200565a4
 8014c84:	2005660c 	.word	0x2005660c

08014c88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b08a      	sub	sp, #40	; 0x28
 8014c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014c92:	f000 fb15 	bl	80152c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014c96:	4b1d      	ldr	r3, [pc, #116]	; (8014d0c <xTimerCreateTimerTask+0x84>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d021      	beq.n	8014ce2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014ca6:	1d3a      	adds	r2, r7, #4
 8014ca8:	f107 0108 	add.w	r1, r7, #8
 8014cac:	f107 030c 	add.w	r3, r7, #12
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fd fa85 	bl	80121c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014cb6:	6879      	ldr	r1, [r7, #4]
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	68fa      	ldr	r2, [r7, #12]
 8014cbc:	9202      	str	r2, [sp, #8]
 8014cbe:	9301      	str	r3, [sp, #4]
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	460a      	mov	r2, r1
 8014cc8:	4911      	ldr	r1, [pc, #68]	; (8014d10 <xTimerCreateTimerTask+0x88>)
 8014cca:	4812      	ldr	r0, [pc, #72]	; (8014d14 <xTimerCreateTimerTask+0x8c>)
 8014ccc:	f7fe ffb8 	bl	8013c40 <xTaskCreateStatic>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	4a11      	ldr	r2, [pc, #68]	; (8014d18 <xTimerCreateTimerTask+0x90>)
 8014cd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014cd6:	4b10      	ldr	r3, [pc, #64]	; (8014d18 <xTimerCreateTimerTask+0x90>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d001      	beq.n	8014ce2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014cde:	2301      	movs	r3, #1
 8014ce0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d10c      	bne.n	8014d02 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8014ce8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014cec:	b672      	cpsid	i
 8014cee:	f383 8811 	msr	BASEPRI, r3
 8014cf2:	f3bf 8f6f 	isb	sy
 8014cf6:	f3bf 8f4f 	dsb	sy
 8014cfa:	b662      	cpsie	i
 8014cfc:	613b      	str	r3, [r7, #16]
}
 8014cfe:	bf00      	nop
 8014d00:	e7fe      	b.n	8014d00 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8014d02:	697b      	ldr	r3, [r7, #20]
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3718      	adds	r7, #24
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	20056648 	.word	0x20056648
 8014d10:	0802b8bc 	.word	0x0802b8bc
 8014d14:	08014e59 	.word	0x08014e59
 8014d18:	2005664c 	.word	0x2005664c

08014d1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b08a      	sub	sp, #40	; 0x28
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	607a      	str	r2, [r7, #4]
 8014d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d10c      	bne.n	8014d4e <xTimerGenericCommand+0x32>
	__asm volatile
 8014d34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d38:	b672      	cpsid	i
 8014d3a:	f383 8811 	msr	BASEPRI, r3
 8014d3e:	f3bf 8f6f 	isb	sy
 8014d42:	f3bf 8f4f 	dsb	sy
 8014d46:	b662      	cpsie	i
 8014d48:	623b      	str	r3, [r7, #32]
}
 8014d4a:	bf00      	nop
 8014d4c:	e7fe      	b.n	8014d4c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014d4e:	4b1a      	ldr	r3, [pc, #104]	; (8014db8 <xTimerGenericCommand+0x9c>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d02a      	beq.n	8014dac <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	2b05      	cmp	r3, #5
 8014d66:	dc18      	bgt.n	8014d9a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014d68:	f7ff fda8 	bl	80148bc <xTaskGetSchedulerState>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	2b02      	cmp	r3, #2
 8014d70:	d109      	bne.n	8014d86 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014d72:	4b11      	ldr	r3, [pc, #68]	; (8014db8 <xTimerGenericCommand+0x9c>)
 8014d74:	6818      	ldr	r0, [r3, #0]
 8014d76:	f107 0110 	add.w	r1, r7, #16
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d7e:	f7fe f8cd 	bl	8012f1c <xQueueGenericSend>
 8014d82:	6278      	str	r0, [r7, #36]	; 0x24
 8014d84:	e012      	b.n	8014dac <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014d86:	4b0c      	ldr	r3, [pc, #48]	; (8014db8 <xTimerGenericCommand+0x9c>)
 8014d88:	6818      	ldr	r0, [r3, #0]
 8014d8a:	f107 0110 	add.w	r1, r7, #16
 8014d8e:	2300      	movs	r3, #0
 8014d90:	2200      	movs	r2, #0
 8014d92:	f7fe f8c3 	bl	8012f1c <xQueueGenericSend>
 8014d96:	6278      	str	r0, [r7, #36]	; 0x24
 8014d98:	e008      	b.n	8014dac <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014d9a:	4b07      	ldr	r3, [pc, #28]	; (8014db8 <xTimerGenericCommand+0x9c>)
 8014d9c:	6818      	ldr	r0, [r3, #0]
 8014d9e:	f107 0110 	add.w	r1, r7, #16
 8014da2:	2300      	movs	r3, #0
 8014da4:	683a      	ldr	r2, [r7, #0]
 8014da6:	f7fe f9bf 	bl	8013128 <xQueueGenericSendFromISR>
 8014daa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3728      	adds	r7, #40	; 0x28
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	20056648 	.word	0x20056648

08014dbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b088      	sub	sp, #32
 8014dc0:	af02      	add	r7, sp, #8
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dc6:	4b23      	ldr	r3, [pc, #140]	; (8014e54 <prvProcessExpiredTimer+0x98>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	68db      	ldr	r3, [r3, #12]
 8014dce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	3304      	adds	r3, #4
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7fd fc7b 	bl	80126d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014de0:	f003 0304 	and.w	r3, r3, #4
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d024      	beq.n	8014e32 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	699a      	ldr	r2, [r3, #24]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	18d1      	adds	r1, r2, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	6978      	ldr	r0, [r7, #20]
 8014df6:	f000 f8d3 	bl	8014fa0 <prvInsertTimerInActiveList>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d021      	beq.n	8014e44 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014e00:	2300      	movs	r3, #0
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	2300      	movs	r3, #0
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	2100      	movs	r1, #0
 8014e0a:	6978      	ldr	r0, [r7, #20]
 8014e0c:	f7ff ff86 	bl	8014d1c <xTimerGenericCommand>
 8014e10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d115      	bne.n	8014e44 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8014e18:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e1c:	b672      	cpsid	i
 8014e1e:	f383 8811 	msr	BASEPRI, r3
 8014e22:	f3bf 8f6f 	isb	sy
 8014e26:	f3bf 8f4f 	dsb	sy
 8014e2a:	b662      	cpsie	i
 8014e2c:	60fb      	str	r3, [r7, #12]
}
 8014e2e:	bf00      	nop
 8014e30:	e7fe      	b.n	8014e30 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e38:	f023 0301 	bic.w	r3, r3, #1
 8014e3c:	b2da      	uxtb	r2, r3
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	6a1b      	ldr	r3, [r3, #32]
 8014e48:	6978      	ldr	r0, [r7, #20]
 8014e4a:	4798      	blx	r3
}
 8014e4c:	bf00      	nop
 8014e4e:	3718      	adds	r7, #24
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	20056640 	.word	0x20056640

08014e58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014e60:	f107 0308 	add.w	r3, r7, #8
 8014e64:	4618      	mov	r0, r3
 8014e66:	f000 f857 	bl	8014f18 <prvGetNextExpireTime>
 8014e6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	4619      	mov	r1, r3
 8014e70:	68f8      	ldr	r0, [r7, #12]
 8014e72:	f000 f803 	bl	8014e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014e76:	f000 f8d5 	bl	8015024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014e7a:	e7f1      	b.n	8014e60 <prvTimerTask+0x8>

08014e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014e86:	f7ff f925 	bl	80140d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014e8a:	f107 0308 	add.w	r3, r7, #8
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f000 f866 	bl	8014f60 <prvSampleTimeNow>
 8014e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d130      	bne.n	8014efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d10a      	bne.n	8014eb8 <prvProcessTimerOrBlockTask+0x3c>
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d806      	bhi.n	8014eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014eaa:	f7ff f921 	bl	80140f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014eae:	68f9      	ldr	r1, [r7, #12]
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff ff83 	bl	8014dbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014eb6:	e024      	b.n	8014f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d008      	beq.n	8014ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014ebe:	4b13      	ldr	r3, [pc, #76]	; (8014f0c <prvProcessTimerOrBlockTask+0x90>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d101      	bne.n	8014ecc <prvProcessTimerOrBlockTask+0x50>
 8014ec8:	2301      	movs	r3, #1
 8014eca:	e000      	b.n	8014ece <prvProcessTimerOrBlockTask+0x52>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014ed0:	4b0f      	ldr	r3, [pc, #60]	; (8014f10 <prvProcessTimerOrBlockTask+0x94>)
 8014ed2:	6818      	ldr	r0, [r3, #0]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	683a      	ldr	r2, [r7, #0]
 8014edc:	4619      	mov	r1, r3
 8014ede:	f7fe fe7b 	bl	8013bd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014ee2:	f7ff f905 	bl	80140f0 <xTaskResumeAll>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10a      	bne.n	8014f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014eec:	4b09      	ldr	r3, [pc, #36]	; (8014f14 <prvProcessTimerOrBlockTask+0x98>)
 8014eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	f3bf 8f6f 	isb	sy
}
 8014efc:	e001      	b.n	8014f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014efe:	f7ff f8f7 	bl	80140f0 <xTaskResumeAll>
}
 8014f02:	bf00      	nop
 8014f04:	3710      	adds	r7, #16
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
 8014f0a:	bf00      	nop
 8014f0c:	20056644 	.word	0x20056644
 8014f10:	20056648 	.word	0x20056648
 8014f14:	e000ed04 	.word	0xe000ed04

08014f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014f20:	4b0e      	ldr	r3, [pc, #56]	; (8014f5c <prvGetNextExpireTime+0x44>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d101      	bne.n	8014f2e <prvGetNextExpireTime+0x16>
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	e000      	b.n	8014f30 <prvGetNextExpireTime+0x18>
 8014f2e:	2200      	movs	r2, #0
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d105      	bne.n	8014f48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014f3c:	4b07      	ldr	r3, [pc, #28]	; (8014f5c <prvGetNextExpireTime+0x44>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	68db      	ldr	r3, [r3, #12]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	60fb      	str	r3, [r7, #12]
 8014f46:	e001      	b.n	8014f4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3714      	adds	r7, #20
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	20056640 	.word	0x20056640

08014f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014f68:	f7ff f962 	bl	8014230 <xTaskGetTickCount>
 8014f6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014f6e:	4b0b      	ldr	r3, [pc, #44]	; (8014f9c <prvSampleTimeNow+0x3c>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d205      	bcs.n	8014f84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014f78:	f000 f93c 	bl	80151f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	601a      	str	r2, [r3, #0]
 8014f82:	e002      	b.n	8014f8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2200      	movs	r2, #0
 8014f88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014f8a:	4a04      	ldr	r2, [pc, #16]	; (8014f9c <prvSampleTimeNow+0x3c>)
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014f90:	68fb      	ldr	r3, [r7, #12]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	20056650 	.word	0x20056650

08014fa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b086      	sub	sp, #24
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	60f8      	str	r0, [r7, #12]
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
 8014fac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	68ba      	ldr	r2, [r7, #8]
 8014fb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	68fa      	ldr	r2, [r7, #12]
 8014fbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014fbe:	68ba      	ldr	r2, [r7, #8]
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d812      	bhi.n	8014fec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	1ad2      	subs	r2, r2, r3
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	699b      	ldr	r3, [r3, #24]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d302      	bcc.n	8014fda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	617b      	str	r3, [r7, #20]
 8014fd8:	e01b      	b.n	8015012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014fda:	4b10      	ldr	r3, [pc, #64]	; (801501c <prvInsertTimerInActiveList+0x7c>)
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	3304      	adds	r3, #4
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	4610      	mov	r0, r2
 8014fe6:	f7fd fb3a 	bl	801265e <vListInsert>
 8014fea:	e012      	b.n	8015012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d206      	bcs.n	8015002 <prvInsertTimerInActiveList+0x62>
 8014ff4:	68ba      	ldr	r2, [r7, #8]
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d302      	bcc.n	8015002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	617b      	str	r3, [r7, #20]
 8015000:	e007      	b.n	8015012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015002:	4b07      	ldr	r3, [pc, #28]	; (8015020 <prvInsertTimerInActiveList+0x80>)
 8015004:	681a      	ldr	r2, [r3, #0]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	3304      	adds	r3, #4
 801500a:	4619      	mov	r1, r3
 801500c:	4610      	mov	r0, r2
 801500e:	f7fd fb26 	bl	801265e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015012:	697b      	ldr	r3, [r7, #20]
}
 8015014:	4618      	mov	r0, r3
 8015016:	3718      	adds	r7, #24
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}
 801501c:	20056644 	.word	0x20056644
 8015020:	20056640 	.word	0x20056640

08015024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b08e      	sub	sp, #56	; 0x38
 8015028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801502a:	e0d0      	b.n	80151ce <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2b00      	cmp	r3, #0
 8015030:	da1a      	bge.n	8015068 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015032:	1d3b      	adds	r3, r7, #4
 8015034:	3304      	adds	r3, #4
 8015036:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503a:	2b00      	cmp	r3, #0
 801503c:	d10c      	bne.n	8015058 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801503e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015042:	b672      	cpsid	i
 8015044:	f383 8811 	msr	BASEPRI, r3
 8015048:	f3bf 8f6f 	isb	sy
 801504c:	f3bf 8f4f 	dsb	sy
 8015050:	b662      	cpsie	i
 8015052:	61fb      	str	r3, [r7, #28]
}
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801505e:	6850      	ldr	r0, [r2, #4]
 8015060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015062:	6892      	ldr	r2, [r2, #8]
 8015064:	4611      	mov	r1, r2
 8015066:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	f2c0 80ae 	blt.w	80151cc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015076:	695b      	ldr	r3, [r3, #20]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d004      	beq.n	8015086 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801507e:	3304      	adds	r3, #4
 8015080:	4618      	mov	r0, r3
 8015082:	f7fd fb25 	bl	80126d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015086:	463b      	mov	r3, r7
 8015088:	4618      	mov	r0, r3
 801508a:	f7ff ff69 	bl	8014f60 <prvSampleTimeNow>
 801508e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b09      	cmp	r3, #9
 8015094:	f200 809b 	bhi.w	80151ce <prvProcessReceivedCommands+0x1aa>
 8015098:	a201      	add	r2, pc, #4	; (adr r2, 80150a0 <prvProcessReceivedCommands+0x7c>)
 801509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801509e:	bf00      	nop
 80150a0:	080150c9 	.word	0x080150c9
 80150a4:	080150c9 	.word	0x080150c9
 80150a8:	080150c9 	.word	0x080150c9
 80150ac:	08015141 	.word	0x08015141
 80150b0:	08015155 	.word	0x08015155
 80150b4:	080151a3 	.word	0x080151a3
 80150b8:	080150c9 	.word	0x080150c9
 80150bc:	080150c9 	.word	0x080150c9
 80150c0:	08015141 	.word	0x08015141
 80150c4:	08015155 	.word	0x08015155
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80150c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150ce:	f043 0301 	orr.w	r3, r3, #1
 80150d2:	b2da      	uxtb	r2, r3
 80150d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80150da:	68ba      	ldr	r2, [r7, #8]
 80150dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150de:	699b      	ldr	r3, [r3, #24]
 80150e0:	18d1      	adds	r1, r2, r3
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150e8:	f7ff ff5a 	bl	8014fa0 <prvInsertTimerInActiveList>
 80150ec:	4603      	mov	r3, r0
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d06d      	beq.n	80151ce <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80150f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f4:	6a1b      	ldr	r3, [r3, #32]
 80150f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80150fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015100:	f003 0304 	and.w	r3, r3, #4
 8015104:	2b00      	cmp	r3, #0
 8015106:	d062      	beq.n	80151ce <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015108:	68ba      	ldr	r2, [r7, #8]
 801510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510c:	699b      	ldr	r3, [r3, #24]
 801510e:	441a      	add	r2, r3
 8015110:	2300      	movs	r3, #0
 8015112:	9300      	str	r3, [sp, #0]
 8015114:	2300      	movs	r3, #0
 8015116:	2100      	movs	r1, #0
 8015118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801511a:	f7ff fdff 	bl	8014d1c <xTimerGenericCommand>
 801511e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015120:	6a3b      	ldr	r3, [r7, #32]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d153      	bne.n	80151ce <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8015126:	f04f 0330 	mov.w	r3, #48	; 0x30
 801512a:	b672      	cpsid	i
 801512c:	f383 8811 	msr	BASEPRI, r3
 8015130:	f3bf 8f6f 	isb	sy
 8015134:	f3bf 8f4f 	dsb	sy
 8015138:	b662      	cpsie	i
 801513a:	61bb      	str	r3, [r7, #24]
}
 801513c:	bf00      	nop
 801513e:	e7fe      	b.n	801513e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015146:	f023 0301 	bic.w	r3, r3, #1
 801514a:	b2da      	uxtb	r2, r3
 801514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015152:	e03c      	b.n	80151ce <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801515a:	f043 0301 	orr.w	r3, r3, #1
 801515e:	b2da      	uxtb	r2, r3
 8015160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015166:	68ba      	ldr	r2, [r7, #8]
 8015168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516e:	699b      	ldr	r3, [r3, #24]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d10c      	bne.n	801518e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8015174:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015178:	b672      	cpsid	i
 801517a:	f383 8811 	msr	BASEPRI, r3
 801517e:	f3bf 8f6f 	isb	sy
 8015182:	f3bf 8f4f 	dsb	sy
 8015186:	b662      	cpsie	i
 8015188:	617b      	str	r3, [r7, #20]
}
 801518a:	bf00      	nop
 801518c:	e7fe      	b.n	801518c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015190:	699a      	ldr	r2, [r3, #24]
 8015192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015194:	18d1      	adds	r1, r2, r3
 8015196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801519a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801519c:	f7ff ff00 	bl	8014fa0 <prvInsertTimerInActiveList>
					break;
 80151a0:	e015      	b.n	80151ce <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80151a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151a8:	f003 0302 	and.w	r3, r3, #2
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d103      	bne.n	80151b8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80151b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151b2:	f7fd f8e9 	bl	8012388 <vPortFree>
 80151b6:	e00a      	b.n	80151ce <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80151b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151be:	f023 0301 	bic.w	r3, r3, #1
 80151c2:	b2da      	uxtb	r2, r3
 80151c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80151ca:	e000      	b.n	80151ce <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80151cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80151ce:	4b08      	ldr	r3, [pc, #32]	; (80151f0 <prvProcessReceivedCommands+0x1cc>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	1d39      	adds	r1, r7, #4
 80151d4:	2200      	movs	r2, #0
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7fe f8dc 	bl	8013394 <xQueueReceive>
 80151dc:	4603      	mov	r3, r0
 80151de:	2b00      	cmp	r3, #0
 80151e0:	f47f af24 	bne.w	801502c <prvProcessReceivedCommands+0x8>
	}
}
 80151e4:	bf00      	nop
 80151e6:	bf00      	nop
 80151e8:	3730      	adds	r7, #48	; 0x30
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	20056648 	.word	0x20056648

080151f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b088      	sub	sp, #32
 80151f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80151fa:	e04a      	b.n	8015292 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80151fc:	4b2e      	ldr	r3, [pc, #184]	; (80152b8 <prvSwitchTimerLists+0xc4>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	68db      	ldr	r3, [r3, #12]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015206:	4b2c      	ldr	r3, [pc, #176]	; (80152b8 <prvSwitchTimerLists+0xc4>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	68db      	ldr	r3, [r3, #12]
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	3304      	adds	r3, #4
 8015214:	4618      	mov	r0, r3
 8015216:	f7fd fa5b 	bl	80126d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	6a1b      	ldr	r3, [r3, #32]
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015228:	f003 0304 	and.w	r3, r3, #4
 801522c:	2b00      	cmp	r3, #0
 801522e:	d030      	beq.n	8015292 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	699b      	ldr	r3, [r3, #24]
 8015234:	693a      	ldr	r2, [r7, #16]
 8015236:	4413      	add	r3, r2
 8015238:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801523a:	68ba      	ldr	r2, [r7, #8]
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	429a      	cmp	r2, r3
 8015240:	d90e      	bls.n	8015260 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	68ba      	ldr	r2, [r7, #8]
 8015246:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	68fa      	ldr	r2, [r7, #12]
 801524c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801524e:	4b1a      	ldr	r3, [pc, #104]	; (80152b8 <prvSwitchTimerLists+0xc4>)
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	3304      	adds	r3, #4
 8015256:	4619      	mov	r1, r3
 8015258:	4610      	mov	r0, r2
 801525a:	f7fd fa00 	bl	801265e <vListInsert>
 801525e:	e018      	b.n	8015292 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015260:	2300      	movs	r3, #0
 8015262:	9300      	str	r3, [sp, #0]
 8015264:	2300      	movs	r3, #0
 8015266:	693a      	ldr	r2, [r7, #16]
 8015268:	2100      	movs	r1, #0
 801526a:	68f8      	ldr	r0, [r7, #12]
 801526c:	f7ff fd56 	bl	8014d1c <xTimerGenericCommand>
 8015270:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d10c      	bne.n	8015292 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8015278:	f04f 0330 	mov.w	r3, #48	; 0x30
 801527c:	b672      	cpsid	i
 801527e:	f383 8811 	msr	BASEPRI, r3
 8015282:	f3bf 8f6f 	isb	sy
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	b662      	cpsie	i
 801528c:	603b      	str	r3, [r7, #0]
}
 801528e:	bf00      	nop
 8015290:	e7fe      	b.n	8015290 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015292:	4b09      	ldr	r3, [pc, #36]	; (80152b8 <prvSwitchTimerLists+0xc4>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d1af      	bne.n	80151fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801529c:	4b06      	ldr	r3, [pc, #24]	; (80152b8 <prvSwitchTimerLists+0xc4>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80152a2:	4b06      	ldr	r3, [pc, #24]	; (80152bc <prvSwitchTimerLists+0xc8>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	4a04      	ldr	r2, [pc, #16]	; (80152b8 <prvSwitchTimerLists+0xc4>)
 80152a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80152aa:	4a04      	ldr	r2, [pc, #16]	; (80152bc <prvSwitchTimerLists+0xc8>)
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	6013      	str	r3, [r2, #0]
}
 80152b0:	bf00      	nop
 80152b2:	3718      	adds	r7, #24
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}
 80152b8:	20056640 	.word	0x20056640
 80152bc:	20056644 	.word	0x20056644

080152c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80152c6:	f7fd fb39 	bl	801293c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80152ca:	4b15      	ldr	r3, [pc, #84]	; (8015320 <prvCheckForValidListAndQueue+0x60>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d120      	bne.n	8015314 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80152d2:	4814      	ldr	r0, [pc, #80]	; (8015324 <prvCheckForValidListAndQueue+0x64>)
 80152d4:	f7fd f972 	bl	80125bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80152d8:	4813      	ldr	r0, [pc, #76]	; (8015328 <prvCheckForValidListAndQueue+0x68>)
 80152da:	f7fd f96f 	bl	80125bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80152de:	4b13      	ldr	r3, [pc, #76]	; (801532c <prvCheckForValidListAndQueue+0x6c>)
 80152e0:	4a10      	ldr	r2, [pc, #64]	; (8015324 <prvCheckForValidListAndQueue+0x64>)
 80152e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80152e4:	4b12      	ldr	r3, [pc, #72]	; (8015330 <prvCheckForValidListAndQueue+0x70>)
 80152e6:	4a10      	ldr	r2, [pc, #64]	; (8015328 <prvCheckForValidListAndQueue+0x68>)
 80152e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80152ea:	2300      	movs	r3, #0
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	4b11      	ldr	r3, [pc, #68]	; (8015334 <prvCheckForValidListAndQueue+0x74>)
 80152f0:	4a11      	ldr	r2, [pc, #68]	; (8015338 <prvCheckForValidListAndQueue+0x78>)
 80152f2:	2110      	movs	r1, #16
 80152f4:	200a      	movs	r0, #10
 80152f6:	f7fd fcb7 	bl	8012c68 <xQueueGenericCreateStatic>
 80152fa:	4603      	mov	r3, r0
 80152fc:	4a08      	ldr	r2, [pc, #32]	; (8015320 <prvCheckForValidListAndQueue+0x60>)
 80152fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015300:	4b07      	ldr	r3, [pc, #28]	; (8015320 <prvCheckForValidListAndQueue+0x60>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d005      	beq.n	8015314 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015308:	4b05      	ldr	r3, [pc, #20]	; (8015320 <prvCheckForValidListAndQueue+0x60>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	490b      	ldr	r1, [pc, #44]	; (801533c <prvCheckForValidListAndQueue+0x7c>)
 801530e:	4618      	mov	r0, r3
 8015310:	f7fe fc0e 	bl	8013b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015314:	f7fd fb46 	bl	80129a4 <vPortExitCritical>
}
 8015318:	bf00      	nop
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	20056648 	.word	0x20056648
 8015324:	20056618 	.word	0x20056618
 8015328:	2005662c 	.word	0x2005662c
 801532c:	20056640 	.word	0x20056640
 8015330:	20056644 	.word	0x20056644
 8015334:	200566f4 	.word	0x200566f4
 8015338:	20056654 	.word	0x20056654
 801533c:	0802b8c4 	.word	0x0802b8c4

08015340 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015340:	8880      	ldrh	r0, [r0, #4]
 8015342:	4770      	bx	lr

08015344 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015344:	2300      	movs	r3, #0
 8015346:	8083      	strh	r3, [r0, #4]
 8015348:	4770      	bx	lr
	...

0801534c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534e:	6803      	ldr	r3, [r0, #0]
 8015350:	460e      	mov	r6, r1
 8015352:	2100      	movs	r1, #0
 8015354:	4605      	mov	r5, r0
 8015356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015358:	4798      	blx	r3
 801535a:	4604      	mov	r4, r0
 801535c:	682b      	ldr	r3, [r5, #0]
 801535e:	4628      	mov	r0, r5
 8015360:	1b34      	subs	r4, r6, r4
 8015362:	6a1b      	ldr	r3, [r3, #32]
 8015364:	b2a4      	uxth	r4, r4
 8015366:	4798      	blx	r3
 8015368:	88ab      	ldrh	r3, [r5, #4]
 801536a:	fbb4 f4f0 	udiv	r4, r4, r0
 801536e:	42a3      	cmp	r3, r4
 8015370:	d805      	bhi.n	801537e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015372:	4b0e      	ldr	r3, [pc, #56]	; (80153ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015374:	211e      	movs	r1, #30
 8015376:	4a0e      	ldr	r2, [pc, #56]	; (80153b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015378:	480e      	ldr	r0, [pc, #56]	; (80153b4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801537a:	f011 f899 	bl	80264b0 <__assert_func>
 801537e:	682b      	ldr	r3, [r5, #0]
 8015380:	2100      	movs	r1, #0
 8015382:	4628      	mov	r0, r5
 8015384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015386:	4798      	blx	r3
 8015388:	682b      	ldr	r3, [r5, #0]
 801538a:	4607      	mov	r7, r0
 801538c:	4628      	mov	r0, r5
 801538e:	6a1b      	ldr	r3, [r3, #32]
 8015390:	4798      	blx	r3
 8015392:	1bf3      	subs	r3, r6, r7
 8015394:	b29b      	uxth	r3, r3
 8015396:	fbb3 f2f0 	udiv	r2, r3, r0
 801539a:	fb02 3010 	mls	r0, r2, r0, r3
 801539e:	b118      	cbz	r0, 80153a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80153a0:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80153a2:	211f      	movs	r1, #31
 80153a4:	4a02      	ldr	r2, [pc, #8]	; (80153b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80153a6:	e7e7      	b.n	8015378 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80153a8:	4620      	mov	r0, r4
 80153aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153ac:	0802c30c 	.word	0x0802c30c
 80153b0:	0802c47a 	.word	0x0802c47a
 80153b4:	0802c321 	.word	0x0802c321
 80153b8:	0802c34f 	.word	0x0802c34f

080153bc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80153bc:	b538      	push	{r3, r4, r5, lr}
 80153be:	6803      	ldr	r3, [r0, #0]
 80153c0:	460d      	mov	r5, r1
 80153c2:	4604      	mov	r4, r0
 80153c4:	6a1b      	ldr	r3, [r3, #32]
 80153c6:	4798      	blx	r3
 80153c8:	4285      	cmp	r5, r0
 80153ca:	d905      	bls.n	80153d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80153cc:	4b0c      	ldr	r3, [pc, #48]	; (8015400 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80153ce:	2130      	movs	r1, #48	; 0x30
 80153d0:	4a0c      	ldr	r2, [pc, #48]	; (8015404 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80153d2:	480d      	ldr	r0, [pc, #52]	; (8015408 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80153d4:	f011 f86c 	bl	80264b0 <__assert_func>
 80153d8:	6823      	ldr	r3, [r4, #0]
 80153da:	4620      	mov	r0, r4
 80153dc:	88a5      	ldrh	r5, [r4, #4]
 80153de:	69db      	ldr	r3, [r3, #28]
 80153e0:	4798      	blx	r3
 80153e2:	4285      	cmp	r5, r0
 80153e4:	d303      	bcc.n	80153ee <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80153e6:	4b09      	ldr	r3, [pc, #36]	; (801540c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80153e8:	2131      	movs	r1, #49	; 0x31
 80153ea:	4a06      	ldr	r2, [pc, #24]	; (8015404 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80153ec:	e7f1      	b.n	80153d2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80153ee:	6823      	ldr	r3, [r4, #0]
 80153f0:	4620      	mov	r0, r4
 80153f2:	88a1      	ldrh	r1, [r4, #4]
 80153f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f6:	4798      	blx	r3
 80153f8:	88a3      	ldrh	r3, [r4, #4]
 80153fa:	3301      	adds	r3, #1
 80153fc:	80a3      	strh	r3, [r4, #4]
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	0802c3c9 	.word	0x0802c3c9
 8015404:	0802c4bd 	.word	0x0802c4bd
 8015408:	0802c321 	.word	0x0802c321
 801540c:	0802c3e0 	.word	0x0802c3e0

08015410 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015410:	b570      	push	{r4, r5, r6, lr}
 8015412:	6803      	ldr	r3, [r0, #0]
 8015414:	4616      	mov	r6, r2
 8015416:	4604      	mov	r4, r0
 8015418:	460d      	mov	r5, r1
 801541a:	6a1b      	ldr	r3, [r3, #32]
 801541c:	4798      	blx	r3
 801541e:	4286      	cmp	r6, r0
 8015420:	d905      	bls.n	801542e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015422:	4b06      	ldr	r3, [pc, #24]	; (801543c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015424:	213a      	movs	r1, #58	; 0x3a
 8015426:	4a06      	ldr	r2, [pc, #24]	; (8015440 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015428:	4806      	ldr	r0, [pc, #24]	; (8015444 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801542a:	f011 f841 	bl	80264b0 <__assert_func>
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	4629      	mov	r1, r5
 8015432:	4620      	mov	r0, r4
 8015434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801543a:	4718      	bx	r3
 801543c:	0802c3c9 	.word	0x0802c3c9
 8015440:	0802c430 	.word	0x0802c430
 8015444:	0802c321 	.word	0x0802c321

08015448 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015448:	4770      	bx	lr
	...

0801544c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801544c:	4a02      	ldr	r2, [pc, #8]	; (8015458 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801544e:	6002      	str	r2, [r0, #0]
 8015450:	2200      	movs	r2, #0
 8015452:	8082      	strh	r2, [r0, #4]
 8015454:	4770      	bx	lr
 8015456:	bf00      	nop
 8015458:	0802c404 	.word	0x0802c404

0801545c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801545c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801545e:	2000      	movs	r0, #0
 8015460:	b12b      	cbz	r3, 801546e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015462:	b920      	cbnz	r0, 801546e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015464:	1a5a      	subs	r2, r3, r1
 8015466:	699b      	ldr	r3, [r3, #24]
 8015468:	4250      	negs	r0, r2
 801546a:	4150      	adcs	r0, r2
 801546c:	e7f8      	b.n	8015460 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801546e:	4770      	bx	lr

08015470 <_ZN8touchgfx9Container9removeAllEv>:
 8015470:	2200      	movs	r2, #0
 8015472:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015474:	b123      	cbz	r3, 8015480 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015476:	6999      	ldr	r1, [r3, #24]
 8015478:	6281      	str	r1, [r0, #40]	; 0x28
 801547a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801547e:	e7f8      	b.n	8015472 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015480:	4770      	bx	lr

08015482 <_ZN8touchgfx9Container6unlinkEv>:
 8015482:	2300      	movs	r3, #0
 8015484:	6283      	str	r3, [r0, #40]	; 0x28
 8015486:	4770      	bx	lr

08015488 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801548c:	461f      	mov	r7, r3
 801548e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015492:	460d      	mov	r5, r1
 8015494:	4616      	mov	r6, r2
 8015496:	b103      	cbz	r3, 801549a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015498:	6038      	str	r0, [r7, #0]
 801549a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801549c:	b314      	cbz	r4, 80154e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801549e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80154a2:	b1eb      	cbz	r3, 80154e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80154a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80154a8:	428d      	cmp	r5, r1
 80154aa:	db19      	blt.n	80154e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80154ac:	b289      	uxth	r1, r1
 80154ae:	8923      	ldrh	r3, [r4, #8]
 80154b0:	440b      	add	r3, r1
 80154b2:	b21b      	sxth	r3, r3
 80154b4:	429d      	cmp	r5, r3
 80154b6:	da13      	bge.n	80154e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80154b8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80154bc:	4296      	cmp	r6, r2
 80154be:	db0f      	blt.n	80154e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80154c0:	b292      	uxth	r2, r2
 80154c2:	8963      	ldrh	r3, [r4, #10]
 80154c4:	4413      	add	r3, r2
 80154c6:	b21b      	sxth	r3, r3
 80154c8:	429e      	cmp	r6, r3
 80154ca:	da09      	bge.n	80154e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80154cc:	6823      	ldr	r3, [r4, #0]
 80154ce:	1ab2      	subs	r2, r6, r2
 80154d0:	1a69      	subs	r1, r5, r1
 80154d2:	4620      	mov	r0, r4
 80154d4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80154d8:	b212      	sxth	r2, r2
 80154da:	463b      	mov	r3, r7
 80154dc:	b209      	sxth	r1, r1
 80154de:	47c0      	blx	r8
 80154e0:	69a4      	ldr	r4, [r4, #24]
 80154e2:	e7db      	b.n	801549c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80154e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154e8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80154e8:	2200      	movs	r2, #0
 80154ea:	8002      	strh	r2, [r0, #0]
 80154ec:	8042      	strh	r2, [r0, #2]
 80154ee:	8082      	strh	r2, [r0, #4]
 80154f0:	80c2      	strh	r2, [r0, #6]
 80154f2:	4770      	bx	lr

080154f4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80154f4:	b570      	push	{r4, r5, r6, lr}
 80154f6:	460d      	mov	r5, r1
 80154f8:	4616      	mov	r6, r2
 80154fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80154fc:	b13c      	cbz	r4, 801550e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80154fe:	6823      	ldr	r3, [r4, #0]
 8015500:	4620      	mov	r0, r4
 8015502:	4632      	mov	r2, r6
 8015504:	4629      	mov	r1, r5
 8015506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015508:	4798      	blx	r3
 801550a:	69a4      	ldr	r4, [r4, #24]
 801550c:	e7f6      	b.n	80154fc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801550e:	bd70      	pop	{r4, r5, r6, pc}

08015510 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015510:	b538      	push	{r3, r4, r5, lr}
 8015512:	460d      	mov	r5, r1
 8015514:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015516:	b134      	cbz	r4, 8015526 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015518:	682b      	ldr	r3, [r5, #0]
 801551a:	4621      	mov	r1, r4
 801551c:	4628      	mov	r0, r5
 801551e:	689b      	ldr	r3, [r3, #8]
 8015520:	4798      	blx	r3
 8015522:	69a4      	ldr	r4, [r4, #24]
 8015524:	e7f7      	b.n	8015516 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015526:	bd38      	pop	{r3, r4, r5, pc}

08015528 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015528:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801552a:	b19b      	cbz	r3, 8015554 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801552c:	428b      	cmp	r3, r1
 801552e:	d109      	bne.n	8015544 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015530:	699a      	ldr	r2, [r3, #24]
 8015532:	2100      	movs	r1, #0
 8015534:	6159      	str	r1, [r3, #20]
 8015536:	6282      	str	r2, [r0, #40]	; 0x28
 8015538:	b902      	cbnz	r2, 801553c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801553a:	4770      	bx	lr
 801553c:	6199      	str	r1, [r3, #24]
 801553e:	4770      	bx	lr
 8015540:	4613      	mov	r3, r2
 8015542:	b13a      	cbz	r2, 8015554 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015544:	699a      	ldr	r2, [r3, #24]
 8015546:	428a      	cmp	r2, r1
 8015548:	d1fa      	bne.n	8015540 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801554a:	698a      	ldr	r2, [r1, #24]
 801554c:	619a      	str	r2, [r3, #24]
 801554e:	2300      	movs	r3, #0
 8015550:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015554:	4770      	bx	lr

08015556 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015556:	b410      	push	{r4}
 8015558:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801555a:	4604      	mov	r4, r0
 801555c:	b92b      	cbnz	r3, 801556a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801555e:	6803      	ldr	r3, [r0, #0]
 8015560:	4611      	mov	r1, r2
 8015562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015568:	4718      	bx	r3
 801556a:	b941      	cbnz	r1, 801557e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801556c:	6193      	str	r3, [r2, #24]
 801556e:	6282      	str	r2, [r0, #40]	; 0x28
 8015570:	6154      	str	r4, [r2, #20]
 8015572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015576:	4770      	bx	lr
 8015578:	4603      	mov	r3, r0
 801557a:	2800      	cmp	r0, #0
 801557c:	d0f9      	beq.n	8015572 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801557e:	4299      	cmp	r1, r3
 8015580:	6998      	ldr	r0, [r3, #24]
 8015582:	d1f9      	bne.n	8015578 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015584:	6190      	str	r0, [r2, #24]
 8015586:	618a      	str	r2, [r1, #24]
 8015588:	e7f2      	b.n	8015570 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801558c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801558c:	4288      	cmp	r0, r1
 801558e:	b508      	push	{r3, lr}
 8015590:	d105      	bne.n	801559e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015592:	4b11      	ldr	r3, [pc, #68]	; (80155d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015594:	2121      	movs	r1, #33	; 0x21
 8015596:	4a11      	ldr	r2, [pc, #68]	; (80155dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015598:	4811      	ldr	r0, [pc, #68]	; (80155e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801559a:	f010 ff89 	bl	80264b0 <__assert_func>
 801559e:	694b      	ldr	r3, [r1, #20]
 80155a0:	b11b      	cbz	r3, 80155aa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80155a2:	4b10      	ldr	r3, [pc, #64]	; (80155e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80155a4:	2122      	movs	r1, #34	; 0x22
 80155a6:	4a0d      	ldr	r2, [pc, #52]	; (80155dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80155a8:	e7f6      	b.n	8015598 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80155aa:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80155ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155b0:	b913      	cbnz	r3, 80155b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80155b2:	6281      	str	r1, [r0, #40]	; 0x28
 80155b4:	bd08      	pop	{r3, pc}
 80155b6:	4613      	mov	r3, r2
 80155b8:	699a      	ldr	r2, [r3, #24]
 80155ba:	b12a      	cbz	r2, 80155c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80155bc:	428b      	cmp	r3, r1
 80155be:	d1fa      	bne.n	80155b6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80155c0:	4b09      	ldr	r3, [pc, #36]	; (80155e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80155c2:	2133      	movs	r1, #51	; 0x33
 80155c4:	4a05      	ldr	r2, [pc, #20]	; (80155dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80155c6:	e7e7      	b.n	8015598 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80155c8:	428b      	cmp	r3, r1
 80155ca:	d103      	bne.n	80155d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80155cc:	4b06      	ldr	r3, [pc, #24]	; (80155e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80155ce:	2136      	movs	r1, #54	; 0x36
 80155d0:	4a02      	ldr	r2, [pc, #8]	; (80155dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80155d2:	e7e1      	b.n	8015598 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80155d4:	6199      	str	r1, [r3, #24]
 80155d6:	e7ed      	b.n	80155b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80155d8:	0802c4fb 	.word	0x0802c4fb
 80155dc:	0802c64c 	.word	0x0802c64c
 80155e0:	0802c527 	.word	0x0802c527
 80155e4:	0802c55a 	.word	0x0802c55a
 80155e8:	0802c590 	.word	0x0802c590

080155ec <_ZN8touchgfx4RectaNERKS0_>:
 80155ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155f0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80155f4:	888c      	ldrh	r4, [r1, #4]
 80155f6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80155fa:	443c      	add	r4, r7
 80155fc:	b2a4      	uxth	r4, r4
 80155fe:	fa0f f884 	sxth.w	r8, r4
 8015602:	45c1      	cmp	r9, r8
 8015604:	da2f      	bge.n	8015666 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015606:	8882      	ldrh	r2, [r0, #4]
 8015608:	444a      	add	r2, r9
 801560a:	b292      	uxth	r2, r2
 801560c:	fa0f fe82 	sxth.w	lr, r2
 8015610:	4577      	cmp	r7, lr
 8015612:	da28      	bge.n	8015666 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015614:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015618:	88cb      	ldrh	r3, [r1, #6]
 801561a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801561e:	442b      	add	r3, r5
 8015620:	b21b      	sxth	r3, r3
 8015622:	429e      	cmp	r6, r3
 8015624:	da1f      	bge.n	8015666 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015626:	88c3      	ldrh	r3, [r0, #6]
 8015628:	4433      	add	r3, r6
 801562a:	b29b      	uxth	r3, r3
 801562c:	fa0f fc83 	sxth.w	ip, r3
 8015630:	4565      	cmp	r5, ip
 8015632:	da18      	bge.n	8015666 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015634:	454f      	cmp	r7, r9
 8015636:	bfb8      	it	lt
 8015638:	464f      	movlt	r7, r9
 801563a:	42b5      	cmp	r5, r6
 801563c:	bfb8      	it	lt
 801563e:	4635      	movlt	r5, r6
 8015640:	45f0      	cmp	r8, lr
 8015642:	bfd8      	it	le
 8015644:	4622      	movle	r2, r4
 8015646:	1bd2      	subs	r2, r2, r7
 8015648:	8082      	strh	r2, [r0, #4]
 801564a:	884a      	ldrh	r2, [r1, #2]
 801564c:	88c9      	ldrh	r1, [r1, #6]
 801564e:	8007      	strh	r7, [r0, #0]
 8015650:	440a      	add	r2, r1
 8015652:	8045      	strh	r5, [r0, #2]
 8015654:	b292      	uxth	r2, r2
 8015656:	b211      	sxth	r1, r2
 8015658:	458c      	cmp	ip, r1
 801565a:	bfa8      	it	ge
 801565c:	4613      	movge	r3, r2
 801565e:	1b5b      	subs	r3, r3, r5
 8015660:	80c3      	strh	r3, [r0, #6]
 8015662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015666:	2300      	movs	r3, #0
 8015668:	8003      	strh	r3, [r0, #0]
 801566a:	8043      	strh	r3, [r0, #2]
 801566c:	8083      	strh	r3, [r0, #4]
 801566e:	80c3      	strh	r3, [r0, #6]
 8015670:	e7f7      	b.n	8015662 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015672 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015672:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	dd06      	ble.n	8015688 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801567a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801567e:	2800      	cmp	r0, #0
 8015680:	bfcc      	ite	gt
 8015682:	2000      	movgt	r0, #0
 8015684:	2001      	movle	r0, #1
 8015686:	4770      	bx	lr
 8015688:	2001      	movs	r0, #1
 801568a:	4770      	bx	lr

0801568c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015690:	2300      	movs	r3, #0
 8015692:	4604      	mov	r4, r0
 8015694:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015696:	8003      	strh	r3, [r0, #0]
 8015698:	8043      	strh	r3, [r0, #2]
 801569a:	8083      	strh	r3, [r0, #4]
 801569c:	80c3      	strh	r3, [r0, #6]
 801569e:	2d00      	cmp	r5, #0
 80156a0:	d040      	beq.n	8015724 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80156a2:	1d28      	adds	r0, r5, #4
 80156a4:	f7ff ffe5 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 80156a8:	b988      	cbnz	r0, 80156ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80156aa:	4620      	mov	r0, r4
 80156ac:	f7ff ffe1 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 80156b0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80156b4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80156b8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80156bc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80156c0:	b138      	cbz	r0, 80156d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80156c2:	8022      	strh	r2, [r4, #0]
 80156c4:	8063      	strh	r3, [r4, #2]
 80156c6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80156ca:	f8a4 c006 	strh.w	ip, [r4, #6]
 80156ce:	69ad      	ldr	r5, [r5, #24]
 80156d0:	e7e5      	b.n	801569e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80156d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80156d6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80156da:	4290      	cmp	r0, r2
 80156dc:	4607      	mov	r7, r0
 80156de:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80156e2:	460e      	mov	r6, r1
 80156e4:	bfa8      	it	ge
 80156e6:	4617      	movge	r7, r2
 80156e8:	4299      	cmp	r1, r3
 80156ea:	4472      	add	r2, lr
 80156ec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80156f0:	bfa8      	it	ge
 80156f2:	461e      	movge	r6, r3
 80156f4:	4440      	add	r0, r8
 80156f6:	4471      	add	r1, lr
 80156f8:	4463      	add	r3, ip
 80156fa:	b200      	sxth	r0, r0
 80156fc:	8027      	strh	r7, [r4, #0]
 80156fe:	b212      	sxth	r2, r2
 8015700:	8066      	strh	r6, [r4, #2]
 8015702:	b209      	sxth	r1, r1
 8015704:	b21b      	sxth	r3, r3
 8015706:	4290      	cmp	r0, r2
 8015708:	bfac      	ite	ge
 801570a:	ebc7 0200 	rsbge	r2, r7, r0
 801570e:	ebc7 0202 	rsblt	r2, r7, r2
 8015712:	4299      	cmp	r1, r3
 8015714:	bfac      	ite	ge
 8015716:	ebc6 0301 	rsbge	r3, r6, r1
 801571a:	ebc6 0303 	rsblt	r3, r6, r3
 801571e:	80a2      	strh	r2, [r4, #4]
 8015720:	80e3      	strh	r3, [r4, #6]
 8015722:	e7d4      	b.n	80156ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015724:	4620      	mov	r0, r4
 8015726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801572a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801572a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801572e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015732:	b383      	cbz	r3, 8015796 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015734:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015736:	b374      	cbz	r4, 8015796 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015738:	f9b1 5000 	ldrsh.w	r5, [r1]
 801573c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015740:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015744:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015748:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801574c:	b303      	cbz	r3, 8015790 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801574e:	4668      	mov	r0, sp
 8015750:	1d21      	adds	r1, r4, #4
 8015752:	f8ad 5000 	strh.w	r5, [sp]
 8015756:	f8ad 6002 	strh.w	r6, [sp, #2]
 801575a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801575e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015762:	f7ff ff43 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 8015766:	4668      	mov	r0, sp
 8015768:	f7ff ff83 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 801576c:	b980      	cbnz	r0, 8015790 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801576e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015772:	4669      	mov	r1, sp
 8015774:	88a2      	ldrh	r2, [r4, #4]
 8015776:	4620      	mov	r0, r4
 8015778:	1a9b      	subs	r3, r3, r2
 801577a:	88e2      	ldrh	r2, [r4, #6]
 801577c:	f8ad 3000 	strh.w	r3, [sp]
 8015780:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015784:	1a9b      	subs	r3, r3, r2
 8015786:	f8ad 3002 	strh.w	r3, [sp, #2]
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	689b      	ldr	r3, [r3, #8]
 801578e:	4798      	blx	r3
 8015790:	69a4      	ldr	r4, [r4, #24]
 8015792:	2c00      	cmp	r4, #0
 8015794:	d1d8      	bne.n	8015748 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015796:	b002      	add	sp, #8
 8015798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801579c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801579c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801579e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80157a2:	460d      	mov	r5, r1
 80157a4:	4616      	mov	r6, r2
 80157a6:	b323      	cbz	r3, 80157f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80157a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80157aa:	b314      	cbz	r4, 80157f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80157ac:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80157b0:	b1eb      	cbz	r3, 80157ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80157b2:	6828      	ldr	r0, [r5, #0]
 80157b4:	466b      	mov	r3, sp
 80157b6:	6869      	ldr	r1, [r5, #4]
 80157b8:	c303      	stmia	r3!, {r0, r1}
 80157ba:	4668      	mov	r0, sp
 80157bc:	1d21      	adds	r1, r4, #4
 80157be:	f7ff ff15 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 80157c2:	4668      	mov	r0, sp
 80157c4:	f7ff ff55 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157c8:	b988      	cbnz	r0, 80157ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80157ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80157ce:	4669      	mov	r1, sp
 80157d0:	88a2      	ldrh	r2, [r4, #4]
 80157d2:	4620      	mov	r0, r4
 80157d4:	1a9b      	subs	r3, r3, r2
 80157d6:	88e2      	ldrh	r2, [r4, #6]
 80157d8:	f8ad 3000 	strh.w	r3, [sp]
 80157dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80157e0:	1a9b      	subs	r3, r3, r2
 80157e2:	4632      	mov	r2, r6
 80157e4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80157e8:	6823      	ldr	r3, [r4, #0]
 80157ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157ec:	4798      	blx	r3
 80157ee:	69a4      	ldr	r4, [r4, #24]
 80157f0:	e7db      	b.n	80157aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80157f2:	b002      	add	sp, #8
 80157f4:	bd70      	pop	{r4, r5, r6, pc}

080157f6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80157f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157fa:	4770      	bx	lr

080157fc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80157fc:	4770      	bx	lr

080157fe <_ZN8touchgfx3HAL10FlushCacheEv>:
 80157fe:	4770      	bx	lr

08015800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015800:	6803      	ldr	r3, [r0, #0]
 8015802:	b513      	push	{r0, r1, r4, lr}
 8015804:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8015808:	2300      	movs	r3, #0
 801580a:	e9cd 3300 	strd	r3, r3, [sp]
 801580e:	466b      	mov	r3, sp
 8015810:	47a0      	blx	r4
 8015812:	b002      	add	sp, #8
 8015814:	bd10      	pop	{r4, pc}

08015816 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015816:	2301      	movs	r3, #1
 8015818:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801581c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015820:	4770      	bx	lr

08015822 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015822:	2301      	movs	r3, #1
 8015824:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015828:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801582c:	4770      	bx	lr

0801582e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801582e:	6843      	ldr	r3, [r0, #4]
 8015830:	2201      	movs	r2, #1
 8015832:	725a      	strb	r2, [r3, #9]
 8015834:	6840      	ldr	r0, [r0, #4]
 8015836:	6803      	ldr	r3, [r0, #0]
 8015838:	691b      	ldr	r3, [r3, #16]
 801583a:	4718      	bx	r3

0801583c <_ZN8touchgfx3HAL8flushDMAEv>:
 801583c:	6840      	ldr	r0, [r0, #4]
 801583e:	6803      	ldr	r3, [r0, #0]
 8015840:	689b      	ldr	r3, [r3, #8]
 8015842:	4718      	bx	r3

08015844 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015844:	b530      	push	{r4, r5, lr}
 8015846:	b08b      	sub	sp, #44	; 0x2c
 8015848:	6804      	ldr	r4, [r0, #0]
 801584a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801584e:	9508      	str	r5, [sp, #32]
 8015850:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015854:	9507      	str	r5, [sp, #28]
 8015856:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801585a:	9506      	str	r5, [sp, #24]
 801585c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015860:	9505      	str	r5, [sp, #20]
 8015862:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015866:	9504      	str	r5, [sp, #16]
 8015868:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801586c:	9503      	str	r5, [sp, #12]
 801586e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015872:	9502      	str	r5, [sp, #8]
 8015874:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015878:	e9cd 3500 	strd	r3, r5, [sp]
 801587c:	4613      	mov	r3, r2
 801587e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015880:	2200      	movs	r2, #0
 8015882:	47a0      	blx	r4
 8015884:	b00b      	add	sp, #44	; 0x2c
 8015886:	bd30      	pop	{r4, r5, pc}

08015888 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015888:	4b04      	ldr	r3, [pc, #16]	; (801589c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	b123      	cbz	r3, 8015898 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801588e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015892:	f080 0001 	eor.w	r0, r0, #1
 8015896:	4770      	bx	lr
 8015898:	2001      	movs	r0, #1
 801589a:	4770      	bx	lr
 801589c:	2005674e 	.word	0x2005674e

080158a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80158a0:	b510      	push	{r4, lr}
 80158a2:	4604      	mov	r4, r0
 80158a4:	6840      	ldr	r0, [r0, #4]
 80158a6:	6803      	ldr	r3, [r0, #0]
 80158a8:	689b      	ldr	r3, [r3, #8]
 80158aa:	4798      	blx	r3
 80158ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80158b0:	b113      	cbz	r3, 80158b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80158b2:	2301      	movs	r3, #1
 80158b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80158b8:	bd10      	pop	{r4, pc}

080158ba <_ZN8touchgfx3HAL10initializeEv>:
 80158ba:	b510      	push	{r4, lr}
 80158bc:	4604      	mov	r4, r0
 80158be:	f7ed ff47 	bl	8003750 <_ZN8touchgfx10OSWrappers10initializeEv>
 80158c2:	6860      	ldr	r0, [r4, #4]
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	68db      	ldr	r3, [r3, #12]
 80158c8:	4798      	blx	r3
 80158ca:	68e0      	ldr	r0, [r4, #12]
 80158cc:	6803      	ldr	r3, [r0, #0]
 80158ce:	689b      	ldr	r3, [r3, #8]
 80158d0:	4798      	blx	r3
 80158d2:	6823      	ldr	r3, [r4, #0]
 80158d4:	4620      	mov	r0, r4
 80158d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158dc:	4718      	bx	r3

080158de <_ZN8touchgfx3HAL9taskEntryEv>:
 80158de:	b508      	push	{r3, lr}
 80158e0:	6803      	ldr	r3, [r0, #0]
 80158e2:	4604      	mov	r4, r0
 80158e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80158e6:	4798      	blx	r3
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158ec:	4620      	mov	r0, r4
 80158ee:	4798      	blx	r3
 80158f0:	f7ed ffa4 	bl	800383c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80158f8:	e7f8      	b.n	80158ec <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080158fc <_ZN8touchgfx3HAL4tickEv>:
 80158fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	4604      	mov	r4, r0
 8015902:	4d5c      	ldr	r5, [pc, #368]	; (8015a74 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015908:	4798      	blx	r3
 801590a:	2800      	cmp	r0, #0
 801590c:	f000 8097 	beq.w	8015a3e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015910:	2001      	movs	r0, #1
 8015912:	2600      	movs	r6, #0
 8015914:	f7ed fcee 	bl	80032f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015918:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801591c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015920:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015924:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015928:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801592c:	b133      	cbz	r3, 801593c <_ZN8touchgfx3HAL4tickEv+0x40>
 801592e:	6823      	ldr	r3, [r4, #0]
 8015930:	4620      	mov	r0, r4
 8015932:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015936:	4798      	blx	r3
 8015938:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801593c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015940:	2601      	movs	r6, #1
 8015942:	6862      	ldr	r2, [r4, #4]
 8015944:	f083 0301 	eor.w	r3, r3, #1
 8015948:	702e      	strb	r6, [r5, #0]
 801594a:	7253      	strb	r3, [r2, #9]
 801594c:	f003 fcac 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 8015950:	6803      	ldr	r3, [r0, #0]
 8015952:	4631      	mov	r1, r6
 8015954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015956:	4798      	blx	r3
 8015958:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801595c:	b90b      	cbnz	r3, 8015962 <_ZN8touchgfx3HAL4tickEv+0x66>
 801595e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015962:	f003 fca1 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 8015966:	6803      	ldr	r3, [r0, #0]
 8015968:	695b      	ldr	r3, [r3, #20]
 801596a:	4798      	blx	r3
 801596c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801596e:	6803      	ldr	r3, [r0, #0]
 8015970:	691b      	ldr	r3, [r3, #16]
 8015972:	4798      	blx	r3
 8015974:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015978:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801597c:	3b01      	subs	r3, #1
 801597e:	b2db      	uxtb	r3, r3
 8015980:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015984:	b10a      	cbz	r2, 801598a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1eb      	bne.n	8015962 <_ZN8touchgfx3HAL4tickEv+0x66>
 801598a:	4a3b      	ldr	r2, [pc, #236]	; (8015a78 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801598c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015990:	7813      	ldrb	r3, [r2, #0]
 8015992:	3301      	adds	r3, #1
 8015994:	b25b      	sxtb	r3, r3
 8015996:	4299      	cmp	r1, r3
 8015998:	7013      	strb	r3, [r2, #0]
 801599a:	dc10      	bgt.n	80159be <_ZN8touchgfx3HAL4tickEv+0xc2>
 801599c:	2300      	movs	r3, #0
 801599e:	68e0      	ldr	r0, [r4, #12]
 80159a0:	a902      	add	r1, sp, #8
 80159a2:	7013      	strb	r3, [r2, #0]
 80159a4:	aa03      	add	r2, sp, #12
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	68db      	ldr	r3, [r3, #12]
 80159aa:	4798      	blx	r3
 80159ac:	6823      	ldr	r3, [r4, #0]
 80159ae:	2800      	cmp	r0, #0
 80159b0:	d051      	beq.n	8015a56 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80159b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80159b6:	4620      	mov	r0, r4
 80159b8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80159bc:	4798      	blx	r3
 80159be:	2300      	movs	r3, #0
 80159c0:	6960      	ldr	r0, [r4, #20]
 80159c2:	f88d 3007 	strb.w	r3, [sp, #7]
 80159c6:	b158      	cbz	r0, 80159e0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80159c8:	6803      	ldr	r3, [r0, #0]
 80159ca:	f10d 0107 	add.w	r1, sp, #7
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	4798      	blx	r3
 80159d2:	b128      	cbz	r0, 80159e0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80159d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80159da:	6803      	ldr	r3, [r0, #0]
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	4798      	blx	r3
 80159e0:	f104 001c 	add.w	r0, r4, #28
 80159e4:	f00e ff5e 	bl	80248a4 <_ZN8touchgfx8Gestures4tickEv>
 80159e8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80159ec:	b30b      	cbz	r3, 8015a32 <_ZN8touchgfx3HAL4tickEv+0x136>
 80159ee:	6920      	ldr	r0, [r4, #16]
 80159f0:	6803      	ldr	r3, [r0, #0]
 80159f2:	691b      	ldr	r3, [r3, #16]
 80159f4:	4798      	blx	r3
 80159f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80159f8:	4606      	mov	r6, r0
 80159fa:	b903      	cbnz	r3, 80159fe <_ZN8touchgfx3HAL4tickEv+0x102>
 80159fc:	6720      	str	r0, [r4, #112]	; 0x70
 80159fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a00:	4a1e      	ldr	r2, [pc, #120]	; (8015a7c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015a02:	1af3      	subs	r3, r6, r3
 8015a04:	4293      	cmp	r3, r2
 8015a06:	d914      	bls.n	8015a32 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015a08:	6920      	ldr	r0, [r4, #16]
 8015a0a:	6803      	ldr	r3, [r0, #0]
 8015a0c:	699b      	ldr	r3, [r3, #24]
 8015a0e:	4798      	blx	r3
 8015a10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a12:	2264      	movs	r2, #100	; 0x64
 8015a14:	1af3      	subs	r3, r6, r3
 8015a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	dc1e      	bgt.n	8015a60 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015a22:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015a26:	6920      	ldr	r0, [r4, #16]
 8015a28:	2100      	movs	r1, #0
 8015a2a:	6803      	ldr	r3, [r0, #0]
 8015a2c:	69db      	ldr	r3, [r3, #28]
 8015a2e:	4798      	blx	r3
 8015a30:	6726      	str	r6, [r4, #112]	; 0x70
 8015a32:	f003 fc39 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 8015a36:	6803      	ldr	r3, [r0, #0]
 8015a38:	2100      	movs	r1, #0
 8015a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a3c:	4798      	blx	r3
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	4620      	mov	r0, r4
 8015a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015a46:	4798      	blx	r3
 8015a48:	2001      	movs	r0, #1
 8015a4a:	f7ed fc5e 	bl	800330a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015a4e:	2300      	movs	r3, #0
 8015a50:	702b      	strb	r3, [r5, #0]
 8015a52:	b004      	add	sp, #16
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
 8015a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	4798      	blx	r3
 8015a5e:	e7ae      	b.n	80159be <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015a60:	2863      	cmp	r0, #99	; 0x63
 8015a62:	bfcb      	itete	gt
 8015a64:	2300      	movgt	r3, #0
 8015a66:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015a6a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015a6e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015a72:	e7d8      	b.n	8015a26 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015a74:	20056754 	.word	0x20056754
 8015a78:	20056755 	.word	0x20056755
 8015a7c:	05f5e100 	.word	0x05f5e100

08015a80 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015a80:	f7ed bea8 	b.w	80037d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015a84 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015a84:	6581      	str	r1, [r0, #88]	; 0x58
 8015a86:	301c      	adds	r0, #28
 8015a88:	f00e bf0a 	b.w	80248a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015a8c <_ZN8touchgfx3HAL5touchEll>:
 8015a8c:	b530      	push	{r4, r5, lr}
 8015a8e:	b087      	sub	sp, #28
 8015a90:	4604      	mov	r4, r0
 8015a92:	a804      	add	r0, sp, #16
 8015a94:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015a98:	f003 f9f2 	bl	8018e80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015a9c:	9b04      	ldr	r3, [sp, #16]
 8015a9e:	a906      	add	r1, sp, #24
 8015aa0:	a803      	add	r0, sp, #12
 8015aa2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015aa6:	9b05      	ldr	r3, [sp, #20]
 8015aa8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015aac:	f003 fa26 	bl	8018efc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015ab0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015ab4:	f104 001c 	add.w	r0, r4, #28
 8015ab8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015abc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015ac0:	b189      	cbz	r1, 8015ae6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015ac2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015ac6:	9300      	str	r3, [sp, #0]
 8015ac8:	4613      	mov	r3, r2
 8015aca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015ace:	462a      	mov	r2, r5
 8015ad0:	f00e fef6 	bl	80248c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015ad4:	b128      	cbz	r0, 8015ae2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015ad6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015ada:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015adc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015ae0:	6623      	str	r3, [r4, #96]	; 0x60
 8015ae2:	b007      	add	sp, #28
 8015ae4:	bd30      	pop	{r4, r5, pc}
 8015ae6:	f00e ff2f 	bl	8024948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015aea:	2301      	movs	r3, #1
 8015aec:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015af0:	e7f1      	b.n	8015ad6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015af2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015af2:	b570      	push	{r4, r5, r6, lr}
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d050      	beq.n	8015b9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015af8:	ea81 0002 	eor.w	r0, r1, r2
 8015afc:	07c6      	lsls	r6, r0, #31
 8015afe:	d508      	bpl.n	8015b12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015b00:	3a01      	subs	r2, #1
 8015b02:	18cc      	adds	r4, r1, r3
 8015b04:	42a1      	cmp	r1, r4
 8015b06:	d048      	beq.n	8015b9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b08:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015b0c:	f801 0b01 	strb.w	r0, [r1], #1
 8015b10:	e7f8      	b.n	8015b04 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015b12:	07d5      	lsls	r5, r2, #31
 8015b14:	bf42      	ittt	mi
 8015b16:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015b1a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015b1e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d915      	bls.n	8015b52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015b26:	ea82 0001 	eor.w	r0, r2, r1
 8015b2a:	0784      	lsls	r4, r0, #30
 8015b2c:	d02d      	beq.n	8015b8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015b2e:	1e94      	subs	r4, r2, #2
 8015b30:	4608      	mov	r0, r1
 8015b32:	18ce      	adds	r6, r1, r3
 8015b34:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015b38:	f820 5b02 	strh.w	r5, [r0], #2
 8015b3c:	1a35      	subs	r5, r6, r0
 8015b3e:	2d01      	cmp	r5, #1
 8015b40:	d8f8      	bhi.n	8015b34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015b42:	1e98      	subs	r0, r3, #2
 8015b44:	f003 0301 	and.w	r3, r3, #1
 8015b48:	f020 0001 	bic.w	r0, r0, #1
 8015b4c:	3002      	adds	r0, #2
 8015b4e:	4401      	add	r1, r0
 8015b50:	4402      	add	r2, r0
 8015b52:	1f14      	subs	r4, r2, #4
 8015b54:	4608      	mov	r0, r1
 8015b56:	18ce      	adds	r6, r1, r3
 8015b58:	1a35      	subs	r5, r6, r0
 8015b5a:	2d03      	cmp	r5, #3
 8015b5c:	d810      	bhi.n	8015b80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015b5e:	089c      	lsrs	r4, r3, #2
 8015b60:	00a0      	lsls	r0, r4, #2
 8015b62:	4401      	add	r1, r0
 8015b64:	3801      	subs	r0, #1
 8015b66:	4402      	add	r2, r0
 8015b68:	f06f 0003 	mvn.w	r0, #3
 8015b6c:	fb00 3404 	mla	r4, r0, r4, r3
 8015b70:	440c      	add	r4, r1
 8015b72:	42a1      	cmp	r1, r4
 8015b74:	d011      	beq.n	8015b9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015b76:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015b7a:	f801 3b01 	strb.w	r3, [r1], #1
 8015b7e:	e7f8      	b.n	8015b72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015b80:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015b84:	f840 5b04 	str.w	r5, [r0], #4
 8015b88:	e7e6      	b.n	8015b58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015b8a:	0790      	lsls	r0, r2, #30
 8015b8c:	d0e1      	beq.n	8015b52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015b8e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015b92:	3b02      	subs	r3, #2
 8015b94:	f821 0b02 	strh.w	r0, [r1], #2
 8015b98:	e7db      	b.n	8015b52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015b9a:	2001      	movs	r0, #1
 8015b9c:	bd70      	pop	{r4, r5, r6, pc}

08015b9e <_ZN8touchgfx3HAL7noTouchEv>:
 8015b9e:	b510      	push	{r4, lr}
 8015ba0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	b153      	cbz	r3, 8015bbe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015ba8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015bac:	2101      	movs	r1, #1
 8015bae:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015bb2:	301c      	adds	r0, #28
 8015bb4:	f00e fec8 	bl	8024948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015bb8:	2300      	movs	r3, #0
 8015bba:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015bbe:	bd10      	pop	{r4, pc}

08015bc0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	6980      	ldr	r0, [r0, #24]
 8015bc8:	b085      	sub	sp, #20
 8015bca:	460f      	mov	r7, r1
 8015bcc:	4690      	mov	r8, r2
 8015bce:	4699      	mov	r9, r3
 8015bd0:	b930      	cbnz	r0, 8015be0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015bd2:	4b1c      	ldr	r3, [pc, #112]	; (8015c44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8015bd4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8015bd8:	4a1b      	ldr	r2, [pc, #108]	; (8015c48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015bda:	481c      	ldr	r0, [pc, #112]	; (8015c4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8015bdc:	f010 fc68 	bl	80264b0 <__assert_func>
 8015be0:	ad04      	add	r5, sp, #16
 8015be2:	2600      	movs	r6, #0
 8015be4:	f845 6d04 	str.w	r6, [r5, #-4]!
 8015be8:	6806      	ldr	r6, [r0, #0]
 8015bea:	9501      	str	r5, [sp, #4]
 8015bec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015bf0:	9500      	str	r5, [sp, #0]
 8015bf2:	6835      	ldr	r5, [r6, #0]
 8015bf4:	47a8      	blx	r5
 8015bf6:	4d16      	ldr	r5, [pc, #88]	; (8015c50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015bf8:	4606      	mov	r6, r0
 8015bfa:	f8a5 9000 	strh.w	r9, [r5]
 8015bfe:	f7f0 f8dd 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8015c02:	6803      	ldr	r3, [r0, #0]
 8015c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c06:	4798      	blx	r3
 8015c08:	2801      	cmp	r0, #1
 8015c0a:	d012      	beq.n	8015c32 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8015c0c:	d306      	bcc.n	8015c1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8015c0e:	280d      	cmp	r0, #13
 8015c10:	d80b      	bhi.n	8015c2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015c12:	4b10      	ldr	r3, [pc, #64]	; (8015c54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015c14:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8015c18:	4a0b      	ldr	r2, [pc, #44]	; (8015c48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015c1a:	e7de      	b.n	8015bda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015c1c:	882b      	ldrh	r3, [r5, #0]
 8015c1e:	fb08 7203 	mla	r2, r8, r3, r7
 8015c22:	9b03      	ldr	r3, [sp, #12]
 8015c24:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015c28:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015c2a:	4630      	mov	r0, r6
 8015c2c:	b005      	add	sp, #20
 8015c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c32:	882a      	ldrh	r2, [r5, #0]
 8015c34:	9b03      	ldr	r3, [sp, #12]
 8015c36:	fb08 7202 	mla	r2, r8, r2, r7
 8015c3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015c3e:	1a9a      	subs	r2, r3, r2
 8015c40:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015c42:	e7f2      	b.n	8015c2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015c44:	0802c7f4 	.word	0x0802c7f4
 8015c48:	0802cb79 	.word	0x0802cb79
 8015c4c:	0802c839 	.word	0x0802c839
 8015c50:	2005674a 	.word	0x2005674a
 8015c54:	0802c85f 	.word	0x0802c85f

08015c58 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c5a:	b08b      	sub	sp, #44	; 0x2c
 8015c5c:	4617      	mov	r7, r2
 8015c5e:	4604      	mov	r4, r0
 8015c60:	460e      	mov	r6, r1
 8015c62:	461d      	mov	r5, r3
 8015c64:	f7f0 f8aa 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8015c68:	6803      	ldr	r3, [r0, #0]
 8015c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6c:	4798      	blx	r3
 8015c6e:	4b0f      	ldr	r3, [pc, #60]	; (8015cac <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8015c70:	6822      	ldr	r2, [r4, #0]
 8015c72:	4631      	mov	r1, r6
 8015c74:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015c78:	881b      	ldrh	r3, [r3, #0]
 8015c7a:	4620      	mov	r0, r4
 8015c7c:	9306      	str	r3, [sp, #24]
 8015c7e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015c82:	9305      	str	r3, [sp, #20]
 8015c84:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015c88:	9304      	str	r3, [sp, #16]
 8015c8a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c8e:	9303      	str	r3, [sp, #12]
 8015c90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015c94:	9302      	str	r3, [sp, #8]
 8015c96:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015c9a:	e9cd 5300 	strd	r5, r3, [sp]
 8015c9e:	463b      	mov	r3, r7
 8015ca0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	47a8      	blx	r5
 8015ca6:	b00b      	add	sp, #44	; 0x2c
 8015ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015caa:	bf00      	nop
 8015cac:	2005674a 	.word	0x2005674a

08015cb0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cb4:	4698      	mov	r8, r3
 8015cb6:	6803      	ldr	r3, [r0, #0]
 8015cb8:	b08b      	sub	sp, #44	; 0x2c
 8015cba:	4617      	mov	r7, r2
 8015cbc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8015cbe:	460e      	mov	r6, r1
 8015cc0:	4b11      	ldr	r3, [pc, #68]	; (8015d08 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	f8b3 9000 	ldrh.w	r9, [r3]
 8015cc8:	f7f0 f878 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8015ccc:	6803      	ldr	r3, [r0, #0]
 8015cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd0:	4798      	blx	r3
 8015cd2:	2302      	movs	r3, #2
 8015cd4:	9008      	str	r0, [sp, #32]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	4631      	mov	r1, r6
 8015cda:	4620      	mov	r0, r4
 8015cdc:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	9305      	str	r3, [sp, #20]
 8015ce4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015ce8:	9304      	str	r3, [sp, #16]
 8015cea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015cee:	9303      	str	r3, [sp, #12]
 8015cf0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015cf4:	9302      	str	r3, [sp, #8]
 8015cf6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015cfa:	e9cd 8300 	strd	r8, r3, [sp]
 8015cfe:	463b      	mov	r3, r7
 8015d00:	47a8      	blx	r5
 8015d02:	b00b      	add	sp, #44	; 0x2c
 8015d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d08:	2005674a 	.word	0x2005674a

08015d0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d10:	4698      	mov	r8, r3
 8015d12:	6803      	ldr	r3, [r0, #0]
 8015d14:	b087      	sub	sp, #28
 8015d16:	460e      	mov	r6, r1
 8015d18:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8015d1a:	4617      	mov	r7, r2
 8015d1c:	4b0d      	ldr	r3, [pc, #52]	; (8015d54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015d1e:	4604      	mov	r4, r0
 8015d20:	f8b3 9000 	ldrh.w	r9, [r3]
 8015d24:	f7f0 f84a 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d2c:	4798      	blx	r3
 8015d2e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015d32:	463a      	mov	r2, r7
 8015d34:	4631      	mov	r1, r6
 8015d36:	9302      	str	r3, [sp, #8]
 8015d38:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015d3c:	9301      	str	r3, [sp, #4]
 8015d3e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015d42:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	4620      	mov	r0, r4
 8015d4a:	4643      	mov	r3, r8
 8015d4c:	47a8      	blx	r5
 8015d4e:	b007      	add	sp, #28
 8015d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d54:	2005674a 	.word	0x2005674a

08015d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	b08f      	sub	sp, #60	; 0x3c
 8015d60:	4610      	mov	r0, r2
 8015d62:	460d      	mov	r5, r1
 8015d64:	4691      	mov	r9, r2
 8015d66:	461e      	mov	r6, r3
 8015d68:	f006 fabc 	bl	801c2e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	f000 80b3 	beq.w	8015ed8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8015d72:	6823      	ldr	r3, [r4, #0]
 8015d74:	4620      	mov	r0, r4
 8015d76:	f8df b190 	ldr.w	fp, [pc, #400]	; 8015f08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 8015d7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8015d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d80:	4798      	blx	r3
 8015d82:	6823      	ldr	r3, [r4, #0]
 8015d84:	4620      	mov	r0, r4
 8015d86:	f8df a184 	ldr.w	sl, [pc, #388]	; 8015f0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8015d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d8c:	4798      	blx	r3
 8015d8e:	f8bb 3000 	ldrh.w	r3, [fp]
 8015d92:	4f5a      	ldr	r7, [pc, #360]	; (8015efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8015d94:	9300      	str	r3, [sp, #0]
 8015d96:	f8ba 3000 	ldrh.w	r3, [sl]
 8015d9a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8015d9e:	4640      	mov	r0, r8
 8015da0:	9301      	str	r3, [sp, #4]
 8015da2:	883b      	ldrh	r3, [r7, #0]
 8015da4:	9302      	str	r3, [sp, #8]
 8015da6:	4b56      	ldr	r3, [pc, #344]	; (8015f00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8015da8:	881a      	ldrh	r2, [r3, #0]
 8015daa:	9304      	str	r3, [sp, #16]
 8015dac:	9203      	str	r2, [sp, #12]
 8015dae:	f006 fb53 	bl	801c458 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015db2:	8038      	strh	r0, [r7, #0]
 8015db4:	4640      	mov	r0, r8
 8015db6:	f006 fb89 	bl	801c4cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015dba:	9b04      	ldr	r3, [sp, #16]
 8015dbc:	8018      	strh	r0, [r3, #0]
 8015dbe:	4b51      	ldr	r3, [pc, #324]	; (8015f04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	f040 808b 	bne.w	8015ede <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 8015dc8:	883b      	ldrh	r3, [r7, #0]
 8015dca:	f8aa 0000 	strh.w	r0, [sl]
 8015dce:	f8ab 3000 	strh.w	r3, [fp]
 8015dd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015dd4:	4648      	mov	r0, r9
 8015dd6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8015dd8:	9304      	str	r3, [sp, #16]
 8015dda:	f006 fa83 	bl	801c2e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015dde:	2200      	movs	r2, #0
 8015de0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8015de4:	4611      	mov	r1, r2
 8015de6:	4628      	mov	r0, r5
 8015de8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015dec:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015df0:	f7f0 fdc6 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>
 8015df4:	2301      	movs	r3, #1
 8015df6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8015dfa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015dfe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	dd71      	ble.n	8015eea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8015e06:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	dd6d      	ble.n	8015eea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8015e0e:	462a      	mov	r2, r5
 8015e10:	ab0a      	add	r3, sp, #40	; 0x28
 8015e12:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015e16:	6851      	ldr	r1, [r2, #4]
 8015e18:	c303      	stmia	r3!, {r0, r1}
 8015e1a:	4631      	mov	r1, r6
 8015e1c:	a80a      	add	r0, sp, #40	; 0x28
 8015e1e:	f7ff fbe5 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 8015e22:	4b36      	ldr	r3, [pc, #216]	; (8015efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8015e24:	2600      	movs	r6, #0
 8015e26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e2a:	4b35      	ldr	r3, [pc, #212]	; (8015f00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8015e2c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015e30:	aa0a      	add	r2, sp, #40	; 0x28
 8015e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e36:	960c      	str	r6, [sp, #48]	; 0x30
 8015e38:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015e3c:	ab08      	add	r3, sp, #32
 8015e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e42:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e46:	4618      	mov	r0, r3
 8015e48:	a90c      	add	r1, sp, #48	; 0x30
 8015e4a:	f7ff fbcf 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 8015e4e:	a807      	add	r0, sp, #28
 8015e50:	f006 fc00 	bl	801c654 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e54:	4680      	mov	r8, r0
 8015e56:	f7ef ffb1 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8015e5a:	6802      	ldr	r2, [r0, #0]
 8015e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015e5e:	4790      	blx	r2
 8015e60:	4580      	cmp	r8, r0
 8015e62:	d049      	beq.n	8015ef8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8015e64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015e66:	b150      	cbz	r0, 8015e7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8015e68:	a807      	add	r0, sp, #28
 8015e6a:	f006 fbf3 	bl	801c654 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e6e:	4606      	mov	r6, r0
 8015e70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e76:	4798      	blx	r3
 8015e78:	1a33      	subs	r3, r6, r0
 8015e7a:	4258      	negs	r0, r3
 8015e7c:	4158      	adcs	r0, r3
 8015e7e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015e82:	2600      	movs	r6, #0
 8015e84:	696b      	ldr	r3, [r5, #20]
 8015e86:	a908      	add	r1, sp, #32
 8015e88:	682a      	ldr	r2, [r5, #0]
 8015e8a:	4628      	mov	r0, r5
 8015e8c:	9305      	str	r3, [sp, #20]
 8015e8e:	616e      	str	r6, [r5, #20]
 8015e90:	6892      	ldr	r2, [r2, #8]
 8015e92:	4790      	blx	r2
 8015e94:	9b05      	ldr	r3, [sp, #20]
 8015e96:	4652      	mov	r2, sl
 8015e98:	4649      	mov	r1, r9
 8015e9a:	616b      	str	r3, [r5, #20]
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015ea2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8015ea6:	f7f0 fd6b 	bl	8006980 <_ZN8touchgfx8Drawable5setXYEss>
 8015eaa:	9b04      	ldr	r3, [sp, #16]
 8015eac:	9a00      	ldr	r2, [sp, #0]
 8015eae:	4620      	mov	r0, r4
 8015eb0:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 8015eb4:	4b14      	ldr	r3, [pc, #80]	; (8015f08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015eb6:	801a      	strh	r2, [r3, #0]
 8015eb8:	9a01      	ldr	r2, [sp, #4]
 8015eba:	4b14      	ldr	r3, [pc, #80]	; (8015f0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015ebc:	801a      	strh	r2, [r3, #0]
 8015ebe:	9a02      	ldr	r2, [sp, #8]
 8015ec0:	4b0e      	ldr	r3, [pc, #56]	; (8015efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8015ec2:	801a      	strh	r2, [r3, #0]
 8015ec4:	4b0e      	ldr	r3, [pc, #56]	; (8015f00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8015ec6:	9a03      	ldr	r2, [sp, #12]
 8015ec8:	801a      	strh	r2, [r3, #0]
 8015eca:	6823      	ldr	r3, [r4, #0]
 8015ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ece:	4798      	blx	r3
 8015ed0:	6823      	ldr	r3, [r4, #0]
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ed6:	4798      	blx	r3
 8015ed8:	b00f      	add	sp, #60	; 0x3c
 8015eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ede:	883b      	ldrh	r3, [r7, #0]
 8015ee0:	f8ab 0000 	strh.w	r0, [fp]
 8015ee4:	f8aa 3000 	strh.w	r3, [sl]
 8015ee8:	e773      	b.n	8015dd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015eea:	462a      	mov	r2, r5
 8015eec:	ab0a      	add	r3, sp, #40	; 0x28
 8015eee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015ef2:	6851      	ldr	r1, [r2, #4]
 8015ef4:	c303      	stmia	r3!, {r0, r1}
 8015ef6:	e794      	b.n	8015e22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8015ef8:	4630      	mov	r0, r6
 8015efa:	e7c0      	b.n	8015e7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8015efc:	20056744 	.word	0x20056744
 8015f00:	20056746 	.word	0x20056746
 8015f04:	20056748 	.word	0x20056748
 8015f08:	2005674a 	.word	0x2005674a
 8015f0c:	2005674c 	.word	0x2005674c

08015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015f10:	4b07      	ldr	r3, [pc, #28]	; (8015f30 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015f12:	b510      	push	{r4, lr}
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	4604      	mov	r4, r0
 8015f18:	b13b      	cbz	r3, 8015f2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015f1a:	6803      	ldr	r3, [r0, #0]
 8015f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f1e:	4798      	blx	r3
 8015f20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015f22:	4283      	cmp	r3, r0
 8015f24:	d101      	bne.n	8015f2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015f26:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015f28:	bd10      	pop	{r4, pc}
 8015f2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015f2c:	e7fc      	b.n	8015f28 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015f2e:	bf00      	nop
 8015f30:	2005674e 	.word	0x2005674e

08015f34 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f38:	b088      	sub	sp, #32
 8015f3a:	4692      	mov	sl, r2
 8015f3c:	461c      	mov	r4, r3
 8015f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f42:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8015f46:	2500      	movs	r5, #0
 8015f48:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8015f4c:	4606      	mov	r6, r0
 8015f4e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8015f52:	fb09 a404 	mla	r4, r9, r4, sl
 8015f56:	9503      	str	r5, [sp, #12]
 8015f58:	f8ad 8014 	strh.w	r8, [sp, #20]
 8015f5c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015f60:	f88d 501c 	strb.w	r5, [sp, #28]
 8015f64:	e9cd 3100 	strd	r3, r1, [sp]
 8015f68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015f6c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f70:	f7ff ffce 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015f78:	f8ad 901a 	strh.w	r9, [sp, #26]
 8015f7c:	f88d 501e 	strb.w	r5, [sp, #30]
 8015f80:	9404      	str	r4, [sp, #16]
 8015f82:	f88d 501d 	strb.w	r5, [sp, #29]
 8015f86:	f1b8 0f00 	cmp.w	r8, #0
 8015f8a:	d000      	beq.n	8015f8e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 8015f8c:	b937      	cbnz	r7, 8015f9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 8015f8e:	4b0d      	ldr	r3, [pc, #52]	; (8015fc4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 8015f90:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015f94:	4a0c      	ldr	r2, [pc, #48]	; (8015fc8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8015f96:	480d      	ldr	r0, [pc, #52]	; (8015fcc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8015f98:	f010 fa8a 	bl	80264b0 <__assert_func>
 8015f9c:	6833      	ldr	r3, [r6, #0]
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	9c00      	ldr	r4, [sp, #0]
 8015fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fa4:	4798      	blx	r3
 8015fa6:	4220      	tst	r0, r4
 8015fa8:	d104      	bne.n	8015fb4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 8015faa:	4b09      	ldr	r3, [pc, #36]	; (8015fd0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8015fac:	f240 2105 	movw	r1, #517	; 0x205
 8015fb0:	4a05      	ldr	r2, [pc, #20]	; (8015fc8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8015fb2:	e7f0      	b.n	8015f96 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8015fb4:	6870      	ldr	r0, [r6, #4]
 8015fb6:	4669      	mov	r1, sp
 8015fb8:	6803      	ldr	r3, [r0, #0]
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	4798      	blx	r3
 8015fbe:	b008      	add	sp, #32
 8015fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fc4:	0802c687 	.word	0x0802c687
 8015fc8:	0802c9b4 	.word	0x0802c9b4
 8015fcc:	0802c839 	.word	0x0802c839
 8015fd0:	0802c6bf 	.word	0x0802c6bf

08015fd4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd8:	b089      	sub	sp, #36	; 0x24
 8015fda:	4693      	mov	fp, r2
 8015fdc:	461d      	mov	r5, r3
 8015fde:	2400      	movs	r4, #0
 8015fe0:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8015fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fe8:	468a      	mov	sl, r1
 8015fea:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8015fee:	fb09 b505 	mla	r5, r9, r5, fp
 8015ff2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8015ff6:	4606      	mov	r6, r0
 8015ff8:	9403      	str	r4, [sp, #12]
 8015ffa:	e9cd 3400 	strd	r3, r4, [sp]
 8015ffe:	f7ff ff87 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016002:	f8ad 8014 	strh.w	r8, [sp, #20]
 8016006:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801600a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801600e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8016012:	9504      	str	r5, [sp, #16]
 8016014:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016018:	f8cd a00c 	str.w	sl, [sp, #12]
 801601c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016020:	f88d 401e 	strb.w	r4, [sp, #30]
 8016024:	f1b8 0f00 	cmp.w	r8, #0
 8016028:	d000      	beq.n	801602c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 801602a:	b937      	cbnz	r7, 801603a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 801602c:	4b0d      	ldr	r3, [pc, #52]	; (8016064 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 801602e:	f240 2119 	movw	r1, #537	; 0x219
 8016032:	4a0d      	ldr	r2, [pc, #52]	; (8016068 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016034:	480d      	ldr	r0, [pc, #52]	; (801606c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8016036:	f010 fa3b 	bl	80264b0 <__assert_func>
 801603a:	6833      	ldr	r3, [r6, #0]
 801603c:	4630      	mov	r0, r6
 801603e:	9c00      	ldr	r4, [sp, #0]
 8016040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016042:	4798      	blx	r3
 8016044:	4220      	tst	r0, r4
 8016046:	d104      	bne.n	8016052 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8016048:	4b09      	ldr	r3, [pc, #36]	; (8016070 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 801604a:	f240 211a 	movw	r1, #538	; 0x21a
 801604e:	4a06      	ldr	r2, [pc, #24]	; (8016068 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016050:	e7f0      	b.n	8016034 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8016052:	6870      	ldr	r0, [r6, #4]
 8016054:	4669      	mov	r1, sp
 8016056:	6803      	ldr	r3, [r0, #0]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	4798      	blx	r3
 801605c:	b009      	add	sp, #36	; 0x24
 801605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016062:	bf00      	nop
 8016064:	0802c704 	.word	0x0802c704
 8016068:	0802ca2a 	.word	0x0802ca2a
 801606c:	0802c839 	.word	0x0802c839
 8016070:	0802c73c 	.word	0x0802c73c

08016074 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016074:	b508      	push	{r3, lr}
 8016076:	290d      	cmp	r1, #13
 8016078:	d817      	bhi.n	80160aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801607a:	e8df f001 	tbb	[pc, r1]
 801607e:	090b      	.short	0x090b
 8016080:	0d0d0d07 	.word	0x0d0d0d07
 8016084:	1414140d 	.word	0x1414140d
 8016088:	0d0d1414 	.word	0x0d0d1414
 801608c:	2020      	movs	r0, #32
 801608e:	bd08      	pop	{r3, pc}
 8016090:	2018      	movs	r0, #24
 8016092:	e7fc      	b.n	801608e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016094:	2010      	movs	r0, #16
 8016096:	e7fa      	b.n	801608e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016098:	4b05      	ldr	r3, [pc, #20]	; (80160b0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801609a:	f240 2177 	movw	r1, #631	; 0x277
 801609e:	4a05      	ldr	r2, [pc, #20]	; (80160b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80160a0:	4805      	ldr	r0, [pc, #20]	; (80160b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80160a2:	f010 fa05 	bl	80264b0 <__assert_func>
 80160a6:	2008      	movs	r0, #8
 80160a8:	e7f1      	b.n	801608e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80160aa:	2000      	movs	r0, #0
 80160ac:	e7ef      	b.n	801608e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80160ae:	bf00      	nop
 80160b0:	0802c8b5 	.word	0x0802c8b5
 80160b4:	0802cd43 	.word	0x0802cd43
 80160b8:	0802c839 	.word	0x0802c839

080160bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80160bc:	b570      	push	{r4, r5, r6, lr}
 80160be:	460d      	mov	r5, r1
 80160c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80160c4:	4616      	mov	r6, r2
 80160c6:	461c      	mov	r4, r3
 80160c8:	f7ff ffd4 	bl	8016074 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80160cc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80160d0:	10c0      	asrs	r0, r0, #3
 80160d2:	fb06 5101 	mla	r1, r6, r1, r5
 80160d6:	fb00 4001 	mla	r0, r0, r1, r4
 80160da:	bd70      	pop	{r4, r5, r6, pc}

080160dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80160dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160e0:	b08a      	sub	sp, #40	; 0x28
 80160e2:	f04f 0c00 	mov.w	ip, #0
 80160e6:	4604      	mov	r4, r0
 80160e8:	469a      	mov	sl, r3
 80160ea:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80160ee:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80160f2:	2d0b      	cmp	r5, #11
 80160f4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80160f8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80160fc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016100:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016104:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8016108:	f8cd c014 	str.w	ip, [sp, #20]
 801610c:	d129      	bne.n	8016162 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 801610e:	2080      	movs	r0, #128	; 0x80
 8016110:	9204      	str	r2, [sp, #16]
 8016112:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016116:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801611a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801611e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8016122:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801612a:	4620      	mov	r0, r4
 801612c:	f7ff fef0 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016130:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016134:	4603      	mov	r3, r0
 8016136:	4651      	mov	r1, sl
 8016138:	4620      	mov	r0, r4
 801613a:	e9cd 9800 	strd	r9, r8, [sp]
 801613e:	f7ff ffbd 	bl	80160bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016142:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8016146:	9006      	str	r0, [sp, #24]
 8016148:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801614c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8016150:	b107      	cbz	r7, 8016154 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8016152:	b9d6      	cbnz	r6, 801618a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8016154:	4b17      	ldr	r3, [pc, #92]	; (80161b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016156:	f240 11cf 	movw	r1, #463	; 0x1cf
 801615a:	4a17      	ldr	r2, [pc, #92]	; (80161b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801615c:	4817      	ldr	r0, [pc, #92]	; (80161bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 801615e:	f010 f9a7 	bl	80264b0 <__assert_func>
 8016162:	2d02      	cmp	r5, #2
 8016164:	d108      	bne.n	8016178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8016166:	2bff      	cmp	r3, #255	; 0xff
 8016168:	d104      	bne.n	8016174 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 801616a:	2800      	cmp	r0, #0
 801616c:	bf14      	ite	ne
 801616e:	2040      	movne	r0, #64	; 0x40
 8016170:	2020      	moveq	r0, #32
 8016172:	e7cd      	b.n	8016110 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016174:	2040      	movs	r0, #64	; 0x40
 8016176:	e7cb      	b.n	8016110 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016178:	2bff      	cmp	r3, #255	; 0xff
 801617a:	d104      	bne.n	8016186 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 801617c:	2800      	cmp	r0, #0
 801617e:	bf14      	ite	ne
 8016180:	2004      	movne	r0, #4
 8016182:	2001      	moveq	r0, #1
 8016184:	e7c4      	b.n	8016110 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016186:	2004      	movs	r0, #4
 8016188:	e7c2      	b.n	8016110 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 801618a:	6823      	ldr	r3, [r4, #0]
 801618c:	4620      	mov	r0, r4
 801618e:	9d02      	ldr	r5, [sp, #8]
 8016190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016192:	4798      	blx	r3
 8016194:	4228      	tst	r0, r5
 8016196:	d104      	bne.n	80161a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8016198:	4b09      	ldr	r3, [pc, #36]	; (80161c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 801619a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 801619e:	4a06      	ldr	r2, [pc, #24]	; (80161b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80161a0:	e7dc      	b.n	801615c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 80161a2:	6860      	ldr	r0, [r4, #4]
 80161a4:	a902      	add	r1, sp, #8
 80161a6:	6803      	ldr	r3, [r0, #0]
 80161a8:	685b      	ldr	r3, [r3, #4]
 80161aa:	4798      	blx	r3
 80161ac:	b00a      	add	sp, #40	; 0x28
 80161ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161b2:	bf00      	nop
 80161b4:	0802c687 	.word	0x0802c687
 80161b8:	0802cbdd 	.word	0x0802cbdd
 80161bc:	0802c839 	.word	0x0802c839
 80161c0:	0802c6bf 	.word	0x0802c6bf

080161c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80161c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c8:	b08b      	sub	sp, #44	; 0x2c
 80161ca:	469b      	mov	fp, r3
 80161cc:	4604      	mov	r4, r0
 80161ce:	4692      	mov	sl, r2
 80161d0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80161d4:	2600      	movs	r6, #0
 80161d6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80161da:	4689      	mov	r9, r1
 80161dc:	2fff      	cmp	r7, #255	; 0xff
 80161de:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80161e2:	9605      	str	r6, [sp, #20]
 80161e4:	bf14      	ite	ne
 80161e6:	2308      	movne	r3, #8
 80161e8:	2302      	moveq	r3, #2
 80161ea:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80161ee:	f7ff fe8f 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80161f2:	465a      	mov	r2, fp
 80161f4:	4603      	mov	r3, r0
 80161f6:	4651      	mov	r1, sl
 80161f8:	4620      	mov	r0, r4
 80161fa:	e9cd 8500 	strd	r8, r5, [sp]
 80161fe:	f7ff ff5d 	bl	80160bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016202:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016206:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801620a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801620e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016212:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016216:	f8ad 301e 	strh.w	r3, [sp, #30]
 801621a:	6823      	ldr	r3, [r4, #0]
 801621c:	9d02      	ldr	r5, [sp, #8]
 801621e:	9006      	str	r0, [sp, #24]
 8016220:	4620      	mov	r0, r4
 8016222:	f8ad 6020 	strh.w	r6, [sp, #32]
 8016226:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801622a:	f8cd 9014 	str.w	r9, [sp, #20]
 801622e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016234:	4798      	blx	r3
 8016236:	4228      	tst	r0, r5
 8016238:	d106      	bne.n	8016248 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801623a:	4b07      	ldr	r3, [pc, #28]	; (8016258 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801623c:	f240 212e 	movw	r1, #558	; 0x22e
 8016240:	4a06      	ldr	r2, [pc, #24]	; (801625c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016242:	4807      	ldr	r0, [pc, #28]	; (8016260 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016244:	f010 f934 	bl	80264b0 <__assert_func>
 8016248:	6860      	ldr	r0, [r4, #4]
 801624a:	a902      	add	r1, sp, #8
 801624c:	6803      	ldr	r3, [r0, #0]
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	4798      	blx	r3
 8016252:	b00b      	add	sp, #44	; 0x2c
 8016254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016258:	0802c6bf 	.word	0x0802c6bf
 801625c:	0802ccae 	.word	0x0802ccae
 8016260:	0802c839 	.word	0x0802c839

08016264 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016268:	461f      	mov	r7, r3
 801626a:	4b0b      	ldr	r3, [pc, #44]	; (8016298 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801626c:	460d      	mov	r5, r1
 801626e:	4616      	mov	r6, r2
 8016270:	f8b3 8000 	ldrh.w	r8, [r3]
 8016274:	4604      	mov	r4, r0
 8016276:	f7ef fda1 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 801627a:	6803      	ldr	r3, [r0, #0]
 801627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801627e:	4798      	blx	r3
 8016280:	463b      	mov	r3, r7
 8016282:	4632      	mov	r2, r6
 8016284:	4629      	mov	r1, r5
 8016286:	e9cd 8000 	strd	r8, r0, [sp]
 801628a:	4620      	mov	r0, r4
 801628c:	f7ff ff16 	bl	80160bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016290:	b002      	add	sp, #8
 8016292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016296:	bf00      	nop
 8016298:	2005674a 	.word	0x2005674a

0801629c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a0:	4698      	mov	r8, r3
 80162a2:	b088      	sub	sp, #32
 80162a4:	2300      	movs	r3, #0
 80162a6:	4617      	mov	r7, r2
 80162a8:	4604      	mov	r4, r0
 80162aa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80162ae:	9303      	str	r3, [sp, #12]
 80162b0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80162b4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80162b8:	f8ad 6014 	strh.w	r6, [sp, #20]
 80162bc:	f8ad 5016 	strh.w	r5, [sp, #22]
 80162c0:	e9cd 3100 	strd	r3, r1, [sp]
 80162c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80162c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162cc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80162d0:	f88d 301c 	strb.w	r3, [sp, #28]
 80162d4:	f7ff fe1c 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162d8:	4642      	mov	r2, r8
 80162da:	4603      	mov	r3, r0
 80162dc:	4639      	mov	r1, r7
 80162de:	4620      	mov	r0, r4
 80162e0:	f7ff ffc0 	bl	8016264 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80162e4:	4b16      	ldr	r3, [pc, #88]	; (8016340 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80162e6:	9004      	str	r0, [sp, #16]
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162ee:	f7ef fd65 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 80162f2:	6803      	ldr	r3, [r0, #0]
 80162f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162f6:	4798      	blx	r3
 80162f8:	f88d 001e 	strb.w	r0, [sp, #30]
 80162fc:	f88d 001d 	strb.w	r0, [sp, #29]
 8016300:	b106      	cbz	r6, 8016304 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016302:	b935      	cbnz	r5, 8016312 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016304:	4b0f      	ldr	r3, [pc, #60]	; (8016344 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016306:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 801630a:	4a0f      	ldr	r2, [pc, #60]	; (8016348 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801630c:	480f      	ldr	r0, [pc, #60]	; (801634c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801630e:	f010 f8cf 	bl	80264b0 <__assert_func>
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	4620      	mov	r0, r4
 8016316:	9d00      	ldr	r5, [sp, #0]
 8016318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801631a:	4798      	blx	r3
 801631c:	4228      	tst	r0, r5
 801631e:	d104      	bne.n	801632a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016320:	4b0b      	ldr	r3, [pc, #44]	; (8016350 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016322:	f240 11ed 	movw	r1, #493	; 0x1ed
 8016326:	4a08      	ldr	r2, [pc, #32]	; (8016348 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016328:	e7f0      	b.n	801630c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801632a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801632c:	4669      	mov	r1, sp
 801632e:	6860      	ldr	r0, [r4, #4]
 8016330:	9303      	str	r3, [sp, #12]
 8016332:	6803      	ldr	r3, [r0, #0]
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	4798      	blx	r3
 8016338:	b008      	add	sp, #32
 801633a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801633e:	bf00      	nop
 8016340:	2005674a 	.word	0x2005674a
 8016344:	0802c687 	.word	0x0802c687
 8016348:	0802ca8f 	.word	0x0802ca8f
 801634c:	0802c839 	.word	0x0802c839
 8016350:	0802c6bf 	.word	0x0802c6bf

08016354 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016354:	b570      	push	{r4, r5, r6, lr}
 8016356:	b08a      	sub	sp, #40	; 0x28
 8016358:	4604      	mov	r4, r0
 801635a:	466b      	mov	r3, sp
 801635c:	e883 0006 	stmia.w	r3, {r1, r2}
 8016360:	4b1f      	ldr	r3, [pc, #124]	; (80163e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	b933      	cbnz	r3, 8016374 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016366:	4b1f      	ldr	r3, [pc, #124]	; (80163e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016368:	f240 213f 	movw	r1, #575	; 0x23f
 801636c:	4a1e      	ldr	r2, [pc, #120]	; (80163e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801636e:	481f      	ldr	r0, [pc, #124]	; (80163ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016370:	f010 f89e 	bl	80264b0 <__assert_func>
 8016374:	2300      	movs	r3, #0
 8016376:	f8bd 5000 	ldrh.w	r5, [sp]
 801637a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801637e:	9305      	str	r3, [sp, #20]
 8016380:	2301      	movs	r3, #1
 8016382:	9302      	str	r3, [sp, #8]
 8016384:	6803      	ldr	r3, [r0, #0]
 8016386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016388:	4798      	blx	r3
 801638a:	4632      	mov	r2, r6
 801638c:	4629      	mov	r1, r5
 801638e:	4603      	mov	r3, r0
 8016390:	4620      	mov	r0, r4
 8016392:	f7ff ff67 	bl	8016264 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016396:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016398:	9003      	str	r0, [sp, #12]
 801639a:	9306      	str	r3, [sp, #24]
 801639c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80163a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80163a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80163a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80163ac:	4b10      	ldr	r3, [pc, #64]	; (80163f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80163ae:	881b      	ldrh	r3, [r3, #0]
 80163b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80163b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80163b8:	f7ef fd00 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 80163bc:	6803      	ldr	r3, [r0, #0]
 80163be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c0:	4798      	blx	r3
 80163c2:	23ff      	movs	r3, #255	; 0xff
 80163c4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80163c8:	a902      	add	r1, sp, #8
 80163ca:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80163ce:	6860      	ldr	r0, [r4, #4]
 80163d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80163d4:	6803      	ldr	r3, [r0, #0]
 80163d6:	685b      	ldr	r3, [r3, #4]
 80163d8:	4798      	blx	r3
 80163da:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80163dc:	b00a      	add	sp, #40	; 0x28
 80163de:	bd70      	pop	{r4, r5, r6, pc}
 80163e0:	2005674f 	.word	0x2005674f
 80163e4:	0802c786 	.word	0x0802c786
 80163e8:	0802cb33 	.word	0x0802cb33
 80163ec:	0802c839 	.word	0x0802c839
 80163f0:	2005674a 	.word	0x2005674a

080163f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80163f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163f6:	b08b      	sub	sp, #44	; 0x2c
 80163f8:	4604      	mov	r4, r0
 80163fa:	466d      	mov	r5, sp
 80163fc:	e885 0006 	stmia.w	r5, {r1, r2}
 8016400:	461d      	mov	r5, r3
 8016402:	2300      	movs	r3, #0
 8016404:	f8bd 6000 	ldrh.w	r6, [sp]
 8016408:	9305      	str	r3, [sp, #20]
 801640a:	2301      	movs	r3, #1
 801640c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016410:	9302      	str	r3, [sp, #8]
 8016412:	6803      	ldr	r3, [r0, #0]
 8016414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016416:	4798      	blx	r3
 8016418:	463a      	mov	r2, r7
 801641a:	4631      	mov	r1, r6
 801641c:	4603      	mov	r3, r0
 801641e:	4620      	mov	r0, r4
 8016420:	f7ff ff20 	bl	8016264 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016424:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016428:	9003      	str	r0, [sp, #12]
 801642a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801642e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016432:	9506      	str	r5, [sp, #24]
 8016434:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016438:	4b0d      	ldr	r3, [pc, #52]	; (8016470 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801643a:	881b      	ldrh	r3, [r3, #0]
 801643c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016442:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016446:	f7ef fcb9 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 801644a:	6803      	ldr	r3, [r0, #0]
 801644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801644e:	4798      	blx	r3
 8016450:	23ff      	movs	r3, #255	; 0xff
 8016452:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016456:	a902      	add	r1, sp, #8
 8016458:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801645c:	6860      	ldr	r0, [r4, #4]
 801645e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016462:	6803      	ldr	r3, [r0, #0]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	4798      	blx	r3
 8016468:	4628      	mov	r0, r5
 801646a:	b00b      	add	sp, #44	; 0x2c
 801646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646e:	bf00      	nop
 8016470:	2005674a 	.word	0x2005674a

08016474 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801647a:	4604      	mov	r4, r0
 801647c:	b19b      	cbz	r3, 80164a6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801647e:	2002      	movs	r0, #2
 8016480:	f7ec ff4e 	bl	8003320 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016484:	2300      	movs	r3, #0
 8016486:	4620      	mov	r0, r4
 8016488:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801648c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016490:	6823      	ldr	r3, [r4, #0]
 8016492:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8016496:	f7ff fd3b 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801649a:	4601      	mov	r1, r0
 801649c:	4620      	mov	r0, r4
 801649e:	462b      	mov	r3, r5
 80164a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164a4:	4718      	bx	r3
 80164a6:	bd70      	pop	{r4, r5, r6, pc}

080164a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80164ae:	4604      	mov	r4, r0
 80164b0:	460d      	mov	r5, r1
 80164b2:	428a      	cmp	r2, r1
 80164b4:	d008      	beq.n	80164c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80164b6:	2a01      	cmp	r2, #1
 80164b8:	6803      	ldr	r3, [r0, #0]
 80164ba:	d106      	bne.n	80164ca <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80164bc:	b929      	cbnz	r1, 80164ca <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80164be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80164c2:	4798      	blx	r3
 80164c4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80164c8:	bd38      	pop	{r3, r4, r5, pc}
 80164ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80164ce:	4620      	mov	r0, r4
 80164d0:	e7f7      	b.n	80164c2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

080164d4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80164d4:	4b0d      	ldr	r3, [pc, #52]	; (801650c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80164d6:	b510      	push	{r4, lr}
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	4604      	mov	r4, r0
 80164dc:	b95b      	cbnz	r3, 80164f6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80164de:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80164e2:	2b02      	cmp	r3, #2
 80164e4:	d007      	beq.n	80164f6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80164e6:	6840      	ldr	r0, [r0, #4]
 80164e8:	f000 f93a 	bl	8016760 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80164ec:	b118      	cbz	r0, 80164f6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80164ee:	6862      	ldr	r2, [r4, #4]
 80164f0:	7a53      	ldrb	r3, [r2, #9]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0fc      	beq.n	80164f0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80164f6:	f7ed f95f 	bl	80037b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80164fa:	4620      	mov	r0, r4
 80164fc:	2100      	movs	r1, #0
 80164fe:	f7ff ffd3 	bl	80164a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016502:	4620      	mov	r0, r4
 8016504:	f7ff fd04 	bl	8015f10 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016508:	bd10      	pop	{r4, pc}
 801650a:	bf00      	nop
 801650c:	2005674e 	.word	0x2005674e

08016510 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016510:	4770      	bx	lr

08016512 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016512:	2000      	movs	r0, #0
 8016514:	4770      	bx	lr

08016516 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016516:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801651a:	1a13      	subs	r3, r2, r0
 801651c:	4258      	negs	r0, r3
 801651e:	4158      	adcs	r0, r3
 8016520:	4770      	bx	lr

08016522 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016522:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016526:	1a9b      	subs	r3, r3, r2
 8016528:	2b00      	cmp	r3, #0
 801652a:	bfdc      	itt	le
 801652c:	6882      	ldrle	r2, [r0, #8]
 801652e:	189b      	addle	r3, r3, r2
 8016530:	2b01      	cmp	r3, #1
 8016532:	bfcc      	ite	gt
 8016534:	2000      	movgt	r0, #0
 8016536:	2001      	movle	r0, #1
 8016538:	4770      	bx	lr

0801653a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801653a:	6902      	ldr	r2, [r0, #16]
 801653c:	6840      	ldr	r0, [r0, #4]
 801653e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016542:	4770      	bx	lr

08016544 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016544:	6803      	ldr	r3, [r0, #0]
 8016546:	691b      	ldr	r3, [r3, #16]
 8016548:	4718      	bx	r3

0801654a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801654a:	4770      	bx	lr

0801654c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801654c:	4770      	bx	lr
	...

08016550 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016550:	2301      	movs	r3, #1
 8016552:	b570      	push	{r4, r5, r6, lr}
 8016554:	7203      	strb	r3, [r0, #8]
 8016556:	4604      	mov	r4, r0
 8016558:	6840      	ldr	r0, [r0, #4]
 801655a:	6803      	ldr	r3, [r0, #0]
 801655c:	699b      	ldr	r3, [r3, #24]
 801655e:	4798      	blx	r3
 8016560:	6803      	ldr	r3, [r0, #0]
 8016562:	4605      	mov	r5, r0
 8016564:	2b40      	cmp	r3, #64	; 0x40
 8016566:	d039      	beq.n	80165dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016568:	d815      	bhi.n	8016596 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801656a:	2b04      	cmp	r3, #4
 801656c:	d022      	beq.n	80165b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801656e:	d808      	bhi.n	8016582 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016570:	2b01      	cmp	r3, #1
 8016572:	d033      	beq.n	80165dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016574:	2b02      	cmp	r3, #2
 8016576:	d108      	bne.n	801658a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	4620      	mov	r0, r4
 801657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801657e:	4798      	blx	r3
 8016580:	e025      	b.n	80165ce <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016582:	2b08      	cmp	r3, #8
 8016584:	d01e      	beq.n	80165c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016586:	2b20      	cmp	r3, #32
 8016588:	d028      	beq.n	80165dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801658a:	4b17      	ldr	r3, [pc, #92]	; (80165e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801658c:	218b      	movs	r1, #139	; 0x8b
 801658e:	4a17      	ldr	r2, [pc, #92]	; (80165ec <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016590:	4817      	ldr	r0, [pc, #92]	; (80165f0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016592:	f00f ff8d 	bl	80264b0 <__assert_func>
 8016596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801659a:	d01f      	beq.n	80165dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801659c:	d804      	bhi.n	80165a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801659e:	2b80      	cmp	r3, #128	; 0x80
 80165a0:	d01c      	beq.n	80165dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80165a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165a6:	e7ef      	b.n	8016588 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80165a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80165ac:	d016      	beq.n	80165dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80165ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80165b2:	e7e0      	b.n	8016576 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80165b4:	6823      	ldr	r3, [r4, #0]
 80165b6:	7f01      	ldrb	r1, [r0, #28]
 80165b8:	4620      	mov	r0, r4
 80165ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165bc:	4798      	blx	r3
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165c2:	e006      	b.n	80165d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80165c4:	6823      	ldr	r3, [r4, #0]
 80165c6:	7f01      	ldrb	r1, [r0, #28]
 80165c8:	4620      	mov	r0, r4
 80165ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165cc:	4798      	blx	r3
 80165ce:	6823      	ldr	r3, [r4, #0]
 80165d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165d2:	4629      	mov	r1, r5
 80165d4:	4620      	mov	r0, r4
 80165d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165da:	4718      	bx	r3
 80165dc:	6823      	ldr	r3, [r4, #0]
 80165de:	4620      	mov	r0, r4
 80165e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165e2:	4798      	blx	r3
 80165e4:	e7eb      	b.n	80165be <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80165e6:	bf00      	nop
 80165e8:	0802cd8c 	.word	0x0802cd8c
 80165ec:	0802ce9c 	.word	0x0802ce9c
 80165f0:	0802cdb1 	.word	0x0802cdb1

080165f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80165f4:	b570      	push	{r4, r5, r6, lr}
 80165f6:	4604      	mov	r4, r0
 80165f8:	460e      	mov	r6, r1
 80165fa:	6860      	ldr	r0, [r4, #4]
 80165fc:	6803      	ldr	r3, [r0, #0]
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	4798      	blx	r3
 8016602:	2800      	cmp	r0, #0
 8016604:	d1f9      	bne.n	80165fa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016606:	4d0d      	ldr	r5, [pc, #52]	; (801663c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016608:	6828      	ldr	r0, [r5, #0]
 801660a:	6803      	ldr	r3, [r0, #0]
 801660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801660e:	4798      	blx	r3
 8016610:	f7ed f8ec 	bl	80037ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016614:	6828      	ldr	r0, [r5, #0]
 8016616:	2101      	movs	r1, #1
 8016618:	f7ff ff46 	bl	80164a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801661c:	6860      	ldr	r0, [r4, #4]
 801661e:	4631      	mov	r1, r6
 8016620:	6803      	ldr	r3, [r0, #0]
 8016622:	689b      	ldr	r3, [r3, #8]
 8016624:	4798      	blx	r3
 8016626:	6823      	ldr	r3, [r4, #0]
 8016628:	4620      	mov	r0, r4
 801662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801662c:	4798      	blx	r3
 801662e:	6828      	ldr	r0, [r5, #0]
 8016630:	6803      	ldr	r3, [r0, #0]
 8016632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016638:	4718      	bx	r3
 801663a:	bf00      	nop
 801663c:	20056750 	.word	0x20056750

08016640 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016640:	b508      	push	{r3, lr}
 8016642:	f7ed f8b9 	bl	80037b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801664a:	f7ed b8c3 	b.w	80037d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801664e <_ZN8touchgfx13DMA_Interface5startEv>:
 801664e:	b510      	push	{r4, lr}
 8016650:	4604      	mov	r4, r0
 8016652:	6840      	ldr	r0, [r0, #4]
 8016654:	6803      	ldr	r3, [r0, #0]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	4798      	blx	r3
 801665a:	b948      	cbnz	r0, 8016670 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801665c:	7a63      	ldrb	r3, [r4, #9]
 801665e:	b13b      	cbz	r3, 8016670 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016660:	7a23      	ldrb	r3, [r4, #8]
 8016662:	b92b      	cbnz	r3, 8016670 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016664:	6823      	ldr	r3, [r4, #0]
 8016666:	4620      	mov	r0, r4
 8016668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801666e:	4718      	bx	r3
 8016670:	bd10      	pop	{r4, pc}
	...

08016674 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016674:	b510      	push	{r4, lr}
 8016676:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801667a:	1b12      	subs	r2, r2, r4
 801667c:	2a00      	cmp	r2, #0
 801667e:	bfdc      	itt	le
 8016680:	6883      	ldrle	r3, [r0, #8]
 8016682:	18d2      	addle	r2, r2, r3
 8016684:	2a01      	cmp	r2, #1
 8016686:	dd18      	ble.n	80166ba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016688:	6843      	ldr	r3, [r0, #4]
 801668a:	f101 021c 	add.w	r2, r1, #28
 801668e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016692:	f851 4b04 	ldr.w	r4, [r1], #4
 8016696:	4291      	cmp	r1, r2
 8016698:	f843 4b04 	str.w	r4, [r3], #4
 801669c:	d1f9      	bne.n	8016692 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801669e:	880a      	ldrh	r2, [r1, #0]
 80166a0:	801a      	strh	r2, [r3, #0]
 80166a2:	788a      	ldrb	r2, [r1, #2]
 80166a4:	709a      	strb	r2, [r3, #2]
 80166a6:	68c3      	ldr	r3, [r0, #12]
 80166a8:	6882      	ldr	r2, [r0, #8]
 80166aa:	f3bf 8f5b 	dmb	ish
 80166ae:	3301      	adds	r3, #1
 80166b0:	429a      	cmp	r2, r3
 80166b2:	bfd8      	it	le
 80166b4:	1a9b      	suble	r3, r3, r2
 80166b6:	60c3      	str	r3, [r0, #12]
 80166b8:	bd10      	pop	{r4, pc}
 80166ba:	4b03      	ldr	r3, [pc, #12]	; (80166c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80166bc:	2139      	movs	r1, #57	; 0x39
 80166be:	4a03      	ldr	r2, [pc, #12]	; (80166cc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80166c0:	4803      	ldr	r0, [pc, #12]	; (80166d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80166c2:	f00f fef5 	bl	80264b0 <__assert_func>
 80166c6:	bf00      	nop
 80166c8:	0802cdd7 	.word	0x0802cdd7
 80166cc:	0802cecc 	.word	0x0802cecc
 80166d0:	0802cdb1 	.word	0x0802cdb1

080166d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80166d4:	b510      	push	{r4, lr}
 80166d6:	6803      	ldr	r3, [r0, #0]
 80166d8:	4604      	mov	r4, r0
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	4798      	blx	r3
 80166de:	b128      	cbz	r0, 80166ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80166e0:	4b07      	ldr	r3, [pc, #28]	; (8016700 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80166e2:	213f      	movs	r1, #63	; 0x3f
 80166e4:	4a07      	ldr	r2, [pc, #28]	; (8016704 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80166e6:	4808      	ldr	r0, [pc, #32]	; (8016708 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80166e8:	f00f fee2 	bl	80264b0 <__assert_func>
 80166ec:	6923      	ldr	r3, [r4, #16]
 80166ee:	68a2      	ldr	r2, [r4, #8]
 80166f0:	f3bf 8f5b 	dmb	ish
 80166f4:	3301      	adds	r3, #1
 80166f6:	429a      	cmp	r2, r3
 80166f8:	bfd8      	it	le
 80166fa:	1a9b      	suble	r3, r3, r2
 80166fc:	6123      	str	r3, [r4, #16]
 80166fe:	bd10      	pop	{r4, pc}
 8016700:	0802cdfa 	.word	0x0802cdfa
 8016704:	0802cf1a 	.word	0x0802cf1a
 8016708:	0802cdb1 	.word	0x0802cdb1

0801670c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801670c:	b570      	push	{r4, r5, r6, lr}
 801670e:	4604      	mov	r4, r0
 8016710:	6840      	ldr	r0, [r0, #4]
 8016712:	6803      	ldr	r3, [r0, #0]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	4798      	blx	r3
 8016718:	4605      	mov	r5, r0
 801671a:	b930      	cbnz	r0, 801672a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801671c:	7a23      	ldrb	r3, [r4, #8]
 801671e:	b123      	cbz	r3, 801672a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016720:	6860      	ldr	r0, [r4, #4]
 8016722:	6803      	ldr	r3, [r0, #0]
 8016724:	695b      	ldr	r3, [r3, #20]
 8016726:	4798      	blx	r3
 8016728:	7225      	strb	r5, [r4, #8]
 801672a:	6860      	ldr	r0, [r4, #4]
 801672c:	6803      	ldr	r3, [r0, #0]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4798      	blx	r3
 8016732:	b928      	cbnz	r0, 8016740 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016734:	6823      	ldr	r3, [r4, #0]
 8016736:	4620      	mov	r0, r4
 8016738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801673a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801673e:	4718      	bx	r3
 8016740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016744:	f7ed b85e 	b.w	8003804 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016748 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016748:	b510      	push	{r4, lr}
 801674a:	6082      	str	r2, [r0, #8]
 801674c:	2200      	movs	r2, #0
 801674e:	4c03      	ldr	r4, [pc, #12]	; (801675c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016750:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016754:	e9c0 4100 	strd	r4, r1, [r0]
 8016758:	bd10      	pop	{r4, pc}
 801675a:	bf00      	nop
 801675c:	0802ce80 	.word	0x0802ce80

08016760 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016760:	6840      	ldr	r0, [r0, #4]
 8016762:	6803      	ldr	r3, [r0, #0]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4718      	bx	r3

08016768 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016768:	2001      	movs	r0, #1
 801676a:	4770      	bx	lr

0801676c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801676c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016770:	460d      	mov	r5, r1
 8016772:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016776:	b085      	sub	sp, #20
 8016778:	4690      	mov	r8, r2
 801677a:	4411      	add	r1, r2
 801677c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016780:	4699      	mov	r9, r3
 8016782:	6803      	ldr	r3, [r0, #0]
 8016784:	60c1      	str	r1, [r0, #12]
 8016786:	4604      	mov	r4, r0
 8016788:	990c      	ldr	r1, [sp, #48]	; 0x30
 801678a:	440a      	add	r2, r1
 801678c:	6102      	str	r2, [r0, #16]
 801678e:	68db      	ldr	r3, [r3, #12]
 8016790:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016794:	4798      	blx	r3
 8016796:	2800      	cmp	r0, #0
 8016798:	d03a      	beq.n	8016810 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 801679a:	44c8      	add	r8, r9
 801679c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80167a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80167a4:	4445      	add	r5, r8
 80167a6:	442e      	add	r6, r5
 80167a8:	6823      	ldr	r3, [r4, #0]
 80167aa:	f10d 020f 	add.w	r2, sp, #15
 80167ae:	a903      	add	r1, sp, #12
 80167b0:	4620      	mov	r0, r4
 80167b2:	9200      	str	r2, [sp, #0]
 80167b4:	f10d 020d 	add.w	r2, sp, #13
 80167b8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80167bc:	f10d 030e 	add.w	r3, sp, #14
 80167c0:	47c0      	blx	r8
 80167c2:	b1f0      	cbz	r0, 8016802 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 80167c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80167c8:	7a20      	ldrb	r0, [r4, #8]
 80167ca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80167ce:	4358      	muls	r0, r3
 80167d0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80167d4:	1c43      	adds	r3, r0, #1
 80167d6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80167da:	7838      	ldrb	r0, [r7, #0]
 80167dc:	121b      	asrs	r3, r3, #8
 80167de:	fb10 f003 	smulbb	r0, r0, r3
 80167e2:	b283      	uxth	r3, r0
 80167e4:	1c58      	adds	r0, r3, #1
 80167e6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80167ea:	6823      	ldr	r3, [r4, #0]
 80167ec:	1200      	asrs	r0, r0, #8
 80167ee:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80167f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80167f6:	28ff      	cmp	r0, #255	; 0xff
 80167f8:	d10d      	bne.n	8016816 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 80167fa:	9100      	str	r1, [sp, #0]
 80167fc:	4629      	mov	r1, r5
 80167fe:	4620      	mov	r0, r4
 8016800:	47c0      	blx	r8
 8016802:	68e3      	ldr	r3, [r4, #12]
 8016804:	3503      	adds	r5, #3
 8016806:	3701      	adds	r7, #1
 8016808:	3301      	adds	r3, #1
 801680a:	42ae      	cmp	r6, r5
 801680c:	60e3      	str	r3, [r4, #12]
 801680e:	d8cb      	bhi.n	80167a8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 8016810:	b005      	add	sp, #20
 8016812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016816:	fa1f fc80 	uxth.w	ip, r0
 801681a:	43c0      	mvns	r0, r0
 801681c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016820:	fb12 f20c 	smulbb	r2, r2, ip
 8016824:	b2c0      	uxtb	r0, r0
 8016826:	fb13 f30c 	smulbb	r3, r3, ip
 801682a:	fb0e 2200 	mla	r2, lr, r0, r2
 801682e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016832:	fb11 f10c 	smulbb	r1, r1, ip
 8016836:	fb0e 3300 	mla	r3, lr, r0, r3
 801683a:	f895 e000 	ldrb.w	lr, [r5]
 801683e:	b292      	uxth	r2, r2
 8016840:	b29b      	uxth	r3, r3
 8016842:	fb0e 1000 	mla	r0, lr, r0, r1
 8016846:	1c59      	adds	r1, r3, #1
 8016848:	b280      	uxth	r0, r0
 801684a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801684e:	1c51      	adds	r1, r2, #1
 8016850:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016854:	1c41      	adds	r1, r0, #1
 8016856:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801685a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801685e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016862:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016866:	9000      	str	r0, [sp, #0]
 8016868:	e7c8      	b.n	80167fc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801686a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801686a:	f89d 0000 	ldrb.w	r0, [sp]
 801686e:	704b      	strb	r3, [r1, #1]
 8016870:	7008      	strb	r0, [r1, #0]
 8016872:	708a      	strb	r2, [r1, #2]
 8016874:	4770      	bx	lr

08016876 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016876:	4413      	add	r3, r2
 8016878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801687e:	4419      	add	r1, r3
 8016880:	7a03      	ldrb	r3, [r0, #8]
 8016882:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8016886:	2bff      	cmp	r3, #255	; 0xff
 8016888:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801688c:	440e      	add	r6, r1
 801688e:	d13d      	bne.n	801690c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8016890:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016894:	3103      	adds	r1, #3
 8016896:	7d87      	ldrb	r7, [r0, #22]
 8016898:	2bff      	cmp	r3, #255	; 0xff
 801689a:	d10a      	bne.n	80168b2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 801689c:	f801 7c03 	strb.w	r7, [r1, #-3]
 80168a0:	7d43      	ldrb	r3, [r0, #21]
 80168a2:	f801 3c02 	strb.w	r3, [r1, #-2]
 80168a6:	7d03      	ldrb	r3, [r0, #20]
 80168a8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80168ac:	428e      	cmp	r6, r1
 80168ae:	d8ef      	bhi.n	8016890 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 80168b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	43db      	mvns	r3, r3
 80168b6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80168ba:	fb17 f702 	smulbb	r7, r7, r2
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	fb05 7503 	mla	r5, r5, r3, r7
 80168c4:	b2ad      	uxth	r5, r5
 80168c6:	1c6f      	adds	r7, r5, #1
 80168c8:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80168cc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 80168d0:	fb17 f703 	smulbb	r7, r7, r3
 80168d4:	122d      	asrs	r5, r5, #8
 80168d6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80168da:	7d45      	ldrb	r5, [r0, #21]
 80168dc:	fb05 7502 	mla	r5, r5, r2, r7
 80168e0:	b2ad      	uxth	r5, r5
 80168e2:	1c6f      	adds	r7, r5, #1
 80168e4:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80168e8:	122d      	asrs	r5, r5, #8
 80168ea:	f801 5c02 	strb.w	r5, [r1, #-2]
 80168ee:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80168f2:	7d07      	ldrb	r7, [r0, #20]
 80168f4:	fb15 f303 	smulbb	r3, r5, r3
 80168f8:	fb07 3202 	mla	r2, r7, r2, r3
 80168fc:	b292      	uxth	r2, r2
 80168fe:	1c53      	adds	r3, r2, #1
 8016900:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016904:	1212      	asrs	r2, r2, #8
 8016906:	f801 2c01 	strb.w	r2, [r1, #-1]
 801690a:	e7cf      	b.n	80168ac <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 801690c:	3103      	adds	r1, #3
 801690e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016912:	428e      	cmp	r6, r1
 8016914:	7a03      	ldrb	r3, [r0, #8]
 8016916:	f101 0103 	add.w	r1, r1, #3
 801691a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801691e:	fb02 f303 	mul.w	r3, r2, r3
 8016922:	f103 0201 	add.w	r2, r3, #1
 8016926:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801692a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801692e:	b295      	uxth	r5, r2
 8016930:	ea6f 0202 	mvn.w	r2, r2
 8016934:	b2d3      	uxtb	r3, r2
 8016936:	7d82      	ldrb	r2, [r0, #22]
 8016938:	fb1c fc03 	smulbb	ip, ip, r3
 801693c:	fb02 c205 	mla	r2, r2, r5, ip
 8016940:	b292      	uxth	r2, r2
 8016942:	f102 0c01 	add.w	ip, r2, #1
 8016946:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801694a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801694e:	fb1c fc03 	smulbb	ip, ip, r3
 8016952:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016956:	f801 2c06 	strb.w	r2, [r1, #-6]
 801695a:	7d42      	ldrb	r2, [r0, #21]
 801695c:	fb02 c205 	mla	r2, r2, r5, ip
 8016960:	b292      	uxth	r2, r2
 8016962:	f102 0c01 	add.w	ip, r2, #1
 8016966:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801696a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801696e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016972:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016976:	f890 c014 	ldrb.w	ip, [r0, #20]
 801697a:	fb12 f303 	smulbb	r3, r2, r3
 801697e:	fb0c 3305 	mla	r3, ip, r5, r3
 8016982:	b29b      	uxth	r3, r3
 8016984:	f103 0201 	add.w	r2, r3, #1
 8016988:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801698c:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016990:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016994:	d8bb      	bhi.n	801690e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8016996:	e78b      	b.n	80168b0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08016998 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016998:	b510      	push	{r4, lr}
 801699a:	7d04      	ldrb	r4, [r0, #20]
 801699c:	700c      	strb	r4, [r1, #0]
 801699e:	7d41      	ldrb	r1, [r0, #21]
 80169a0:	7011      	strb	r1, [r2, #0]
 80169a2:	7d82      	ldrb	r2, [r0, #22]
 80169a4:	2001      	movs	r0, #1
 80169a6:	701a      	strb	r2, [r3, #0]
 80169a8:	22ff      	movs	r2, #255	; 0xff
 80169aa:	9b02      	ldr	r3, [sp, #8]
 80169ac:	701a      	strb	r2, [r3, #0]
 80169ae:	bd10      	pop	{r4, pc}

080169b0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80169b0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80169b4:	4770      	bx	lr

080169b6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80169b6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80169ba:	4770      	bx	lr

080169bc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80169bc:	6281      	str	r1, [r0, #40]	; 0x28
 80169be:	4770      	bx	lr

080169c0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80169c0:	b510      	push	{r4, lr}
 80169c2:	2200      	movs	r2, #0
 80169c4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80169c8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80169cc:	8002      	strh	r2, [r0, #0]
 80169ce:	8042      	strh	r2, [r0, #2]
 80169d0:	8084      	strh	r4, [r0, #4]
 80169d2:	80c1      	strh	r1, [r0, #6]
 80169d4:	bd10      	pop	{r4, pc}

080169d6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80169d6:	2200      	movs	r2, #0
 80169d8:	8002      	strh	r2, [r0, #0]
 80169da:	8042      	strh	r2, [r0, #2]
 80169dc:	8082      	strh	r2, [r0, #4]
 80169de:	80c2      	strh	r2, [r0, #6]
 80169e0:	4770      	bx	lr
	...

080169e4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80169e4:	b508      	push	{r3, lr}
 80169e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80169e8:	b928      	cbnz	r0, 80169f6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80169ea:	4b03      	ldr	r3, [pc, #12]	; (80169f8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80169ec:	2126      	movs	r1, #38	; 0x26
 80169ee:	4a03      	ldr	r2, [pc, #12]	; (80169fc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80169f0:	4803      	ldr	r0, [pc, #12]	; (8016a00 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80169f2:	f00f fd5d 	bl	80264b0 <__assert_func>
 80169f6:	bd08      	pop	{r3, pc}
 80169f8:	0802cf8c 	.word	0x0802cf8c
 80169fc:	0802d06c 	.word	0x0802d06c
 8016a00:	0802cfb3 	.word	0x0802cfb3

08016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016a04:	b510      	push	{r4, lr}
 8016a06:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016a0a:	888a      	ldrh	r2, [r1, #4]
 8016a0c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016a10:	4422      	add	r2, r4
 8016a12:	b212      	sxth	r2, r2
 8016a14:	4293      	cmp	r3, r2
 8016a16:	da15      	bge.n	8016a44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016a18:	8882      	ldrh	r2, [r0, #4]
 8016a1a:	4413      	add	r3, r2
 8016a1c:	b21b      	sxth	r3, r3
 8016a1e:	429c      	cmp	r4, r3
 8016a20:	da10      	bge.n	8016a44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016a22:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016a26:	88c9      	ldrh	r1, [r1, #6]
 8016a28:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016a2c:	4419      	add	r1, r3
 8016a2e:	b209      	sxth	r1, r1
 8016a30:	428a      	cmp	r2, r1
 8016a32:	da07      	bge.n	8016a44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016a34:	88c0      	ldrh	r0, [r0, #6]
 8016a36:	4410      	add	r0, r2
 8016a38:	b200      	sxth	r0, r0
 8016a3a:	4283      	cmp	r3, r0
 8016a3c:	bfac      	ite	ge
 8016a3e:	2000      	movge	r0, #0
 8016a40:	2001      	movlt	r0, #1
 8016a42:	bd10      	pop	{r4, pc}
 8016a44:	2000      	movs	r0, #0
 8016a46:	e7fc      	b.n	8016a42 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016a48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a4c:	b08b      	sub	sp, #44	; 0x2c
 8016a4e:	4604      	mov	r4, r0
 8016a50:	6808      	ldr	r0, [r1, #0]
 8016a52:	f04f 0a00 	mov.w	sl, #0
 8016a56:	6849      	ldr	r1, [r1, #4]
 8016a58:	ab04      	add	r3, sp, #16
 8016a5a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8016a5e:	c303      	stmia	r3!, {r0, r1}
 8016a60:	4b35      	ldr	r3, [pc, #212]	; (8016b38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8016a62:	4621      	mov	r1, r4
 8016a64:	a806      	add	r0, sp, #24
 8016a66:	781b      	ldrb	r3, [r3, #0]
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	6823      	ldr	r3, [r4, #0]
 8016a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a6e:	bf1f      	itttt	ne
 8016a70:	f10d 090e 	addne.w	r9, sp, #14
 8016a74:	ae05      	addne	r6, sp, #20
 8016a76:	f10d 0516 	addne.w	r5, sp, #22
 8016a7a:	f10d 0812 	addne.w	r8, sp, #18
 8016a7e:	bf01      	itttt	eq
 8016a80:	f10d 0916 	addeq.w	r9, sp, #22
 8016a84:	f10d 060e 	addeq.w	r6, sp, #14
 8016a88:	ad05      	addeq	r5, sp, #20
 8016a8a:	f10d 0810 	addeq.w	r8, sp, #16
 8016a8e:	4798      	blx	r3
 8016a90:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016a94:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d042      	beq.n	8016b22 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8016a9c:	4293      	cmp	r3, r2
 8016a9e:	bfa8      	it	ge
 8016aa0:	4613      	movge	r3, r2
 8016aa2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016aa6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8016aaa:	2f00      	cmp	r7, #0
 8016aac:	dd21      	ble.n	8016af2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8016aae:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016ab2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8016ab6:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016aba:	f9b9 3000 	ldrsh.w	r3, [r9]
 8016abe:	f8ad 0020 	strh.w	r0, [sp, #32]
 8016ac2:	a808      	add	r0, sp, #32
 8016ac4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8016ac8:	a906      	add	r1, sp, #24
 8016aca:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8016ace:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016ad2:	f7ff ff97 	bl	8016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ad6:	9001      	str	r0, [sp, #4]
 8016ad8:	b1d0      	cbz	r0, 8016b10 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016ada:	6822      	ldr	r2, [r4, #0]
 8016adc:	a908      	add	r1, sp, #32
 8016ade:	4620      	mov	r0, r4
 8016ae0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8016ae2:	4790      	blx	r2
 8016ae4:	b9a0      	cbnz	r0, 8016b10 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016ae6:	107f      	asrs	r7, r7, #1
 8016ae8:	9b01      	ldr	r3, [sp, #4]
 8016aea:	f8ad 700e 	strh.w	r7, [sp, #14]
 8016aee:	469a      	mov	sl, r3
 8016af0:	e7d9      	b.n	8016aa6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016af2:	d10d      	bne.n	8016b10 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016af4:	2301      	movs	r3, #1
 8016af6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016afa:	f8b8 2000 	ldrh.w	r2, [r8]
 8016afe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8016b02:	440a      	add	r2, r1
 8016b04:	f8a8 2000 	strh.w	r2, [r8]
 8016b08:	882b      	ldrh	r3, [r5, #0]
 8016b0a:	1a5b      	subs	r3, r3, r1
 8016b0c:	802b      	strh	r3, [r5, #0]
 8016b0e:	e7bf      	b.n	8016a90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016b10:	f1ba 0f00 	cmp.w	sl, #0
 8016b14:	d0f1      	beq.n	8016afa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8016b16:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8016b1a:	455b      	cmp	r3, fp
 8016b1c:	bf08      	it	eq
 8016b1e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016b20:	e7eb      	b.n	8016afa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8016b22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016b26:	429a      	cmp	r2, r3
 8016b28:	bf04      	itt	eq
 8016b2a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016b2e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016b30:	b00b      	add	sp, #44	; 0x2c
 8016b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b36:	bf00      	nop
 8016b38:	20056748 	.word	0x20056748

08016b3c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b3e:	b085      	sub	sp, #20
 8016b40:	6803      	ldr	r3, [r0, #0]
 8016b42:	4604      	mov	r4, r0
 8016b44:	4601      	mov	r1, r0
 8016b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b48:	4668      	mov	r0, sp
 8016b4a:	4798      	blx	r3
 8016b4c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8016b50:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8016b54:	2300      	movs	r3, #0
 8016b56:	a902      	add	r1, sp, #8
 8016b58:	4668      	mov	r0, sp
 8016b5a:	9302      	str	r3, [sp, #8]
 8016b5c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016b60:	f8ad 500e 	strh.w	r5, [sp, #14]
 8016b64:	f7ff ff4e 	bl	8016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016b68:	b340      	cbz	r0, 8016bbc <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8016b6a:	f9bd 2000 	ldrsh.w	r2, [sp]
 8016b6e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8016b72:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8016b76:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016b7a:	443a      	add	r2, r7
 8016b7c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8016b80:	f8ad 0000 	strh.w	r0, [sp]
 8016b84:	b292      	uxth	r2, r2
 8016b86:	f8ad 1002 	strh.w	r1, [sp, #2]
 8016b8a:	b217      	sxth	r7, r2
 8016b8c:	42be      	cmp	r6, r7
 8016b8e:	bfd8      	it	le
 8016b90:	b2b2      	uxthle	r2, r6
 8016b92:	1a12      	subs	r2, r2, r0
 8016b94:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016b9c:	4413      	add	r3, r2
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	b21a      	sxth	r2, r3
 8016ba2:	4295      	cmp	r5, r2
 8016ba4:	bfd8      	it	le
 8016ba6:	b2ab      	uxthle	r3, r5
 8016ba8:	1a5b      	subs	r3, r3, r1
 8016baa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016bae:	6823      	ldr	r3, [r4, #0]
 8016bb0:	4669      	mov	r1, sp
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	691b      	ldr	r3, [r3, #16]
 8016bb6:	4798      	blx	r3
 8016bb8:	b005      	add	sp, #20
 8016bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bbc:	e9cd 0000 	strd	r0, r0, [sp]
 8016bc0:	e7f5      	b.n	8016bae <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08016bc4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	2101      	movs	r1, #1
 8016bc8:	8082      	strh	r2, [r0, #4]
 8016bca:	80c2      	strh	r2, [r0, #6]
 8016bcc:	8102      	strh	r2, [r0, #8]
 8016bce:	8142      	strh	r2, [r0, #10]
 8016bd0:	8182      	strh	r2, [r0, #12]
 8016bd2:	81c2      	strh	r2, [r0, #14]
 8016bd4:	8202      	strh	r2, [r0, #16]
 8016bd6:	8242      	strh	r2, [r0, #18]
 8016bd8:	61c2      	str	r2, [r0, #28]
 8016bda:	8402      	strh	r2, [r0, #32]
 8016bdc:	8442      	strh	r2, [r0, #34]	; 0x22
 8016bde:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016be2:	6282      	str	r2, [r0, #40]	; 0x28
 8016be4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016be8:	4905      	ldr	r1, [pc, #20]	; (8016c00 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8016bea:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016bee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016bf2:	6001      	str	r1, [r0, #0]
 8016bf4:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016bf6:	22ff      	movs	r2, #255	; 0xff
 8016bf8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016bfc:	4770      	bx	lr
 8016bfe:	bf00      	nop
 8016c00:	0802cff8 	.word	0x0802cff8

08016c04 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016c04:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016c08:	4602      	mov	r2, r0
 8016c0a:	cb03      	ldmia	r3!, {r0, r1}
 8016c0c:	6010      	str	r0, [r2, #0]
 8016c0e:	4610      	mov	r0, r2
 8016c10:	6051      	str	r1, [r2, #4]
 8016c12:	4770      	bx	lr

08016c14 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016c14:	b507      	push	{r0, r1, r2, lr}
 8016c16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016c1a:	ab01      	add	r3, sp, #4
 8016c1c:	6809      	ldr	r1, [r1, #0]
 8016c1e:	6800      	ldr	r0, [r0, #0]
 8016c20:	f003 fc74 	bl	801a50c <_ZN8touchgfx6muldivElllRl>
 8016c24:	b003      	add	sp, #12
 8016c26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016c2c <_ZN8touchgfx7CWRUtil4sineEi>:
 8016c2c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016c30:	fb90 f3f2 	sdiv	r3, r0, r2
 8016c34:	fb03 0312 	mls	r3, r3, r2, r0
 8016c38:	4413      	add	r3, r2
 8016c3a:	fb93 f0f2 	sdiv	r0, r3, r2
 8016c3e:	fb02 3010 	mls	r0, r2, r0, r3
 8016c42:	4b0a      	ldr	r3, [pc, #40]	; (8016c6c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016c44:	285a      	cmp	r0, #90	; 0x5a
 8016c46:	dc02      	bgt.n	8016c4e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016c48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016c4c:	4770      	bx	lr
 8016c4e:	28b4      	cmp	r0, #180	; 0xb4
 8016c50:	dc02      	bgt.n	8016c58 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016c52:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016c56:	e7f7      	b.n	8016c48 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016c58:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016c5c:	bfd4      	ite	le
 8016c5e:	38b4      	suble	r0, #180	; 0xb4
 8016c60:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016c64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016c68:	4240      	negs	r0, r0
 8016c6a:	4770      	bx	lr
 8016c6c:	0802d116 	.word	0x0802d116

08016c70 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016c70:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016c74:	f04f 0300 	mov.w	r3, #0
 8016c78:	bf2c      	ite	cs
 8016c7a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016c7e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016c82:	1899      	adds	r1, r3, r2
 8016c84:	4288      	cmp	r0, r1
 8016c86:	bf24      	itt	cs
 8016c88:	1853      	addcs	r3, r2, r1
 8016c8a:	1a40      	subcs	r0, r0, r1
 8016c8c:	0892      	lsrs	r2, r2, #2
 8016c8e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016c92:	d1f6      	bne.n	8016c82 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016c94:	4618      	mov	r0, r3
 8016c96:	4770      	bx	lr

08016c98 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016c98:	b510      	push	{r4, lr}
 8016c9a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016c9e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016ca2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016ca6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016caa:	139b      	asrs	r3, r3, #14
 8016cac:	13a4      	asrs	r4, r4, #14
 8016cae:	429c      	cmp	r4, r3
 8016cb0:	bfb8      	it	lt
 8016cb2:	461c      	movlt	r4, r3
 8016cb4:	2c01      	cmp	r4, #1
 8016cb6:	dd07      	ble.n	8016cc8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016cb8:	fb91 f1f4 	sdiv	r1, r1, r4
 8016cbc:	fb90 f0f4 	sdiv	r0, r0, r4
 8016cc0:	f7ff ffea 	bl	8016c98 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016cc4:	4360      	muls	r0, r4
 8016cc6:	bd10      	pop	{r4, pc}
 8016cc8:	4340      	muls	r0, r0
 8016cca:	fb01 0001 	mla	r0, r1, r1, r0
 8016cce:	f7ff ffcf 	bl	8016c70 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016cd2:	e7f8      	b.n	8016cc6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08016cd4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016cd4:	2800      	cmp	r0, #0
 8016cd6:	b508      	push	{r3, lr}
 8016cd8:	da05      	bge.n	8016ce6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016cda:	4240      	negs	r0, r0
 8016cdc:	f7ff fffa 	bl	8016cd4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016ce0:	4240      	negs	r0, r0
 8016ce2:	b240      	sxtb	r0, r0
 8016ce4:	bd08      	pop	{r3, pc}
 8016ce6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016cea:	dc11      	bgt.n	8016d10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016cec:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016cf0:	dd09      	ble.n	8016d06 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016cf2:	4340      	muls	r0, r0
 8016cf4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016cf8:	f7ff ffba 	bl	8016c70 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016cfc:	f7ff ffea 	bl	8016cd4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016d00:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016d04:	e7ed      	b.n	8016ce2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016d06:	3003      	adds	r0, #3
 8016d08:	4b02      	ldr	r3, [pc, #8]	; (8016d14 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016d0a:	10c0      	asrs	r0, r0, #3
 8016d0c:	5618      	ldrsb	r0, [r3, r0]
 8016d0e:	e7e9      	b.n	8016ce4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016d10:	2000      	movs	r0, #0
 8016d12:	e7e7      	b.n	8016ce4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016d14:	0802d0ba 	.word	0x0802d0ba

08016d18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016d18:	1e03      	subs	r3, r0, #0
 8016d1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d1c:	460c      	mov	r4, r1
 8016d1e:	4615      	mov	r5, r2
 8016d20:	db01      	blt.n	8016d26 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016d22:	2900      	cmp	r1, #0
 8016d24:	da06      	bge.n	8016d34 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016d26:	4b10      	ldr	r3, [pc, #64]	; (8016d68 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8016d28:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8016d2c:	4a0f      	ldr	r2, [pc, #60]	; (8016d6c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016d2e:	4810      	ldr	r0, [pc, #64]	; (8016d70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016d30:	f00f fbbe 	bl	80264b0 <__assert_func>
 8016d34:	4299      	cmp	r1, r3
 8016d36:	dd07      	ble.n	8016d48 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8016d38:	4619      	mov	r1, r3
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	f7ff ffec 	bl	8016d18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016d40:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016d44:	b003      	add	sp, #12
 8016d46:	bd30      	pop	{r4, r5, pc}
 8016d48:	f7ff ffa6 	bl	8016c98 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016d4c:	6028      	str	r0, [r5, #0]
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	d0f8      	beq.n	8016d44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8016d52:	4602      	mov	r2, r0
 8016d54:	ab01      	add	r3, sp, #4
 8016d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f003 fbd6 	bl	801a50c <_ZN8touchgfx6muldivElllRl>
 8016d60:	f7ff ffb8 	bl	8016cd4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016d64:	e7ee      	b.n	8016d44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8016d66:	bf00      	nop
 8016d68:	0802d1cc 	.word	0x0802d1cc
 8016d6c:	0802d290 	.word	0x0802d290
 8016d70:	0802d1dd 	.word	0x0802d1dd

08016d74 <_ZN8touchgfx4LineC1Ev>:
 8016d74:	b510      	push	{r4, lr}
 8016d76:	4604      	mov	r4, r0
 8016d78:	f7ff ff24 	bl	8016bc4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016d7c:	4b0c      	ldr	r3, [pc, #48]	; (8016db0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016d7e:	2220      	movs	r2, #32
 8016d80:	4620      	mov	r0, r4
 8016d82:	6023      	str	r3, [r4, #0]
 8016d84:	2300      	movs	r3, #0
 8016d86:	6422      	str	r2, [r4, #64]	; 0x40
 8016d88:	2212      	movs	r2, #18
 8016d8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016d8e:	6722      	str	r2, [r4, #112]	; 0x70
 8016d90:	60a3      	str	r3, [r4, #8]
 8016d92:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016d96:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016d9a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d9e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8016da2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8016da6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8016daa:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8016dae:	bd10      	pop	{r4, pc}
 8016db0:	0802d21c 	.word	0x0802d21c

08016db4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8016dba:	4604      	mov	r4, r0
 8016dbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016dbe:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016dc0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016dc2:	1af6      	subs	r6, r6, r3
 8016dc4:	eba5 0502 	sub.w	r5, r5, r2
 8016dc8:	f040 808e 	bne.w	8016ee8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 8016dcc:	b955      	cbnz	r5, 8016de4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 8016dce:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016dd2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016dd6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016dda:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016dde:	b003      	add	sp, #12
 8016de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016de4:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8016de8:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8016dec:	f04f 0802 	mov.w	r8, #2
 8016df0:	463a      	mov	r2, r7
 8016df2:	4629      	mov	r1, r5
 8016df4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016df6:	f003 fba8 	bl	801a54a <_ZN8touchgfx6muldivElll>
 8016dfa:	4631      	mov	r1, r6
 8016dfc:	463a      	mov	r2, r7
 8016dfe:	fb90 f5f8 	sdiv	r5, r0, r8
 8016e02:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016e04:	f003 fba1 	bl	801a54a <_ZN8touchgfx6muldivElll>
 8016e08:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016e0c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8016e0e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8016e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e12:	fb90 f0f8 	sdiv	r0, r0, r8
 8016e16:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016e1a:	eba8 0305 	sub.w	r3, r8, r5
 8016e1e:	f1ba 0f00 	cmp.w	sl, #0
 8016e22:	f040 80b8 	bne.w	8016f96 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8016e26:	64a3      	str	r3, [r4, #72]	; 0x48
 8016e28:	1843      	adds	r3, r0, r1
 8016e2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8016e2c:	1b7b      	subs	r3, r7, r5
 8016e2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016e30:	1983      	adds	r3, r0, r6
 8016e32:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016e34:	19eb      	adds	r3, r5, r7
 8016e36:	6523      	str	r3, [r4, #80]	; 0x50
 8016e38:	1a33      	subs	r3, r6, r0
 8016e3a:	6623      	str	r3, [r4, #96]	; 0x60
 8016e3c:	eb05 0308 	add.w	r3, r5, r8
 8016e40:	6563      	str	r3, [r4, #84]	; 0x54
 8016e42:	1a0b      	subs	r3, r1, r0
 8016e44:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8016e48:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8016e4c:	6663      	str	r3, [r4, #100]	; 0x64
 8016e4e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016e52:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8016e56:	4672      	mov	r2, lr
 8016e58:	9301      	str	r3, [sp, #4]
 8016e5a:	f8cd c000 	str.w	ip, [sp]
 8016e5e:	f859 bb04 	ldr.w	fp, [r9], #4
 8016e62:	9b00      	ldr	r3, [sp, #0]
 8016e64:	45de      	cmp	lr, fp
 8016e66:	bfa8      	it	ge
 8016e68:	46de      	movge	lr, fp
 8016e6a:	455a      	cmp	r2, fp
 8016e6c:	bfb8      	it	lt
 8016e6e:	465a      	movlt	r2, fp
 8016e70:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016e74:	45dc      	cmp	ip, fp
 8016e76:	bfa8      	it	ge
 8016e78:	46dc      	movge	ip, fp
 8016e7a:	455b      	cmp	r3, fp
 8016e7c:	bfb8      	it	lt
 8016e7e:	465b      	movlt	r3, fp
 8016e80:	9300      	str	r3, [sp, #0]
 8016e82:	9b01      	ldr	r3, [sp, #4]
 8016e84:	454b      	cmp	r3, r9
 8016e86:	d1ea      	bne.n	8016e5e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 8016e88:	f04f 0920 	mov.w	r9, #32
 8016e8c:	9b00      	ldr	r3, [sp, #0]
 8016e8e:	f1ba 0f01 	cmp.w	sl, #1
 8016e92:	fb92 f2f9 	sdiv	r2, r2, r9
 8016e96:	fb93 f3f9 	sdiv	r3, r3, r9
 8016e9a:	fb9e fef9 	sdiv	lr, lr, r9
 8016e9e:	fb9c fcf9 	sdiv	ip, ip, r9
 8016ea2:	f102 0201 	add.w	r2, r2, #1
 8016ea6:	f103 0301 	add.w	r3, r3, #1
 8016eaa:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 8016eae:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 8016eb2:	eba2 0e0e 	sub.w	lr, r2, lr
 8016eb6:	eba3 0c0c 	sub.w	ip, r3, ip
 8016eba:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 8016ebe:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 8016ec2:	d18c      	bne.n	8016dde <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8016ec4:	eba8 0305 	sub.w	r3, r8, r5
 8016ec8:	64a3      	str	r3, [r4, #72]	; 0x48
 8016eca:	1843      	adds	r3, r0, r1
 8016ecc:	65a3      	str	r3, [r4, #88]	; 0x58
 8016ece:	1b7b      	subs	r3, r7, r5
 8016ed0:	442f      	add	r7, r5
 8016ed2:	4445      	add	r5, r8
 8016ed4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016ed6:	1983      	adds	r3, r0, r6
 8016ed8:	1a36      	subs	r6, r6, r0
 8016eda:	1a08      	subs	r0, r1, r0
 8016edc:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016ede:	6527      	str	r7, [r4, #80]	; 0x50
 8016ee0:	6626      	str	r6, [r4, #96]	; 0x60
 8016ee2:	6565      	str	r5, [r4, #84]	; 0x54
 8016ee4:	6660      	str	r0, [r4, #100]	; 0x64
 8016ee6:	e77a      	b.n	8016dde <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8016ee8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016eec:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016ef0:	2d00      	cmp	r5, #0
 8016ef2:	f43f af7b 	beq.w	8016dec <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8016ef6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016efa:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016efe:	fb93 f2f7 	sdiv	r2, r3, r7
 8016f02:	fb07 3312 	mls	r3, r7, r2, r3
 8016f06:	b34b      	cbz	r3, 8016f5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8016f08:	fb97 f2f3 	sdiv	r2, r7, r3
 8016f0c:	fb03 7712 	mls	r7, r3, r2, r7
 8016f10:	2f00      	cmp	r7, #0
 8016f12:	d1f4      	bne.n	8016efe <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8016f14:	2b01      	cmp	r3, #1
 8016f16:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016f1a:	bf18      	it	ne
 8016f1c:	fb96 f6f3 	sdivne	r6, r6, r3
 8016f20:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016f24:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016f28:	bf18      	it	ne
 8016f2a:	fb95 f5f3 	sdivne	r5, r5, r3
 8016f2e:	4291      	cmp	r1, r2
 8016f30:	dd16      	ble.n	8016f60 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8016f32:	2d00      	cmp	r5, #0
 8016f34:	da47      	bge.n	8016fc6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8016f36:	4b26      	ldr	r3, [pc, #152]	; (8016fd0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8016f38:	429d      	cmp	r5, r3
 8016f3a:	da25      	bge.n	8016f88 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 8016f3c:	426a      	negs	r2, r5
 8016f3e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016f42:	fb91 f1f3 	sdiv	r1, r1, r3
 8016f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f4a:	4299      	cmp	r1, r3
 8016f4c:	bfcc      	ite	gt
 8016f4e:	1c4b      	addgt	r3, r1, #1
 8016f50:	3301      	addle	r3, #1
 8016f52:	fb96 f6f3 	sdiv	r6, r6, r3
 8016f56:	fb95 f5f3 	sdiv	r5, r5, r3
 8016f5a:	e00f      	b.n	8016f7c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016f5c:	463b      	mov	r3, r7
 8016f5e:	e7d9      	b.n	8016f14 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8016f60:	2d00      	cmp	r5, #0
 8016f62:	fb92 f2f1 	sdiv	r2, r2, r1
 8016f66:	da11      	bge.n	8016f8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8016f68:	4269      	negs	r1, r5
 8016f6a:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016f6e:	fb93 f3f1 	sdiv	r3, r3, r1
 8016f72:	429a      	cmp	r2, r3
 8016f74:	bfa8      	it	ge
 8016f76:	461a      	movge	r2, r3
 8016f78:	4356      	muls	r6, r2
 8016f7a:	4355      	muls	r5, r2
 8016f7c:	4629      	mov	r1, r5
 8016f7e:	4630      	mov	r0, r6
 8016f80:	f7ff fe8a 	bl	8016c98 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016f84:	4607      	mov	r7, r0
 8016f86:	e731      	b.n	8016dec <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8016f88:	2200      	movs	r2, #0
 8016f8a:	e7ed      	b.n	8016f68 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 8016f8c:	4629      	mov	r1, r5
 8016f8e:	e7ec      	b.n	8016f6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8016f90:	4629      	mov	r1, r5
 8016f92:	2200      	movs	r2, #0
 8016f94:	e7e9      	b.n	8016f6a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8016f96:	1a1b      	subs	r3, r3, r0
 8016f98:	64a3      	str	r3, [r4, #72]	; 0x48
 8016f9a:	1843      	adds	r3, r0, r1
 8016f9c:	1b5b      	subs	r3, r3, r5
 8016f9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8016fa0:	1b7b      	subs	r3, r7, r5
 8016fa2:	4403      	add	r3, r0
 8016fa4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016fa6:	1983      	adds	r3, r0, r6
 8016fa8:	442b      	add	r3, r5
 8016faa:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016fac:	19eb      	adds	r3, r5, r7
 8016fae:	4403      	add	r3, r0
 8016fb0:	6523      	str	r3, [r4, #80]	; 0x50
 8016fb2:	1a33      	subs	r3, r6, r0
 8016fb4:	442b      	add	r3, r5
 8016fb6:	6623      	str	r3, [r4, #96]	; 0x60
 8016fb8:	eb05 0308 	add.w	r3, r5, r8
 8016fbc:	1a1b      	subs	r3, r3, r0
 8016fbe:	6563      	str	r3, [r4, #84]	; 0x54
 8016fc0:	1a0b      	subs	r3, r1, r0
 8016fc2:	1b5b      	subs	r3, r3, r5
 8016fc4:	e73e      	b.n	8016e44 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 8016fc6:	4295      	cmp	r5, r2
 8016fc8:	dde2      	ble.n	8016f90 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 8016fca:	462a      	mov	r2, r5
 8016fcc:	e7b7      	b.n	8016f3e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 8016fce:	bf00      	nop
 8016fd0:	ffff4afc 	.word	0xffff4afc

08016fd4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016fd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016fd6:	428b      	cmp	r3, r1
 8016fd8:	d102      	bne.n	8016fe0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016fda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	d003      	beq.n	8016fe8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016fe0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016fe4:	f7ff bee6 	b.w	8016db4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016fe8:	4770      	bx	lr

08016fea <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016fea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016fec:	428b      	cmp	r3, r1
 8016fee:	d102      	bne.n	8016ff6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016ff0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016ff2:	4293      	cmp	r3, r2
 8016ff4:	d003      	beq.n	8016ffe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016ff6:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016ffa:	f7ff bedb 	b.w	8016db4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016ffe:	4770      	bx	lr

08017000 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017000:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017004:	f7ff bed6 	b.w	8016db4 <_ZN8touchgfx4Line17updateCachedShapeEv>

08017008 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801700c:	b0b3      	sub	sp, #204	; 0xcc
 801700e:	4604      	mov	r4, r0
 8017010:	460a      	mov	r2, r1
 8017012:	4601      	mov	r1, r0
 8017014:	a803      	add	r0, sp, #12
 8017016:	ad32      	add	r5, sp, #200	; 0xc8
 8017018:	f00d fd48 	bl	8024aac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801701c:	2300      	movs	r3, #0
 801701e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017020:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8017024:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017026:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017028:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801702a:	1ac0      	subs	r0, r0, r3
 801702c:	eba1 0102 	sub.w	r1, r1, r2
 8017030:	d43c      	bmi.n	80170ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017032:	2900      	cmp	r1, #0
 8017034:	462a      	mov	r2, r5
 8017036:	db33      	blt.n	80170a0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017038:	f7ff fe6e 	bl	8016d18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801703c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017040:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017042:	a803      	add	r0, sp, #12
 8017044:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017046:	f00d fefc 	bl	8024e42 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801704a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801704c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801704e:	a803      	add	r0, sp, #12
 8017050:	f00d fe86 	bl	8024d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017054:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017058:	2b01      	cmp	r3, #1
 801705a:	d137      	bne.n	80170cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801705c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801705e:	2eb3      	cmp	r6, #179	; 0xb3
 8017060:	dc34      	bgt.n	80170cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017062:	eba7 0906 	sub.w	r9, r7, r6
 8017066:	4648      	mov	r0, r9
 8017068:	f7ff fde0 	bl	8016c2c <_ZN8touchgfx7CWRUtil4sineEi>
 801706c:	a901      	add	r1, sp, #4
 801706e:	9001      	str	r0, [sp, #4]
 8017070:	4628      	mov	r0, r5
 8017072:	f7ff fdcf 	bl	8016c14 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017076:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017078:	eb00 0801 	add.w	r8, r0, r1
 801707c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017080:	f7ff fdd4 	bl	8016c2c <_ZN8touchgfx7CWRUtil4sineEi>
 8017084:	a902      	add	r1, sp, #8
 8017086:	9002      	str	r0, [sp, #8]
 8017088:	4628      	mov	r0, r5
 801708a:	f7ff fdc3 	bl	8016c14 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801708e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017090:	4641      	mov	r1, r8
 8017092:	1a12      	subs	r2, r2, r0
 8017094:	a803      	add	r0, sp, #12
 8017096:	f00d fe63 	bl	8024d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801709a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801709c:	441e      	add	r6, r3
 801709e:	e7de      	b.n	801705e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80170a0:	4249      	negs	r1, r1
 80170a2:	f7ff fe39 	bl	8016d18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80170a6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80170aa:	e7c9      	b.n	8017040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80170ac:	2900      	cmp	r1, #0
 80170ae:	f1c0 0000 	rsb	r0, r0, #0
 80170b2:	462a      	mov	r2, r5
 80170b4:	db04      	blt.n	80170c0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 80170b6:	f7ff fe2f 	bl	8016d18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80170ba:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 80170be:	e7bf      	b.n	8017040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80170c0:	4249      	negs	r1, r1
 80170c2:	f7ff fe29 	bl	8016d18 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80170c6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 80170ca:	e7b9      	b.n	8017040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80170cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80170ce:	a803      	add	r0, sp, #12
 80170d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80170d2:	f00d fe45 	bl	8024d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80170d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80170d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80170da:	a803      	add	r0, sp, #12
 80170dc:	f00d fe40 	bl	8024d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80170e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80170e4:	2b01      	cmp	r3, #1
 80170e6:	d123      	bne.n	8017130 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80170e8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80170ea:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 80170ee:	2e00      	cmp	r6, #0
 80170f0:	dd1e      	ble.n	8017130 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80170f2:	eb06 0907 	add.w	r9, r6, r7
 80170f6:	4648      	mov	r0, r9
 80170f8:	f7ff fd98 	bl	8016c2c <_ZN8touchgfx7CWRUtil4sineEi>
 80170fc:	a901      	add	r1, sp, #4
 80170fe:	9001      	str	r0, [sp, #4]
 8017100:	4628      	mov	r0, r5
 8017102:	f7ff fd87 	bl	8016c14 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017106:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017108:	eb00 0801 	add.w	r8, r0, r1
 801710c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017110:	f7ff fd8c 	bl	8016c2c <_ZN8touchgfx7CWRUtil4sineEi>
 8017114:	a902      	add	r1, sp, #8
 8017116:	9002      	str	r0, [sp, #8]
 8017118:	4628      	mov	r0, r5
 801711a:	f7ff fd7b 	bl	8016c14 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801711e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017120:	4641      	mov	r1, r8
 8017122:	1a12      	subs	r2, r2, r0
 8017124:	a803      	add	r0, sp, #12
 8017126:	f00d fe1b 	bl	8024d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801712a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801712c:	1af6      	subs	r6, r6, r3
 801712e:	e7de      	b.n	80170ee <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017130:	21ff      	movs	r1, #255	; 0xff
 8017132:	a803      	add	r0, sp, #12
 8017134:	f00d ff89 	bl	802504a <_ZN8touchgfx6Canvas6renderEh>
 8017138:	4604      	mov	r4, r0
 801713a:	a803      	add	r0, sp, #12
 801713c:	f00d ffc4 	bl	80250c8 <_ZN8touchgfx6CanvasD1Ev>
 8017140:	4620      	mov	r0, r4
 8017142:	b033      	add	sp, #204	; 0xcc
 8017144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017148 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017148:	2200      	movs	r2, #0
 801714a:	8002      	strh	r2, [r0, #0]
 801714c:	8042      	strh	r2, [r0, #2]
 801714e:	8082      	strh	r2, [r0, #4]
 8017150:	80c2      	strh	r2, [r0, #6]
 8017152:	4770      	bx	lr

08017154 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017154:	b570      	push	{r4, r5, r6, lr}
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	4604      	mov	r4, r0
 801715a:	4615      	mov	r5, r2
 801715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801715e:	4798      	blx	r3
 8017160:	6823      	ldr	r3, [r4, #0]
 8017162:	4629      	mov	r1, r5
 8017164:	4620      	mov	r0, r4
 8017166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801716c:	4718      	bx	r3
	...

08017170 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017176:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017178:	4299      	cmp	r1, r3
 801717a:	d029      	beq.n	80171d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801717c:	4b15      	ldr	r3, [pc, #84]	; (80171d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	b92b      	cbnz	r3, 801718e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8017182:	4b15      	ldr	r3, [pc, #84]	; (80171d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017184:	21ae      	movs	r1, #174	; 0xae
 8017186:	4a15      	ldr	r2, [pc, #84]	; (80171dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017188:	4815      	ldr	r0, [pc, #84]	; (80171e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801718a:	f00f f991 	bl	80264b0 <__assert_func>
 801718e:	4a15      	ldr	r2, [pc, #84]	; (80171e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8017190:	8812      	ldrh	r2, [r2, #0]
 8017192:	428a      	cmp	r2, r1
 8017194:	d803      	bhi.n	801719e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8017196:	4b14      	ldr	r3, [pc, #80]	; (80171e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017198:	21af      	movs	r1, #175	; 0xaf
 801719a:	4a10      	ldr	r2, [pc, #64]	; (80171dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801719c:	e7f4      	b.n	8017188 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801719e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80171a2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80171a6:	4b11      	ldr	r3, [pc, #68]	; (80171ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80171a8:	7854      	ldrb	r4, [r2, #1]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80171b0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80171b4:	682b      	ldr	r3, [r5, #0]
 80171b6:	69de      	ldr	r6, [r3, #28]
 80171b8:	4b0d      	ldr	r3, [pc, #52]	; (80171f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80171ba:	6818      	ldr	r0, [r3, #0]
 80171bc:	f7f1 fd46 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 80171c0:	2300      	movs	r3, #0
 80171c2:	4602      	mov	r2, r0
 80171c4:	4621      	mov	r1, r4
 80171c6:	9300      	str	r3, [sp, #0]
 80171c8:	4628      	mov	r0, r5
 80171ca:	47b0      	blx	r6
 80171cc:	b002      	add	sp, #8
 80171ce:	bd70      	pop	{r4, r5, r6, pc}
 80171d0:	2000      	movs	r0, #0
 80171d2:	e7fb      	b.n	80171cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80171d4:	200567c0 	.word	0x200567c0
 80171d8:	0802d2fb 	.word	0x0802d2fb
 80171dc:	0802d430 	.word	0x0802d430
 80171e0:	0802d33d 	.word	0x0802d33d
 80171e4:	200567c4 	.word	0x200567c4
 80171e8:	0802d366 	.word	0x0802d366
 80171ec:	200567c8 	.word	0x200567c8
 80171f0:	200567cc 	.word	0x200567cc

080171f4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80171f4:	b570      	push	{r4, r5, r6, lr}
 80171f6:	6803      	ldr	r3, [r0, #0]
 80171f8:	4604      	mov	r4, r0
 80171fa:	b28d      	uxth	r5, r1
 80171fc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80171fe:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8017200:	4b10      	ldr	r3, [pc, #64]	; (8017244 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	b92b      	cbnz	r3, 8017212 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017206:	4b10      	ldr	r3, [pc, #64]	; (8017248 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017208:	21ae      	movs	r1, #174	; 0xae
 801720a:	4a10      	ldr	r2, [pc, #64]	; (801724c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801720c:	4810      	ldr	r0, [pc, #64]	; (8017250 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801720e:	f00f f94f 	bl	80264b0 <__assert_func>
 8017212:	4910      	ldr	r1, [pc, #64]	; (8017254 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8017214:	8809      	ldrh	r1, [r1, #0]
 8017216:	4291      	cmp	r1, r2
 8017218:	d803      	bhi.n	8017222 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801721a:	4b0f      	ldr	r3, [pc, #60]	; (8017258 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801721c:	21af      	movs	r1, #175	; 0xaf
 801721e:	4a0b      	ldr	r2, [pc, #44]	; (801724c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017220:	e7f4      	b.n	801720c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8017222:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017226:	4b0d      	ldr	r3, [pc, #52]	; (801725c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801722e:	6803      	ldr	r3, [r0, #0]
 8017230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017232:	4798      	blx	r3
 8017234:	1a29      	subs	r1, r5, r0
 8017236:	4633      	mov	r3, r6
 8017238:	4620      	mov	r0, r4
 801723a:	b209      	sxth	r1, r1
 801723c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017240:	4718      	bx	r3
 8017242:	bf00      	nop
 8017244:	200567c0 	.word	0x200567c0
 8017248:	0802d2fb 	.word	0x0802d2fb
 801724c:	0802d430 	.word	0x0802d430
 8017250:	0802d33d 	.word	0x0802d33d
 8017254:	200567c4 	.word	0x200567c4
 8017258:	0802d366 	.word	0x0802d366
 801725c:	200567c8 	.word	0x200567c8

08017260 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017268:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801726a:	b08c      	sub	sp, #48	; 0x30
 801726c:	4604      	mov	r4, r0
 801726e:	4293      	cmp	r3, r2
 8017270:	4688      	mov	r8, r1
 8017272:	d05f      	beq.n	8017334 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017274:	4e31      	ldr	r6, [pc, #196]	; (801733c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017276:	6832      	ldr	r2, [r6, #0]
 8017278:	b92a      	cbnz	r2, 8017286 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801727a:	4b31      	ldr	r3, [pc, #196]	; (8017340 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801727c:	21ae      	movs	r1, #174	; 0xae
 801727e:	4a31      	ldr	r2, [pc, #196]	; (8017344 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017280:	4831      	ldr	r0, [pc, #196]	; (8017348 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8017282:	f00f f915 	bl	80264b0 <__assert_func>
 8017286:	4d31      	ldr	r5, [pc, #196]	; (801734c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017288:	8829      	ldrh	r1, [r5, #0]
 801728a:	4299      	cmp	r1, r3
 801728c:	d803      	bhi.n	8017296 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801728e:	4b30      	ldr	r3, [pc, #192]	; (8017350 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8017290:	21af      	movs	r1, #175	; 0xaf
 8017292:	4a2c      	ldr	r2, [pc, #176]	; (8017344 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017294:	e7f4      	b.n	8017280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8017296:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801729a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801729e:	4b2d      	ldr	r3, [pc, #180]	; (8017354 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80172a6:	2a00      	cmp	r2, #0
 80172a8:	d044      	beq.n	8017334 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80172aa:	784b      	ldrb	r3, [r1, #1]
 80172ac:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80172b0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80172b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80172b8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80172bc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80172c0:	4b25      	ldr	r3, [pc, #148]	; (8017358 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80172c2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80172cc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80172d0:	9207      	str	r2, [sp, #28]
 80172d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80172d4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80172d8:	f88d a020 	strb.w	sl, [sp, #32]
 80172dc:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80172e0:	9009      	str	r0, [sp, #36]	; 0x24
 80172e2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80172e6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80172ea:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80172ee:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80172f2:	b10a      	cbz	r2, 80172f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80172f4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80172f6:	b907      	cbnz	r7, 80172fa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80172f8:	689f      	ldr	r7, [r3, #8]
 80172fa:	f10d 0914 	add.w	r9, sp, #20
 80172fe:	4621      	mov	r1, r4
 8017300:	4648      	mov	r0, r9
 8017302:	f002 fff5 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017306:	6833      	ldr	r3, [r6, #0]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d0b6      	beq.n	801727a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801730c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801730e:	882b      	ldrh	r3, [r5, #0]
 8017310:	428b      	cmp	r3, r1
 8017312:	d9bc      	bls.n	801728e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8017314:	4b11      	ldr	r3, [pc, #68]	; (801735c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8017316:	6818      	ldr	r0, [r3, #0]
 8017318:	f7f1 fc98 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 801731c:	2300      	movs	r3, #0
 801731e:	9001      	str	r0, [sp, #4]
 8017320:	4638      	mov	r0, r7
 8017322:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017326:	ab07      	add	r3, sp, #28
 8017328:	9300      	str	r3, [sp, #0]
 801732a:	4643      	mov	r3, r8
 801732c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017330:	f7f1 fc1d 	bl	8008b6e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017334:	b00c      	add	sp, #48	; 0x30
 8017336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801733a:	bf00      	nop
 801733c:	200567c0 	.word	0x200567c0
 8017340:	0802d2fb 	.word	0x0802d2fb
 8017344:	0802d430 	.word	0x0802d430
 8017348:	0802d33d 	.word	0x0802d33d
 801734c:	200567c4 	.word	0x200567c4
 8017350:	0802d366 	.word	0x0802d366
 8017354:	200567c8 	.word	0x200567c8
 8017358:	20056750 	.word	0x20056750
 801735c:	200567cc 	.word	0x200567cc

08017360 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017360:	b40e      	push	{r1, r2, r3}
 8017362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801736a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801736c:	b09a      	sub	sp, #104	; 0x68
 801736e:	4605      	mov	r5, r0
 8017370:	4293      	cmp	r3, r2
 8017372:	d067      	beq.n	8017444 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8017374:	aa24      	add	r2, sp, #144	; 0x90
 8017376:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8017458 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 801737a:	9202      	str	r2, [sp, #8]
 801737c:	f8da 2000 	ldr.w	r2, [sl]
 8017380:	b92a      	cbnz	r2, 801738e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8017382:	4b31      	ldr	r3, [pc, #196]	; (8017448 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017384:	21ae      	movs	r1, #174	; 0xae
 8017386:	4a31      	ldr	r2, [pc, #196]	; (801744c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8017388:	4831      	ldr	r0, [pc, #196]	; (8017450 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801738a:	f00f f891 	bl	80264b0 <__assert_func>
 801738e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 801745c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8017392:	f8b8 1000 	ldrh.w	r1, [r8]
 8017396:	4299      	cmp	r1, r3
 8017398:	d803      	bhi.n	80173a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801739a:	4b2e      	ldr	r3, [pc, #184]	; (8017454 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801739c:	21af      	movs	r1, #175	; 0xaf
 801739e:	4a2b      	ldr	r2, [pc, #172]	; (801744c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80173a0:	e7f2      	b.n	8017388 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80173a2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8017460 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80173a6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80173aa:	f8d9 3000 	ldr.w	r3, [r9]
 80173ae:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80173b2:	6823      	ldr	r3, [r4, #0]
 80173b4:	4620      	mov	r0, r4
 80173b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173b8:	4798      	blx	r3
 80173ba:	4607      	mov	r7, r0
 80173bc:	b206      	sxth	r6, r0
 80173be:	a803      	add	r0, sp, #12
 80173c0:	f003 fc55 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 80173c4:	6823      	ldr	r3, [r4, #0]
 80173c6:	4620      	mov	r0, r4
 80173c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173ca:	4798      	blx	r3
 80173cc:	6823      	ldr	r3, [r4, #0]
 80173ce:	4683      	mov	fp, r0
 80173d0:	4620      	mov	r0, r4
 80173d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173d4:	4798      	blx	r3
 80173d6:	465b      	mov	r3, fp
 80173d8:	9000      	str	r0, [sp, #0]
 80173da:	a803      	add	r0, sp, #12
 80173dc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80173de:	9a02      	ldr	r2, [sp, #8]
 80173e0:	f003 fc92 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80173e4:	f8da 3000 	ldr.w	r3, [sl]
 80173e8:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d0c8      	beq.n	8017382 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80173f0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80173f2:	f8b8 0000 	ldrh.w	r0, [r8]
 80173f6:	4290      	cmp	r0, r2
 80173f8:	d9cf      	bls.n	801739a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80173fa:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 80173fe:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017402:	f8d9 3000 	ldr.w	r3, [r9]
 8017406:	7862      	ldrb	r2, [r4, #1]
 8017408:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801740c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017410:	9400      	str	r4, [sp, #0]
 8017412:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017416:	a803      	add	r0, sp, #12
 8017418:	f001 fad1 	bl	80189be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801741c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8017420:	b203      	sxth	r3, r0
 8017422:	18b1      	adds	r1, r6, r2
 8017424:	2900      	cmp	r1, #0
 8017426:	dd0b      	ble.n	8017440 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8017428:	3b01      	subs	r3, #1
 801742a:	fb13 f302 	smulbb	r3, r3, r2
 801742e:	fb17 3300 	smlabb	r3, r7, r0, r3
 8017432:	b21e      	sxth	r6, r3
 8017434:	4630      	mov	r0, r6
 8017436:	b01a      	add	sp, #104	; 0x68
 8017438:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801743c:	b003      	add	sp, #12
 801743e:	4770      	bx	lr
 8017440:	2b00      	cmp	r3, #0
 8017442:	dcf7      	bgt.n	8017434 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017444:	2600      	movs	r6, #0
 8017446:	e7f5      	b.n	8017434 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017448:	0802d2fb 	.word	0x0802d2fb
 801744c:	0802d430 	.word	0x0802d430
 8017450:	0802d33d 	.word	0x0802d33d
 8017454:	0802d366 	.word	0x0802d366
 8017458:	200567c0 	.word	0x200567c0
 801745c:	200567c4 	.word	0x200567c4
 8017460:	200567c8 	.word	0x200567c8

08017464 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017464:	b570      	push	{r4, r5, r6, lr}
 8017466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801746a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801746c:	4604      	mov	r4, r0
 801746e:	4299      	cmp	r1, r3
 8017470:	d01e      	beq.n	80174b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017472:	6803      	ldr	r3, [r0, #0]
 8017474:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017476:	4b0f      	ldr	r3, [pc, #60]	; (80174b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	b92b      	cbnz	r3, 8017488 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801747c:	4b0e      	ldr	r3, [pc, #56]	; (80174b8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801747e:	21ae      	movs	r1, #174	; 0xae
 8017480:	4a0e      	ldr	r2, [pc, #56]	; (80174bc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017482:	480f      	ldr	r0, [pc, #60]	; (80174c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017484:	f00f f814 	bl	80264b0 <__assert_func>
 8017488:	4b0e      	ldr	r3, [pc, #56]	; (80174c4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801748a:	881b      	ldrh	r3, [r3, #0]
 801748c:	428b      	cmp	r3, r1
 801748e:	d803      	bhi.n	8017498 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017490:	4b0d      	ldr	r3, [pc, #52]	; (80174c8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017492:	21af      	movs	r1, #175	; 0xaf
 8017494:	4a09      	ldr	r2, [pc, #36]	; (80174bc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017496:	e7f4      	b.n	8017482 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017498:	4b0c      	ldr	r3, [pc, #48]	; (80174cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801749a:	6818      	ldr	r0, [r3, #0]
 801749c:	f7f1 fbd6 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 80174a0:	2300      	movs	r3, #0
 80174a2:	4601      	mov	r1, r0
 80174a4:	46ac      	mov	ip, r5
 80174a6:	4620      	mov	r0, r4
 80174a8:	461a      	mov	r2, r3
 80174aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174ae:	4760      	bx	ip
 80174b0:	2000      	movs	r0, #0
 80174b2:	bd70      	pop	{r4, r5, r6, pc}
 80174b4:	200567c0 	.word	0x200567c0
 80174b8:	0802d2fb 	.word	0x0802d2fb
 80174bc:	0802d430 	.word	0x0802d430
 80174c0:	0802d33d 	.word	0x0802d33d
 80174c4:	200567c4 	.word	0x200567c4
 80174c8:	0802d366 	.word	0x0802d366
 80174cc:	200567cc 	.word	0x200567cc

080174d0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80174d0:	b538      	push	{r3, r4, r5, lr}
 80174d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174d6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80174d8:	4604      	mov	r4, r0
 80174da:	429a      	cmp	r2, r3
 80174dc:	d014      	beq.n	8017508 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80174de:	6803      	ldr	r3, [r0, #0]
 80174e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80174e2:	4798      	blx	r3
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	4605      	mov	r5, r0
 80174e8:	4620      	mov	r0, r4
 80174ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80174ec:	4798      	blx	r3
 80174ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80174f2:	b22d      	sxth	r5, r5
 80174f4:	4601      	mov	r1, r0
 80174f6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80174fa:	bf06      	itte	eq
 80174fc:	4602      	moveq	r2, r0
 80174fe:	4629      	moveq	r1, r5
 8017500:	462a      	movne	r2, r5
 8017502:	4620      	mov	r0, r4
 8017504:	f7ef fa5a 	bl	80069bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017508:	bd38      	pop	{r3, r4, r5, pc}

0801750a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801750a:	888a      	ldrh	r2, [r1, #4]
 801750c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801750e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017512:	b922      	cbnz	r2, 801751e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8017514:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017518:	b90b      	cbnz	r3, 801751e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801751a:	f7ff bfd9 	b.w	80174d0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801751e:	4770      	bx	lr

08017520 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017520:	2300      	movs	r3, #0
 8017522:	8083      	strh	r3, [r0, #4]
 8017524:	80c3      	strh	r3, [r0, #6]
 8017526:	8003      	strh	r3, [r0, #0]
 8017528:	8043      	strh	r3, [r0, #2]
 801752a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801752e:	2bff      	cmp	r3, #255	; 0xff
 8017530:	bf01      	itttt	eq
 8017532:	890b      	ldrheq	r3, [r1, #8]
 8017534:	8083      	strheq	r3, [r0, #4]
 8017536:	894b      	ldrheq	r3, [r1, #10]
 8017538:	80c3      	strheq	r3, [r0, #6]
 801753a:	4770      	bx	lr

0801753c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801753c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801753e:	4604      	mov	r4, r0
 8017540:	466b      	mov	r3, sp
 8017542:	6808      	ldr	r0, [r1, #0]
 8017544:	6849      	ldr	r1, [r1, #4]
 8017546:	c303      	stmia	r3!, {r0, r1}
 8017548:	6823      	ldr	r3, [r4, #0]
 801754a:	4669      	mov	r1, sp
 801754c:	4620      	mov	r0, r4
 801754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017550:	4798      	blx	r3
 8017552:	4b08      	ldr	r3, [pc, #32]	; (8017574 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801755a:	b10a      	cbz	r2, 8017560 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801755c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801755e:	b900      	cbnz	r0, 8017562 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017560:	6898      	ldr	r0, [r3, #8]
 8017562:	6803      	ldr	r3, [r0, #0]
 8017564:	4669      	mov	r1, sp
 8017566:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017568:	699d      	ldr	r5, [r3, #24]
 801756a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801756e:	47a8      	blx	r5
 8017570:	b003      	add	sp, #12
 8017572:	bd30      	pop	{r4, r5, pc}
 8017574:	20056750 	.word	0x20056750

08017578 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801757a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801757e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017580:	4606      	mov	r6, r0
 8017582:	4299      	cmp	r1, r3
 8017584:	d02a      	beq.n	80175dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017586:	4b16      	ldr	r3, [pc, #88]	; (80175e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	b92b      	cbnz	r3, 8017598 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801758c:	4b15      	ldr	r3, [pc, #84]	; (80175e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801758e:	21ae      	movs	r1, #174	; 0xae
 8017590:	4a15      	ldr	r2, [pc, #84]	; (80175e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017592:	4816      	ldr	r0, [pc, #88]	; (80175ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017594:	f00e ff8c 	bl	80264b0 <__assert_func>
 8017598:	4a15      	ldr	r2, [pc, #84]	; (80175f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801759a:	8812      	ldrh	r2, [r2, #0]
 801759c:	428a      	cmp	r2, r1
 801759e:	d803      	bhi.n	80175a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80175a0:	4b14      	ldr	r3, [pc, #80]	; (80175f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80175a2:	21af      	movs	r1, #175	; 0xaf
 80175a4:	4a10      	ldr	r2, [pc, #64]	; (80175e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80175a6:	e7f4      	b.n	8017592 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80175a8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80175ac:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80175b0:	4b11      	ldr	r3, [pc, #68]	; (80175f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80175b2:	7854      	ldrb	r4, [r2, #1]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80175ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80175be:	682b      	ldr	r3, [r5, #0]
 80175c0:	69df      	ldr	r7, [r3, #28]
 80175c2:	4b0e      	ldr	r3, [pc, #56]	; (80175fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80175c4:	6818      	ldr	r0, [r3, #0]
 80175c6:	f7f1 fb41 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 80175ca:	2300      	movs	r3, #0
 80175cc:	4602      	mov	r2, r0
 80175ce:	4621      	mov	r1, r4
 80175d0:	9300      	str	r3, [sp, #0]
 80175d2:	4628      	mov	r0, r5
 80175d4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80175d6:	47b8      	blx	r7
 80175d8:	b003      	add	sp, #12
 80175da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175dc:	2000      	movs	r0, #0
 80175de:	e7fb      	b.n	80175d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80175e0:	200567c0 	.word	0x200567c0
 80175e4:	0802d2fb 	.word	0x0802d2fb
 80175e8:	0802d53c 	.word	0x0802d53c
 80175ec:	0802d33d 	.word	0x0802d33d
 80175f0:	200567c4 	.word	0x200567c4
 80175f4:	0802d366 	.word	0x0802d366
 80175f8:	200567c8 	.word	0x200567c8
 80175fc:	200567cc 	.word	0x200567cc

08017600 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017600:	b570      	push	{r4, r5, r6, lr}
 8017602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017606:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017608:	4604      	mov	r4, r0
 801760a:	4299      	cmp	r1, r3
 801760c:	d01e      	beq.n	801764c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801760e:	6803      	ldr	r3, [r0, #0]
 8017610:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017612:	4b0f      	ldr	r3, [pc, #60]	; (8017650 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	b92b      	cbnz	r3, 8017624 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017618:	4b0e      	ldr	r3, [pc, #56]	; (8017654 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801761a:	21ae      	movs	r1, #174	; 0xae
 801761c:	4a0e      	ldr	r2, [pc, #56]	; (8017658 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801761e:	480f      	ldr	r0, [pc, #60]	; (801765c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017620:	f00e ff46 	bl	80264b0 <__assert_func>
 8017624:	4b0e      	ldr	r3, [pc, #56]	; (8017660 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017626:	881b      	ldrh	r3, [r3, #0]
 8017628:	428b      	cmp	r3, r1
 801762a:	d803      	bhi.n	8017634 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801762c:	4b0d      	ldr	r3, [pc, #52]	; (8017664 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801762e:	21af      	movs	r1, #175	; 0xaf
 8017630:	4a09      	ldr	r2, [pc, #36]	; (8017658 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017632:	e7f4      	b.n	801761e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017634:	4b0c      	ldr	r3, [pc, #48]	; (8017668 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017636:	6818      	ldr	r0, [r3, #0]
 8017638:	f7f1 fb08 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 801763c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801763e:	4601      	mov	r1, r0
 8017640:	46ac      	mov	ip, r5
 8017642:	4620      	mov	r0, r4
 8017644:	2300      	movs	r3, #0
 8017646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801764a:	4760      	bx	ip
 801764c:	2000      	movs	r0, #0
 801764e:	bd70      	pop	{r4, r5, r6, pc}
 8017650:	200567c0 	.word	0x200567c0
 8017654:	0802d2fb 	.word	0x0802d2fb
 8017658:	0802d53c 	.word	0x0802d53c
 801765c:	0802d33d 	.word	0x0802d33d
 8017660:	200567c4 	.word	0x200567c4
 8017664:	0802d366 	.word	0x0802d366
 8017668:	200567cc 	.word	0x200567cc

0801766c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801766c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017674:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017676:	b08c      	sub	sp, #48	; 0x30
 8017678:	4604      	mov	r4, r0
 801767a:	4293      	cmp	r3, r2
 801767c:	460e      	mov	r6, r1
 801767e:	d05d      	beq.n	801773c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017680:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017760 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017684:	f8d8 2000 	ldr.w	r2, [r8]
 8017688:	b92a      	cbnz	r2, 8017696 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801768a:	4b2e      	ldr	r3, [pc, #184]	; (8017744 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801768c:	21ae      	movs	r1, #174	; 0xae
 801768e:	4a2e      	ldr	r2, [pc, #184]	; (8017748 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017690:	482e      	ldr	r0, [pc, #184]	; (801774c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017692:	f00e ff0d 	bl	80264b0 <__assert_func>
 8017696:	4f2e      	ldr	r7, [pc, #184]	; (8017750 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017698:	8839      	ldrh	r1, [r7, #0]
 801769a:	4299      	cmp	r1, r3
 801769c:	d803      	bhi.n	80176a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801769e:	4b2d      	ldr	r3, [pc, #180]	; (8017754 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80176a0:	21af      	movs	r1, #175	; 0xaf
 80176a2:	4a29      	ldr	r2, [pc, #164]	; (8017748 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80176a4:	e7f4      	b.n	8017690 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80176a6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80176aa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80176ae:	4b2a      	ldr	r3, [pc, #168]	; (8017758 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80176b6:	2a00      	cmp	r2, #0
 80176b8:	d040      	beq.n	801773c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80176ba:	784b      	ldrb	r3, [r1, #1]
 80176bc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80176c0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80176c4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80176c8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80176cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80176d0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80176d4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80176d8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80176dc:	ad05      	add	r5, sp, #20
 80176de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80176e0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80176e4:	9207      	str	r2, [sp, #28]
 80176e6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80176ea:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80176ee:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80176f2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80176f6:	f88d a020 	strb.w	sl, [sp, #32]
 80176fa:	9009      	str	r0, [sp, #36]	; 0x24
 80176fc:	f7ee fb5e 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8017700:	4621      	mov	r1, r4
 8017702:	4681      	mov	r9, r0
 8017704:	4628      	mov	r0, r5
 8017706:	f002 fdf3 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801770a:	f8d8 3000 	ldr.w	r3, [r8]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d0bb      	beq.n	801768a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017712:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017714:	883b      	ldrh	r3, [r7, #0]
 8017716:	428b      	cmp	r3, r1
 8017718:	d9c1      	bls.n	801769e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801771a:	4b10      	ldr	r3, [pc, #64]	; (801775c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801771c:	6818      	ldr	r0, [r3, #0]
 801771e:	f7f1 fa95 	bl	8008c4c <_ZNK8touchgfx5Texts7getTextEt>
 8017722:	2300      	movs	r3, #0
 8017724:	9303      	str	r3, [sp, #12]
 8017726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017728:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801772c:	ab07      	add	r3, sp, #28
 801772e:	4648      	mov	r0, r9
 8017730:	9300      	str	r3, [sp, #0]
 8017732:	4633      	mov	r3, r6
 8017734:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017738:	f7f1 fa19 	bl	8008b6e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801773c:	b00c      	add	sp, #48	; 0x30
 801773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017742:	bf00      	nop
 8017744:	0802d2fb 	.word	0x0802d2fb
 8017748:	0802d53c 	.word	0x0802d53c
 801774c:	0802d33d 	.word	0x0802d33d
 8017750:	200567c4 	.word	0x200567c4
 8017754:	0802d366 	.word	0x0802d366
 8017758:	200567c8 	.word	0x200567c8
 801775c:	200567cc 	.word	0x200567cc
 8017760:	200567c0 	.word	0x200567c0

08017764 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017768:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801776a:	4604      	mov	r4, r0
 801776c:	460e      	mov	r6, r1
 801776e:	b08e      	sub	sp, #56	; 0x38
 8017770:	b218      	sxth	r0, r3
 8017772:	8921      	ldrh	r1, [r4, #8]
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	8962      	ldrh	r2, [r4, #10]
 8017778:	f8ad 0000 	strh.w	r0, [sp]
 801777c:	b29b      	uxth	r3, r3
 801777e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8017782:	1ac9      	subs	r1, r1, r3
 8017784:	1ad3      	subs	r3, r2, r3
 8017786:	b209      	sxth	r1, r1
 8017788:	b21b      	sxth	r3, r3
 801778a:	2900      	cmp	r1, #0
 801778c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017790:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017794:	dd5e      	ble.n	8017854 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017796:	2b00      	cmp	r3, #0
 8017798:	dd5c      	ble.n	8017854 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801779a:	6830      	ldr	r0, [r6, #0]
 801779c:	ab02      	add	r3, sp, #8
 801779e:	6871      	ldr	r1, [r6, #4]
 80177a0:	c303      	stmia	r3!, {r0, r1}
 80177a2:	4669      	mov	r1, sp
 80177a4:	a802      	add	r0, sp, #8
 80177a6:	f7fd ff21 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 80177aa:	4620      	mov	r0, r4
 80177ac:	a902      	add	r1, sp, #8
 80177ae:	f7ff fec5 	bl	801753c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80177b2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d05f      	beq.n	8017878 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80177b8:	8963      	ldrh	r3, [r4, #10]
 80177ba:	b202      	sxth	r2, r0
 80177bc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80177c0:	2500      	movs	r5, #0
 80177c2:	1a1f      	subs	r7, r3, r0
 80177c4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80177c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80177cc:	b21b      	sxth	r3, r3
 80177ce:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80177d2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80177d6:	af04      	add	r7, sp, #16
 80177d8:	1a09      	subs	r1, r1, r0
 80177da:	9506      	str	r5, [sp, #24]
 80177dc:	f8ad 201e 	strh.w	r2, [sp, #30]
 80177e0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80177e4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80177e8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80177ec:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80177f0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80177f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80177f8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80177fc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017800:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017804:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017808:	ab06      	add	r3, sp, #24
 801780a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801780e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017812:	e887 0003 	stmia.w	r7, {r0, r1}
 8017816:	4631      	mov	r1, r6
 8017818:	4638      	mov	r0, r7
 801781a:	f7fd fee7 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801781e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017822:	2b00      	cmp	r3, #0
 8017824:	dd12      	ble.n	801784c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017826:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801782a:	2b00      	cmp	r3, #0
 801782c:	dd0e      	ble.n	801784c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801782e:	6823      	ldr	r3, [r4, #0]
 8017830:	4639      	mov	r1, r7
 8017832:	4620      	mov	r0, r4
 8017834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017836:	4798      	blx	r3
 8017838:	f7ee fac0 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 801783c:	6803      	ldr	r3, [r0, #0]
 801783e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017840:	4639      	mov	r1, r7
 8017842:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017846:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801784a:	47c0      	blx	r8
 801784c:	3501      	adds	r5, #1
 801784e:	2d04      	cmp	r5, #4
 8017850:	d1da      	bne.n	8017808 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017852:	e011      	b.n	8017878 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017854:	6830      	ldr	r0, [r6, #0]
 8017856:	ab06      	add	r3, sp, #24
 8017858:	6871      	ldr	r1, [r6, #4]
 801785a:	c303      	stmia	r3!, {r0, r1}
 801785c:	6823      	ldr	r3, [r4, #0]
 801785e:	a906      	add	r1, sp, #24
 8017860:	4620      	mov	r0, r4
 8017862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017864:	4798      	blx	r3
 8017866:	f7ee faa9 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 801786a:	6803      	ldr	r3, [r0, #0]
 801786c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801786e:	a906      	add	r1, sp, #24
 8017870:	699d      	ldr	r5, [r3, #24]
 8017872:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017876:	47a8      	blx	r5
 8017878:	b00e      	add	sp, #56	; 0x38
 801787a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017880 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017880:	4b02      	ldr	r3, [pc, #8]	; (801788c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017882:	6018      	str	r0, [r3, #0]
 8017884:	4b02      	ldr	r3, [pc, #8]	; (8017890 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017886:	6019      	str	r1, [r3, #0]
 8017888:	4770      	bx	lr
 801788a:	bf00      	nop
 801788c:	20056758 	.word	0x20056758
 8017890:	2005676c 	.word	0x2005676c

08017894 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017894:	b538      	push	{r3, r4, r5, lr}
 8017896:	4c2b      	ldr	r4, [pc, #172]	; (8017944 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017898:	4b2b      	ldr	r3, [pc, #172]	; (8017948 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801789a:	6821      	ldr	r1, [r4, #0]
 801789c:	681a      	ldr	r2, [r3, #0]
 801789e:	4281      	cmp	r1, r0
 80178a0:	4d2a      	ldr	r5, [pc, #168]	; (801794c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80178a2:	492b      	ldr	r1, [pc, #172]	; (8017950 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80178a4:	d108      	bne.n	80178b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80178a6:	682b      	ldr	r3, [r5, #0]
 80178a8:	4293      	cmp	r3, r2
 80178aa:	d105      	bne.n	80178b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80178ac:	6808      	ldr	r0, [r1, #0]
 80178ae:	280f      	cmp	r0, #15
 80178b0:	bf94      	ite	ls
 80178b2:	2000      	movls	r0, #0
 80178b4:	2001      	movhi	r0, #1
 80178b6:	bd38      	pop	{r3, r4, r5, pc}
 80178b8:	4b26      	ldr	r3, [pc, #152]	; (8017954 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80178ba:	6020      	str	r0, [r4, #0]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	602a      	str	r2, [r5, #0]
 80178c0:	4298      	cmp	r0, r3
 80178c2:	d905      	bls.n	80178d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80178c4:	4b24      	ldr	r3, [pc, #144]	; (8017958 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80178c6:	2137      	movs	r1, #55	; 0x37
 80178c8:	4a24      	ldr	r2, [pc, #144]	; (801795c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80178ca:	4825      	ldr	r0, [pc, #148]	; (8017960 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80178cc:	f00e fdf0 	bl	80264b0 <__assert_func>
 80178d0:	f010 0403 	ands.w	r4, r0, #3
 80178d4:	bf1f      	itttt	ne
 80178d6:	f1c4 0504 	rsbne	r5, r4, #4
 80178da:	3b04      	subne	r3, #4
 80178dc:	1952      	addne	r2, r2, r5
 80178de:	191b      	addne	r3, r3, r4
 80178e0:	4d20      	ldr	r5, [pc, #128]	; (8017964 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80178e2:	4402      	add	r2, r0
 80178e4:	1a1b      	subs	r3, r3, r0
 80178e6:	3001      	adds	r0, #1
 80178e8:	602a      	str	r2, [r5, #0]
 80178ea:	f020 0401 	bic.w	r4, r0, #1
 80178ee:	42a3      	cmp	r3, r4
 80178f0:	d203      	bcs.n	80178fa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 80178f2:	4b19      	ldr	r3, [pc, #100]	; (8017958 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80178f4:	214a      	movs	r1, #74	; 0x4a
 80178f6:	4a19      	ldr	r2, [pc, #100]	; (801795c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80178f8:	e7e7      	b.n	80178ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80178fa:	f010 0002 	ands.w	r0, r0, #2
 80178fe:	bf1f      	itttt	ne
 8017900:	f1c0 0504 	rsbne	r5, r0, #4
 8017904:	1952      	addne	r2, r2, r5
 8017906:	1f05      	subne	r5, r0, #4
 8017908:	195b      	addne	r3, r3, r5
 801790a:	4422      	add	r2, r4
 801790c:	4d16      	ldr	r5, [pc, #88]	; (8017968 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801790e:	1b1b      	subs	r3, r3, r4
 8017910:	602a      	str	r2, [r5, #0]
 8017912:	429c      	cmp	r4, r3
 8017914:	d903      	bls.n	801791e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017916:	4b10      	ldr	r3, [pc, #64]	; (8017958 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017918:	215d      	movs	r1, #93	; 0x5d
 801791a:	4a10      	ldr	r2, [pc, #64]	; (801795c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801791c:	e7d5      	b.n	80178ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801791e:	b120      	cbz	r0, 801792a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017920:	f1c0 0504 	rsb	r5, r0, #4
 8017924:	3804      	subs	r0, #4
 8017926:	442a      	add	r2, r5
 8017928:	4403      	add	r3, r0
 801792a:	1b1b      	subs	r3, r3, r4
 801792c:	4422      	add	r2, r4
 801792e:	480f      	ldr	r0, [pc, #60]	; (801796c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017930:	2b0f      	cmp	r3, #15
 8017932:	600b      	str	r3, [r1, #0]
 8017934:	6002      	str	r2, [r0, #0]
 8017936:	d803      	bhi.n	8017940 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017938:	4b0d      	ldr	r3, [pc, #52]	; (8017970 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801793a:	2170      	movs	r1, #112	; 0x70
 801793c:	4a07      	ldr	r2, [pc, #28]	; (801795c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801793e:	e7c4      	b.n	80178ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017940:	2001      	movs	r0, #1
 8017942:	e7b8      	b.n	80178b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017944:	20056760 	.word	0x20056760
 8017948:	20056758 	.word	0x20056758
 801794c:	20056768 	.word	0x20056768
 8017950:	20056770 	.word	0x20056770
 8017954:	2005676c 	.word	0x2005676c
 8017958:	0802d5d0 	.word	0x0802d5d0
 801795c:	0802d698 	.word	0x0802d698
 8017960:	0802d609 	.word	0x0802d609
 8017964:	20056774 	.word	0x20056774
 8017968:	20056764 	.word	0x20056764
 801796c:	2005675c 	.word	0x2005675c
 8017970:	0802d653 	.word	0x0802d653

08017974 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017974:	4b04      	ldr	r3, [pc, #16]	; (8017988 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017976:	6818      	ldr	r0, [r3, #0]
 8017978:	b120      	cbz	r0, 8017984 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801797a:	4b04      	ldr	r3, [pc, #16]	; (801798c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801797c:	6818      	ldr	r0, [r3, #0]
 801797e:	3000      	adds	r0, #0
 8017980:	bf18      	it	ne
 8017982:	2001      	movne	r0, #1
 8017984:	4770      	bx	lr
 8017986:	bf00      	nop
 8017988:	20056758 	.word	0x20056758
 801798c:	2005676c 	.word	0x2005676c

08017990 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017990:	4b01      	ldr	r3, [pc, #4]	; (8017998 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017992:	6818      	ldr	r0, [r3, #0]
 8017994:	4770      	bx	lr
 8017996:	bf00      	nop
 8017998:	20056760 	.word	0x20056760

0801799c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801799c:	4b01      	ldr	r3, [pc, #4]	; (80179a4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801799e:	6818      	ldr	r0, [r3, #0]
 80179a0:	4770      	bx	lr
 80179a2:	bf00      	nop
 80179a4:	20056768 	.word	0x20056768

080179a8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80179a8:	4b01      	ldr	r3, [pc, #4]	; (80179b0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80179aa:	6818      	ldr	r0, [r3, #0]
 80179ac:	4770      	bx	lr
 80179ae:	bf00      	nop
 80179b0:	20056774 	.word	0x20056774

080179b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80179b4:	4b01      	ldr	r3, [pc, #4]	; (80179bc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80179b6:	6818      	ldr	r0, [r3, #0]
 80179b8:	4770      	bx	lr
 80179ba:	bf00      	nop
 80179bc:	20056764 	.word	0x20056764

080179c0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80179c0:	4b01      	ldr	r3, [pc, #4]	; (80179c8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80179c2:	6818      	ldr	r0, [r3, #0]
 80179c4:	4770      	bx	lr
 80179c6:	bf00      	nop
 80179c8:	2005675c 	.word	0x2005675c

080179cc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80179cc:	4b01      	ldr	r3, [pc, #4]	; (80179d4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80179ce:	6818      	ldr	r0, [r3, #0]
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop
 80179d4:	20056770 	.word	0x20056770

080179d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80179d8:	4b01      	ldr	r3, [pc, #4]	; (80179e0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80179da:	6019      	str	r1, [r3, #0]
 80179dc:	4770      	bx	lr
 80179de:	bf00      	nop
 80179e0:	20056778 	.word	0x20056778

080179e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80179e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e8:	4696      	mov	lr, r2
 80179ea:	b097      	sub	sp, #92	; 0x5c
 80179ec:	4605      	mov	r5, r0
 80179ee:	4614      	mov	r4, r2
 80179f0:	460e      	mov	r6, r1
 80179f2:	461f      	mov	r7, r3
 80179f4:	f10d 0c1c 	add.w	ip, sp, #28
 80179f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80179fc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017a00:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017a04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a0c:	f8de 3000 	ldr.w	r3, [lr]
 8017a10:	f104 0e14 	add.w	lr, r4, #20
 8017a14:	f8cc 3000 	str.w	r3, [ip]
 8017a18:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a24:	f8de 3000 	ldr.w	r3, [lr]
 8017a28:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017a2c:	f8cc 3000 	str.w	r3, [ip]
 8017a30:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017a34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a3c:	f8de 3000 	ldr.w	r3, [lr]
 8017a40:	4631      	mov	r1, r6
 8017a42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017a44:	4628      	mov	r0, r5
 8017a46:	f8cc 3000 	str.w	r3, [ip]
 8017a4a:	682b      	ldr	r3, [r5, #0]
 8017a4c:	9201      	str	r2, [sp, #4]
 8017a4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017a50:	f8cd 8008 	str.w	r8, [sp, #8]
 8017a54:	9200      	str	r2, [sp, #0]
 8017a56:	aa07      	add	r2, sp, #28
 8017a58:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017a5c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8017a60:	463b      	mov	r3, r7
 8017a62:	47d8      	blx	fp
 8017a64:	46a6      	mov	lr, r4
 8017a66:	f10d 0c1c 	add.w	ip, sp, #28
 8017a6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a72:	f8de 3000 	ldr.w	r3, [lr]
 8017a76:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017a7a:	343c      	adds	r4, #60	; 0x3c
 8017a7c:	f8cc 3000 	str.w	r3, [ip]
 8017a80:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017a84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a8c:	f8de 3000 	ldr.w	r3, [lr]
 8017a90:	f8cc 3000 	str.w	r3, [ip]
 8017a94:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a9e:	6823      	ldr	r3, [r4, #0]
 8017aa0:	4631      	mov	r1, r6
 8017aa2:	4628      	mov	r0, r5
 8017aa4:	f8cc 3000 	str.w	r3, [ip]
 8017aa8:	682b      	ldr	r3, [r5, #0]
 8017aaa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017aae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ab0:	f8cd 8008 	str.w	r8, [sp, #8]
 8017ab4:	9201      	str	r2, [sp, #4]
 8017ab6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017ab8:	9200      	str	r2, [sp, #0]
 8017aba:	aa07      	add	r2, sp, #28
 8017abc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8017abe:	463b      	mov	r3, r7
 8017ac0:	47a0      	blx	r4
 8017ac2:	b017      	add	sp, #92	; 0x5c
 8017ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ac8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017ac8:	2000      	movs	r0, #0
 8017aca:	4770      	bx	lr

08017acc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad0:	b08d      	sub	sp, #52	; 0x34
 8017ad2:	4688      	mov	r8, r1
 8017ad4:	f8d3 c000 	ldr.w	ip, [r3]
 8017ad8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017ada:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017ade:	680f      	ldr	r7, [r1, #0]
 8017ae0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017ae4:	eba7 070c 	sub.w	r7, r7, ip
 8017ae8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017aec:	edd3 6a07 	vldr	s13, [r3, #28]
 8017af0:	42bc      	cmp	r4, r7
 8017af2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017af4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017af8:	bfa8      	it	ge
 8017afa:	463c      	movge	r4, r7
 8017afc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017b00:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017b04:	ee07 4a90 	vmov	s15, r4
 8017b08:	eb09 0e0c 	add.w	lr, r9, ip
 8017b0c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017b10:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017b14:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017b18:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017b1c:	4571      	cmp	r1, lr
 8017b1e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017b22:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017b26:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017b2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017b2e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017b32:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017b36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017b3a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017b3e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b42:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b46:	f340 808c 	ble.w	8017c62 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8017b4a:	eba1 060e 	sub.w	r6, r1, lr
 8017b4e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017b52:	ee07 5a10 	vmov	s14, r5
 8017b56:	2d00      	cmp	r5, #0
 8017b58:	fb04 6615 	mls	r6, r4, r5, r6
 8017b5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b60:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017b64:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017b68:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017b6c:	dd12      	ble.n	8017b94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017b6e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017b72:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017b76:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017b7a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b82:	bf14      	ite	ne
 8017b84:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017b88:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017b8c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b90:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b94:	fb05 f204 	mul.w	r2, r5, r4
 8017b98:	1abf      	subs	r7, r7, r2
 8017b9a:	4494      	add	ip, r2
 8017b9c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017ba0:	4411      	add	r1, r2
 8017ba2:	eb09 020c 	add.w	r2, r9, ip
 8017ba6:	b209      	sxth	r1, r1
 8017ba8:	443a      	add	r2, r7
 8017baa:	428a      	cmp	r2, r1
 8017bac:	bfc4      	itt	gt
 8017bae:	eba1 0209 	subgt.w	r2, r1, r9
 8017bb2:	eba2 070c 	subgt.w	r7, r2, ip
 8017bb6:	2f00      	cmp	r7, #0
 8017bb8:	dd50      	ble.n	8017c5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017bba:	fb97 f1f4 	sdiv	r1, r7, r4
 8017bbe:	fb04 7211 	mls	r2, r4, r1, r7
 8017bc2:	b90a      	cbnz	r2, 8017bc8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017bc4:	3901      	subs	r1, #1
 8017bc6:	4622      	mov	r2, r4
 8017bc8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017bcc:	6840      	ldr	r0, [r0, #4]
 8017bce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017bd2:	44b6      	add	lr, r6
 8017bd4:	f8d0 a000 	ldr.w	sl, [r0]
 8017bd8:	2900      	cmp	r1, #0
 8017bda:	bfcc      	ite	gt
 8017bdc:	46a1      	movgt	r9, r4
 8017bde:	4691      	movle	r9, r2
 8017be0:	900b      	str	r0, [sp, #44]	; 0x2c
 8017be2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017be4:	fb04 e505 	mla	r5, r4, r5, lr
 8017be8:	eef0 6a42 	vmov.f32	s13, s4
 8017bec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017bf0:	9008      	str	r0, [sp, #32]
 8017bf2:	eeb0 7a61 	vmov.f32	s14, s3
 8017bf6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017bf8:	695b      	ldr	r3, [r3, #20]
 8017bfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017bfe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017c02:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017c06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017c08:	445b      	add	r3, fp
 8017c0a:	9307      	str	r3, [sp, #28]
 8017c0c:	ee16 3a90 	vmov	r3, s13
 8017c10:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017c14:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017c18:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017c1c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017c20:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c24:	ee17 7a90 	vmov	r7, s15
 8017c28:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017c2c:	fb97 f7f4 	sdiv	r7, r7, r4
 8017c30:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c34:	ee17 ca90 	vmov	ip, s15
 8017c38:	fb9c fcf4 	sdiv	ip, ip, r4
 8017c3c:	fb0c 3306 	mla	r3, ip, r6, r3
 8017c40:	9302      	str	r3, [sp, #8]
 8017c42:	ee17 3a10 	vmov	r3, s14
 8017c46:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017c4a:	fb07 3706 	mla	r7, r7, r6, r3
 8017c4e:	eba9 0306 	sub.w	r3, r9, r6
 8017c52:	e9cd 4700 	strd	r4, r7, [sp]
 8017c56:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017c5a:	47a0      	blx	r4
 8017c5c:	b00d      	add	sp, #52	; 0x34
 8017c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c62:	2500      	movs	r5, #0
 8017c64:	462e      	mov	r6, r5
 8017c66:	e799      	b.n	8017b9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c6c:	b0db      	sub	sp, #364	; 0x16c
 8017c6e:	461d      	mov	r5, r3
 8017c70:	4614      	mov	r4, r2
 8017c72:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017c76:	910f      	str	r1, [sp, #60]	; 0x3c
 8017c78:	4629      	mov	r1, r5
 8017c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8017c7c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017c80:	9009      	str	r0, [sp, #36]	; 0x24
 8017c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c84:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017c88:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017c8c:	9310      	str	r3, [sp, #64]	; 0x40
 8017c8e:	6803      	ldr	r3, [r0, #0]
 8017c90:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8017c92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017c96:	47b8      	blx	r7
 8017c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c9a:	6058      	str	r0, [r3, #4]
 8017c9c:	2800      	cmp	r0, #0
 8017c9e:	f000 83a1 	beq.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ca2:	682b      	ldr	r3, [r5, #0]
 8017ca4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017ca8:	ed94 7a02 	vldr	s14, [r4, #8]
 8017cac:	9314      	str	r3, [sp, #80]	; 0x50
 8017cae:	686b      	ldr	r3, [r5, #4]
 8017cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cb4:	9315      	str	r3, [sp, #84]	; 0x54
 8017cb6:	4bc1      	ldr	r3, [pc, #772]	; (8017fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017cb8:	7819      	ldrb	r1, [r3, #0]
 8017cba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017cbe:	2900      	cmp	r1, #0
 8017cc0:	bf16      	itet	ne
 8017cc2:	4619      	movne	r1, r3
 8017cc4:	4611      	moveq	r1, r2
 8017cc6:	4613      	movne	r3, r2
 8017cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ccc:	9116      	str	r1, [sp, #88]	; 0x58
 8017cce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017cd2:	f240 8387 	bls.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017cd6:	ed94 7a07 	vldr	s14, [r4, #28]
 8017cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ce2:	f240 837f 	bls.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ce6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf2:	f240 8377 	bls.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017cf6:	6822      	ldr	r2, [r4, #0]
 8017cf8:	4bb1      	ldr	r3, [pc, #708]	; (8017fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	f2c0 8372 	blt.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d00:	49b0      	ldr	r1, [pc, #704]	; (8017fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017d02:	6963      	ldr	r3, [r4, #20]
 8017d04:	428a      	cmp	r2, r1
 8017d06:	f300 836d 	bgt.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d0a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d0e:	48ae      	ldr	r0, [pc, #696]	; (8017fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017d10:	33ff      	adds	r3, #255	; 0xff
 8017d12:	4283      	cmp	r3, r0
 8017d14:	f200 8366 	bhi.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017d1a:	4dac      	ldr	r5, [pc, #688]	; (8017fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017d1c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d20:	33ff      	adds	r3, #255	; 0xff
 8017d22:	42ab      	cmp	r3, r5
 8017d24:	f200 835e 	bhi.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d28:	6862      	ldr	r2, [r4, #4]
 8017d2a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017d2e:	33ff      	adds	r3, #255	; 0xff
 8017d30:	4283      	cmp	r3, r0
 8017d32:	f200 8357 	bhi.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d36:	69a1      	ldr	r1, [r4, #24]
 8017d38:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017d3c:	33ff      	adds	r3, #255	; 0xff
 8017d3e:	4283      	cmp	r3, r0
 8017d40:	f200 8350 	bhi.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017d46:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8017d4a:	30ff      	adds	r0, #255	; 0xff
 8017d4c:	42a8      	cmp	r0, r5
 8017d4e:	f200 8349 	bhi.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d52:	428a      	cmp	r2, r1
 8017d54:	f280 8110 	bge.w	8017f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	f300 8119 	bgt.w	8017f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017d5e:	4299      	cmp	r1, r3
 8017d60:	f280 811d 	bge.w	8017f9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017d64:	2502      	movs	r5, #2
 8017d66:	2701      	movs	r7, #1
 8017d68:	46a9      	mov	r9, r5
 8017d6a:	46b8      	mov	r8, r7
 8017d6c:	f04f 0a00 	mov.w	sl, #0
 8017d70:	4621      	mov	r1, r4
 8017d72:	a849      	add	r0, sp, #292	; 0x124
 8017d74:	f003 fd3e 	bl	801b7f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017d78:	4622      	mov	r2, r4
 8017d7a:	4653      	mov	r3, sl
 8017d7c:	a949      	add	r1, sp, #292	; 0x124
 8017d7e:	f8cd 9000 	str.w	r9, [sp]
 8017d82:	a819      	add	r0, sp, #100	; 0x64
 8017d84:	f003 fe66 	bl	801ba54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017d88:	4622      	mov	r2, r4
 8017d8a:	4653      	mov	r3, sl
 8017d8c:	a949      	add	r1, sp, #292	; 0x124
 8017d8e:	f8cd 8000 	str.w	r8, [sp]
 8017d92:	a829      	add	r0, sp, #164	; 0xa4
 8017d94:	f003 fe5e 	bl	801ba54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017d98:	4643      	mov	r3, r8
 8017d9a:	4622      	mov	r2, r4
 8017d9c:	a949      	add	r1, sp, #292	; 0x124
 8017d9e:	f8cd 9000 	str.w	r9, [sp]
 8017da2:	a839      	add	r0, sp, #228	; 0xe4
 8017da4:	f003 fe56 	bl	801ba54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017da8:	42af      	cmp	r7, r5
 8017daa:	af12      	add	r7, sp, #72	; 0x48
 8017dac:	bfb7      	itett	lt
 8017dae:	2300      	movlt	r3, #0
 8017db0:	2301      	movge	r3, #1
 8017db2:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017db4:	ac19      	addlt	r4, sp, #100	; 0x64
 8017db6:	bfb1      	iteee	lt
 8017db8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017dba:	ad19      	addge	r5, sp, #100	; 0x64
 8017dbc:	930e      	strge	r3, [sp, #56]	; 0x38
 8017dbe:	ac29      	addge	r4, sp, #164	; 0xa4
 8017dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017dc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017dc6:	e887 0003 	stmia.w	r7, {r0, r1}
 8017dca:	b928      	cbnz	r0, 8017dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017dcc:	4b80      	ldr	r3, [pc, #512]	; (8017fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017dce:	6818      	ldr	r0, [r3, #0]
 8017dd0:	6803      	ldr	r3, [r0, #0]
 8017dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dd4:	4798      	blx	r3
 8017dd6:	6038      	str	r0, [r7, #0]
 8017dd8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017dda:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017dde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017de2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017de4:	930c      	str	r3, [sp, #48]	; 0x30
 8017de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017de8:	6963      	ldr	r3, [r4, #20]
 8017dea:	440b      	add	r3, r1
 8017dec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017df0:	4408      	add	r0, r1
 8017df2:	b200      	sxth	r0, r0
 8017df4:	4283      	cmp	r3, r0
 8017df6:	900d      	str	r0, [sp, #52]	; 0x34
 8017df8:	f280 80dd 	bge.w	8017fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017dfc:	428b      	cmp	r3, r1
 8017dfe:	da08      	bge.n	8017e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e00:	2a00      	cmp	r2, #0
 8017e02:	dd06      	ble.n	8017e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e04:	1acb      	subs	r3, r1, r3
 8017e06:	429a      	cmp	r2, r3
 8017e08:	f2c0 80e4 	blt.w	8017fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f300 80e2 	bgt.w	8017fd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017e12:	6967      	ldr	r7, [r4, #20]
 8017e14:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e1a:	443b      	add	r3, r7
 8017e1c:	461f      	mov	r7, r3
 8017e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e20:	1bdf      	subs	r7, r3, r7
 8017e22:	4297      	cmp	r7, r2
 8017e24:	bfa8      	it	ge
 8017e26:	4617      	movge	r7, r2
 8017e28:	2f00      	cmp	r7, #0
 8017e2a:	f340 8166 	ble.w	80180fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017e2e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e30:	6829      	ldr	r1, [r5, #0]
 8017e32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e36:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017e3a:	4411      	add	r1, r2
 8017e3c:	6820      	ldr	r0, [r4, #0]
 8017e3e:	4299      	cmp	r1, r3
 8017e40:	dd1a      	ble.n	8017e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017e42:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017e46:	4402      	add	r2, r0
 8017e48:	440b      	add	r3, r1
 8017e4a:	b21b      	sxth	r3, r3
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	dc13      	bgt.n	8017e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017e50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017e52:	a912      	add	r1, sp, #72	; 0x48
 8017e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	9206      	str	r2, [sp, #24]
 8017e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e5e:	9500      	str	r5, [sp, #0]
 8017e60:	9205      	str	r2, [sp, #20]
 8017e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e64:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017e68:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017e6a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017e6e:	aa49      	add	r2, sp, #292	; 0x124
 8017e70:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8017e74:	4623      	mov	r3, r4
 8017e76:	47c8      	blx	r9
 8017e78:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017e7c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017e80:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e88:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017e8c:	68a1      	ldr	r1, [r4, #8]
 8017e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017e92:	ed94 6a08 	vldr	s12, [r4, #32]
 8017e96:	edd4 6a07 	vldr	s13, [r4, #28]
 8017e9a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017e9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ea2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017eaa:	edc4 6a07 	vstr	s13, [r4, #28]
 8017eae:	441a      	add	r2, r3
 8017eb0:	6963      	ldr	r3, [r4, #20]
 8017eb2:	3301      	adds	r3, #1
 8017eb4:	6022      	str	r2, [r4, #0]
 8017eb6:	6163      	str	r3, [r4, #20]
 8017eb8:	69a3      	ldr	r3, [r4, #24]
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	61a3      	str	r3, [r4, #24]
 8017ebe:	6923      	ldr	r3, [r4, #16]
 8017ec0:	440b      	add	r3, r1
 8017ec2:	68e1      	ldr	r1, [r4, #12]
 8017ec4:	428b      	cmp	r3, r1
 8017ec6:	6123      	str	r3, [r4, #16]
 8017ec8:	db15      	blt.n	8017ef6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017eca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017ece:	3201      	adds	r2, #1
 8017ed0:	1a5b      	subs	r3, r3, r1
 8017ed2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017ed6:	6022      	str	r2, [r4, #0]
 8017ed8:	6123      	str	r3, [r4, #16]
 8017eda:	edc4 6a07 	vstr	s13, [r4, #28]
 8017ede:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017ee2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017ee6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017eea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ef2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017ef6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017efa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017efe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017f02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f06:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017f0a:	68a9      	ldr	r1, [r5, #8]
 8017f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017f10:	ed95 6a08 	vldr	s12, [r5, #32]
 8017f14:	edd5 6a07 	vldr	s13, [r5, #28]
 8017f18:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017f1c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017f20:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017f28:	edc5 6a07 	vstr	s13, [r5, #28]
 8017f2c:	441a      	add	r2, r3
 8017f2e:	696b      	ldr	r3, [r5, #20]
 8017f30:	3301      	adds	r3, #1
 8017f32:	602a      	str	r2, [r5, #0]
 8017f34:	616b      	str	r3, [r5, #20]
 8017f36:	69ab      	ldr	r3, [r5, #24]
 8017f38:	3b01      	subs	r3, #1
 8017f3a:	61ab      	str	r3, [r5, #24]
 8017f3c:	692b      	ldr	r3, [r5, #16]
 8017f3e:	440b      	add	r3, r1
 8017f40:	68e9      	ldr	r1, [r5, #12]
 8017f42:	428b      	cmp	r3, r1
 8017f44:	612b      	str	r3, [r5, #16]
 8017f46:	db15      	blt.n	8017f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017f48:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017f4c:	3201      	adds	r2, #1
 8017f4e:	1a5b      	subs	r3, r3, r1
 8017f50:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017f54:	602a      	str	r2, [r5, #0]
 8017f56:	612b      	str	r3, [r5, #16]
 8017f58:	edc5 6a07 	vstr	s13, [r5, #28]
 8017f5c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017f60:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017f64:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017f68:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f70:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017f74:	3f01      	subs	r7, #1
 8017f76:	e757      	b.n	8017e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017f78:	4299      	cmp	r1, r3
 8017f7a:	dc13      	bgt.n	8017fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	da14      	bge.n	8017faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017f80:	2502      	movs	r5, #2
 8017f82:	2703      	movs	r7, #3
 8017f84:	f04f 0800 	mov.w	r8, #0
 8017f88:	46a9      	mov	r9, r5
 8017f8a:	f04f 0a01 	mov.w	sl, #1
 8017f8e:	e6ef      	b.n	8017d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017f90:	2501      	movs	r5, #1
 8017f92:	2700      	movs	r7, #0
 8017f94:	46a9      	mov	r9, r5
 8017f96:	46b8      	mov	r8, r7
 8017f98:	f04f 0a02 	mov.w	sl, #2
 8017f9c:	e6e8      	b.n	8017d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017f9e:	2501      	movs	r5, #1
 8017fa0:	2702      	movs	r7, #2
 8017fa2:	e6e1      	b.n	8017d68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017fa4:	2500      	movs	r5, #0
 8017fa6:	2701      	movs	r7, #1
 8017fa8:	e7f4      	b.n	8017f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017faa:	2702      	movs	r7, #2
 8017fac:	2503      	movs	r5, #3
 8017fae:	f04f 0900 	mov.w	r9, #0
 8017fb2:	46b8      	mov	r8, r7
 8017fb4:	e7e9      	b.n	8017f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	e728      	b.n	8017e0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017fba:	bf00      	nop
 8017fbc:	20056748 	.word	0x20056748
 8017fc0:	fffd8f01 	.word	0xfffd8f01
 8017fc4:	00027100 	.word	0x00027100
 8017fc8:	0004e1ff 	.word	0x0004e1ff
 8017fcc:	0004e1fe 	.word	0x0004e1fe
 8017fd0:	20056750 	.word	0x20056750
 8017fd4:	4613      	mov	r3, r2
 8017fd6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017fd8:	469e      	mov	lr, r3
 8017fda:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017fdc:	469c      	mov	ip, r3
 8017fde:	9111      	str	r1, [sp, #68]	; 0x44
 8017fe0:	f04f 0900 	mov.w	r9, #0
 8017fe4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017fe8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017fec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017ff0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017ff4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017ff8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017ffc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018000:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018004:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018008:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801800c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018010:	f1bc 0f00 	cmp.w	ip, #0
 8018014:	d147      	bne.n	80180a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018016:	eb03 0c07 	add.w	ip, r3, r7
 801801a:	1ad7      	subs	r7, r2, r3
 801801c:	f1b9 0f00 	cmp.w	r9, #0
 8018020:	d009      	beq.n	8018036 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018022:	9029      	str	r0, [sp, #164]	; 0xa4
 8018024:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018028:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801802c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018030:	912d      	str	r1, [sp, #180]	; 0xb4
 8018032:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018036:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018038:	f04f 0800 	mov.w	r8, #0
 801803c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018040:	9111      	str	r1, [sp, #68]	; 0x44
 8018042:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018046:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801804a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801804e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018052:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018056:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801805a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801805e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018062:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018066:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801806a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801806e:	f1be 0f00 	cmp.w	lr, #0
 8018072:	d031      	beq.n	80180d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018074:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018076:	4450      	add	r0, sl
 8018078:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801807c:	4431      	add	r1, r6
 801807e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018082:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018086:	4549      	cmp	r1, r9
 8018088:	db08      	blt.n	801809c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801808a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801808e:	3001      	adds	r0, #1
 8018090:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018094:	eba1 0109 	sub.w	r1, r1, r9
 8018098:	ee37 7a06 	vadd.f32	s14, s14, s12
 801809c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80180a0:	f04f 0801 	mov.w	r8, #1
 80180a4:	e7e3      	b.n	801806e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80180a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80180a8:	4450      	add	r0, sl
 80180aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80180ae:	4431      	add	r1, r6
 80180b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80180b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80180b8:	4541      	cmp	r1, r8
 80180ba:	db08      	blt.n	80180ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80180bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80180c0:	3001      	adds	r0, #1
 80180c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80180c6:	eba1 0108 	sub.w	r1, r1, r8
 80180ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80180ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80180d2:	f04f 0901 	mov.w	r9, #1
 80180d6:	e79b      	b.n	8018010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80180d8:	449c      	add	ip, r3
 80180da:	1aff      	subs	r7, r7, r3
 80180dc:	f1b8 0f00 	cmp.w	r8, #0
 80180e0:	d009      	beq.n	80180f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80180e2:	9019      	str	r0, [sp, #100]	; 0x64
 80180e4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80180e8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80180ec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80180f0:	911d      	str	r1, [sp, #116]	; 0x74
 80180f2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80180f6:	1ad2      	subs	r2, r2, r3
 80180f8:	e68b      	b.n	8017e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80180fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180fc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80180fe:	2b00      	cmp	r3, #0
 8018100:	f000 80d1 	beq.w	80182a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018104:	ad19      	add	r5, sp, #100	; 0x64
 8018106:	ac39      	add	r4, sp, #228	; 0xe4
 8018108:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801810a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801810e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018112:	930c      	str	r3, [sp, #48]	; 0x30
 8018114:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018116:	6963      	ldr	r3, [r4, #20]
 8018118:	440b      	add	r3, r1
 801811a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801811e:	4408      	add	r0, r1
 8018120:	b200      	sxth	r0, r0
 8018122:	4283      	cmp	r3, r0
 8018124:	900d      	str	r0, [sp, #52]	; 0x34
 8018126:	f280 80c1 	bge.w	80182ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801812a:	428b      	cmp	r3, r1
 801812c:	da08      	bge.n	8018140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801812e:	2a00      	cmp	r2, #0
 8018130:	dd06      	ble.n	8018140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018132:	1acb      	subs	r3, r1, r3
 8018134:	429a      	cmp	r2, r3
 8018136:	f2c0 80bb 	blt.w	80182b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801813a:	2b00      	cmp	r3, #0
 801813c:	f300 80b9 	bgt.w	80182b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018140:	6967      	ldr	r7, [r4, #20]
 8018142:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018148:	443b      	add	r3, r7
 801814a:	461f      	mov	r7, r3
 801814c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801814e:	1bdf      	subs	r7, r3, r7
 8018150:	4297      	cmp	r7, r2
 8018152:	bfa8      	it	ge
 8018154:	4617      	movge	r7, r2
 8018156:	2f00      	cmp	r7, #0
 8018158:	f340 813c 	ble.w	80183d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801815c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801815e:	6829      	ldr	r1, [r5, #0]
 8018160:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018164:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018168:	4411      	add	r1, r2
 801816a:	6820      	ldr	r0, [r4, #0]
 801816c:	4299      	cmp	r1, r3
 801816e:	dd1a      	ble.n	80181a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018170:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018174:	4402      	add	r2, r0
 8018176:	440b      	add	r3, r1
 8018178:	b21b      	sxth	r3, r3
 801817a:	429a      	cmp	r2, r3
 801817c:	dc13      	bgt.n	80181a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801817e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018180:	a912      	add	r1, sp, #72	; 0x48
 8018182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	9206      	str	r2, [sp, #24]
 801818a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801818c:	9500      	str	r5, [sp, #0]
 801818e:	9205      	str	r2, [sp, #20]
 8018190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018192:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018196:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018198:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801819c:	aa49      	add	r2, sp, #292	; 0x124
 801819e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80181a2:	4623      	mov	r3, r4
 80181a4:	47c8      	blx	r9
 80181a6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80181aa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80181ae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80181b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80181b6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80181ba:	68a1      	ldr	r1, [r4, #8]
 80181bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80181c0:	ed94 6a08 	vldr	s12, [r4, #32]
 80181c4:	edd4 6a07 	vldr	s13, [r4, #28]
 80181c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80181cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80181d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80181d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80181d8:	edc4 6a07 	vstr	s13, [r4, #28]
 80181dc:	441a      	add	r2, r3
 80181de:	6963      	ldr	r3, [r4, #20]
 80181e0:	3301      	adds	r3, #1
 80181e2:	6022      	str	r2, [r4, #0]
 80181e4:	6163      	str	r3, [r4, #20]
 80181e6:	69a3      	ldr	r3, [r4, #24]
 80181e8:	3b01      	subs	r3, #1
 80181ea:	61a3      	str	r3, [r4, #24]
 80181ec:	6923      	ldr	r3, [r4, #16]
 80181ee:	440b      	add	r3, r1
 80181f0:	68e1      	ldr	r1, [r4, #12]
 80181f2:	428b      	cmp	r3, r1
 80181f4:	6123      	str	r3, [r4, #16]
 80181f6:	db15      	blt.n	8018224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80181f8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80181fc:	3201      	adds	r2, #1
 80181fe:	1a5b      	subs	r3, r3, r1
 8018200:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018204:	6022      	str	r2, [r4, #0]
 8018206:	6123      	str	r3, [r4, #16]
 8018208:	edc4 6a07 	vstr	s13, [r4, #28]
 801820c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018210:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018214:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018218:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801821c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018220:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018224:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018228:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801822c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018234:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018238:	68a9      	ldr	r1, [r5, #8]
 801823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801823e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018242:	edd5 6a07 	vldr	s13, [r5, #28]
 8018246:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801824a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801824e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018252:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018256:	edc5 6a07 	vstr	s13, [r5, #28]
 801825a:	441a      	add	r2, r3
 801825c:	696b      	ldr	r3, [r5, #20]
 801825e:	3301      	adds	r3, #1
 8018260:	602a      	str	r2, [r5, #0]
 8018262:	616b      	str	r3, [r5, #20]
 8018264:	69ab      	ldr	r3, [r5, #24]
 8018266:	3b01      	subs	r3, #1
 8018268:	61ab      	str	r3, [r5, #24]
 801826a:	692b      	ldr	r3, [r5, #16]
 801826c:	440b      	add	r3, r1
 801826e:	68e9      	ldr	r1, [r5, #12]
 8018270:	428b      	cmp	r3, r1
 8018272:	612b      	str	r3, [r5, #16]
 8018274:	db15      	blt.n	80182a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018276:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801827a:	3201      	adds	r2, #1
 801827c:	1a5b      	subs	r3, r3, r1
 801827e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018282:	602a      	str	r2, [r5, #0]
 8018284:	612b      	str	r3, [r5, #16]
 8018286:	edc5 6a07 	vstr	s13, [r5, #28]
 801828a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801828e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018292:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018296:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801829a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801829e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80182a2:	3f01      	subs	r7, #1
 80182a4:	e757      	b.n	8018156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80182a6:	ad39      	add	r5, sp, #228	; 0xe4
 80182a8:	ac19      	add	r4, sp, #100	; 0x64
 80182aa:	e72d      	b.n	8018108 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80182ac:	4613      	mov	r3, r2
 80182ae:	e744      	b.n	801813a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80182b0:	4613      	mov	r3, r2
 80182b2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80182b4:	469e      	mov	lr, r3
 80182b6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80182ba:	461f      	mov	r7, r3
 80182bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80182c0:	f04f 0900 	mov.w	r9, #0
 80182c4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80182c8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80182cc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80182d0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80182d4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80182d8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80182da:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80182de:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80182e2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80182e6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80182ea:	960e      	str	r6, [sp, #56]	; 0x38
 80182ec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80182f0:	2f00      	cmp	r7, #0
 80182f2:	d146      	bne.n	8018382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80182f4:	449c      	add	ip, r3
 80182f6:	1ad7      	subs	r7, r2, r3
 80182f8:	f1b9 0f00 	cmp.w	r9, #0
 80182fc:	d009      	beq.n	8018312 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80182fe:	9039      	str	r0, [sp, #228]	; 0xe4
 8018300:	913d      	str	r1, [sp, #244]	; 0xf4
 8018302:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018306:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801830a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801830e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018312:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018314:	f04f 0800 	mov.w	r8, #0
 8018318:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801831c:	910e      	str	r1, [sp, #56]	; 0x38
 801831e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018322:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018326:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801832a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801832e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018332:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018336:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801833a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801833e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018342:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018346:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801834a:	f1be 0f00 	cmp.w	lr, #0
 801834e:	d030      	beq.n	80183b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018350:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018352:	4450      	add	r0, sl
 8018354:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018358:	4431      	add	r1, r6
 801835a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801835e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018362:	4549      	cmp	r1, r9
 8018364:	db08      	blt.n	8018378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018366:	ee77 7a85 	vadd.f32	s15, s15, s10
 801836a:	3001      	adds	r0, #1
 801836c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018370:	eba1 0109 	sub.w	r1, r1, r9
 8018374:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018378:	f10e 3eff 	add.w	lr, lr, #4294967295
 801837c:	f04f 0801 	mov.w	r8, #1
 8018380:	e7e3      	b.n	801834a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018382:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018384:	4450      	add	r0, sl
 8018386:	ee37 7a24 	vadd.f32	s14, s14, s9
 801838a:	4431      	add	r1, r6
 801838c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018390:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018394:	4541      	cmp	r1, r8
 8018396:	db08      	blt.n	80183aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018398:	ee76 6a85 	vadd.f32	s13, s13, s10
 801839c:	3001      	adds	r0, #1
 801839e:	ee37 7a25 	vadd.f32	s14, s14, s11
 80183a2:	eba1 0108 	sub.w	r1, r1, r8
 80183a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80183aa:	3f01      	subs	r7, #1
 80183ac:	f04f 0901 	mov.w	r9, #1
 80183b0:	e79e      	b.n	80182f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80183b2:	449c      	add	ip, r3
 80183b4:	1aff      	subs	r7, r7, r3
 80183b6:	f1b8 0f00 	cmp.w	r8, #0
 80183ba:	d009      	beq.n	80183d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80183bc:	9019      	str	r0, [sp, #100]	; 0x64
 80183be:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80183c2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80183c6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80183ca:	911d      	str	r1, [sp, #116]	; 0x74
 80183cc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80183d0:	1ad2      	subs	r2, r2, r3
 80183d2:	e6b5      	b.n	8018140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80183d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	b923      	cbnz	r3, 80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80183da:	4b04      	ldr	r3, [pc, #16]	; (80183ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80183dc:	6818      	ldr	r0, [r3, #0]
 80183de:	6803      	ldr	r3, [r0, #0]
 80183e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183e2:	4798      	blx	r3
 80183e4:	b05b      	add	sp, #364	; 0x16c
 80183e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183ea:	bf00      	nop
 80183ec:	20056750 	.word	0x20056750

080183f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80183f0:	b570      	push	{r4, r5, r6, lr}
 80183f2:	4604      	mov	r4, r0
 80183f4:	2500      	movs	r5, #0
 80183f6:	9804      	ldr	r0, [sp, #16]
 80183f8:	7223      	strb	r3, [r4, #8]
 80183fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80183fe:	8025      	strh	r5, [r4, #0]
 8018400:	6061      	str	r1, [r4, #4]
 8018402:	7263      	strb	r3, [r4, #9]
 8018404:	60e0      	str	r0, [r4, #12]
 8018406:	8222      	strh	r2, [r4, #16]
 8018408:	8265      	strh	r5, [r4, #18]
 801840a:	82a5      	strh	r5, [r4, #20]
 801840c:	82e5      	strh	r5, [r4, #22]
 801840e:	8325      	strh	r5, [r4, #24]
 8018410:	8365      	strh	r5, [r4, #26]
 8018412:	83a5      	strh	r5, [r4, #28]
 8018414:	77a5      	strb	r5, [r4, #30]
 8018416:	6803      	ldr	r3, [r0, #0]
 8018418:	695b      	ldr	r3, [r3, #20]
 801841a:	4798      	blx	r3
 801841c:	4606      	mov	r6, r0
 801841e:	b1f8      	cbz	r0, 8018460 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018420:	68e0      	ldr	r0, [r4, #12]
 8018422:	4631      	mov	r1, r6
 8018424:	6803      	ldr	r3, [r0, #0]
 8018426:	68db      	ldr	r3, [r3, #12]
 8018428:	4798      	blx	r3
 801842a:	7b43      	ldrb	r3, [r0, #13]
 801842c:	7a82      	ldrb	r2, [r0, #10]
 801842e:	4605      	mov	r5, r0
 8018430:	005b      	lsls	r3, r3, #1
 8018432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018436:	4313      	orrs	r3, r2
 8018438:	83a3      	strh	r3, [r4, #28]
 801843a:	7a63      	ldrb	r3, [r4, #9]
 801843c:	2b04      	cmp	r3, #4
 801843e:	d10f      	bne.n	8018460 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018440:	68e0      	ldr	r0, [r4, #12]
 8018442:	462a      	mov	r2, r5
 8018444:	4631      	mov	r1, r6
 8018446:	6803      	ldr	r3, [r0, #0]
 8018448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801844a:	4798      	blx	r3
 801844c:	7b6b      	ldrb	r3, [r5, #13]
 801844e:	005b      	lsls	r3, r3, #1
 8018450:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018454:	7aab      	ldrb	r3, [r5, #10]
 8018456:	4313      	orrs	r3, r2
 8018458:	4418      	add	r0, r3
 801845a:	8ba3      	ldrh	r3, [r4, #28]
 801845c:	4418      	add	r0, r3
 801845e:	83a0      	strh	r0, [r4, #28]
 8018460:	4620      	mov	r0, r4
 8018462:	bd70      	pop	{r4, r5, r6, pc}

08018464 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	2400      	movs	r4, #0
 801846a:	b085      	sub	sp, #20
 801846c:	4681      	mov	r9, r0
 801846e:	4688      	mov	r8, r1
 8018470:	4692      	mov	sl, r2
 8018472:	469b      	mov	fp, r3
 8018474:	4627      	mov	r7, r4
 8018476:	4625      	mov	r5, r4
 8018478:	4626      	mov	r6, r4
 801847a:	4554      	cmp	r4, sl
 801847c:	da2a      	bge.n	80184d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801847e:	2300      	movs	r3, #0
 8018480:	9303      	str	r3, [sp, #12]
 8018482:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018486:	429d      	cmp	r5, r3
 8018488:	d004      	beq.n	8018494 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801848a:	f242 030b 	movw	r3, #8203	; 0x200b
 801848e:	429d      	cmp	r5, r3
 8018490:	bf18      	it	ne
 8018492:	462f      	movne	r7, r5
 8018494:	ab03      	add	r3, sp, #12
 8018496:	4642      	mov	r2, r8
 8018498:	4659      	mov	r1, fp
 801849a:	4648      	mov	r0, r9
 801849c:	f002 ff30 	bl	801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80184a0:	4605      	mov	r5, r0
 80184a2:	b1b8      	cbz	r0, 80184d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80184a4:	280a      	cmp	r0, #10
 80184a6:	d015      	beq.n	80184d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80184a8:	9a03      	ldr	r2, [sp, #12]
 80184aa:	b18a      	cbz	r2, 80184d0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80184ac:	7b50      	ldrb	r0, [r2, #13]
 80184ae:	4639      	mov	r1, r7
 80184b0:	7a93      	ldrb	r3, [r2, #10]
 80184b2:	0040      	lsls	r0, r0, #1
 80184b4:	8895      	ldrh	r5, [r2, #4]
 80184b6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80184ba:	4303      	orrs	r3, r0
 80184bc:	4640      	mov	r0, r8
 80184be:	9301      	str	r3, [sp, #4]
 80184c0:	f8d8 3000 	ldr.w	r3, [r8]
 80184c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184c6:	4798      	blx	r3
 80184c8:	9b01      	ldr	r3, [sp, #4]
 80184ca:	4418      	add	r0, r3
 80184cc:	4406      	add	r6, r0
 80184ce:	b2b6      	uxth	r6, r6
 80184d0:	3401      	adds	r4, #1
 80184d2:	e7d2      	b.n	801847a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80184d4:	4630      	mov	r0, r6
 80184d6:	b005      	add	sp, #20
 80184d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80184dc:	2a02      	cmp	r2, #2
 80184de:	b530      	push	{r4, r5, lr}
 80184e0:	d011      	beq.n	8018506 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80184e2:	2a03      	cmp	r2, #3
 80184e4:	d01c      	beq.n	8018520 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80184e6:	2a01      	cmp	r2, #1
 80184e8:	d10c      	bne.n	8018504 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80184ea:	888b      	ldrh	r3, [r1, #4]
 80184ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80184f0:	8801      	ldrh	r1, [r0, #0]
 80184f2:	1a9b      	subs	r3, r3, r2
 80184f4:	8844      	ldrh	r4, [r0, #2]
 80184f6:	1a5b      	subs	r3, r3, r1
 80184f8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80184fc:	8004      	strh	r4, [r0, #0]
 80184fe:	8043      	strh	r3, [r0, #2]
 8018500:	8081      	strh	r1, [r0, #4]
 8018502:	80c2      	strh	r2, [r0, #6]
 8018504:	bd30      	pop	{r4, r5, pc}
 8018506:	88cb      	ldrh	r3, [r1, #6]
 8018508:	88c2      	ldrh	r2, [r0, #6]
 801850a:	1a9b      	subs	r3, r3, r2
 801850c:	8842      	ldrh	r2, [r0, #2]
 801850e:	1a9b      	subs	r3, r3, r2
 8018510:	888a      	ldrh	r2, [r1, #4]
 8018512:	8881      	ldrh	r1, [r0, #4]
 8018514:	8043      	strh	r3, [r0, #2]
 8018516:	1a52      	subs	r2, r2, r1
 8018518:	8801      	ldrh	r1, [r0, #0]
 801851a:	1a52      	subs	r2, r2, r1
 801851c:	8002      	strh	r2, [r0, #0]
 801851e:	e7f1      	b.n	8018504 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018520:	88cb      	ldrh	r3, [r1, #6]
 8018522:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018526:	8841      	ldrh	r1, [r0, #2]
 8018528:	1a9b      	subs	r3, r3, r2
 801852a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801852e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018532:	1a5b      	subs	r3, r3, r1
 8018534:	8045      	strh	r5, [r0, #2]
 8018536:	8082      	strh	r2, [r0, #4]
 8018538:	8003      	strh	r3, [r0, #0]
 801853a:	80c4      	strh	r4, [r0, #6]
 801853c:	e7e2      	b.n	8018504 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801853e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801853e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018542:	b09f      	sub	sp, #124	; 0x7c
 8018544:	9116      	str	r1, [sp, #88]	; 0x58
 8018546:	9317      	str	r3, [sp, #92]	; 0x5c
 8018548:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801854a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801854c:	8809      	ldrh	r1, [r1, #0]
 801854e:	889b      	ldrh	r3, [r3, #4]
 8018550:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018554:	440b      	add	r3, r1
 8018556:	9212      	str	r2, [sp, #72]	; 0x48
 8018558:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801855c:	b21b      	sxth	r3, r3
 801855e:	9011      	str	r0, [sp, #68]	; 0x44
 8018560:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018564:	9310      	str	r3, [sp, #64]	; 0x40
 8018566:	f8d8 3000 	ldr.w	r3, [r8]
 801856a:	7a59      	ldrb	r1, [r3, #9]
 801856c:	7a1b      	ldrb	r3, [r3, #8]
 801856e:	9114      	str	r1, [sp, #80]	; 0x50
 8018570:	9315      	str	r3, [sp, #84]	; 0x54
 8018572:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018574:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018578:	2a00      	cmp	r2, #0
 801857a:	d067      	beq.n	801864c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801857c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018580:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018582:	2b04      	cmp	r3, #4
 8018584:	bf14      	ite	ne
 8018586:	2301      	movne	r3, #1
 8018588:	2302      	moveq	r3, #2
 801858a:	4413      	add	r3, r2
 801858c:	f04f 0900 	mov.w	r9, #0
 8018590:	930f      	str	r3, [sp, #60]	; 0x3c
 8018592:	464c      	mov	r4, r9
 8018594:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018598:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801859c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80185a0:	4293      	cmp	r3, r2
 80185a2:	f280 808c 	bge.w	80186be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80185a6:	2300      	movs	r3, #0
 80185a8:	931c      	str	r3, [sp, #112]	; 0x70
 80185aa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80185ae:	429c      	cmp	r4, r3
 80185b0:	d006      	beq.n	80185c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80185b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185b4:	f242 020b 	movw	r2, #8203	; 0x200b
 80185b8:	4294      	cmp	r4, r2
 80185ba:	bf18      	it	ne
 80185bc:	4623      	movne	r3, r4
 80185be:	930d      	str	r3, [sp, #52]	; 0x34
 80185c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185c2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80185c4:	f8d8 2000 	ldr.w	r2, [r8]
 80185c8:	428b      	cmp	r3, r1
 80185ca:	db41      	blt.n	8018650 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80185cc:	6813      	ldr	r3, [r2, #0]
 80185ce:	4610      	mov	r0, r2
 80185d0:	695b      	ldr	r3, [r3, #20]
 80185d2:	4798      	blx	r3
 80185d4:	4604      	mov	r4, r0
 80185d6:	f8d8 0000 	ldr.w	r0, [r8]
 80185da:	aa1d      	add	r2, sp, #116	; 0x74
 80185dc:	4621      	mov	r1, r4
 80185de:	6803      	ldr	r3, [r0, #0]
 80185e0:	689e      	ldr	r6, [r3, #8]
 80185e2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80185e6:	47b0      	blx	r6
 80185e8:	901c      	str	r0, [sp, #112]	; 0x70
 80185ea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80185ee:	429c      	cmp	r4, r3
 80185f0:	f000 80ea 	beq.w	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80185f4:	f242 030b 	movw	r3, #8203	; 0x200b
 80185f8:	429c      	cmp	r4, r3
 80185fa:	f000 80e5 	beq.w	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80185fe:	2c00      	cmp	r4, #0
 8018600:	f000 80f7 	beq.w	80187f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018604:	2c0a      	cmp	r4, #10
 8018606:	d060      	beq.n	80186ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018608:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801860a:	b36a      	cbz	r2, 8018668 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801860c:	8894      	ldrh	r4, [r2, #4]
 801860e:	f1bb 0f00 	cmp.w	fp, #0
 8018612:	d03b      	beq.n	801868c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018614:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018618:	f1bb 0f01 	cmp.w	fp, #1
 801861c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018620:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018624:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018628:	ea49 0903 	orr.w	r9, r9, r3
 801862c:	d134      	bne.n	8018698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801862e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018630:	eba5 0509 	sub.w	r5, r5, r9
 8018634:	2b00      	cmp	r3, #0
 8018636:	d14f      	bne.n	80186d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801863a:	eb09 0305 	add.w	r3, r9, r5
 801863e:	4413      	add	r3, r2
 8018640:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018642:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018646:	4293      	cmp	r3, r2
 8018648:	da51      	bge.n	80186ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801864a:	e038      	b.n	80186be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801864c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801864e:	e79d      	b.n	801858c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018650:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018654:	4659      	mov	r1, fp
 8018656:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018658:	9301      	str	r3, [sp, #4]
 801865a:	ab1d      	add	r3, sp, #116	; 0x74
 801865c:	9300      	str	r3, [sp, #0]
 801865e:	ab1c      	add	r3, sp, #112	; 0x70
 8018660:	f002 fea6 	bl	801b3b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018664:	4604      	mov	r4, r0
 8018666:	e7c0      	b.n	80185ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018668:	f8d8 0000 	ldr.w	r0, [r8]
 801866c:	6803      	ldr	r3, [r0, #0]
 801866e:	691b      	ldr	r3, [r3, #16]
 8018670:	4798      	blx	r3
 8018672:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018676:	4298      	cmp	r0, r3
 8018678:	f000 80a6 	beq.w	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801867c:	f242 030b 	movw	r3, #8203	; 0x200b
 8018680:	4298      	cmp	r0, r3
 8018682:	f000 80a1 	beq.w	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018686:	f1bb 0f00 	cmp.w	fp, #0
 801868a:	d100      	bne.n	801868e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801868c:	444d      	add	r5, r9
 801868e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018690:	2a00      	cmp	r2, #0
 8018692:	d1bf      	bne.n	8018614 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8018694:	4691      	mov	r9, r2
 8018696:	e097      	b.n	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801869a:	2b00      	cmp	r3, #0
 801869c:	f000 80ab 	beq.w	80187f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80186a0:	f1bb 0f00 	cmp.w	fp, #0
 80186a4:	d118      	bne.n	80186d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80186a6:	f8d8 0000 	ldr.w	r0, [r8]
 80186aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80186ac:	6803      	ldr	r3, [r0, #0]
 80186ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186b0:	4798      	blx	r3
 80186b2:	4405      	add	r5, r0
 80186b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80186b8:	1aeb      	subs	r3, r5, r3
 80186ba:	4293      	cmp	r3, r2
 80186bc:	dd17      	ble.n	80186ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80186be:	2c00      	cmp	r4, #0
 80186c0:	f000 8097 	beq.w	80187f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80186c4:	2c0a      	cmp	r4, #10
 80186c6:	f040 8085 	bne.w	80187d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80186ca:	240a      	movs	r4, #10
 80186cc:	fab4 f084 	clz	r0, r4
 80186d0:	0940      	lsrs	r0, r0, #5
 80186d2:	b01f      	add	sp, #124	; 0x7c
 80186d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186d8:	f8d8 0000 	ldr.w	r0, [r8]
 80186dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80186de:	6803      	ldr	r3, [r0, #0]
 80186e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186e2:	4798      	blx	r3
 80186e4:	f1bb 0f01 	cmp.w	fp, #1
 80186e8:	eba5 0500 	sub.w	r5, r5, r0
 80186ec:	d0a4      	beq.n	8018638 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80186ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 80186f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80186f2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80186f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80186fa:	7b43      	ldrb	r3, [r0, #13]
 80186fc:	4429      	add	r1, r5
 80186fe:	015b      	lsls	r3, r3, #5
 8018700:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018704:	7983      	ldrb	r3, [r0, #6]
 8018706:	4313      	orrs	r3, r2
 8018708:	440b      	add	r3, r1
 801870a:	42b3      	cmp	r3, r6
 801870c:	db5c      	blt.n	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801870e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018710:	4299      	cmp	r1, r3
 8018712:	da59      	bge.n	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018714:	f8d8 0000 	ldr.w	r0, [r8]
 8018718:	42ae      	cmp	r6, r5
 801871a:	6803      	ldr	r3, [r0, #0]
 801871c:	bfcc      	ite	gt
 801871e:	1b76      	subgt	r6, r6, r5
 8018720:	2600      	movle	r6, #0
 8018722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018724:	bfc8      	it	gt
 8018726:	b2b6      	uxthgt	r6, r6
 8018728:	4798      	blx	r3
 801872a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801872c:	7b5a      	ldrb	r2, [r3, #13]
 801872e:	00d1      	lsls	r1, r2, #3
 8018730:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018734:	7a19      	ldrb	r1, [r3, #8]
 8018736:	4339      	orrs	r1, r7
 8018738:	0657      	lsls	r7, r2, #25
 801873a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801873c:	bf48      	it	mi
 801873e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018742:	4407      	add	r7, r0
 8018744:	bf48      	it	mi
 8018746:	b209      	sxthmi	r1, r1
 8018748:	1a7f      	subs	r7, r7, r1
 801874a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801874c:	b2bf      	uxth	r7, r7
 801874e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018752:	fa0f fa87 	sxth.w	sl, r7
 8018756:	4551      	cmp	r1, sl
 8018758:	dd3a      	ble.n	80187d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801875a:	0112      	lsls	r2, r2, #4
 801875c:	79d8      	ldrb	r0, [r3, #7]
 801875e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018762:	4302      	orrs	r2, r0
 8018764:	4492      	add	sl, r2
 8018766:	4551      	cmp	r1, sl
 8018768:	dc2e      	bgt.n	80187c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801876a:	1bcf      	subs	r7, r1, r7
 801876c:	468a      	mov	sl, r1
 801876e:	b2bf      	uxth	r7, r7
 8018770:	9319      	str	r3, [sp, #100]	; 0x64
 8018772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018774:	f8d8 0000 	ldr.w	r0, [r8]
 8018778:	681a      	ldr	r2, [r3, #0]
 801877a:	6801      	ldr	r1, [r0, #0]
 801877c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801877e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018780:	9313      	str	r3, [sp, #76]	; 0x4c
 8018782:	9218      	str	r2, [sp, #96]	; 0x60
 8018784:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018786:	4788      	blx	r1
 8018788:	f898 1006 	ldrb.w	r1, [r8, #6]
 801878c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801878e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018790:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018794:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018796:	910a      	str	r1, [sp, #40]	; 0x28
 8018798:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801879c:	9109      	str	r1, [sp, #36]	; 0x24
 801879e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80187a2:	9305      	str	r3, [sp, #20]
 80187a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80187a6:	9206      	str	r2, [sp, #24]
 80187a8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80187ac:	442e      	add	r6, r5
 80187ae:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80187b2:	b236      	sxth	r6, r6
 80187b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80187b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80187ba:	9600      	str	r6, [sp, #0]
 80187bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80187be:	681a      	ldr	r2, [r3, #0]
 80187c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80187c6:	47b0      	blx	r6
 80187c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187ca:	3301      	adds	r3, #1
 80187cc:	930e      	str	r3, [sp, #56]	; 0x38
 80187ce:	e6e5      	b.n	801859c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80187d0:	2700      	movs	r7, #0
 80187d2:	e7cd      	b.n	8018770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80187d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80187d6:	3501      	adds	r5, #1
 80187d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80187da:	429d      	cmp	r5, r3
 80187dc:	f6bf af76 	bge.w	80186cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80187e0:	4659      	mov	r1, fp
 80187e2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80187e4:	f7f0 f912 	bl	8008a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80187e8:	4604      	mov	r4, r0
 80187ea:	b110      	cbz	r0, 80187f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80187ec:	280a      	cmp	r0, #10
 80187ee:	d1f2      	bne.n	80187d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80187f0:	e76b      	b.n	80186ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80187f2:	2400      	movs	r4, #0
 80187f4:	e76a      	b.n	80186cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80187f6:	f1bb 0f00 	cmp.w	fp, #0
 80187fa:	f43f af5b 	beq.w	80186b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80187fe:	e776      	b.n	80186ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018800 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018800:	b530      	push	{r4, r5, lr}
 8018802:	8a44      	ldrh	r4, [r0, #18]
 8018804:	8ac5      	ldrh	r5, [r0, #22]
 8018806:	82c3      	strh	r3, [r0, #22]
 8018808:	442c      	add	r4, r5
 801880a:	1ae4      	subs	r4, r4, r3
 801880c:	8b03      	ldrh	r3, [r0, #24]
 801880e:	8244      	strh	r4, [r0, #18]
 8018810:	8a84      	ldrh	r4, [r0, #20]
 8018812:	4422      	add	r2, r4
 8018814:	440c      	add	r4, r1
 8018816:	1a59      	subs	r1, r3, r1
 8018818:	8342      	strh	r2, [r0, #26]
 801881a:	8284      	strh	r4, [r0, #20]
 801881c:	8301      	strh	r1, [r0, #24]
 801881e:	bd30      	pop	{r4, r5, pc}

08018820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018824:	7a43      	ldrb	r3, [r0, #9]
 8018826:	b087      	sub	sp, #28
 8018828:	4604      	mov	r4, r0
 801882a:	460f      	mov	r7, r1
 801882c:	1eda      	subs	r2, r3, #3
 801882e:	b2d2      	uxtb	r2, r2
 8018830:	2900      	cmp	r1, #0
 8018832:	d036      	beq.n	80188a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018834:	2a01      	cmp	r2, #1
 8018836:	d932      	bls.n	801889e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018838:	1e58      	subs	r0, r3, #1
 801883a:	f1d0 0b00 	rsbs	fp, r0, #0
 801883e:	eb4b 0b00 	adc.w	fp, fp, r0
 8018842:	1e99      	subs	r1, r3, #2
 8018844:	424b      	negs	r3, r1
 8018846:	414b      	adcs	r3, r1
 8018848:	9303      	str	r3, [sp, #12]
 801884a:	2300      	movs	r3, #0
 801884c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018850:	2500      	movs	r5, #0
 8018852:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018856:	46a9      	mov	r9, r5
 8018858:	8265      	strh	r5, [r4, #18]
 801885a:	82a5      	strh	r5, [r4, #20]
 801885c:	2300      	movs	r3, #0
 801885e:	9305      	str	r3, [sp, #20]
 8018860:	8823      	ldrh	r3, [r4, #0]
 8018862:	2b20      	cmp	r3, #32
 8018864:	d02b      	beq.n	80188be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018866:	eba3 020a 	sub.w	r2, r3, sl
 801886a:	4256      	negs	r6, r2
 801886c:	4156      	adcs	r6, r2
 801886e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018872:	4293      	cmp	r3, r2
 8018874:	d004      	beq.n	8018880 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018876:	4553      	cmp	r3, sl
 8018878:	bf16      	itet	ne
 801887a:	4699      	movne	r9, r3
 801887c:	2601      	moveq	r6, #1
 801887e:	2600      	movne	r6, #0
 8018880:	ab05      	add	r3, sp, #20
 8018882:	68e2      	ldr	r2, [r4, #12]
 8018884:	7a21      	ldrb	r1, [r4, #8]
 8018886:	6860      	ldr	r0, [r4, #4]
 8018888:	f002 fd3a 	bl	801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801888c:	8020      	strh	r0, [r4, #0]
 801888e:	b9c8      	cbnz	r0, 80188c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018890:	8b22      	ldrh	r2, [r4, #24]
 8018892:	2300      	movs	r3, #0
 8018894:	4611      	mov	r1, r2
 8018896:	4620      	mov	r0, r4
 8018898:	f7ff ffb2 	bl	8018800 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801889c:	e066      	b.n	801896c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801889e:	468b      	mov	fp, r1
 80188a0:	e7cf      	b.n	8018842 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80188a2:	3b01      	subs	r3, #1
 80188a4:	2a01      	cmp	r2, #1
 80188a6:	9103      	str	r1, [sp, #12]
 80188a8:	468b      	mov	fp, r1
 80188aa:	bf8c      	ite	hi
 80188ac:	2200      	movhi	r2, #0
 80188ae:	2201      	movls	r2, #1
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	9202      	str	r2, [sp, #8]
 80188b4:	bf8c      	ite	hi
 80188b6:	2300      	movhi	r3, #0
 80188b8:	2301      	movls	r3, #1
 80188ba:	9301      	str	r3, [sp, #4]
 80188bc:	e7c8      	b.n	8018850 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80188be:	4699      	mov	r9, r3
 80188c0:	2601      	movs	r6, #1
 80188c2:	e7dd      	b.n	8018880 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80188c4:	8ae3      	ldrh	r3, [r4, #22]
 80188c6:	280a      	cmp	r0, #10
 80188c8:	f103 0301 	add.w	r3, r3, #1
 80188cc:	82e3      	strh	r3, [r4, #22]
 80188ce:	d0df      	beq.n	8018890 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80188d0:	9a05      	ldr	r2, [sp, #20]
 80188d2:	bb42      	cbnz	r2, 8018926 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80188d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80188d8:	4298      	cmp	r0, r3
 80188da:	d001      	beq.n	80188e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80188dc:	4550      	cmp	r0, sl
 80188de:	d1bd      	bne.n	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80188e0:	8823      	ldrh	r3, [r4, #0]
 80188e2:	8b21      	ldrh	r1, [r4, #24]
 80188e4:	2b20      	cmp	r3, #32
 80188e6:	d001      	beq.n	80188ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80188e8:	4553      	cmp	r3, sl
 80188ea:	d131      	bne.n	8018950 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80188ec:	2e00      	cmp	r6, #0
 80188ee:	bf0a      	itet	eq
 80188f0:	460d      	moveq	r5, r1
 80188f2:	4630      	movne	r0, r6
 80188f4:	2001      	moveq	r0, #1
 80188f6:	440a      	add	r2, r1
 80188f8:	8aa3      	ldrh	r3, [r4, #20]
 80188fa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80188fe:	b292      	uxth	r2, r2
 8018900:	8322      	strh	r2, [r4, #24]
 8018902:	4413      	add	r3, r2
 8018904:	2f00      	cmp	r7, #0
 8018906:	d03a      	beq.n	801897e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018908:	f1bb 0f00 	cmp.w	fp, #0
 801890c:	d102      	bne.n	8018914 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801890e:	9903      	ldr	r1, [sp, #12]
 8018910:	b301      	cbz	r1, 8018954 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018912:	b1f8      	cbz	r0, 8018954 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018914:	8ba1      	ldrh	r1, [r4, #28]
 8018916:	4419      	add	r1, r3
 8018918:	458c      	cmp	ip, r1
 801891a:	da2a      	bge.n	8018972 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801891c:	8a61      	ldrh	r1, [r4, #18]
 801891e:	b341      	cbz	r1, 8018972 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018920:	4563      	cmp	r3, ip
 8018922:	dd9b      	ble.n	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018924:	e01c      	b.n	8018960 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018926:	8893      	ldrh	r3, [r2, #4]
 8018928:	4649      	mov	r1, r9
 801892a:	8023      	strh	r3, [r4, #0]
 801892c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018930:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018934:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018938:	f892 800a 	ldrb.w	r8, [r2, #10]
 801893c:	ea48 0800 	orr.w	r8, r8, r0
 8018940:	68e0      	ldr	r0, [r4, #12]
 8018942:	6803      	ldr	r3, [r0, #0]
 8018944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018946:	4798      	blx	r3
 8018948:	eb08 0200 	add.w	r2, r8, r0
 801894c:	b292      	uxth	r2, r2
 801894e:	e7c7      	b.n	80188e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018950:	2000      	movs	r0, #0
 8018952:	e7d0      	b.n	80188f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018954:	4563      	cmp	r3, ip
 8018956:	dd81      	ble.n	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018958:	8a63      	ldrh	r3, [r4, #18]
 801895a:	2b00      	cmp	r3, #0
 801895c:	f43f af7e 	beq.w	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018960:	2301      	movs	r3, #1
 8018962:	8ba2      	ldrh	r2, [r4, #28]
 8018964:	77a3      	strb	r3, [r4, #30]
 8018966:	8b63      	ldrh	r3, [r4, #26]
 8018968:	4413      	add	r3, r2
 801896a:	8363      	strh	r3, [r4, #26]
 801896c:	b007      	add	sp, #28
 801896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018972:	2300      	movs	r3, #0
 8018974:	4611      	mov	r1, r2
 8018976:	4620      	mov	r0, r4
 8018978:	f7ff ff42 	bl	8018800 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801897c:	e76e      	b.n	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801897e:	4563      	cmp	r3, ip
 8018980:	dd14      	ble.n	80189ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018982:	9b02      	ldr	r3, [sp, #8]
 8018984:	b113      	cbz	r3, 801898c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018986:	2301      	movs	r3, #1
 8018988:	460a      	mov	r2, r1
 801898a:	e783      	b.n	8018894 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801898c:	9b01      	ldr	r3, [sp, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	f43f af64 	beq.w	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018994:	2800      	cmp	r0, #0
 8018996:	f47f af61 	bne.w	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801899a:	b116      	cbz	r6, 80189a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801899c:	2301      	movs	r3, #1
 801899e:	462a      	mov	r2, r5
 80189a0:	e779      	b.n	8018896 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80189a2:	8a63      	ldrh	r3, [r4, #18]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	f43f af59 	beq.w	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80189aa:	e7df      	b.n	801896c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80189ac:	2800      	cmp	r0, #0
 80189ae:	f47f af55 	bne.w	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80189b2:	2e00      	cmp	r6, #0
 80189b4:	f43f af52 	beq.w	801885c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80189b8:	2301      	movs	r3, #1
 80189ba:	462a      	mov	r2, r5
 80189bc:	e7db      	b.n	8018976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080189be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80189be:	b530      	push	{r4, r5, lr}
 80189c0:	4605      	mov	r5, r0
 80189c2:	b08b      	sub	sp, #44	; 0x2c
 80189c4:	b191      	cbz	r1, 80189ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80189c6:	2401      	movs	r4, #1
 80189c8:	e9cd 3100 	strd	r3, r1, [sp]
 80189cc:	4613      	mov	r3, r2
 80189ce:	4601      	mov	r1, r0
 80189d0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80189d4:	a802      	add	r0, sp, #8
 80189d6:	f7ff fd0b 	bl	80183f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80189da:	2100      	movs	r1, #0
 80189dc:	a802      	add	r0, sp, #8
 80189de:	f7ff ff1f 	bl	8018820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80189e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80189e6:	b163      	cbz	r3, 8018a02 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80189e8:	3401      	adds	r4, #1
 80189ea:	e7f6      	b.n	80189da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80189ec:	2401      	movs	r4, #1
 80189ee:	f002 fd7f 	bl	801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80189f2:	280a      	cmp	r0, #10
 80189f4:	4628      	mov	r0, r5
 80189f6:	bf08      	it	eq
 80189f8:	3401      	addeq	r4, #1
 80189fa:	f002 fd79 	bl	801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80189fe:	2800      	cmp	r0, #0
 8018a00:	d1f7      	bne.n	80189f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018a02:	b2a0      	uxth	r0, r4
 8018a04:	b00b      	add	sp, #44	; 0x2c
 8018a06:	bd30      	pop	{r4, r5, pc}

08018a08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a0c:	b0df      	sub	sp, #380	; 0x17c
 8018a0e:	4689      	mov	r9, r1
 8018a10:	461c      	mov	r4, r3
 8018a12:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 8018a16:	900a      	str	r0, [sp, #40]	; 0x28
 8018a18:	f1ba 0f00 	cmp.w	sl, #0
 8018a1c:	f000 80b1 	beq.w	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	f000 80ad 	beq.w	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018a28:	7ba3      	ldrb	r3, [r4, #14]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	f000 80a9 	beq.w	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018a30:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8018a34:	6810      	ldr	r0, [r2, #0]
 8018a36:	6851      	ldr	r1, [r2, #4]
 8018a38:	2500      	movs	r5, #0
 8018a3a:	4643      	mov	r3, r8
 8018a3c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018a40:	950f      	str	r5, [sp, #60]	; 0x3c
 8018a42:	af19      	add	r7, sp, #100	; 0x64
 8018a44:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018a48:	79a2      	ldrb	r2, [r4, #6]
 8018a4a:	c303      	stmia	r3!, {r0, r1}
 8018a4c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018a50:	a90f      	add	r1, sp, #60	; 0x3c
 8018a52:	4640      	mov	r0, r8
 8018a54:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018a58:	f7ff fd40 	bl	80184dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018a5c:	a90f      	add	r1, sp, #60	; 0x3c
 8018a5e:	79a2      	ldrb	r2, [r4, #6]
 8018a60:	4608      	mov	r0, r1
 8018a62:	f7ff fd3b 	bl	80184dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018a66:	4638      	mov	r0, r7
 8018a68:	f002 f901 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 8018a6c:	6820      	ldr	r0, [r4, #0]
 8018a6e:	6803      	ldr	r3, [r0, #0]
 8018a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a72:	4798      	blx	r3
 8018a74:	4606      	mov	r6, r0
 8018a76:	6820      	ldr	r0, [r4, #0]
 8018a78:	6803      	ldr	r3, [r0, #0]
 8018a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a7c:	4798      	blx	r3
 8018a7e:	4633      	mov	r3, r6
 8018a80:	9000      	str	r0, [sp, #0]
 8018a82:	4651      	mov	r1, sl
 8018a84:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018a86:	4638      	mov	r0, r7
 8018a88:	f002 f93e 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018a8c:	7923      	ldrb	r3, [r4, #4]
 8018a8e:	6820      	ldr	r0, [r4, #0]
 8018a90:	9308      	str	r3, [sp, #32]
 8018a92:	6803      	ldr	r3, [r0, #0]
 8018a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a96:	4798      	blx	r3
 8018a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a9c:	181e      	adds	r6, r3, r0
 8018a9e:	42ae      	cmp	r6, r5
 8018aa0:	dd06      	ble.n	8018ab0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8018aa2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018aa6:	4282      	cmp	r2, r0
 8018aa8:	bfa4      	itt	ge
 8018aaa:	189d      	addge	r5, r3, r2
 8018aac:	fb95 f5f6 	sdivge	r5, r5, r6
 8018ab0:	a830      	add	r0, sp, #192	; 0xc0
 8018ab2:	f002 f8dc 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 8018ab6:	7c23      	ldrb	r3, [r4, #16]
 8018ab8:	b17b      	cbz	r3, 8018ada <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8018aba:	6820      	ldr	r0, [r4, #0]
 8018abc:	6803      	ldr	r3, [r0, #0]
 8018abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ac0:	4798      	blx	r3
 8018ac2:	4683      	mov	fp, r0
 8018ac4:	6820      	ldr	r0, [r4, #0]
 8018ac6:	6803      	ldr	r3, [r0, #0]
 8018ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018aca:	4798      	blx	r3
 8018acc:	465b      	mov	r3, fp
 8018ace:	9000      	str	r0, [sp, #0]
 8018ad0:	4651      	mov	r1, sl
 8018ad2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018ad4:	a830      	add	r0, sp, #192	; 0xc0
 8018ad6:	f002 f917 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018ada:	7c21      	ldrb	r1, [r4, #16]
 8018adc:	a811      	add	r0, sp, #68	; 0x44
 8018ade:	7963      	ldrb	r3, [r4, #5]
 8018ae0:	9101      	str	r1, [sp, #4]
 8018ae2:	6821      	ldr	r1, [r4, #0]
 8018ae4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018ae8:	9100      	str	r1, [sp, #0]
 8018aea:	a930      	add	r1, sp, #192	; 0xc0
 8018aec:	f7ff fc80 	bl	80183f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018af0:	7c23      	ldrb	r3, [r4, #16]
 8018af2:	b9bb      	cbnz	r3, 8018b24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 8018af4:	fa1f fa86 	uxth.w	sl, r6
 8018af8:	2d00      	cmp	r5, #0
 8018afa:	dd45      	ble.n	8018b88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018afc:	4638      	mov	r0, r7
 8018afe:	f002 fcf7 	bl	801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018b02:	2800      	cmp	r0, #0
 8018b04:	d03d      	beq.n	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018b06:	280a      	cmp	r0, #10
 8018b08:	d1f6      	bne.n	8018af8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8018b0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018b0e:	3d01      	subs	r5, #1
 8018b10:	4453      	add	r3, sl
 8018b12:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018b16:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018b1a:	eba3 030a 	sub.w	r3, r3, sl
 8018b1e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018b22:	e7e9      	b.n	8018af8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8018b24:	0073      	lsls	r3, r6, #1
 8018b26:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8018b2a:	fa1f fa86 	uxth.w	sl, r6
 8018b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8018b30:	2d00      	cmp	r5, #0
 8018b32:	dd29      	ble.n	8018b88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018b34:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018b38:	a811      	add	r0, sp, #68	; 0x44
 8018b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b3c:	428b      	cmp	r3, r1
 8018b3e:	bfd4      	ite	le
 8018b40:	2100      	movle	r1, #0
 8018b42:	2101      	movgt	r1, #1
 8018b44:	f7ff fe6c 	bl	8018820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018b48:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8018b4c:	3b01      	subs	r3, #1
 8018b4e:	b29b      	uxth	r3, r3
 8018b50:	455b      	cmp	r3, fp
 8018b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b54:	d005      	beq.n	8018b62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8018b56:	7961      	ldrb	r1, [r4, #5]
 8018b58:	4638      	mov	r0, r7
 8018b5a:	f7ef ff57 	bl	8008a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b60:	e7f4      	b.n	8018b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8018b62:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018b66:	3d01      	subs	r5, #1
 8018b68:	4453      	add	r3, sl
 8018b6a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018b6e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018b72:	eba3 030a 	sub.w	r3, r3, sl
 8018b76:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018b7a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d1d6      	bne.n	8018b30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8018b82:	b05f      	add	sp, #380	; 0x17c
 8018b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b88:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8018b8c:	ad47      	add	r5, sp, #284	; 0x11c
 8018b8e:	f04f 0b00 	mov.w	fp, #0
 8018b92:	7c23      	ldrb	r3, [r4, #16]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d067      	beq.n	8018c68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8018b98:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018b9c:	a811      	add	r0, sp, #68	; 0x44
 8018b9e:	458a      	cmp	sl, r1
 8018ba0:	bfd4      	ite	le
 8018ba2:	2100      	movle	r1, #0
 8018ba4:	2101      	movgt	r1, #1
 8018ba6:	f7ff fe3b 	bl	8018820 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018baa:	9b08      	ldr	r3, [sp, #32]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d056      	beq.n	8018c5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8018bb0:	7c23      	ldrb	r3, [r4, #16]
 8018bb2:	225c      	movs	r2, #92	; 0x5c
 8018bb4:	4639      	mov	r1, r7
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8018bba:	f00d fcf7 	bl	80265ac <memcpy>
 8018bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d059      	beq.n	8018c78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8018bc4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8018bc8:	7922      	ldrb	r2, [r4, #4]
 8018bca:	2a01      	cmp	r2, #1
 8018bcc:	d13d      	bne.n	8018c4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8018bce:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8018bd2:	1ac0      	subs	r0, r0, r3
 8018bd4:	2302      	movs	r3, #2
 8018bd6:	fb90 f0f3 	sdiv	r0, r0, r3
 8018bda:	b200      	sxth	r0, r0
 8018bdc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018be0:	4418      	add	r0, r3
 8018be2:	7c23      	ldrb	r3, [r4, #16]
 8018be4:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d03a      	beq.n	8018c62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8018bec:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8018bf0:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8018bf4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8018bf8:	9500      	str	r5, [sp, #0]
 8018bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018bfc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018c00:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018c04:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018c08:	464a      	mov	r2, r9
 8018c0a:	2100      	movs	r1, #0
 8018c0c:	f7ff fc97 	bl	801853e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018c10:	2800      	cmp	r0, #0
 8018c12:	d1b6      	bne.n	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018c14:	b2b2      	uxth	r2, r6
 8018c16:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018c1a:	4611      	mov	r1, r2
 8018c1c:	4413      	add	r3, r2
 8018c1e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018c22:	b21b      	sxth	r3, r3
 8018c24:	1a52      	subs	r2, r2, r1
 8018c26:	7c21      	ldrb	r1, [r4, #16]
 8018c28:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018c2c:	b212      	sxth	r2, r2
 8018c2e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018c32:	b109      	cbz	r1, 8018c38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8018c34:	42b2      	cmp	r2, r6
 8018c36:	dba4      	blt.n	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018c38:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8018c3c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8018c40:	440a      	add	r2, r1
 8018c42:	b212      	sxth	r2, r2
 8018c44:	4293      	cmp	r3, r2
 8018c46:	dda4      	ble.n	8018b92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8018c48:	e79b      	b.n	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018c4a:	2a02      	cmp	r2, #2
 8018c4c:	d105      	bne.n	8018c5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8018c4e:	7be2      	ldrb	r2, [r4, #15]
 8018c50:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8018c54:	1a80      	subs	r0, r0, r2
 8018c56:	1ac0      	subs	r0, r0, r3
 8018c58:	e7bf      	b.n	8018bda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 8018c5a:	2000      	movs	r0, #0
 8018c5c:	e7be      	b.n	8018bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8018c5e:	7be0      	ldrb	r0, [r4, #15]
 8018c60:	e7bc      	b.n	8018bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8018c62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018c66:	e7c3      	b.n	8018bf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8018c68:	9b08      	ldr	r3, [sp, #32]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d0f7      	beq.n	8018c5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8018c6e:	225c      	movs	r2, #92	; 0x5c
 8018c70:	4639      	mov	r1, r7
 8018c72:	4628      	mov	r0, r5
 8018c74:	f00d fc9a 	bl	80265ac <memcpy>
 8018c78:	2300      	movs	r3, #0
 8018c7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018c7e:	6821      	ldr	r1, [r4, #0]
 8018c80:	4628      	mov	r0, r5
 8018c82:	f7ff fbef 	bl	8018464 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018c86:	b203      	sxth	r3, r0
 8018c88:	e79e      	b.n	8018bc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

08018c8a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018c8a:	2b02      	cmp	r3, #2
 8018c8c:	b510      	push	{r4, lr}
 8018c8e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018c92:	d00b      	beq.n	8018cac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018c94:	2b03      	cmp	r3, #3
 8018c96:	d00e      	beq.n	8018cb6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018c98:	2b01      	cmp	r3, #1
 8018c9a:	d001      	beq.n	8018ca0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018c9c:	1860      	adds	r0, r4, r1
 8018c9e:	bd10      	pop	{r4, pc}
 8018ca0:	8880      	ldrh	r0, [r0, #4]
 8018ca2:	4420      	add	r0, r4
 8018ca4:	b200      	sxth	r0, r0
 8018ca6:	1a80      	subs	r0, r0, r2
 8018ca8:	3801      	subs	r0, #1
 8018caa:	e7f8      	b.n	8018c9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018cac:	8880      	ldrh	r0, [r0, #4]
 8018cae:	4420      	add	r0, r4
 8018cb0:	b200      	sxth	r0, r0
 8018cb2:	1a40      	subs	r0, r0, r1
 8018cb4:	e7f8      	b.n	8018ca8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018cb6:	18a0      	adds	r0, r4, r2
 8018cb8:	e7f1      	b.n	8018c9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018cba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018cba:	2b02      	cmp	r3, #2
 8018cbc:	b510      	push	{r4, lr}
 8018cbe:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018cc2:	d006      	beq.n	8018cd2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018cc4:	2b03      	cmp	r3, #3
 8018cc6:	d00a      	beq.n	8018cde <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018cc8:	2b01      	cmp	r3, #1
 8018cca:	bf14      	ite	ne
 8018ccc:	18a0      	addne	r0, r4, r2
 8018cce:	1860      	addeq	r0, r4, r1
 8018cd0:	bd10      	pop	{r4, pc}
 8018cd2:	88c0      	ldrh	r0, [r0, #6]
 8018cd4:	4420      	add	r0, r4
 8018cd6:	b200      	sxth	r0, r0
 8018cd8:	1a80      	subs	r0, r0, r2
 8018cda:	3801      	subs	r0, #1
 8018cdc:	e7f8      	b.n	8018cd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018cde:	88c0      	ldrh	r0, [r0, #6]
 8018ce0:	4420      	add	r0, r4
 8018ce2:	b200      	sxth	r0, r0
 8018ce4:	1a40      	subs	r0, r0, r1
 8018ce6:	e7f8      	b.n	8018cda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08018ce8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018ce8:	4b01      	ldr	r3, [pc, #4]	; (8018cf0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018cea:	2200      	movs	r2, #0
 8018cec:	601a      	str	r2, [r3, #0]
 8018cee:	4770      	bx	lr
 8018cf0:	20056778 	.word	0x20056778

08018cf4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	b1c8      	cbz	r0, 8018d2c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018cf8:	0c02      	lsrs	r2, r0, #16
 8018cfa:	0412      	lsls	r2, r2, #16
 8018cfc:	b9a2      	cbnz	r2, 8018d28 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8018cfe:	0403      	lsls	r3, r0, #16
 8018d00:	2010      	movs	r0, #16
 8018d02:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018d06:	bf04      	itt	eq
 8018d08:	021b      	lsleq	r3, r3, #8
 8018d0a:	3008      	addeq	r0, #8
 8018d0c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018d10:	bf04      	itt	eq
 8018d12:	011b      	lsleq	r3, r3, #4
 8018d14:	3004      	addeq	r0, #4
 8018d16:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018d1a:	bf04      	itt	eq
 8018d1c:	009b      	lsleq	r3, r3, #2
 8018d1e:	3002      	addeq	r0, #2
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	db04      	blt.n	8018d2e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018d24:	3001      	adds	r0, #1
 8018d26:	4770      	bx	lr
 8018d28:	2000      	movs	r0, #0
 8018d2a:	e7ea      	b.n	8018d02 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018d2c:	2020      	movs	r0, #32
 8018d2e:	4770      	bx	lr

08018d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d34:	b087      	sub	sp, #28
 8018d36:	4681      	mov	r9, r0
 8018d38:	4698      	mov	r8, r3
 8018d3a:	4610      	mov	r0, r2
 8018d3c:	460d      	mov	r5, r1
 8018d3e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018d42:	b981      	cbnz	r1, 8018d66 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018d44:	b14b      	cbz	r3, 8018d5a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8018d46:	460b      	mov	r3, r1
 8018d48:	464a      	mov	r2, r9
 8018d4a:	4641      	mov	r1, r8
 8018d4c:	e9cd 4700 	strd	r4, r7, [sp]
 8018d50:	f7ff ffee 	bl	8018d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018d54:	b007      	add	sp, #28
 8018d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018d62:	603b      	str	r3, [r7, #0]
 8018d64:	e7f6      	b.n	8018d54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018d66:	fa32 fa01 	lsrs.w	sl, r2, r1
 8018d6a:	d107      	bne.n	8018d7c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8018d6c:	fb09 f602 	mul.w	r6, r9, r2
 8018d70:	fbb6 f0f4 	udiv	r0, r6, r4
 8018d74:	fb04 6610 	mls	r6, r4, r0, r6
 8018d78:	603e      	str	r6, [r7, #0]
 8018d7a:	e7eb      	b.n	8018d54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018d7c:	2601      	movs	r6, #1
 8018d7e:	fa09 fb01 	lsl.w	fp, r9, r1
 8018d82:	408e      	lsls	r6, r1
 8018d84:	fbbb f3f4 	udiv	r3, fp, r4
 8018d88:	3e01      	subs	r6, #1
 8018d8a:	9302      	str	r3, [sp, #8]
 8018d8c:	fb0a f303 	mul.w	r3, sl, r3
 8018d90:	4016      	ands	r6, r2
 8018d92:	9303      	str	r3, [sp, #12]
 8018d94:	4630      	mov	r0, r6
 8018d96:	f7ff ffad 	bl	8018cf4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018d9a:	464a      	mov	r2, r9
 8018d9c:	460b      	mov	r3, r1
 8018d9e:	4601      	mov	r1, r0
 8018da0:	4630      	mov	r0, r6
 8018da2:	e9cd 4700 	strd	r4, r7, [sp]
 8018da6:	f7ff ffc3 	bl	8018d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018daa:	9b02      	ldr	r3, [sp, #8]
 8018dac:	4606      	mov	r6, r0
 8018dae:	eb05 0108 	add.w	r1, r5, r8
 8018db2:	fb04 bb13 	mls	fp, r4, r3, fp
 8018db6:	4658      	mov	r0, fp
 8018db8:	f7ff ff9c 	bl	8018cf4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018dbc:	ab05      	add	r3, sp, #20
 8018dbe:	465a      	mov	r2, fp
 8018dc0:	e9cd 4300 	strd	r4, r3, [sp]
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	4650      	mov	r0, sl
 8018dc8:	f7ff ffb2 	bl	8018d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018dcc:	6839      	ldr	r1, [r7, #0]
 8018dce:	9a05      	ldr	r2, [sp, #20]
 8018dd0:	9b03      	ldr	r3, [sp, #12]
 8018dd2:	4411      	add	r1, r2
 8018dd4:	fbb1 f2f4 	udiv	r2, r1, r4
 8018dd8:	18d3      	adds	r3, r2, r3
 8018dda:	fb04 1412 	mls	r4, r4, r2, r1
 8018dde:	441e      	add	r6, r3
 8018de0:	603c      	str	r4, [r7, #0]
 8018de2:	4430      	add	r0, r6
 8018de4:	e7b6      	b.n	8018d54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018de6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018dea:	b085      	sub	sp, #20
 8018dec:	f1b0 0900 	subs.w	r9, r0, #0
 8018df0:	461d      	mov	r5, r3
 8018df2:	4617      	mov	r7, r2
 8018df4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018df6:	bfbb      	ittet	lt
 8018df8:	f1c9 0900 	rsblt	r9, r9, #0
 8018dfc:	f04f 36ff 	movlt.w	r6, #4294967295
 8018e00:	2601      	movge	r6, #1
 8018e02:	6823      	ldrlt	r3, [r4, #0]
 8018e04:	bfbc      	itt	lt
 8018e06:	425b      	neglt	r3, r3
 8018e08:	6023      	strlt	r3, [r4, #0]
 8018e0a:	2a00      	cmp	r2, #0
 8018e0c:	da04      	bge.n	8018e18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018e0e:	6823      	ldr	r3, [r4, #0]
 8018e10:	4257      	negs	r7, r2
 8018e12:	4276      	negs	r6, r6
 8018e14:	425b      	negs	r3, r3
 8018e16:	6023      	str	r3, [r4, #0]
 8018e18:	2d00      	cmp	r5, #0
 8018e1a:	4638      	mov	r0, r7
 8018e1c:	bfba      	itte	lt
 8018e1e:	426d      	neglt	r5, r5
 8018e20:	f04f 38ff 	movlt.w	r8, #4294967295
 8018e24:	f04f 0801 	movge.w	r8, #1
 8018e28:	f7ff ff64 	bl	8018cf4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018e2c:	ab03      	add	r3, sp, #12
 8018e2e:	463a      	mov	r2, r7
 8018e30:	e9cd 5300 	strd	r5, r3, [sp]
 8018e34:	4603      	mov	r3, r0
 8018e36:	4648      	mov	r0, r9
 8018e38:	f7ff ff7a 	bl	8018d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018e3c:	6823      	ldr	r3, [r4, #0]
 8018e3e:	9a03      	ldr	r2, [sp, #12]
 8018e40:	4546      	cmp	r6, r8
 8018e42:	441a      	add	r2, r3
 8018e44:	fb92 f3f5 	sdiv	r3, r2, r5
 8018e48:	4418      	add	r0, r3
 8018e4a:	fb05 2313 	mls	r3, r5, r3, r2
 8018e4e:	bf18      	it	ne
 8018e50:	4240      	negne	r0, r0
 8018e52:	1c72      	adds	r2, r6, #1
 8018e54:	6023      	str	r3, [r4, #0]
 8018e56:	d105      	bne.n	8018e64 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f1c3 0200 	rsb	r2, r3, #0
 8018e5e:	db0b      	blt.n	8018e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018e60:	6022      	str	r2, [r4, #0]
 8018e62:	e006      	b.n	8018e72 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018e64:	2e01      	cmp	r6, #1
 8018e66:	d104      	bne.n	8018e72 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	da02      	bge.n	8018e72 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018e6c:	442b      	add	r3, r5
 8018e6e:	3801      	subs	r0, #1
 8018e70:	6023      	str	r3, [r4, #0]
 8018e72:	b005      	add	sp, #20
 8018e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e78:	3801      	subs	r0, #1
 8018e7a:	1b52      	subs	r2, r2, r5
 8018e7c:	e7f0      	b.n	8018e60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08018e80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018e80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018e84:	4c1c      	ldr	r4, [pc, #112]	; (8018ef8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018e86:	4605      	mov	r5, r0
 8018e88:	6807      	ldr	r7, [r0, #0]
 8018e8a:	69a3      	ldr	r3, [r4, #24]
 8018e8c:	b92b      	cbnz	r3, 8018e9a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018e8e:	6840      	ldr	r0, [r0, #4]
 8018e90:	e9c5 7000 	strd	r7, r0, [r5]
 8018e94:	b004      	add	sp, #16
 8018e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9a:	f04f 0802 	mov.w	r8, #2
 8018e9e:	68a2      	ldr	r2, [r4, #8]
 8018ea0:	ae04      	add	r6, sp, #16
 8018ea2:	6820      	ldr	r0, [r4, #0]
 8018ea4:	fb93 f1f8 	sdiv	r1, r3, r8
 8018ea8:	440a      	add	r2, r1
 8018eaa:	69e1      	ldr	r1, [r4, #28]
 8018eac:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018eb0:	463a      	mov	r2, r7
 8018eb2:	9600      	str	r6, [sp, #0]
 8018eb4:	f7ff ff97 	bl	8018de6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018eb8:	69a3      	ldr	r3, [r4, #24]
 8018eba:	4607      	mov	r7, r0
 8018ebc:	686a      	ldr	r2, [r5, #4]
 8018ebe:	6a21      	ldr	r1, [r4, #32]
 8018ec0:	9600      	str	r6, [sp, #0]
 8018ec2:	6860      	ldr	r0, [r4, #4]
 8018ec4:	f7ff ff8f 	bl	8018de6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018ec8:	69a3      	ldr	r3, [r4, #24]
 8018eca:	6962      	ldr	r2, [r4, #20]
 8018ecc:	4407      	add	r7, r0
 8018ece:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018ed0:	9600      	str	r6, [sp, #0]
 8018ed2:	68e0      	ldr	r0, [r4, #12]
 8018ed4:	fb93 f8f8 	sdiv	r8, r3, r8
 8018ed8:	4442      	add	r2, r8
 8018eda:	9203      	str	r2, [sp, #12]
 8018edc:	682a      	ldr	r2, [r5, #0]
 8018ede:	f7ff ff82 	bl	8018de6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018ee2:	4680      	mov	r8, r0
 8018ee4:	9600      	str	r6, [sp, #0]
 8018ee6:	69a3      	ldr	r3, [r4, #24]
 8018ee8:	686a      	ldr	r2, [r5, #4]
 8018eea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018eec:	6920      	ldr	r0, [r4, #16]
 8018eee:	f7ff ff7a 	bl	8018de6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018ef2:	4440      	add	r0, r8
 8018ef4:	e7cc      	b.n	8018e90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018ef6:	bf00      	nop
 8018ef8:	2005677c 	.word	0x2005677c

08018efc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018efc:	4b07      	ldr	r3, [pc, #28]	; (8018f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018efe:	b510      	push	{r4, lr}
 8018f00:	781b      	ldrb	r3, [r3, #0]
 8018f02:	2b01      	cmp	r3, #1
 8018f04:	d108      	bne.n	8018f18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018f06:	4b06      	ldr	r3, [pc, #24]	; (8018f20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018f08:	880c      	ldrh	r4, [r1, #0]
 8018f0a:	881b      	ldrh	r3, [r3, #0]
 8018f0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018f10:	3b01      	subs	r3, #1
 8018f12:	1b1b      	subs	r3, r3, r4
 8018f14:	8003      	strh	r3, [r0, #0]
 8018f16:	800a      	strh	r2, [r1, #0]
 8018f18:	bd10      	pop	{r4, pc}
 8018f1a:	bf00      	nop
 8018f1c:	20056748 	.word	0x20056748
 8018f20:	2005674c 	.word	0x2005674c

08018f24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018f24:	4b0a      	ldr	r3, [pc, #40]	; (8018f50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018f26:	b510      	push	{r4, lr}
 8018f28:	781b      	ldrb	r3, [r3, #0]
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d10e      	bne.n	8018f4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018f2e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018f32:	8843      	ldrh	r3, [r0, #2]
 8018f34:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f38:	18ca      	adds	r2, r1, r3
 8018f3a:	4b06      	ldr	r3, [pc, #24]	; (8018f54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018f3c:	8044      	strh	r4, [r0, #2]
 8018f3e:	881b      	ldrh	r3, [r3, #0]
 8018f40:	1a9b      	subs	r3, r3, r2
 8018f42:	8003      	strh	r3, [r0, #0]
 8018f44:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018f48:	8081      	strh	r1, [r0, #4]
 8018f4a:	80c3      	strh	r3, [r0, #6]
 8018f4c:	bd10      	pop	{r4, pc}
 8018f4e:	bf00      	nop
 8018f50:	20056748 	.word	0x20056748
 8018f54:	20056744 	.word	0x20056744

08018f58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018f58:	4b07      	ldr	r3, [pc, #28]	; (8018f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018f5a:	b510      	push	{r4, lr}
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	2b01      	cmp	r3, #1
 8018f60:	d108      	bne.n	8018f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018f62:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018f66:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f6a:	8003      	strh	r3, [r0, #0]
 8018f6c:	8893      	ldrh	r3, [r2, #4]
 8018f6e:	3b01      	subs	r3, #1
 8018f70:	1b1b      	subs	r3, r3, r4
 8018f72:	800b      	strh	r3, [r1, #0]
 8018f74:	bd10      	pop	{r4, pc}
 8018f76:	bf00      	nop
 8018f78:	20056748 	.word	0x20056748

08018f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018f7c:	4b08      	ldr	r3, [pc, #32]	; (8018fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018f7e:	b513      	push	{r0, r1, r4, lr}
 8018f80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f84:	2400      	movs	r4, #0
 8018f86:	4b07      	ldr	r3, [pc, #28]	; (8018fa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018f88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018f8c:	466a      	mov	r2, sp
 8018f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f92:	9400      	str	r4, [sp, #0]
 8018f94:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f98:	f7ff ffde 	bl	8018f58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018f9c:	b002      	add	sp, #8
 8018f9e:	bd10      	pop	{r4, pc}
 8018fa0:	20056744 	.word	0x20056744
 8018fa4:	20056746 	.word	0x20056746

08018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018fa8:	4b0a      	ldr	r3, [pc, #40]	; (8018fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018faa:	460a      	mov	r2, r1
 8018fac:	b510      	push	{r4, lr}
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	2b01      	cmp	r3, #1
 8018fb2:	d10d      	bne.n	8018fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018fb4:	8881      	ldrh	r1, [r0, #4]
 8018fb6:	8803      	ldrh	r3, [r0, #0]
 8018fb8:	440b      	add	r3, r1
 8018fba:	4601      	mov	r1, r0
 8018fbc:	3b01      	subs	r3, #1
 8018fbe:	f821 3b02 	strh.w	r3, [r1], #2
 8018fc2:	f7ff ffc9 	bl	8018f58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018fc6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018fca:	88c2      	ldrh	r2, [r0, #6]
 8018fcc:	80c3      	strh	r3, [r0, #6]
 8018fce:	8082      	strh	r2, [r0, #4]
 8018fd0:	bd10      	pop	{r4, pc}
 8018fd2:	bf00      	nop
 8018fd4:	20056748 	.word	0x20056748

08018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018fd8:	4b09      	ldr	r3, [pc, #36]	; (8019000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018fda:	b507      	push	{r0, r1, r2, lr}
 8018fdc:	2100      	movs	r1, #0
 8018fde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018fe2:	4b08      	ldr	r3, [pc, #32]	; (8019004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018fe4:	9100      	str	r1, [sp, #0]
 8018fe6:	4669      	mov	r1, sp
 8018fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fec:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018ff0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018ff4:	f7ff ffd8 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018ff8:	b003      	add	sp, #12
 8018ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ffe:	bf00      	nop
 8019000:	20056744 	.word	0x20056744
 8019004:	20056746 	.word	0x20056746

08019008 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019008:	4b06      	ldr	r3, [pc, #24]	; (8019024 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801900a:	2100      	movs	r1, #0
 801900c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019010:	4b05      	ldr	r3, [pc, #20]	; (8019028 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019012:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801901a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801901e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019022:	4770      	bx	lr
 8019024:	20056744 	.word	0x20056744
 8019028:	20056746 	.word	0x20056746

0801902c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801902c:	4b03      	ldr	r3, [pc, #12]	; (801903c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801902e:	6818      	ldr	r0, [r3, #0]
 8019030:	b110      	cbz	r0, 8019038 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019032:	6803      	ldr	r3, [r0, #0]
 8019034:	699b      	ldr	r3, [r3, #24]
 8019036:	4718      	bx	r3
 8019038:	4770      	bx	lr
 801903a:	bf00      	nop
 801903c:	200567ac 	.word	0x200567ac

08019040 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019040:	4770      	bx	lr
	...

08019044 <_ZN8touchgfx11Application4drawEv>:
 8019044:	4b09      	ldr	r3, [pc, #36]	; (801906c <_ZN8touchgfx11Application4drawEv+0x28>)
 8019046:	b507      	push	{r0, r1, r2, lr}
 8019048:	f9b3 2000 	ldrsh.w	r2, [r3]
 801904c:	2100      	movs	r1, #0
 801904e:	4b08      	ldr	r3, [pc, #32]	; (8019070 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019050:	9100      	str	r1, [sp, #0]
 8019052:	4669      	mov	r1, sp
 8019054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019058:	f8ad 2004 	strh.w	r2, [sp, #4]
 801905c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019060:	6803      	ldr	r3, [r0, #0]
 8019062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019064:	4798      	blx	r3
 8019066:	b003      	add	sp, #12
 8019068:	f85d fb04 	ldr.w	pc, [sp], #4
 801906c:	20056744 	.word	0x20056744
 8019070:	20056746 	.word	0x20056746

08019074 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019074:	4b03      	ldr	r3, [pc, #12]	; (8019084 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019076:	6818      	ldr	r0, [r3, #0]
 8019078:	b110      	cbz	r0, 8019080 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801907a:	6803      	ldr	r3, [r0, #0]
 801907c:	69db      	ldr	r3, [r3, #28]
 801907e:	4718      	bx	r3
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop
 8019084:	200567ac 	.word	0x200567ac

08019088 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019088:	4b03      	ldr	r3, [pc, #12]	; (8019098 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801908a:	6818      	ldr	r0, [r3, #0]
 801908c:	b110      	cbz	r0, 8019094 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801908e:	6803      	ldr	r3, [r0, #0]
 8019090:	6a1b      	ldr	r3, [r3, #32]
 8019092:	4718      	bx	r3
 8019094:	4770      	bx	lr
 8019096:	bf00      	nop
 8019098:	200567ac 	.word	0x200567ac

0801909c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801909c:	4b03      	ldr	r3, [pc, #12]	; (80190ac <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801909e:	6818      	ldr	r0, [r3, #0]
 80190a0:	b110      	cbz	r0, 80190a8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80190a2:	6803      	ldr	r3, [r0, #0]
 80190a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190a6:	4718      	bx	r3
 80190a8:	4770      	bx	lr
 80190aa:	bf00      	nop
 80190ac:	200567ac 	.word	0x200567ac

080190b0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80190b0:	b570      	push	{r4, r5, r6, lr}
 80190b2:	4d34      	ldr	r5, [pc, #208]	; (8019184 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80190b4:	4604      	mov	r4, r0
 80190b6:	6828      	ldr	r0, [r5, #0]
 80190b8:	b140      	cbz	r0, 80190cc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80190ba:	7a03      	ldrb	r3, [r0, #8]
 80190bc:	b933      	cbnz	r3, 80190cc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80190be:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80190c2:	6803      	ldr	r3, [r0, #0]
 80190c4:	689b      	ldr	r3, [r3, #8]
 80190c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190ca:	4718      	bx	r3
 80190cc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80190d0:	b97b      	cbnz	r3, 80190f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80190d2:	b170      	cbz	r0, 80190f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80190d4:	7a03      	ldrb	r3, [r0, #8]
 80190d6:	b163      	cbz	r3, 80190f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80190d8:	4b2b      	ldr	r3, [pc, #172]	; (8019188 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80190da:	6818      	ldr	r0, [r3, #0]
 80190dc:	b110      	cbz	r0, 80190e4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80190de:	6803      	ldr	r3, [r0, #0]
 80190e0:	691b      	ldr	r3, [r3, #16]
 80190e2:	4798      	blx	r3
 80190e4:	6828      	ldr	r0, [r5, #0]
 80190e6:	6803      	ldr	r3, [r0, #0]
 80190e8:	68db      	ldr	r3, [r3, #12]
 80190ea:	4798      	blx	r3
 80190ec:	2301      	movs	r3, #1
 80190ee:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80190f2:	2500      	movs	r5, #0
 80190f4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80190f8:	42a8      	cmp	r0, r5
 80190fa:	dd0c      	ble.n	8019116 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80190fc:	1963      	adds	r3, r4, r5
 80190fe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019102:	b132      	cbz	r2, 8019112 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019104:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019108:	4413      	add	r3, r2
 801910a:	6858      	ldr	r0, [r3, #4]
 801910c:	6803      	ldr	r3, [r0, #0]
 801910e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019110:	4798      	blx	r3
 8019112:	3501      	adds	r5, #1
 8019114:	e7ee      	b.n	80190f4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019116:	2300      	movs	r3, #0
 8019118:	461a      	mov	r2, r3
 801911a:	4298      	cmp	r0, r3
 801911c:	d114      	bne.n	8019148 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801911e:	1d25      	adds	r5, r4, #4
 8019120:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019124:	1e48      	subs	r0, r1, #1
 8019126:	b280      	uxth	r0, r0
 8019128:	4291      	cmp	r1, r2
 801912a:	dd24      	ble.n	8019176 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801912c:	4288      	cmp	r0, r1
 801912e:	d2fb      	bcs.n	8019128 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019130:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019134:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8019138:	3304      	adds	r3, #4
 801913a:	428b      	cmp	r3, r1
 801913c:	d018      	beq.n	8019170 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801913e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019142:	f843 6c04 	str.w	r6, [r3, #-4]
 8019146:	e7f8      	b.n	801913a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8019148:	18e1      	adds	r1, r4, r3
 801914a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801914e:	b16d      	cbz	r5, 801916c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019150:	429a      	cmp	r2, r3
 8019152:	d00a      	beq.n	801916a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019154:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019158:	4431      	add	r1, r6
 801915a:	684e      	ldr	r6, [r1, #4]
 801915c:	b291      	uxth	r1, r2
 801915e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019162:	604e      	str	r6, [r1, #4]
 8019164:	18a1      	adds	r1, r4, r2
 8019166:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801916a:	3201      	adds	r2, #1
 801916c:	3301      	adds	r3, #1
 801916e:	e7d4      	b.n	801911a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019170:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019174:	e7d4      	b.n	8019120 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8019176:	4b04      	ldr	r3, [pc, #16]	; (8019188 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8019178:	6818      	ldr	r0, [r3, #0]
 801917a:	b110      	cbz	r0, 8019182 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801917c:	6803      	ldr	r3, [r0, #0]
 801917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019180:	e7a1      	b.n	80190c6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019182:	bd70      	pop	{r4, r5, r6, pc}
 8019184:	200567b0 	.word	0x200567b0
 8019188:	200567ac 	.word	0x200567ac

0801918c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801918c:	b570      	push	{r4, r5, r6, lr}
 801918e:	4606      	mov	r6, r0
 8019190:	460c      	mov	r4, r1
 8019192:	b929      	cbnz	r1, 80191a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019194:	4b0c      	ldr	r3, [pc, #48]	; (80191c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8019196:	2167      	movs	r1, #103	; 0x67
 8019198:	4a0c      	ldr	r2, [pc, #48]	; (80191cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801919a:	480d      	ldr	r0, [pc, #52]	; (80191d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801919c:	f00d f988 	bl	80264b0 <__assert_func>
 80191a0:	2300      	movs	r3, #0
 80191a2:	4d0c      	ldr	r5, [pc, #48]	; (80191d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80191a4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80191a8:	6828      	ldr	r0, [r5, #0]
 80191aa:	b110      	cbz	r0, 80191b2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80191ac:	6803      	ldr	r3, [r0, #0]
 80191ae:	695b      	ldr	r3, [r3, #20]
 80191b0:	4798      	blx	r3
 80191b2:	602c      	str	r4, [r5, #0]
 80191b4:	4620      	mov	r0, r4
 80191b6:	6823      	ldr	r3, [r4, #0]
 80191b8:	68db      	ldr	r3, [r3, #12]
 80191ba:	4798      	blx	r3
 80191bc:	6833      	ldr	r3, [r6, #0]
 80191be:	4630      	mov	r0, r6
 80191c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191c6:	4718      	bx	r3
 80191c8:	0802d730 	.word	0x0802d730
 80191cc:	0802d800 	.word	0x0802d800
 80191d0:	0802d73a 	.word	0x0802d73a
 80191d4:	200567ac 	.word	0x200567ac

080191d8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80191d8:	b570      	push	{r4, r5, r6, lr}
 80191da:	f9b1 4000 	ldrsh.w	r4, [r1]
 80191de:	f9b0 5000 	ldrsh.w	r5, [r0]
 80191e2:	42ac      	cmp	r4, r5
 80191e4:	db18      	blt.n	8019218 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80191e6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80191ea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80191ee:	429a      	cmp	r2, r3
 80191f0:	db12      	blt.n	8019218 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80191f2:	8886      	ldrh	r6, [r0, #4]
 80191f4:	4435      	add	r5, r6
 80191f6:	888e      	ldrh	r6, [r1, #4]
 80191f8:	4434      	add	r4, r6
 80191fa:	b22d      	sxth	r5, r5
 80191fc:	b224      	sxth	r4, r4
 80191fe:	42a5      	cmp	r5, r4
 8019200:	db0a      	blt.n	8019218 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019202:	88c0      	ldrh	r0, [r0, #6]
 8019204:	4418      	add	r0, r3
 8019206:	88cb      	ldrh	r3, [r1, #6]
 8019208:	441a      	add	r2, r3
 801920a:	b200      	sxth	r0, r0
 801920c:	b212      	sxth	r2, r2
 801920e:	4290      	cmp	r0, r2
 8019210:	bfb4      	ite	lt
 8019212:	2000      	movlt	r0, #0
 8019214:	2001      	movge	r0, #1
 8019216:	bd70      	pop	{r4, r5, r6, pc}
 8019218:	2000      	movs	r0, #0
 801921a:	e7fc      	b.n	8019216 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801921c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801921e:	4604      	mov	r4, r0
 8019220:	4608      	mov	r0, r1
 8019222:	460d      	mov	r5, r1
 8019224:	f7fc fa25 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019228:	b978      	cbnz	r0, 801924a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801922a:	4620      	mov	r0, r4
 801922c:	f7fc fa21 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019230:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019234:	b150      	cbz	r0, 801924c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019236:	8026      	strh	r6, [r4, #0]
 8019238:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801923c:	8063      	strh	r3, [r4, #2]
 801923e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019242:	80a3      	strh	r3, [r4, #4]
 8019244:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019248:	80e3      	strh	r3, [r4, #6]
 801924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801924c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019250:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019254:	42b1      	cmp	r1, r6
 8019256:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801925a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801925e:	460f      	mov	r7, r1
 8019260:	88ed      	ldrh	r5, [r5, #6]
 8019262:	bfa8      	it	ge
 8019264:	4637      	movge	r7, r6
 8019266:	4293      	cmp	r3, r2
 8019268:	4618      	mov	r0, r3
 801926a:	4466      	add	r6, ip
 801926c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019270:	bfa8      	it	ge
 8019272:	4610      	movge	r0, r2
 8019274:	442a      	add	r2, r5
 8019276:	88e5      	ldrh	r5, [r4, #6]
 8019278:	4461      	add	r1, ip
 801927a:	b236      	sxth	r6, r6
 801927c:	8027      	strh	r7, [r4, #0]
 801927e:	442b      	add	r3, r5
 8019280:	b209      	sxth	r1, r1
 8019282:	b212      	sxth	r2, r2
 8019284:	8060      	strh	r0, [r4, #2]
 8019286:	b21b      	sxth	r3, r3
 8019288:	428e      	cmp	r6, r1
 801928a:	bfac      	ite	ge
 801928c:	ebc7 0106 	rsbge	r1, r7, r6
 8019290:	ebc7 0101 	rsblt	r1, r7, r1
 8019294:	429a      	cmp	r2, r3
 8019296:	bfac      	ite	ge
 8019298:	ebc0 0202 	rsbge	r2, r0, r2
 801929c:	ebc0 0203 	rsblt	r2, r0, r3
 80192a0:	80a1      	strh	r1, [r4, #4]
 80192a2:	80e2      	strh	r2, [r4, #6]
 80192a4:	e7d1      	b.n	801924a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080192a8 <_ZN8touchgfx11Application11getInstanceEv>:
 80192a8:	4b01      	ldr	r3, [pc, #4]	; (80192b0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80192aa:	6818      	ldr	r0, [r3, #0]
 80192ac:	4770      	bx	lr
 80192ae:	bf00      	nop
 80192b0:	200567bc 	.word	0x200567bc

080192b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80192b4:	2300      	movs	r3, #0
 80192b6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80192ba:	30a8      	adds	r0, #168	; 0xa8
 80192bc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80192c0:	f802 3b01 	strb.w	r3, [r2], #1
 80192c4:	4282      	cmp	r2, r0
 80192c6:	d1fb      	bne.n	80192c0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80192c8:	4770      	bx	lr

080192ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80192ca:	4603      	mov	r3, r0
 80192cc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80192d0:	2200      	movs	r2, #0
 80192d2:	801a      	strh	r2, [r3, #0]
 80192d4:	3308      	adds	r3, #8
 80192d6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80192da:	f823 2c04 	strh.w	r2, [r3, #-4]
 80192de:	f823 2c02 	strh.w	r2, [r3, #-2]
 80192e2:	428b      	cmp	r3, r1
 80192e4:	d1f5      	bne.n	80192d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80192e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80192ea:	4770      	bx	lr

080192ec <_ZN8touchgfx11ApplicationC1Ev>:
 80192ec:	b570      	push	{r4, r5, r6, lr}
 80192ee:	4b1a      	ldr	r3, [pc, #104]	; (8019358 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80192f0:	2500      	movs	r5, #0
 80192f2:	4604      	mov	r4, r0
 80192f4:	30a8      	adds	r0, #168	; 0xa8
 80192f6:	f840 3ca8 	str.w	r3, [r0, #-168]
 80192fa:	f820 5c24 	strh.w	r5, [r0, #-36]
 80192fe:	f7ff ffe4 	bl	80192ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019302:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019306:	f7ff ffe0 	bl	80192ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801930a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801930e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019312:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019316:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801931a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801931e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019322:	490e      	ldr	r1, [pc, #56]	; (801935c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019324:	480e      	ldr	r0, [pc, #56]	; (8019360 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019326:	f00b fa69 	bl	80247fc <CRC_Lock>
 801932a:	4e0e      	ldr	r6, [pc, #56]	; (8019364 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801932c:	4b0e      	ldr	r3, [pc, #56]	; (8019368 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801932e:	b158      	cbz	r0, 8019348 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019330:	801d      	strh	r5, [r3, #0]
 8019332:	2300      	movs	r3, #0
 8019334:	4a0d      	ldr	r2, [pc, #52]	; (801936c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019336:	4620      	mov	r0, r4
 8019338:	6013      	str	r3, [r2, #0]
 801933a:	4a0d      	ldr	r2, [pc, #52]	; (8019370 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801933c:	6033      	str	r3, [r6, #0]
 801933e:	6013      	str	r3, [r2, #0]
 8019340:	f7ff ffb8 	bl	80192b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019344:	4620      	mov	r0, r4
 8019346:	bd70      	pop	{r4, r5, r6, pc}
 8019348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801934c:	2002      	movs	r0, #2
 801934e:	801a      	strh	r2, [r3, #0]
 8019350:	6030      	str	r0, [r6, #0]
 8019352:	f001 fb41 	bl	801a9d8 <_ZN8touchgfx6Screen4drawEv>
 8019356:	e7ec      	b.n	8019332 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8019358:	0802d7c4 	.word	0x0802d7c4
 801935c:	b5e8b5cd 	.word	0xb5e8b5cd
 8019360:	f407a5c2 	.word	0xf407a5c2
 8019364:	200567ac 	.word	0x200567ac
 8019368:	20000024 	.word	0x20000024
 801936c:	200567bc 	.word	0x200567bc
 8019370:	200567b0 	.word	0x200567b0

08019374 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019374:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8019378:	428b      	cmp	r3, r1
 801937a:	b510      	push	{r4, lr}
 801937c:	d90e      	bls.n	801939c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801937e:	3b01      	subs	r3, #1
 8019380:	b29b      	uxth	r3, r3
 8019382:	428b      	cmp	r3, r1
 8019384:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8019388:	d908      	bls.n	801939c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801938a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801938e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019392:	681a      	ldr	r2, [r3, #0]
 8019394:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019398:	685a      	ldr	r2, [r3, #4]
 801939a:	6062      	str	r2, [r4, #4]
 801939c:	bd10      	pop	{r4, pc}
	...

080193a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80193a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80193a2:	466b      	mov	r3, sp
 80193a4:	4604      	mov	r4, r0
 80193a6:	e883 0006 	stmia.w	r3, {r1, r2}
 80193aa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80193ae:	2a07      	cmp	r2, #7
 80193b0:	d906      	bls.n	80193c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80193b2:	4b09      	ldr	r3, [pc, #36]	; (80193d8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80193b4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80193b8:	4a08      	ldr	r2, [pc, #32]	; (80193dc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80193ba:	4809      	ldr	r0, [pc, #36]	; (80193e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80193bc:	f00d f878 	bl	80264b0 <__assert_func>
 80193c0:	1c51      	adds	r1, r2, #1
 80193c2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80193c6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80193ca:	cb03      	ldmia	r3!, {r0, r1}
 80193cc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80193d0:	6069      	str	r1, [r5, #4]
 80193d2:	b003      	add	sp, #12
 80193d4:	bd30      	pop	{r4, r5, pc}
 80193d6:	bf00      	nop
 80193d8:	0802d764 	.word	0x0802d764
 80193dc:	0802d844 	.word	0x0802d844
 80193e0:	0802d793 	.word	0x0802d793

080193e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80193e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e8:	b08d      	sub	sp, #52	; 0x34
 80193ea:	4683      	mov	fp, r0
 80193ec:	ac08      	add	r4, sp, #32
 80193ee:	4620      	mov	r0, r4
 80193f0:	e884 0006 	stmia.w	r4, {r1, r2}
 80193f4:	f7fc f93d 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 80193f8:	2800      	cmp	r0, #0
 80193fa:	d16a      	bne.n	80194d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80193fc:	9402      	str	r4, [sp, #8]
 80193fe:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019402:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019406:	2400      	movs	r4, #0
 8019408:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801940c:	9301      	str	r3, [sp, #4]
 801940e:	36a0      	adds	r6, #160	; 0xa0
 8019410:	42a5      	cmp	r5, r4
 8019412:	d00d      	beq.n	8019430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8019414:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8019418:	9802      	ldr	r0, [sp, #8]
 801941a:	f7ff fedd 	bl	80191d8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801941e:	b128      	cbz	r0, 801942c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8019420:	1e69      	subs	r1, r5, #1
 8019422:	9801      	ldr	r0, [sp, #4]
 8019424:	1b09      	subs	r1, r1, r4
 8019426:	b289      	uxth	r1, r1
 8019428:	f7ff ffa4 	bl	8019374 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801942c:	3401      	adds	r4, #1
 801942e:	e7ef      	b.n	8019410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019430:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019434:	1e7b      	subs	r3, r7, #1
 8019436:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801943a:	9703      	str	r7, [sp, #12]
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	2400      	movs	r4, #0
 8019440:	4655      	mov	r5, sl
 8019442:	9704      	str	r7, [sp, #16]
 8019444:	4626      	mov	r6, r4
 8019446:	9b04      	ldr	r3, [sp, #16]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d078      	beq.n	801953e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801944c:	9902      	ldr	r1, [sp, #8]
 801944e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019452:	f7fd fad7 	bl	8016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019456:	b360      	cbz	r0, 80194b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8019458:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801945c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8019460:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8019464:	45e6      	cmp	lr, ip
 8019466:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801946a:	db35      	blt.n	80194d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801946c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019470:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019474:	4472      	add	r2, lr
 8019476:	4463      	add	r3, ip
 8019478:	b212      	sxth	r2, r2
 801947a:	b21b      	sxth	r3, r3
 801947c:	429a      	cmp	r2, r3
 801947e:	dc2b      	bgt.n	80194d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8019480:	fa1f f288 	uxth.w	r2, r8
 8019484:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8019488:	45c1      	cmp	r9, r8
 801948a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801948e:	4413      	add	r3, r2
 8019490:	fa1f fc89 	uxth.w	ip, r9
 8019494:	b29b      	uxth	r3, r3
 8019496:	fa0f fe83 	sxth.w	lr, r3
 801949a:	db0f      	blt.n	80194bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801949c:	eba3 030c 	sub.w	r3, r3, ip
 80194a0:	1ac9      	subs	r1, r1, r3
 80194a2:	b209      	sxth	r1, r1
 80194a4:	2900      	cmp	r1, #0
 80194a6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80194aa:	dd12      	ble.n	80194d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80194ac:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80194b0:	4604      	mov	r4, r0
 80194b2:	9b04      	ldr	r3, [sp, #16]
 80194b4:	3d08      	subs	r5, #8
 80194b6:	3b01      	subs	r3, #1
 80194b8:	9304      	str	r3, [sp, #16]
 80194ba:	e7c4      	b.n	8019446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80194bc:	4461      	add	r1, ip
 80194be:	b209      	sxth	r1, r1
 80194c0:	4571      	cmp	r1, lr
 80194c2:	dc3a      	bgt.n	801953a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80194c4:	eba2 020c 	sub.w	r2, r2, ip
 80194c8:	b212      	sxth	r2, r2
 80194ca:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80194ce:	2a00      	cmp	r2, #0
 80194d0:	dcee      	bgt.n	80194b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80194d2:	b00d      	add	sp, #52	; 0x34
 80194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d8:	45c1      	cmp	r9, r8
 80194da:	db2e      	blt.n	801953a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80194dc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80194e0:	4499      	add	r9, r3
 80194e2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80194e6:	4498      	add	r8, r3
 80194e8:	fa0f f989 	sxth.w	r9, r9
 80194ec:	fa0f f888 	sxth.w	r8, r8
 80194f0:	45c1      	cmp	r9, r8
 80194f2:	dc22      	bgt.n	801953a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80194f4:	fa1f f28c 	uxth.w	r2, ip
 80194f8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80194fc:	45e6      	cmp	lr, ip
 80194fe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019502:	4413      	add	r3, r2
 8019504:	fa1f f88e 	uxth.w	r8, lr
 8019508:	b29b      	uxth	r3, r3
 801950a:	fa0f f983 	sxth.w	r9, r3
 801950e:	db0a      	blt.n	8019526 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8019510:	eba3 0308 	sub.w	r3, r3, r8
 8019514:	1ac9      	subs	r1, r1, r3
 8019516:	b209      	sxth	r1, r1
 8019518:	2900      	cmp	r1, #0
 801951a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801951e:	ddd8      	ble.n	80194d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019520:	f8ad 9020 	strh.w	r9, [sp, #32]
 8019524:	e7c4      	b.n	80194b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8019526:	4441      	add	r1, r8
 8019528:	b209      	sxth	r1, r1
 801952a:	4549      	cmp	r1, r9
 801952c:	dc05      	bgt.n	801953a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801952e:	eba2 0208 	sub.w	r2, r2, r8
 8019532:	b212      	sxth	r2, r2
 8019534:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019538:	e7c9      	b.n	80194ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801953a:	4606      	mov	r6, r0
 801953c:	e7b9      	b.n	80194b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801953e:	2c00      	cmp	r4, #0
 8019540:	f47f af7d 	bne.w	801943e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8019544:	2e00      	cmp	r6, #0
 8019546:	f000 81dc 	beq.w	8019902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801954a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801954e:	4655      	mov	r5, sl
 8019550:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8019554:	b2b9      	uxth	r1, r7
 8019556:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801955a:	b2b3      	uxth	r3, r6
 801955c:	9104      	str	r1, [sp, #16]
 801955e:	9804      	ldr	r0, [sp, #16]
 8019560:	441a      	add	r2, r3
 8019562:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8019566:	b292      	uxth	r2, r2
 8019568:	4401      	add	r1, r0
 801956a:	fa0f f882 	sxth.w	r8, r2
 801956e:	b289      	uxth	r1, r1
 8019570:	9105      	str	r1, [sp, #20]
 8019572:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8019576:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801957a:	9b03      	ldr	r3, [sp, #12]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d054      	beq.n	801962a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8019580:	9902      	ldr	r1, [sp, #8]
 8019582:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019586:	f7fd fa3d 	bl	8016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801958a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801958e:	b1d8      	cbz	r0, 80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019590:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8019594:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8019598:	4576      	cmp	r6, lr
 801959a:	dc26      	bgt.n	80195ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801959c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80195a0:	44f4      	add	ip, lr
 80195a2:	fa0f fc8c 	sxth.w	ip, ip
 80195a6:	45e0      	cmp	r8, ip
 80195a8:	db1f      	blt.n	80195ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80195aa:	428f      	cmp	r7, r1
 80195ac:	fa1f fc81 	uxth.w	ip, r1
 80195b0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80195b4:	dc0f      	bgt.n	80195d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80195b6:	9805      	ldr	r0, [sp, #20]
 80195b8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80195bc:	eba0 0c0c 	sub.w	ip, r0, ip
 80195c0:	eba1 010c 	sub.w	r1, r1, ip
 80195c4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80195c8:	4620      	mov	r0, r4
 80195ca:	9903      	ldr	r1, [sp, #12]
 80195cc:	3d08      	subs	r5, #8
 80195ce:	4604      	mov	r4, r0
 80195d0:	3901      	subs	r1, #1
 80195d2:	9103      	str	r1, [sp, #12]
 80195d4:	e7cf      	b.n	8019576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 80195d6:	4461      	add	r1, ip
 80195d8:	b209      	sxth	r1, r1
 80195da:	4549      	cmp	r1, r9
 80195dc:	dcf5      	bgt.n	80195ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80195de:	9904      	ldr	r1, [sp, #16]
 80195e0:	eba1 0c0c 	sub.w	ip, r1, ip
 80195e4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80195e8:	e7ee      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80195ea:	428f      	cmp	r7, r1
 80195ec:	dced      	bgt.n	80195ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80195ee:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80195f2:	4461      	add	r1, ip
 80195f4:	b209      	sxth	r1, r1
 80195f6:	4589      	cmp	r9, r1
 80195f8:	dbe7      	blt.n	80195ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80195fa:	4576      	cmp	r6, lr
 80195fc:	fa1f fc8e 	uxth.w	ip, lr
 8019600:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019604:	dc08      	bgt.n	8019618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8019606:	eba2 0c0c 	sub.w	ip, r2, ip
 801960a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801960e:	eba1 010c 	sub.w	r1, r1, ip
 8019612:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8019616:	e7d7      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019618:	4461      	add	r1, ip
 801961a:	b209      	sxth	r1, r1
 801961c:	4588      	cmp	r8, r1
 801961e:	dbd4      	blt.n	80195ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019620:	eba3 0c0c 	sub.w	ip, r3, ip
 8019624:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8019628:	e7ce      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801962a:	2c00      	cmp	r4, #0
 801962c:	f000 8169 	beq.w	8019902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019630:	9b00      	ldr	r3, [sp, #0]
 8019632:	3301      	adds	r3, #1
 8019634:	f000 8165 	beq.w	8019902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019638:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801963c:	9802      	ldr	r0, [sp, #8]
 801963e:	4621      	mov	r1, r4
 8019640:	f7ff fdca 	bl	80191d8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019644:	b120      	cbz	r0, 8019650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8019646:	f8bd 1000 	ldrh.w	r1, [sp]
 801964a:	9801      	ldr	r0, [sp, #4]
 801964c:	f7ff fe92 	bl	8019374 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019650:	9902      	ldr	r1, [sp, #8]
 8019652:	4620      	mov	r0, r4
 8019654:	f7fd f9d6 	bl	8016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019658:	2800      	cmp	r0, #0
 801965a:	f000 809b 	beq.w	8019794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801965e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019662:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8019666:	fa1f f288 	uxth.w	r2, r8
 801966a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801966e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8019672:	19d5      	adds	r5, r2, r7
 8019674:	b2a1      	uxth	r1, r4
 8019676:	45a0      	cmp	r8, r4
 8019678:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801967c:	fa1f f985 	uxth.w	r9, r5
 8019680:	440b      	add	r3, r1
 8019682:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8019686:	fa0f f589 	sxth.w	r5, r9
 801968a:	b29b      	uxth	r3, r3
 801968c:	9503      	str	r5, [sp, #12]
 801968e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019692:	9507      	str	r5, [sp, #28]
 8019694:	f340 809d 	ble.w	80197d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8019698:	1a52      	subs	r2, r2, r1
 801969a:	4584      	cmp	ip, r0
 801969c:	fa0f fe83 	sxth.w	lr, r3
 80196a0:	b292      	uxth	r2, r2
 80196a2:	b215      	sxth	r5, r2
 80196a4:	dd2f      	ble.n	8019706 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80196a6:	9e00      	ldr	r6, [sp, #0]
 80196a8:	fa1f fc8c 	uxth.w	ip, ip
 80196ac:	b280      	uxth	r0, r0
 80196ae:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80196b2:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80196b6:	9e03      	ldr	r6, [sp, #12]
 80196b8:	ebac 0300 	sub.w	r3, ip, r0
 80196bc:	448c      	add	ip, r1
 80196be:	eba6 060e 	sub.w	r6, r6, lr
 80196c2:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	4470      	add	r0, lr
 80196ca:	fa0f fc8c 	sxth.w	ip, ip
 80196ce:	b21c      	sxth	r4, r3
 80196d0:	b200      	sxth	r0, r0
 80196d2:	4366      	muls	r6, r4
 80196d4:	ebac 0000 	sub.w	r0, ip, r0
 80196d8:	4368      	muls	r0, r5
 80196da:	4286      	cmp	r6, r0
 80196dc:	db09      	blt.n	80196f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80196de:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80196e2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80196e6:	4417      	add	r7, r2
 80196e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80196ec:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80196f0:	e685      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80196f2:	440b      	add	r3, r1
 80196f4:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80196f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80196fc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019700:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019704:	e67b      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019706:	9e03      	ldr	r6, [sp, #12]
 8019708:	45b6      	cmp	lr, r6
 801970a:	da28      	bge.n	801975e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801970c:	9b00      	ldr	r3, [sp, #0]
 801970e:	eba6 060e 	sub.w	r6, r6, lr
 8019712:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8019716:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801971a:	eb04 030c 	add.w	r3, r4, ip
 801971e:	fa1f f883 	uxth.w	r8, r3
 8019722:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8019726:	4403      	add	r3, r0
 8019728:	fa0f f988 	sxth.w	r9, r8
 801972c:	eba0 000c 	sub.w	r0, r0, ip
 8019730:	eba3 0308 	sub.w	r3, r3, r8
 8019734:	4368      	muls	r0, r5
 8019736:	b29b      	uxth	r3, r3
 8019738:	fa0f f883 	sxth.w	r8, r3
 801973c:	fb08 f606 	mul.w	r6, r8, r6
 8019740:	42b0      	cmp	r0, r6
 8019742:	dc06      	bgt.n	8019752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019744:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019748:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801974c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019750:	e7c9      	b.n	80196e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8019752:	4423      	add	r3, r4
 8019754:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019758:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801975c:	e64f      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801975e:	eba3 0309 	sub.w	r3, r3, r9
 8019762:	9807      	ldr	r0, [sp, #28]
 8019764:	b29b      	uxth	r3, r3
 8019766:	2806      	cmp	r0, #6
 8019768:	fa0f fc83 	sxth.w	ip, r3
 801976c:	d818      	bhi.n	80197a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801976e:	4652      	mov	r2, sl
 8019770:	ab0a      	add	r3, sp, #40	; 0x28
 8019772:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8019776:	6851      	ldr	r1, [r2, #4]
 8019778:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801977c:	c303      	stmia	r3!, {r0, r1}
 801977e:	9b03      	ldr	r3, [sp, #12]
 8019780:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8019784:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8019788:	ab0a      	add	r3, sp, #40	; 0x28
 801978a:	9801      	ldr	r0, [sp, #4]
 801978c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019790:	f7ff fe06 	bl	80193a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019794:	9b00      	ldr	r3, [sp, #0]
 8019796:	f1aa 0a08 	sub.w	sl, sl, #8
 801979a:	3b01      	subs	r3, #1
 801979c:	9300      	str	r3, [sp, #0]
 801979e:	e747      	b.n	8019630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80197a0:	9800      	ldr	r0, [sp, #0]
 80197a2:	45ac      	cmp	ip, r5
 80197a4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80197a8:	db0c      	blt.n	80197c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80197aa:	4417      	add	r7, r2
 80197ac:	4458      	add	r0, fp
 80197ae:	f8ad 4020 	strh.w	r4, [sp, #32]
 80197b2:	b2bf      	uxth	r7, r7
 80197b4:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80197b8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80197bc:	440f      	add	r7, r1
 80197be:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80197c2:	e61c      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80197c4:	4458      	add	r0, fp
 80197c6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80197ca:	443b      	add	r3, r7
 80197cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80197d0:	e615      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80197d2:	fa1f f18c 	uxth.w	r1, ip
 80197d6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80197da:	b282      	uxth	r2, r0
 80197dc:	4584      	cmp	ip, r0
 80197de:	eb01 0e05 	add.w	lr, r1, r5
 80197e2:	9204      	str	r2, [sp, #16]
 80197e4:	fa1f fe8e 	uxth.w	lr, lr
 80197e8:	9e04      	ldr	r6, [sp, #16]
 80197ea:	fa0f f28e 	sxth.w	r2, lr
 80197ee:	9205      	str	r2, [sp, #20]
 80197f0:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80197f4:	4432      	add	r2, r6
 80197f6:	b292      	uxth	r2, r2
 80197f8:	9206      	str	r2, [sp, #24]
 80197fa:	da26      	bge.n	801984a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 80197fc:	eba3 0309 	sub.w	r3, r3, r9
 8019800:	eba2 020e 	sub.w	r2, r2, lr
 8019804:	eba0 000c 	sub.w	r0, r0, ip
 8019808:	eba4 0408 	sub.w	r4, r4, r8
 801980c:	b29b      	uxth	r3, r3
 801980e:	b292      	uxth	r2, r2
 8019810:	fa0f fa83 	sxth.w	sl, r3
 8019814:	b211      	sxth	r1, r2
 8019816:	fb0a f000 	mul.w	r0, sl, r0
 801981a:	434c      	muls	r4, r1
 801981c:	42a0      	cmp	r0, r4
 801981e:	9800      	ldr	r0, [sp, #0]
 8019820:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019824:	dc06      	bgt.n	8019834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8019826:	4458      	add	r0, fp
 8019828:	9a05      	ldr	r2, [sp, #20]
 801982a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801982e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8019832:	e7ca      	b.n	80197ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019834:	eb0b 0300 	add.w	r3, fp, r0
 8019838:	9903      	ldr	r1, [sp, #12]
 801983a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801983e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8019842:	442a      	add	r2, r5
 8019844:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019848:	e5d9      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801984a:	9e04      	ldr	r6, [sp, #16]
 801984c:	9a03      	ldr	r2, [sp, #12]
 801984e:	1b89      	subs	r1, r1, r6
 8019850:	b21e      	sxth	r6, r3
 8019852:	b289      	uxth	r1, r1
 8019854:	4296      	cmp	r6, r2
 8019856:	fa0f fc81 	sxth.w	ip, r1
 801985a:	dd25      	ble.n	80198a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801985c:	eba3 0309 	sub.w	r3, r3, r9
 8019860:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019864:	9e05      	ldr	r6, [sp, #20]
 8019866:	eba4 0408 	sub.w	r4, r4, r8
 801986a:	b29b      	uxth	r3, r3
 801986c:	eba6 0902 	sub.w	r9, r6, r2
 8019870:	fb0c f404 	mul.w	r4, ip, r4
 8019874:	b218      	sxth	r0, r3
 8019876:	9a00      	ldr	r2, [sp, #0]
 8019878:	fb00 f909 	mul.w	r9, r0, r9
 801987c:	00d2      	lsls	r2, r2, #3
 801987e:	454c      	cmp	r4, r9
 8019880:	db03      	blt.n	801988a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8019882:	445a      	add	r2, fp
 8019884:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8019888:	e79f      	b.n	80197ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801988a:	eb0b 0302 	add.w	r3, fp, r2
 801988e:	9a03      	ldr	r2, [sp, #12]
 8019890:	4429      	add	r1, r5
 8019892:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8019896:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801989a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801989e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80198a2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80198a6:	e5aa      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80198a8:	9b06      	ldr	r3, [sp, #24]
 80198aa:	9c07      	ldr	r4, [sp, #28]
 80198ac:	eba3 020e 	sub.w	r2, r3, lr
 80198b0:	2c06      	cmp	r4, #6
 80198b2:	b292      	uxth	r2, r2
 80198b4:	b213      	sxth	r3, r2
 80198b6:	d80d      	bhi.n	80198d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80198b8:	4651      	mov	r1, sl
 80198ba:	aa0a      	add	r2, sp, #40	; 0x28
 80198bc:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80198c0:	6849      	ldr	r1, [r1, #4]
 80198c2:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80198c6:	9b05      	ldr	r3, [sp, #20]
 80198c8:	c203      	stmia	r2!, {r0, r1}
 80198ca:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80198ce:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80198d2:	e759      	b.n	8019788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80198d4:	9c00      	ldr	r4, [sp, #0]
 80198d6:	4563      	cmp	r3, ip
 80198d8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80198dc:	db0d      	blt.n	80198fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 80198de:	4429      	add	r1, r5
 80198e0:	9a04      	ldr	r2, [sp, #16]
 80198e2:	445c      	add	r4, fp
 80198e4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80198e8:	b289      	uxth	r1, r1
 80198ea:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80198ee:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80198f2:	4411      	add	r1, r2
 80198f4:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80198f8:	e581      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80198fa:	445c      	add	r4, fp
 80198fc:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8019900:	e79f      	b.n	8019842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8019902:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019906:	2f07      	cmp	r7, #7
 8019908:	d806      	bhi.n	8019918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801990a:	ab08      	add	r3, sp, #32
 801990c:	9801      	ldr	r0, [sp, #4]
 801990e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019912:	f7ff fd45 	bl	80193a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019916:	e5dc      	b.n	80194d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019918:	f107 39ff 	add.w	r9, r7, #4294967295
 801991c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019920:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019924:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019928:	f04f 35ff 	mov.w	r5, #4294967295
 801992c:	2400      	movs	r4, #0
 801992e:	9304      	str	r3, [sp, #16]
 8019930:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019934:	f109 32ff 	add.w	r2, r9, #4294967295
 8019938:	9300      	str	r3, [sp, #0]
 801993a:	4690      	mov	r8, r2
 801993c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8019940:	9303      	str	r3, [sp, #12]
 8019942:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019946:	f1b8 3fff 	cmp.w	r8, #4294967295
 801994a:	6818      	ldr	r0, [r3, #0]
 801994c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019950:	9206      	str	r2, [sp, #24]
 8019952:	bf16      	itet	ne
 8019954:	9904      	ldrne	r1, [sp, #16]
 8019956:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801995a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801995e:	9305      	str	r3, [sp, #20]
 8019960:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019964:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019968:	fb16 f601 	smulbb	r6, r6, r1
 801996c:	6859      	ldr	r1, [r3, #4]
 801996e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019972:	4671      	mov	r1, lr
 8019974:	a80a      	add	r0, sp, #40	; 0x28
 8019976:	f7ff fc51 	bl	801921c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801997a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801997e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019982:	9b03      	ldr	r3, [sp, #12]
 8019984:	9a00      	ldr	r2, [sp, #0]
 8019986:	fb11 f100 	smulbb	r1, r1, r0
 801998a:	2008      	movs	r0, #8
 801998c:	fb02 6603 	mla	r6, r2, r3, r6
 8019990:	1b8e      	subs	r6, r1, r6
 8019992:	fb91 f1f0 	sdiv	r1, r1, r0
 8019996:	42b1      	cmp	r1, r6
 8019998:	dc21      	bgt.n	80199de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801999a:	4556      	cmp	r6, sl
 801999c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80199a0:	da03      	bge.n	80199aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80199a2:	b1e6      	cbz	r6, 80199de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80199a4:	46b2      	mov	sl, r6
 80199a6:	4645      	mov	r5, r8
 80199a8:	464c      	mov	r4, r9
 80199aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80199ae:	f118 0f02 	cmn.w	r8, #2
 80199b2:	d1c8      	bne.n	8019946 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80199b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80199b8:	f1a7 0708 	sub.w	r7, r7, #8
 80199bc:	4691      	mov	r9, r2
 80199be:	d1b7      	bne.n	8019930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80199c0:	9b01      	ldr	r3, [sp, #4]
 80199c2:	b2a6      	uxth	r6, r4
 80199c4:	00e4      	lsls	r4, r4, #3
 80199c6:	1918      	adds	r0, r3, r4
 80199c8:	1c6b      	adds	r3, r5, #1
 80199ca:	d10b      	bne.n	80199e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80199cc:	4601      	mov	r1, r0
 80199ce:	9802      	ldr	r0, [sp, #8]
 80199d0:	f7ff fc24 	bl	801921c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80199d4:	4631      	mov	r1, r6
 80199d6:	9801      	ldr	r0, [sp, #4]
 80199d8:	f7ff fccc 	bl	8019374 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80199dc:	e50f      	b.n	80193fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80199de:	4645      	mov	r5, r8
 80199e0:	464c      	mov	r4, r9
 80199e2:	e7ed      	b.n	80199c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80199e4:	9b01      	ldr	r3, [sp, #4]
 80199e6:	00ed      	lsls	r5, r5, #3
 80199e8:	445c      	add	r4, fp
 80199ea:	1959      	adds	r1, r3, r5
 80199ec:	445d      	add	r5, fp
 80199ee:	f7ff fc15 	bl	801921c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80199f2:	9b02      	ldr	r3, [sp, #8]
 80199f4:	cb03      	ldmia	r3!, {r0, r1}
 80199f6:	9b02      	ldr	r3, [sp, #8]
 80199f8:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80199fc:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8019a00:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019a04:	6861      	ldr	r1, [r4, #4]
 8019a06:	c303      	stmia	r3!, {r0, r1}
 8019a08:	e7e4      	b.n	80199d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08019a0c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019a0c:	4b1d      	ldr	r3, [pc, #116]	; (8019a84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019a0e:	b530      	push	{r4, r5, lr}
 8019a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a14:	b085      	sub	sp, #20
 8019a16:	4b1c      	ldr	r3, [pc, #112]	; (8019a88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019a18:	460c      	mov	r4, r1
 8019a1a:	2100      	movs	r1, #0
 8019a1c:	4605      	mov	r5, r0
 8019a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a22:	6820      	ldr	r0, [r4, #0]
 8019a24:	9100      	str	r1, [sp, #0]
 8019a26:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019a2a:	ab02      	add	r3, sp, #8
 8019a2c:	6861      	ldr	r1, [r4, #4]
 8019a2e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019a32:	c303      	stmia	r3!, {r0, r1}
 8019a34:	4669      	mov	r1, sp
 8019a36:	a802      	add	r0, sp, #8
 8019a38:	f7fb fdd8 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 8019a3c:	ab02      	add	r3, sp, #8
 8019a3e:	cb03      	ldmia	r3!, {r0, r1}
 8019a40:	4b12      	ldr	r3, [pc, #72]	; (8019a8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019a42:	6020      	str	r0, [r4, #0]
 8019a44:	6818      	ldr	r0, [r3, #0]
 8019a46:	6061      	str	r1, [r4, #4]
 8019a48:	b138      	cbz	r0, 8019a5a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019a4a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8019a4e:	b133      	cbz	r3, 8019a5e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019a50:	6821      	ldr	r1, [r4, #0]
 8019a52:	4628      	mov	r0, r5
 8019a54:	6862      	ldr	r2, [r4, #4]
 8019a56:	f7ff fcc5 	bl	80193e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019a5a:	b005      	add	sp, #20
 8019a5c:	bd30      	pop	{r4, r5, pc}
 8019a5e:	6803      	ldr	r3, [r0, #0]
 8019a60:	4621      	mov	r1, r4
 8019a62:	689b      	ldr	r3, [r3, #8]
 8019a64:	4798      	blx	r3
 8019a66:	4b0a      	ldr	r3, [pc, #40]	; (8019a90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019a68:	6818      	ldr	r0, [r3, #0]
 8019a6a:	b118      	cbz	r0, 8019a74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019a6c:	6803      	ldr	r3, [r0, #0]
 8019a6e:	4621      	mov	r1, r4
 8019a70:	689b      	ldr	r3, [r3, #8]
 8019a72:	4798      	blx	r3
 8019a74:	4b07      	ldr	r3, [pc, #28]	; (8019a94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019a76:	4621      	mov	r1, r4
 8019a78:	6818      	ldr	r0, [r3, #0]
 8019a7a:	6803      	ldr	r3, [r0, #0]
 8019a7c:	699b      	ldr	r3, [r3, #24]
 8019a7e:	4798      	blx	r3
 8019a80:	e7eb      	b.n	8019a5a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019a82:	bf00      	nop
 8019a84:	20056744 	.word	0x20056744
 8019a88:	20056746 	.word	0x20056746
 8019a8c:	200567ac 	.word	0x200567ac
 8019a90:	200567a8 	.word	0x200567a8
 8019a94:	20056750 	.word	0x20056750

08019a98 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a9c:	4604      	mov	r4, r0
 8019a9e:	b09b      	sub	sp, #108	; 0x6c
 8019aa0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8019aa4:	b129      	cbz	r1, 8019ab2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019aac:	b01b      	add	sp, #108	; 0x6c
 8019aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019ab6:	4630      	mov	r0, r6
 8019ab8:	f7fb fddb 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019abc:	4605      	mov	r5, r0
 8019abe:	b940      	cbnz	r0, 8019ad2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019ac6:	f7ff fc8d 	bl	80193e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019aca:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8019ace:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019ad2:	4ba6      	ldr	r3, [pc, #664]	; (8019d6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	b33b      	cbz	r3, 8019b28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019ad8:	4da5      	ldr	r5, [pc, #660]	; (8019d70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019ada:	4628      	mov	r0, r5
 8019adc:	f7fb fdc9 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ae0:	4606      	mov	r6, r0
 8019ae2:	bb08      	cbnz	r0, 8019b28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019ae4:	4628      	mov	r0, r5
 8019ae6:	f7ff fa1d 	bl	8018f24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019aea:	6829      	ldr	r1, [r5, #0]
 8019aec:	686a      	ldr	r2, [r5, #4]
 8019aee:	4620      	mov	r0, r4
 8019af0:	f7ff fc78 	bl	80193e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019af4:	802e      	strh	r6, [r5, #0]
 8019af6:	806e      	strh	r6, [r5, #2]
 8019af8:	80ae      	strh	r6, [r5, #4]
 8019afa:	80ee      	strh	r6, [r5, #6]
 8019afc:	4f9d      	ldr	r7, [pc, #628]	; (8019d74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8019afe:	a809      	add	r0, sp, #36	; 0x24
 8019b00:	f7ff fbe3 	bl	80192ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019b04:	883d      	ldrh	r5, [r7, #0]
 8019b06:	462e      	mov	r6, r5
 8019b08:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019b0c:	42b3      	cmp	r3, r6
 8019b0e:	d910      	bls.n	8019b32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8019b10:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019b14:	3601      	adds	r6, #1
 8019b16:	a809      	add	r0, sp, #36	; 0x24
 8019b18:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019b1c:	b2b6      	uxth	r6, r6
 8019b1e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019b22:	f7ff fc3d 	bl	80193a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019b26:	e7ef      	b.n	8019b08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019b28:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d1e5      	bne.n	8019afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8019b30:	e7bc      	b.n	8019aac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019b32:	462e      	mov	r6, r5
 8019b34:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019b38:	42b3      	cmp	r3, r6
 8019b3a:	d90b      	bls.n	8019b54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8019b3c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019b40:	3601      	adds	r6, #1
 8019b42:	4620      	mov	r0, r4
 8019b44:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019b48:	b2b6      	uxth	r6, r6
 8019b4a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019b4e:	f7ff fc49 	bl	80193e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019b52:	e7ef      	b.n	8019b34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019b54:	4a88      	ldr	r2, [pc, #544]	; (8019d78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019b56:	6813      	ldr	r3, [r2, #0]
 8019b58:	4690      	mov	r8, r2
 8019b5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019b5e:	2b01      	cmp	r3, #1
 8019b60:	f040 8094 	bne.w	8019c8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8019b64:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019b68:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019b6c:	f04f 0900 	mov.w	r9, #0
 8019b70:	33aa      	adds	r3, #170	; 0xaa
 8019b72:	42a8      	cmp	r0, r5
 8019b74:	f103 0308 	add.w	r3, r3, #8
 8019b78:	dd0a      	ble.n	8019b90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8019b7a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019b7e:	3501      	adds	r5, #1
 8019b80:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019b84:	440a      	add	r2, r1
 8019b86:	b212      	sxth	r2, r2
 8019b88:	4591      	cmp	r9, r2
 8019b8a:	bfb8      	it	lt
 8019b8c:	4691      	movlt	r9, r2
 8019b8e:	e7f0      	b.n	8019b72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8019b90:	4b7a      	ldr	r3, [pc, #488]	; (8019d7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8019b92:	4e7b      	ldr	r6, [pc, #492]	; (8019d80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8019b94:	881d      	ldrh	r5, [r3, #0]
 8019b96:	2300      	movs	r3, #0
 8019b98:	2d0f      	cmp	r5, #15
 8019b9a:	bf8c      	ite	hi
 8019b9c:	08ed      	lsrhi	r5, r5, #3
 8019b9e:	2501      	movls	r5, #1
 8019ba0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019ba4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019ba8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019bac:	f8d8 0000 	ldr.w	r0, [r8]
 8019bb0:	440b      	add	r3, r1
 8019bb2:	6802      	ldr	r2, [r0, #0]
 8019bb4:	b21b      	sxth	r3, r3
 8019bb6:	4599      	cmp	r9, r3
 8019bb8:	dd4b      	ble.n	8019c52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8019bba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8019bbe:	4798      	blx	r3
 8019bc0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019bc4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019bc8:	4413      	add	r3, r2
 8019bca:	b21b      	sxth	r3, r3
 8019bcc:	195a      	adds	r2, r3, r5
 8019bce:	4290      	cmp	r0, r2
 8019bd0:	da07      	bge.n	8019be2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8019bd2:	4581      	cmp	r9, r0
 8019bd4:	dd05      	ble.n	8019be2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8019bd6:	4298      	cmp	r0, r3
 8019bd8:	da33      	bge.n	8019c42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	dd31      	ble.n	8019c42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8019bde:	4648      	mov	r0, r9
 8019be0:	e004      	b.n	8019bec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8019be2:	4298      	cmp	r0, r3
 8019be4:	dbfb      	blt.n	8019bde <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8019be6:	4548      	cmp	r0, r9
 8019be8:	bfa8      	it	ge
 8019bea:	4648      	movge	r0, r9
 8019bec:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019bf0:	2100      	movs	r1, #0
 8019bf2:	1ac0      	subs	r0, r0, r3
 8019bf4:	f8b7 a000 	ldrh.w	sl, [r7]
 8019bf8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c00:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019c04:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019c08:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019c0c:	4553      	cmp	r3, sl
 8019c0e:	d9c9      	bls.n	8019ba4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019c10:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019c14:	ab07      	add	r3, sp, #28
 8019c16:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019c1a:	6851      	ldr	r1, [r2, #4]
 8019c1c:	c303      	stmia	r3!, {r0, r1}
 8019c1e:	a807      	add	r0, sp, #28
 8019c20:	a905      	add	r1, sp, #20
 8019c22:	f7fb fce3 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 8019c26:	a807      	add	r0, sp, #28
 8019c28:	f7fb fd23 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019c2c:	b920      	cbnz	r0, 8019c38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8019c2e:	6823      	ldr	r3, [r4, #0]
 8019c30:	a907      	add	r1, sp, #28
 8019c32:	4620      	mov	r0, r4
 8019c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c36:	4798      	blx	r3
 8019c38:	f10a 0a01 	add.w	sl, sl, #1
 8019c3c:	fa1f fa8a 	uxth.w	sl, sl
 8019c40:	e7e2      	b.n	8019c08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8019c42:	f8d8 0000 	ldr.w	r0, [r8]
 8019c46:	2101      	movs	r1, #1
 8019c48:	6803      	ldr	r3, [r0, #0]
 8019c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c4e:	4798      	blx	r3
 8019c50:	e7a8      	b.n	8019ba4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019c52:	6a13      	ldr	r3, [r2, #32]
 8019c54:	4798      	blx	r3
 8019c56:	4b4b      	ldr	r3, [pc, #300]	; (8019d84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	f43f af26 	beq.w	8019aac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019c60:	2300      	movs	r3, #0
 8019c62:	883d      	ldrh	r5, [r7, #0]
 8019c64:	34ea      	adds	r4, #234	; 0xea
 8019c66:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019c6a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019c6e:	42ab      	cmp	r3, r5
 8019c70:	f67f af1c 	bls.w	8019aac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019c74:	ab1a      	add	r3, sp, #104	; 0x68
 8019c76:	4620      	mov	r0, r4
 8019c78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019c7c:	3501      	adds	r5, #1
 8019c7e:	3b44      	subs	r3, #68	; 0x44
 8019c80:	b2ad      	uxth	r5, r5
 8019c82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019c86:	f7ff fb8b 	bl	80193a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019c8a:	e7ee      	b.n	8019c6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8019c8c:	2b02      	cmp	r3, #2
 8019c8e:	f040 813d 	bne.w	8019f0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8019c92:	4b3d      	ldr	r3, [pc, #244]	; (8019d88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	2b01      	cmp	r3, #1
 8019c98:	d02c      	beq.n	8019cf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8019c9a:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8019c9e:	883a      	ldrh	r2, [r7, #0]
 8019ca0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8019ca4:	3201      	adds	r2, #1
 8019ca6:	b292      	uxth	r2, r2
 8019ca8:	2900      	cmp	r1, #0
 8019caa:	d0d4      	beq.n	8019c56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019cac:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8019cb0:	4610      	mov	r0, r2
 8019cb2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8019cb6:	f04f 0a00 	mov.w	sl, #0
 8019cba:	441d      	add	r5, r3
 8019cbc:	b22d      	sxth	r5, r5
 8019cbe:	b283      	uxth	r3, r0
 8019cc0:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8019cc4:	4299      	cmp	r1, r3
 8019cc6:	f240 80c3 	bls.w	8019e50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8019cca:	4426      	add	r6, r4
 8019ccc:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8019cd0:	4684      	mov	ip, r0
 8019cd2:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8019cd6:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8019cda:	4573      	cmp	r3, lr
 8019cdc:	f340 80a5 	ble.w	8019e2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8019ce0:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8019ce4:	4475      	add	r5, lr
 8019ce6:	b22d      	sxth	r5, r5
 8019ce8:	429d      	cmp	r5, r3
 8019cea:	bfa8      	it	ge
 8019cec:	461d      	movge	r5, r3
 8019cee:	3001      	adds	r0, #1
 8019cf0:	46e2      	mov	sl, ip
 8019cf2:	e7e4      	b.n	8019cbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8019cf4:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8019cf8:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8019cfc:	f1bb 0f00 	cmp.w	fp, #0
 8019d00:	d0a9      	beq.n	8019c56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019d02:	883b      	ldrh	r3, [r7, #0]
 8019d04:	2600      	movs	r6, #0
 8019d06:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	b29b      	uxth	r3, r3
 8019d0e:	b299      	uxth	r1, r3
 8019d10:	00f5      	lsls	r5, r6, #3
 8019d12:	458b      	cmp	fp, r1
 8019d14:	d93a      	bls.n	8019d8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8019d16:	4425      	add	r5, r4
 8019d18:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8019d1c:	469c      	mov	ip, r3
 8019d1e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8019d22:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8019d26:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8019d2a:	4408      	add	r0, r1
 8019d2c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8019d30:	4471      	add	r1, lr
 8019d32:	b200      	sxth	r0, r0
 8019d34:	b209      	sxth	r1, r1
 8019d36:	4288      	cmp	r0, r1
 8019d38:	da06      	bge.n	8019d48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8019d3a:	4586      	cmp	lr, r0
 8019d3c:	4672      	mov	r2, lr
 8019d3e:	bfb8      	it	lt
 8019d40:	4602      	movlt	r2, r0
 8019d42:	3301      	adds	r3, #1
 8019d44:	4666      	mov	r6, ip
 8019d46:	e7e2      	b.n	8019d0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019d48:	d10b      	bne.n	8019d62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8019d4a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8019d4e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8019d52:	458c      	cmp	ip, r1
 8019d54:	bfb4      	ite	lt
 8019d56:	469c      	movlt	ip, r3
 8019d58:	46b4      	movge	ip, r6
 8019d5a:	4572      	cmp	r2, lr
 8019d5c:	bfb8      	it	lt
 8019d5e:	4672      	movlt	r2, lr
 8019d60:	e7ef      	b.n	8019d42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019d62:	428a      	cmp	r2, r1
 8019d64:	46b4      	mov	ip, r6
 8019d66:	bfb8      	it	lt
 8019d68:	460a      	movlt	r2, r1
 8019d6a:	e7ea      	b.n	8019d42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019d6c:	200567a8 	.word	0x200567a8
 8019d70:	200567b4 	.word	0x200567b4
 8019d74:	20000024 	.word	0x20000024
 8019d78:	20056750 	.word	0x20056750
 8019d7c:	20056746 	.word	0x20056746
 8019d80:	20056744 	.word	0x20056744
 8019d84:	2005674e 	.word	0x2005674e
 8019d88:	20056748 	.word	0x20056748
 8019d8c:	1961      	adds	r1, r4, r5
 8019d8e:	ab07      	add	r3, sp, #28
 8019d90:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8019d94:	6849      	ldr	r1, [r1, #4]
 8019d96:	c303      	stmia	r3!, {r0, r1}
 8019d98:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019d9c:	a807      	add	r0, sp, #28
 8019d9e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019da2:	2b13      	cmp	r3, #19
 8019da4:	440b      	add	r3, r1
 8019da6:	bfd8      	it	le
 8019da8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019dac:	1a9b      	subs	r3, r3, r2
 8019dae:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019db2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019db6:	f7ff f90f 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019dba:	a807      	add	r0, sp, #28
 8019dbc:	f7fb fc59 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	d199      	bne.n	8019cf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019dc4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019dc8:	4425      	add	r5, r4
 8019dca:	f8d8 0000 	ldr.w	r0, [r8]
 8019dce:	f1bc 0f14 	cmp.w	ip, #20
 8019dd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019dd6:	f8d0 e000 	ldr.w	lr, [r0]
 8019dda:	bfa8      	it	ge
 8019ddc:	f04f 0c14 	movge.w	ip, #20
 8019de0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019de4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019de8:	fa1f fc8c 	uxth.w	ip, ip
 8019dec:	f8cd c000 	str.w	ip, [sp]
 8019df0:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 8019df4:	47d0      	blx	sl
 8019df6:	4682      	mov	sl, r0
 8019df8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019dfc:	a807      	add	r0, sp, #28
 8019dfe:	f7ff f891 	bl	8018f24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019e02:	6823      	ldr	r3, [r4, #0]
 8019e04:	4620      	mov	r0, r4
 8019e06:	a907      	add	r1, sp, #28
 8019e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e0a:	4798      	blx	r3
 8019e0c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019e10:	eba0 000a 	sub.w	r0, r0, sl
 8019e14:	b200      	sxth	r0, r0
 8019e16:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8019e1a:	2800      	cmp	r0, #0
 8019e1c:	f47f af6c 	bne.w	8019cf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019e20:	b2b1      	uxth	r1, r6
 8019e22:	4648      	mov	r0, r9
 8019e24:	f7ff faa6 	bl	8019374 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019e28:	e766      	b.n	8019cf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019e2a:	d10c      	bne.n	8019e46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8019e2c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8019e30:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8019e34:	45b4      	cmp	ip, r6
 8019e36:	bfb4      	ite	lt
 8019e38:	4684      	movlt	ip, r0
 8019e3a:	46d4      	movge	ip, sl
 8019e3c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8019e40:	4433      	add	r3, r6
 8019e42:	b21b      	sxth	r3, r3
 8019e44:	e750      	b.n	8019ce8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8019e46:	4575      	cmp	r5, lr
 8019e48:	46d4      	mov	ip, sl
 8019e4a:	bfa8      	it	ge
 8019e4c:	4675      	movge	r5, lr
 8019e4e:	e74e      	b.n	8019cee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8019e50:	eb0b 0006 	add.w	r0, fp, r6
 8019e54:	4426      	add	r6, r4
 8019e56:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8019e5a:	f1b9 0f13 	cmp.w	r9, #19
 8019e5e:	bfdc      	itt	le
 8019e60:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8019e64:	444d      	addle	r5, r9
 8019e66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019e6a:	bfd8      	it	le
 8019e6c:	b22d      	sxthle	r5, r5
 8019e6e:	f7fb fc00 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019e76:	2800      	cmp	r0, #0
 8019e78:	f47f af16 	bne.w	8019ca8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8019e7c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8019e80:	fa1f f989 	uxth.w	r9, r9
 8019e84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019e88:	eba5 050c 	sub.w	r5, r5, ip
 8019e8c:	fa1f f28c 	uxth.w	r2, ip
 8019e90:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8019e94:	eb02 0009 	add.w	r0, r2, r9
 8019e98:	2d14      	cmp	r5, #20
 8019e9a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8019e9e:	bfa8      	it	ge
 8019ea0:	2514      	movge	r5, #20
 8019ea2:	b200      	sxth	r0, r0
 8019ea4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019ea8:	b289      	uxth	r1, r1
 8019eaa:	fa1f fe85 	uxth.w	lr, r5
 8019eae:	eba0 000c 	sub.w	r0, r0, ip
 8019eb2:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019eb6:	4586      	cmp	lr, r0
 8019eb8:	f8d8 0000 	ldr.w	r0, [r8]
 8019ebc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	bfb8      	it	lt
 8019ec4:	46f1      	movlt	r9, lr
 8019ec6:	6805      	ldr	r5, [r0, #0]
 8019ec8:	f8cd 9000 	str.w	r9, [sp]
 8019ecc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 8019ed0:	47a8      	blx	r5
 8019ed2:	6823      	ldr	r3, [r4, #0]
 8019ed4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019ed8:	a907      	add	r1, sp, #28
 8019eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019edc:	4620      	mov	r0, r4
 8019ede:	4798      	blx	r3
 8019ee0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019ee4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8019ee8:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8019eec:	1a5b      	subs	r3, r3, r1
 8019eee:	440a      	add	r2, r1
 8019ef0:	b21b      	sxth	r3, r3
 8019ef2:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8019ef6:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	f47f aecf 	bne.w	8019c9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019f00:	fa1f f18a 	uxth.w	r1, sl
 8019f04:	4658      	mov	r0, fp
 8019f06:	f7ff fa35 	bl	8019374 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019f0a:	e6c8      	b.n	8019c9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019f0c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019f10:	42ab      	cmp	r3, r5
 8019f12:	f67f aea0 	bls.w	8019c56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019f16:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019f1a:	ab07      	add	r3, sp, #28
 8019f1c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019f20:	6851      	ldr	r1, [r2, #4]
 8019f22:	c303      	stmia	r3!, {r0, r1}
 8019f24:	a807      	add	r0, sp, #28
 8019f26:	f7fb fba4 	bl	8015672 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f2a:	b920      	cbnz	r0, 8019f36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8019f2c:	6823      	ldr	r3, [r4, #0]
 8019f2e:	a907      	add	r1, sp, #28
 8019f30:	4620      	mov	r0, r4
 8019f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f34:	4798      	blx	r3
 8019f36:	3501      	adds	r5, #1
 8019f38:	b2ad      	uxth	r5, r5
 8019f3a:	e7e7      	b.n	8019f0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08019f3c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019f3c:	4b03      	ldr	r3, [pc, #12]	; (8019f4c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019f3e:	2200      	movs	r2, #0
 8019f40:	801a      	strh	r2, [r3, #0]
 8019f42:	805a      	strh	r2, [r3, #2]
 8019f44:	809a      	strh	r2, [r3, #4]
 8019f46:	80da      	strh	r2, [r3, #6]
 8019f48:	4770      	bx	lr
 8019f4a:	bf00      	nop
 8019f4c:	200567b4 	.word	0x200567b4

08019f50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f54:	b09b      	sub	sp, #108	; 0x6c
 8019f56:	4606      	mov	r6, r0
 8019f58:	4614      	mov	r4, r2
 8019f5a:	468a      	mov	sl, r1
 8019f5c:	a803      	add	r0, sp, #12
 8019f5e:	461d      	mov	r5, r3
 8019f60:	f000 fe85 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 8019f64:	6833      	ldr	r3, [r6, #0]
 8019f66:	4630      	mov	r0, r6
 8019f68:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f6e:	4798      	blx	r3
 8019f70:	6833      	ldr	r3, [r6, #0]
 8019f72:	4607      	mov	r7, r0
 8019f74:	4630      	mov	r0, r6
 8019f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f78:	4798      	blx	r3
 8019f7a:	462a      	mov	r2, r5
 8019f7c:	2500      	movs	r5, #0
 8019f7e:	4621      	mov	r1, r4
 8019f80:	9000      	str	r0, [sp, #0]
 8019f82:	463b      	mov	r3, r7
 8019f84:	462c      	mov	r4, r5
 8019f86:	46a9      	mov	r9, r5
 8019f88:	46a8      	mov	r8, r5
 8019f8a:	a803      	add	r0, sp, #12
 8019f8c:	f000 febc 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019f90:	2300      	movs	r3, #0
 8019f92:	9302      	str	r3, [sp, #8]
 8019f94:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019f98:	429c      	cmp	r4, r3
 8019f9a:	d002      	beq.n	8019fa2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019f9c:	455c      	cmp	r4, fp
 8019f9e:	bf18      	it	ne
 8019fa0:	4625      	movne	r5, r4
 8019fa2:	ab02      	add	r3, sp, #8
 8019fa4:	4632      	mov	r2, r6
 8019fa6:	4651      	mov	r1, sl
 8019fa8:	a803      	add	r0, sp, #12
 8019faa:	f001 f9a9 	bl	801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019fae:	4604      	mov	r4, r0
 8019fb0:	b108      	cbz	r0, 8019fb6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8019fb2:	280a      	cmp	r0, #10
 8019fb4:	d10a      	bne.n	8019fcc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019fb6:	45c1      	cmp	r9, r8
 8019fb8:	bf38      	it	cc
 8019fba:	46c1      	movcc	r9, r8
 8019fbc:	f04f 0800 	mov.w	r8, #0
 8019fc0:	2c00      	cmp	r4, #0
 8019fc2:	d1e5      	bne.n	8019f90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019fc4:	4648      	mov	r0, r9
 8019fc6:	b01b      	add	sp, #108	; 0x6c
 8019fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fcc:	9a02      	ldr	r2, [sp, #8]
 8019fce:	2a00      	cmp	r2, #0
 8019fd0:	d0de      	beq.n	8019f90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019fd2:	7b57      	ldrb	r7, [r2, #13]
 8019fd4:	4629      	mov	r1, r5
 8019fd6:	6833      	ldr	r3, [r6, #0]
 8019fd8:	007f      	lsls	r7, r7, #1
 8019fda:	8894      	ldrh	r4, [r2, #4]
 8019fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fde:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019fe2:	7a97      	ldrb	r7, [r2, #10]
 8019fe4:	4307      	orrs	r7, r0
 8019fe6:	4630      	mov	r0, r6
 8019fe8:	4798      	blx	r3
 8019fea:	4438      	add	r0, r7
 8019fec:	4480      	add	r8, r0
 8019fee:	fa1f f888 	uxth.w	r8, r8
 8019ff2:	e7e5      	b.n	8019fc0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019ff4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019ff4:	b508      	push	{r3, lr}
 8019ff6:	6803      	ldr	r3, [r0, #0]
 8019ff8:	68db      	ldr	r3, [r3, #12]
 8019ffa:	4798      	blx	r3
 8019ffc:	b128      	cbz	r0, 801a00a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019ffe:	7b43      	ldrb	r3, [r0, #13]
 801a000:	7a80      	ldrb	r0, [r0, #10]
 801a002:	005b      	lsls	r3, r3, #1
 801a004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a008:	4318      	orrs	r0, r3
 801a00a:	bd08      	pop	{r3, pc}

0801a00c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a00c:	b40e      	push	{r1, r2, r3}
 801a00e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a010:	b09c      	sub	sp, #112	; 0x70
 801a012:	4605      	mov	r5, r0
 801a014:	ab21      	add	r3, sp, #132	; 0x84
 801a016:	a805      	add	r0, sp, #20
 801a018:	f853 4b04 	ldr.w	r4, [r3], #4
 801a01c:	9303      	str	r3, [sp, #12]
 801a01e:	f000 fe26 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 801a022:	682b      	ldr	r3, [r5, #0]
 801a024:	4628      	mov	r0, r5
 801a026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a028:	4798      	blx	r3
 801a02a:	682b      	ldr	r3, [r5, #0]
 801a02c:	4606      	mov	r6, r0
 801a02e:	4628      	mov	r0, r5
 801a030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a032:	4798      	blx	r3
 801a034:	4633      	mov	r3, r6
 801a036:	4621      	mov	r1, r4
 801a038:	ae1c      	add	r6, sp, #112	; 0x70
 801a03a:	2400      	movs	r4, #0
 801a03c:	9000      	str	r0, [sp, #0]
 801a03e:	9a03      	ldr	r2, [sp, #12]
 801a040:	a805      	add	r0, sp, #20
 801a042:	f000 fe61 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a046:	f846 4d60 	str.w	r4, [r6, #-96]!
 801a04a:	462a      	mov	r2, r5
 801a04c:	4633      	mov	r3, r6
 801a04e:	4621      	mov	r1, r4
 801a050:	a805      	add	r0, sp, #20
 801a052:	f001 f955 	bl	801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a056:	b300      	cbz	r0, 801a09a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a058:	280a      	cmp	r0, #10
 801a05a:	d01a      	beq.n	801a092 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a05c:	9f04      	ldr	r7, [sp, #16]
 801a05e:	b1c7      	cbz	r7, 801a092 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a060:	7b78      	ldrb	r0, [r7, #13]
 801a062:	7a3b      	ldrb	r3, [r7, #8]
 801a064:	00c1      	lsls	r1, r0, #3
 801a066:	88aa      	ldrh	r2, [r5, #4]
 801a068:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a06c:	4319      	orrs	r1, r3
 801a06e:	0643      	lsls	r3, r0, #25
 801a070:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a074:	bf48      	it	mi
 801a076:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801a07a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a07e:	bf48      	it	mi
 801a080:	b219      	sxthmi	r1, r3
 801a082:	79fb      	ldrb	r3, [r7, #7]
 801a084:	4303      	orrs	r3, r0
 801a086:	4413      	add	r3, r2
 801a088:	1a5b      	subs	r3, r3, r1
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	42a3      	cmp	r3, r4
 801a08e:	bfc8      	it	gt
 801a090:	b21c      	sxthgt	r4, r3
 801a092:	4633      	mov	r3, r6
 801a094:	462a      	mov	r2, r5
 801a096:	2100      	movs	r1, #0
 801a098:	e7da      	b.n	801a050 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a09a:	b2a0      	uxth	r0, r4
 801a09c:	b01c      	add	sp, #112	; 0x70
 801a09e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a0a2:	b003      	add	sp, #12
 801a0a4:	4770      	bx	lr

0801a0a6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a0a6:	b40e      	push	{r1, r2, r3}
 801a0a8:	b570      	push	{r4, r5, r6, lr}
 801a0aa:	b09b      	sub	sp, #108	; 0x6c
 801a0ac:	4604      	mov	r4, r0
 801a0ae:	ab1f      	add	r3, sp, #124	; 0x7c
 801a0b0:	a803      	add	r0, sp, #12
 801a0b2:	f853 5b04 	ldr.w	r5, [r3], #4
 801a0b6:	9302      	str	r3, [sp, #8]
 801a0b8:	f000 fdd9 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 801a0bc:	6823      	ldr	r3, [r4, #0]
 801a0be:	4620      	mov	r0, r4
 801a0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0c2:	4798      	blx	r3
 801a0c4:	6823      	ldr	r3, [r4, #0]
 801a0c6:	4606      	mov	r6, r0
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a0cc:	2401      	movs	r4, #1
 801a0ce:	4798      	blx	r3
 801a0d0:	4633      	mov	r3, r6
 801a0d2:	9000      	str	r0, [sp, #0]
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	9a02      	ldr	r2, [sp, #8]
 801a0d8:	a803      	add	r0, sp, #12
 801a0da:	f000 fe15 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a0de:	a803      	add	r0, sp, #12
 801a0e0:	f001 fa06 	bl	801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0e4:	b2a3      	uxth	r3, r4
 801a0e6:	b138      	cbz	r0, 801a0f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801a0e8:	280a      	cmp	r0, #10
 801a0ea:	a803      	add	r0, sp, #12
 801a0ec:	bf04      	itt	eq
 801a0ee:	3301      	addeq	r3, #1
 801a0f0:	b21c      	sxtheq	r4, r3
 801a0f2:	f001 f9fd 	bl	801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0f6:	e7f5      	b.n	801a0e4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	b01b      	add	sp, #108	; 0x6c
 801a0fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a100:	b003      	add	sp, #12
 801a102:	4770      	bx	lr

0801a104 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a104:	b40e      	push	{r1, r2, r3}
 801a106:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a108:	b09c      	sub	sp, #112	; 0x70
 801a10a:	4604      	mov	r4, r0
 801a10c:	ab21      	add	r3, sp, #132	; 0x84
 801a10e:	a805      	add	r0, sp, #20
 801a110:	f853 5b04 	ldr.w	r5, [r3], #4
 801a114:	9303      	str	r3, [sp, #12]
 801a116:	f000 fdaa 	bl	801ac6e <_ZN8touchgfx12TextProviderC1Ev>
 801a11a:	6823      	ldr	r3, [r4, #0]
 801a11c:	4620      	mov	r0, r4
 801a11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a120:	4798      	blx	r3
 801a122:	6823      	ldr	r3, [r4, #0]
 801a124:	4606      	mov	r6, r0
 801a126:	4620      	mov	r0, r4
 801a128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a12a:	4798      	blx	r3
 801a12c:	4633      	mov	r3, r6
 801a12e:	4629      	mov	r1, r5
 801a130:	9000      	str	r0, [sp, #0]
 801a132:	9a03      	ldr	r2, [sp, #12]
 801a134:	a805      	add	r0, sp, #20
 801a136:	f000 fde7 	bl	801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a13a:	ad1c      	add	r5, sp, #112	; 0x70
 801a13c:	2100      	movs	r1, #0
 801a13e:	26ff      	movs	r6, #255	; 0xff
 801a140:	4622      	mov	r2, r4
 801a142:	a805      	add	r0, sp, #20
 801a144:	f845 1d60 	str.w	r1, [r5, #-96]!
 801a148:	462b      	mov	r3, r5
 801a14a:	f001 f8d9 	bl	801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a14e:	b1d8      	cbz	r0, 801a188 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801a150:	280a      	cmp	r0, #10
 801a152:	d012      	beq.n	801a17a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801a154:	9804      	ldr	r0, [sp, #16]
 801a156:	b180      	cbz	r0, 801a17a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801a158:	7b47      	ldrb	r7, [r0, #13]
 801a15a:	7922      	ldrb	r2, [r4, #4]
 801a15c:	00fb      	lsls	r3, r7, #3
 801a15e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a162:	7a03      	ldrb	r3, [r0, #8]
 801a164:	430b      	orrs	r3, r1
 801a166:	0679      	lsls	r1, r7, #25
 801a168:	bf44      	itt	mi
 801a16a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a16e:	b21b      	sxthmi	r3, r3
 801a170:	1ad3      	subs	r3, r2, r3
 801a172:	b2db      	uxtb	r3, r3
 801a174:	429e      	cmp	r6, r3
 801a176:	bf28      	it	cs
 801a178:	461e      	movcs	r6, r3
 801a17a:	462b      	mov	r3, r5
 801a17c:	4622      	mov	r2, r4
 801a17e:	2100      	movs	r1, #0
 801a180:	a805      	add	r0, sp, #20
 801a182:	f001 f8bd 	bl	801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a186:	e7e2      	b.n	801a14e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801a188:	4630      	mov	r0, r6
 801a18a:	b01c      	add	sp, #112	; 0x70
 801a18c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a190:	b003      	add	sp, #12
 801a192:	4770      	bx	lr

0801a194 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a194:	b513      	push	{r0, r1, r4, lr}
 801a196:	1d01      	adds	r1, r0, #4
 801a198:	4603      	mov	r3, r0
 801a19a:	466a      	mov	r2, sp
 801a19c:	c903      	ldmia	r1, {r0, r1}
 801a19e:	e882 0003 	stmia.w	r2, {r0, r1}
 801a1a2:	2100      	movs	r1, #0
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	9100      	str	r1, [sp, #0]
 801a1a8:	6819      	ldr	r1, [r3, #0]
 801a1aa:	690c      	ldr	r4, [r1, #16]
 801a1ac:	4611      	mov	r1, r2
 801a1ae:	47a0      	blx	r4
 801a1b0:	b002      	add	sp, #8
 801a1b2:	bd10      	pop	{r4, pc}

0801a1b4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a1b4:	b538      	push	{r3, r4, r5, lr}
 801a1b6:	680b      	ldr	r3, [r1, #0]
 801a1b8:	460c      	mov	r4, r1
 801a1ba:	4605      	mov	r5, r0
 801a1bc:	68db      	ldr	r3, [r3, #12]
 801a1be:	4798      	blx	r3
 801a1c0:	6823      	ldr	r3, [r4, #0]
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	4629      	mov	r1, r5
 801a1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1c8:	4798      	blx	r3
 801a1ca:	4628      	mov	r0, r5
 801a1cc:	bd38      	pop	{r3, r4, r5, pc}

0801a1ce <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a1ce:	b410      	push	{r4}
 801a1d0:	880a      	ldrh	r2, [r1, #0]
 801a1d2:	8884      	ldrh	r4, [r0, #4]
 801a1d4:	4422      	add	r2, r4
 801a1d6:	800a      	strh	r2, [r1, #0]
 801a1d8:	884a      	ldrh	r2, [r1, #2]
 801a1da:	88c4      	ldrh	r4, [r0, #6]
 801a1dc:	4422      	add	r2, r4
 801a1de:	804a      	strh	r2, [r1, #2]
 801a1e0:	6940      	ldr	r0, [r0, #20]
 801a1e2:	b120      	cbz	r0, 801a1ee <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a1e4:	6803      	ldr	r3, [r0, #0]
 801a1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1ec:	4718      	bx	r3
 801a1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1f2:	4770      	bx	lr

0801a1f4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1f6:	460b      	mov	r3, r1
 801a1f8:	b085      	sub	sp, #20
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	b901      	cbnz	r1, 801a200 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a1fe:	b322      	cbz	r2, 801a24a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801a200:	1d27      	adds	r7, r4, #4
 801a202:	466e      	mov	r6, sp
 801a204:	88e5      	ldrh	r5, [r4, #6]
 801a206:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a20a:	442a      	add	r2, r5
 801a20c:	e886 0003 	stmia.w	r6, {r0, r1}
 801a210:	88a1      	ldrh	r1, [r4, #4]
 801a212:	4620      	mov	r0, r4
 801a214:	b215      	sxth	r5, r2
 801a216:	4419      	add	r1, r3
 801a218:	6823      	ldr	r3, [r4, #0]
 801a21a:	b209      	sxth	r1, r1
 801a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a21e:	4798      	blx	r3
 801a220:	6823      	ldr	r3, [r4, #0]
 801a222:	4629      	mov	r1, r5
 801a224:	4620      	mov	r0, r4
 801a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a228:	ad02      	add	r5, sp, #8
 801a22a:	4798      	blx	r3
 801a22c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a230:	e885 0003 	stmia.w	r5, {r0, r1}
 801a234:	6960      	ldr	r0, [r4, #20]
 801a236:	b150      	cbz	r0, 801a24e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801a238:	6803      	ldr	r3, [r0, #0]
 801a23a:	4631      	mov	r1, r6
 801a23c:	691b      	ldr	r3, [r3, #16]
 801a23e:	4798      	blx	r3
 801a240:	6960      	ldr	r0, [r4, #20]
 801a242:	6803      	ldr	r3, [r0, #0]
 801a244:	691b      	ldr	r3, [r3, #16]
 801a246:	4629      	mov	r1, r5
 801a248:	4798      	blx	r3
 801a24a:	b005      	add	sp, #20
 801a24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a24e:	f7ff f82b 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 801a252:	6803      	ldr	r3, [r0, #0]
 801a254:	4631      	mov	r1, r6
 801a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a258:	4798      	blx	r3
 801a25a:	f7ff f825 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 801a25e:	6803      	ldr	r3, [r0, #0]
 801a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a262:	e7f0      	b.n	801a246 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801a264 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a266:	8882      	ldrh	r2, [r0, #4]
 801a268:	4605      	mov	r5, r0
 801a26a:	880b      	ldrh	r3, [r1, #0]
 801a26c:	460c      	mov	r4, r1
 801a26e:	4413      	add	r3, r2
 801a270:	800b      	strh	r3, [r1, #0]
 801a272:	884b      	ldrh	r3, [r1, #2]
 801a274:	88c2      	ldrh	r2, [r0, #6]
 801a276:	4413      	add	r3, r2
 801a278:	4602      	mov	r2, r0
 801a27a:	804b      	strh	r3, [r1, #2]
 801a27c:	466b      	mov	r3, sp
 801a27e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a282:	6851      	ldr	r1, [r2, #4]
 801a284:	c303      	stmia	r3!, {r0, r1}
 801a286:	4621      	mov	r1, r4
 801a288:	4668      	mov	r0, sp
 801a28a:	f7fb f9af 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801a28e:	466b      	mov	r3, sp
 801a290:	cb03      	ldmia	r3!, {r0, r1}
 801a292:	6020      	str	r0, [r4, #0]
 801a294:	6061      	str	r1, [r4, #4]
 801a296:	6968      	ldr	r0, [r5, #20]
 801a298:	b128      	cbz	r0, 801a2a6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801a29a:	6803      	ldr	r3, [r0, #0]
 801a29c:	691b      	ldr	r3, [r3, #16]
 801a29e:	4621      	mov	r1, r4
 801a2a0:	4798      	blx	r3
 801a2a2:	b003      	add	sp, #12
 801a2a4:	bd30      	pop	{r4, r5, pc}
 801a2a6:	f7fe ffff 	bl	80192a8 <_ZN8touchgfx11Application11getInstanceEv>
 801a2aa:	6803      	ldr	r3, [r0, #0]
 801a2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2ae:	e7f6      	b.n	801a29e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801a2b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a2b0:	b570      	push	{r4, r5, r6, lr}
 801a2b2:	8882      	ldrh	r2, [r0, #4]
 801a2b4:	460c      	mov	r4, r1
 801a2b6:	880b      	ldrh	r3, [r1, #0]
 801a2b8:	4605      	mov	r5, r0
 801a2ba:	4413      	add	r3, r2
 801a2bc:	800b      	strh	r3, [r1, #0]
 801a2be:	884b      	ldrh	r3, [r1, #2]
 801a2c0:	88c2      	ldrh	r2, [r0, #6]
 801a2c2:	4413      	add	r3, r2
 801a2c4:	804b      	strh	r3, [r1, #2]
 801a2c6:	1d01      	adds	r1, r0, #4
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	f7fb f98f 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801a2ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	dd0b      	ble.n	801a2ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a2d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	dd07      	ble.n	801a2ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a2de:	6968      	ldr	r0, [r5, #20]
 801a2e0:	b128      	cbz	r0, 801a2ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a2e2:	6803      	ldr	r3, [r0, #0]
 801a2e4:	4621      	mov	r1, r4
 801a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2ec:	4718      	bx	r3
 801a2ee:	bd70      	pop	{r4, r5, r6, pc}

0801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a2f0:	b510      	push	{r4, lr}
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	4604      	mov	r4, r0
 801a2f6:	4608      	mov	r0, r1
 801a2f8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a2fc:	8023      	strh	r3, [r4, #0]
 801a2fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a302:	8063      	strh	r3, [r4, #2]
 801a304:	6803      	ldr	r3, [r0, #0]
 801a306:	80a1      	strh	r1, [r4, #4]
 801a308:	4621      	mov	r1, r4
 801a30a:	80e2      	strh	r2, [r4, #6]
 801a30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a30e:	4798      	blx	r3
 801a310:	4620      	mov	r0, r4
 801a312:	bd10      	pop	{r4, pc}

0801a314 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801a314:	b530      	push	{r4, r5, lr}
 801a316:	8083      	strh	r3, [r0, #4]
 801a318:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a31c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801a320:	7183      	strb	r3, [r0, #6]
 801a322:	79c3      	ldrb	r3, [r0, #7]
 801a324:	6101      	str	r1, [r0, #16]
 801a326:	f365 0306 	bfi	r3, r5, #0, #7
 801a32a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a32e:	8282      	strh	r2, [r0, #20]
 801a330:	f365 13c7 	bfi	r3, r5, #7, #1
 801a334:	71c3      	strb	r3, [r0, #7]
 801a336:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801a33a:	7203      	strb	r3, [r0, #8]
 801a33c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801a340:	7243      	strb	r3, [r0, #9]
 801a342:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a346:	8143      	strh	r3, [r0, #10]
 801a348:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a34c:	8183      	strh	r3, [r0, #12]
 801a34e:	4b01      	ldr	r3, [pc, #4]	; (801a354 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801a350:	6003      	str	r3, [r0, #0]
 801a352:	bd30      	pop	{r4, r5, pc}
 801a354:	0802d918 	.word	0x0802d918

0801a358 <_ZNK8touchgfx9ConstFont4findEt>:
 801a358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a35a:	6904      	ldr	r4, [r0, #16]
 801a35c:	b3bc      	cbz	r4, 801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a35e:	88a3      	ldrh	r3, [r4, #4]
 801a360:	8a82      	ldrh	r2, [r0, #20]
 801a362:	1acb      	subs	r3, r1, r3
 801a364:	f102 32ff 	add.w	r2, r2, #4294967295
 801a368:	d431      	bmi.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a36a:	4293      	cmp	r3, r2
 801a36c:	dd0c      	ble.n	801a388 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a36e:	230e      	movs	r3, #14
 801a370:	fb03 4302 	mla	r3, r3, r2, r4
 801a374:	889b      	ldrh	r3, [r3, #4]
 801a376:	1a5b      	subs	r3, r3, r1
 801a378:	1ad3      	subs	r3, r2, r3
 801a37a:	429a      	cmp	r2, r3
 801a37c:	db27      	blt.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a37e:	2b00      	cmp	r3, #0
 801a380:	bfbc      	itt	lt
 801a382:	2302      	movlt	r3, #2
 801a384:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a388:	2500      	movs	r5, #0
 801a38a:	260e      	movs	r6, #14
 801a38c:	4295      	cmp	r5, r2
 801a38e:	dc1e      	bgt.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a390:	fb06 4003 	mla	r0, r6, r3, r4
 801a394:	8887      	ldrh	r7, [r0, #4]
 801a396:	42b9      	cmp	r1, r7
 801a398:	d01a      	beq.n	801a3d0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a39a:	d20d      	bcs.n	801a3b8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a39c:	1e5a      	subs	r2, r3, #1
 801a39e:	4295      	cmp	r5, r2
 801a3a0:	dc15      	bgt.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a3a2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a3a6:	1a5b      	subs	r3, r3, r1
 801a3a8:	1ad3      	subs	r3, r2, r3
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	db0f      	blt.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a3ae:	429d      	cmp	r5, r3
 801a3b0:	ddec      	ble.n	801a38c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a3b2:	1953      	adds	r3, r2, r5
 801a3b4:	105b      	asrs	r3, r3, #1
 801a3b6:	e7e9      	b.n	801a38c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a3b8:	1c5d      	adds	r5, r3, #1
 801a3ba:	42aa      	cmp	r2, r5
 801a3bc:	db07      	blt.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a3be:	8a43      	ldrh	r3, [r0, #18]
 801a3c0:	1acb      	subs	r3, r1, r3
 801a3c2:	442b      	add	r3, r5
 801a3c4:	429d      	cmp	r5, r3
 801a3c6:	dc02      	bgt.n	801a3ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	dadf      	bge.n	801a38c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a3cc:	e7f1      	b.n	801a3b2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3d4:	4604      	mov	r4, r0
 801a3d6:	4617      	mov	r7, r2
 801a3d8:	461e      	mov	r6, r3
 801a3da:	b911      	cbnz	r1, 801a3e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a3dc:	2500      	movs	r5, #0
 801a3de:	4628      	mov	r0, r5
 801a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3e2:	290a      	cmp	r1, #10
 801a3e4:	d0fa      	beq.n	801a3dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a3e6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a3ea:	4291      	cmp	r1, r2
 801a3ec:	d0f6      	beq.n	801a3dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a3ee:	f242 020b 	movw	r2, #8203	; 0x200b
 801a3f2:	4291      	cmp	r1, r2
 801a3f4:	d0f2      	beq.n	801a3dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a3f6:	f7ff ffaf 	bl	801a358 <_ZNK8touchgfx9ConstFont4findEt>
 801a3fa:	4605      	mov	r5, r0
 801a3fc:	b950      	cbnz	r0, 801a414 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a3fe:	6823      	ldr	r3, [r4, #0]
 801a400:	4620      	mov	r0, r4
 801a402:	691b      	ldr	r3, [r3, #16]
 801a404:	4798      	blx	r3
 801a406:	4601      	mov	r1, r0
 801a408:	4620      	mov	r0, r4
 801a40a:	f7ff ffa5 	bl	801a358 <_ZNK8touchgfx9ConstFont4findEt>
 801a40e:	4605      	mov	r5, r0
 801a410:	2800      	cmp	r0, #0
 801a412:	d0e3      	beq.n	801a3dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a414:	6823      	ldr	r3, [r4, #0]
 801a416:	4629      	mov	r1, r5
 801a418:	4620      	mov	r0, r4
 801a41a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a41c:	4798      	blx	r3
 801a41e:	6038      	str	r0, [r7, #0]
 801a420:	6823      	ldr	r3, [r4, #0]
 801a422:	4620      	mov	r0, r4
 801a424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a426:	4798      	blx	r3
 801a428:	7030      	strb	r0, [r6, #0]
 801a42a:	e7d8      	b.n	801a3de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a42c <_ZN8touchgfx6memsetEPvhm>:
 801a42c:	4402      	add	r2, r0
 801a42e:	4290      	cmp	r0, r2
 801a430:	d002      	beq.n	801a438 <_ZN8touchgfx6memsetEPvhm+0xc>
 801a432:	f800 1b01 	strb.w	r1, [r0], #1
 801a436:	e7fa      	b.n	801a42e <_ZN8touchgfx6memsetEPvhm+0x2>
 801a438:	4770      	bx	lr

0801a43a <_ZN8touchgfx4clzuEm>:
 801a43a:	4603      	mov	r3, r0
 801a43c:	b1c8      	cbz	r0, 801a472 <_ZN8touchgfx4clzuEm+0x38>
 801a43e:	0c02      	lsrs	r2, r0, #16
 801a440:	0412      	lsls	r2, r2, #16
 801a442:	b9a2      	cbnz	r2, 801a46e <_ZN8touchgfx4clzuEm+0x34>
 801a444:	0403      	lsls	r3, r0, #16
 801a446:	2010      	movs	r0, #16
 801a448:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a44c:	bf04      	itt	eq
 801a44e:	021b      	lsleq	r3, r3, #8
 801a450:	3008      	addeq	r0, #8
 801a452:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a456:	bf04      	itt	eq
 801a458:	011b      	lsleq	r3, r3, #4
 801a45a:	3004      	addeq	r0, #4
 801a45c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a460:	bf04      	itt	eq
 801a462:	009b      	lsleq	r3, r3, #2
 801a464:	3002      	addeq	r0, #2
 801a466:	2b00      	cmp	r3, #0
 801a468:	db04      	blt.n	801a474 <_ZN8touchgfx4clzuEm+0x3a>
 801a46a:	3001      	adds	r0, #1
 801a46c:	4770      	bx	lr
 801a46e:	2000      	movs	r0, #0
 801a470:	e7ea      	b.n	801a448 <_ZN8touchgfx4clzuEm+0xe>
 801a472:	2020      	movs	r0, #32
 801a474:	4770      	bx	lr

0801a476 <_ZN8touchgfx7muldivuEmmmRm>:
 801a476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a47a:	4680      	mov	r8, r0
 801a47c:	460f      	mov	r7, r1
 801a47e:	4615      	mov	r5, r2
 801a480:	461e      	mov	r6, r3
 801a482:	f7ff ffda 	bl	801a43a <_ZN8touchgfx4clzuEm>
 801a486:	b998      	cbnz	r0, 801a4b0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801a488:	4608      	mov	r0, r1
 801a48a:	f7ff ffd6 	bl	801a43a <_ZN8touchgfx4clzuEm>
 801a48e:	2800      	cmp	r0, #0
 801a490:	dd08      	ble.n	801a4a4 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801a492:	4633      	mov	r3, r6
 801a494:	462a      	mov	r2, r5
 801a496:	4641      	mov	r1, r8
 801a498:	4638      	mov	r0, r7
 801a49a:	f7ff ffec 	bl	801a476 <_ZN8touchgfx7muldivuEmmmRm>
 801a49e:	b003      	add	sp, #12
 801a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 801a4a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a4ac:	6033      	str	r3, [r6, #0]
 801a4ae:	e7f6      	b.n	801a49e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801a4b0:	fa31 f900 	lsrs.w	r9, r1, r0
 801a4b4:	fb01 f308 	mul.w	r3, r1, r8
 801a4b8:	d105      	bne.n	801a4c6 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801a4ba:	fbb3 f0f5 	udiv	r0, r3, r5
 801a4be:	fb05 3510 	mls	r5, r5, r0, r3
 801a4c2:	6035      	str	r5, [r6, #0]
 801a4c4:	e7eb      	b.n	801a49e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	fa08 fb00 	lsl.w	fp, r8, r0
 801a4cc:	462a      	mov	r2, r5
 801a4ce:	4641      	mov	r1, r8
 801a4d0:	fa03 f000 	lsl.w	r0, r3, r0
 801a4d4:	4633      	mov	r3, r6
 801a4d6:	fbbb faf5 	udiv	sl, fp, r5
 801a4da:	3801      	subs	r0, #1
 801a4dc:	fb09 f40a 	mul.w	r4, r9, sl
 801a4e0:	4038      	ands	r0, r7
 801a4e2:	f7ff ffc8 	bl	801a476 <_ZN8touchgfx7muldivuEmmmRm>
 801a4e6:	462a      	mov	r2, r5
 801a4e8:	4607      	mov	r7, r0
 801a4ea:	ab01      	add	r3, sp, #4
 801a4ec:	fb05 b11a 	mls	r1, r5, sl, fp
 801a4f0:	4648      	mov	r0, r9
 801a4f2:	f7ff ffc0 	bl	801a476 <_ZN8touchgfx7muldivuEmmmRm>
 801a4f6:	9b01      	ldr	r3, [sp, #4]
 801a4f8:	6832      	ldr	r2, [r6, #0]
 801a4fa:	441a      	add	r2, r3
 801a4fc:	fbb2 f3f5 	udiv	r3, r2, r5
 801a500:	441c      	add	r4, r3
 801a502:	fb05 2513 	mls	r5, r5, r3, r2
 801a506:	443c      	add	r4, r7
 801a508:	4420      	add	r0, r4
 801a50a:	e7da      	b.n	801a4c2 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801a50c <_ZN8touchgfx6muldivElllRl>:
 801a50c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a50e:	2800      	cmp	r0, #0
 801a510:	461e      	mov	r6, r3
 801a512:	bfba      	itte	lt
 801a514:	4240      	neglt	r0, r0
 801a516:	f04f 34ff 	movlt.w	r4, #4294967295
 801a51a:	2401      	movge	r4, #1
 801a51c:	2900      	cmp	r1, #0
 801a51e:	bfbc      	itt	lt
 801a520:	4249      	neglt	r1, r1
 801a522:	4264      	neglt	r4, r4
 801a524:	2a00      	cmp	r2, #0
 801a526:	bfb6      	itet	lt
 801a528:	4265      	neglt	r5, r4
 801a52a:	4625      	movge	r5, r4
 801a52c:	4252      	neglt	r2, r2
 801a52e:	4288      	cmp	r0, r1
 801a530:	bfc2      	ittt	gt
 801a532:	4603      	movgt	r3, r0
 801a534:	4608      	movgt	r0, r1
 801a536:	4619      	movgt	r1, r3
 801a538:	ab01      	add	r3, sp, #4
 801a53a:	f7ff ff9c 	bl	801a476 <_ZN8touchgfx7muldivuEmmmRm>
 801a53e:	9b01      	ldr	r3, [sp, #4]
 801a540:	4368      	muls	r0, r5
 801a542:	435c      	muls	r4, r3
 801a544:	6034      	str	r4, [r6, #0]
 801a546:	b002      	add	sp, #8
 801a548:	bd70      	pop	{r4, r5, r6, pc}

0801a54a <_ZN8touchgfx6muldivElll>:
 801a54a:	b513      	push	{r0, r1, r4, lr}
 801a54c:	4614      	mov	r4, r2
 801a54e:	ab01      	add	r3, sp, #4
 801a550:	f7ff ffdc 	bl	801a50c <_ZN8touchgfx6muldivElllRl>
 801a554:	2800      	cmp	r0, #0
 801a556:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801a55a:	9b01      	ldr	r3, [sp, #4]
 801a55c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801a560:	db0a      	blt.n	801a578 <_ZN8touchgfx6muldivElll+0x2e>
 801a562:	2b00      	cmp	r3, #0
 801a564:	f102 0201 	add.w	r2, r2, #1
 801a568:	bfb8      	it	lt
 801a56a:	425b      	neglt	r3, r3
 801a56c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801a570:	db00      	blt.n	801a574 <_ZN8touchgfx6muldivElll+0x2a>
 801a572:	3001      	adds	r0, #1
 801a574:	b002      	add	sp, #8
 801a576:	bd10      	pop	{r4, pc}
 801a578:	2b00      	cmp	r3, #0
 801a57a:	bfb8      	it	lt
 801a57c:	425b      	neglt	r3, r3
 801a57e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801a582:	bfc8      	it	gt
 801a584:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801a588:	e7f4      	b.n	801a574 <_ZN8touchgfx6muldivElll+0x2a>

0801a58a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801a58a:	2000      	movs	r0, #0
 801a58c:	4770      	bx	lr

0801a58e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801a58e:	2001      	movs	r0, #1
 801a590:	4770      	bx	lr

0801a592 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a592:	2002      	movs	r0, #2
 801a594:	4770      	bx	lr

0801a596 <_ZN8touchgfx12GestureEventD1Ev>:
 801a596:	4770      	bx	lr

0801a598 <_ZN8touchgfx9DragEventD1Ev>:
 801a598:	4770      	bx	lr

0801a59a <_ZN8touchgfx10ClickEventD1Ev>:
 801a59a:	4770      	bx	lr

0801a59c <_ZN8touchgfx10ClickEventD0Ev>:
 801a59c:	b510      	push	{r4, lr}
 801a59e:	4604      	mov	r4, r0
 801a5a0:	210c      	movs	r1, #12
 801a5a2:	f00b fe50 	bl	8026246 <_ZdlPvj>
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	bd10      	pop	{r4, pc}

0801a5aa <_ZN8touchgfx9DragEventD0Ev>:
 801a5aa:	b510      	push	{r4, lr}
 801a5ac:	4604      	mov	r4, r0
 801a5ae:	2110      	movs	r1, #16
 801a5b0:	f00b fe49 	bl	8026246 <_ZdlPvj>
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	bd10      	pop	{r4, pc}

0801a5b8 <_ZN8touchgfx12GestureEventD0Ev>:
 801a5b8:	b510      	push	{r4, lr}
 801a5ba:	4604      	mov	r4, r0
 801a5bc:	210c      	movs	r1, #12
 801a5be:	f00b fe42 	bl	8026246 <_ZdlPvj>
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	bd10      	pop	{r4, pc}
	...

0801a5c8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a5c8:	b530      	push	{r4, r5, lr}
 801a5ca:	460d      	mov	r5, r1
 801a5cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a5ce:	b087      	sub	sp, #28
 801a5d0:	4604      	mov	r4, r0
 801a5d2:	b301      	cbz	r1, 801a616 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a5d4:	a801      	add	r0, sp, #4
 801a5d6:	f7ff fe8b 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5da:	892a      	ldrh	r2, [r5, #8]
 801a5dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a5e0:	7928      	ldrb	r0, [r5, #4]
 801a5e2:	1ad2      	subs	r2, r2, r3
 801a5e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a5e6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a5ea:	441a      	add	r2, r3
 801a5ec:	896b      	ldrh	r3, [r5, #10]
 801a5ee:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a5f2:	f88d 0010 	strb.w	r0, [sp, #16]
 801a5f6:	1b5b      	subs	r3, r3, r5
 801a5f8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a5fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a5fc:	442b      	add	r3, r5
 801a5fe:	4d07      	ldr	r5, [pc, #28]	; (801a61c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a600:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a604:	a903      	add	r1, sp, #12
 801a606:	9503      	str	r5, [sp, #12]
 801a608:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a60c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a610:	6803      	ldr	r3, [r0, #0]
 801a612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a614:	4798      	blx	r3
 801a616:	b007      	add	sp, #28
 801a618:	bd30      	pop	{r4, r5, pc}
 801a61a:	bf00      	nop
 801a61c:	0802d998 	.word	0x0802d998

0801a620 <_ZNK8touchgfx4Rect9intersectEss>:
 801a620:	b510      	push	{r4, lr}
 801a622:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a626:	428b      	cmp	r3, r1
 801a628:	dc10      	bgt.n	801a64c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a62a:	8884      	ldrh	r4, [r0, #4]
 801a62c:	4423      	add	r3, r4
 801a62e:	b21b      	sxth	r3, r3
 801a630:	4299      	cmp	r1, r3
 801a632:	da0b      	bge.n	801a64c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a634:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a638:	4293      	cmp	r3, r2
 801a63a:	dc07      	bgt.n	801a64c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a63c:	88c0      	ldrh	r0, [r0, #6]
 801a63e:	4418      	add	r0, r3
 801a640:	b200      	sxth	r0, r0
 801a642:	4282      	cmp	r2, r0
 801a644:	bfac      	ite	ge
 801a646:	2000      	movge	r0, #0
 801a648:	2001      	movlt	r0, #1
 801a64a:	bd10      	pop	{r4, pc}
 801a64c:	2000      	movs	r0, #0
 801a64e:	e7fc      	b.n	801a64a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a650 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a650:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a652:	460c      	mov	r4, r1
 801a654:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a656:	b089      	sub	sp, #36	; 0x24
 801a658:	4605      	mov	r5, r0
 801a65a:	2900      	cmp	r1, #0
 801a65c:	d054      	beq.n	801a708 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a65e:	4668      	mov	r0, sp
 801a660:	f7ff fe46 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a664:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a666:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a668:	4668      	mov	r0, sp
 801a66a:	8922      	ldrh	r2, [r4, #8]
 801a66c:	88e1      	ldrh	r1, [r4, #6]
 801a66e:	443a      	add	r2, r7
 801a670:	4431      	add	r1, r6
 801a672:	b212      	sxth	r2, r2
 801a674:	b209      	sxth	r1, r1
 801a676:	f7ff ffd3 	bl	801a620 <_ZNK8touchgfx4Rect9intersectEss>
 801a67a:	b1d0      	cbz	r0, 801a6b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a67c:	89a2      	ldrh	r2, [r4, #12]
 801a67e:	4668      	mov	r0, sp
 801a680:	8961      	ldrh	r1, [r4, #10]
 801a682:	443a      	add	r2, r7
 801a684:	4431      	add	r1, r6
 801a686:	b212      	sxth	r2, r2
 801a688:	b209      	sxth	r1, r1
 801a68a:	f7ff ffc9 	bl	801a620 <_ZNK8touchgfx4Rect9intersectEss>
 801a68e:	4603      	mov	r3, r0
 801a690:	b978      	cbnz	r0, 801a6b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a692:	4a1e      	ldr	r2, [pc, #120]	; (801a70c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a694:	a904      	add	r1, sp, #16
 801a696:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a698:	9204      	str	r2, [sp, #16]
 801a69a:	2202      	movs	r2, #2
 801a69c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a6a0:	f88d 2014 	strb.w	r2, [sp, #20]
 801a6a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a6a8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a6ac:	6803      	ldr	r3, [r0, #0]
 801a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6b0:	4798      	blx	r3
 801a6b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a6b4:	a802      	add	r0, sp, #8
 801a6b6:	f7ff fe1b 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6ba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a6be:	88e0      	ldrh	r0, [r4, #6]
 801a6c0:	8961      	ldrh	r1, [r4, #10]
 801a6c2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a6c6:	1a80      	subs	r0, r0, r2
 801a6c8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a6cc:	1a89      	subs	r1, r1, r2
 801a6ce:	8923      	ldrh	r3, [r4, #8]
 801a6d0:	4460      	add	r0, ip
 801a6d2:	89a2      	ldrh	r2, [r4, #12]
 801a6d4:	4461      	add	r1, ip
 801a6d6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a6d8:	eba3 030e 	sub.w	r3, r3, lr
 801a6dc:	eba2 020e 	sub.w	r2, r2, lr
 801a6e0:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a6e4:	7927      	ldrb	r7, [r4, #4]
 801a6e6:	4433      	add	r3, r6
 801a6e8:	4432      	add	r2, r6
 801a6ea:	4c09      	ldr	r4, [pc, #36]	; (801a710 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a6ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a6ee:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a6f2:	a904      	add	r1, sp, #16
 801a6f4:	9404      	str	r4, [sp, #16]
 801a6f6:	f88d 7014 	strb.w	r7, [sp, #20]
 801a6fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a6fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a702:	6803      	ldr	r3, [r0, #0]
 801a704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a706:	4798      	blx	r3
 801a708:	b009      	add	sp, #36	; 0x24
 801a70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a70c:	0802d970 	.word	0x0802d970
 801a710:	0802d984 	.word	0x0802d984

0801a714 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a718:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a71c:	b0a1      	sub	sp, #132	; 0x84
 801a71e:	4604      	mov	r4, r0
 801a720:	460d      	mov	r5, r1
 801a722:	790b      	ldrb	r3, [r1, #4]
 801a724:	f1b9 0f00 	cmp.w	r9, #0
 801a728:	d00f      	beq.n	801a74a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	f040 80a2 	bne.w	801a874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a730:	b021      	add	sp, #132	; 0x84
 801a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a736:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a73a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a73e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a742:	1d20      	adds	r0, r4, #4
 801a744:	f7fa fea0 	bl	8015488 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a748:	e094      	b.n	801a874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d1f0      	bne.n	801a730 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a74e:	4b5f      	ldr	r3, [pc, #380]	; (801a8cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a756:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a75a:	f1ba 0f03 	cmp.w	sl, #3
 801a75e:	ddea      	ble.n	801a736 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a760:	f1ba 0f0c 	cmp.w	sl, #12
 801a764:	f04f 0303 	mov.w	r3, #3
 801a768:	f04f 0600 	mov.w	r6, #0
 801a76c:	4958      	ldr	r1, [pc, #352]	; (801a8d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a76e:	bfd8      	it	le
 801a770:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a774:	960a      	str	r6, [sp, #40]	; 0x28
 801a776:	bfd8      	it	le
 801a778:	fb92 f3f3 	sdivle	r3, r2, r3
 801a77c:	9301      	str	r3, [sp, #4]
 801a77e:	4b55      	ldr	r3, [pc, #340]	; (801a8d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a780:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a784:	4b54      	ldr	r3, [pc, #336]	; (801a8d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a786:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a78a:	2248      	movs	r2, #72	; 0x48
 801a78c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a790:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a794:	ab0e      	add	r3, sp, #56	; 0x38
 801a796:	4618      	mov	r0, r3
 801a798:	f00b ff08 	bl	80265ac <memcpy>
 801a79c:	f04f 32ff 	mov.w	r2, #4294967295
 801a7a0:	f8cd a008 	str.w	sl, [sp, #8]
 801a7a4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a7a8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a7ac:	46b3      	mov	fp, r6
 801a7ae:	fb93 f3f2 	sdiv	r3, r3, r2
 801a7b2:	b29b      	uxth	r3, r3
 801a7b4:	9303      	str	r3, [sp, #12]
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	9a03      	ldr	r2, [sp, #12]
 801a7ba:	88ef      	ldrh	r7, [r5, #6]
 801a7bc:	a80a      	add	r0, sp, #40	; 0x28
 801a7be:	9309      	str	r3, [sp, #36]	; 0x24
 801a7c0:	9b07      	ldr	r3, [sp, #28]
 801a7c2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a7c6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a7ca:	fb13 f302 	smulbb	r3, r3, r2
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	9304      	str	r3, [sp, #16]
 801a7d2:	9b07      	ldr	r3, [sp, #28]
 801a7d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a7d8:	685b      	ldr	r3, [r3, #4]
 801a7da:	fb13 f302 	smulbb	r3, r3, r2
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	9305      	str	r3, [sp, #20]
 801a7e2:	9b04      	ldr	r3, [sp, #16]
 801a7e4:	441f      	add	r7, r3
 801a7e6:	9b05      	ldr	r3, [sp, #20]
 801a7e8:	4498      	add	r8, r3
 801a7ea:	b23f      	sxth	r7, r7
 801a7ec:	fa0f f888 	sxth.w	r8, r8
 801a7f0:	4639      	mov	r1, r7
 801a7f2:	4642      	mov	r2, r8
 801a7f4:	f7ff ff14 	bl	801a620 <_ZNK8touchgfx4Rect9intersectEss>
 801a7f8:	b380      	cbz	r0, 801a85c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a7fa:	4639      	mov	r1, r7
 801a7fc:	ab09      	add	r3, sp, #36	; 0x24
 801a7fe:	4642      	mov	r2, r8
 801a800:	1d20      	adds	r0, r4, #4
 801a802:	f7fa fe41 	bl	8015488 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a806:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a808:	b341      	cbz	r1, 801a85c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a80a:	4549      	cmp	r1, r9
 801a80c:	d026      	beq.n	801a85c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a80e:	a80c      	add	r0, sp, #48	; 0x30
 801a810:	f7ff fd6e 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a814:	2002      	movs	r0, #2
 801a816:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a81a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a81e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a822:	fb92 f2f0 	sdiv	r2, r2, r0
 801a826:	440a      	add	r2, r1
 801a828:	1a99      	subs	r1, r3, r2
 801a82a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a82e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a832:	fb93 f3f0 	sdiv	r3, r3, r0
 801a836:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a83a:	4403      	add	r3, r0
 801a83c:	1ad3      	subs	r3, r2, r3
 801a83e:	9a06      	ldr	r2, [sp, #24]
 801a840:	435b      	muls	r3, r3
 801a842:	fb01 3301 	mla	r3, r1, r1, r3
 801a846:	4293      	cmp	r3, r2
 801a848:	d208      	bcs.n	801a85c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a84a:	9a04      	ldr	r2, [sp, #16]
 801a84c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a850:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a852:	9a05      	ldr	r2, [sp, #20]
 801a854:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a858:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a85a:	9306      	str	r3, [sp, #24]
 801a85c:	f10b 0b02 	add.w	fp, fp, #2
 801a860:	f1bb 0f08 	cmp.w	fp, #8
 801a864:	dda7      	ble.n	801a7b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a866:	9b02      	ldr	r3, [sp, #8]
 801a868:	3601      	adds	r6, #1
 801a86a:	4453      	add	r3, sl
 801a86c:	9302      	str	r3, [sp, #8]
 801a86e:	9b01      	ldr	r3, [sp, #4]
 801a870:	42b3      	cmp	r3, r6
 801a872:	d199      	bne.n	801a7a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a874:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a876:	2900      	cmp	r1, #0
 801a878:	f43f af5a 	beq.w	801a730 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a87c:	a80c      	add	r0, sp, #48	; 0x30
 801a87e:	2600      	movs	r6, #0
 801a880:	f7ff fd36 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a884:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a888:	88ea      	ldrh	r2, [r5, #6]
 801a88a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a88e:	1ad2      	subs	r2, r2, r3
 801a890:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a892:	7929      	ldrb	r1, [r5, #4]
 801a894:	441a      	add	r2, r3
 801a896:	892b      	ldrh	r3, [r5, #8]
 801a898:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a89c:	a90e      	add	r1, sp, #56	; 0x38
 801a89e:	1a1b      	subs	r3, r3, r0
 801a8a0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a8a2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a8a6:	4403      	add	r3, r0
 801a8a8:	480c      	ldr	r0, [pc, #48]	; (801a8dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a8aa:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a8ae:	900e      	str	r0, [sp, #56]	; 0x38
 801a8b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a8b2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a8b6:	6803      	ldr	r3, [r0, #0]
 801a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8ba:	4798      	blx	r3
 801a8bc:	792b      	ldrb	r3, [r5, #4]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	f43f af36 	beq.w	801a730 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a8c4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a8c8:	e732      	b.n	801a730 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a8ca:	bf00      	nop
 801a8cc:	20056750 	.word	0x20056750
 801a8d0:	0802b8cc 	.word	0x0802b8cc
 801a8d4:	20056744 	.word	0x20056744
 801a8d8:	20056746 	.word	0x20056746
 801a8dc:	0802d970 	.word	0x0802d970

0801a8e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a8e8:	3201      	adds	r2, #1
 801a8ea:	d112      	bne.n	801a912 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a8ec:	2500      	movs	r5, #0
 801a8ee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a8f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a8f6:	6803      	ldr	r3, [r0, #0]
 801a8f8:	9500      	str	r5, [sp, #0]
 801a8fa:	466d      	mov	r5, sp
 801a8fc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a900:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a904:	4629      	mov	r1, r5
 801a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a908:	4798      	blx	r3
 801a90a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a90e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a912:	4620      	mov	r0, r4
 801a914:	b003      	add	sp, #12
 801a916:	bd30      	pop	{r4, r5, pc}

0801a918 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a918:	b513      	push	{r0, r1, r4, lr}
 801a91a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a91e:	4604      	mov	r4, r0
 801a920:	3301      	adds	r3, #1
 801a922:	d109      	bne.n	801a938 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a924:	4601      	mov	r1, r0
 801a926:	4668      	mov	r0, sp
 801a928:	f7ff fce2 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a92c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a930:	8423      	strh	r3, [r4, #32]
 801a932:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a936:	8463      	strh	r3, [r4, #34]	; 0x22
 801a938:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a93c:	b002      	add	sp, #8
 801a93e:	bd10      	pop	{r4, pc}

0801a940 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a940:	b513      	push	{r0, r1, r4, lr}
 801a942:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a946:	4604      	mov	r4, r0
 801a948:	3301      	adds	r3, #1
 801a94a:	d109      	bne.n	801a960 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a94c:	4601      	mov	r1, r0
 801a94e:	4668      	mov	r0, sp
 801a950:	f7ff fcce 	bl	801a2f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a954:	f8bd 3000 	ldrh.w	r3, [sp]
 801a958:	8423      	strh	r3, [r4, #32]
 801a95a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a95e:	8463      	strh	r3, [r4, #34]	; 0x22
 801a960:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a964:	b002      	add	sp, #8
 801a966:	bd10      	pop	{r4, pc}

0801a968 <_ZN8touchgfx6ScreenC1Ev>:
 801a968:	b570      	push	{r4, r5, r6, lr}
 801a96a:	4b17      	ldr	r3, [pc, #92]	; (801a9c8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a96c:	4605      	mov	r5, r0
 801a96e:	4a17      	ldr	r2, [pc, #92]	; (801a9cc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a970:	2101      	movs	r1, #1
 801a972:	f845 3b04 	str.w	r3, [r5], #4
 801a976:	2300      	movs	r3, #0
 801a978:	6042      	str	r2, [r0, #4]
 801a97a:	4604      	mov	r4, r0
 801a97c:	8103      	strh	r3, [r0, #8]
 801a97e:	8143      	strh	r3, [r0, #10]
 801a980:	8183      	strh	r3, [r0, #12]
 801a982:	81c3      	strh	r3, [r0, #14]
 801a984:	8203      	strh	r3, [r0, #16]
 801a986:	8243      	strh	r3, [r0, #18]
 801a988:	8283      	strh	r3, [r0, #20]
 801a98a:	82c3      	strh	r3, [r0, #22]
 801a98c:	6203      	str	r3, [r0, #32]
 801a98e:	8483      	strh	r3, [r0, #36]	; 0x24
 801a990:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a992:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a996:	6343      	str	r3, [r0, #52]	; 0x34
 801a998:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a99c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a9a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a9a4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a9a8:	4b09      	ldr	r3, [pc, #36]	; (801a9d0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a9b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a9b2:	4a08      	ldr	r2, [pc, #32]	; (801a9d4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a9b4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a9b8:	4798      	blx	r3
 801a9ba:	6863      	ldr	r3, [r4, #4]
 801a9bc:	4628      	mov	r0, r5
 801a9be:	4631      	mov	r1, r6
 801a9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9c2:	4798      	blx	r3
 801a9c4:	4620      	mov	r0, r4
 801a9c6:	bd70      	pop	{r4, r5, r6, pc}
 801a9c8:	0802d9ac 	.word	0x0802d9ac
 801a9cc:	0802c5cc 	.word	0x0802c5cc
 801a9d0:	20056746 	.word	0x20056746
 801a9d4:	20056744 	.word	0x20056744

0801a9d8 <_ZN8touchgfx6Screen4drawEv>:
 801a9d8:	4b09      	ldr	r3, [pc, #36]	; (801aa00 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a9da:	b507      	push	{r0, r1, r2, lr}
 801a9dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a9e0:	2100      	movs	r1, #0
 801a9e2:	4b08      	ldr	r3, [pc, #32]	; (801aa04 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a9e4:	9100      	str	r1, [sp, #0]
 801a9e6:	4669      	mov	r1, sp
 801a9e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a9ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a9f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a9f4:	6803      	ldr	r3, [r0, #0]
 801a9f6:	689b      	ldr	r3, [r3, #8]
 801a9f8:	4798      	blx	r3
 801a9fa:	b003      	add	sp, #12
 801a9fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa00:	20056744 	.word	0x20056744
 801aa04:	20056746 	.word	0x20056746

0801aa08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa0c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801aa10:	b089      	sub	sp, #36	; 0x24
 801aa12:	4680      	mov	r8, r0
 801aa14:	460c      	mov	r4, r1
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	4615      	mov	r5, r2
 801aa1a:	dd0e      	ble.n	801aa3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa1c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	dd0a      	ble.n	801aa3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa24:	4628      	mov	r0, r5
 801aa26:	f7ff ff5b 	bl	801a8e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aa2a:	4621      	mov	r1, r4
 801aa2c:	f7fb ffea 	bl	8016a04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aa30:	69eb      	ldr	r3, [r5, #28]
 801aa32:	b928      	cbnz	r0, 801aa40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801aa34:	461d      	mov	r5, r3
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d1f4      	bne.n	801aa24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801aa3a:	b009      	add	sp, #36	; 0x24
 801aa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa40:	ae04      	add	r6, sp, #16
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	f000 80b5 	beq.w	801abb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801aa48:	682b      	ldr	r3, [r5, #0]
 801aa4a:	4629      	mov	r1, r5
 801aa4c:	a802      	add	r0, sp, #8
 801aa4e:	68db      	ldr	r3, [r3, #12]
 801aa50:	4798      	blx	r3
 801aa52:	4628      	mov	r0, r5
 801aa54:	f7ff ff60 	bl	801a918 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801aa58:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801aa5c:	4407      	add	r7, r0
 801aa5e:	4628      	mov	r0, r5
 801aa60:	f7ff ff6e 	bl	801a940 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aa64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801aa68:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801aa6c:	b23f      	sxth	r7, r7
 801aa6e:	4418      	add	r0, r3
 801aa70:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801aa74:	4621      	mov	r1, r4
 801aa76:	f8ad 2014 	strh.w	r2, [sp, #20]
 801aa7a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801aa7e:	4630      	mov	r0, r6
 801aa80:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa84:	f8ad 7010 	strh.w	r7, [sp, #16]
 801aa88:	f7fa fdb0 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801aa8c:	4628      	mov	r0, r5
 801aa8e:	f7ff ff27 	bl	801a8e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aa92:	ab06      	add	r3, sp, #24
 801aa94:	4602      	mov	r2, r0
 801aa96:	e896 0003 	ldmia.w	r6, {r0, r1}
 801aa9a:	e883 0003 	stmia.w	r3, {r0, r1}
 801aa9e:	4611      	mov	r1, r2
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f7fa fda3 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801aaa6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801aaaa:	f9b4 1000 	ldrsh.w	r1, [r4]
 801aaae:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801aab2:	4299      	cmp	r1, r3
 801aab4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801aab8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801aabc:	d10b      	bne.n	801aad6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801aabe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aac2:	4552      	cmp	r2, sl
 801aac4:	d107      	bne.n	801aad6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801aac6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801aaca:	455a      	cmp	r2, fp
 801aacc:	d103      	bne.n	801aad6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801aace:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801aad2:	454a      	cmp	r2, r9
 801aad4:	d06d      	beq.n	801abb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801aad6:	f1bb 0f00 	cmp.w	fp, #0
 801aada:	dd65      	ble.n	801aba8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801aadc:	f1b9 0f00 	cmp.w	r9, #0
 801aae0:	dd62      	ble.n	801aba8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801aae2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aae6:	fa1f f08a 	uxth.w	r0, sl
 801aaea:	4552      	cmp	r2, sl
 801aaec:	9000      	str	r0, [sp, #0]
 801aaee:	da12      	bge.n	801ab16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801aaf0:	9301      	str	r3, [sp, #4]
 801aaf2:	9b00      	ldr	r3, [sp, #0]
 801aaf4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801aaf8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801aafc:	1a9a      	subs	r2, r3, r2
 801aafe:	f8ad 1010 	strh.w	r1, [sp, #16]
 801ab02:	4631      	mov	r1, r6
 801ab04:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ab08:	4640      	mov	r0, r8
 801ab0a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801ab0e:	69ea      	ldr	r2, [r5, #28]
 801ab10:	f7ff ff7a 	bl	801aa08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab14:	9b01      	ldr	r3, [sp, #4]
 801ab16:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ab1a:	b29f      	uxth	r7, r3
 801ab1c:	429a      	cmp	r2, r3
 801ab1e:	da0d      	bge.n	801ab3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ab20:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ab24:	1aba      	subs	r2, r7, r2
 801ab26:	f8ad a012 	strh.w	sl, [sp, #18]
 801ab2a:	4631      	mov	r1, r6
 801ab2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ab30:	4640      	mov	r0, r8
 801ab32:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ab36:	69ea      	ldr	r2, [r5, #28]
 801ab38:	f7ff ff66 	bl	801aa08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab3c:	8822      	ldrh	r2, [r4, #0]
 801ab3e:	445f      	add	r7, fp
 801ab40:	88a3      	ldrh	r3, [r4, #4]
 801ab42:	b2bf      	uxth	r7, r7
 801ab44:	4413      	add	r3, r2
 801ab46:	b23a      	sxth	r2, r7
 801ab48:	b29b      	uxth	r3, r3
 801ab4a:	b219      	sxth	r1, r3
 801ab4c:	4291      	cmp	r1, r2
 801ab4e:	dd0d      	ble.n	801ab6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ab50:	1bdb      	subs	r3, r3, r7
 801ab52:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ab56:	f8ad a012 	strh.w	sl, [sp, #18]
 801ab5a:	4631      	mov	r1, r6
 801ab5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ab60:	4640      	mov	r0, r8
 801ab62:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ab66:	69ea      	ldr	r2, [r5, #28]
 801ab68:	f7ff ff4e 	bl	801aa08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab6c:	88e2      	ldrh	r2, [r4, #6]
 801ab6e:	8863      	ldrh	r3, [r4, #2]
 801ab70:	4413      	add	r3, r2
 801ab72:	9a00      	ldr	r2, [sp, #0]
 801ab74:	444a      	add	r2, r9
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	fa1f f982 	uxth.w	r9, r2
 801ab7c:	b219      	sxth	r1, r3
 801ab7e:	fa0f f289 	sxth.w	r2, r9
 801ab82:	428a      	cmp	r2, r1
 801ab84:	da15      	bge.n	801abb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ab86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ab8a:	eba3 0309 	sub.w	r3, r3, r9
 801ab8e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ab92:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ab96:	4631      	mov	r1, r6
 801ab98:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ab9c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801aba0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aba4:	69ea      	ldr	r2, [r5, #28]
 801aba6:	e001      	b.n	801abac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801aba8:	69ea      	ldr	r2, [r5, #28]
 801abaa:	4621      	mov	r1, r4
 801abac:	4640      	mov	r0, r8
 801abae:	f7ff ff2b 	bl	801aa08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801abb2:	4628      	mov	r0, r5
 801abb4:	f7ff fe94 	bl	801a8e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801abb8:	6861      	ldr	r1, [r4, #4]
 801abba:	4602      	mov	r2, r0
 801abbc:	4633      	mov	r3, r6
 801abbe:	6820      	ldr	r0, [r4, #0]
 801abc0:	c303      	stmia	r3!, {r0, r1}
 801abc2:	4611      	mov	r1, r2
 801abc4:	4630      	mov	r0, r6
 801abc6:	f7fa fd11 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801abca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	f77f af33 	ble.w	801aa3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801abd4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	f77f af2e 	ble.w	801aa3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801abde:	4628      	mov	r0, r5
 801abe0:	f7ff fe9a 	bl	801a918 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801abe4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801abe8:	1a18      	subs	r0, r3, r0
 801abea:	f8ad 0010 	strh.w	r0, [sp, #16]
 801abee:	4628      	mov	r0, r5
 801abf0:	f7ff fea6 	bl	801a940 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801abf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801abf8:	4631      	mov	r1, r6
 801abfa:	1a18      	subs	r0, r3, r0
 801abfc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ac00:	4628      	mov	r0, r5
 801ac02:	682b      	ldr	r3, [r5, #0]
 801ac04:	689b      	ldr	r3, [r3, #8]
 801ac06:	4798      	blx	r3
 801ac08:	e717      	b.n	801aa3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ac0a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ac0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	aa02      	add	r2, sp, #8
 801ac10:	4604      	mov	r4, r0
 801ac12:	3004      	adds	r0, #4
 801ac14:	f842 3d04 	str.w	r3, [r2, #-4]!
 801ac18:	460d      	mov	r5, r1
 801ac1a:	f7fa fdbf 	bl	801579c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ac1e:	9a01      	ldr	r2, [sp, #4]
 801ac20:	b11a      	cbz	r2, 801ac2a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801ac22:	4629      	mov	r1, r5
 801ac24:	4620      	mov	r0, r4
 801ac26:	f7ff feef 	bl	801aa08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ac2a:	b003      	add	sp, #12
 801ac2c:	bd30      	pop	{r4, r5, pc}

0801ac2e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ac2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac30:	4602      	mov	r2, r0
 801ac32:	4604      	mov	r4, r0
 801ac34:	460d      	mov	r5, r1
 801ac36:	466b      	mov	r3, sp
 801ac38:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ac3c:	6851      	ldr	r1, [r2, #4]
 801ac3e:	c303      	stmia	r3!, {r0, r1}
 801ac40:	4629      	mov	r1, r5
 801ac42:	4668      	mov	r0, sp
 801ac44:	f7fa fcd2 	bl	80155ec <_ZN8touchgfx4RectaNERKS0_>
 801ac48:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ac4c:	4669      	mov	r1, sp
 801ac4e:	b123      	cbz	r3, 801ac5a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801ac50:	4620      	mov	r0, r4
 801ac52:	f7ff ffda 	bl	801ac0a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ac56:	b003      	add	sp, #12
 801ac58:	bd30      	pop	{r4, r5, pc}
 801ac5a:	1d20      	adds	r0, r4, #4
 801ac5c:	f7fa fd65 	bl	801572a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ac60:	e7f9      	b.n	801ac56 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801ac62 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ac62:	460b      	mov	r3, r1
 801ac64:	680a      	ldr	r2, [r1, #0]
 801ac66:	1d01      	adds	r1, r0, #4
 801ac68:	6992      	ldr	r2, [r2, #24]
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	4710      	bx	r2

0801ac6e <_ZN8touchgfx12TextProviderC1Ev>:
 801ac6e:	b538      	push	{r3, r4, r5, lr}
 801ac70:	2500      	movs	r5, #0
 801ac72:	4604      	mov	r4, r0
 801ac74:	220e      	movs	r2, #14
 801ac76:	7405      	strb	r5, [r0, #16]
 801ac78:	4629      	mov	r1, r5
 801ac7a:	82c5      	strh	r5, [r0, #22]
 801ac7c:	8305      	strh	r5, [r0, #24]
 801ac7e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801ac80:	8605      	strh	r5, [r0, #48]	; 0x30
 801ac82:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ac84:	8705      	strh	r5, [r0, #56]	; 0x38
 801ac86:	e9c0 5500 	strd	r5, r5, [r0]
 801ac8a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801ac8e:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801ac92:	3044      	adds	r0, #68	; 0x44
 801ac94:	f00b fc98 	bl	80265c8 <memset>
 801ac98:	2301      	movs	r3, #1
 801ac9a:	4620      	mov	r0, r4
 801ac9c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801aca0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801aca4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801aca8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801acac:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801acb0:	f7ed ff52 	bl	8008b58 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801acb4:	4620      	mov	r0, r4
 801acb6:	bd38      	pop	{r3, r4, r5, pc}

0801acb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801acb8:	b530      	push	{r4, r5, lr}
 801acba:	2500      	movs	r5, #0
 801acbc:	2401      	movs	r4, #1
 801acbe:	6843      	ldr	r3, [r0, #4]
 801acc0:	b913      	cbnz	r3, 801acc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801acc2:	6803      	ldr	r3, [r0, #0]
 801acc4:	b1f3      	cbz	r3, 801ad04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801acc6:	6043      	str	r3, [r0, #4]
 801acc8:	7c03      	ldrb	r3, [r0, #16]
 801acca:	b143      	cbz	r3, 801acde <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801accc:	68c3      	ldr	r3, [r0, #12]
 801acce:	b12b      	cbz	r3, 801acdc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801acd0:	881a      	ldrh	r2, [r3, #0]
 801acd2:	b11a      	cbz	r2, 801acdc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801acd4:	1c9a      	adds	r2, r3, #2
 801acd6:	60c2      	str	r2, [r0, #12]
 801acd8:	8818      	ldrh	r0, [r3, #0]
 801acda:	bd30      	pop	{r4, r5, pc}
 801acdc:	7405      	strb	r5, [r0, #16]
 801acde:	6843      	ldr	r3, [r0, #4]
 801ace0:	8819      	ldrh	r1, [r3, #0]
 801ace2:	b179      	cbz	r1, 801ad04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801ace4:	1c9a      	adds	r2, r3, #2
 801ace6:	2902      	cmp	r1, #2
 801ace8:	6042      	str	r2, [r0, #4]
 801acea:	d1f5      	bne.n	801acd8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801acec:	6883      	ldr	r3, [r0, #8]
 801acee:	1d1a      	adds	r2, r3, #4
 801acf0:	6082      	str	r2, [r0, #8]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	60c3      	str	r3, [r0, #12]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d0e1      	beq.n	801acbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801acfa:	881b      	ldrh	r3, [r3, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d0de      	beq.n	801acbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ad00:	7404      	strb	r4, [r0, #16]
 801ad02:	e7dc      	b.n	801acbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ad04:	2000      	movs	r0, #0
 801ad06:	e7e8      	b.n	801acda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ad08 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ad08:	b410      	push	{r4}
 801ad0a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ad0c:	9b01      	ldr	r3, [sp, #4]
 801ad0e:	6082      	str	r2, [r0, #8]
 801ad10:	6403      	str	r3, [r0, #64]	; 0x40
 801ad12:	2300      	movs	r3, #0
 801ad14:	6001      	str	r1, [r0, #0]
 801ad16:	6043      	str	r3, [r0, #4]
 801ad18:	60c3      	str	r3, [r0, #12]
 801ad1a:	7403      	strb	r3, [r0, #16]
 801ad1c:	8603      	strh	r3, [r0, #48]	; 0x30
 801ad1e:	8303      	strh	r3, [r0, #24]
 801ad20:	8703      	strh	r3, [r0, #56]	; 0x38
 801ad22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad26:	f7ed bf17 	b.w	8008b58 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ad2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ad2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad2c:	4605      	mov	r5, r0
 801ad2e:	4608      	mov	r0, r1
 801ad30:	b1f1      	cbz	r1, 801ad70 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ad32:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801ad36:	460b      	mov	r3, r1
 801ad38:	f101 0708 	add.w	r7, r1, #8
 801ad3c:	4622      	mov	r2, r4
 801ad3e:	6818      	ldr	r0, [r3, #0]
 801ad40:	3308      	adds	r3, #8
 801ad42:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ad46:	4626      	mov	r6, r4
 801ad48:	42bb      	cmp	r3, r7
 801ad4a:	c603      	stmia	r6!, {r0, r1}
 801ad4c:	4634      	mov	r4, r6
 801ad4e:	d1f6      	bne.n	801ad3e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ad50:	6818      	ldr	r0, [r3, #0]
 801ad52:	6030      	str	r0, [r6, #0]
 801ad54:	4610      	mov	r0, r2
 801ad56:	889b      	ldrh	r3, [r3, #4]
 801ad58:	80b3      	strh	r3, [r6, #4]
 801ad5a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801ad5e:	015b      	lsls	r3, r3, #5
 801ad60:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ad64:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801ad68:	430b      	orrs	r3, r1
 801ad6a:	425b      	negs	r3, r3
 801ad6c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ad72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ad72:	b538      	push	{r3, r4, r5, lr}
 801ad74:	460c      	mov	r4, r1
 801ad76:	6811      	ldr	r1, [r2, #0]
 801ad78:	4610      	mov	r0, r2
 801ad7a:	68cd      	ldr	r5, [r1, #12]
 801ad7c:	4619      	mov	r1, r3
 801ad7e:	47a8      	blx	r5
 801ad80:	2800      	cmp	r0, #0
 801ad82:	bf08      	it	eq
 801ad84:	4620      	moveq	r0, r4
 801ad86:	bd38      	pop	{r3, r4, r5, pc}

0801ad88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad8a:	4604      	mov	r4, r0
 801ad8c:	4615      	mov	r5, r2
 801ad8e:	4608      	mov	r0, r1
 801ad90:	b93a      	cbnz	r2, 801ada2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ad92:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801ad96:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801ad9a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801ad9e:	4628      	mov	r0, r5
 801ada0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ada2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ada6:	8893      	ldrh	r3, [r2, #4]
 801ada8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801adac:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801adb0:	79ee      	ldrb	r6, [r5, #7]
 801adb2:	4316      	orrs	r6, r2
 801adb4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801adb8:	189a      	adds	r2, r3, r2
 801adba:	b2b7      	uxth	r7, r6
 801adbc:	b291      	uxth	r1, r2
 801adbe:	291d      	cmp	r1, #29
 801adc0:	f200 8084 	bhi.w	801aecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801adc4:	2201      	movs	r2, #1
 801adc6:	10f6      	asrs	r6, r6, #3
 801adc8:	408a      	lsls	r2, r1
 801adca:	4978      	ldr	r1, [pc, #480]	; (801afac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801adcc:	420a      	tst	r2, r1
 801adce:	d12e      	bne.n	801ae2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801add0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801add4:	d07a      	beq.n	801aecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801add6:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801adda:	462b      	mov	r3, r5
 801addc:	f105 0e08 	add.w	lr, r5, #8
 801ade0:	4615      	mov	r5, r2
 801ade2:	6818      	ldr	r0, [r3, #0]
 801ade4:	3308      	adds	r3, #8
 801ade6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801adea:	4694      	mov	ip, r2
 801adec:	4573      	cmp	r3, lr
 801adee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801adf2:	4662      	mov	r2, ip
 801adf4:	d1f5      	bne.n	801ade2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801adf6:	6818      	ldr	r0, [r3, #0]
 801adf8:	f8cc 0000 	str.w	r0, [ip]
 801adfc:	889b      	ldrh	r3, [r3, #4]
 801adfe:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ae02:	b2b3      	uxth	r3, r6
 801ae04:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801ae08:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801ae0c:	1aca      	subs	r2, r1, r3
 801ae0e:	1bcf      	subs	r7, r1, r7
 801ae10:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801ae14:	b292      	uxth	r2, r2
 801ae16:	1afb      	subs	r3, r7, r3
 801ae18:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801ae1c:	10d2      	asrs	r2, r2, #3
 801ae1e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801ae22:	4302      	orrs	r2, r0
 801ae24:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801ae28:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801ae2c:	e7b7      	b.n	801ad9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ae2e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae30:	b92b      	cbnz	r3, 801ae3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801ae32:	4b5f      	ldr	r3, [pc, #380]	; (801afb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801ae34:	21bf      	movs	r1, #191	; 0xbf
 801ae36:	4a5f      	ldr	r2, [pc, #380]	; (801afb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801ae38:	485f      	ldr	r0, [pc, #380]	; (801afb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801ae3a:	f00b fb39 	bl	80264b0 <__assert_func>
 801ae3e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801ae40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ae44:	8b59      	ldrh	r1, [r3, #26]
 801ae46:	f640 6333 	movw	r3, #3635	; 0xe33
 801ae4a:	4299      	cmp	r1, r3
 801ae4c:	d110      	bne.n	801ae70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801ae4e:	6803      	ldr	r3, [r0, #0]
 801ae50:	68db      	ldr	r3, [r3, #12]
 801ae52:	4798      	blx	r3
 801ae54:	7b41      	ldrb	r1, [r0, #13]
 801ae56:	00cb      	lsls	r3, r1, #3
 801ae58:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae5c:	7a03      	ldrb	r3, [r0, #8]
 801ae5e:	0648      	lsls	r0, r1, #25
 801ae60:	ea43 0302 	orr.w	r3, r3, r2
 801ae64:	bf44      	itt	mi
 801ae66:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae6a:	b21b      	sxthmi	r3, r3
 801ae6c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ae70:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801ae74:	462a      	mov	r2, r5
 801ae76:	f105 0c08 	add.w	ip, r5, #8
 801ae7a:	443b      	add	r3, r7
 801ae7c:	4433      	add	r3, r6
 801ae7e:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801ae82:	b29b      	uxth	r3, r3
 801ae84:	4635      	mov	r5, r6
 801ae86:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ae8a:	6810      	ldr	r0, [r2, #0]
 801ae8c:	3208      	adds	r2, #8
 801ae8e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801ae92:	4637      	mov	r7, r6
 801ae94:	4562      	cmp	r2, ip
 801ae96:	c703      	stmia	r7!, {r0, r1}
 801ae98:	463e      	mov	r6, r7
 801ae9a:	d1f6      	bne.n	801ae8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801ae9c:	6810      	ldr	r0, [r2, #0]
 801ae9e:	6038      	str	r0, [r7, #0]
 801aea0:	8892      	ldrh	r2, [r2, #4]
 801aea2:	80ba      	strh	r2, [r7, #4]
 801aea4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801aea8:	10db      	asrs	r3, r3, #3
 801aeaa:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801aeae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aeb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801aeb6:	4313      	orrs	r3, r2
 801aeb8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801aebc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801aec0:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801aec4:	1a9b      	subs	r3, r3, r2
 801aec6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801aeca:	e768      	b.n	801ad9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801aecc:	f023 0204 	bic.w	r2, r3, #4
 801aed0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801aed4:	428a      	cmp	r2, r1
 801aed6:	d003      	beq.n	801aee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801aed8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801aedc:	4293      	cmp	r3, r2
 801aede:	d120      	bne.n	801af22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801aee0:	3b01      	subs	r3, #1
 801aee2:	4602      	mov	r2, r0
 801aee4:	4629      	mov	r1, r5
 801aee6:	4620      	mov	r0, r4
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	f7ff ff42 	bl	801ad72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aeee:	7b41      	ldrb	r1, [r0, #13]
 801aef0:	00cb      	lsls	r3, r1, #3
 801aef2:	0649      	lsls	r1, r1, #25
 801aef4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aef8:	7a03      	ldrb	r3, [r0, #8]
 801aefa:	ea43 0302 	orr.w	r3, r3, r2
 801aefe:	bf44      	itt	mi
 801af00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801af04:	b21b      	sxthmi	r3, r3
 801af06:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801af0a:	7b6b      	ldrb	r3, [r5, #13]
 801af0c:	7aaa      	ldrb	r2, [r5, #10]
 801af0e:	005b      	lsls	r3, r3, #1
 801af10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af14:	4313      	orrs	r3, r2
 801af16:	115a      	asrs	r2, r3, #5
 801af18:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801af1c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801af20:	e035      	b.n	801af8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801af22:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801af26:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801af2a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801af2e:	7a2a      	ldrb	r2, [r5, #8]
 801af30:	ea42 0201 	orr.w	r2, r2, r1
 801af34:	f640 6109 	movw	r1, #3593	; 0xe09
 801af38:	bf1c      	itt	ne
 801af3a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801af3e:	b212      	sxthne	r2, r2
 801af40:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801af44:	f023 0210 	bic.w	r2, r3, #16
 801af48:	428a      	cmp	r2, r1
 801af4a:	d003      	beq.n	801af54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801af4c:	f640 6213 	movw	r2, #3603	; 0xe13
 801af50:	4293      	cmp	r3, r2
 801af52:	d129      	bne.n	801afa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801af54:	7b6e      	ldrb	r6, [r5, #13]
 801af56:	4629      	mov	r1, r5
 801af58:	0076      	lsls	r6, r6, #1
 801af5a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801af5e:	7aae      	ldrb	r6, [r5, #10]
 801af60:	4316      	orrs	r6, r2
 801af62:	f640 6213 	movw	r2, #3603	; 0xe13
 801af66:	4293      	cmp	r3, r2
 801af68:	4602      	mov	r2, r0
 801af6a:	4620      	mov	r0, r4
 801af6c:	bf16      	itet	ne
 801af6e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801af72:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801af76:	b29b      	uxthne	r3, r3
 801af78:	f7ff fefb 	bl	801ad72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801af7c:	7b43      	ldrb	r3, [r0, #13]
 801af7e:	7a82      	ldrb	r2, [r0, #10]
 801af80:	005b      	lsls	r3, r3, #1
 801af82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af86:	4313      	orrs	r3, r2
 801af88:	1af6      	subs	r6, r6, r3
 801af8a:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801af8e:	7b69      	ldrb	r1, [r5, #13]
 801af90:	00cb      	lsls	r3, r1, #3
 801af92:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801af96:	7a2b      	ldrb	r3, [r5, #8]
 801af98:	4313      	orrs	r3, r2
 801af9a:	064a      	lsls	r2, r1, #25
 801af9c:	bf44      	itt	mi
 801af9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801afa2:	b21b      	sxthmi	r3, r3
 801afa4:	1bdb      	subs	r3, r3, r7
 801afa6:	e73f      	b.n	801ae28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801afa8:	2300      	movs	r3, #0
 801afaa:	e7b7      	b.n	801af1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801afac:	3fc00079 	.word	0x3fc00079
 801afb0:	0802d9d8 	.word	0x0802d9d8
 801afb4:	0802dc4a 	.word	0x0802dc4a
 801afb8:	0802d9e1 	.word	0x0802d9e1

0801afbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801afbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	b942      	cbnz	r2, 801afd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801afc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801afc8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801afcc:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801afd0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801afd4:	e046      	b.n	801b064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801afd6:	7b51      	ldrb	r1, [r2, #13]
 801afd8:	8893      	ldrh	r3, [r2, #4]
 801afda:	010f      	lsls	r7, r1, #4
 801afdc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801afe0:	79d7      	ldrb	r7, [r2, #7]
 801afe2:	4307      	orrs	r7, r0
 801afe4:	2f04      	cmp	r7, #4
 801afe6:	b2bd      	uxth	r5, r7
 801afe8:	bfcc      	ite	gt
 801afea:	08bf      	lsrgt	r7, r7, #2
 801afec:	2701      	movle	r7, #1
 801afee:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801aff2:	f200 80ab 	bhi.w	801b14c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801aff6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801affa:	4283      	cmp	r3, r0
 801affc:	d216      	bcs.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801affe:	f240 605b 	movw	r0, #1627	; 0x65b
 801b002:	4283      	cmp	r3, r0
 801b004:	d859      	bhi.n	801b0ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801b006:	f240 6057 	movw	r0, #1623	; 0x657
 801b00a:	4283      	cmp	r3, r0
 801b00c:	d20e      	bcs.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b00e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b012:	d24a      	bcs.n	801b0aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801b014:	f240 604e 	movw	r0, #1614	; 0x64e
 801b018:	4283      	cmp	r3, r0
 801b01a:	d207      	bcs.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b01c:	f240 601a 	movw	r0, #1562	; 0x61a
 801b020:	4283      	cmp	r3, r0
 801b022:	d02a      	beq.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b024:	d821      	bhi.n	801b06a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801b026:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801b02a:	d35b      	bcc.n	801b0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b02c:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801b030:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b034:	f040 80d0 	bne.w	801b1d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b038:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801b03c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b040:	f040 80ca 	bne.w	801b1d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b044:	00cb      	lsls	r3, r1, #3
 801b046:	0649      	lsls	r1, r1, #25
 801b048:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b04c:	7a13      	ldrb	r3, [r2, #8]
 801b04e:	ea43 0300 	orr.w	r3, r3, r0
 801b052:	bf44      	itt	mi
 801b054:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b058:	b21b      	sxthmi	r3, r3
 801b05a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b05e:	1b5d      	subs	r5, r3, r5
 801b060:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b064:	4610      	mov	r0, r2
 801b066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b06a:	f240 604b 	movw	r0, #1611	; 0x64b
 801b06e:	4283      	cmp	r3, r0
 801b070:	d338      	bcc.n	801b0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b072:	f240 604c 	movw	r0, #1612	; 0x64c
 801b076:	4283      	cmp	r3, r0
 801b078:	d9d8      	bls.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b07a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801b07e:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801b082:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b086:	f040 80f2 	bne.w	801b26e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b08a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b08e:	f040 80ee 	bne.w	801b26e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b092:	00cb      	lsls	r3, r1, #3
 801b094:	064e      	lsls	r6, r1, #25
 801b096:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b09a:	7a13      	ldrb	r3, [r2, #8]
 801b09c:	ea43 0300 	orr.w	r3, r3, r0
 801b0a0:	bf44      	itt	mi
 801b0a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b0a6:	b21b      	sxthmi	r3, r3
 801b0a8:	e7d9      	b.n	801b05e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801b0aa:	f240 6054 	movw	r0, #1620	; 0x654
 801b0ae:	4283      	cmp	r3, r0
 801b0b0:	d8e3      	bhi.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b0b2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b0b6:	d9e0      	bls.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b0b8:	e7b8      	b.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b0ba:	f240 6074 	movw	r0, #1652	; 0x674
 801b0be:	4283      	cmp	r3, r0
 801b0c0:	d0b4      	beq.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b0c2:	d82d      	bhi.n	801b120 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801b0c4:	f240 605e 	movw	r0, #1630	; 0x65e
 801b0c8:	4283      	cmp	r3, r0
 801b0ca:	d804      	bhi.n	801b0d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801b0cc:	f240 605d 	movw	r0, #1629	; 0x65d
 801b0d0:	4283      	cmp	r3, r0
 801b0d2:	d3d2      	bcc.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b0d4:	e7aa      	b.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b0d6:	f240 605f 	movw	r0, #1631	; 0x65f
 801b0da:	4283      	cmp	r3, r0
 801b0dc:	d0cd      	beq.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b0de:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b0e2:	d0a3      	beq.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b0e4:	00cb      	lsls	r3, r1, #3
 801b0e6:	0649      	lsls	r1, r1, #25
 801b0e8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b0ec:	7a13      	ldrb	r3, [r2, #8]
 801b0ee:	ea43 0300 	orr.w	r3, r3, r0
 801b0f2:	bf44      	itt	mi
 801b0f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b0f8:	b21b      	sxthmi	r3, r3
 801b0fa:	1b5d      	subs	r5, r3, r5
 801b0fc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b100:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b104:	7b53      	ldrb	r3, [r2, #13]
 801b106:	015b      	lsls	r3, r3, #5
 801b108:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b10c:	7993      	ldrb	r3, [r2, #6]
 801b10e:	430b      	orrs	r3, r1
 801b110:	2105      	movs	r1, #5
 801b112:	005b      	lsls	r3, r3, #1
 801b114:	fb93 f3f1 	sdiv	r3, r3, r1
 801b118:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b11c:	440b      	add	r3, r1
 801b11e:	e757      	b.n	801afd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b120:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b124:	4283      	cmp	r3, r0
 801b126:	d809      	bhi.n	801b13c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801b128:	f240 60df 	movw	r0, #1759	; 0x6df
 801b12c:	4283      	cmp	r3, r0
 801b12e:	f4bf af7d 	bcs.w	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b132:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801b136:	2b05      	cmp	r3, #5
 801b138:	d8d4      	bhi.n	801b0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b13a:	e777      	b.n	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b13c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801b140:	4283      	cmp	r3, r0
 801b142:	d09a      	beq.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b144:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801b148:	4283      	cmp	r3, r0
 801b14a:	e7ca      	b.n	801b0e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801b14c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801b150:	d22b      	bcs.n	801b1aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801b152:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801b156:	4283      	cmp	r3, r0
 801b158:	d28f      	bcs.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b15a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b15e:	4283      	cmp	r3, r0
 801b160:	d816      	bhi.n	801b190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801b162:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801b166:	4283      	cmp	r3, r0
 801b168:	f4bf af60 	bcs.w	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b16c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801b170:	4283      	cmp	r3, r0
 801b172:	d80a      	bhi.n	801b18a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801b174:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801b178:	4283      	cmp	r3, r0
 801b17a:	f4bf af57 	bcs.w	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b17e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801b182:	4283      	cmp	r3, r0
 801b184:	f43f af79 	beq.w	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b188:	e7ac      	b.n	801b0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b18a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801b18e:	e7f8      	b.n	801b182 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801b190:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801b194:	4283      	cmp	r3, r0
 801b196:	d802      	bhi.n	801b19e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801b198:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b19c:	e798      	b.n	801b0d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801b19e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801b1a2:	4283      	cmp	r3, r0
 801b1a4:	f47f af42 	bne.w	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b1a8:	e767      	b.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b1aa:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801b1ae:	4283      	cmp	r3, r0
 801b1b0:	f43f af63 	beq.w	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b1b4:	d802      	bhi.n	801b1bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801b1b6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801b1ba:	e7f2      	b.n	801b1a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801b1bc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801b1c0:	4283      	cmp	r3, r0
 801b1c2:	d805      	bhi.n	801b1d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801b1c4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801b1c8:	4283      	cmp	r3, r0
 801b1ca:	f4ff af2f 	bcc.w	801b02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b1ce:	e754      	b.n	801b07a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b1d0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801b1d4:	4283      	cmp	r3, r0
 801b1d6:	e7af      	b.n	801b138 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801b1d8:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801b1dc:	4617      	mov	r7, r2
 801b1de:	f102 0808 	add.w	r8, r2, #8
 801b1e2:	4666      	mov	r6, ip
 801b1e4:	6838      	ldr	r0, [r7, #0]
 801b1e6:	3708      	adds	r7, #8
 801b1e8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b1ec:	46e6      	mov	lr, ip
 801b1ee:	4547      	cmp	r7, r8
 801b1f0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b1f4:	46f4      	mov	ip, lr
 801b1f6:	d1f5      	bne.n	801b1e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801b1f8:	6838      	ldr	r0, [r7, #0]
 801b1fa:	f8ce 0000 	str.w	r0, [lr]
 801b1fe:	88b9      	ldrh	r1, [r7, #4]
 801b200:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b204:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801b208:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b20c:	d009      	beq.n	801b222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801b20e:	7b51      	ldrb	r1, [r2, #13]
 801b210:	7992      	ldrb	r2, [r2, #6]
 801b212:	0149      	lsls	r1, r1, #5
 801b214:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b218:	4311      	orrs	r1, r2
 801b21a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b21e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801b222:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b226:	d00d      	beq.n	801b244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801b228:	442b      	add	r3, r5
 801b22a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b22e:	b29b      	uxth	r3, r3
 801b230:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b234:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b238:	10db      	asrs	r3, r3, #3
 801b23a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b23e:	4313      	orrs	r3, r2
 801b240:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b244:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801b248:	00cb      	lsls	r3, r1, #3
 801b24a:	064f      	lsls	r7, r1, #25
 801b24c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b250:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801b254:	ea43 0302 	orr.w	r3, r3, r2
 801b258:	bf44      	itt	mi
 801b25a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b25e:	b21b      	sxthmi	r3, r3
 801b260:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b264:	1b5d      	subs	r5, r3, r5
 801b266:	4632      	mov	r2, r6
 801b268:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b26c:	e6fa      	b.n	801b064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b26e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801b272:	4694      	mov	ip, r2
 801b274:	f102 0908 	add.w	r9, r2, #8
 801b278:	4676      	mov	r6, lr
 801b27a:	f8dc 0000 	ldr.w	r0, [ip]
 801b27e:	f10c 0c08 	add.w	ip, ip, #8
 801b282:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801b286:	46f0      	mov	r8, lr
 801b288:	45cc      	cmp	ip, r9
 801b28a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b28e:	46c6      	mov	lr, r8
 801b290:	d1f3      	bne.n	801b27a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801b292:	f8dc 0000 	ldr.w	r0, [ip]
 801b296:	f8c8 0000 	str.w	r0, [r8]
 801b29a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801b29e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b2a2:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801b2a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b2aa:	d009      	beq.n	801b2c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801b2ac:	7b51      	ldrb	r1, [r2, #13]
 801b2ae:	7992      	ldrb	r2, [r2, #6]
 801b2b0:	0149      	lsls	r1, r1, #5
 801b2b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b2b6:	4311      	orrs	r1, r2
 801b2b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b2bc:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801b2c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b2c4:	d00d      	beq.n	801b2e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801b2c6:	1bdb      	subs	r3, r3, r7
 801b2c8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b2cc:	b29b      	uxth	r3, r3
 801b2ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b2d2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b2d6:	10db      	asrs	r3, r3, #3
 801b2d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b2dc:	4313      	orrs	r3, r2
 801b2de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b2e2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801b2e6:	00cb      	lsls	r3, r1, #3
 801b2e8:	0648      	lsls	r0, r1, #25
 801b2ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b2ee:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801b2f2:	ea43 0302 	orr.w	r3, r3, r2
 801b2f6:	bf44      	itt	mi
 801b2f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b2fc:	b21b      	sxthmi	r3, r3
 801b2fe:	e7b1      	b.n	801b264 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801b300 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b304:	461e      	mov	r6, r3
 801b306:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b308:	4604      	mov	r4, r0
 801b30a:	4617      	mov	r7, r2
 801b30c:	b92b      	cbnz	r3, 801b31a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801b30e:	4b25      	ldr	r3, [pc, #148]	; (801b3a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801b310:	21bf      	movs	r1, #191	; 0xbf
 801b312:	4a25      	ldr	r2, [pc, #148]	; (801b3a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801b314:	4825      	ldr	r0, [pc, #148]	; (801b3ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801b316:	f00b f8cb 	bl	80264b0 <__assert_func>
 801b31a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b31c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b320:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b324:	f7ed fb72 	bl	8008a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b328:	4605      	mov	r5, r0
 801b32a:	b918      	cbnz	r0, 801b334 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801b32c:	6030      	str	r0, [r6, #0]
 801b32e:	4628      	mov	r0, r5
 801b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b334:	683b      	ldr	r3, [r7, #0]
 801b336:	4601      	mov	r1, r0
 801b338:	4638      	mov	r0, r7
 801b33a:	68db      	ldr	r3, [r3, #12]
 801b33c:	4798      	blx	r3
 801b33e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b342:	4602      	mov	r2, r0
 801b344:	6030      	str	r0, [r6, #0]
 801b346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b34a:	d213      	bcs.n	801b374 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801b34c:	4643      	mov	r3, r8
 801b34e:	4639      	mov	r1, r7
 801b350:	4620      	mov	r0, r4
 801b352:	f7ff fe33 	bl	801afbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b356:	6030      	str	r0, [r6, #0]
 801b358:	6833      	ldr	r3, [r6, #0]
 801b35a:	b143      	cbz	r3, 801b36e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801b35c:	7b5a      	ldrb	r2, [r3, #13]
 801b35e:	7a9b      	ldrb	r3, [r3, #10]
 801b360:	0052      	lsls	r2, r2, #1
 801b362:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b366:	4313      	orrs	r3, r2
 801b368:	bf0c      	ite	eq
 801b36a:	2301      	moveq	r3, #1
 801b36c:	2300      	movne	r3, #0
 801b36e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b372:	e7dc      	b.n	801b32e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801b374:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b378:	b29b      	uxth	r3, r3
 801b37a:	2b7f      	cmp	r3, #127	; 0x7f
 801b37c:	d804      	bhi.n	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801b37e:	4639      	mov	r1, r7
 801b380:	4620      	mov	r0, r4
 801b382:	f7ff fd01 	bl	801ad88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b386:	e7e6      	b.n	801b356 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801b388:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d0e3      	beq.n	801b358 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801b390:	f640 1302 	movw	r3, #2306	; 0x902
 801b394:	429d      	cmp	r5, r3
 801b396:	d1df      	bne.n	801b358 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801b398:	4601      	mov	r1, r0
 801b39a:	4620      	mov	r0, r4
 801b39c:	f7ff fcc5 	bl	801ad2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b3a0:	e7d9      	b.n	801b356 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801b3a2:	bf00      	nop
 801b3a4:	0802d9d8 	.word	0x0802d9d8
 801b3a8:	0802dc4a 	.word	0x0802dc4a
 801b3ac:	0802d9e1 	.word	0x0802d9e1

0801b3b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3b4:	461e      	mov	r6, r3
 801b3b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b3b8:	4604      	mov	r4, r0
 801b3ba:	4617      	mov	r7, r2
 801b3bc:	b92b      	cbnz	r3, 801b3ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801b3be:	4b26      	ldr	r3, [pc, #152]	; (801b458 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801b3c0:	21bf      	movs	r1, #191	; 0xbf
 801b3c2:	4a26      	ldr	r2, [pc, #152]	; (801b45c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801b3c4:	4826      	ldr	r0, [pc, #152]	; (801b460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801b3c6:	f00b f873 	bl	80264b0 <__assert_func>
 801b3ca:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b3cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b3d0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b3d4:	f7ed fb1a 	bl	8008a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b3d8:	4605      	mov	r5, r0
 801b3da:	b918      	cbnz	r0, 801b3e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801b3dc:	6030      	str	r0, [r6, #0]
 801b3de:	4628      	mov	r0, r5
 801b3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3e4:	683b      	ldr	r3, [r7, #0]
 801b3e6:	4601      	mov	r1, r0
 801b3e8:	4638      	mov	r0, r7
 801b3ea:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b3ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b3f2:	47c8      	blx	r9
 801b3f4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b3f8:	4602      	mov	r2, r0
 801b3fa:	6030      	str	r0, [r6, #0]
 801b3fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b400:	d213      	bcs.n	801b42a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801b402:	4643      	mov	r3, r8
 801b404:	4639      	mov	r1, r7
 801b406:	4620      	mov	r0, r4
 801b408:	f7ff fdd8 	bl	801afbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b40c:	6030      	str	r0, [r6, #0]
 801b40e:	6833      	ldr	r3, [r6, #0]
 801b410:	b143      	cbz	r3, 801b424 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801b412:	7b5a      	ldrb	r2, [r3, #13]
 801b414:	7a9b      	ldrb	r3, [r3, #10]
 801b416:	0052      	lsls	r2, r2, #1
 801b418:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b41c:	4313      	orrs	r3, r2
 801b41e:	bf0c      	ite	eq
 801b420:	2301      	moveq	r3, #1
 801b422:	2300      	movne	r3, #0
 801b424:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b428:	e7d9      	b.n	801b3de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801b42a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b42e:	b29b      	uxth	r3, r3
 801b430:	2b7f      	cmp	r3, #127	; 0x7f
 801b432:	d804      	bhi.n	801b43e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801b434:	4639      	mov	r1, r7
 801b436:	4620      	mov	r0, r4
 801b438:	f7ff fca6 	bl	801ad88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b43c:	e7e6      	b.n	801b40c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801b43e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b442:	2b00      	cmp	r3, #0
 801b444:	d0e3      	beq.n	801b40e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b446:	f640 1302 	movw	r3, #2306	; 0x902
 801b44a:	429d      	cmp	r5, r3
 801b44c:	d1df      	bne.n	801b40e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b44e:	4601      	mov	r1, r0
 801b450:	4620      	mov	r0, r4
 801b452:	f7ff fc6a 	bl	801ad2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b456:	e7d9      	b.n	801b40c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801b458:	0802d9d8 	.word	0x0802d9d8
 801b45c:	0802dc4a 	.word	0x0802dc4a
 801b460:	0802d9e1 	.word	0x0802d9e1

0801b464 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b464:	b510      	push	{r4, lr}
 801b466:	4604      	mov	r4, r0
 801b468:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801b46a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b46c:	b9d9      	cbnz	r1, 801b4a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801b46e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b470:	2b0a      	cmp	r3, #10
 801b472:	d036      	beq.n	801b4e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b474:	4620      	mov	r0, r4
 801b476:	f7ff fc1f 	bl	801acb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b47a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b47c:	2b09      	cmp	r3, #9
 801b47e:	d906      	bls.n	801b48e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801b480:	4b18      	ldr	r3, [pc, #96]	; (801b4e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801b482:	f240 1103 	movw	r1, #259	; 0x103
 801b486:	4a18      	ldr	r2, [pc, #96]	; (801b4e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801b488:	4818      	ldr	r0, [pc, #96]	; (801b4ec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801b48a:	f00b f811 	bl	80264b0 <__assert_func>
 801b48e:	1c5a      	adds	r2, r3, #1
 801b490:	8622      	strh	r2, [r4, #48]	; 0x30
 801b492:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b494:	4413      	add	r3, r2
 801b496:	b29b      	uxth	r3, r3
 801b498:	2b09      	cmp	r3, #9
 801b49a:	bf88      	it	hi
 801b49c:	3b0a      	subhi	r3, #10
 801b49e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b4a2:	8358      	strh	r0, [r3, #26]
 801b4a4:	e7e3      	b.n	801b46e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801b4a6:	2b0a      	cmp	r3, #10
 801b4a8:	d01b      	beq.n	801b4e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b4aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b4ac:	3901      	subs	r1, #1
 801b4ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b4b2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b4b4:	8721      	strh	r1, [r4, #56]	; 0x38
 801b4b6:	1c51      	adds	r1, r2, #1
 801b4b8:	b289      	uxth	r1, r1
 801b4ba:	2901      	cmp	r1, #1
 801b4bc:	bf8a      	itet	hi
 801b4be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b4c2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801b4c4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801b4c6:	2b09      	cmp	r3, #9
 801b4c8:	d8da      	bhi.n	801b480 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801b4ca:	1c5a      	adds	r2, r3, #1
 801b4cc:	8622      	strh	r2, [r4, #48]	; 0x30
 801b4ce:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b4d0:	4413      	add	r3, r2
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	2b09      	cmp	r3, #9
 801b4d6:	bf88      	it	hi
 801b4d8:	3b0a      	subhi	r3, #10
 801b4da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b4de:	8358      	strh	r0, [r3, #26]
 801b4e0:	e7c2      	b.n	801b468 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b4e2:	bd10      	pop	{r4, pc}
 801b4e4:	0802da0d 	.word	0x0802da0d
 801b4e8:	0802dda0 	.word	0x0802dda0
 801b4ec:	0802d9e1 	.word	0x0802d9e1

0801b4f0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b4f0:	b538      	push	{r3, r4, r5, lr}
 801b4f2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b4f4:	4604      	mov	r4, r0
 801b4f6:	b92a      	cbnz	r2, 801b504 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b4f8:	4b13      	ldr	r3, [pc, #76]	; (801b548 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b4fa:	21d4      	movs	r1, #212	; 0xd4
 801b4fc:	4a13      	ldr	r2, [pc, #76]	; (801b54c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b4fe:	4814      	ldr	r0, [pc, #80]	; (801b550 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801b500:	f00a ffd6 	bl	80264b0 <__assert_func>
 801b504:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b506:	3a01      	subs	r2, #1
 801b508:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b50c:	8b4d      	ldrh	r5, [r1, #26]
 801b50e:	8602      	strh	r2, [r0, #48]	; 0x30
 801b510:	1c5a      	adds	r2, r3, #1
 801b512:	b292      	uxth	r2, r2
 801b514:	2a09      	cmp	r2, #9
 801b516:	bf8a      	itet	hi
 801b518:	3b09      	subhi	r3, #9
 801b51a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801b51c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801b51e:	f7ff ffa1 	bl	801b464 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b522:	8b23      	ldrh	r3, [r4, #24]
 801b524:	2b01      	cmp	r3, #1
 801b526:	bf9c      	itt	ls
 801b528:	3301      	addls	r3, #1
 801b52a:	8323      	strhls	r3, [r4, #24]
 801b52c:	8ae3      	ldrh	r3, [r4, #22]
 801b52e:	b90b      	cbnz	r3, 801b534 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801b530:	2302      	movs	r3, #2
 801b532:	82e3      	strh	r3, [r4, #22]
 801b534:	8ae3      	ldrh	r3, [r4, #22]
 801b536:	4628      	mov	r0, r5
 801b538:	3b01      	subs	r3, #1
 801b53a:	b29b      	uxth	r3, r3
 801b53c:	82e3      	strh	r3, [r4, #22]
 801b53e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b542:	8265      	strh	r5, [r4, #18]
 801b544:	bd38      	pop	{r3, r4, r5, pc}
 801b546:	bf00      	nop
 801b548:	0802d9d8 	.word	0x0802d9d8
 801b54c:	0802dcf5 	.word	0x0802dcf5
 801b550:	0802d9e1 	.word	0x0802d9e1

0801b554 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b554:	428a      	cmp	r2, r1
 801b556:	b538      	push	{r3, r4, r5, lr}
 801b558:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801b55a:	d90c      	bls.n	801b576 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801b55c:	b92c      	cbnz	r4, 801b56a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801b55e:	4b1c      	ldr	r3, [pc, #112]	; (801b5d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801b560:	21e0      	movs	r1, #224	; 0xe0
 801b562:	4a1c      	ldr	r2, [pc, #112]	; (801b5d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801b564:	481c      	ldr	r0, [pc, #112]	; (801b5d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801b566:	f00a ffa3 	bl	80264b0 <__assert_func>
 801b56a:	3c01      	subs	r4, #1
 801b56c:	4b1b      	ldr	r3, [pc, #108]	; (801b5dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801b56e:	4a1c      	ldr	r2, [pc, #112]	; (801b5e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801b570:	21c4      	movs	r1, #196	; 0xc4
 801b572:	8604      	strh	r4, [r0, #48]	; 0x30
 801b574:	e7f6      	b.n	801b564 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b576:	428c      	cmp	r4, r1
 801b578:	d203      	bcs.n	801b582 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801b57a:	4b1a      	ldr	r3, [pc, #104]	; (801b5e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801b57c:	21ca      	movs	r1, #202	; 0xca
 801b57e:	4a1a      	ldr	r2, [pc, #104]	; (801b5e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801b580:	e7f0      	b.n	801b564 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b582:	1a64      	subs	r4, r4, r1
 801b584:	250a      	movs	r5, #10
 801b586:	8604      	strh	r4, [r0, #48]	; 0x30
 801b588:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801b58a:	4421      	add	r1, r4
 801b58c:	b289      	uxth	r1, r1
 801b58e:	2909      	cmp	r1, #9
 801b590:	bf88      	it	hi
 801b592:	390a      	subhi	r1, #10
 801b594:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b596:	b1ba      	cbz	r2, 801b5c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801b598:	3a01      	subs	r2, #1
 801b59a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801b59c:	b292      	uxth	r2, r2
 801b59e:	2909      	cmp	r1, #9
 801b5a0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b5a4:	d903      	bls.n	801b5ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801b5a6:	4b11      	ldr	r3, [pc, #68]	; (801b5ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801b5a8:	21e5      	movs	r1, #229	; 0xe5
 801b5aa:	4a11      	ldr	r2, [pc, #68]	; (801b5f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801b5ac:	e7da      	b.n	801b564 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b5ae:	3101      	adds	r1, #1
 801b5b0:	8601      	strh	r1, [r0, #48]	; 0x30
 801b5b2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b5b4:	b901      	cbnz	r1, 801b5b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801b5b6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b5b8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b5ba:	3901      	subs	r1, #1
 801b5bc:	b289      	uxth	r1, r1
 801b5be:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b5c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b5c4:	834c      	strh	r4, [r1, #26]
 801b5c6:	e7e6      	b.n	801b596 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801b5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5cc:	f7ff bf4a 	b.w	801b464 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b5d0:	0802d9d8 	.word	0x0802d9d8
 801b5d4:	0802dace 	.word	0x0802dace
 801b5d8:	0802d9e1 	.word	0x0802d9e1
 801b5dc:	0802da19 	.word	0x0802da19
 801b5e0:	0802db78 	.word	0x0802db78
 801b5e4:	0802da27 	.word	0x0802da27
 801b5e8:	0802de4f 	.word	0x0802de4f
 801b5ec:	0802da33 	.word	0x0802da33
 801b5f0:	0802da46 	.word	0x0802da46

0801b5f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b5f4:	3a01      	subs	r2, #1
 801b5f6:	b570      	push	{r4, r5, r6, lr}
 801b5f8:	b292      	uxth	r2, r2
 801b5fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b5fe:	42b2      	cmp	r2, r6
 801b600:	d019      	beq.n	801b636 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b602:	8b04      	ldrh	r4, [r0, #24]
 801b604:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b608:	4294      	cmp	r4, r2
 801b60a:	d805      	bhi.n	801b618 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b60c:	4b19      	ldr	r3, [pc, #100]	; (801b674 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b60e:	4a1a      	ldr	r2, [pc, #104]	; (801b678 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b610:	21c4      	movs	r1, #196	; 0xc4
 801b612:	481a      	ldr	r0, [pc, #104]	; (801b67c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b614:	f00a ff4c 	bl	80264b0 <__assert_func>
 801b618:	8ac4      	ldrh	r4, [r0, #22]
 801b61a:	4414      	add	r4, r2
 801b61c:	3a01      	subs	r2, #1
 801b61e:	b2a4      	uxth	r4, r4
 801b620:	b292      	uxth	r2, r2
 801b622:	2c01      	cmp	r4, #1
 801b624:	bf88      	it	hi
 801b626:	3c02      	subhi	r4, #2
 801b628:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b62c:	8a64      	ldrh	r4, [r4, #18]
 801b62e:	42ac      	cmp	r4, r5
 801b630:	d0e5      	beq.n	801b5fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b632:	2000      	movs	r0, #0
 801b634:	bd70      	pop	{r4, r5, r6, pc}
 801b636:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b63a:	2400      	movs	r4, #0
 801b63c:	4413      	add	r3, r2
 801b63e:	b2a2      	uxth	r2, r4
 801b640:	429a      	cmp	r2, r3
 801b642:	da14      	bge.n	801b66e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b644:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b646:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b64a:	4296      	cmp	r6, r2
 801b64c:	d802      	bhi.n	801b654 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b64e:	4b09      	ldr	r3, [pc, #36]	; (801b674 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b650:	4a0b      	ldr	r2, [pc, #44]	; (801b680 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b652:	e7dd      	b.n	801b610 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b654:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b656:	3401      	adds	r4, #1
 801b658:	4432      	add	r2, r6
 801b65a:	b292      	uxth	r2, r2
 801b65c:	2a09      	cmp	r2, #9
 801b65e:	bf88      	it	hi
 801b660:	3a0a      	subhi	r2, #10
 801b662:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b666:	8b52      	ldrh	r2, [r2, #26]
 801b668:	42aa      	cmp	r2, r5
 801b66a:	d0e8      	beq.n	801b63e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b66c:	e7e1      	b.n	801b632 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b66e:	2001      	movs	r0, #1
 801b670:	e7e0      	b.n	801b634 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b672:	bf00      	nop
 801b674:	0802da19 	.word	0x0802da19
 801b678:	0802ded3 	.word	0x0802ded3
 801b67c:	0802d9e1 	.word	0x0802d9e1
 801b680:	0802db78 	.word	0x0802db78

0801b684 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b688:	4605      	mov	r5, r0
 801b68a:	4616      	mov	r6, r2
 801b68c:	1c8c      	adds	r4, r1, #2
 801b68e:	8809      	ldrh	r1, [r1, #0]
 801b690:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b694:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b698:	42b3      	cmp	r3, r6
 801b69a:	d124      	bne.n	801b6e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b69c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b6a0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b6a4:	f001 070f 	and.w	r7, r1, #15
 801b6a8:	4652      	mov	r2, sl
 801b6aa:	f8cd 8000 	str.w	r8, [sp]
 801b6ae:	464b      	mov	r3, r9
 801b6b0:	4621      	mov	r1, r4
 801b6b2:	4628      	mov	r0, r5
 801b6b4:	f7ff ff9e 	bl	801b5f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b6b8:	4683      	mov	fp, r0
 801b6ba:	b168      	cbz	r0, 801b6d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b6bc:	eb0a 0109 	add.w	r1, sl, r9
 801b6c0:	463a      	mov	r2, r7
 801b6c2:	4628      	mov	r0, r5
 801b6c4:	4441      	add	r1, r8
 801b6c6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b6ca:	4649      	mov	r1, r9
 801b6cc:	f7ff ff42 	bl	801b554 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b6d0:	4658      	mov	r0, fp
 801b6d2:	b003      	add	sp, #12
 801b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6d8:	eb07 010a 	add.w	r1, r7, sl
 801b6dc:	4449      	add	r1, r9
 801b6de:	4441      	add	r1, r8
 801b6e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b6e4:	e7d2      	b.n	801b68c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b6e6:	f04f 0b00 	mov.w	fp, #0
 801b6ea:	e7f1      	b.n	801b6d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b6ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b6ec:	b570      	push	{r4, r5, r6, lr}
 801b6ee:	8810      	ldrh	r0, [r2, #0]
 801b6f0:	4298      	cmp	r0, r3
 801b6f2:	d817      	bhi.n	801b724 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b6f4:	1e48      	subs	r0, r1, #1
 801b6f6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b6fa:	4298      	cmp	r0, r3
 801b6fc:	d312      	bcc.n	801b724 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b6fe:	2400      	movs	r4, #0
 801b700:	428c      	cmp	r4, r1
 801b702:	d20f      	bcs.n	801b724 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b704:	1860      	adds	r0, r4, r1
 801b706:	1040      	asrs	r0, r0, #1
 801b708:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b70c:	0085      	lsls	r5, r0, #2
 801b70e:	42b3      	cmp	r3, r6
 801b710:	d902      	bls.n	801b718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b712:	3001      	adds	r0, #1
 801b714:	b284      	uxth	r4, r0
 801b716:	e7f3      	b.n	801b700 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b718:	d201      	bcs.n	801b71e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b71a:	b281      	uxth	r1, r0
 801b71c:	e7f0      	b.n	801b700 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b71e:	442a      	add	r2, r5
 801b720:	8850      	ldrh	r0, [r2, #2]
 801b722:	bd70      	pop	{r4, r5, r6, pc}
 801b724:	2000      	movs	r0, #0
 801b726:	e7fc      	b.n	801b722 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b728 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b72c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b72e:	4604      	mov	r4, r0
 801b730:	260b      	movs	r6, #11
 801b732:	886f      	ldrh	r7, [r5, #2]
 801b734:	087f      	lsrs	r7, r7, #1
 801b736:	3e01      	subs	r6, #1
 801b738:	d01b      	beq.n	801b772 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b73a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b73c:	b92b      	cbnz	r3, 801b74a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b73e:	4b0e      	ldr	r3, [pc, #56]	; (801b778 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b740:	21bf      	movs	r1, #191	; 0xbf
 801b742:	4a0e      	ldr	r2, [pc, #56]	; (801b77c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b744:	480e      	ldr	r0, [pc, #56]	; (801b780 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b746:	f00a feb3 	bl	80264b0 <__assert_func>
 801b74a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b74c:	462a      	mov	r2, r5
 801b74e:	4639      	mov	r1, r7
 801b750:	4620      	mov	r0, r4
 801b752:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b756:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b75a:	4643      	mov	r3, r8
 801b75c:	f7ff ffc6 	bl	801b6ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b760:	b138      	cbz	r0, 801b772 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b762:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b766:	4642      	mov	r2, r8
 801b768:	4620      	mov	r0, r4
 801b76a:	f7ff ff8b 	bl	801b684 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b76e:	2800      	cmp	r0, #0
 801b770:	d1e1      	bne.n	801b736 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b776:	bf00      	nop
 801b778:	0802d9d8 	.word	0x0802d9d8
 801b77c:	0802dc4a 	.word	0x0802dc4a
 801b780:	0802d9e1 	.word	0x0802d9e1

0801b784 <_ZN8touchgfx8ceil28_4El>:
 801b784:	f110 030f 	adds.w	r3, r0, #15
 801b788:	d401      	bmi.n	801b78e <_ZN8touchgfx8ceil28_4El+0xa>
 801b78a:	1118      	asrs	r0, r3, #4
 801b78c:	4770      	bx	lr
 801b78e:	2210      	movs	r2, #16
 801b790:	f1c0 0001 	rsb	r0, r0, #1
 801b794:	fb93 f3f2 	sdiv	r3, r3, r2
 801b798:	f010 000f 	ands.w	r0, r0, #15
 801b79c:	bf18      	it	ne
 801b79e:	2001      	movne	r0, #1
 801b7a0:	1a18      	subs	r0, r3, r0
 801b7a2:	4770      	bx	lr

0801b7a4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801b7a4:	2900      	cmp	r1, #0
 801b7a6:	b538      	push	{r3, r4, r5, lr}
 801b7a8:	dc05      	bgt.n	801b7b6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801b7aa:	4b0f      	ldr	r3, [pc, #60]	; (801b7e8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801b7ac:	21f7      	movs	r1, #247	; 0xf7
 801b7ae:	4a0f      	ldr	r2, [pc, #60]	; (801b7ec <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801b7b0:	480f      	ldr	r0, [pc, #60]	; (801b7f0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801b7b2:	f00a fe7d 	bl	80264b0 <__assert_func>
 801b7b6:	2800      	cmp	r0, #0
 801b7b8:	db06      	blt.n	801b7c8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801b7ba:	fb90 f4f1 	sdiv	r4, r0, r1
 801b7be:	fb01 0114 	mls	r1, r1, r4, r0
 801b7c2:	6014      	str	r4, [r2, #0]
 801b7c4:	6019      	str	r1, [r3, #0]
 801b7c6:	bd38      	pop	{r3, r4, r5, pc}
 801b7c8:	4240      	negs	r0, r0
 801b7ca:	fb90 f4f1 	sdiv	r4, r0, r1
 801b7ce:	4265      	negs	r5, r4
 801b7d0:	fb01 0014 	mls	r0, r1, r4, r0
 801b7d4:	6015      	str	r5, [r2, #0]
 801b7d6:	6018      	str	r0, [r3, #0]
 801b7d8:	2800      	cmp	r0, #0
 801b7da:	d0f4      	beq.n	801b7c6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801b7dc:	6810      	ldr	r0, [r2, #0]
 801b7de:	3801      	subs	r0, #1
 801b7e0:	6010      	str	r0, [r2, #0]
 801b7e2:	6818      	ldr	r0, [r3, #0]
 801b7e4:	1a09      	subs	r1, r1, r0
 801b7e6:	e7ed      	b.n	801b7c4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801b7e8:	0802dfa4 	.word	0x0802dfa4
 801b7ec:	0802dfe3 	.word	0x0802dfe3
 801b7f0:	0802dfb4 	.word	0x0802dfb4

0801b7f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b7f4:	b570      	push	{r4, r5, r6, lr}
 801b7f6:	694a      	ldr	r2, [r1, #20]
 801b7f8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b7fa:	684b      	ldr	r3, [r1, #4]
 801b7fc:	1b54      	subs	r4, r2, r5
 801b7fe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b800:	f000 8106 	beq.w	801ba10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b804:	1b9b      	subs	r3, r3, r6
 801b806:	d003      	beq.n	801b810 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b808:	4363      	muls	r3, r4
 801b80a:	2210      	movs	r2, #16
 801b80c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b810:	680c      	ldr	r4, [r1, #0]
 801b812:	698a      	ldr	r2, [r1, #24]
 801b814:	1b65      	subs	r5, r4, r5
 801b816:	f000 80fd 	beq.w	801ba14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b81a:	1b92      	subs	r2, r2, r6
 801b81c:	d003      	beq.n	801b826 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b81e:	436a      	muls	r2, r5
 801b820:	2410      	movs	r4, #16
 801b822:	fb92 f2f4 	sdiv	r2, r2, r4
 801b826:	1a9b      	subs	r3, r3, r2
 801b828:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801ba50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b82c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b830:	460a      	mov	r2, r1
 801b832:	ee07 3a90 	vmov	s15, r3
 801b836:	f100 040c 	add.w	r4, r0, #12
 801b83a:	4603      	mov	r3, r0
 801b83c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b840:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b844:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b848:	eeb1 6a43 	vneg.f32	s12, s6
 801b84c:	edd2 7a02 	vldr	s15, [r2, #8]
 801b850:	3214      	adds	r2, #20
 801b852:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b856:	ece3 6a01 	vstmia	r3!, {s13}
 801b85a:	429c      	cmp	r4, r3
 801b85c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b860:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b864:	edc3 7a02 	vstr	s15, [r3, #8]
 801b868:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b86c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b870:	edc3 7a05 	vstr	s15, [r3, #20]
 801b874:	d1ea      	bne.n	801b84c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b876:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b878:	698b      	ldr	r3, [r1, #24]
 801b87a:	edd0 4a02 	vldr	s9, [r0, #8]
 801b87e:	1a9b      	subs	r3, r3, r2
 801b880:	edd0 3a00 	vldr	s7, [r0]
 801b884:	edd0 6a01 	vldr	s13, [r0, #4]
 801b888:	ee07 3a90 	vmov	s15, r3
 801b88c:	684b      	ldr	r3, [r1, #4]
 801b88e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b892:	ed90 5a05 	vldr	s10, [r0, #20]
 801b896:	1a9b      	subs	r3, r3, r2
 801b898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b89c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b8a0:	ed90 2a03 	vldr	s4, [r0, #12]
 801b8a4:	ee07 3a10 	vmov	s14, r3
 801b8a8:	edd0 5a04 	vldr	s11, [r0, #16]
 801b8ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b8b0:	ed90 1a07 	vldr	s2, [r0, #28]
 801b8b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8b8:	edd0 2a06 	vldr	s5, [r0, #24]
 801b8bc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b8c0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b8c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b8c8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b8cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b8d0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b8d4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b8d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b8da:	694a      	ldr	r2, [r1, #20]
 801b8dc:	1b13      	subs	r3, r2, r4
 801b8de:	ee07 3a10 	vmov	s14, r3
 801b8e2:	680b      	ldr	r3, [r1, #0]
 801b8e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8e8:	1b1b      	subs	r3, r3, r4
 801b8ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b8ee:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b8f2:	ee07 3a10 	vmov	s14, r3
 801b8f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b8fe:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b902:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b906:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b90a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b90c:	698b      	ldr	r3, [r1, #24]
 801b90e:	1a9b      	subs	r3, r3, r2
 801b910:	ee06 3a90 	vmov	s13, r3
 801b914:	684b      	ldr	r3, [r1, #4]
 801b916:	1a9b      	subs	r3, r3, r2
 801b918:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b91c:	ee07 3a10 	vmov	s14, r3
 801b920:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b924:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b928:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b92c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b930:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b934:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b938:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b93c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b93e:	694a      	ldr	r2, [r1, #20]
 801b940:	1b13      	subs	r3, r2, r4
 801b942:	ee07 3a10 	vmov	s14, r3
 801b946:	680b      	ldr	r3, [r1, #0]
 801b948:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b94c:	1b1b      	subs	r3, r3, r4
 801b94e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b952:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b956:	ee07 3a10 	vmov	s14, r3
 801b95a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b95e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b962:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b966:	edd0 5a08 	vldr	s11, [r0, #32]
 801b96a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b96e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b972:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b976:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b97a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b97c:	698b      	ldr	r3, [r1, #24]
 801b97e:	1a9b      	subs	r3, r3, r2
 801b980:	ee07 3a10 	vmov	s14, r3
 801b984:	684b      	ldr	r3, [r1, #4]
 801b986:	1a9b      	subs	r3, r3, r2
 801b988:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b98c:	ee01 3a90 	vmov	s3, r3
 801b990:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b994:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b998:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b99c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b9a0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b9a4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b9a8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b9ac:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b9ae:	694a      	ldr	r2, [r1, #20]
 801b9b0:	1b13      	subs	r3, r2, r4
 801b9b2:	ee03 3a10 	vmov	s6, r3
 801b9b6:	680b      	ldr	r3, [r1, #0]
 801b9b8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b9bc:	1b1b      	subs	r3, r3, r4
 801b9be:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b9c2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b9c6:	ee03 3a10 	vmov	s6, r3
 801b9ca:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b9ce:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b9d2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b9d6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b9da:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b9de:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b9e2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b9e6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ee:	dd13      	ble.n	801ba18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b9f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b9f4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b9f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b9fa:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b9fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba06:	dd15      	ble.n	801ba34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801ba08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ba0c:	6403      	str	r3, [r0, #64]	; 0x40
 801ba0e:	bd70      	pop	{r4, r5, r6, pc}
 801ba10:	4623      	mov	r3, r4
 801ba12:	e6fd      	b.n	801b810 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ba14:	462a      	mov	r2, r5
 801ba16:	e706      	b.n	801b826 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ba18:	d502      	bpl.n	801ba20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ba1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ba1e:	e7e9      	b.n	801b9f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ba20:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ba24:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ba28:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba30:	dade      	bge.n	801b9f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ba32:	e7f2      	b.n	801ba1a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ba34:	d502      	bpl.n	801ba3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ba36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ba3a:	e7e7      	b.n	801ba0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ba3c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ba40:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ba44:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba4c:	dadc      	bge.n	801ba08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ba4e:	e7f2      	b.n	801ba36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ba50:	3d800000 	.word	0x3d800000

0801ba54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ba54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba58:	f04f 0814 	mov.w	r8, #20
 801ba5c:	4604      	mov	r4, r0
 801ba5e:	4617      	mov	r7, r2
 801ba60:	460d      	mov	r5, r1
 801ba62:	fb08 f903 	mul.w	r9, r8, r3
 801ba66:	461e      	mov	r6, r3
 801ba68:	eb02 0a09 	add.w	sl, r2, r9
 801ba6c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801ba70:	f7ff fe88 	bl	801b784 <_ZN8touchgfx8ceil28_4El>
 801ba74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba76:	6160      	str	r0, [r4, #20]
 801ba78:	fb08 f803 	mul.w	r8, r8, r3
 801ba7c:	9001      	str	r0, [sp, #4]
 801ba7e:	eb07 0b08 	add.w	fp, r7, r8
 801ba82:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ba86:	f7ff fe7d 	bl	801b784 <_ZN8touchgfx8ceil28_4El>
 801ba8a:	9a01      	ldr	r2, [sp, #4]
 801ba8c:	1a80      	subs	r0, r0, r2
 801ba8e:	61a0      	str	r0, [r4, #24]
 801ba90:	2800      	cmp	r0, #0
 801ba92:	f000 8088 	beq.w	801bba6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801ba96:	f857 3009 	ldr.w	r3, [r7, r9]
 801ba9a:	f857 c008 	ldr.w	ip, [r7, r8]
 801ba9e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801baa2:	ebac 0c03 	sub.w	ip, ip, r3
 801baa6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801baaa:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801baae:	1a40      	subs	r0, r0, r1
 801bab0:	fb0b f202 	mul.w	r2, fp, r2
 801bab4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801bab8:	fb0c 2211 	mls	r2, ip, r1, r2
 801babc:	4641      	mov	r1, r8
 801babe:	fb00 2003 	mla	r0, r0, r3, r2
 801bac2:	f104 0310 	add.w	r3, r4, #16
 801bac6:	4622      	mov	r2, r4
 801bac8:	3801      	subs	r0, #1
 801baca:	4440      	add	r0, r8
 801bacc:	f7ff fe6a 	bl	801b7a4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801bad0:	f104 0308 	add.w	r3, r4, #8
 801bad4:	1d22      	adds	r2, r4, #4
 801bad6:	4641      	mov	r1, r8
 801bad8:	4658      	mov	r0, fp
 801bada:	f7ff fe63 	bl	801b7a4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801bade:	f8c4 800c 	str.w	r8, [r4, #12]
 801bae2:	6962      	ldr	r2, [r4, #20]
 801bae4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801bae8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801bbb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801baec:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801baf0:	6822      	ldr	r2, [r4, #0]
 801baf2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801baf6:	ee07 3a10 	vmov	s14, r3
 801bafa:	f857 3009 	ldr.w	r3, [r7, r9]
 801bafe:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801bb02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb06:	ee07 3a90 	vmov	s15, r3
 801bb0a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801bb0e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801bb12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bb1a:	edd3 6a00 	vldr	s13, [r3]
 801bb1e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801bb22:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801bb26:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bb2a:	edc4 6a07 	vstr	s13, [r4, #28]
 801bb2e:	edd4 6a01 	vldr	s13, [r4, #4]
 801bb32:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801bb36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bb3a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801bb3e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801bb42:	ed84 6a08 	vstr	s12, [r4, #32]
 801bb46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801bb48:	6262      	str	r2, [r4, #36]	; 0x24
 801bb4a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801bb4e:	ed93 6a03 	vldr	s12, [r3, #12]
 801bb52:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bb56:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801bb5a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801bb5e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801bb62:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801bb66:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801bb6a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801bb6e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801bb72:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801bb74:	6322      	str	r2, [r4, #48]	; 0x30
 801bb76:	ed93 6a06 	vldr	s12, [r3, #24]
 801bb7a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801bb7e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bb82:	eeb0 7a46 	vmov.f32	s14, s12
 801bb86:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801bb8a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801bb8e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801bb92:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801bb96:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801bb9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bb9e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801bba2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801bba4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801bba6:	4620      	mov	r0, r4
 801bba8:	b003      	add	sp, #12
 801bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbae:	bf00      	nop
 801bbb0:	3d800000 	.word	0x3d800000

0801bbb4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801bbb4:	4602      	mov	r2, r0
 801bbb6:	b148      	cbz	r0, 801bbcc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801bbb8:	2300      	movs	r3, #0
 801bbba:	b298      	uxth	r0, r3
 801bbbc:	3301      	adds	r3, #1
 801bbbe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801bbc2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801bbc6:	2900      	cmp	r1, #0
 801bbc8:	d1f7      	bne.n	801bbba <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801bbca:	4770      	bx	lr
 801bbcc:	4770      	bx	lr

0801bbce <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801bbce:	b530      	push	{r4, r5, lr}
 801bbd0:	4604      	mov	r4, r0
 801bbd2:	b159      	cbz	r1, 801bbec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801bbd4:	b148      	cbz	r0, 801bbea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	b298      	uxth	r0, r3
 801bbda:	4282      	cmp	r2, r0
 801bbdc:	d905      	bls.n	801bbea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801bbde:	5ccd      	ldrb	r5, [r1, r3]
 801bbe0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801bbe4:	3301      	adds	r3, #1
 801bbe6:	2d00      	cmp	r5, #0
 801bbe8:	d1f6      	bne.n	801bbd8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801bbea:	bd30      	pop	{r4, r5, pc}
 801bbec:	4608      	mov	r0, r1
 801bbee:	e7fc      	b.n	801bbea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801bbf0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801bbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbf2:	468c      	mov	ip, r1
 801bbf4:	b08b      	sub	sp, #44	; 0x2c
 801bbf6:	2100      	movs	r1, #0
 801bbf8:	ae01      	add	r6, sp, #4
 801bbfa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801bbfe:	211f      	movs	r1, #31
 801bc00:	fbb0 f7f3 	udiv	r7, r0, r3
 801bc04:	fb03 0517 	mls	r5, r3, r7, r0
 801bc08:	4638      	mov	r0, r7
 801bc0a:	b2ec      	uxtb	r4, r5
 801bc0c:	2d09      	cmp	r5, #9
 801bc0e:	bfd4      	ite	le
 801bc10:	3430      	addle	r4, #48	; 0x30
 801bc12:	3457      	addgt	r4, #87	; 0x57
 801bc14:	b2e4      	uxtb	r4, r4
 801bc16:	558c      	strb	r4, [r1, r6]
 801bc18:	1e4c      	subs	r4, r1, #1
 801bc1a:	b92f      	cbnz	r7, 801bc28 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801bc1c:	4431      	add	r1, r6
 801bc1e:	4660      	mov	r0, ip
 801bc20:	f7ff ffd5 	bl	801bbce <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bc24:	b00b      	add	sp, #44	; 0x2c
 801bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc28:	4621      	mov	r1, r4
 801bc2a:	e7e9      	b.n	801bc00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801bc2c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801bc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc2e:	4607      	mov	r7, r0
 801bc30:	b08b      	sub	sp, #44	; 0x2c
 801bc32:	4608      	mov	r0, r1
 801bc34:	b341      	cbz	r1, 801bc88 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801bc36:	1e99      	subs	r1, r3, #2
 801bc38:	2922      	cmp	r1, #34	; 0x22
 801bc3a:	d825      	bhi.n	801bc88 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801bc3c:	2100      	movs	r1, #0
 801bc3e:	463c      	mov	r4, r7
 801bc40:	261f      	movs	r6, #31
 801bc42:	f10d 0c04 	add.w	ip, sp, #4
 801bc46:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801bc4a:	1e71      	subs	r1, r6, #1
 801bc4c:	fb94 fef3 	sdiv	lr, r4, r3
 801bc50:	fb03 441e 	mls	r4, r3, lr, r4
 801bc54:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801bc58:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801bc5c:	b2ec      	uxtb	r4, r5
 801bc5e:	2d09      	cmp	r5, #9
 801bc60:	bfd4      	ite	le
 801bc62:	3430      	addle	r4, #48	; 0x30
 801bc64:	3457      	addgt	r4, #87	; 0x57
 801bc66:	b2e4      	uxtb	r4, r4
 801bc68:	f80c 4006 	strb.w	r4, [ip, r6]
 801bc6c:	4674      	mov	r4, lr
 801bc6e:	b96c      	cbnz	r4, 801bc8c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801bc70:	2f00      	cmp	r7, #0
 801bc72:	da05      	bge.n	801bc80 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801bc74:	ab0a      	add	r3, sp, #40	; 0x28
 801bc76:	4419      	add	r1, r3
 801bc78:	232d      	movs	r3, #45	; 0x2d
 801bc7a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801bc7e:	1eb1      	subs	r1, r6, #2
 801bc80:	3101      	adds	r1, #1
 801bc82:	4461      	add	r1, ip
 801bc84:	f7ff ffa3 	bl	801bbce <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801bc88:	b00b      	add	sp, #44	; 0x2c
 801bc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc8c:	460e      	mov	r6, r1
 801bc8e:	e7dc      	b.n	801bc4a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801bc90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc94:	b085      	sub	sp, #20
 801bc96:	4691      	mov	r9, r2
 801bc98:	6802      	ldr	r2, [r0, #0]
 801bc9a:	4688      	mov	r8, r1
 801bc9c:	461c      	mov	r4, r3
 801bc9e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801bca2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801bca6:	4683      	mov	fp, r0
 801bca8:	4610      	mov	r0, r2
 801bcaa:	9103      	str	r1, [sp, #12]
 801bcac:	9302      	str	r3, [sp, #8]
 801bcae:	9201      	str	r2, [sp, #4]
 801bcb0:	f7ff ff80 	bl	801bbb4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801bcb4:	f1b8 0f00 	cmp.w	r8, #0
 801bcb8:	bf0c      	ite	eq
 801bcba:	4684      	moveq	ip, r0
 801bcbc:	f100 0c01 	addne.w	ip, r0, #1
 801bcc0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801bcc4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801bcc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bcca:	fa1f fc8c 	uxth.w	ip, ip
 801bcce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bcd0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801bcd4:	9903      	ldr	r1, [sp, #12]
 801bcd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bcda:	d041      	beq.n	801bd60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801bcdc:	d834      	bhi.n	801bd48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801bcde:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801bce2:	d059      	beq.n	801bd98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801bce4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801bce8:	d03a      	beq.n	801bd60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801bcea:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801bcee:	d034      	beq.n	801bd5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801bcf0:	2400      	movs	r4, #0
 801bcf2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801bcf6:	3a01      	subs	r2, #1
 801bcf8:	b169      	cbz	r1, 801bd16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bcfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bcfc:	458c      	cmp	ip, r1
 801bcfe:	da09      	bge.n	801bd14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801bd00:	eba1 010c 	sub.w	r1, r1, ip
 801bd04:	b289      	uxth	r1, r1
 801bd06:	b933      	cbnz	r3, 801bd16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bd08:	2e00      	cmp	r6, #0
 801bd0a:	d051      	beq.n	801bdb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801bd0c:	2800      	cmp	r0, #0
 801bd0e:	d04f      	beq.n	801bdb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801bd10:	440c      	add	r4, r1
 801bd12:	b2a4      	uxth	r4, r4
 801bd14:	2100      	movs	r1, #0
 801bd16:	682b      	ldr	r3, [r5, #0]
 801bd18:	4293      	cmp	r3, r2
 801bd1a:	da07      	bge.n	801bd2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801bd1c:	f1b8 0f00 	cmp.w	r8, #0
 801bd20:	d004      	beq.n	801bd2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801bd22:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801bd26:	682b      	ldr	r3, [r5, #0]
 801bd28:	3301      	adds	r3, #1
 801bd2a:	602b      	str	r3, [r5, #0]
 801bd2c:	2730      	movs	r7, #48	; 0x30
 801bd2e:	2c00      	cmp	r4, #0
 801bd30:	d04e      	beq.n	801bdd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801bd32:	682e      	ldr	r6, [r5, #0]
 801bd34:	3c01      	subs	r4, #1
 801bd36:	42b2      	cmp	r2, r6
 801bd38:	b2a4      	uxth	r4, r4
 801bd3a:	dd49      	ble.n	801bdd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801bd3c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801bd40:	682b      	ldr	r3, [r5, #0]
 801bd42:	3301      	adds	r3, #1
 801bd44:	602b      	str	r3, [r5, #0]
 801bd46:	e7f2      	b.n	801bd2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801bd48:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801bd4c:	d01d      	beq.n	801bd8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801bd4e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801bd52:	d002      	beq.n	801bd5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801bd54:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801bd58:	e7c9      	b.n	801bcee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801bd5a:	4684      	mov	ip, r0
 801bd5c:	f04f 0800 	mov.w	r8, #0
 801bd60:	2c00      	cmp	r4, #0
 801bd62:	d0c6      	beq.n	801bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bd64:	b947      	cbnz	r7, 801bd78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801bd66:	2801      	cmp	r0, #1
 801bd68:	d106      	bne.n	801bd78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801bd6a:	8814      	ldrh	r4, [r2, #0]
 801bd6c:	2c30      	cmp	r4, #48	; 0x30
 801bd6e:	bf02      	ittt	eq
 801bd70:	3202      	addeq	r2, #2
 801bd72:	4638      	moveq	r0, r7
 801bd74:	f8cb 2000 	streq.w	r2, [fp]
 801bd78:	45bc      	cmp	ip, r7
 801bd7a:	da14      	bge.n	801bda6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801bd7c:	b2bf      	uxth	r7, r7
 801bd7e:	eba7 040c 	sub.w	r4, r7, ip
 801bd82:	46bc      	mov	ip, r7
 801bd84:	b2a4      	uxth	r4, r4
 801bd86:	2600      	movs	r6, #0
 801bd88:	e7b3      	b.n	801bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bd8a:	4684      	mov	ip, r0
 801bd8c:	b16c      	cbz	r4, 801bdaa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801bd8e:	42b8      	cmp	r0, r7
 801bd90:	dd00      	ble.n	801bd94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801bd92:	b2b8      	uxth	r0, r7
 801bd94:	2400      	movs	r4, #0
 801bd96:	e003      	b.n	801bda0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801bd98:	f04f 0c01 	mov.w	ip, #1
 801bd9c:	2400      	movs	r4, #0
 801bd9e:	4660      	mov	r0, ip
 801bda0:	4626      	mov	r6, r4
 801bda2:	46a0      	mov	r8, r4
 801bda4:	e7a5      	b.n	801bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bda6:	2400      	movs	r4, #0
 801bda8:	e7ed      	b.n	801bd86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801bdaa:	4626      	mov	r6, r4
 801bdac:	46a0      	mov	r8, r4
 801bdae:	e7a0      	b.n	801bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bdb0:	2900      	cmp	r1, #0
 801bdb2:	d0b0      	beq.n	801bd16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bdb4:	2720      	movs	r7, #32
 801bdb6:	682e      	ldr	r6, [r5, #0]
 801bdb8:	2900      	cmp	r1, #0
 801bdba:	d0ac      	beq.n	801bd16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bdbc:	3901      	subs	r1, #1
 801bdbe:	4296      	cmp	r6, r2
 801bdc0:	b289      	uxth	r1, r1
 801bdc2:	daa7      	bge.n	801bd14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801bdc4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801bdc8:	682b      	ldr	r3, [r5, #0]
 801bdca:	3301      	adds	r3, #1
 801bdcc:	602b      	str	r3, [r5, #0]
 801bdce:	e7f2      	b.n	801bdb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801bdd0:	b188      	cbz	r0, 801bdf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801bdd2:	682b      	ldr	r3, [r5, #0]
 801bdd4:	3801      	subs	r0, #1
 801bdd6:	429a      	cmp	r2, r3
 801bdd8:	b280      	uxth	r0, r0
 801bdda:	dd0c      	ble.n	801bdf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801bddc:	f8db 3000 	ldr.w	r3, [fp]
 801bde0:	1c9c      	adds	r4, r3, #2
 801bde2:	f8cb 4000 	str.w	r4, [fp]
 801bde6:	881c      	ldrh	r4, [r3, #0]
 801bde8:	682b      	ldr	r3, [r5, #0]
 801bdea:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801bdee:	682b      	ldr	r3, [r5, #0]
 801bdf0:	3301      	adds	r3, #1
 801bdf2:	602b      	str	r3, [r5, #0]
 801bdf4:	e7ec      	b.n	801bdd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801bdf6:	2620      	movs	r6, #32
 801bdf8:	b151      	cbz	r1, 801be10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801bdfa:	6828      	ldr	r0, [r5, #0]
 801bdfc:	3901      	subs	r1, #1
 801bdfe:	4282      	cmp	r2, r0
 801be00:	b289      	uxth	r1, r1
 801be02:	dd05      	ble.n	801be10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801be04:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801be08:	682b      	ldr	r3, [r5, #0]
 801be0a:	3301      	adds	r3, #1
 801be0c:	602b      	str	r3, [r5, #0]
 801be0e:	e7f3      	b.n	801bdf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801be10:	b005      	add	sp, #20
 801be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801be16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be1a:	2400      	movs	r4, #0
 801be1c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801be20:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801be24:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801be28:	8014      	strh	r4, [r2, #0]
 801be2a:	701c      	strb	r4, [r3, #0]
 801be2c:	f888 4000 	strb.w	r4, [r8]
 801be30:	f88c 4000 	strb.w	r4, [ip]
 801be34:	f88e 4000 	strb.w	r4, [lr]
 801be38:	703c      	strb	r4, [r7, #0]
 801be3a:	6804      	ldr	r4, [r0, #0]
 801be3c:	b1a4      	cbz	r4, 801be68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801be3e:	8824      	ldrh	r4, [r4, #0]
 801be40:	f04f 0901 	mov.w	r9, #1
 801be44:	b314      	cbz	r4, 801be8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801be46:	2c2b      	cmp	r4, #43	; 0x2b
 801be48:	d001      	beq.n	801be4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801be4a:	2c20      	cmp	r4, #32
 801be4c:	d110      	bne.n	801be70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801be4e:	8014      	strh	r4, [r2, #0]
 801be50:	6804      	ldr	r4, [r0, #0]
 801be52:	b10c      	cbz	r4, 801be58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801be54:	3402      	adds	r4, #2
 801be56:	6004      	str	r4, [r0, #0]
 801be58:	680c      	ldr	r4, [r1, #0]
 801be5a:	b10c      	cbz	r4, 801be60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801be5c:	3401      	adds	r4, #1
 801be5e:	600c      	str	r4, [r1, #0]
 801be60:	6804      	ldr	r4, [r0, #0]
 801be62:	b17c      	cbz	r4, 801be84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801be64:	8824      	ldrh	r4, [r4, #0]
 801be66:	e7ed      	b.n	801be44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801be68:	680c      	ldr	r4, [r1, #0]
 801be6a:	b17c      	cbz	r4, 801be8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801be6c:	7824      	ldrb	r4, [r4, #0]
 801be6e:	e7e7      	b.n	801be40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801be70:	2c2d      	cmp	r4, #45	; 0x2d
 801be72:	d102      	bne.n	801be7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801be74:	f883 9000 	strb.w	r9, [r3]
 801be78:	e7ea      	b.n	801be50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801be7a:	2c23      	cmp	r4, #35	; 0x23
 801be7c:	d107      	bne.n	801be8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801be7e:	f888 9000 	strb.w	r9, [r8]
 801be82:	e7e5      	b.n	801be50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801be84:	680c      	ldr	r4, [r1, #0]
 801be86:	b10c      	cbz	r4, 801be8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801be88:	7824      	ldrb	r4, [r4, #0]
 801be8a:	e7db      	b.n	801be44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801be8c:	2400      	movs	r4, #0
 801be8e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801be92:	2b09      	cmp	r3, #9
 801be94:	d901      	bls.n	801be9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801be96:	2c2a      	cmp	r4, #42	; 0x2a
 801be98:	d122      	bne.n	801bee0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801be9a:	2301      	movs	r3, #1
 801be9c:	2c30      	cmp	r4, #48	; 0x30
 801be9e:	f88e 3000 	strb.w	r3, [lr]
 801bea2:	d10d      	bne.n	801bec0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801bea4:	f88c 3000 	strb.w	r3, [ip]
 801bea8:	6803      	ldr	r3, [r0, #0]
 801beaa:	b10b      	cbz	r3, 801beb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801beac:	3302      	adds	r3, #2
 801beae:	6003      	str	r3, [r0, #0]
 801beb0:	680b      	ldr	r3, [r1, #0]
 801beb2:	b10b      	cbz	r3, 801beb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801beb4:	3301      	adds	r3, #1
 801beb6:	600b      	str	r3, [r1, #0]
 801beb8:	6803      	ldr	r3, [r0, #0]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d02f      	beq.n	801bf1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801bebe:	881c      	ldrh	r4, [r3, #0]
 801bec0:	2c2a      	cmp	r4, #42	; 0x2a
 801bec2:	d135      	bne.n	801bf30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801bec4:	f04f 33ff 	mov.w	r3, #4294967295
 801bec8:	6033      	str	r3, [r6, #0]
 801beca:	6803      	ldr	r3, [r0, #0]
 801becc:	b10b      	cbz	r3, 801bed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801bece:	3302      	adds	r3, #2
 801bed0:	6003      	str	r3, [r0, #0]
 801bed2:	680b      	ldr	r3, [r1, #0]
 801bed4:	b10b      	cbz	r3, 801beda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801bed6:	3301      	adds	r3, #1
 801bed8:	600b      	str	r3, [r1, #0]
 801beda:	6803      	ldr	r3, [r0, #0]
 801bedc:	b31b      	cbz	r3, 801bf26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801bede:	881c      	ldrh	r4, [r3, #0]
 801bee0:	2c2e      	cmp	r4, #46	; 0x2e
 801bee2:	d11a      	bne.n	801bf1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801bee4:	2301      	movs	r3, #1
 801bee6:	703b      	strb	r3, [r7, #0]
 801bee8:	6803      	ldr	r3, [r0, #0]
 801beea:	b10b      	cbz	r3, 801bef0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801beec:	3302      	adds	r3, #2
 801beee:	6003      	str	r3, [r0, #0]
 801bef0:	680b      	ldr	r3, [r1, #0]
 801bef2:	b10b      	cbz	r3, 801bef8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801bef4:	3301      	adds	r3, #1
 801bef6:	600b      	str	r3, [r1, #0]
 801bef8:	6803      	ldr	r3, [r0, #0]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d036      	beq.n	801bf6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801befe:	881b      	ldrh	r3, [r3, #0]
 801bf00:	2b2a      	cmp	r3, #42	; 0x2a
 801bf02:	d137      	bne.n	801bf74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801bf04:	f04f 33ff 	mov.w	r3, #4294967295
 801bf08:	602b      	str	r3, [r5, #0]
 801bf0a:	6803      	ldr	r3, [r0, #0]
 801bf0c:	b10b      	cbz	r3, 801bf12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801bf0e:	3302      	adds	r3, #2
 801bf10:	6003      	str	r3, [r0, #0]
 801bf12:	680b      	ldr	r3, [r1, #0]
 801bf14:	b10b      	cbz	r3, 801bf1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801bf16:	3301      	adds	r3, #1
 801bf18:	600b      	str	r3, [r1, #0]
 801bf1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf1e:	680c      	ldr	r4, [r1, #0]
 801bf20:	b134      	cbz	r4, 801bf30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801bf22:	7824      	ldrb	r4, [r4, #0]
 801bf24:	e7cc      	b.n	801bec0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801bf26:	680b      	ldr	r3, [r1, #0]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d0f6      	beq.n	801bf1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801bf2c:	781c      	ldrb	r4, [r3, #0]
 801bf2e:	e7d7      	b.n	801bee0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801bf30:	2300      	movs	r3, #0
 801bf32:	220a      	movs	r2, #10
 801bf34:	6033      	str	r3, [r6, #0]
 801bf36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bf3a:	fa1f f38c 	uxth.w	r3, ip
 801bf3e:	2b09      	cmp	r3, #9
 801bf40:	d8ce      	bhi.n	801bee0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801bf42:	6833      	ldr	r3, [r6, #0]
 801bf44:	fb02 c303 	mla	r3, r2, r3, ip
 801bf48:	6033      	str	r3, [r6, #0]
 801bf4a:	6803      	ldr	r3, [r0, #0]
 801bf4c:	b10b      	cbz	r3, 801bf52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801bf4e:	3302      	adds	r3, #2
 801bf50:	6003      	str	r3, [r0, #0]
 801bf52:	680b      	ldr	r3, [r1, #0]
 801bf54:	b10b      	cbz	r3, 801bf5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801bf56:	3301      	adds	r3, #1
 801bf58:	600b      	str	r3, [r1, #0]
 801bf5a:	6803      	ldr	r3, [r0, #0]
 801bf5c:	b10b      	cbz	r3, 801bf62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801bf5e:	881c      	ldrh	r4, [r3, #0]
 801bf60:	e7e9      	b.n	801bf36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801bf62:	680c      	ldr	r4, [r1, #0]
 801bf64:	2c00      	cmp	r4, #0
 801bf66:	d0e6      	beq.n	801bf36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801bf68:	7824      	ldrb	r4, [r4, #0]
 801bf6a:	e7e4      	b.n	801bf36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801bf6c:	680b      	ldr	r3, [r1, #0]
 801bf6e:	b10b      	cbz	r3, 801bf74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801bf70:	781b      	ldrb	r3, [r3, #0]
 801bf72:	e7c5      	b.n	801bf00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801bf74:	2200      	movs	r2, #0
 801bf76:	240a      	movs	r4, #10
 801bf78:	602a      	str	r2, [r5, #0]
 801bf7a:	3b30      	subs	r3, #48	; 0x30
 801bf7c:	682a      	ldr	r2, [r5, #0]
 801bf7e:	b29e      	uxth	r6, r3
 801bf80:	2e09      	cmp	r6, #9
 801bf82:	d813      	bhi.n	801bfac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801bf84:	fb04 3302 	mla	r3, r4, r2, r3
 801bf88:	602b      	str	r3, [r5, #0]
 801bf8a:	6803      	ldr	r3, [r0, #0]
 801bf8c:	b10b      	cbz	r3, 801bf92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801bf8e:	3302      	adds	r3, #2
 801bf90:	6003      	str	r3, [r0, #0]
 801bf92:	680b      	ldr	r3, [r1, #0]
 801bf94:	b10b      	cbz	r3, 801bf9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801bf96:	3301      	adds	r3, #1
 801bf98:	600b      	str	r3, [r1, #0]
 801bf9a:	6803      	ldr	r3, [r0, #0]
 801bf9c:	b10b      	cbz	r3, 801bfa2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801bf9e:	881b      	ldrh	r3, [r3, #0]
 801bfa0:	e7eb      	b.n	801bf7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bfa2:	680b      	ldr	r3, [r1, #0]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d0e8      	beq.n	801bf7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bfa8:	781b      	ldrb	r3, [r3, #0]
 801bfaa:	e7e6      	b.n	801bf7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bfac:	2a06      	cmp	r2, #6
 801bfae:	bfa8      	it	ge
 801bfb0:	2206      	movge	r2, #6
 801bfb2:	602a      	str	r2, [r5, #0]
 801bfb4:	e7b1      	b.n	801bf1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801bfb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801bfb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfba:	b0a3      	sub	sp, #140	; 0x8c
 801bfbc:	2600      	movs	r6, #0
 801bfbe:	4607      	mov	r7, r0
 801bfc0:	4688      	mov	r8, r1
 801bfc2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801bfc6:	4631      	mov	r1, r6
 801bfc8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801bfca:	4648      	mov	r0, r9
 801bfcc:	960d      	str	r6, [sp, #52]	; 0x34
 801bfce:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801bfd2:	2242      	movs	r2, #66	; 0x42
 801bfd4:	f00a faf8 	bl	80265c8 <memset>
 801bfd8:	b15f      	cbz	r7, 801bff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801bfda:	f108 3aff 	add.w	sl, r8, #4294967295
 801bfde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bfe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfe2:	b152      	cbz	r2, 801bffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801bfe4:	8812      	ldrh	r2, [r2, #0]
 801bfe6:	b10a      	cbz	r2, 801bfec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801bfe8:	459a      	cmp	sl, r3
 801bfea:	dc2e      	bgt.n	801c04a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801bfec:	2200      	movs	r2, #0
 801bfee:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801bff2:	4638      	mov	r0, r7
 801bff4:	b023      	add	sp, #140	; 0x8c
 801bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bffa:	9a08      	ldr	r2, [sp, #32]
 801bffc:	2a00      	cmp	r2, #0
 801bffe:	d0f5      	beq.n	801bfec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c000:	7812      	ldrb	r2, [r2, #0]
 801c002:	e7f0      	b.n	801bfe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801c004:	2d00      	cmp	r5, #0
 801c006:	d0ea      	beq.n	801bfde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c008:	782a      	ldrb	r2, [r5, #0]
 801c00a:	b142      	cbz	r2, 801c01e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801c00c:	2a25      	cmp	r2, #37	; 0x25
 801c00e:	d001      	beq.n	801c014 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801c010:	459a      	cmp	sl, r3
 801c012:	dc08      	bgt.n	801c026 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801c014:	f1bb 0f00 	cmp.w	fp, #0
 801c018:	d121      	bne.n	801c05e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801c01a:	2d00      	cmp	r5, #0
 801c01c:	d0df      	beq.n	801bfde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c01e:	782a      	ldrb	r2, [r5, #0]
 801c020:	f04f 0b00 	mov.w	fp, #0
 801c024:	e01d      	b.n	801c062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801c026:	f1bb 0f00 	cmp.w	fp, #0
 801c02a:	d077      	beq.n	801c11c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801c02c:	f8bb 2000 	ldrh.w	r2, [fp]
 801c030:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c034:	f1bb 0f00 	cmp.w	fp, #0
 801c038:	d002      	beq.n	801c040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801c03a:	f10b 0202 	add.w	r2, fp, #2
 801c03e:	9209      	str	r2, [sp, #36]	; 0x24
 801c040:	b10d      	cbz	r5, 801c046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801c042:	3501      	adds	r5, #1
 801c044:	9508      	str	r5, [sp, #32]
 801c046:	3301      	adds	r3, #1
 801c048:	930d      	str	r3, [sp, #52]	; 0x34
 801c04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c04c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801c050:	f1bb 0f00 	cmp.w	fp, #0
 801c054:	d0d6      	beq.n	801c004 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801c056:	f8bb 2000 	ldrh.w	r2, [fp]
 801c05a:	2a00      	cmp	r2, #0
 801c05c:	d1d6      	bne.n	801c00c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801c05e:	f8bb 2000 	ldrh.w	r2, [fp]
 801c062:	2a00      	cmp	r2, #0
 801c064:	d0bb      	beq.n	801bfde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c066:	459a      	cmp	sl, r3
 801c068:	ddb9      	ble.n	801bfde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c06a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801c06e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801c072:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801c076:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801c07a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801c07e:	960e      	str	r6, [sp, #56]	; 0x38
 801c080:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801c084:	960f      	str	r6, [sp, #60]	; 0x3c
 801c086:	f1bb 0f00 	cmp.w	fp, #0
 801c08a:	d002      	beq.n	801c092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801c08c:	f10b 0302 	add.w	r3, fp, #2
 801c090:	9309      	str	r3, [sp, #36]	; 0x24
 801c092:	b10d      	cbz	r5, 801c098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801c094:	1c6b      	adds	r3, r5, #1
 801c096:	9308      	str	r3, [sp, #32]
 801c098:	ab0f      	add	r3, sp, #60	; 0x3c
 801c09a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801c09e:	a908      	add	r1, sp, #32
 801c0a0:	a809      	add	r0, sp, #36	; 0x24
 801c0a2:	9305      	str	r3, [sp, #20]
 801c0a4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c0a8:	9304      	str	r3, [sp, #16]
 801c0aa:	ab0e      	add	r3, sp, #56	; 0x38
 801c0ac:	9303      	str	r3, [sp, #12]
 801c0ae:	ab0c      	add	r3, sp, #48	; 0x30
 801c0b0:	9302      	str	r3, [sp, #8]
 801c0b2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c0b6:	9301      	str	r3, [sp, #4]
 801c0b8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c0bc:	9300      	str	r3, [sp, #0]
 801c0be:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801c0c2:	f7ff fea8 	bl	801be16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801c0c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	bfbf      	itttt	lt
 801c0cc:	6823      	ldrlt	r3, [r4, #0]
 801c0ce:	3404      	addlt	r4, #4
 801c0d0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c0d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c0d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	bfbe      	ittt	lt
 801c0dc:	6823      	ldrlt	r3, [r4, #0]
 801c0de:	3404      	addlt	r4, #4
 801c0e0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c0e4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c0e8:	bfb8      	it	lt
 801c0ea:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c0ec:	b1d9      	cbz	r1, 801c126 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801c0ee:	880b      	ldrh	r3, [r1, #0]
 801c0f0:	2b69      	cmp	r3, #105	; 0x69
 801c0f2:	d01f      	beq.n	801c134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c0f4:	d82f      	bhi.n	801c156 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801c0f6:	2b58      	cmp	r3, #88	; 0x58
 801c0f8:	d01c      	beq.n	801c134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c0fa:	d818      	bhi.n	801c12e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801c0fc:	2b25      	cmp	r3, #37	; 0x25
 801c0fe:	d034      	beq.n	801c16a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801c100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c102:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801c106:	f1bb 0f00 	cmp.w	fp, #0
 801c10a:	f000 80b7 	beq.w	801c27c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801c10e:	f8bb 5000 	ldrh.w	r5, [fp]
 801c112:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801c116:	3301      	adds	r3, #1
 801c118:	930d      	str	r3, [sp, #52]	; 0x34
 801c11a:	e029      	b.n	801c170 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c11c:	b10d      	cbz	r5, 801c122 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801c11e:	782a      	ldrb	r2, [r5, #0]
 801c120:	e786      	b.n	801c030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c122:	462a      	mov	r2, r5
 801c124:	e784      	b.n	801c030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c126:	2a00      	cmp	r2, #0
 801c128:	d0ea      	beq.n	801c100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c12a:	7813      	ldrb	r3, [r2, #0]
 801c12c:	e7e0      	b.n	801c0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801c12e:	3b63      	subs	r3, #99	; 0x63
 801c130:	2b01      	cmp	r3, #1
 801c132:	d8e5      	bhi.n	801c100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c134:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801c138:	b329      	cbz	r1, 801c186 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801c13a:	880b      	ldrh	r3, [r1, #0]
 801c13c:	2b69      	cmp	r3, #105	; 0x69
 801c13e:	d063      	beq.n	801c208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c140:	d825      	bhi.n	801c18e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801c142:	2b63      	cmp	r3, #99	; 0x63
 801c144:	d038      	beq.n	801c1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801c146:	2b64      	cmp	r3, #100	; 0x64
 801c148:	d05e      	beq.n	801c208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c14a:	2b58      	cmp	r3, #88	; 0x58
 801c14c:	d07a      	beq.n	801c244 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801c14e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801c152:	4625      	mov	r5, r4
 801c154:	e036      	b.n	801c1c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c156:	2b73      	cmp	r3, #115	; 0x73
 801c158:	d0ec      	beq.n	801c134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c15a:	d802      	bhi.n	801c162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801c15c:	2b6f      	cmp	r3, #111	; 0x6f
 801c15e:	d1cf      	bne.n	801c100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c160:	e7e8      	b.n	801c134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c162:	2b75      	cmp	r3, #117	; 0x75
 801c164:	d0e6      	beq.n	801c134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c166:	2b78      	cmp	r3, #120	; 0x78
 801c168:	e7f9      	b.n	801c15e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801c16a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c16c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801c170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c172:	b10b      	cbz	r3, 801c178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801c174:	3302      	adds	r3, #2
 801c176:	9309      	str	r3, [sp, #36]	; 0x24
 801c178:	9b08      	ldr	r3, [sp, #32]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	f43f af2f 	beq.w	801bfde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c180:	3301      	adds	r3, #1
 801c182:	9308      	str	r3, [sp, #32]
 801c184:	e72b      	b.n	801bfde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c186:	2a00      	cmp	r2, #0
 801c188:	d0e1      	beq.n	801c14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c18a:	7813      	ldrb	r3, [r2, #0]
 801c18c:	e7d6      	b.n	801c13c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801c18e:	2b73      	cmp	r3, #115	; 0x73
 801c190:	d036      	beq.n	801c200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801c192:	d807      	bhi.n	801c1a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801c194:	2b6f      	cmp	r3, #111	; 0x6f
 801c196:	d1da      	bne.n	801c14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c19a:	1d25      	adds	r5, r4, #4
 801c19c:	2308      	movs	r3, #8
 801c19e:	eba8 0202 	sub.w	r2, r8, r2
 801c1a2:	e049      	b.n	801c238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c1a4:	2b75      	cmp	r3, #117	; 0x75
 801c1a6:	d042      	beq.n	801c22e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801c1a8:	2b78      	cmp	r3, #120	; 0x78
 801c1aa:	d1d0      	bne.n	801c14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c1ae:	1d25      	adds	r5, r4, #4
 801c1b0:	2310      	movs	r3, #16
 801c1b2:	eba8 0202 	sub.w	r2, r8, r2
 801c1b6:	e03f      	b.n	801c238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c1b8:	7823      	ldrb	r3, [r4, #0]
 801c1ba:	1d25      	adds	r5, r4, #4
 801c1bc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801c1c0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1c6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d051      	beq.n	801c272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801c1ce:	881a      	ldrh	r2, [r3, #0]
 801c1d0:	a80d      	add	r0, sp, #52	; 0x34
 801c1d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c1d6:	462c      	mov	r4, r5
 801c1d8:	9005      	str	r0, [sp, #20]
 801c1da:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801c1de:	9004      	str	r0, [sp, #16]
 801c1e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c1e2:	9003      	str	r0, [sp, #12]
 801c1e4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801c1e8:	9002      	str	r0, [sp, #8]
 801c1ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c1ec:	9001      	str	r0, [sp, #4]
 801c1ee:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801c1f2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801c1f6:	9000      	str	r0, [sp, #0]
 801c1f8:	a810      	add	r0, sp, #64	; 0x40
 801c1fa:	f7ff fd49 	bl	801bc90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801c1fe:	e7b7      	b.n	801c170 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c200:	1d25      	adds	r5, r4, #4
 801c202:	6823      	ldr	r3, [r4, #0]
 801c204:	9310      	str	r3, [sp, #64]	; 0x40
 801c206:	e7dd      	b.n	801c1c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c20a:	230a      	movs	r3, #10
 801c20c:	4649      	mov	r1, r9
 801c20e:	6820      	ldr	r0, [r4, #0]
 801c210:	eba8 0202 	sub.w	r2, r8, r2
 801c214:	1d25      	adds	r5, r4, #4
 801c216:	b292      	uxth	r2, r2
 801c218:	f7ff fd08 	bl	801bc2c <_ZN8touchgfx7Unicode4itoaElPtti>
 801c21c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c220:	2b2d      	cmp	r3, #45	; 0x2d
 801c222:	d1cf      	bne.n	801c1c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c224:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c22a:	3302      	adds	r3, #2
 801c22c:	e7ea      	b.n	801c204 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801c22e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c230:	1d25      	adds	r5, r4, #4
 801c232:	230a      	movs	r3, #10
 801c234:	eba8 0202 	sub.w	r2, r8, r2
 801c238:	b292      	uxth	r2, r2
 801c23a:	4649      	mov	r1, r9
 801c23c:	6820      	ldr	r0, [r4, #0]
 801c23e:	f7ff fcd7 	bl	801bbf0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801c242:	e7bf      	b.n	801c1c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c246:	2310      	movs	r3, #16
 801c248:	4649      	mov	r1, r9
 801c24a:	6820      	ldr	r0, [r4, #0]
 801c24c:	eba8 0202 	sub.w	r2, r8, r2
 801c250:	1d25      	adds	r5, r4, #4
 801c252:	b292      	uxth	r2, r2
 801c254:	f7ff fccc 	bl	801bbf0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801c258:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801c25c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c260:	2b00      	cmp	r3, #0
 801c262:	d0af      	beq.n	801c1c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c264:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801c268:	2919      	cmp	r1, #25
 801c26a:	d8f7      	bhi.n	801c25c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c26c:	3b20      	subs	r3, #32
 801c26e:	8013      	strh	r3, [r2, #0]
 801c270:	e7f4      	b.n	801c25c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c272:	9a08      	ldr	r2, [sp, #32]
 801c274:	2a00      	cmp	r2, #0
 801c276:	d0ab      	beq.n	801c1d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c278:	7812      	ldrb	r2, [r2, #0]
 801c27a:	e7a9      	b.n	801c1d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c27c:	2d00      	cmp	r5, #0
 801c27e:	f43f af48 	beq.w	801c112 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801c282:	782d      	ldrb	r5, [r5, #0]
 801c284:	e745      	b.n	801c112 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801c286 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c286:	b507      	push	{r0, r1, r2, lr}
 801c288:	9300      	str	r3, [sp, #0]
 801c28a:	4613      	mov	r3, r2
 801c28c:	2200      	movs	r2, #0
 801c28e:	f7ff fe92 	bl	801bfb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801c292:	b003      	add	sp, #12
 801c294:	f85d fb04 	ldr.w	pc, [sp], #4

0801c298 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c298:	b40c      	push	{r2, r3}
 801c29a:	b507      	push	{r0, r1, r2, lr}
 801c29c:	ab04      	add	r3, sp, #16
 801c29e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2a2:	9301      	str	r3, [sp, #4]
 801c2a4:	f7ff ffef 	bl	801c286 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c2a8:	b003      	add	sp, #12
 801c2aa:	f85d eb04 	ldr.w	lr, [sp], #4
 801c2ae:	b002      	add	sp, #8
 801c2b0:	4770      	bx	lr
	...

0801c2b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c2b4:	4b01      	ldr	r3, [pc, #4]	; (801c2bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c2b6:	6018      	str	r0, [r3, #0]
 801c2b8:	4770      	bx	lr
 801c2ba:	bf00      	nop
 801c2bc:	200567d0 	.word	0x200567d0

0801c2c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c2c0:	4b06      	ldr	r3, [pc, #24]	; (801c2dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c2c2:	881a      	ldrh	r2, [r3, #0]
 801c2c4:	4282      	cmp	r2, r0
 801c2c6:	d807      	bhi.n	801c2d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c2c8:	4b05      	ldr	r3, [pc, #20]	; (801c2e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c2ca:	881b      	ldrh	r3, [r3, #0]
 801c2cc:	4413      	add	r3, r2
 801c2ce:	4298      	cmp	r0, r3
 801c2d0:	bfac      	ite	ge
 801c2d2:	2000      	movge	r0, #0
 801c2d4:	2001      	movlt	r0, #1
 801c2d6:	4770      	bx	lr
 801c2d8:	2000      	movs	r0, #0
 801c2da:	4770      	bx	lr
 801c2dc:	200567f0 	.word	0x200567f0
 801c2e0:	200567f4 	.word	0x200567f4

0801c2e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c2e4:	b508      	push	{r3, lr}
 801c2e6:	4601      	mov	r1, r0
 801c2e8:	f7ff ffea 	bl	801c2c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c2ec:	b118      	cbz	r0, 801c2f6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c2ee:	4b02      	ldr	r3, [pc, #8]	; (801c2f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c2f6:	bd08      	pop	{r3, pc}
 801c2f8:	200567d4 	.word	0x200567d4

0801c2fc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c300:	4d28      	ldr	r5, [pc, #160]	; (801c3a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c302:	682b      	ldr	r3, [r5, #0]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d04a      	beq.n	801c39e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c308:	4a27      	ldr	r2, [pc, #156]	; (801c3a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c30a:	4e28      	ldr	r6, [pc, #160]	; (801c3ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c30c:	8810      	ldrh	r0, [r2, #0]
 801c30e:	f8b6 8000 	ldrh.w	r8, [r6]
 801c312:	4c27      	ldr	r4, [pc, #156]	; (801c3b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c314:	4440      	add	r0, r8
 801c316:	4f27      	ldr	r7, [pc, #156]	; (801c3b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c318:	1c41      	adds	r1, r0, #1
 801c31a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801c31e:	f021 0101 	bic.w	r1, r1, #1
 801c322:	eb03 020e 	add.w	r2, r3, lr
 801c326:	0409      	lsls	r1, r1, #16
 801c328:	6022      	str	r2, [r4, #0]
 801c32a:	0c09      	lsrs	r1, r1, #16
 801c32c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801c330:	eb0e 010c 	add.w	r1, lr, ip
 801c334:	185a      	adds	r2, r3, r1
 801c336:	603a      	str	r2, [r7, #0]
 801c338:	220e      	movs	r2, #14
 801c33a:	fb02 f208 	mul.w	r2, r2, r8
 801c33e:	3203      	adds	r2, #3
 801c340:	f022 0203 	bic.w	r2, r2, #3
 801c344:	4411      	add	r1, r2
 801c346:	440b      	add	r3, r1
 801c348:	491b      	ldr	r1, [pc, #108]	; (801c3b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c34a:	600b      	str	r3, [r1, #0]
 801c34c:	2300      	movs	r3, #0
 801c34e:	491b      	ldr	r1, [pc, #108]	; (801c3bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801c350:	800b      	strh	r3, [r1, #0]
 801c352:	491b      	ldr	r1, [pc, #108]	; (801c3c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801c354:	6809      	ldr	r1, [r1, #0]
 801c356:	eba1 010e 	sub.w	r1, r1, lr
 801c35a:	eba1 010c 	sub.w	r1, r1, ip
 801c35e:	469c      	mov	ip, r3
 801c360:	1a8a      	subs	r2, r1, r2
 801c362:	4918      	ldr	r1, [pc, #96]	; (801c3c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801c364:	600a      	str	r2, [r1, #0]
 801c366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c36a:	4a17      	ldr	r2, [pc, #92]	; (801c3c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801c36c:	8013      	strh	r3, [r2, #0]
 801c36e:	4283      	cmp	r3, r0
 801c370:	d10d      	bne.n	801c38e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c372:	8835      	ldrh	r5, [r6, #0]
 801c374:	2300      	movs	r3, #0
 801c376:	6838      	ldr	r0, [r7, #0]
 801c378:	240e      	movs	r4, #14
 801c37a:	429d      	cmp	r5, r3
 801c37c:	d90f      	bls.n	801c39e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c37e:	fb04 0203 	mla	r2, r4, r3, r0
 801c382:	3301      	adds	r3, #1
 801c384:	7b11      	ldrb	r1, [r2, #12]
 801c386:	f36f 1145 	bfc	r1, #5, #1
 801c38a:	7311      	strb	r1, [r2, #12]
 801c38c:	e7f5      	b.n	801c37a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801c38e:	682a      	ldr	r2, [r5, #0]
 801c390:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c394:	6822      	ldr	r2, [r4, #0]
 801c396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c39a:	3301      	adds	r3, #1
 801c39c:	e7e7      	b.n	801c36e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801c39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3a2:	bf00      	nop
 801c3a4:	200567d4 	.word	0x200567d4
 801c3a8:	200567f0 	.word	0x200567f0
 801c3ac:	200567f4 	.word	0x200567f4
 801c3b0:	200567e8 	.word	0x200567e8
 801c3b4:	200567d8 	.word	0x200567d8
 801c3b8:	200567e0 	.word	0x200567e0
 801c3bc:	200567f2 	.word	0x200567f2
 801c3c0:	200567dc 	.word	0x200567dc
 801c3c4:	200567ec 	.word	0x200567ec
 801c3c8:	200567e4 	.word	0x200567e4

0801c3cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c3cc:	4b10      	ldr	r3, [pc, #64]	; (801c410 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c3ce:	b510      	push	{r4, lr}
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	b9db      	cbnz	r3, 801c40c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c3d4:	b1d1      	cbz	r1, 801c40c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c3d6:	4b0f      	ldr	r3, [pc, #60]	; (801c414 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c3d8:	240e      	movs	r4, #14
 801c3da:	801a      	strh	r2, [r3, #0]
 801c3dc:	b292      	uxth	r2, r2
 801c3de:	4b0e      	ldr	r3, [pc, #56]	; (801c418 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c3e0:	881b      	ldrh	r3, [r3, #0]
 801c3e2:	4413      	add	r3, r2
 801c3e4:	4362      	muls	r2, r4
 801c3e6:	2406      	movs	r4, #6
 801c3e8:	fb04 2203 	mla	r2, r4, r3, r2
 801c3ec:	428a      	cmp	r2, r1
 801c3ee:	d305      	bcc.n	801c3fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801c3f0:	4b0a      	ldr	r3, [pc, #40]	; (801c41c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c3f2:	2135      	movs	r1, #53	; 0x35
 801c3f4:	4a0a      	ldr	r2, [pc, #40]	; (801c420 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c3f6:	480b      	ldr	r0, [pc, #44]	; (801c424 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c3f8:	f00a f85a 	bl	80264b0 <__assert_func>
 801c3fc:	4b0a      	ldr	r3, [pc, #40]	; (801c428 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c3fe:	6019      	str	r1, [r3, #0]
 801c400:	4b0a      	ldr	r3, [pc, #40]	; (801c42c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801c402:	6018      	str	r0, [r3, #0]
 801c404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c408:	f7ff bf78 	b.w	801c2fc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c40c:	bd10      	pop	{r4, pc}
 801c40e:	bf00      	nop
 801c410:	200567e0 	.word	0x200567e0
 801c414:	200567f4 	.word	0x200567f4
 801c418:	200567f0 	.word	0x200567f0
 801c41c:	0802e081 	.word	0x0802e081
 801c420:	0802e116 	.word	0x0802e116
 801c424:	0802e05c 	.word	0x0802e05c
 801c428:	200567dc 	.word	0x200567dc
 801c42c:	200567d4 	.word	0x200567d4

0801c430 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c430:	b470      	push	{r4, r5, r6}
 801c432:	4c07      	ldr	r4, [pc, #28]	; (801c450 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c434:	4605      	mov	r5, r0
 801c436:	4610      	mov	r0, r2
 801c438:	9a03      	ldr	r2, [sp, #12]
 801c43a:	6826      	ldr	r6, [r4, #0]
 801c43c:	b936      	cbnz	r6, 801c44c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c43e:	6025      	str	r5, [r4, #0]
 801c440:	4c04      	ldr	r4, [pc, #16]	; (801c454 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c442:	8021      	strh	r1, [r4, #0]
 801c444:	4619      	mov	r1, r3
 801c446:	bc70      	pop	{r4, r5, r6}
 801c448:	f7ff bfc0 	b.w	801c3cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c44c:	bc70      	pop	{r4, r5, r6}
 801c44e:	4770      	bx	lr
 801c450:	200567f8 	.word	0x200567f8
 801c454:	200567f0 	.word	0x200567f0

0801c458 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c458:	b508      	push	{r3, lr}
 801c45a:	4b14      	ldr	r3, [pc, #80]	; (801c4ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c45c:	6819      	ldr	r1, [r3, #0]
 801c45e:	b931      	cbnz	r1, 801c46e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c460:	4b13      	ldr	r3, [pc, #76]	; (801c4b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c462:	f240 4186 	movw	r1, #1158	; 0x486
 801c466:	4a13      	ldr	r2, [pc, #76]	; (801c4b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c468:	4813      	ldr	r0, [pc, #76]	; (801c4b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c46a:	f00a f821 	bl	80264b0 <__assert_func>
 801c46e:	4a13      	ldr	r2, [pc, #76]	; (801c4bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c470:	8803      	ldrh	r3, [r0, #0]
 801c472:	8812      	ldrh	r2, [r2, #0]
 801c474:	4293      	cmp	r3, r2
 801c476:	d204      	bcs.n	801c482 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c478:	2214      	movs	r2, #20
 801c47a:	fb02 1303 	mla	r3, r2, r3, r1
 801c47e:	8918      	ldrh	r0, [r3, #8]
 801c480:	bd08      	pop	{r3, pc}
 801c482:	490f      	ldr	r1, [pc, #60]	; (801c4c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c484:	8809      	ldrh	r1, [r1, #0]
 801c486:	4411      	add	r1, r2
 801c488:	428b      	cmp	r3, r1
 801c48a:	da06      	bge.n	801c49a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801c48c:	1a9b      	subs	r3, r3, r2
 801c48e:	4a0d      	ldr	r2, [pc, #52]	; (801c4c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c490:	210e      	movs	r1, #14
 801c492:	6812      	ldr	r2, [r2, #0]
 801c494:	fb01 2303 	mla	r3, r1, r3, r2
 801c498:	e7f1      	b.n	801c47e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c49a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c49e:	4293      	cmp	r3, r2
 801c4a0:	bf0a      	itet	eq
 801c4a2:	4b09      	ldreq	r3, [pc, #36]	; (801c4c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801c4a4:	2000      	movne	r0, #0
 801c4a6:	8818      	ldrheq	r0, [r3, #0]
 801c4a8:	e7ea      	b.n	801c480 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801c4aa:	bf00      	nop
 801c4ac:	200567f8 	.word	0x200567f8
 801c4b0:	0802e0da 	.word	0x0802e0da
 801c4b4:	0802e18d 	.word	0x0802e18d
 801c4b8:	0802e05c 	.word	0x0802e05c
 801c4bc:	200567f0 	.word	0x200567f0
 801c4c0:	200567f4 	.word	0x200567f4
 801c4c4:	200567d8 	.word	0x200567d8
 801c4c8:	20056744 	.word	0x20056744

0801c4cc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c4cc:	b508      	push	{r3, lr}
 801c4ce:	4b14      	ldr	r3, [pc, #80]	; (801c520 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c4d0:	6819      	ldr	r1, [r3, #0]
 801c4d2:	b931      	cbnz	r1, 801c4e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c4d4:	4b13      	ldr	r3, [pc, #76]	; (801c524 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c4d6:	f240 419a 	movw	r1, #1178	; 0x49a
 801c4da:	4a13      	ldr	r2, [pc, #76]	; (801c528 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c4dc:	4813      	ldr	r0, [pc, #76]	; (801c52c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c4de:	f009 ffe7 	bl	80264b0 <__assert_func>
 801c4e2:	4a13      	ldr	r2, [pc, #76]	; (801c530 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c4e4:	8803      	ldrh	r3, [r0, #0]
 801c4e6:	8812      	ldrh	r2, [r2, #0]
 801c4e8:	4293      	cmp	r3, r2
 801c4ea:	d204      	bcs.n	801c4f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c4ec:	2214      	movs	r2, #20
 801c4ee:	fb02 1303 	mla	r3, r2, r3, r1
 801c4f2:	8958      	ldrh	r0, [r3, #10]
 801c4f4:	bd08      	pop	{r3, pc}
 801c4f6:	490f      	ldr	r1, [pc, #60]	; (801c534 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801c4f8:	8809      	ldrh	r1, [r1, #0]
 801c4fa:	4411      	add	r1, r2
 801c4fc:	428b      	cmp	r3, r1
 801c4fe:	da06      	bge.n	801c50e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801c500:	1a9b      	subs	r3, r3, r2
 801c502:	4a0d      	ldr	r2, [pc, #52]	; (801c538 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801c504:	210e      	movs	r1, #14
 801c506:	6812      	ldr	r2, [r2, #0]
 801c508:	fb01 2303 	mla	r3, r1, r3, r2
 801c50c:	e7f1      	b.n	801c4f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801c50e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c512:	4293      	cmp	r3, r2
 801c514:	bf0a      	itet	eq
 801c516:	4b09      	ldreq	r3, [pc, #36]	; (801c53c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801c518:	2000      	movne	r0, #0
 801c51a:	8818      	ldrheq	r0, [r3, #0]
 801c51c:	e7ea      	b.n	801c4f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801c51e:	bf00      	nop
 801c520:	200567f8 	.word	0x200567f8
 801c524:	0802e0da 	.word	0x0802e0da
 801c528:	0802e1b9 	.word	0x0802e1b9
 801c52c:	0802e05c 	.word	0x0802e05c
 801c530:	200567f0 	.word	0x200567f0
 801c534:	200567f4 	.word	0x200567f4
 801c538:	200567d8 	.word	0x200567d8
 801c53c:	20056746 	.word	0x20056746

0801c540 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801c540:	b508      	push	{r3, lr}
 801c542:	4b12      	ldr	r3, [pc, #72]	; (801c58c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801c544:	6819      	ldr	r1, [r3, #0]
 801c546:	b931      	cbnz	r1, 801c556 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801c548:	4b11      	ldr	r3, [pc, #68]	; (801c590 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c54a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801c54e:	4a11      	ldr	r2, [pc, #68]	; (801c594 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801c550:	4811      	ldr	r0, [pc, #68]	; (801c598 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801c552:	f009 ffad 	bl	80264b0 <__assert_func>
 801c556:	8803      	ldrh	r3, [r0, #0]
 801c558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c55c:	4293      	cmp	r3, r2
 801c55e:	d012      	beq.n	801c586 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c560:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c564:	4293      	cmp	r3, r2
 801c566:	d103      	bne.n	801c570 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801c568:	4b0c      	ldr	r3, [pc, #48]	; (801c59c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801c56e:	bd08      	pop	{r3, pc}
 801c570:	4a0b      	ldr	r2, [pc, #44]	; (801c5a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801c572:	6812      	ldr	r2, [r2, #0]
 801c574:	b11a      	cbz	r2, 801c57e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801c576:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c57a:	2800      	cmp	r0, #0
 801c57c:	d1f7      	bne.n	801c56e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c57e:	2214      	movs	r2, #20
 801c580:	4353      	muls	r3, r2
 801c582:	58c8      	ldr	r0, [r1, r3]
 801c584:	e7f3      	b.n	801c56e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c586:	2000      	movs	r0, #0
 801c588:	e7f1      	b.n	801c56e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801c58a:	bf00      	nop
 801c58c:	200567f8 	.word	0x200567f8
 801c590:	0802e0da 	.word	0x0802e0da
 801c594:	0802e15c 	.word	0x0802e15c
 801c598:	0802e05c 	.word	0x0802e05c
 801c59c:	20056750 	.word	0x20056750
 801c5a0:	200567d4 	.word	0x200567d4

0801c5a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801c5a4:	8802      	ldrh	r2, [r0, #0]
 801c5a6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801c5aa:	429a      	cmp	r2, r3
 801c5ac:	d845      	bhi.n	801c63a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c5ae:	4b24      	ldr	r3, [pc, #144]	; (801c640 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c5b0:	8818      	ldrh	r0, [r3, #0]
 801c5b2:	4282      	cmp	r2, r0
 801c5b4:	d221      	bcs.n	801c5fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801c5b6:	4b23      	ldr	r3, [pc, #140]	; (801c644 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c5b8:	6819      	ldr	r1, [r3, #0]
 801c5ba:	2314      	movs	r3, #20
 801c5bc:	fb03 1302 	mla	r3, r3, r2, r1
 801c5c0:	6858      	ldr	r0, [r3, #4]
 801c5c2:	2800      	cmp	r0, #0
 801c5c4:	d03a      	beq.n	801c63c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c5c6:	4920      	ldr	r1, [pc, #128]	; (801c648 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c5c8:	6809      	ldr	r1, [r1, #0]
 801c5ca:	2900      	cmp	r1, #0
 801c5cc:	d036      	beq.n	801c63c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c5ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c5d2:	2900      	cmp	r1, #0
 801c5d4:	d032      	beq.n	801c63c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801c5d6:	891a      	ldrh	r2, [r3, #8]
 801c5d8:	8958      	ldrh	r0, [r3, #10]
 801c5da:	4350      	muls	r0, r2
 801c5dc:	7c5a      	ldrb	r2, [r3, #17]
 801c5de:	7cdb      	ldrb	r3, [r3, #19]
 801c5e0:	0952      	lsrs	r2, r2, #5
 801c5e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c5e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c5ea:	2b0b      	cmp	r3, #11
 801c5ec:	bf18      	it	ne
 801c5ee:	0040      	lslne	r0, r0, #1
 801c5f0:	3003      	adds	r0, #3
 801c5f2:	f020 0003 	bic.w	r0, r0, #3
 801c5f6:	4408      	add	r0, r1
 801c5f8:	4770      	bx	lr
 801c5fa:	4b14      	ldr	r3, [pc, #80]	; (801c64c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801c5fc:	881b      	ldrh	r3, [r3, #0]
 801c5fe:	4403      	add	r3, r0
 801c600:	429a      	cmp	r2, r3
 801c602:	da1a      	bge.n	801c63a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c604:	4b12      	ldr	r3, [pc, #72]	; (801c650 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801c606:	1a10      	subs	r0, r2, r0
 801c608:	210e      	movs	r1, #14
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	fb01 3000 	mla	r0, r1, r0, r3
 801c610:	7b03      	ldrb	r3, [r0, #12]
 801c612:	f003 031f 	and.w	r3, r3, #31
 801c616:	2b0b      	cmp	r3, #11
 801c618:	d10b      	bne.n	801c632 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c61a:	8903      	ldrh	r3, [r0, #8]
 801c61c:	8940      	ldrh	r0, [r0, #10]
 801c61e:	4358      	muls	r0, r3
 801c620:	4b09      	ldr	r3, [pc, #36]	; (801c648 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c622:	3003      	adds	r0, #3
 801c624:	6819      	ldr	r1, [r3, #0]
 801c626:	f020 0303 	bic.w	r3, r0, #3
 801c62a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c62e:	4418      	add	r0, r3
 801c630:	4770      	bx	lr
 801c632:	2b0d      	cmp	r3, #13
 801c634:	d101      	bne.n	801c63a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c636:	300d      	adds	r0, #13
 801c638:	4770      	bx	lr
 801c63a:	2000      	movs	r0, #0
 801c63c:	4770      	bx	lr
 801c63e:	bf00      	nop
 801c640:	200567f0 	.word	0x200567f0
 801c644:	200567f8 	.word	0x200567f8
 801c648:	200567d4 	.word	0x200567d4
 801c64c:	200567f4 	.word	0x200567f4
 801c650:	200567d8 	.word	0x200567d8

0801c654 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c654:	4b17      	ldr	r3, [pc, #92]	; (801c6b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c656:	b510      	push	{r4, lr}
 801c658:	6819      	ldr	r1, [r3, #0]
 801c65a:	8803      	ldrh	r3, [r0, #0]
 801c65c:	b1e9      	cbz	r1, 801c69a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c65e:	4a16      	ldr	r2, [pc, #88]	; (801c6b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c660:	8812      	ldrh	r2, [r2, #0]
 801c662:	429a      	cmp	r2, r3
 801c664:	d90a      	bls.n	801c67c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801c666:	2214      	movs	r2, #20
 801c668:	fb02 1303 	mla	r3, r2, r3, r1
 801c66c:	7c58      	ldrb	r0, [r3, #17]
 801c66e:	0942      	lsrs	r2, r0, #5
 801c670:	7cd8      	ldrb	r0, [r3, #19]
 801c672:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c676:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c67a:	bd10      	pop	{r4, pc}
 801c67c:	490f      	ldr	r1, [pc, #60]	; (801c6bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c67e:	8809      	ldrh	r1, [r1, #0]
 801c680:	4411      	add	r1, r2
 801c682:	428b      	cmp	r3, r1
 801c684:	da09      	bge.n	801c69a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c686:	1a9b      	subs	r3, r3, r2
 801c688:	4a0d      	ldr	r2, [pc, #52]	; (801c6c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c68a:	210e      	movs	r1, #14
 801c68c:	6812      	ldr	r2, [r2, #0]
 801c68e:	fb01 2303 	mla	r3, r1, r3, r2
 801c692:	7b18      	ldrb	r0, [r3, #12]
 801c694:	f000 001f 	and.w	r0, r0, #31
 801c698:	e7ef      	b.n	801c67a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c69a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c69e:	4293      	cmp	r3, r2
 801c6a0:	d106      	bne.n	801c6b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c6a2:	f7e9 fb8b 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 801c6a6:	6803      	ldr	r3, [r0, #0]
 801c6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6ae:	4718      	bx	r3
 801c6b0:	2000      	movs	r0, #0
 801c6b2:	e7e2      	b.n	801c67a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c6b4:	200567f8 	.word	0x200567f8
 801c6b8:	200567f0 	.word	0x200567f0
 801c6bc:	200567f4 	.word	0x200567f4
 801c6c0:	200567d8 	.word	0x200567d8

0801c6c4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c6c4:	2018      	movs	r0, #24
 801c6c6:	4770      	bx	lr

0801c6c8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c6c8:	2001      	movs	r0, #1
 801c6ca:	4770      	bx	lr

0801c6cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6d0:	b085      	sub	sp, #20
 801c6d2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c6d4:	9203      	str	r2, [sp, #12]
 801c6d6:	6870      	ldr	r0, [r6, #4]
 801c6d8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c6dc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c6e0:	9101      	str	r1, [sp, #4]
 801c6e2:	fa1f f885 	uxth.w	r8, r5
 801c6e6:	43ed      	mvns	r5, r5
 801c6e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c6ec:	b2ed      	uxtb	r5, r5
 801c6ee:	fb00 2404 	mla	r4, r0, r4, r2
 801c6f2:	6832      	ldr	r2, [r6, #0]
 801c6f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c6f8:	4414      	add	r4, r2
 801c6fa:	f8dc 2000 	ldr.w	r2, [ip]
 801c6fe:	9202      	str	r2, [sp, #8]
 801c700:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c704:	f102 0e04 	add.w	lr, r2, #4
 801c708:	9a01      	ldr	r2, [sp, #4]
 801c70a:	2a00      	cmp	r2, #0
 801c70c:	dc03      	bgt.n	801c716 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c70e:	9a03      	ldr	r2, [sp, #12]
 801c710:	2a00      	cmp	r2, #0
 801c712:	f340 8116 	ble.w	801c942 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c718:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c71c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c722:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c726:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	dd0e      	ble.n	801c74c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c72e:	1406      	asrs	r6, r0, #16
 801c730:	d405      	bmi.n	801c73e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c732:	4556      	cmp	r6, sl
 801c734:	da03      	bge.n	801c73e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c736:	1416      	asrs	r6, r2, #16
 801c738:	d401      	bmi.n	801c73e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c73a:	454e      	cmp	r6, r9
 801c73c:	db07      	blt.n	801c74e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c73e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c740:	3b01      	subs	r3, #1
 801c742:	3403      	adds	r4, #3
 801c744:	4430      	add	r0, r6
 801c746:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c748:	4432      	add	r2, r6
 801c74a:	e7ee      	b.n	801c72a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c74c:	d063      	beq.n	801c816 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c74e:	1e5e      	subs	r6, r3, #1
 801c750:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c752:	fb07 0706 	mla	r7, r7, r6, r0
 801c756:	143f      	asrs	r7, r7, #16
 801c758:	d454      	bmi.n	801c804 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c75a:	4557      	cmp	r7, sl
 801c75c:	da52      	bge.n	801c804 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c75e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c760:	fb07 2606 	mla	r6, r7, r6, r2
 801c764:	1436      	asrs	r6, r6, #16
 801c766:	d44d      	bmi.n	801c804 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c768:	454e      	cmp	r6, r9
 801c76a:	da4b      	bge.n	801c804 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c76c:	1ce6      	adds	r6, r4, #3
 801c76e:	4699      	mov	r9, r3
 801c770:	f1b9 0f00 	cmp.w	r9, #0
 801c774:	f106 0603 	add.w	r6, r6, #3
 801c778:	dd48      	ble.n	801c80c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c77a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c77e:	1417      	asrs	r7, r2, #16
 801c780:	9902      	ldr	r1, [sp, #8]
 801c782:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c786:	f109 39ff 	add.w	r9, r9, #4294967295
 801c78a:	fb0b 1707 	mla	r7, fp, r7, r1
 801c78e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c792:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c794:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c798:	fb1b fb05 	smulbb	fp, fp, r5
 801c79c:	4408      	add	r0, r1
 801c79e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c7a0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c7a4:	440a      	add	r2, r1
 801c7a6:	eb0e 0a07 	add.w	sl, lr, r7
 801c7aa:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c7ae:	fb07 b708 	mla	r7, r7, r8, fp
 801c7b2:	b2bf      	uxth	r7, r7
 801c7b4:	f107 0b01 	add.w	fp, r7, #1
 801c7b8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c7bc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c7c0:	fb1b fb05 	smulbb	fp, fp, r5
 801c7c4:	123f      	asrs	r7, r7, #8
 801c7c6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c7ca:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c7ce:	fb07 b708 	mla	r7, r7, r8, fp
 801c7d2:	b2bf      	uxth	r7, r7
 801c7d4:	f107 0b01 	add.w	fp, r7, #1
 801c7d8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c7dc:	123f      	asrs	r7, r7, #8
 801c7de:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c7e2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c7e6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c7ea:	fb1a fa05 	smulbb	sl, sl, r5
 801c7ee:	fb07 a708 	mla	r7, r7, r8, sl
 801c7f2:	b2bf      	uxth	r7, r7
 801c7f4:	f107 0a01 	add.w	sl, r7, #1
 801c7f8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c7fc:	123f      	asrs	r7, r7, #8
 801c7fe:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c802:	e7b5      	b.n	801c770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c804:	2700      	movs	r7, #0
 801c806:	1bde      	subs	r6, r3, r7
 801c808:	2e00      	cmp	r6, #0
 801c80a:	dc42      	bgt.n	801c892 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c80c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c814:	441c      	add	r4, r3
 801c816:	9b01      	ldr	r3, [sp, #4]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	f340 8092 	ble.w	801c942 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c81e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c824:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c828:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c82c:	eef0 6a62 	vmov.f32	s13, s5
 801c830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c834:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c838:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c83c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c840:	eef0 6a43 	vmov.f32	s13, s6
 801c844:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c848:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c84c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c850:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c854:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c858:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c85c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c860:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c864:	ee12 2a90 	vmov	r2, s5
 801c868:	eef0 2a47 	vmov.f32	s5, s14
 801c86c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c870:	ee13 2a10 	vmov	r2, s6
 801c874:	9311      	str	r3, [sp, #68]	; 0x44
 801c876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c878:	eeb0 3a67 	vmov.f32	s6, s15
 801c87c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c880:	9312      	str	r3, [sp, #72]	; 0x48
 801c882:	9b01      	ldr	r3, [sp, #4]
 801c884:	9a03      	ldr	r2, [sp, #12]
 801c886:	3b01      	subs	r3, #1
 801c888:	9301      	str	r3, [sp, #4]
 801c88a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c88c:	bf08      	it	eq
 801c88e:	4613      	moveq	r3, r2
 801c890:	e73a      	b.n	801c708 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c892:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c896:	d44e      	bmi.n	801c936 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c898:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c89c:	4556      	cmp	r6, sl
 801c89e:	dd4a      	ble.n	801c936 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c8a0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c8a4:	d447      	bmi.n	801c936 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c8a6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c8aa:	4559      	cmp	r1, fp
 801c8ac:	dd43      	ble.n	801c936 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c8ae:	fa0f f986 	sxth.w	r9, r6
 801c8b2:	9902      	ldr	r1, [sp, #8]
 801c8b4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c8b8:	fb0b 1909 	mla	r9, fp, r9, r1
 801c8bc:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c8c0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c8c4:	fb1b fb05 	smulbb	fp, fp, r5
 801c8c8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c8cc:	eb0e 0a09 	add.w	sl, lr, r9
 801c8d0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c8d4:	fb09 b908 	mla	r9, r9, r8, fp
 801c8d8:	fa1f f989 	uxth.w	r9, r9
 801c8dc:	f109 0b01 	add.w	fp, r9, #1
 801c8e0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8e8:	f804 9006 	strb.w	r9, [r4, r6]
 801c8ec:	4426      	add	r6, r4
 801c8ee:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c8f2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c8f6:	fb1b fb05 	smulbb	fp, fp, r5
 801c8fa:	fb09 b908 	mla	r9, r9, r8, fp
 801c8fe:	fa1f f989 	uxth.w	r9, r9
 801c902:	f109 0b01 	add.w	fp, r9, #1
 801c906:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c90a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c90e:	f886 9001 	strb.w	r9, [r6, #1]
 801c912:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c916:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c91a:	fb1a fa05 	smulbb	sl, sl, r5
 801c91e:	fb09 a908 	mla	r9, r9, r8, sl
 801c922:	fa1f f989 	uxth.w	r9, r9
 801c926:	f109 0a01 	add.w	sl, r9, #1
 801c92a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c92e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c932:	f886 9002 	strb.w	r9, [r6, #2]
 801c936:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c938:	3701      	adds	r7, #1
 801c93a:	4408      	add	r0, r1
 801c93c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c93e:	440a      	add	r2, r1
 801c940:	e761      	b.n	801c806 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c942:	b005      	add	sp, #20
 801c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c948 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c94c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c94e:	4693      	mov	fp, r2
 801c950:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c956:	6868      	ldr	r0, [r5, #4]
 801c958:	6877      	ldr	r7, [r6, #4]
 801c95a:	9100      	str	r1, [sp, #0]
 801c95c:	3704      	adds	r7, #4
 801c95e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c962:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801c966:	fb00 2404 	mla	r4, r0, r4, r2
 801c96a:	682a      	ldr	r2, [r5, #0]
 801c96c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c970:	4414      	add	r4, r2
 801c972:	6832      	ldr	r2, [r6, #0]
 801c974:	9201      	str	r2, [sp, #4]
 801c976:	9a00      	ldr	r2, [sp, #0]
 801c978:	2a00      	cmp	r2, #0
 801c97a:	dc03      	bgt.n	801c984 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c97c:	f1bb 0f00 	cmp.w	fp, #0
 801c980:	f340 80bc 	ble.w	801cafc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c986:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c98a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c98e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c990:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c994:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c998:	2b00      	cmp	r3, #0
 801c99a:	dd0c      	ble.n	801c9b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c99c:	1405      	asrs	r5, r0, #16
 801c99e:	d405      	bmi.n	801c9ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c9a0:	4555      	cmp	r5, sl
 801c9a2:	da03      	bge.n	801c9ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c9a4:	1415      	asrs	r5, r2, #16
 801c9a6:	d401      	bmi.n	801c9ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c9a8:	454d      	cmp	r5, r9
 801c9aa:	db05      	blt.n	801c9b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c9ac:	4440      	add	r0, r8
 801c9ae:	4472      	add	r2, lr
 801c9b0:	3b01      	subs	r3, #1
 801c9b2:	3403      	adds	r4, #3
 801c9b4:	e7f0      	b.n	801c998 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c9b6:	d03f      	beq.n	801ca38 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c9b8:	1e5d      	subs	r5, r3, #1
 801c9ba:	fb08 0c05 	mla	ip, r8, r5, r0
 801c9be:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c9c2:	d42e      	bmi.n	801ca22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c9c4:	45d4      	cmp	ip, sl
 801c9c6:	da2c      	bge.n	801ca22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c9c8:	fb0e 2505 	mla	r5, lr, r5, r2
 801c9cc:	142d      	asrs	r5, r5, #16
 801c9ce:	d428      	bmi.n	801ca22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c9d0:	454d      	cmp	r5, r9
 801c9d2:	da26      	bge.n	801ca22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c9d4:	1ce5      	adds	r5, r4, #3
 801c9d6:	469c      	mov	ip, r3
 801c9d8:	f1bc 0f00 	cmp.w	ip, #0
 801c9dc:	f105 0503 	add.w	r5, r5, #3
 801c9e0:	dd25      	ble.n	801ca2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c9e2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c9e6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c9ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c9ee:	4472      	add	r2, lr
 801c9f0:	468a      	mov	sl, r1
 801c9f2:	9901      	ldr	r1, [sp, #4]
 801c9f4:	fb0a 1909 	mla	r9, sl, r9, r1
 801c9f8:	1401      	asrs	r1, r0, #16
 801c9fa:	4440      	add	r0, r8
 801c9fc:	f819 9001 	ldrb.w	r9, [r9, r1]
 801ca00:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ca04:	eb07 0a09 	add.w	sl, r7, r9
 801ca08:	f817 9009 	ldrb.w	r9, [r7, r9]
 801ca0c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801ca10:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ca14:	f805 9c05 	strb.w	r9, [r5, #-5]
 801ca18:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ca1c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ca20:	e7da      	b.n	801c9d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca22:	2500      	movs	r5, #0
 801ca24:	eba3 0c05 	sub.w	ip, r3, r5
 801ca28:	f1bc 0f00 	cmp.w	ip, #0
 801ca2c:	dc3b      	bgt.n	801caa6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ca2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca36:	441c      	add	r4, r3
 801ca38:	9b00      	ldr	r3, [sp, #0]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	dd5e      	ble.n	801cafc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ca3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca48:	eeb0 6a62 	vmov.f32	s12, s5
 801ca4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca58:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ca5c:	eeb0 6a43 	vmov.f32	s12, s6
 801ca60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca64:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ca68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca80:	ee12 2a90 	vmov	r2, s5
 801ca84:	eef0 2a47 	vmov.f32	s5, s14
 801ca88:	fb92 f8f3 	sdiv	r8, r2, r3
 801ca8c:	ee13 2a10 	vmov	r2, s6
 801ca90:	eeb0 3a67 	vmov.f32	s6, s15
 801ca94:	fb92 fef3 	sdiv	lr, r2, r3
 801ca98:	9b00      	ldr	r3, [sp, #0]
 801ca9a:	3b01      	subs	r3, #1
 801ca9c:	9300      	str	r3, [sp, #0]
 801ca9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801caa0:	bf08      	it	eq
 801caa2:	465b      	moveq	r3, fp
 801caa4:	e767      	b.n	801c976 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801caa6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801caaa:	d423      	bmi.n	801caf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801caac:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801cab0:	45cc      	cmp	ip, r9
 801cab2:	dd1f      	ble.n	801caf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cab4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cab8:	d41c      	bmi.n	801caf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801caba:	68f1      	ldr	r1, [r6, #12]
 801cabc:	4551      	cmp	r1, sl
 801cabe:	dd19      	ble.n	801caf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cac0:	fa0f fc8c 	sxth.w	ip, ip
 801cac4:	9901      	ldr	r1, [sp, #4]
 801cac6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801caca:	f81c c009 	ldrb.w	ip, [ip, r9]
 801cace:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cad2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801cad6:	eb07 090c 	add.w	r9, r7, ip
 801cada:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801cade:	f804 a00c 	strb.w	sl, [r4, ip]
 801cae2:	44a4      	add	ip, r4
 801cae4:	f899 a001 	ldrb.w	sl, [r9, #1]
 801cae8:	f88c a001 	strb.w	sl, [ip, #1]
 801caec:	f899 9002 	ldrb.w	r9, [r9, #2]
 801caf0:	f88c 9002 	strb.w	r9, [ip, #2]
 801caf4:	4440      	add	r0, r8
 801caf6:	4472      	add	r2, lr
 801caf8:	3501      	adds	r5, #1
 801cafa:	e793      	b.n	801ca24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801cafc:	b003      	add	sp, #12
 801cafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb02 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb06:	b085      	sub	sp, #20
 801cb08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb0e:	9202      	str	r2, [sp, #8]
 801cb10:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cb14:	6860      	ldr	r0, [r4, #4]
 801cb16:	9203      	str	r2, [sp, #12]
 801cb18:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cb1c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801cb20:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cb24:	fb00 2505 	mla	r5, r0, r5, r2
 801cb28:	6822      	ldr	r2, [r4, #0]
 801cb2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb2e:	4415      	add	r5, r2
 801cb30:	f8dc 2000 	ldr.w	r2, [ip]
 801cb34:	9200      	str	r2, [sp, #0]
 801cb36:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cb3a:	3204      	adds	r2, #4
 801cb3c:	9201      	str	r2, [sp, #4]
 801cb3e:	2900      	cmp	r1, #0
 801cb40:	dc03      	bgt.n	801cb4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cb42:	9a02      	ldr	r2, [sp, #8]
 801cb44:	2a00      	cmp	r2, #0
 801cb46:	f340 8127 	ble.w	801cd98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801cb4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb4c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cb50:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cb54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb56:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cb5a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	dd0d      	ble.n	801cb7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cb62:	1422      	asrs	r2, r4, #16
 801cb64:	d405      	bmi.n	801cb72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cb66:	4542      	cmp	r2, r8
 801cb68:	da03      	bge.n	801cb72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cb6a:	1402      	asrs	r2, r0, #16
 801cb6c:	d401      	bmi.n	801cb72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cb6e:	42ba      	cmp	r2, r7
 801cb70:	db06      	blt.n	801cb80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cb72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb74:	4474      	add	r4, lr
 801cb76:	3b01      	subs	r3, #1
 801cb78:	3503      	adds	r5, #3
 801cb7a:	4410      	add	r0, r2
 801cb7c:	e7ef      	b.n	801cb5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cb7e:	d075      	beq.n	801cc6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801cb80:	1e5a      	subs	r2, r3, #1
 801cb82:	fb0e 4602 	mla	r6, lr, r2, r4
 801cb86:	1436      	asrs	r6, r6, #16
 801cb88:	d465      	bmi.n	801cc56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb8a:	4546      	cmp	r6, r8
 801cb8c:	da63      	bge.n	801cc56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb8e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cb90:	fb06 0202 	mla	r2, r6, r2, r0
 801cb94:	1412      	asrs	r2, r2, #16
 801cb96:	d45e      	bmi.n	801cc56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb98:	42ba      	cmp	r2, r7
 801cb9a:	da5c      	bge.n	801cc56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb9c:	1cef      	adds	r7, r5, #3
 801cb9e:	4699      	mov	r9, r3
 801cba0:	f1b9 0f00 	cmp.w	r9, #0
 801cba4:	dd5d      	ble.n	801cc62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801cba6:	1402      	asrs	r2, r0, #16
 801cba8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cbac:	1426      	asrs	r6, r4, #16
 801cbae:	4692      	mov	sl, r2
 801cbb0:	9a00      	ldr	r2, [sp, #0]
 801cbb2:	fb08 220a 	mla	r2, r8, sl, r2
 801cbb6:	5d92      	ldrb	r2, [r2, r6]
 801cbb8:	9e01      	ldr	r6, [sp, #4]
 801cbba:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cbbe:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801cbc2:	d041      	beq.n	801cc48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cbc4:	9a03      	ldr	r2, [sp, #12]
 801cbc6:	fa5f fb86 	uxtb.w	fp, r6
 801cbca:	fb02 f808 	mul.w	r8, r2, r8
 801cbce:	f108 0201 	add.w	r2, r8, #1
 801cbd2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801cbd6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801cbda:	1212      	asrs	r2, r2, #8
 801cbdc:	fa1f fa82 	uxth.w	sl, r2
 801cbe0:	43d2      	mvns	r2, r2
 801cbe2:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbe6:	b2d2      	uxtb	r2, r2
 801cbe8:	fb08 b802 	mla	r8, r8, r2, fp
 801cbec:	fa1f f888 	uxth.w	r8, r8
 801cbf0:	f108 0b01 	add.w	fp, r8, #1
 801cbf4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cbf8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cbfc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cc00:	fb1b fb0a 	smulbb	fp, fp, sl
 801cc04:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cc08:	fb16 fa0a 	smulbb	sl, r6, sl
 801cc0c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cc10:	f807 8c03 	strb.w	r8, [r7, #-3]
 801cc14:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801cc18:	fb06 aa02 	mla	sl, r6, r2, sl
 801cc1c:	fb08 b802 	mla	r8, r8, r2, fp
 801cc20:	fa1f fa8a 	uxth.w	sl, sl
 801cc24:	fa1f f888 	uxth.w	r8, r8
 801cc28:	f10a 0601 	add.w	r6, sl, #1
 801cc2c:	f108 0b01 	add.w	fp, r8, #1
 801cc30:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cc34:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cc38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cc40:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cc44:	f807 8c02 	strb.w	r8, [r7, #-2]
 801cc48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc4a:	4474      	add	r4, lr
 801cc4c:	3703      	adds	r7, #3
 801cc4e:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc52:	4410      	add	r0, r2
 801cc54:	e7a4      	b.n	801cba0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cc56:	f04f 0800 	mov.w	r8, #0
 801cc5a:	eba3 0208 	sub.w	r2, r3, r8
 801cc5e:	2a00      	cmp	r2, #0
 801cc60:	dc3b      	bgt.n	801ccda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801cc62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc6a:	441d      	add	r5, r3
 801cc6c:	2900      	cmp	r1, #0
 801cc6e:	f340 8093 	ble.w	801cd98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801cc72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc7c:	3901      	subs	r1, #1
 801cc7e:	eeb0 6a62 	vmov.f32	s12, s5
 801cc82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc8e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cc92:	eeb0 6a43 	vmov.f32	s12, s6
 801cc96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc9a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cc9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ccb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ccb6:	ee12 2a90 	vmov	r2, s5
 801ccba:	eef0 2a47 	vmov.f32	s5, s14
 801ccbe:	fb92 fef3 	sdiv	lr, r2, r3
 801ccc2:	ee13 2a10 	vmov	r2, s6
 801ccc6:	eeb0 3a67 	vmov.f32	s6, s15
 801ccca:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccce:	9a02      	ldr	r2, [sp, #8]
 801ccd0:	9312      	str	r3, [sp, #72]	; 0x48
 801ccd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccd4:	bf08      	it	eq
 801ccd6:	4613      	moveq	r3, r2
 801ccd8:	e731      	b.n	801cb3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ccda:	1427      	asrs	r7, r4, #16
 801ccdc:	d456      	bmi.n	801cd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ccde:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cce2:	42be      	cmp	r6, r7
 801cce4:	dd52      	ble.n	801cd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801cce6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ccea:	d44f      	bmi.n	801cd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ccec:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ccf0:	454a      	cmp	r2, r9
 801ccf2:	dd4b      	ble.n	801cd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ccf4:	9a00      	ldr	r2, [sp, #0]
 801ccf6:	b236      	sxth	r6, r6
 801ccf8:	fb09 2606 	mla	r6, r9, r6, r2
 801ccfc:	5df2      	ldrb	r2, [r6, r7]
 801ccfe:	9e01      	ldr	r6, [sp, #4]
 801cd00:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cd04:	0e3a      	lsrs	r2, r7, #24
 801cd06:	d041      	beq.n	801cd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801cd08:	9e03      	ldr	r6, [sp, #12]
 801cd0a:	fa5f fb87 	uxtb.w	fp, r7
 801cd0e:	4372      	muls	r2, r6
 801cd10:	1c56      	adds	r6, r2, #1
 801cd12:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cd16:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801cd1a:	1212      	asrs	r2, r2, #8
 801cd1c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cd20:	fa1f fa82 	uxth.w	sl, r2
 801cd24:	43d2      	mvns	r2, r2
 801cd26:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd2a:	b2d2      	uxtb	r2, r2
 801cd2c:	fb09 b902 	mla	r9, r9, r2, fp
 801cd30:	fa1f f989 	uxth.w	r9, r9
 801cd34:	f109 0b01 	add.w	fp, r9, #1
 801cd38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cd3c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cd40:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cd44:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd48:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd4c:	fb17 fa0a 	smulbb	sl, r7, sl
 801cd50:	f805 9006 	strb.w	r9, [r5, r6]
 801cd54:	442e      	add	r6, r5
 801cd56:	78b7      	ldrb	r7, [r6, #2]
 801cd58:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cd5c:	fb07 aa02 	mla	sl, r7, r2, sl
 801cd60:	fb09 b902 	mla	r9, r9, r2, fp
 801cd64:	fa1f fa8a 	uxth.w	sl, sl
 801cd68:	fa1f f989 	uxth.w	r9, r9
 801cd6c:	f10a 0701 	add.w	r7, sl, #1
 801cd70:	f109 0b01 	add.w	fp, r9, #1
 801cd74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cd78:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cd7c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd80:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd84:	f886 a002 	strb.w	sl, [r6, #2]
 801cd88:	f886 9001 	strb.w	r9, [r6, #1]
 801cd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd8e:	4474      	add	r4, lr
 801cd90:	f108 0801 	add.w	r8, r8, #1
 801cd94:	4410      	add	r0, r2
 801cd96:	e760      	b.n	801cc5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801cd98:	b005      	add	sp, #20
 801cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd9e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cda2:	b085      	sub	sp, #20
 801cda4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cda8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cdaa:	9203      	str	r2, [sp, #12]
 801cdac:	6868      	ldr	r0, [r5, #4]
 801cdae:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cdb2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801cdb6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cdba:	fb00 2404 	mla	r4, r0, r4, r2
 801cdbe:	682a      	ldr	r2, [r5, #0]
 801cdc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cdc4:	4414      	add	r4, r2
 801cdc6:	f8dc 2000 	ldr.w	r2, [ip]
 801cdca:	9201      	str	r2, [sp, #4]
 801cdcc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cdd0:	3204      	adds	r2, #4
 801cdd2:	9202      	str	r2, [sp, #8]
 801cdd4:	2900      	cmp	r1, #0
 801cdd6:	dc03      	bgt.n	801cde0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801cdd8:	9a03      	ldr	r2, [sp, #12]
 801cdda:	2a00      	cmp	r2, #0
 801cddc:	f340 8137 	ble.w	801d04e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cde0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cde2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cde6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cdea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cdec:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cdf0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	dd0d      	ble.n	801ce14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cdf8:	1405      	asrs	r5, r0, #16
 801cdfa:	d405      	bmi.n	801ce08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cdfc:	4545      	cmp	r5, r8
 801cdfe:	da03      	bge.n	801ce08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce00:	1415      	asrs	r5, r2, #16
 801ce02:	d401      	bmi.n	801ce08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce04:	42bd      	cmp	r5, r7
 801ce06:	db06      	blt.n	801ce16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ce08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ce0a:	4470      	add	r0, lr
 801ce0c:	3b01      	subs	r3, #1
 801ce0e:	3403      	adds	r4, #3
 801ce10:	442a      	add	r2, r5
 801ce12:	e7ef      	b.n	801cdf4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ce14:	d070      	beq.n	801cef8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ce16:	1e5d      	subs	r5, r3, #1
 801ce18:	fb0e 0605 	mla	r6, lr, r5, r0
 801ce1c:	1436      	asrs	r6, r6, #16
 801ce1e:	d462      	bmi.n	801cee6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ce20:	4546      	cmp	r6, r8
 801ce22:	da60      	bge.n	801cee6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ce24:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ce26:	fb06 2505 	mla	r5, r6, r5, r2
 801ce2a:	142d      	asrs	r5, r5, #16
 801ce2c:	d45b      	bmi.n	801cee6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ce2e:	42bd      	cmp	r5, r7
 801ce30:	da59      	bge.n	801cee6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ce32:	1ce5      	adds	r5, r4, #3
 801ce34:	469a      	mov	sl, r3
 801ce36:	f1ba 0f00 	cmp.w	sl, #0
 801ce3a:	dd58      	ble.n	801ceee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801ce3c:	1416      	asrs	r6, r2, #16
 801ce3e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ce42:	1407      	asrs	r7, r0, #16
 801ce44:	46b1      	mov	r9, r6
 801ce46:	9e01      	ldr	r6, [sp, #4]
 801ce48:	fb08 6609 	mla	r6, r8, r9, r6
 801ce4c:	5df6      	ldrb	r6, [r6, r7]
 801ce4e:	9f02      	ldr	r7, [sp, #8]
 801ce50:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801ce54:	0e37      	lsrs	r7, r6, #24
 801ce56:	2fff      	cmp	r7, #255	; 0xff
 801ce58:	f000 80f0 	beq.w	801d03c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ce5c:	fa5f f887 	uxtb.w	r8, r7
 801ce60:	b3d7      	cbz	r7, 801ced8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ce62:	fa1f f788 	uxth.w	r7, r8
 801ce66:	ea6f 0808 	mvn.w	r8, r8
 801ce6a:	fa5f fb86 	uxtb.w	fp, r6
 801ce6e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801ce72:	fa5f f888 	uxtb.w	r8, r8
 801ce76:	fb1b fb07 	smulbb	fp, fp, r7
 801ce7a:	fb09 b908 	mla	r9, r9, r8, fp
 801ce7e:	fa1f f989 	uxth.w	r9, r9
 801ce82:	f109 0b01 	add.w	fp, r9, #1
 801ce86:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce8a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801ce8e:	fb1b fb08 	smulbb	fp, fp, r8
 801ce92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce96:	f805 9c03 	strb.w	r9, [r5, #-3]
 801ce9a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801ce9e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cea2:	fb09 b907 	mla	r9, r9, r7, fp
 801cea6:	fa1f f989 	uxth.w	r9, r9
 801ceaa:	f109 0b01 	add.w	fp, r9, #1
 801ceae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ceb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ceb6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ceba:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801cebe:	fb19 f808 	smulbb	r8, r9, r8
 801cec2:	fb06 8607 	mla	r6, r6, r7, r8
 801cec6:	b2b6      	uxth	r6, r6
 801cec8:	f106 0801 	add.w	r8, r6, #1
 801cecc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801ced0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ced4:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ced8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ceda:	4470      	add	r0, lr
 801cedc:	3503      	adds	r5, #3
 801cede:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cee2:	4432      	add	r2, r6
 801cee4:	e7a7      	b.n	801ce36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cee6:	2600      	movs	r6, #0
 801cee8:	1b9d      	subs	r5, r3, r6
 801ceea:	2d00      	cmp	r5, #0
 801ceec:	dc3b      	bgt.n	801cf66 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ceee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cef6:	441c      	add	r4, r3
 801cef8:	2900      	cmp	r1, #0
 801cefa:	f340 80a8 	ble.w	801d04e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cefe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf08:	3901      	subs	r1, #1
 801cf0a:	eeb0 6a62 	vmov.f32	s12, s5
 801cf0e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf12:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf1a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cf1e:	eeb0 6a43 	vmov.f32	s12, s6
 801cf22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf26:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cf2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf32:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf42:	ee12 2a90 	vmov	r2, s5
 801cf46:	eef0 2a47 	vmov.f32	s5, s14
 801cf4a:	fb92 fef3 	sdiv	lr, r2, r3
 801cf4e:	ee13 2a10 	vmov	r2, s6
 801cf52:	eeb0 3a67 	vmov.f32	s6, s15
 801cf56:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf5a:	9a03      	ldr	r2, [sp, #12]
 801cf5c:	9312      	str	r3, [sp, #72]	; 0x48
 801cf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf60:	bf08      	it	eq
 801cf62:	4613      	moveq	r3, r2
 801cf64:	e736      	b.n	801cdd4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cf66:	ea5f 4820 	movs.w	r8, r0, asr #16
 801cf6a:	d457      	bmi.n	801d01c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cf6c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801cf70:	4547      	cmp	r7, r8
 801cf72:	dd53      	ble.n	801d01c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cf74:	ea5f 4922 	movs.w	r9, r2, asr #16
 801cf78:	d450      	bmi.n	801d01c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cf7a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801cf7e:	454d      	cmp	r5, r9
 801cf80:	dd4c      	ble.n	801d01c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cf82:	9d01      	ldr	r5, [sp, #4]
 801cf84:	b23f      	sxth	r7, r7
 801cf86:	fb09 5707 	mla	r7, r9, r7, r5
 801cf8a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801cf8e:	9f02      	ldr	r7, [sp, #8]
 801cf90:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801cf94:	0e2f      	lsrs	r7, r5, #24
 801cf96:	2fff      	cmp	r7, #255	; 0xff
 801cf98:	d045      	beq.n	801d026 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cf9a:	fa5f f987 	uxtb.w	r9, r7
 801cf9e:	b3ef      	cbz	r7, 801d01c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cfa0:	fa1f f889 	uxth.w	r8, r9
 801cfa4:	ea6f 0909 	mvn.w	r9, r9
 801cfa8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801cfac:	fa5f fb85 	uxtb.w	fp, r5
 801cfb0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801cfb4:	fa5f f989 	uxtb.w	r9, r9
 801cfb8:	fb1b fb08 	smulbb	fp, fp, r8
 801cfbc:	fb0a ba09 	mla	sl, sl, r9, fp
 801cfc0:	fa1f fa8a 	uxth.w	sl, sl
 801cfc4:	f10a 0b01 	add.w	fp, sl, #1
 801cfc8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801cfcc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cfd0:	f804 a007 	strb.w	sl, [r4, r7]
 801cfd4:	4427      	add	r7, r4
 801cfd6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cfda:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801cfde:	f897 b001 	ldrb.w	fp, [r7, #1]
 801cfe2:	fb1b fb09 	smulbb	fp, fp, r9
 801cfe6:	fb0a ba08 	mla	sl, sl, r8, fp
 801cfea:	fa1f fa8a 	uxth.w	sl, sl
 801cfee:	f10a 0b01 	add.w	fp, sl, #1
 801cff2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801cff6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cffa:	f887 a001 	strb.w	sl, [r7, #1]
 801cffe:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d002:	fb1a f909 	smulbb	r9, sl, r9
 801d006:	fb05 9508 	mla	r5, r5, r8, r9
 801d00a:	b2ad      	uxth	r5, r5
 801d00c:	f105 0901 	add.w	r9, r5, #1
 801d010:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801d014:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d018:	f887 9002 	strb.w	r9, [r7, #2]
 801d01c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d01e:	4470      	add	r0, lr
 801d020:	3601      	adds	r6, #1
 801d022:	442a      	add	r2, r5
 801d024:	e760      	b.n	801cee8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d026:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d02a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801d02e:	55e5      	strb	r5, [r4, r7]
 801d030:	4427      	add	r7, r4
 801d032:	0c2d      	lsrs	r5, r5, #16
 801d034:	f887 8001 	strb.w	r8, [r7, #1]
 801d038:	70bd      	strb	r5, [r7, #2]
 801d03a:	e7ef      	b.n	801d01c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d03c:	0a37      	lsrs	r7, r6, #8
 801d03e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801d042:	0c36      	lsrs	r6, r6, #16
 801d044:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d048:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d04c:	e744      	b.n	801ced8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d04e:	b005      	add	sp, #20
 801d050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d054 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d058:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d05a:	9201      	str	r2, [sp, #4]
 801d05c:	6870      	ldr	r0, [r6, #4]
 801d05e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801d062:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d066:	fa1f fe85 	uxth.w	lr, r5
 801d06a:	43ed      	mvns	r5, r5
 801d06c:	f8dc 8000 	ldr.w	r8, [ip]
 801d070:	b2ed      	uxtb	r5, r5
 801d072:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d076:	fb00 2404 	mla	r4, r0, r4, r2
 801d07a:	6832      	ldr	r2, [r6, #0]
 801d07c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d080:	4414      	add	r4, r2
 801d082:	2900      	cmp	r1, #0
 801d084:	dc03      	bgt.n	801d08e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d086:	9a01      	ldr	r2, [sp, #4]
 801d088:	2a00      	cmp	r2, #0
 801d08a:	f340 810d 	ble.w	801d2a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d08e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d090:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d094:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d09a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d09e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	dd0e      	ble.n	801d0c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d0a6:	1406      	asrs	r6, r0, #16
 801d0a8:	d405      	bmi.n	801d0b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d0aa:	4556      	cmp	r6, sl
 801d0ac:	da03      	bge.n	801d0b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d0ae:	1416      	asrs	r6, r2, #16
 801d0b0:	d401      	bmi.n	801d0b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d0b2:	454e      	cmp	r6, r9
 801d0b4:	db07      	blt.n	801d0c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d0b6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d0b8:	3b01      	subs	r3, #1
 801d0ba:	3403      	adds	r4, #3
 801d0bc:	4430      	add	r0, r6
 801d0be:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d0c0:	4432      	add	r2, r6
 801d0c2:	e7ee      	b.n	801d0a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d0c4:	d060      	beq.n	801d188 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801d0c6:	1e5e      	subs	r6, r3, #1
 801d0c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d0ca:	fb07 0706 	mla	r7, r7, r6, r0
 801d0ce:	143f      	asrs	r7, r7, #16
 801d0d0:	d451      	bmi.n	801d176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d0d2:	4557      	cmp	r7, sl
 801d0d4:	da4f      	bge.n	801d176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d0d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d0d8:	fb07 2606 	mla	r6, r7, r6, r2
 801d0dc:	1436      	asrs	r6, r6, #16
 801d0de:	d44a      	bmi.n	801d176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d0e0:	454e      	cmp	r6, r9
 801d0e2:	da48      	bge.n	801d176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d0e4:	1ce6      	adds	r6, r4, #3
 801d0e6:	4699      	mov	r9, r3
 801d0e8:	f1b9 0f00 	cmp.w	r9, #0
 801d0ec:	f106 0603 	add.w	r6, r6, #3
 801d0f0:	dd45      	ble.n	801d17e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801d0f2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801d0f6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d0fa:	1417      	asrs	r7, r2, #16
 801d0fc:	f109 39ff 	add.w	r9, r9, #4294967295
 801d100:	fb0b a707 	mla	r7, fp, r7, sl
 801d104:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d108:	fb1b fb05 	smulbb	fp, fp, r5
 801d10c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d110:	eb08 0a07 	add.w	sl, r8, r7
 801d114:	f818 7007 	ldrb.w	r7, [r8, r7]
 801d118:	fb07 b70e 	mla	r7, r7, lr, fp
 801d11c:	b2bf      	uxth	r7, r7
 801d11e:	f107 0b01 	add.w	fp, r7, #1
 801d122:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d126:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d12a:	fb1b fb05 	smulbb	fp, fp, r5
 801d12e:	123f      	asrs	r7, r7, #8
 801d130:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d134:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d138:	fb07 b70e 	mla	r7, r7, lr, fp
 801d13c:	b2bf      	uxth	r7, r7
 801d13e:	f107 0b01 	add.w	fp, r7, #1
 801d142:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d146:	123f      	asrs	r7, r7, #8
 801d148:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d14c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d150:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d154:	fb1a fa05 	smulbb	sl, sl, r5
 801d158:	fb07 a70e 	mla	r7, r7, lr, sl
 801d15c:	b2bf      	uxth	r7, r7
 801d15e:	f107 0a01 	add.w	sl, r7, #1
 801d162:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d166:	123f      	asrs	r7, r7, #8
 801d168:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d16c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d16e:	4438      	add	r0, r7
 801d170:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d172:	443a      	add	r2, r7
 801d174:	e7b8      	b.n	801d0e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d176:	2700      	movs	r7, #0
 801d178:	1bde      	subs	r6, r3, r7
 801d17a:	2e00      	cmp	r6, #0
 801d17c:	dc3f      	bgt.n	801d1fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801d17e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d182:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d186:	441c      	add	r4, r3
 801d188:	2900      	cmp	r1, #0
 801d18a:	f340 808d 	ble.w	801d2a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d18e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d194:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d198:	3901      	subs	r1, #1
 801d19a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d19e:	eef0 6a62 	vmov.f32	s13, s5
 801d1a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d1a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1ae:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801d1b2:	eef0 6a43 	vmov.f32	s13, s6
 801d1b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1ba:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801d1be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1d6:	ee12 2a90 	vmov	r2, s5
 801d1da:	eef0 2a47 	vmov.f32	s5, s14
 801d1de:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1e2:	ee13 2a10 	vmov	r2, s6
 801d1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d1e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d1ea:	eeb0 3a67 	vmov.f32	s6, s15
 801d1ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1f2:	9a01      	ldr	r2, [sp, #4]
 801d1f4:	9310      	str	r3, [sp, #64]	; 0x40
 801d1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d1f8:	bf08      	it	eq
 801d1fa:	4613      	moveq	r3, r2
 801d1fc:	e741      	b.n	801d082 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d1fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d202:	d44b      	bmi.n	801d29c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d204:	f8dc b008 	ldr.w	fp, [ip, #8]
 801d208:	45cb      	cmp	fp, r9
 801d20a:	dd47      	ble.n	801d29c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d20c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d210:	d444      	bmi.n	801d29c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d212:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801d216:	4556      	cmp	r6, sl
 801d218:	dd40      	ble.n	801d29c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d21a:	fa0f f68b 	sxth.w	r6, fp
 801d21e:	fb0a 9906 	mla	r9, sl, r6, r9
 801d222:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d226:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d22a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801d22e:	fb1b fb05 	smulbb	fp, fp, r5
 801d232:	eb08 0a09 	add.w	sl, r8, r9
 801d236:	f818 9009 	ldrb.w	r9, [r8, r9]
 801d23a:	fb09 b90e 	mla	r9, r9, lr, fp
 801d23e:	fa1f f989 	uxth.w	r9, r9
 801d242:	f109 0b01 	add.w	fp, r9, #1
 801d246:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d24a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d24e:	f804 9006 	strb.w	r9, [r4, r6]
 801d252:	4426      	add	r6, r4
 801d254:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d258:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d25c:	fb1b fb05 	smulbb	fp, fp, r5
 801d260:	fb09 b90e 	mla	r9, r9, lr, fp
 801d264:	fa1f f989 	uxth.w	r9, r9
 801d268:	f109 0b01 	add.w	fp, r9, #1
 801d26c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d270:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d274:	f886 9001 	strb.w	r9, [r6, #1]
 801d278:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d27c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d280:	fb1a fa05 	smulbb	sl, sl, r5
 801d284:	fb09 a90e 	mla	r9, r9, lr, sl
 801d288:	fa1f f989 	uxth.w	r9, r9
 801d28c:	f109 0a01 	add.w	sl, r9, #1
 801d290:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d294:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d298:	f886 9002 	strb.w	r9, [r6, #2]
 801d29c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d29e:	3701      	adds	r7, #1
 801d2a0:	4430      	add	r0, r6
 801d2a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d2a4:	4432      	add	r2, r6
 801d2a6:	e767      	b.n	801d178 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d2a8:	b003      	add	sp, #12
 801d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d2b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2b8:	9201      	str	r2, [sp, #4]
 801d2ba:	6868      	ldr	r0, [r5, #4]
 801d2bc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801d2be:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d2c2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801d2c6:	fb00 2404 	mla	r4, r0, r4, r2
 801d2ca:	682a      	ldr	r2, [r5, #0]
 801d2cc:	f8d7 8000 	ldr.w	r8, [r7]
 801d2d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d2d4:	4414      	add	r4, r2
 801d2d6:	2900      	cmp	r1, #0
 801d2d8:	dc03      	bgt.n	801d2e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d2da:	9a01      	ldr	r2, [sp, #4]
 801d2dc:	2a00      	cmp	r2, #0
 801d2de:	f340 80af 	ble.w	801d440 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d2e4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801d2e8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d2ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d2ee:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801d2f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	dd0c      	ble.n	801d314 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d2fa:	1405      	asrs	r5, r0, #16
 801d2fc:	d405      	bmi.n	801d30a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d2fe:	4555      	cmp	r5, sl
 801d300:	da03      	bge.n	801d30a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d302:	1415      	asrs	r5, r2, #16
 801d304:	d401      	bmi.n	801d30a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d306:	454d      	cmp	r5, r9
 801d308:	db05      	blt.n	801d316 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d30a:	4470      	add	r0, lr
 801d30c:	4462      	add	r2, ip
 801d30e:	3b01      	subs	r3, #1
 801d310:	3403      	adds	r4, #3
 801d312:	e7f0      	b.n	801d2f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d314:	d038      	beq.n	801d388 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d316:	1e5d      	subs	r5, r3, #1
 801d318:	fb0e 0605 	mla	r6, lr, r5, r0
 801d31c:	1436      	asrs	r6, r6, #16
 801d31e:	d42a      	bmi.n	801d376 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d320:	4556      	cmp	r6, sl
 801d322:	da28      	bge.n	801d376 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d324:	fb0c 2505 	mla	r5, ip, r5, r2
 801d328:	142d      	asrs	r5, r5, #16
 801d32a:	d424      	bmi.n	801d376 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d32c:	454d      	cmp	r5, r9
 801d32e:	da22      	bge.n	801d376 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d330:	1ce6      	adds	r6, r4, #3
 801d332:	4699      	mov	r9, r3
 801d334:	f1b9 0f00 	cmp.w	r9, #0
 801d338:	f106 0603 	add.w	r6, r6, #3
 801d33c:	dd1f      	ble.n	801d37e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801d33e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801d342:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d346:	1415      	asrs	r5, r2, #16
 801d348:	4470      	add	r0, lr
 801d34a:	4462      	add	r2, ip
 801d34c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d350:	fb0b a505 	mla	r5, fp, r5, sl
 801d354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d358:	eb08 0a05 	add.w	sl, r8, r5
 801d35c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801d360:	f806 5c06 	strb.w	r5, [r6, #-6]
 801d364:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801d368:	f806 5c05 	strb.w	r5, [r6, #-5]
 801d36c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801d370:	f806 5c04 	strb.w	r5, [r6, #-4]
 801d374:	e7de      	b.n	801d334 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d376:	2600      	movs	r6, #0
 801d378:	1b9d      	subs	r5, r3, r6
 801d37a:	2d00      	cmp	r5, #0
 801d37c:	dc38      	bgt.n	801d3f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d37e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d386:	441c      	add	r4, r3
 801d388:	2900      	cmp	r1, #0
 801d38a:	dd59      	ble.n	801d440 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d38c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d392:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d396:	3901      	subs	r1, #1
 801d398:	eeb0 6a62 	vmov.f32	s12, s5
 801d39c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d3a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3a8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d3ac:	eeb0 6a43 	vmov.f32	s12, s6
 801d3b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3b4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d3b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3d0:	ee12 2a90 	vmov	r2, s5
 801d3d4:	eef0 2a47 	vmov.f32	s5, s14
 801d3d8:	fb92 fef3 	sdiv	lr, r2, r3
 801d3dc:	ee13 2a10 	vmov	r2, s6
 801d3e0:	eeb0 3a67 	vmov.f32	s6, s15
 801d3e4:	fb92 fcf3 	sdiv	ip, r2, r3
 801d3e8:	9a01      	ldr	r2, [sp, #4]
 801d3ea:	bf08      	it	eq
 801d3ec:	4613      	moveq	r3, r2
 801d3ee:	e772      	b.n	801d2d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d3f0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d3f4:	d420      	bmi.n	801d438 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d3f6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801d3fa:	45cb      	cmp	fp, r9
 801d3fc:	dd1c      	ble.n	801d438 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d3fe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d402:	d419      	bmi.n	801d438 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d404:	68fd      	ldr	r5, [r7, #12]
 801d406:	4555      	cmp	r5, sl
 801d408:	dd16      	ble.n	801d438 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d40a:	fa0f f58b 	sxth.w	r5, fp
 801d40e:	fb0a 9505 	mla	r5, sl, r5, r9
 801d412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d416:	f818 9005 	ldrb.w	r9, [r8, r5]
 801d41a:	eb08 0b05 	add.w	fp, r8, r5
 801d41e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801d422:	f804 9005 	strb.w	r9, [r4, r5]
 801d426:	4425      	add	r5, r4
 801d428:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d42c:	f885 9001 	strb.w	r9, [r5, #1]
 801d430:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d434:	f885 9002 	strb.w	r9, [r5, #2]
 801d438:	4470      	add	r0, lr
 801d43a:	4462      	add	r2, ip
 801d43c:	3601      	adds	r6, #1
 801d43e:	e79b      	b.n	801d378 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801d440:	b003      	add	sp, #12
 801d442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d446 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d44a:	b085      	sub	sp, #20
 801d44c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d450:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d452:	9202      	str	r2, [sp, #8]
 801d454:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d458:	6860      	ldr	r0, [r4, #4]
 801d45a:	9203      	str	r2, [sp, #12]
 801d45c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d460:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d464:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d468:	fb00 2505 	mla	r5, r0, r5, r2
 801d46c:	6822      	ldr	r2, [r4, #0]
 801d46e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d472:	4415      	add	r5, r2
 801d474:	f8dc 2000 	ldr.w	r2, [ip]
 801d478:	9201      	str	r2, [sp, #4]
 801d47a:	2900      	cmp	r1, #0
 801d47c:	dc03      	bgt.n	801d486 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d47e:	9a02      	ldr	r2, [sp, #8]
 801d480:	2a00      	cmp	r2, #0
 801d482:	f340 8122 	ble.w	801d6ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d488:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d48c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d490:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d492:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d496:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	dd0d      	ble.n	801d4ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d49e:	1422      	asrs	r2, r4, #16
 801d4a0:	d405      	bmi.n	801d4ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d4a2:	4542      	cmp	r2, r8
 801d4a4:	da03      	bge.n	801d4ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d4a6:	1402      	asrs	r2, r0, #16
 801d4a8:	d401      	bmi.n	801d4ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d4aa:	42ba      	cmp	r2, r7
 801d4ac:	db06      	blt.n	801d4bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d4ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d4b0:	4474      	add	r4, lr
 801d4b2:	3b01      	subs	r3, #1
 801d4b4:	3503      	adds	r5, #3
 801d4b6:	4410      	add	r0, r2
 801d4b8:	e7ef      	b.n	801d49a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d4ba:	d072      	beq.n	801d5a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d4bc:	1e5a      	subs	r2, r3, #1
 801d4be:	fb0e 4602 	mla	r6, lr, r2, r4
 801d4c2:	1436      	asrs	r6, r6, #16
 801d4c4:	d462      	bmi.n	801d58c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d4c6:	4546      	cmp	r6, r8
 801d4c8:	da60      	bge.n	801d58c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d4ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d4cc:	fb06 0202 	mla	r2, r6, r2, r0
 801d4d0:	1412      	asrs	r2, r2, #16
 801d4d2:	d45b      	bmi.n	801d58c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d4d4:	42ba      	cmp	r2, r7
 801d4d6:	da59      	bge.n	801d58c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d4d8:	1cef      	adds	r7, r5, #3
 801d4da:	4699      	mov	r9, r3
 801d4dc:	f1b9 0f00 	cmp.w	r9, #0
 801d4e0:	dd5a      	ble.n	801d598 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d4e2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d4e6:	1426      	asrs	r6, r4, #16
 801d4e8:	1402      	asrs	r2, r0, #16
 801d4ea:	fb08 6202 	mla	r2, r8, r2, r6
 801d4ee:	9e01      	ldr	r6, [sp, #4]
 801d4f0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d4f4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801d4f8:	d041      	beq.n	801d57e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d4fa:	9a03      	ldr	r2, [sp, #12]
 801d4fc:	fa5f fb86 	uxtb.w	fp, r6
 801d500:	fb02 f808 	mul.w	r8, r2, r8
 801d504:	f108 0201 	add.w	r2, r8, #1
 801d508:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801d50c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801d510:	1212      	asrs	r2, r2, #8
 801d512:	fa1f fa82 	uxth.w	sl, r2
 801d516:	43d2      	mvns	r2, r2
 801d518:	fb1b fb0a 	smulbb	fp, fp, sl
 801d51c:	b2d2      	uxtb	r2, r2
 801d51e:	fb08 b802 	mla	r8, r8, r2, fp
 801d522:	fa1f f888 	uxth.w	r8, r8
 801d526:	f108 0b01 	add.w	fp, r8, #1
 801d52a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d52e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d532:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d536:	fb1b fb0a 	smulbb	fp, fp, sl
 801d53a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d53e:	fb16 fa0a 	smulbb	sl, r6, sl
 801d542:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d546:	f807 8c03 	strb.w	r8, [r7, #-3]
 801d54a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801d54e:	fb06 aa02 	mla	sl, r6, r2, sl
 801d552:	fb08 b802 	mla	r8, r8, r2, fp
 801d556:	fa1f fa8a 	uxth.w	sl, sl
 801d55a:	fa1f f888 	uxth.w	r8, r8
 801d55e:	f10a 0601 	add.w	r6, sl, #1
 801d562:	f108 0b01 	add.w	fp, r8, #1
 801d566:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d56a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d56e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d572:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d576:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d57a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801d57e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d580:	4474      	add	r4, lr
 801d582:	3703      	adds	r7, #3
 801d584:	f109 39ff 	add.w	r9, r9, #4294967295
 801d588:	4410      	add	r0, r2
 801d58a:	e7a7      	b.n	801d4dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d58c:	f04f 0800 	mov.w	r8, #0
 801d590:	eba3 0208 	sub.w	r2, r3, r8
 801d594:	2a00      	cmp	r2, #0
 801d596:	dc3b      	bgt.n	801d610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d59c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d5a0:	441d      	add	r5, r3
 801d5a2:	2900      	cmp	r1, #0
 801d5a4:	f340 8091 	ble.w	801d6ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d5a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5b2:	3901      	subs	r1, #1
 801d5b4:	eeb0 6a62 	vmov.f32	s12, s5
 801d5b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d5bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d5c4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d5c8:	eeb0 6a43 	vmov.f32	s12, s6
 801d5cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d5d0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d5d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d5d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5ec:	ee12 2a90 	vmov	r2, s5
 801d5f0:	eef0 2a47 	vmov.f32	s5, s14
 801d5f4:	fb92 fef3 	sdiv	lr, r2, r3
 801d5f8:	ee13 2a10 	vmov	r2, s6
 801d5fc:	eeb0 3a67 	vmov.f32	s6, s15
 801d600:	fb92 f3f3 	sdiv	r3, r2, r3
 801d604:	9a02      	ldr	r2, [sp, #8]
 801d606:	9312      	str	r3, [sp, #72]	; 0x48
 801d608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d60a:	bf08      	it	eq
 801d60c:	4613      	moveq	r3, r2
 801d60e:	e734      	b.n	801d47a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d610:	1427      	asrs	r7, r4, #16
 801d612:	d454      	bmi.n	801d6be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d614:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d618:	42be      	cmp	r6, r7
 801d61a:	dd50      	ble.n	801d6be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d61c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d620:	d44d      	bmi.n	801d6be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d622:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d626:	454a      	cmp	r2, r9
 801d628:	dd49      	ble.n	801d6be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d62a:	b236      	sxth	r6, r6
 801d62c:	9a01      	ldr	r2, [sp, #4]
 801d62e:	fb09 7606 	mla	r6, r9, r6, r7
 801d632:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d636:	0e3a      	lsrs	r2, r7, #24
 801d638:	d041      	beq.n	801d6be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d63a:	9e03      	ldr	r6, [sp, #12]
 801d63c:	fa5f fb87 	uxtb.w	fp, r7
 801d640:	4372      	muls	r2, r6
 801d642:	1c56      	adds	r6, r2, #1
 801d644:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d648:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d64c:	1212      	asrs	r2, r2, #8
 801d64e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d652:	fa1f fa82 	uxth.w	sl, r2
 801d656:	43d2      	mvns	r2, r2
 801d658:	fb1b fb0a 	smulbb	fp, fp, sl
 801d65c:	b2d2      	uxtb	r2, r2
 801d65e:	fb09 b902 	mla	r9, r9, r2, fp
 801d662:	fa1f f989 	uxth.w	r9, r9
 801d666:	f109 0b01 	add.w	fp, r9, #1
 801d66a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d66e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d672:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d676:	fb1b fb0a 	smulbb	fp, fp, sl
 801d67a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d67e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d682:	f805 9006 	strb.w	r9, [r5, r6]
 801d686:	442e      	add	r6, r5
 801d688:	78b7      	ldrb	r7, [r6, #2]
 801d68a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d68e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d692:	fb09 b902 	mla	r9, r9, r2, fp
 801d696:	fa1f fa8a 	uxth.w	sl, sl
 801d69a:	fa1f f989 	uxth.w	r9, r9
 801d69e:	f10a 0701 	add.w	r7, sl, #1
 801d6a2:	f109 0b01 	add.w	fp, r9, #1
 801d6a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d6aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d6ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d6b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d6b6:	f886 a002 	strb.w	sl, [r6, #2]
 801d6ba:	f886 9001 	strb.w	r9, [r6, #1]
 801d6be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6c0:	4474      	add	r4, lr
 801d6c2:	f108 0801 	add.w	r8, r8, #1
 801d6c6:	4410      	add	r0, r2
 801d6c8:	e762      	b.n	801d590 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d6ca:	b005      	add	sp, #20
 801d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d6da:	9201      	str	r2, [sp, #4]
 801d6dc:	6860      	ldr	r0, [r4, #4]
 801d6de:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d6e2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801d6e6:	fb00 2505 	mla	r5, r0, r5, r2
 801d6ea:	6822      	ldr	r2, [r4, #0]
 801d6ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d6f0:	4415      	add	r5, r2
 801d6f2:	f8dc 2000 	ldr.w	r2, [ip]
 801d6f6:	9200      	str	r2, [sp, #0]
 801d6f8:	2900      	cmp	r1, #0
 801d6fa:	dc03      	bgt.n	801d704 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d6fc:	9a01      	ldr	r2, [sp, #4]
 801d6fe:	2a00      	cmp	r2, #0
 801d700:	f340 812b 	ble.w	801d95a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d706:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d70a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d70e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d710:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d714:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d718:	2b00      	cmp	r3, #0
 801d71a:	dd0e      	ble.n	801d73a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d71c:	1422      	asrs	r2, r4, #16
 801d71e:	d405      	bmi.n	801d72c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d720:	4572      	cmp	r2, lr
 801d722:	da03      	bge.n	801d72c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d724:	1402      	asrs	r2, r0, #16
 801d726:	d401      	bmi.n	801d72c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d728:	42ba      	cmp	r2, r7
 801d72a:	db07      	blt.n	801d73c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d72c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d72e:	3b01      	subs	r3, #1
 801d730:	3503      	adds	r5, #3
 801d732:	4414      	add	r4, r2
 801d734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d736:	4410      	add	r0, r2
 801d738:	e7ee      	b.n	801d718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d73a:	d06f      	beq.n	801d81c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d73c:	1e5a      	subs	r2, r3, #1
 801d73e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d740:	fb06 4602 	mla	r6, r6, r2, r4
 801d744:	1436      	asrs	r6, r6, #16
 801d746:	d45e      	bmi.n	801d806 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d748:	4576      	cmp	r6, lr
 801d74a:	da5c      	bge.n	801d806 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d74c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d74e:	fb06 0202 	mla	r2, r6, r2, r0
 801d752:	1412      	asrs	r2, r2, #16
 801d754:	d457      	bmi.n	801d806 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d756:	42ba      	cmp	r2, r7
 801d758:	da55      	bge.n	801d806 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d75a:	1cee      	adds	r6, r5, #3
 801d75c:	469a      	mov	sl, r3
 801d75e:	f1ba 0f00 	cmp.w	sl, #0
 801d762:	dd56      	ble.n	801d812 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d764:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d768:	1427      	asrs	r7, r4, #16
 801d76a:	1402      	asrs	r2, r0, #16
 801d76c:	fb0e 7202 	mla	r2, lr, r2, r7
 801d770:	9f00      	ldr	r7, [sp, #0]
 801d772:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d776:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d77a:	d03c      	beq.n	801d7f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d77c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d780:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d784:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d788:	fa5f f28e 	uxtb.w	r2, lr
 801d78c:	b2ff      	uxtb	r7, r7
 801d78e:	f000 80dd 	beq.w	801d94c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d792:	fa1f f882 	uxth.w	r8, r2
 801d796:	43d2      	mvns	r2, r2
 801d798:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d79c:	fb17 f708 	smulbb	r7, r7, r8
 801d7a0:	b2d2      	uxtb	r2, r2
 801d7a2:	fb19 f908 	smulbb	r9, r9, r8
 801d7a6:	fb0e 7702 	mla	r7, lr, r2, r7
 801d7aa:	fb1b f808 	smulbb	r8, fp, r8
 801d7ae:	b2bf      	uxth	r7, r7
 801d7b0:	f107 0e01 	add.w	lr, r7, #1
 801d7b4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d7b8:	123f      	asrs	r7, r7, #8
 801d7ba:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d7be:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d7c2:	fb07 9902 	mla	r9, r7, r2, r9
 801d7c6:	fa1f f989 	uxth.w	r9, r9
 801d7ca:	f109 0701 	add.w	r7, r9, #1
 801d7ce:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d7d2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d7d6:	fb07 8802 	mla	r8, r7, r2, r8
 801d7da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7de:	fa1f f888 	uxth.w	r8, r8
 801d7e2:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d7e6:	f108 0201 	add.w	r2, r8, #1
 801d7ea:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d7ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d7f2:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d7f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d7f8:	3603      	adds	r6, #3
 801d7fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7fe:	4414      	add	r4, r2
 801d800:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d802:	4410      	add	r0, r2
 801d804:	e7ab      	b.n	801d75e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d806:	f04f 0e00 	mov.w	lr, #0
 801d80a:	eba3 020e 	sub.w	r2, r3, lr
 801d80e:	2a00      	cmp	r2, #0
 801d810:	dc3d      	bgt.n	801d88e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d812:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d81a:	441d      	add	r5, r3
 801d81c:	2900      	cmp	r1, #0
 801d81e:	f340 809c 	ble.w	801d95a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d822:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d828:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d82c:	3901      	subs	r1, #1
 801d82e:	eeb0 6a62 	vmov.f32	s12, s5
 801d832:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d836:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d83a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d83e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d842:	eeb0 6a43 	vmov.f32	s12, s6
 801d846:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d84a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d84e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d852:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d856:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d85a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d85e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d862:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d866:	ee12 2a90 	vmov	r2, s5
 801d86a:	eef0 2a47 	vmov.f32	s5, s14
 801d86e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d872:	ee13 2a10 	vmov	r2, s6
 801d876:	930f      	str	r3, [sp, #60]	; 0x3c
 801d878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d87a:	eeb0 3a67 	vmov.f32	s6, s15
 801d87e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d882:	9a01      	ldr	r2, [sp, #4]
 801d884:	9310      	str	r3, [sp, #64]	; 0x40
 801d886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d888:	bf08      	it	eq
 801d88a:	4613      	moveq	r3, r2
 801d88c:	e734      	b.n	801d6f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d88e:	1427      	asrs	r7, r4, #16
 801d890:	d44d      	bmi.n	801d92e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d892:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d896:	42be      	cmp	r6, r7
 801d898:	dd49      	ble.n	801d92e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d89a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d89e:	d446      	bmi.n	801d92e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d8a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d8a4:	4542      	cmp	r2, r8
 801d8a6:	dd42      	ble.n	801d92e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d8a8:	b236      	sxth	r6, r6
 801d8aa:	9a00      	ldr	r2, [sp, #0]
 801d8ac:	fb08 7606 	mla	r6, r8, r6, r7
 801d8b0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d8b4:	0e3a      	lsrs	r2, r7, #24
 801d8b6:	d03a      	beq.n	801d92e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d8b8:	2aff      	cmp	r2, #255	; 0xff
 801d8ba:	b2d6      	uxtb	r6, r2
 801d8bc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d8c0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d8c4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d8c8:	b2ff      	uxtb	r7, r7
 801d8ca:	d037      	beq.n	801d93c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d8cc:	fa1f f986 	uxth.w	r9, r6
 801d8d0:	4472      	add	r2, lr
 801d8d2:	43f6      	mvns	r6, r6
 801d8d4:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d8d8:	fb17 f709 	smulbb	r7, r7, r9
 801d8dc:	fb1a fa09 	smulbb	sl, sl, r9
 801d8e0:	b2f6      	uxtb	r6, r6
 801d8e2:	fb1b f909 	smulbb	r9, fp, r9
 801d8e6:	fb08 7706 	mla	r7, r8, r6, r7
 801d8ea:	b2bf      	uxth	r7, r7
 801d8ec:	f107 0801 	add.w	r8, r7, #1
 801d8f0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d8f4:	123f      	asrs	r7, r7, #8
 801d8f6:	54af      	strb	r7, [r5, r2]
 801d8f8:	442a      	add	r2, r5
 801d8fa:	7857      	ldrb	r7, [r2, #1]
 801d8fc:	fb07 aa06 	mla	sl, r7, r6, sl
 801d900:	fa1f fa8a 	uxth.w	sl, sl
 801d904:	f10a 0701 	add.w	r7, sl, #1
 801d908:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d90c:	7897      	ldrb	r7, [r2, #2]
 801d90e:	fb07 9906 	mla	r9, r7, r6, r9
 801d912:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d916:	fa1f f989 	uxth.w	r9, r9
 801d91a:	f882 a001 	strb.w	sl, [r2, #1]
 801d91e:	f109 0601 	add.w	r6, r9, #1
 801d922:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d926:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d92a:	f882 9002 	strb.w	r9, [r2, #2]
 801d92e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d930:	f10e 0e01 	add.w	lr, lr, #1
 801d934:	4414      	add	r4, r2
 801d936:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d938:	4410      	add	r0, r2
 801d93a:	e766      	b.n	801d80a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d93c:	4472      	add	r2, lr
 801d93e:	54af      	strb	r7, [r5, r2]
 801d940:	442a      	add	r2, r5
 801d942:	f882 a001 	strb.w	sl, [r2, #1]
 801d946:	f882 b002 	strb.w	fp, [r2, #2]
 801d94a:	e7f0      	b.n	801d92e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d94c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d950:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d954:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d958:	e74d      	b.n	801d7f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d95a:	b003      	add	sp, #12
 801d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d960 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d964:	b087      	sub	sp, #28
 801d966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d96a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d96c:	9204      	str	r2, [sp, #16]
 801d96e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d972:	6860      	ldr	r0, [r4, #4]
 801d974:	9205      	str	r2, [sp, #20]
 801d976:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d97a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801d97e:	9101      	str	r1, [sp, #4]
 801d980:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d984:	fb00 2505 	mla	r5, r0, r5, r2
 801d988:	6822      	ldr	r2, [r4, #0]
 801d98a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d98e:	4415      	add	r5, r2
 801d990:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d994:	3201      	adds	r2, #1
 801d996:	f022 0201 	bic.w	r2, r2, #1
 801d99a:	9202      	str	r2, [sp, #8]
 801d99c:	f8dc 2000 	ldr.w	r2, [ip]
 801d9a0:	9203      	str	r2, [sp, #12]
 801d9a2:	9a01      	ldr	r2, [sp, #4]
 801d9a4:	2a00      	cmp	r2, #0
 801d9a6:	dc03      	bgt.n	801d9b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d9a8:	9a04      	ldr	r2, [sp, #16]
 801d9aa:	2a00      	cmp	r2, #0
 801d9ac:	f340 8135 	ble.w	801dc1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d9b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d9b2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d9b6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d9ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d9bc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d9c0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	dd0d      	ble.n	801d9e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d9c8:	1422      	asrs	r2, r4, #16
 801d9ca:	d405      	bmi.n	801d9d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d9cc:	4542      	cmp	r2, r8
 801d9ce:	da03      	bge.n	801d9d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d9d0:	1402      	asrs	r2, r0, #16
 801d9d2:	d401      	bmi.n	801d9d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d9d4:	42ba      	cmp	r2, r7
 801d9d6:	db06      	blt.n	801d9e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d9d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d9da:	4474      	add	r4, lr
 801d9dc:	3b01      	subs	r3, #1
 801d9de:	3503      	adds	r5, #3
 801d9e0:	4410      	add	r0, r2
 801d9e2:	e7ef      	b.n	801d9c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d9e4:	d077      	beq.n	801dad6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d9e6:	1e5a      	subs	r2, r3, #1
 801d9e8:	fb0e 4602 	mla	r6, lr, r2, r4
 801d9ec:	1436      	asrs	r6, r6, #16
 801d9ee:	d469      	bmi.n	801dac4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d9f0:	4546      	cmp	r6, r8
 801d9f2:	da67      	bge.n	801dac4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d9f4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d9f6:	fb06 0202 	mla	r2, r6, r2, r0
 801d9fa:	1412      	asrs	r2, r2, #16
 801d9fc:	d462      	bmi.n	801dac4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d9fe:	42ba      	cmp	r2, r7
 801da00:	da60      	bge.n	801dac4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801da02:	1cee      	adds	r6, r5, #3
 801da04:	4699      	mov	r9, r3
 801da06:	f1b9 0f00 	cmp.w	r9, #0
 801da0a:	dd5f      	ble.n	801dacc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801da0c:	1422      	asrs	r2, r4, #16
 801da0e:	9902      	ldr	r1, [sp, #8]
 801da10:	1407      	asrs	r7, r0, #16
 801da12:	fb01 2707 	mla	r7, r1, r7, r2
 801da16:	9903      	ldr	r1, [sp, #12]
 801da18:	087a      	lsrs	r2, r7, #1
 801da1a:	5c8a      	ldrb	r2, [r1, r2]
 801da1c:	07f9      	lsls	r1, r7, #31
 801da1e:	bf54      	ite	pl
 801da20:	f002 020f 	andpl.w	r2, r2, #15
 801da24:	1112      	asrmi	r2, r2, #4
 801da26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801da2a:	b2d2      	uxtb	r2, r2
 801da2c:	2a00      	cmp	r2, #0
 801da2e:	d042      	beq.n	801dab6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801da30:	497b      	ldr	r1, [pc, #492]	; (801dc20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801da32:	680f      	ldr	r7, [r1, #0]
 801da34:	9905      	ldr	r1, [sp, #20]
 801da36:	fa5f fb87 	uxtb.w	fp, r7
 801da3a:	434a      	muls	r2, r1
 801da3c:	f102 0801 	add.w	r8, r2, #1
 801da40:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801da44:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801da48:	1212      	asrs	r2, r2, #8
 801da4a:	fa1f fa82 	uxth.w	sl, r2
 801da4e:	43d2      	mvns	r2, r2
 801da50:	fb1b fb0a 	smulbb	fp, fp, sl
 801da54:	b2d2      	uxtb	r2, r2
 801da56:	fb08 b802 	mla	r8, r8, r2, fp
 801da5a:	fa1f f888 	uxth.w	r8, r8
 801da5e:	f108 0b01 	add.w	fp, r8, #1
 801da62:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801da66:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801da6a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801da6e:	fb1b fb0a 	smulbb	fp, fp, sl
 801da72:	ea4f 2828 	mov.w	r8, r8, asr #8
 801da76:	fb17 fa0a 	smulbb	sl, r7, sl
 801da7a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801da7e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801da82:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801da86:	fb07 aa02 	mla	sl, r7, r2, sl
 801da8a:	fb08 b802 	mla	r8, r8, r2, fp
 801da8e:	fa1f fa8a 	uxth.w	sl, sl
 801da92:	fa1f f888 	uxth.w	r8, r8
 801da96:	f10a 0701 	add.w	r7, sl, #1
 801da9a:	f108 0b01 	add.w	fp, r8, #1
 801da9e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801daa2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801daa6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801daaa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801daae:	f806 ac01 	strb.w	sl, [r6, #-1]
 801dab2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801dab6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dab8:	4474      	add	r4, lr
 801daba:	3603      	adds	r6, #3
 801dabc:	f109 39ff 	add.w	r9, r9, #4294967295
 801dac0:	4410      	add	r0, r2
 801dac2:	e7a0      	b.n	801da06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801dac4:	2700      	movs	r7, #0
 801dac6:	1bda      	subs	r2, r3, r7
 801dac8:	2a00      	cmp	r2, #0
 801daca:	dc3e      	bgt.n	801db4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801dacc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dad4:	441d      	add	r5, r3
 801dad6:	9b01      	ldr	r3, [sp, #4]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	f340 809e 	ble.w	801dc1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801dade:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dae4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dae8:	eeb0 6a62 	vmov.f32	s12, s5
 801daec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801daf0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801daf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801daf8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801dafc:	eeb0 6a43 	vmov.f32	s12, s6
 801db00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db04:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801db08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db10:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db20:	ee12 2a90 	vmov	r2, s5
 801db24:	eef0 2a47 	vmov.f32	s5, s14
 801db28:	fb92 fef3 	sdiv	lr, r2, r3
 801db2c:	ee13 2a10 	vmov	r2, s6
 801db30:	eeb0 3a67 	vmov.f32	s6, s15
 801db34:	fb92 f3f3 	sdiv	r3, r2, r3
 801db38:	9314      	str	r3, [sp, #80]	; 0x50
 801db3a:	9b01      	ldr	r3, [sp, #4]
 801db3c:	9a04      	ldr	r2, [sp, #16]
 801db3e:	3b01      	subs	r3, #1
 801db40:	9301      	str	r3, [sp, #4]
 801db42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db44:	bf08      	it	eq
 801db46:	4613      	moveq	r3, r2
 801db48:	e72b      	b.n	801d9a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801db4a:	1426      	asrs	r6, r4, #16
 801db4c:	d460      	bmi.n	801dc10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801db4e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801db52:	42b2      	cmp	r2, r6
 801db54:	dd5c      	ble.n	801dc10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801db56:	ea5f 4820 	movs.w	r8, r0, asr #16
 801db5a:	d459      	bmi.n	801dc10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801db5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801db60:	4542      	cmp	r2, r8
 801db62:	dd55      	ble.n	801dc10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801db64:	9a02      	ldr	r2, [sp, #8]
 801db66:	9903      	ldr	r1, [sp, #12]
 801db68:	fb08 6602 	mla	r6, r8, r2, r6
 801db6c:	0872      	lsrs	r2, r6, #1
 801db6e:	07f6      	lsls	r6, r6, #31
 801db70:	5c8a      	ldrb	r2, [r1, r2]
 801db72:	bf54      	ite	pl
 801db74:	f002 020f 	andpl.w	r2, r2, #15
 801db78:	1112      	asrmi	r2, r2, #4
 801db7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801db7e:	b2d2      	uxtb	r2, r2
 801db80:	2a00      	cmp	r2, #0
 801db82:	d045      	beq.n	801dc10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801db84:	4926      	ldr	r1, [pc, #152]	; (801dc20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801db86:	f8d1 8000 	ldr.w	r8, [r1]
 801db8a:	9905      	ldr	r1, [sp, #20]
 801db8c:	fa5f fb88 	uxtb.w	fp, r8
 801db90:	434a      	muls	r2, r1
 801db92:	1c56      	adds	r6, r2, #1
 801db94:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801db98:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801db9c:	1212      	asrs	r2, r2, #8
 801db9e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801dba2:	fa1f fa82 	uxth.w	sl, r2
 801dba6:	43d2      	mvns	r2, r2
 801dba8:	fb1b fb0a 	smulbb	fp, fp, sl
 801dbac:	b2d2      	uxtb	r2, r2
 801dbae:	fb09 b902 	mla	r9, r9, r2, fp
 801dbb2:	fa1f f989 	uxth.w	r9, r9
 801dbb6:	f109 0b01 	add.w	fp, r9, #1
 801dbba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbbe:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801dbc2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801dbc6:	fb1b fb0a 	smulbb	fp, fp, sl
 801dbca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbce:	fb18 fa0a 	smulbb	sl, r8, sl
 801dbd2:	f805 9006 	strb.w	r9, [r5, r6]
 801dbd6:	442e      	add	r6, r5
 801dbd8:	f896 8002 	ldrb.w	r8, [r6, #2]
 801dbdc:	f896 9001 	ldrb.w	r9, [r6, #1]
 801dbe0:	fb08 aa02 	mla	sl, r8, r2, sl
 801dbe4:	fb09 b902 	mla	r9, r9, r2, fp
 801dbe8:	fa1f fa8a 	uxth.w	sl, sl
 801dbec:	fa1f f989 	uxth.w	r9, r9
 801dbf0:	f10a 0801 	add.w	r8, sl, #1
 801dbf4:	f109 0b01 	add.w	fp, r9, #1
 801dbf8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801dbfc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dc00:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dc04:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc08:	f886 a002 	strb.w	sl, [r6, #2]
 801dc0c:	f886 9001 	strb.w	r9, [r6, #1]
 801dc10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc12:	4474      	add	r4, lr
 801dc14:	3701      	adds	r7, #1
 801dc16:	4410      	add	r0, r2
 801dc18:	e755      	b.n	801dac6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801dc1a:	b007      	add	sp, #28
 801dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc20:	20056778 	.word	0x20056778

0801dc24 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc28:	b085      	sub	sp, #20
 801dc2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc30:	9203      	str	r2, [sp, #12]
 801dc32:	6860      	ldr	r0, [r4, #4]
 801dc34:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801dc38:	9100      	str	r1, [sp, #0]
 801dc3a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801dc3e:	fb00 2606 	mla	r6, r0, r6, r2
 801dc42:	6822      	ldr	r2, [r4, #0]
 801dc44:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dc48:	4416      	add	r6, r2
 801dc4a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801dc4e:	3201      	adds	r2, #1
 801dc50:	f022 0201 	bic.w	r2, r2, #1
 801dc54:	9201      	str	r2, [sp, #4]
 801dc56:	f8dc 2000 	ldr.w	r2, [ip]
 801dc5a:	9202      	str	r2, [sp, #8]
 801dc5c:	9a00      	ldr	r2, [sp, #0]
 801dc5e:	2a00      	cmp	r2, #0
 801dc60:	dc03      	bgt.n	801dc6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801dc62:	9a03      	ldr	r2, [sp, #12]
 801dc64:	2a00      	cmp	r2, #0
 801dc66:	f340 8140 	ble.w	801deea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801dc6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dc6c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dc70:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801dc74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc76:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dc7a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	dd0e      	ble.n	801dca0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc82:	142a      	asrs	r2, r5, #16
 801dc84:	d405      	bmi.n	801dc92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dc86:	4572      	cmp	r2, lr
 801dc88:	da03      	bge.n	801dc92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dc8a:	1422      	asrs	r2, r4, #16
 801dc8c:	d401      	bmi.n	801dc92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dc8e:	42ba      	cmp	r2, r7
 801dc90:	db07      	blt.n	801dca2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dc92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dc94:	3b01      	subs	r3, #1
 801dc96:	3603      	adds	r6, #3
 801dc98:	4415      	add	r5, r2
 801dc9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dc9c:	4414      	add	r4, r2
 801dc9e:	e7ee      	b.n	801dc7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801dca0:	d072      	beq.n	801dd88 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dca2:	1e5a      	subs	r2, r3, #1
 801dca4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dca6:	fb00 5002 	mla	r0, r0, r2, r5
 801dcaa:	1400      	asrs	r0, r0, #16
 801dcac:	d463      	bmi.n	801dd76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801dcae:	4570      	cmp	r0, lr
 801dcb0:	da61      	bge.n	801dd76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801dcb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dcb4:	fb00 4202 	mla	r2, r0, r2, r4
 801dcb8:	1412      	asrs	r2, r2, #16
 801dcba:	d45c      	bmi.n	801dd76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801dcbc:	42ba      	cmp	r2, r7
 801dcbe:	da5a      	bge.n	801dd76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801dcc0:	1cf0      	adds	r0, r6, #3
 801dcc2:	469a      	mov	sl, r3
 801dcc4:	f1ba 0f00 	cmp.w	sl, #0
 801dcc8:	dd59      	ble.n	801dd7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801dcca:	142a      	asrs	r2, r5, #16
 801dccc:	9901      	ldr	r1, [sp, #4]
 801dcce:	1427      	asrs	r7, r4, #16
 801dcd0:	fb01 2707 	mla	r7, r1, r7, r2
 801dcd4:	9902      	ldr	r1, [sp, #8]
 801dcd6:	087a      	lsrs	r2, r7, #1
 801dcd8:	5c8a      	ldrb	r2, [r1, r2]
 801dcda:	07f9      	lsls	r1, r7, #31
 801dcdc:	bf54      	ite	pl
 801dcde:	f002 020f 	andpl.w	r2, r2, #15
 801dce2:	1112      	asrmi	r2, r2, #4
 801dce4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dce8:	b2d2      	uxtb	r2, r2
 801dcea:	2a00      	cmp	r2, #0
 801dcec:	d03b      	beq.n	801dd66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801dcee:	4980      	ldr	r1, [pc, #512]	; (801def0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801dcf0:	2aff      	cmp	r2, #255	; 0xff
 801dcf2:	680f      	ldr	r7, [r1, #0]
 801dcf4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801dcf8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801dcfc:	b2ff      	uxtb	r7, r7
 801dcfe:	f000 80ed 	beq.w	801dedc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801dd02:	fa1f f882 	uxth.w	r8, r2
 801dd06:	43d2      	mvns	r2, r2
 801dd08:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801dd0c:	fb17 f708 	smulbb	r7, r7, r8
 801dd10:	b2d2      	uxtb	r2, r2
 801dd12:	fb19 f908 	smulbb	r9, r9, r8
 801dd16:	fb0e 7702 	mla	r7, lr, r2, r7
 801dd1a:	fb1b f808 	smulbb	r8, fp, r8
 801dd1e:	b2bf      	uxth	r7, r7
 801dd20:	f107 0e01 	add.w	lr, r7, #1
 801dd24:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dd28:	123f      	asrs	r7, r7, #8
 801dd2a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801dd2e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801dd32:	fb07 9902 	mla	r9, r7, r2, r9
 801dd36:	fa1f f989 	uxth.w	r9, r9
 801dd3a:	f109 0701 	add.w	r7, r9, #1
 801dd3e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801dd42:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801dd46:	fb07 8802 	mla	r8, r7, r2, r8
 801dd4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dd4e:	fa1f f888 	uxth.w	r8, r8
 801dd52:	f800 9c02 	strb.w	r9, [r0, #-2]
 801dd56:	f108 0201 	add.w	r2, r8, #1
 801dd5a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801dd5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd62:	f800 8c01 	strb.w	r8, [r0, #-1]
 801dd66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd68:	3003      	adds	r0, #3
 801dd6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd6e:	4415      	add	r5, r2
 801dd70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dd72:	4414      	add	r4, r2
 801dd74:	e7a6      	b.n	801dcc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dd76:	2700      	movs	r7, #0
 801dd78:	1bda      	subs	r2, r3, r7
 801dd7a:	2a00      	cmp	r2, #0
 801dd7c:	dc40      	bgt.n	801de00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801dd7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd86:	441e      	add	r6, r3
 801dd88:	9b00      	ldr	r3, [sp, #0]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	f340 80ad 	ble.w	801deea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801dd90:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd9a:	eeb0 6a62 	vmov.f32	s12, s5
 801dd9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dda2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dda6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddaa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ddae:	eeb0 6a43 	vmov.f32	s12, s6
 801ddb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddb6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ddba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ddbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ddc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ddc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ddca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ddce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ddd2:	ee12 2a90 	vmov	r2, s5
 801ddd6:	eef0 2a47 	vmov.f32	s5, s14
 801ddda:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddde:	ee13 2a10 	vmov	r2, s6
 801dde2:	9311      	str	r3, [sp, #68]	; 0x44
 801dde4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dde6:	eeb0 3a67 	vmov.f32	s6, s15
 801ddea:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddee:	9312      	str	r3, [sp, #72]	; 0x48
 801ddf0:	9b00      	ldr	r3, [sp, #0]
 801ddf2:	9a03      	ldr	r2, [sp, #12]
 801ddf4:	3b01      	subs	r3, #1
 801ddf6:	9300      	str	r3, [sp, #0]
 801ddf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddfa:	bf08      	it	eq
 801ddfc:	4613      	moveq	r3, r2
 801ddfe:	e72d      	b.n	801dc5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801de00:	1428      	asrs	r0, r5, #16
 801de02:	d45c      	bmi.n	801debe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801de04:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801de08:	4282      	cmp	r2, r0
 801de0a:	dd58      	ble.n	801debe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801de0c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801de10:	d455      	bmi.n	801debe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801de12:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801de16:	4572      	cmp	r2, lr
 801de18:	dd51      	ble.n	801debe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801de1a:	9a01      	ldr	r2, [sp, #4]
 801de1c:	9902      	ldr	r1, [sp, #8]
 801de1e:	fb0e 0002 	mla	r0, lr, r2, r0
 801de22:	0842      	lsrs	r2, r0, #1
 801de24:	07c0      	lsls	r0, r0, #31
 801de26:	5c8a      	ldrb	r2, [r1, r2]
 801de28:	bf54      	ite	pl
 801de2a:	f002 020f 	andpl.w	r2, r2, #15
 801de2e:	1112      	asrmi	r2, r2, #4
 801de30:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801de34:	b2d2      	uxtb	r2, r2
 801de36:	2a00      	cmp	r2, #0
 801de38:	d041      	beq.n	801debe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801de3a:	492d      	ldr	r1, [pc, #180]	; (801def0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801de3c:	2aff      	cmp	r2, #255	; 0xff
 801de3e:	6808      	ldr	r0, [r1, #0]
 801de40:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801de44:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801de48:	fa5f fe80 	uxtb.w	lr, r0
 801de4c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801de50:	d03b      	beq.n	801deca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801de52:	fa1f f982 	uxth.w	r9, r2
 801de56:	4438      	add	r0, r7
 801de58:	43d2      	mvns	r2, r2
 801de5a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801de5e:	fb1e fe09 	smulbb	lr, lr, r9
 801de62:	fb1a fa09 	smulbb	sl, sl, r9
 801de66:	b2d2      	uxtb	r2, r2
 801de68:	fb1b f909 	smulbb	r9, fp, r9
 801de6c:	fb08 ee02 	mla	lr, r8, r2, lr
 801de70:	fa1f fe8e 	uxth.w	lr, lr
 801de74:	f10e 0801 	add.w	r8, lr, #1
 801de78:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801de7c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801de80:	f806 e000 	strb.w	lr, [r6, r0]
 801de84:	4430      	add	r0, r6
 801de86:	f890 e001 	ldrb.w	lr, [r0, #1]
 801de8a:	fb0e aa02 	mla	sl, lr, r2, sl
 801de8e:	fa1f fa8a 	uxth.w	sl, sl
 801de92:	f10a 0e01 	add.w	lr, sl, #1
 801de96:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801de9a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801de9e:	fb0e 9902 	mla	r9, lr, r2, r9
 801dea2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dea6:	fa1f f989 	uxth.w	r9, r9
 801deaa:	f880 a001 	strb.w	sl, [r0, #1]
 801deae:	f109 0201 	add.w	r2, r9, #1
 801deb2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801deb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801deba:	f880 9002 	strb.w	r9, [r0, #2]
 801debe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dec0:	3701      	adds	r7, #1
 801dec2:	4415      	add	r5, r2
 801dec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dec6:	4414      	add	r4, r2
 801dec8:	e756      	b.n	801dd78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801deca:	4438      	add	r0, r7
 801decc:	f806 e000 	strb.w	lr, [r6, r0]
 801ded0:	4430      	add	r0, r6
 801ded2:	f880 a001 	strb.w	sl, [r0, #1]
 801ded6:	f880 b002 	strb.w	fp, [r0, #2]
 801deda:	e7f0      	b.n	801debe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801dedc:	f800 7c03 	strb.w	r7, [r0, #-3]
 801dee0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801dee4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801dee8:	e73d      	b.n	801dd66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801deea:	b005      	add	sp, #20
 801deec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def0:	20056778 	.word	0x20056778

0801def4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801def4:	4770      	bx	lr

0801def6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801def6:	4770      	bx	lr

0801def8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801def8:	4770      	bx	lr

0801defa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801defa:	4770      	bx	lr

0801defc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801defc:	4770      	bx	lr

0801defe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801defe:	4770      	bx	lr

0801df00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801df00:	4770      	bx	lr

0801df02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801df02:	4770      	bx	lr

0801df04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801df04:	4770      	bx	lr

0801df06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801df06:	4770      	bx	lr

0801df08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801df08:	4770      	bx	lr

0801df0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801df0a:	4770      	bx	lr

0801df0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801df0c:	4770      	bx	lr

0801df0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801df0e:	4770      	bx	lr

0801df10 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801df10:	4770      	bx	lr

0801df12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801df12:	4770      	bx	lr

0801df14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801df14:	4770      	bx	lr

0801df16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801df16:	4770      	bx	lr

0801df18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801df18:	4770      	bx	lr

0801df1a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801df1a:	4770      	bx	lr

0801df1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801df1c:	2bff      	cmp	r3, #255	; 0xff
 801df1e:	b508      	push	{r3, lr}
 801df20:	d04f      	beq.n	801dfc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801df22:	2a2c      	cmp	r2, #44	; 0x2c
 801df24:	d032      	beq.n	801df8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801df26:	d80f      	bhi.n	801df48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801df28:	2a08      	cmp	r2, #8
 801df2a:	d046      	beq.n	801dfba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801df2c:	d805      	bhi.n	801df3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801df2e:	2a04      	cmp	r2, #4
 801df30:	d041      	beq.n	801dfb6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801df32:	2a05      	cmp	r2, #5
 801df34:	d03d      	beq.n	801dfb2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801df36:	2000      	movs	r0, #0
 801df38:	e027      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801df3a:	2a0a      	cmp	r2, #10
 801df3c:	d03d      	beq.n	801dfba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801df3e:	d301      	bcc.n	801df44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801df40:	2a0b      	cmp	r2, #11
 801df42:	d1f8      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801df44:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801df46:	e020      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801df48:	2a30      	cmp	r2, #48	; 0x30
 801df4a:	d038      	beq.n	801dfbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801df4c:	d808      	bhi.n	801df60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801df4e:	2a2e      	cmp	r2, #46	; 0x2e
 801df50:	684b      	ldr	r3, [r1, #4]
 801df52:	d029      	beq.n	801dfa8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801df54:	d90b      	bls.n	801df6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801df56:	781b      	ldrb	r3, [r3, #0]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d1ec      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801df5c:	6a00      	ldr	r0, [r0, #32]
 801df5e:	e014      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801df60:	2a32      	cmp	r2, #50	; 0x32
 801df62:	d02c      	beq.n	801dfbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801df64:	d301      	bcc.n	801df6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801df66:	2a33      	cmp	r2, #51	; 0x33
 801df68:	d1e5      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801df6a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801df6c:	e00d      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801df6e:	781b      	ldrb	r3, [r3, #0]
 801df70:	2b01      	cmp	r3, #1
 801df72:	d009      	beq.n	801df88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801df74:	d3f2      	bcc.n	801df5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801df76:	2b02      	cmp	r3, #2
 801df78:	d1dd      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801df7a:	4b39      	ldr	r3, [pc, #228]	; (801e060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801df7c:	f240 4186 	movw	r1, #1158	; 0x486
 801df80:	4a38      	ldr	r2, [pc, #224]	; (801e064 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801df82:	4839      	ldr	r0, [pc, #228]	; (801e068 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801df84:	f008 fa94 	bl	80264b0 <__assert_func>
 801df88:	6900      	ldr	r0, [r0, #16]
 801df8a:	bd08      	pop	{r3, pc}
 801df8c:	684b      	ldr	r3, [r1, #4]
 801df8e:	781b      	ldrb	r3, [r3, #0]
 801df90:	2b01      	cmp	r3, #1
 801df92:	d007      	beq.n	801dfa4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801df94:	d30b      	bcc.n	801dfae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801df96:	2b02      	cmp	r3, #2
 801df98:	d1cd      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801df9a:	4b31      	ldr	r3, [pc, #196]	; (801e060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801df9c:	f240 4192 	movw	r1, #1170	; 0x492
 801dfa0:	4a30      	ldr	r2, [pc, #192]	; (801e064 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801dfa2:	e7ee      	b.n	801df82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801dfa4:	6880      	ldr	r0, [r0, #8]
 801dfa6:	e7f0      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfa8:	781b      	ldrb	r3, [r3, #0]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d1c3      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dfae:	6980      	ldr	r0, [r0, #24]
 801dfb0:	e7eb      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfb2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801dfb4:	e7e9      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801dfb8:	e7e7      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801dfbc:	e7e5      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfbe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801dfc0:	e7e3      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfc2:	2a2c      	cmp	r2, #44	; 0x2c
 801dfc4:	d030      	beq.n	801e028 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801dfc6:	d80f      	bhi.n	801dfe8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801dfc8:	2a08      	cmp	r2, #8
 801dfca:	d044      	beq.n	801e056 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801dfcc:	d805      	bhi.n	801dfda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801dfce:	2a04      	cmp	r2, #4
 801dfd0:	d03f      	beq.n	801e052 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801dfd2:	2a05      	cmp	r2, #5
 801dfd4:	d1af      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dfd6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801dfd8:	e7d7      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfda:	2a0a      	cmp	r2, #10
 801dfdc:	d03b      	beq.n	801e056 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801dfde:	d301      	bcc.n	801dfe4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801dfe0:	2a0b      	cmp	r2, #11
 801dfe2:	d1a8      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dfe4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801dfe6:	e7d0      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dfe8:	2a30      	cmp	r2, #48	; 0x30
 801dfea:	d036      	beq.n	801e05a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801dfec:	d808      	bhi.n	801e000 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801dfee:	2a2e      	cmp	r2, #46	; 0x2e
 801dff0:	684b      	ldr	r3, [r1, #4]
 801dff2:	d028      	beq.n	801e046 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801dff4:	d90b      	bls.n	801e00e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801dff6:	781b      	ldrb	r3, [r3, #0]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d19c      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dffc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801dffe:	e7c4      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e000:	2a32      	cmp	r2, #50	; 0x32
 801e002:	d02a      	beq.n	801e05a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e004:	d301      	bcc.n	801e00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e006:	2a33      	cmp	r2, #51	; 0x33
 801e008:	d195      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e00a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e00c:	e7bd      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e00e:	781b      	ldrb	r3, [r3, #0]
 801e010:	2b01      	cmp	r3, #1
 801e012:	d007      	beq.n	801e024 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801e014:	d3f2      	bcc.n	801dffc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e016:	2b02      	cmp	r3, #2
 801e018:	d18d      	bne.n	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e01a:	4b11      	ldr	r3, [pc, #68]	; (801e060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e01c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801e020:	4a10      	ldr	r2, [pc, #64]	; (801e064 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e022:	e7ae      	b.n	801df82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e024:	6940      	ldr	r0, [r0, #20]
 801e026:	e7b0      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e028:	684b      	ldr	r3, [r1, #4]
 801e02a:	781b      	ldrb	r3, [r3, #0]
 801e02c:	2b01      	cmp	r3, #1
 801e02e:	d008      	beq.n	801e042 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e030:	d30d      	bcc.n	801e04e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e032:	2b02      	cmp	r3, #2
 801e034:	f47f af7f 	bne.w	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e038:	4b09      	ldr	r3, [pc, #36]	; (801e060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e03a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801e03e:	4a09      	ldr	r2, [pc, #36]	; (801e064 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e040:	e79f      	b.n	801df82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e042:	68c0      	ldr	r0, [r0, #12]
 801e044:	e7a1      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e046:	781b      	ldrb	r3, [r3, #0]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	f47f af74 	bne.w	801df36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e04e:	69c0      	ldr	r0, [r0, #28]
 801e050:	e79b      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e052:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e054:	e799      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e056:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e058:	e797      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e05a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e05c:	e795      	b.n	801df8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e05e:	bf00      	nop
 801e060:	0802e315 	.word	0x0802e315
 801e064:	0802eb38 	.word	0x0802eb38
 801e068:	0802e361 	.word	0x0802e361

0801e06c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e070:	b085      	sub	sp, #20
 801e072:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801e076:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e078:	f1be 0f00 	cmp.w	lr, #0
 801e07c:	f000 8114 	beq.w	801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e080:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801e084:	f1bc 0f00 	cmp.w	ip, #0
 801e088:	f340 810e 	ble.w	801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e08c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e090:	2800      	cmp	r0, #0
 801e092:	f340 8109 	ble.w	801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e096:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801e09a:	4350      	muls	r0, r2
 801e09c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0a0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801e0a4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801e0a8:	eba2 060c 	sub.w	r6, r2, ip
 801e0ac:	fb02 3305 	mla	r3, r2, r5, r3
 801e0b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e0b4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e0b8:	fa5f f88b 	uxtb.w	r8, fp
 801e0bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0c0:	fa5f f78a 	uxtb.w	r7, sl
 801e0c4:	4419      	add	r1, r3
 801e0c6:	fa5f f984 	uxtb.w	r9, r4
 801e0ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e0ce:	4408      	add	r0, r1
 801e0d0:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801e0d4:	d03e      	beq.n	801e154 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801e0d6:	fa1f f58e 	uxth.w	r5, lr
 801e0da:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801e0de:	4463      	add	r3, ip
 801e0e0:	fb08 f405 	mul.w	r4, r8, r5
 801e0e4:	b292      	uxth	r2, r2
 801e0e6:	436f      	muls	r7, r5
 801e0e8:	fb09 f505 	mul.w	r5, r9, r5
 801e0ec:	4281      	cmp	r1, r0
 801e0ee:	f080 80db 	bcs.w	801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e0f2:	eb01 0c03 	add.w	ip, r1, r3
 801e0f6:	458c      	cmp	ip, r1
 801e0f8:	f101 0e03 	add.w	lr, r1, #3
 801e0fc:	d928      	bls.n	801e150 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801e0fe:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e102:	fb11 f102 	smulbb	r1, r1, r2
 801e106:	4429      	add	r1, r5
 801e108:	b289      	uxth	r1, r1
 801e10a:	f101 0801 	add.w	r8, r1, #1
 801e10e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e112:	1209      	asrs	r1, r1, #8
 801e114:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e118:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801e11c:	fb11 f102 	smulbb	r1, r1, r2
 801e120:	4439      	add	r1, r7
 801e122:	b289      	uxth	r1, r1
 801e124:	f101 0801 	add.w	r8, r1, #1
 801e128:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e12c:	1209      	asrs	r1, r1, #8
 801e12e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e132:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e136:	fb11 f102 	smulbb	r1, r1, r2
 801e13a:	4421      	add	r1, r4
 801e13c:	b289      	uxth	r1, r1
 801e13e:	f101 0801 	add.w	r8, r1, #1
 801e142:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e146:	1209      	asrs	r1, r1, #8
 801e148:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e14c:	4671      	mov	r1, lr
 801e14e:	e7d2      	b.n	801e0f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801e150:	4431      	add	r1, r6
 801e152:	e7cb      	b.n	801e0ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801e154:	f012 0503 	ands.w	r5, r2, #3
 801e158:	d00f      	beq.n	801e17a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801e15a:	4463      	add	r3, ip
 801e15c:	4281      	cmp	r1, r0
 801e15e:	f080 80a3 	bcs.w	801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e162:	18ca      	adds	r2, r1, r3
 801e164:	4291      	cmp	r1, r2
 801e166:	f080 809d 	bcs.w	801e2a4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801e16a:	f881 9000 	strb.w	r9, [r1]
 801e16e:	3103      	adds	r1, #3
 801e170:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e174:	f801 8c01 	strb.w	r8, [r1, #-1]
 801e178:	e7f4      	b.n	801e164 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e17a:	f001 0603 	and.w	r6, r1, #3
 801e17e:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801e182:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801e186:	4463      	add	r3, ip
 801e188:	2e02      	cmp	r6, #2
 801e18a:	b2bf      	uxth	r7, r7
 801e18c:	fa1f fa8a 	uxth.w	sl, sl
 801e190:	d017      	beq.n	801e1c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801e192:	2e03      	cmp	r6, #3
 801e194:	d00c      	beq.n	801e1b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801e196:	2e01      	cmp	r6, #1
 801e198:	d11f      	bne.n	801e1da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e19a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e19e:	460d      	mov	r5, r1
 801e1a0:	4285      	cmp	r5, r0
 801e1a2:	d230      	bcs.n	801e206 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801e1a4:	f885 9000 	strb.w	r9, [r5]
 801e1a8:	f8a5 7001 	strh.w	r7, [r5, #1]
 801e1ac:	4435      	add	r5, r6
 801e1ae:	e7f7      	b.n	801e1a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801e1b0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e1b4:	460d      	mov	r5, r1
 801e1b6:	4285      	cmp	r5, r0
 801e1b8:	d20c      	bcs.n	801e1d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e1ba:	f885 9000 	strb.w	r9, [r5]
 801e1be:	4435      	add	r5, r6
 801e1c0:	e7f9      	b.n	801e1b6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801e1c2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e1c6:	460d      	mov	r5, r1
 801e1c8:	4285      	cmp	r5, r0
 801e1ca:	d218      	bcs.n	801e1fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801e1cc:	f8a5 a000 	strh.w	sl, [r5]
 801e1d0:	4435      	add	r5, r6
 801e1d2:	e7f9      	b.n	801e1c8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801e1d4:	3b01      	subs	r3, #1
 801e1d6:	3101      	adds	r1, #1
 801e1d8:	2501      	movs	r5, #1
 801e1da:	f003 0603 	and.w	r6, r3, #3
 801e1de:	2e02      	cmp	r6, #2
 801e1e0:	d021      	beq.n	801e226 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801e1e2:	2e03      	cmp	r6, #3
 801e1e4:	d013      	beq.n	801e20e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801e1e6:	2e01      	cmp	r6, #1
 801e1e8:	d126      	bne.n	801e238 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e1ea:	3b01      	subs	r3, #1
 801e1ec:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801e1f0:	18ce      	adds	r6, r1, r3
 801e1f2:	4286      	cmp	r6, r0
 801e1f4:	d220      	bcs.n	801e238 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e1f6:	f886 8000 	strb.w	r8, [r6]
 801e1fa:	443e      	add	r6, r7
 801e1fc:	e7f9      	b.n	801e1f2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801e1fe:	3b02      	subs	r3, #2
 801e200:	3102      	adds	r1, #2
 801e202:	2502      	movs	r5, #2
 801e204:	e7e9      	b.n	801e1da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e206:	3b03      	subs	r3, #3
 801e208:	3103      	adds	r1, #3
 801e20a:	2500      	movs	r5, #0
 801e20c:	e7e5      	b.n	801e1da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e20e:	3b03      	subs	r3, #3
 801e210:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801e214:	18ce      	adds	r6, r1, r3
 801e216:	4286      	cmp	r6, r0
 801e218:	d20e      	bcs.n	801e238 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e21a:	f8a6 a000 	strh.w	sl, [r6]
 801e21e:	f886 8002 	strb.w	r8, [r6, #2]
 801e222:	443e      	add	r6, r7
 801e224:	e7f7      	b.n	801e216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801e226:	3b02      	subs	r3, #2
 801e228:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801e22c:	18ce      	adds	r6, r1, r3
 801e22e:	4286      	cmp	r6, r0
 801e230:	d202      	bcs.n	801e238 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e232:	8037      	strh	r7, [r6, #0]
 801e234:	4466      	add	r6, ip
 801e236:	e7fa      	b.n	801e22e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801e238:	079e      	lsls	r6, r3, #30
 801e23a:	d006      	beq.n	801e24a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801e23c:	4b1c      	ldr	r3, [pc, #112]	; (801e2b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801e23e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801e242:	4a1c      	ldr	r2, [pc, #112]	; (801e2b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801e244:	481c      	ldr	r0, [pc, #112]	; (801e2b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801e246:	f008 f933 	bl	80264b0 <__assert_func>
 801e24a:	b36b      	cbz	r3, 801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e24c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801e250:	109b      	asrs	r3, r3, #2
 801e252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e256:	2703      	movs	r7, #3
 801e258:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801e25c:	9601      	str	r6, [sp, #4]
 801e25e:	0426      	lsls	r6, r4, #16
 801e260:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801e264:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801e268:	9602      	str	r6, [sp, #8]
 801e26a:	009e      	lsls	r6, r3, #2
 801e26c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801e270:	9403      	str	r4, [sp, #12]
 801e272:	009b      	lsls	r3, r3, #2
 801e274:	4281      	cmp	r1, r0
 801e276:	d217      	bcs.n	801e2a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e278:	eb01 0c06 	add.w	ip, r1, r6
 801e27c:	462a      	mov	r2, r5
 801e27e:	4561      	cmp	r1, ip
 801e280:	d20e      	bcs.n	801e2a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801e282:	f10d 0e10 	add.w	lr, sp, #16
 801e286:	1c54      	adds	r4, r2, #1
 801e288:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801e28c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801e290:	f841 2b04 	str.w	r2, [r1], #4
 801e294:	fb94 f2f7 	sdiv	r2, r4, r7
 801e298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e29c:	1aa2      	subs	r2, r4, r2
 801e29e:	e7ee      	b.n	801e27e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801e2a0:	4419      	add	r1, r3
 801e2a2:	e7e7      	b.n	801e274 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801e2a4:	4431      	add	r1, r6
 801e2a6:	e759      	b.n	801e15c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801e2a8:	b005      	add	sp, #20
 801e2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2ae:	bf00      	nop
 801e2b0:	0802e231 	.word	0x0802e231
 801e2b4:	0802e882 	.word	0x0802e882
 801e2b8:	0802e361 	.word	0x0802e361

0801e2bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e2bc:	b508      	push	{r3, lr}
 801e2be:	4b06      	ldr	r3, [pc, #24]	; (801e2d8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801e2c0:	8818      	ldrh	r0, [r3, #0]
 801e2c2:	b928      	cbnz	r0, 801e2d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801e2c4:	4b05      	ldr	r3, [pc, #20]	; (801e2dc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801e2c6:	214d      	movs	r1, #77	; 0x4d
 801e2c8:	4a05      	ldr	r2, [pc, #20]	; (801e2e0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801e2ca:	4806      	ldr	r0, [pc, #24]	; (801e2e4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801e2cc:	f008 f8f0 	bl	80264b0 <__assert_func>
 801e2d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e2d4:	b280      	uxth	r0, r0
 801e2d6:	bd08      	pop	{r3, pc}
 801e2d8:	2005674a 	.word	0x2005674a
 801e2dc:	0802e5ae 	.word	0x0802e5ae
 801e2e0:	0802eafd 	.word	0x0802eafd
 801e2e4:	0802e5f0 	.word	0x0802e5f0

0801e2e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e2ec:	b08b      	sub	sp, #44	; 0x2c
 801e2ee:	460d      	mov	r5, r1
 801e2f0:	4616      	mov	r6, r2
 801e2f2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801e2f6:	f1b8 0f00 	cmp.w	r8, #0
 801e2fa:	d045      	beq.n	801e388 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801e2fc:	6810      	ldr	r0, [r2, #0]
 801e2fe:	ac06      	add	r4, sp, #24
 801e300:	6851      	ldr	r1, [r2, #4]
 801e302:	4f50      	ldr	r7, [pc, #320]	; (801e444 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801e304:	c403      	stmia	r4!, {r0, r1}
 801e306:	6818      	ldr	r0, [r3, #0]
 801e308:	ac08      	add	r4, sp, #32
 801e30a:	6859      	ldr	r1, [r3, #4]
 801e30c:	c403      	stmia	r4!, {r0, r1}
 801e30e:	a806      	add	r0, sp, #24
 801e310:	f7fa fe62 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e314:	4631      	mov	r1, r6
 801e316:	a808      	add	r0, sp, #32
 801e318:	f7fa fe46 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e31c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e320:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e324:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e328:	6838      	ldr	r0, [r7, #0]
 801e32a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e32e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801e332:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801e336:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e33a:	440d      	add	r5, r1
 801e33c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e340:	440a      	add	r2, r1
 801e342:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e346:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e34a:	4413      	add	r3, r2
 801e34c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e350:	6803      	ldr	r3, [r0, #0]
 801e352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e354:	4798      	blx	r3
 801e356:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e35a:	d018      	beq.n	801e38e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801e35c:	f010 0f04 	tst.w	r0, #4
 801e360:	6838      	ldr	r0, [r7, #0]
 801e362:	d017      	beq.n	801e394 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e364:	2700      	movs	r7, #0
 801e366:	6801      	ldr	r1, [r0, #0]
 801e368:	b2a4      	uxth	r4, r4
 801e36a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e36e:	b2b6      	uxth	r6, r6
 801e370:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e374:	9401      	str	r4, [sp, #4]
 801e376:	9600      	str	r6, [sp, #0]
 801e378:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801e37c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801e380:	9702      	str	r7, [sp, #8]
 801e382:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801e384:	4629      	mov	r1, r5
 801e386:	47a0      	blx	r4
 801e388:	b00b      	add	sp, #44	; 0x2c
 801e38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e38e:	f010 0f01 	tst.w	r0, #1
 801e392:	e7e5      	b.n	801e360 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801e394:	6803      	ldr	r3, [r0, #0]
 801e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e398:	4798      	blx	r3
 801e39a:	4a2b      	ldr	r2, [pc, #172]	; (801e448 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801e39c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e3a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e3a4:	8813      	ldrh	r3, [r2, #0]
 801e3a6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801e3aa:	fb03 f404 	mul.w	r4, r3, r4
 801e3ae:	fb03 c101 	mla	r1, r3, r1, ip
 801e3b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e3b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e3ba:	4408      	add	r0, r1
 801e3bc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801e3c0:	4404      	add	r4, r0
 801e3c2:	d02e      	beq.n	801e422 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801e3c4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e3c8:	1b9b      	subs	r3, r3, r6
 801e3ca:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801e3ce:	1b96      	subs	r6, r2, r6
 801e3d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e3d8:	42a0      	cmp	r0, r4
 801e3da:	d22d      	bcs.n	801e438 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801e3dc:	eb00 0e01 	add.w	lr, r0, r1
 801e3e0:	4570      	cmp	r0, lr
 801e3e2:	d210      	bcs.n	801e406 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801e3e4:	f890 9000 	ldrb.w	r9, [r0]
 801e3e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801e3ec:	fb19 f90c 	smulbb	r9, r9, ip
 801e3f0:	fb02 9208 	mla	r2, r2, r8, r9
 801e3f4:	b292      	uxth	r2, r2
 801e3f6:	f102 0901 	add.w	r9, r2, #1
 801e3fa:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801e3fe:	1212      	asrs	r2, r2, #8
 801e400:	f800 2b01 	strb.w	r2, [r0], #1
 801e404:	e7ec      	b.n	801e3e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801e406:	4418      	add	r0, r3
 801e408:	4435      	add	r5, r6
 801e40a:	e7e5      	b.n	801e3d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801e40c:	8813      	ldrh	r3, [r2, #0]
 801e40e:	1b9b      	subs	r3, r3, r6
 801e410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e414:	4418      	add	r0, r3
 801e416:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e41a:	1b9b      	subs	r3, r3, r6
 801e41c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e420:	441d      	add	r5, r3
 801e422:	42a0      	cmp	r0, r4
 801e424:	d208      	bcs.n	801e438 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801e426:	eb00 0c01 	add.w	ip, r0, r1
 801e42a:	4560      	cmp	r0, ip
 801e42c:	d2ee      	bcs.n	801e40c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801e42e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e432:	f800 3b01 	strb.w	r3, [r0], #1
 801e436:	e7f8      	b.n	801e42a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801e438:	6838      	ldr	r0, [r7, #0]
 801e43a:	6803      	ldr	r3, [r0, #0]
 801e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e43e:	4798      	blx	r3
 801e440:	e7a2      	b.n	801e388 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801e442:	bf00      	nop
 801e444:	20056750 	.word	0x20056750
 801e448:	2005674a 	.word	0x2005674a

0801e44c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e44c:	b510      	push	{r4, lr}
 801e44e:	4604      	mov	r4, r0
 801e450:	2104      	movs	r1, #4
 801e452:	f007 fef8 	bl	8026246 <_ZdlPvj>
 801e456:	4620      	mov	r0, r4
 801e458:	bd10      	pop	{r4, pc}

0801e45a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e45a:	b510      	push	{r4, lr}
 801e45c:	4604      	mov	r4, r0
 801e45e:	2104      	movs	r1, #4
 801e460:	f007 fef1 	bl	8026246 <_ZdlPvj>
 801e464:	4620      	mov	r0, r4
 801e466:	bd10      	pop	{r4, pc}

0801e468 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e468:	b510      	push	{r4, lr}
 801e46a:	4604      	mov	r4, r0
 801e46c:	2104      	movs	r1, #4
 801e46e:	f007 feea 	bl	8026246 <_ZdlPvj>
 801e472:	4620      	mov	r0, r4
 801e474:	bd10      	pop	{r4, pc}

0801e476 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e476:	b510      	push	{r4, lr}
 801e478:	4604      	mov	r4, r0
 801e47a:	2104      	movs	r1, #4
 801e47c:	f007 fee3 	bl	8026246 <_ZdlPvj>
 801e480:	4620      	mov	r0, r4
 801e482:	bd10      	pop	{r4, pc}

0801e484 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e484:	b510      	push	{r4, lr}
 801e486:	4604      	mov	r4, r0
 801e488:	2104      	movs	r1, #4
 801e48a:	f007 fedc 	bl	8026246 <_ZdlPvj>
 801e48e:	4620      	mov	r0, r4
 801e490:	bd10      	pop	{r4, pc}

0801e492 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e492:	b510      	push	{r4, lr}
 801e494:	4604      	mov	r4, r0
 801e496:	2104      	movs	r1, #4
 801e498:	f007 fed5 	bl	8026246 <_ZdlPvj>
 801e49c:	4620      	mov	r0, r4
 801e49e:	bd10      	pop	{r4, pc}

0801e4a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e4a0:	b510      	push	{r4, lr}
 801e4a2:	4604      	mov	r4, r0
 801e4a4:	2104      	movs	r1, #4
 801e4a6:	f007 fece 	bl	8026246 <_ZdlPvj>
 801e4aa:	4620      	mov	r0, r4
 801e4ac:	bd10      	pop	{r4, pc}

0801e4ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e4ae:	b510      	push	{r4, lr}
 801e4b0:	4604      	mov	r4, r0
 801e4b2:	2104      	movs	r1, #4
 801e4b4:	f007 fec7 	bl	8026246 <_ZdlPvj>
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	bd10      	pop	{r4, pc}

0801e4bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e4bc:	b510      	push	{r4, lr}
 801e4be:	4604      	mov	r4, r0
 801e4c0:	2104      	movs	r1, #4
 801e4c2:	f007 fec0 	bl	8026246 <_ZdlPvj>
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	bd10      	pop	{r4, pc}

0801e4ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e4ca:	b510      	push	{r4, lr}
 801e4cc:	4604      	mov	r4, r0
 801e4ce:	2104      	movs	r1, #4
 801e4d0:	f007 feb9 	bl	8026246 <_ZdlPvj>
 801e4d4:	4620      	mov	r0, r4
 801e4d6:	bd10      	pop	{r4, pc}

0801e4d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e4d8:	b510      	push	{r4, lr}
 801e4da:	4604      	mov	r4, r0
 801e4dc:	2104      	movs	r1, #4
 801e4de:	f007 feb2 	bl	8026246 <_ZdlPvj>
 801e4e2:	4620      	mov	r0, r4
 801e4e4:	bd10      	pop	{r4, pc}

0801e4e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e4e6:	b510      	push	{r4, lr}
 801e4e8:	4604      	mov	r4, r0
 801e4ea:	2104      	movs	r1, #4
 801e4ec:	f007 feab 	bl	8026246 <_ZdlPvj>
 801e4f0:	4620      	mov	r0, r4
 801e4f2:	bd10      	pop	{r4, pc}

0801e4f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e4f4:	b510      	push	{r4, lr}
 801e4f6:	4604      	mov	r4, r0
 801e4f8:	2104      	movs	r1, #4
 801e4fa:	f007 fea4 	bl	8026246 <_ZdlPvj>
 801e4fe:	4620      	mov	r0, r4
 801e500:	bd10      	pop	{r4, pc}

0801e502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e502:	b510      	push	{r4, lr}
 801e504:	4604      	mov	r4, r0
 801e506:	2104      	movs	r1, #4
 801e508:	f007 fe9d 	bl	8026246 <_ZdlPvj>
 801e50c:	4620      	mov	r0, r4
 801e50e:	bd10      	pop	{r4, pc}

0801e510 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e510:	b510      	push	{r4, lr}
 801e512:	4604      	mov	r4, r0
 801e514:	2104      	movs	r1, #4
 801e516:	f007 fe96 	bl	8026246 <_ZdlPvj>
 801e51a:	4620      	mov	r0, r4
 801e51c:	bd10      	pop	{r4, pc}

0801e51e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e51e:	b510      	push	{r4, lr}
 801e520:	4604      	mov	r4, r0
 801e522:	2104      	movs	r1, #4
 801e524:	f007 fe8f 	bl	8026246 <_ZdlPvj>
 801e528:	4620      	mov	r0, r4
 801e52a:	bd10      	pop	{r4, pc}

0801e52c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e52c:	b510      	push	{r4, lr}
 801e52e:	4604      	mov	r4, r0
 801e530:	2104      	movs	r1, #4
 801e532:	f007 fe88 	bl	8026246 <_ZdlPvj>
 801e536:	4620      	mov	r0, r4
 801e538:	bd10      	pop	{r4, pc}

0801e53a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e53a:	b510      	push	{r4, lr}
 801e53c:	4604      	mov	r4, r0
 801e53e:	2104      	movs	r1, #4
 801e540:	f007 fe81 	bl	8026246 <_ZdlPvj>
 801e544:	4620      	mov	r0, r4
 801e546:	bd10      	pop	{r4, pc}

0801e548 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e548:	b510      	push	{r4, lr}
 801e54a:	4604      	mov	r4, r0
 801e54c:	2104      	movs	r1, #4
 801e54e:	f007 fe7a 	bl	8026246 <_ZdlPvj>
 801e552:	4620      	mov	r0, r4
 801e554:	bd10      	pop	{r4, pc}

0801e556 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e556:	b510      	push	{r4, lr}
 801e558:	4604      	mov	r4, r0
 801e55a:	2104      	movs	r1, #4
 801e55c:	f007 fe73 	bl	8026246 <_ZdlPvj>
 801e560:	4620      	mov	r0, r4
 801e562:	bd10      	pop	{r4, pc}

0801e564 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e564:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e566:	4606      	mov	r6, r0
 801e568:	b087      	sub	sp, #28
 801e56a:	4615      	mov	r5, r2
 801e56c:	461f      	mov	r7, r3
 801e56e:	b343      	cbz	r3, 801e5c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e570:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e574:	2b00      	cmp	r3, #0
 801e576:	dd24      	ble.n	801e5c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e578:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	dd20      	ble.n	801e5c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e580:	6808      	ldr	r0, [r1, #0]
 801e582:	aa04      	add	r2, sp, #16
 801e584:	6849      	ldr	r1, [r1, #4]
 801e586:	4c1a      	ldr	r4, [pc, #104]	; (801e5f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801e588:	c203      	stmia	r2!, {r0, r1}
 801e58a:	a804      	add	r0, sp, #16
 801e58c:	f7fa fd24 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e590:	6820      	ldr	r0, [r4, #0]
 801e592:	6803      	ldr	r3, [r0, #0]
 801e594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e596:	4798      	blx	r3
 801e598:	2fff      	cmp	r7, #255	; 0xff
 801e59a:	d014      	beq.n	801e5c6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e59c:	f010 0f08 	tst.w	r0, #8
 801e5a0:	6820      	ldr	r0, [r4, #0]
 801e5a2:	d013      	beq.n	801e5cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801e5a4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e5a8:	6801      	ldr	r1, [r0, #0]
 801e5aa:	9401      	str	r4, [sp, #4]
 801e5ac:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e5b0:	9702      	str	r7, [sp, #8]
 801e5b2:	9400      	str	r4, [sp, #0]
 801e5b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e5b8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801e5ba:	4629      	mov	r1, r5
 801e5bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e5c0:	47a0      	blx	r4
 801e5c2:	b007      	add	sp, #28
 801e5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5c6:	f010 0f02 	tst.w	r0, #2
 801e5ca:	e7e9      	b.n	801e5a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801e5cc:	6803      	ldr	r3, [r0, #0]
 801e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5d0:	4798      	blx	r3
 801e5d2:	4b08      	ldr	r3, [pc, #32]	; (801e5f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801e5d4:	4601      	mov	r1, r0
 801e5d6:	4630      	mov	r0, r6
 801e5d8:	881a      	ldrh	r2, [r3, #0]
 801e5da:	6833      	ldr	r3, [r6, #0]
 801e5dc:	e9cd 5700 	strd	r5, r7, [sp]
 801e5e0:	69dd      	ldr	r5, [r3, #28]
 801e5e2:	ab04      	add	r3, sp, #16
 801e5e4:	47a8      	blx	r5
 801e5e6:	6820      	ldr	r0, [r4, #0]
 801e5e8:	6803      	ldr	r3, [r0, #0]
 801e5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5ec:	4798      	blx	r3
 801e5ee:	e7e8      	b.n	801e5c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e5f0:	20056750 	.word	0x20056750
 801e5f4:	2005674a 	.word	0x2005674a

0801e5f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5fc:	4db4      	ldr	r5, [pc, #720]	; (801e8d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801e5fe:	4690      	mov	r8, r2
 801e600:	b08d      	sub	sp, #52	; 0x34
 801e602:	4604      	mov	r4, r0
 801e604:	682a      	ldr	r2, [r5, #0]
 801e606:	4689      	mov	r9, r1
 801e608:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e60c:	2a02      	cmp	r2, #2
 801e60e:	d106      	bne.n	801e61e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e610:	4bb0      	ldr	r3, [pc, #704]	; (801e8d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801e612:	f240 11ed 	movw	r1, #493	; 0x1ed
 801e616:	4ab0      	ldr	r2, [pc, #704]	; (801e8d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e618:	48b0      	ldr	r0, [pc, #704]	; (801e8dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801e61a:	f007 ff49 	bl	80264b0 <__assert_func>
 801e61e:	ae0c      	add	r6, sp, #48	; 0x30
 801e620:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801e624:	4630      	mov	r0, r6
 801e626:	f7fe f815 	bl	801c654 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e62a:	6823      	ldr	r3, [r4, #0]
 801e62c:	4607      	mov	r7, r0
 801e62e:	4620      	mov	r0, r4
 801e630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e632:	4798      	blx	r3
 801e634:	4287      	cmp	r7, r0
 801e636:	d004      	beq.n	801e642 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e638:	4ba9      	ldr	r3, [pc, #676]	; (801e8e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801e63a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801e63e:	4aa6      	ldr	r2, [pc, #664]	; (801e8d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e640:	e7ea      	b.n	801e618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e642:	4630      	mov	r0, r6
 801e644:	f7fd ff7c 	bl	801c540 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e648:	4607      	mov	r7, r0
 801e64a:	b920      	cbnz	r0, 801e656 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e64c:	4ba5      	ldr	r3, [pc, #660]	; (801e8e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801e64e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801e652:	4aa1      	ldr	r2, [pc, #644]	; (801e8d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e654:	e7e0      	b.n	801e618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e656:	f8d8 0000 	ldr.w	r0, [r8]
 801e65a:	ab06      	add	r3, sp, #24
 801e65c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e660:	f9b8 a000 	ldrsh.w	sl, [r8]
 801e664:	c303      	stmia	r3!, {r0, r1}
 801e666:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e66a:	ab08      	add	r3, sp, #32
 801e66c:	f8d9 0000 	ldr.w	r0, [r9]
 801e670:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801e674:	c303      	stmia	r3!, {r0, r1}
 801e676:	4630      	mov	r0, r6
 801e678:	f7fd feee 	bl	801c458 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e67c:	4680      	mov	r8, r0
 801e67e:	4630      	mov	r0, r6
 801e680:	f7fd ff24 	bl	801c4cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e684:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e688:	f10d 0920 	add.w	r9, sp, #32
 801e68c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e690:	a806      	add	r0, sp, #24
 801e692:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e696:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801e69a:	f7fa fc9d 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e69e:	4648      	mov	r0, r9
 801e6a0:	f7fa fc9a 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e6a4:	a80a      	add	r0, sp, #40	; 0x28
 801e6a6:	f7fa fc97 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e6aa:	4b8f      	ldr	r3, [pc, #572]	; (801e8e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801e6ac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e6b0:	881e      	ldrh	r6, [r3, #0]
 801e6b2:	4b8e      	ldr	r3, [pc, #568]	; (801e8ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801e6b4:	fa0f fb86 	sxth.w	fp, r6
 801e6b8:	8819      	ldrh	r1, [r3, #0]
 801e6ba:	4593      	cmp	fp, r2
 801e6bc:	dd75      	ble.n	801e7aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e6be:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801e6c2:	4494      	add	ip, r2
 801e6c4:	fa1f fc8c 	uxth.w	ip, ip
 801e6c8:	fa0f fa8c 	sxth.w	sl, ip
 801e6cc:	f1ba 0f00 	cmp.w	sl, #0
 801e6d0:	dd6b      	ble.n	801e7aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e6d2:	fa0f f881 	sxth.w	r8, r1
 801e6d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e6da:	4598      	cmp	r8, r3
 801e6dc:	dd65      	ble.n	801e7aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e6de:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801e6e2:	4418      	add	r0, r3
 801e6e4:	b280      	uxth	r0, r0
 801e6e6:	fa0f fe80 	sxth.w	lr, r0
 801e6ea:	f1be 0f00 	cmp.w	lr, #0
 801e6ee:	dd5c      	ble.n	801e7aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e6f0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801e6f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6f8:	45d3      	cmp	fp, sl
 801e6fa:	bfc8      	it	gt
 801e6fc:	4666      	movgt	r6, ip
 801e6fe:	45f0      	cmp	r8, lr
 801e700:	bfc8      	it	gt
 801e702:	4601      	movgt	r1, r0
 801e704:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e708:	1ab6      	subs	r6, r6, r2
 801e70a:	1ac9      	subs	r1, r1, r3
 801e70c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e710:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801e714:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801e718:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801e71c:	f1bc 0f00 	cmp.w	ip, #0
 801e720:	f340 80aa 	ble.w	801e878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e724:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801e728:	2e00      	cmp	r6, #0
 801e72a:	f340 80a5 	ble.w	801e878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e72e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e732:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e736:	4288      	cmp	r0, r1
 801e738:	db3b      	blt.n	801e7b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e73a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e73e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e742:	429a      	cmp	r2, r3
 801e744:	db35      	blt.n	801e7b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e746:	4460      	add	r0, ip
 801e748:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801e74c:	4461      	add	r1, ip
 801e74e:	b200      	sxth	r0, r0
 801e750:	b209      	sxth	r1, r1
 801e752:	4288      	cmp	r0, r1
 801e754:	dc2d      	bgt.n	801e7b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e756:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e75a:	4432      	add	r2, r6
 801e75c:	440b      	add	r3, r1
 801e75e:	b212      	sxth	r2, r2
 801e760:	b21b      	sxth	r3, r3
 801e762:	429a      	cmp	r2, r3
 801e764:	dc25      	bgt.n	801e7b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e766:	6823      	ldr	r3, [r4, #0]
 801e768:	4620      	mov	r0, r4
 801e76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e76c:	4798      	blx	r3
 801e76e:	4682      	mov	sl, r0
 801e770:	6828      	ldr	r0, [r5, #0]
 801e772:	6803      	ldr	r3, [r0, #0]
 801e774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e776:	4798      	blx	r3
 801e778:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e77c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e780:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e784:	9303      	str	r3, [sp, #12]
 801e786:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e78a:	1a9b      	subs	r3, r3, r2
 801e78c:	b29b      	uxth	r3, r3
 801e78e:	b21c      	sxth	r4, r3
 801e790:	2c00      	cmp	r4, #0
 801e792:	dc13      	bgt.n	801e7bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801e794:	bf18      	it	ne
 801e796:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801e79a:	463c      	mov	r4, r7
 801e79c:	bf1e      	ittt	ne
 801e79e:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801e7a2:	189b      	addne	r3, r3, r2
 801e7a4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801e7a8:	e00f      	b.n	801e7ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e7b0:	e7b2      	b.n	801e718 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801e7b2:	4b4f      	ldr	r3, [pc, #316]	; (801e8f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801e7b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 801e7b8:	4a47      	ldr	r2, [pc, #284]	; (801e8d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e7ba:	e72d      	b.n	801e618 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e7bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e7c0:	ebab 0303 	sub.w	r3, fp, r3
 801e7c4:	443c      	add	r4, r7
 801e7c6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e7ca:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e7ce:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e7d2:	1a9b      	subs	r3, r3, r2
 801e7d4:	b29b      	uxth	r3, r3
 801e7d6:	b219      	sxth	r1, r3
 801e7d8:	2900      	cmp	r1, #0
 801e7da:	dd51      	ble.n	801e880 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801e7dc:	9a03      	ldr	r2, [sp, #12]
 801e7de:	fb02 4401 	mla	r4, r2, r1, r4
 801e7e2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e7e6:	1ad3      	subs	r3, r2, r3
 801e7e8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e7ec:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	dd41      	ble.n	801e878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e7f4:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e7f8:	2e00      	cmp	r6, #0
 801e7fa:	dd3d      	ble.n	801e878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e7fc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e800:	f04f 0803 	mov.w	r8, #3
 801e804:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e808:	fb0a f10c 	mul.w	r1, sl, ip
 801e80c:	fb12 1808 	smlabb	r8, r2, r8, r1
 801e810:	4935      	ldr	r1, [pc, #212]	; (801e8e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801e812:	4480      	add	r8, r0
 801e814:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e818:	8809      	ldrh	r1, [r1, #0]
 801e81a:	4283      	cmp	r3, r0
 801e81c:	eba1 0202 	sub.w	r2, r1, r2
 801e820:	bfa8      	it	ge
 801e822:	4603      	movge	r3, r0
 801e824:	4293      	cmp	r3, r2
 801e826:	bfa8      	it	ge
 801e828:	4613      	movge	r3, r2
 801e82a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801e82e:	4296      	cmp	r6, r2
 801e830:	bfa8      	it	ge
 801e832:	4616      	movge	r6, r2
 801e834:	4a2d      	ldr	r2, [pc, #180]	; (801e8ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801e836:	8812      	ldrh	r2, [r2, #0]
 801e838:	eba2 0c0c 	sub.w	ip, r2, ip
 801e83c:	4632      	mov	r2, r6
 801e83e:	4566      	cmp	r6, ip
 801e840:	bfa8      	it	ge
 801e842:	4662      	movge	r2, ip
 801e844:	4299      	cmp	r1, r3
 801e846:	9202      	str	r2, [sp, #8]
 801e848:	d12d      	bne.n	801e8a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801e84a:	4559      	cmp	r1, fp
 801e84c:	d12b      	bne.n	801e8a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801e84e:	6828      	ldr	r0, [r5, #0]
 801e850:	6803      	ldr	r3, [r0, #0]
 801e852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e854:	4798      	blx	r3
 801e856:	07c3      	lsls	r3, r0, #31
 801e858:	d51b      	bpl.n	801e892 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801e85a:	6828      	ldr	r0, [r5, #0]
 801e85c:	9b02      	ldr	r3, [sp, #8]
 801e85e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e862:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e866:	6803      	ldr	r3, [r0, #0]
 801e868:	f8cd b000 	str.w	fp, [sp]
 801e86c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801e86e:	4623      	mov	r3, r4
 801e870:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e874:	47a8      	blx	r5
 801e876:	4607      	mov	r7, r0
 801e878:	4638      	mov	r0, r7
 801e87a:	b00d      	add	sp, #52	; 0x34
 801e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e880:	bf1f      	itttt	ne
 801e882:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801e886:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e88a:	189b      	addne	r3, r3, r2
 801e88c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e890:	e7ac      	b.n	801e7ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801e892:	6828      	ldr	r0, [r5, #0]
 801e894:	4642      	mov	r2, r8
 801e896:	4621      	mov	r1, r4
 801e898:	6803      	ldr	r3, [r0, #0]
 801e89a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801e89c:	9b02      	ldr	r3, [sp, #8]
 801e89e:	fb03 f30a 	mul.w	r3, r3, sl
 801e8a2:	47a8      	blx	r5
 801e8a4:	e7e8      	b.n	801e878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e8a6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801e8aa:	f04f 0900 	mov.w	r9, #0
 801e8ae:	9b02      	ldr	r3, [sp, #8]
 801e8b0:	454b      	cmp	r3, r9
 801e8b2:	dde1      	ble.n	801e878 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e8b4:	6828      	ldr	r0, [r5, #0]
 801e8b6:	4642      	mov	r2, r8
 801e8b8:	4621      	mov	r1, r4
 801e8ba:	44d0      	add	r8, sl
 801e8bc:	6803      	ldr	r3, [r0, #0]
 801e8be:	f109 0901 	add.w	r9, r9, #1
 801e8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8c4:	461e      	mov	r6, r3
 801e8c6:	465b      	mov	r3, fp
 801e8c8:	47b0      	blx	r6
 801e8ca:	9b03      	ldr	r3, [sp, #12]
 801e8cc:	441c      	add	r4, r3
 801e8ce:	e7ee      	b.n	801e8ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801e8d0:	20056750 	.word	0x20056750
 801e8d4:	0802e393 	.word	0x0802e393
 801e8d8:	0802ebe2 	.word	0x0802ebe2
 801e8dc:	0802e361 	.word	0x0802e361
 801e8e0:	0802e445 	.word	0x0802e445
 801e8e4:	0802e49a 	.word	0x0802e49a
 801e8e8:	2005674a 	.word	0x2005674a
 801e8ec:	2005674c 	.word	0x2005674c
 801e8f0:	0802e4d8 	.word	0x0802e4d8

0801e8f4 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	490c      	ldr	r1, [pc, #48]	; (801e928 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801e8f8:	6042      	str	r2, [r0, #4]
 801e8fa:	6001      	str	r1, [r0, #0]
 801e8fc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e900:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e904:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e908:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e90c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e910:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e914:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e918:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e91c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e920:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e924:	4770      	bx	lr
 801e926:	bf00      	nop
 801e928:	0802e7bc 	.word	0x0802e7bc

0801e92c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e930:	4616      	mov	r6, r2
 801e932:	b091      	sub	sp, #68	; 0x44
 801e934:	880a      	ldrh	r2, [r1, #0]
 801e936:	4607      	mov	r7, r0
 801e938:	4688      	mov	r8, r1
 801e93a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e93e:	b12a      	cbz	r2, 801e94c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e940:	4b67      	ldr	r3, [pc, #412]	; (801eae0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801e942:	2160      	movs	r1, #96	; 0x60
 801e944:	4a67      	ldr	r2, [pc, #412]	; (801eae4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801e946:	4868      	ldr	r0, [pc, #416]	; (801eae8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801e948:	f007 fdb2 	bl	80264b0 <__assert_func>
 801e94c:	6830      	ldr	r0, [r6, #0]
 801e94e:	ac0c      	add	r4, sp, #48	; 0x30
 801e950:	6871      	ldr	r1, [r6, #4]
 801e952:	4d66      	ldr	r5, [pc, #408]	; (801eaec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e954:	f8df a198 	ldr.w	sl, [pc, #408]	; 801eaf0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801e958:	c403      	stmia	r4!, {r0, r1}
 801e95a:	6818      	ldr	r0, [r3, #0]
 801e95c:	ac0e      	add	r4, sp, #56	; 0x38
 801e95e:	6859      	ldr	r1, [r3, #4]
 801e960:	c403      	stmia	r4!, {r0, r1}
 801e962:	a80c      	add	r0, sp, #48	; 0x30
 801e964:	f7fa fb38 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e968:	4631      	mov	r1, r6
 801e96a:	a80e      	add	r0, sp, #56	; 0x38
 801e96c:	f7fa fb1c 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e970:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e974:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e978:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e97c:	6828      	ldr	r0, [r5, #0]
 801e97e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e982:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e986:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801e98a:	440f      	add	r7, r1
 801e98c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e990:	440a      	add	r2, r1
 801e992:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e996:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e99a:	4413      	add	r3, r2
 801e99c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e9a0:	6803      	ldr	r3, [r0, #0]
 801e9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e9a4:	4798      	blx	r3
 801e9a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e9aa:	6828      	ldr	r0, [r5, #0]
 801e9ac:	d01d      	beq.n	801e9ea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e9ae:	2201      	movs	r2, #1
 801e9b0:	250b      	movs	r5, #11
 801e9b2:	6801      	ldr	r1, [r0, #0]
 801e9b4:	b2a4      	uxth	r4, r4
 801e9b6:	b2b6      	uxth	r6, r6
 801e9b8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e9bc:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801e9c0:	f8ba 5000 	ldrh.w	r5, [sl]
 801e9c4:	f8cd 9010 	str.w	r9, [sp, #16]
 801e9c8:	9602      	str	r6, [sp, #8]
 801e9ca:	9401      	str	r4, [sp, #4]
 801e9cc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e9d0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e9d4:	9203      	str	r2, [sp, #12]
 801e9d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e9da:	9200      	str	r2, [sp, #0]
 801e9dc:	4642      	mov	r2, r8
 801e9de:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801e9e0:	4639      	mov	r1, r7
 801e9e2:	47a0      	blx	r4
 801e9e4:	b011      	add	sp, #68	; 0x44
 801e9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ea:	6803      	ldr	r3, [r0, #0]
 801e9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9ee:	4798      	blx	r3
 801e9f0:	f8ba 5000 	ldrh.w	r5, [sl]
 801e9f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e9f8:	f04f 0e04 	mov.w	lr, #4
 801e9fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ea00:	436e      	muls	r6, r5
 801ea02:	fb05 2303 	mla	r3, r5, r3, r2
 801ea06:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ea0a:	1b2d      	subs	r5, r5, r4
 801ea0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea14:	4418      	add	r0, r3
 801ea16:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ea1a:	1982      	adds	r2, r0, r6
 801ea1c:	1b1b      	subs	r3, r3, r4
 801ea1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea22:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea24:	4290      	cmp	r0, r2
 801ea26:	d254      	bcs.n	801ead2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801ea28:	eb00 0a04 	add.w	sl, r0, r4
 801ea2c:	4550      	cmp	r0, sl
 801ea2e:	d24c      	bcs.n	801eaca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801ea30:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ea34:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ea38:	eb08 0c01 	add.w	ip, r8, r1
 801ea3c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ea40:	b173      	cbz	r3, 801ea60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801ea42:	2bff      	cmp	r3, #255	; 0xff
 801ea44:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ea48:	d10c      	bne.n	801ea64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ea4a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ea4e:	d109      	bne.n	801ea64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ea50:	f880 b000 	strb.w	fp, [r0]
 801ea54:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ea58:	7043      	strb	r3, [r0, #1]
 801ea5a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ea5e:	7083      	strb	r3, [r0, #2]
 801ea60:	3003      	adds	r0, #3
 801ea62:	e7e3      	b.n	801ea2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801ea64:	fb09 f103 	mul.w	r1, r9, r3
 801ea68:	1c4b      	adds	r3, r1, #1
 801ea6a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ea6e:	7801      	ldrb	r1, [r0, #0]
 801ea70:	121b      	asrs	r3, r3, #8
 801ea72:	b29e      	uxth	r6, r3
 801ea74:	43db      	mvns	r3, r3
 801ea76:	fb1b fb06 	smulbb	fp, fp, r6
 801ea7a:	b2db      	uxtb	r3, r3
 801ea7c:	fb01 b103 	mla	r1, r1, r3, fp
 801ea80:	b289      	uxth	r1, r1
 801ea82:	f101 0b01 	add.w	fp, r1, #1
 801ea86:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ea8a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ea8e:	fb1b fb03 	smulbb	fp, fp, r3
 801ea92:	1209      	asrs	r1, r1, #8
 801ea94:	7001      	strb	r1, [r0, #0]
 801ea96:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ea9a:	fb01 b106 	mla	r1, r1, r6, fp
 801ea9e:	b289      	uxth	r1, r1
 801eaa0:	f101 0b01 	add.w	fp, r1, #1
 801eaa4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801eaa8:	1209      	asrs	r1, r1, #8
 801eaaa:	7041      	strb	r1, [r0, #1]
 801eaac:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801eab0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801eab4:	fb1c f303 	smulbb	r3, ip, r3
 801eab8:	fb01 3606 	mla	r6, r1, r6, r3
 801eabc:	b2b6      	uxth	r6, r6
 801eabe:	1c73      	adds	r3, r6, #1
 801eac0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801eac4:	1236      	asrs	r6, r6, #8
 801eac6:	7086      	strb	r6, [r0, #2]
 801eac8:	e7ca      	b.n	801ea60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801eaca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eacc:	4428      	add	r0, r5
 801eace:	441f      	add	r7, r3
 801ead0:	e7a8      	b.n	801ea24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801ead2:	4b06      	ldr	r3, [pc, #24]	; (801eaec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801ead4:	6818      	ldr	r0, [r3, #0]
 801ead6:	6803      	ldr	r3, [r0, #0]
 801ead8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eada:	4798      	blx	r3
 801eadc:	e782      	b.n	801e9e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801eade:	bf00      	nop
 801eae0:	0802e2c5 	.word	0x0802e2c5
 801eae4:	0802ea04 	.word	0x0802ea04
 801eae8:	0802e361 	.word	0x0802e361
 801eaec:	20056750 	.word	0x20056750
 801eaf0:	2005674a 	.word	0x2005674a

0801eaf4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801eaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf8:	f8b1 9000 	ldrh.w	r9, [r1]
 801eafc:	b091      	sub	sp, #68	; 0x44
 801eafe:	4604      	mov	r4, r0
 801eb00:	460e      	mov	r6, r1
 801eb02:	f1b9 0f01 	cmp.w	r9, #1
 801eb06:	4690      	mov	r8, r2
 801eb08:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801eb0c:	d005      	beq.n	801eb1a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801eb0e:	4b68      	ldr	r3, [pc, #416]	; (801ecb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801eb10:	21ae      	movs	r1, #174	; 0xae
 801eb12:	4a68      	ldr	r2, [pc, #416]	; (801ecb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801eb14:	4868      	ldr	r0, [pc, #416]	; (801ecb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801eb16:	f007 fccb 	bl	80264b0 <__assert_func>
 801eb1a:	6810      	ldr	r0, [r2, #0]
 801eb1c:	ad0c      	add	r5, sp, #48	; 0x30
 801eb1e:	6851      	ldr	r1, [r2, #4]
 801eb20:	f8df a198 	ldr.w	sl, [pc, #408]	; 801ecbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801eb24:	f8df b198 	ldr.w	fp, [pc, #408]	; 801ecc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801eb28:	c503      	stmia	r5!, {r0, r1}
 801eb2a:	6818      	ldr	r0, [r3, #0]
 801eb2c:	ad0e      	add	r5, sp, #56	; 0x38
 801eb2e:	6859      	ldr	r1, [r3, #4]
 801eb30:	c503      	stmia	r5!, {r0, r1}
 801eb32:	a80c      	add	r0, sp, #48	; 0x30
 801eb34:	f7fa fa50 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb38:	4641      	mov	r1, r8
 801eb3a:	a80e      	add	r0, sp, #56	; 0x38
 801eb3c:	f7fa fa34 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb40:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801eb44:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801eb48:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801eb4c:	f8da 0000 	ldr.w	r0, [sl]
 801eb50:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eb54:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801eb58:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801eb5c:	440c      	add	r4, r1
 801eb5e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801eb62:	440a      	add	r2, r1
 801eb64:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801eb68:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801eb6c:	4413      	add	r3, r2
 801eb6e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801eb72:	6803      	ldr	r3, [r0, #0]
 801eb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb76:	4798      	blx	r3
 801eb78:	f010 0f80 	tst.w	r0, #128	; 0x80
 801eb7c:	f8da 0000 	ldr.w	r0, [sl]
 801eb80:	d01e      	beq.n	801ebc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801eb82:	220b      	movs	r2, #11
 801eb84:	6801      	ldr	r1, [r0, #0]
 801eb86:	f8cd 9020 	str.w	r9, [sp, #32]
 801eb8a:	b2ad      	uxth	r5, r5
 801eb8c:	9207      	str	r2, [sp, #28]
 801eb8e:	f8bb 2000 	ldrh.w	r2, [fp]
 801eb92:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801eb96:	9206      	str	r2, [sp, #24]
 801eb98:	2200      	movs	r2, #0
 801eb9a:	9502      	str	r5, [sp, #8]
 801eb9c:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801eba0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801eba4:	9203      	str	r2, [sp, #12]
 801eba6:	fa1f f288 	uxth.w	r2, r8
 801ebaa:	9201      	str	r2, [sp, #4]
 801ebac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ebb0:	9200      	str	r2, [sp, #0]
 801ebb2:	4632      	mov	r2, r6
 801ebb4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801ebb6:	4621      	mov	r1, r4
 801ebb8:	47a8      	blx	r5
 801ebba:	b011      	add	sp, #68	; 0x44
 801ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebc0:	6803      	ldr	r3, [r0, #0]
 801ebc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebc4:	4798      	blx	r3
 801ebc6:	f8bb 2000 	ldrh.w	r2, [fp]
 801ebca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ebce:	f04f 0e03 	mov.w	lr, #3
 801ebd2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801ebd6:	4355      	muls	r5, r2
 801ebd8:	fa1f fc87 	uxth.w	ip, r7
 801ebdc:	fb02 1303 	mla	r3, r2, r3, r1
 801ebe0:	eba2 0208 	sub.w	r2, r2, r8
 801ebe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ebe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ebec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ebf0:	4418      	add	r0, r3
 801ebf2:	920b      	str	r2, [sp, #44]	; 0x2c
 801ebf4:	1943      	adds	r3, r0, r5
 801ebf6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ebfa:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801ebfe:	eba2 0208 	sub.w	r2, r2, r8
 801ec02:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ec06:	b2ad      	uxth	r5, r5
 801ec08:	4298      	cmp	r0, r3
 801ec0a:	d24a      	bcs.n	801eca2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801ec0c:	eb00 0908 	add.w	r9, r0, r8
 801ec10:	4621      	mov	r1, r4
 801ec12:	4548      	cmp	r0, r9
 801ec14:	460c      	mov	r4, r1
 801ec16:	d240      	bcs.n	801ec9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801ec18:	f04f 0a04 	mov.w	sl, #4
 801ec1c:	7824      	ldrb	r4, [r4, #0]
 801ec1e:	2fff      	cmp	r7, #255	; 0xff
 801ec20:	f101 0101 	add.w	r1, r1, #1
 801ec24:	fb1e a404 	smlabb	r4, lr, r4, sl
 801ec28:	eb06 0a04 	add.w	sl, r6, r4
 801ec2c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801ec30:	d02b      	beq.n	801ec8a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801ec32:	7804      	ldrb	r4, [r0, #0]
 801ec34:	fb14 f405 	smulbb	r4, r4, r5
 801ec38:	fb0b 440c 	mla	r4, fp, ip, r4
 801ec3c:	b2a4      	uxth	r4, r4
 801ec3e:	f104 0b01 	add.w	fp, r4, #1
 801ec42:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ec46:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec4a:	fb1b fb05 	smulbb	fp, fp, r5
 801ec4e:	1224      	asrs	r4, r4, #8
 801ec50:	7004      	strb	r4, [r0, #0]
 801ec52:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ec56:	fb04 b40c 	mla	r4, r4, ip, fp
 801ec5a:	b2a4      	uxth	r4, r4
 801ec5c:	f104 0b01 	add.w	fp, r4, #1
 801ec60:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ec64:	1224      	asrs	r4, r4, #8
 801ec66:	7044      	strb	r4, [r0, #1]
 801ec68:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ec6c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ec70:	fb1a fa05 	smulbb	sl, sl, r5
 801ec74:	fb04 a40c 	mla	r4, r4, ip, sl
 801ec78:	b2a4      	uxth	r4, r4
 801ec7a:	f104 0a01 	add.w	sl, r4, #1
 801ec7e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ec82:	1224      	asrs	r4, r4, #8
 801ec84:	7084      	strb	r4, [r0, #2]
 801ec86:	3003      	adds	r0, #3
 801ec88:	e7c3      	b.n	801ec12 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801ec8a:	f880 b000 	strb.w	fp, [r0]
 801ec8e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ec92:	7044      	strb	r4, [r0, #1]
 801ec94:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ec98:	e7f4      	b.n	801ec84 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801ec9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ec9c:	4420      	add	r0, r4
 801ec9e:	188c      	adds	r4, r1, r2
 801eca0:	e7b2      	b.n	801ec08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801eca2:	4b06      	ldr	r3, [pc, #24]	; (801ecbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801eca4:	6818      	ldr	r0, [r3, #0]
 801eca6:	6803      	ldr	r3, [r0, #0]
 801eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecaa:	4798      	blx	r3
 801ecac:	e785      	b.n	801ebba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801ecae:	bf00      	nop
 801ecb0:	0802e244 	.word	0x0802e244
 801ecb4:	0802e8f7 	.word	0x0802e8f7
 801ecb8:	0802e361 	.word	0x0802e361
 801ecbc:	20056750 	.word	0x20056750
 801ecc0:	2005674a 	.word	0x2005674a

0801ecc4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ecc4:	b570      	push	{r4, r5, r6, lr}
 801ecc6:	780d      	ldrb	r5, [r1, #0]
 801ecc8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801eccc:	2d01      	cmp	r5, #1
 801ecce:	d00d      	beq.n	801ecec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801ecd0:	d307      	bcc.n	801ece2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801ecd2:	2d02      	cmp	r5, #2
 801ecd4:	d10f      	bne.n	801ecf6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801ecd6:	4b08      	ldr	r3, [pc, #32]	; (801ecf8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801ecd8:	2153      	movs	r1, #83	; 0x53
 801ecda:	4a08      	ldr	r2, [pc, #32]	; (801ecfc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801ecdc:	4808      	ldr	r0, [pc, #32]	; (801ed00 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801ecde:	f007 fbe7 	bl	80264b0 <__assert_func>
 801ece2:	9404      	str	r4, [sp, #16]
 801ece4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ece8:	f7ff be20 	b.w	801e92c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ecec:	9404      	str	r4, [sp, #16]
 801ecee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ecf2:	f7ff beff 	b.w	801eaf4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ecf6:	bd70      	pop	{r4, r5, r6, pc}
 801ecf8:	0802e1e6 	.word	0x0802e1e6
 801ecfc:	0802e800 	.word	0x0802e800
 801ed00:	0802e361 	.word	0x0802e361

0801ed04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801ed04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed08:	4605      	mov	r5, r0
 801ed0a:	b08d      	sub	sp, #52	; 0x34
 801ed0c:	460c      	mov	r4, r1
 801ed0e:	461f      	mov	r7, r3
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d051      	beq.n	801edb8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801ed14:	6808      	ldr	r0, [r1, #0]
 801ed16:	ab08      	add	r3, sp, #32
 801ed18:	6849      	ldr	r1, [r1, #4]
 801ed1a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801eee4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801ed1e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801eee8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801ed22:	c303      	stmia	r3!, {r0, r1}
 801ed24:	6810      	ldr	r0, [r2, #0]
 801ed26:	ab0a      	add	r3, sp, #40	; 0x28
 801ed28:	6851      	ldr	r1, [r2, #4]
 801ed2a:	c303      	stmia	r3!, {r0, r1}
 801ed2c:	a808      	add	r0, sp, #32
 801ed2e:	f7fa f953 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed32:	4621      	mov	r1, r4
 801ed34:	a80a      	add	r0, sp, #40	; 0x28
 801ed36:	f7fa f937 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed3a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ed3e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ed42:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ed46:	f8d8 0000 	ldr.w	r0, [r8]
 801ed4a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ed4e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801ed52:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801ed56:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801ed5a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ed5e:	440a      	add	r2, r1
 801ed60:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ed64:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ed68:	4413      	add	r3, r2
 801ed6a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ed6e:	6803      	ldr	r3, [r0, #0]
 801ed70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed72:	4798      	blx	r3
 801ed74:	2fff      	cmp	r7, #255	; 0xff
 801ed76:	d022      	beq.n	801edbe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801ed78:	f010 0f04 	tst.w	r0, #4
 801ed7c:	f8d8 0000 	ldr.w	r0, [r8]
 801ed80:	d020      	beq.n	801edc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801ed82:	2100      	movs	r1, #0
 801ed84:	f04f 0e01 	mov.w	lr, #1
 801ed88:	f8d0 c000 	ldr.w	ip, [r0]
 801ed8c:	b2a4      	uxth	r4, r4
 801ed8e:	b2b6      	uxth	r6, r6
 801ed90:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ed94:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ed98:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801ed9c:	f8b9 e000 	ldrh.w	lr, [r9]
 801eda0:	9703      	str	r7, [sp, #12]
 801eda2:	9401      	str	r4, [sp, #4]
 801eda4:	9600      	str	r6, [sp, #0]
 801eda6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801edaa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801edae:	9102      	str	r1, [sp, #8]
 801edb0:	4629      	mov	r1, r5
 801edb2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801edb6:	47a0      	blx	r4
 801edb8:	b00d      	add	sp, #52	; 0x34
 801edba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edbe:	f010 0f01 	tst.w	r0, #1
 801edc2:	e7db      	b.n	801ed7c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801edc4:	6803      	ldr	r3, [r0, #0]
 801edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edc8:	4798      	blx	r3
 801edca:	f8b9 1000 	ldrh.w	r1, [r9]
 801edce:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801edd2:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801edd6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801edda:	434c      	muls	r4, r1
 801eddc:	2fff      	cmp	r7, #255	; 0xff
 801edde:	fb01 2303 	mla	r3, r1, r3, r2
 801ede2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ede6:	eba1 0106 	sub.w	r1, r1, r6
 801edea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801edf2:	4418      	add	r0, r3
 801edf4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801edf8:	eba3 0606 	sub.w	r6, r3, r6
 801edfc:	4404      	add	r4, r0
 801edfe:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801ee02:	d04a      	beq.n	801ee9a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801ee04:	43fa      	mvns	r2, r7
 801ee06:	b2bb      	uxth	r3, r7
 801ee08:	b2d7      	uxtb	r7, r2
 801ee0a:	42a0      	cmp	r0, r4
 801ee0c:	d263      	bcs.n	801eed6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801ee0e:	eb00 0e0c 	add.w	lr, r0, ip
 801ee12:	4586      	cmp	lr, r0
 801ee14:	f100 0803 	add.w	r8, r0, #3
 801ee18:	d93a      	bls.n	801ee90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801ee1a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801ee1e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801ee22:	00d0      	lsls	r0, r2, #3
 801ee24:	fb19 f907 	smulbb	r9, r9, r7
 801ee28:	b2c0      	uxtb	r0, r0
 801ee2a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801ee2e:	fb00 9003 	mla	r0, r0, r3, r9
 801ee32:	b280      	uxth	r0, r0
 801ee34:	f100 0901 	add.w	r9, r0, #1
 801ee38:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ee3c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801ee40:	fb19 f907 	smulbb	r9, r9, r7
 801ee44:	1200      	asrs	r0, r0, #8
 801ee46:	f808 0c03 	strb.w	r0, [r8, #-3]
 801ee4a:	10d0      	asrs	r0, r2, #3
 801ee4c:	1212      	asrs	r2, r2, #8
 801ee4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ee52:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ee56:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801ee5a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ee5e:	fb00 9003 	mla	r0, r0, r3, r9
 801ee62:	b280      	uxth	r0, r0
 801ee64:	f100 0901 	add.w	r9, r0, #1
 801ee68:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ee6c:	1200      	asrs	r0, r0, #8
 801ee6e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801ee72:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801ee76:	fb10 f007 	smulbb	r0, r0, r7
 801ee7a:	fb02 0203 	mla	r2, r2, r3, r0
 801ee7e:	b292      	uxth	r2, r2
 801ee80:	1c50      	adds	r0, r2, #1
 801ee82:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ee86:	4640      	mov	r0, r8
 801ee88:	1212      	asrs	r2, r2, #8
 801ee8a:	f808 2c01 	strb.w	r2, [r8, #-1]
 801ee8e:	e7c0      	b.n	801ee12 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801ee90:	4408      	add	r0, r1
 801ee92:	4435      	add	r5, r6
 801ee94:	e7b9      	b.n	801ee0a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801ee96:	4408      	add	r0, r1
 801ee98:	4435      	add	r5, r6
 801ee9a:	42a0      	cmp	r0, r4
 801ee9c:	d21b      	bcs.n	801eed6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801ee9e:	eb00 070c 	add.w	r7, r0, ip
 801eea2:	42b8      	cmp	r0, r7
 801eea4:	d2f7      	bcs.n	801ee96 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801eea6:	f835 3b02 	ldrh.w	r3, [r5], #2
 801eeaa:	3003      	adds	r0, #3
 801eeac:	00da      	lsls	r2, r3, #3
 801eeae:	b2d2      	uxtb	r2, r2
 801eeb0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801eeb4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801eeb8:	10da      	asrs	r2, r3, #3
 801eeba:	121b      	asrs	r3, r3, #8
 801eebc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eec0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801eec4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801eec8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801eecc:	f800 2c02 	strb.w	r2, [r0, #-2]
 801eed0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801eed4:	e7e5      	b.n	801eea2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801eed6:	4b03      	ldr	r3, [pc, #12]	; (801eee4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801eed8:	6818      	ldr	r0, [r3, #0]
 801eeda:	6803      	ldr	r3, [r0, #0]
 801eedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eede:	4798      	blx	r3
 801eee0:	e76a      	b.n	801edb8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801eee2:	bf00      	nop
 801eee4:	20056750 	.word	0x20056750
 801eee8:	2005674a 	.word	0x2005674a

0801eeec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801eeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eef0:	b088      	sub	sp, #32
 801eef2:	460d      	mov	r5, r1
 801eef4:	4604      	mov	r4, r0
 801eef6:	461e      	mov	r6, r3
 801eef8:	6808      	ldr	r0, [r1, #0]
 801eefa:	ab04      	add	r3, sp, #16
 801eefc:	6849      	ldr	r1, [r1, #4]
 801eefe:	4f5c      	ldr	r7, [pc, #368]	; (801f070 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801ef00:	c303      	stmia	r3!, {r0, r1}
 801ef02:	6810      	ldr	r0, [r2, #0]
 801ef04:	ab06      	add	r3, sp, #24
 801ef06:	6851      	ldr	r1, [r2, #4]
 801ef08:	c303      	stmia	r3!, {r0, r1}
 801ef0a:	a804      	add	r0, sp, #16
 801ef0c:	f7fa f864 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef10:	4629      	mov	r1, r5
 801ef12:	a806      	add	r0, sp, #24
 801ef14:	f7fa f848 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef18:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ef1c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ef20:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ef24:	6838      	ldr	r0, [r7, #0]
 801ef26:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ef2a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801ef2e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801ef32:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ef36:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801ef3a:	440a      	add	r2, r1
 801ef3c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ef40:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ef44:	4413      	add	r3, r2
 801ef46:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ef4a:	6803      	ldr	r3, [r0, #0]
 801ef4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef4e:	4798      	blx	r3
 801ef50:	2eff      	cmp	r6, #255	; 0xff
 801ef52:	d117      	bne.n	801ef84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ef54:	f010 0f20 	tst.w	r0, #32
 801ef58:	6838      	ldr	r0, [r7, #0]
 801ef5a:	d016      	beq.n	801ef8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801ef5c:	b2ad      	uxth	r5, r5
 801ef5e:	6801      	ldr	r1, [r0, #0]
 801ef60:	9603      	str	r6, [sp, #12]
 801ef62:	9501      	str	r5, [sp, #4]
 801ef64:	fa1f f588 	uxth.w	r5, r8
 801ef68:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801ef6c:	9500      	str	r5, [sp, #0]
 801ef6e:	9602      	str	r6, [sp, #8]
 801ef70:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801ef74:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801ef76:	4621      	mov	r1, r4
 801ef78:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801ef7c:	47a8      	blx	r5
 801ef7e:	b008      	add	sp, #32
 801ef80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef84:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ef88:	e7e6      	b.n	801ef58 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801ef8a:	6803      	ldr	r3, [r0, #0]
 801ef8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef8e:	4798      	blx	r3
 801ef90:	4b38      	ldr	r3, [pc, #224]	; (801f074 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801ef92:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ef96:	f8b3 c000 	ldrh.w	ip, [r3]
 801ef9a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ef9e:	fb0c f505 	mul.w	r5, ip, r5
 801efa2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801efa6:	fb0c 2303 	mla	r3, ip, r3, r2
 801efaa:	ebac 0c08 	sub.w	ip, ip, r8
 801efae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801efb2:	ebae 0e08 	sub.w	lr, lr, r8
 801efb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801efbe:	4418      	add	r0, r3
 801efc0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801efc4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801efc8:	4405      	add	r5, r0
 801efca:	42a8      	cmp	r0, r5
 801efcc:	d24a      	bcs.n	801f064 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801efce:	eb00 0803 	add.w	r8, r0, r3
 801efd2:	4540      	cmp	r0, r8
 801efd4:	d243      	bcs.n	801f05e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801efd6:	78e2      	ldrb	r2, [r4, #3]
 801efd8:	b15a      	cbz	r2, 801eff2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801efda:	2aff      	cmp	r2, #255	; 0xff
 801efdc:	f894 9000 	ldrb.w	r9, [r4]
 801efe0:	d10a      	bne.n	801eff8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801efe2:	2eff      	cmp	r6, #255	; 0xff
 801efe4:	d108      	bne.n	801eff8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801efe6:	f880 9000 	strb.w	r9, [r0]
 801efea:	7862      	ldrb	r2, [r4, #1]
 801efec:	7042      	strb	r2, [r0, #1]
 801efee:	78a2      	ldrb	r2, [r4, #2]
 801eff0:	7082      	strb	r2, [r0, #2]
 801eff2:	3003      	adds	r0, #3
 801eff4:	3404      	adds	r4, #4
 801eff6:	e7ec      	b.n	801efd2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801eff8:	4372      	muls	r2, r6
 801effa:	1c51      	adds	r1, r2, #1
 801effc:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f000:	1209      	asrs	r1, r1, #8
 801f002:	fa1f fa81 	uxth.w	sl, r1
 801f006:	43c9      	mvns	r1, r1
 801f008:	fb19 f90a 	smulbb	r9, r9, sl
 801f00c:	b2ca      	uxtb	r2, r1
 801f00e:	7801      	ldrb	r1, [r0, #0]
 801f010:	fb01 9902 	mla	r9, r1, r2, r9
 801f014:	fa1f f989 	uxth.w	r9, r9
 801f018:	f109 0101 	add.w	r1, r9, #1
 801f01c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801f020:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f024:	f880 9000 	strb.w	r9, [r0]
 801f028:	f890 9001 	ldrb.w	r9, [r0, #1]
 801f02c:	7861      	ldrb	r1, [r4, #1]
 801f02e:	fb19 f902 	smulbb	r9, r9, r2
 801f032:	fb01 910a 	mla	r1, r1, sl, r9
 801f036:	b289      	uxth	r1, r1
 801f038:	f101 0901 	add.w	r9, r1, #1
 801f03c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801f040:	1209      	asrs	r1, r1, #8
 801f042:	7041      	strb	r1, [r0, #1]
 801f044:	7881      	ldrb	r1, [r0, #2]
 801f046:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f04a:	fb11 f202 	smulbb	r2, r1, r2
 801f04e:	fb09 220a 	mla	r2, r9, sl, r2
 801f052:	b292      	uxth	r2, r2
 801f054:	1c51      	adds	r1, r2, #1
 801f056:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f05a:	1212      	asrs	r2, r2, #8
 801f05c:	e7c8      	b.n	801eff0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801f05e:	4460      	add	r0, ip
 801f060:	4474      	add	r4, lr
 801f062:	e7b2      	b.n	801efca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f064:	6838      	ldr	r0, [r7, #0]
 801f066:	6803      	ldr	r3, [r0, #0]
 801f068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f06a:	4798      	blx	r3
 801f06c:	e787      	b.n	801ef7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801f06e:	bf00      	nop
 801f070:	20056750 	.word	0x20056750
 801f074:	2005674a 	.word	0x2005674a

0801f078 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f07c:	b085      	sub	sp, #20
 801f07e:	4606      	mov	r6, r0
 801f080:	460c      	mov	r4, r1
 801f082:	4691      	mov	r9, r2
 801f084:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f088:	4698      	mov	r8, r3
 801f08a:	b31d      	cbz	r5, 801f0d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f08c:	4608      	mov	r0, r1
 801f08e:	f7fd f9e3 	bl	801c458 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f092:	4607      	mov	r7, r0
 801f094:	4620      	mov	r0, r4
 801f096:	f7fd fa19 	bl	801c4cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f09a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f09e:	4620      	mov	r0, r4
 801f0a0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f0a4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f0a8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f0ac:	f7fd fad2 	bl	801c654 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0b0:	280b      	cmp	r0, #11
 801f0b2:	d838      	bhi.n	801f126 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801f0b4:	e8df f000 	tbb	[pc, r0]
 801f0b8:	37062920 	.word	0x37062920
 801f0bc:	37373737 	.word	0x37373737
 801f0c0:	11373737 	.word	0x11373737
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	f7fd fa3b 	bl	801c540 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f0ca:	462b      	mov	r3, r5
 801f0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f0ce:	a902      	add	r1, sp, #8
 801f0d0:	f7ff ff0c 	bl	801eeec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f0d4:	b005      	add	sp, #20
 801f0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0da:	4620      	mov	r0, r4
 801f0dc:	f7fd fa30 	bl	801c540 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f0e0:	4606      	mov	r6, r0
 801f0e2:	4620      	mov	r0, r4
 801f0e4:	f7fd fa5e 	bl	801c5a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f0e8:	9500      	str	r5, [sp, #0]
 801f0ea:	4601      	mov	r1, r0
 801f0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0ee:	aa02      	add	r2, sp, #8
 801f0f0:	4630      	mov	r0, r6
 801f0f2:	f7ff fde7 	bl	801ecc4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f0f6:	e7ed      	b.n	801f0d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f0f8:	4620      	mov	r0, r4
 801f0fa:	f7fd fa21 	bl	801c540 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f0fe:	462b      	mov	r3, r5
 801f100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f102:	a902      	add	r1, sp, #8
 801f104:	f7ff fdfe 	bl	801ed04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f108:	e7e4      	b.n	801f0d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f10a:	6833      	ldr	r3, [r6, #0]
 801f10c:	4620      	mov	r0, r4
 801f10e:	68df      	ldr	r7, [r3, #12]
 801f110:	f7fd fa16 	bl	801c540 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f114:	2300      	movs	r3, #0
 801f116:	4601      	mov	r1, r0
 801f118:	aa02      	add	r2, sp, #8
 801f11a:	4630      	mov	r0, r6
 801f11c:	e9cd 5300 	strd	r5, r3, [sp]
 801f120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f122:	47b8      	blx	r7
 801f124:	e7d6      	b.n	801f0d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f126:	4b03      	ldr	r3, [pc, #12]	; (801f134 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801f128:	2147      	movs	r1, #71	; 0x47
 801f12a:	4a03      	ldr	r2, [pc, #12]	; (801f138 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801f12c:	4803      	ldr	r0, [pc, #12]	; (801f13c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801f12e:	f007 f9bf 	bl	80264b0 <__assert_func>
 801f132:	bf00      	nop
 801f134:	0802e292 	.word	0x0802e292
 801f138:	0802e980 	.word	0x0802e980
 801f13c:	0802e361 	.word	0x0802e361

0801f140 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f140:	b570      	push	{r4, r5, r6, lr}
 801f142:	9d04      	ldr	r5, [sp, #16]
 801f144:	460c      	mov	r4, r1
 801f146:	4619      	mov	r1, r3
 801f148:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f14c:	2a0d      	cmp	r2, #13
 801f14e:	d826      	bhi.n	801f19e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f150:	e8df f002 	tbb	[pc, r2]
 801f154:	200e1407 	.word	0x200e1407
 801f158:	20202020 	.word	0x20202020
 801f15c:	20202020 	.word	0x20202020
 801f160:	2020      	.short	0x2020
 801f162:	4b0f      	ldr	r3, [pc, #60]	; (801f1a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f164:	f240 11d3 	movw	r1, #467	; 0x1d3
 801f168:	4a0e      	ldr	r2, [pc, #56]	; (801f1a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f16a:	480f      	ldr	r0, [pc, #60]	; (801f1a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f16c:	f007 f9a0 	bl	80264b0 <__assert_func>
 801f170:	462a      	mov	r2, r5
 801f172:	4620      	mov	r0, r4
 801f174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f178:	f7ff beb8 	b.w	801eeec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f17c:	6802      	ldr	r2, [r0, #0]
 801f17e:	2600      	movs	r6, #0
 801f180:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f184:	68d6      	ldr	r6, [r2, #12]
 801f186:	462b      	mov	r3, r5
 801f188:	460a      	mov	r2, r1
 801f18a:	4621      	mov	r1, r4
 801f18c:	46b4      	mov	ip, r6
 801f18e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f192:	4760      	bx	ip
 801f194:	4b05      	ldr	r3, [pc, #20]	; (801f1ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f196:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801f19a:	4a02      	ldr	r2, [pc, #8]	; (801f1a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f19c:	e7e5      	b.n	801f16a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f19e:	bd70      	pop	{r4, r5, r6, pc}
 801f1a0:	0802e538 	.word	0x0802e538
 801f1a4:	0802ec68 	.word	0x0802ec68
 801f1a8:	0802e361 	.word	0x0802e361
 801f1ac:	0802e579 	.word	0x0802e579

0801f1b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f1b0:	b158      	cbz	r0, 801f1ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f1b2:	2902      	cmp	r1, #2
 801f1b4:	d00f      	beq.n	801f1d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f1b6:	2903      	cmp	r1, #3
 801f1b8:	d010      	beq.n	801f1dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f1ba:	2901      	cmp	r1, #1
 801f1bc:	d101      	bne.n	801f1c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f1be:	2001      	movs	r0, #1
 801f1c0:	4770      	bx	lr
 801f1c2:	4b08      	ldr	r3, [pc, #32]	; (801f1e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f1c4:	8819      	ldrh	r1, [r3, #0]
 801f1c6:	4248      	negs	r0, r1
 801f1c8:	4770      	bx	lr
 801f1ca:	2902      	cmp	r1, #2
 801f1cc:	d006      	beq.n	801f1dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f1ce:	2903      	cmp	r1, #3
 801f1d0:	d0f7      	beq.n	801f1c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f1d2:	2901      	cmp	r1, #1
 801f1d4:	d1f3      	bne.n	801f1be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f1d6:	4b03      	ldr	r3, [pc, #12]	; (801f1e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f1d8:	8818      	ldrh	r0, [r3, #0]
 801f1da:	4770      	bx	lr
 801f1dc:	f04f 30ff 	mov.w	r0, #4294967295
 801f1e0:	4770      	bx	lr
 801f1e2:	bf00      	nop
 801f1e4:	2005674a 	.word	0x2005674a

0801f1e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f1e8:	b170      	cbz	r0, 801f208 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801f1ea:	2902      	cmp	r1, #2
 801f1ec:	d012      	beq.n	801f214 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801f1ee:	2903      	cmp	r1, #3
 801f1f0:	d006      	beq.n	801f200 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f1f2:	2901      	cmp	r1, #1
 801f1f4:	d001      	beq.n	801f1fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f1f6:	2001      	movs	r0, #1
 801f1f8:	4770      	bx	lr
 801f1fa:	4b08      	ldr	r3, [pc, #32]	; (801f21c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f1fc:	8818      	ldrh	r0, [r3, #0]
 801f1fe:	4770      	bx	lr
 801f200:	4b06      	ldr	r3, [pc, #24]	; (801f21c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f202:	8818      	ldrh	r0, [r3, #0]
 801f204:	4240      	negs	r0, r0
 801f206:	4770      	bx	lr
 801f208:	2902      	cmp	r1, #2
 801f20a:	d0f9      	beq.n	801f200 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f20c:	2903      	cmp	r1, #3
 801f20e:	d0f2      	beq.n	801f1f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801f210:	2901      	cmp	r1, #1
 801f212:	d1f2      	bne.n	801f1fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f214:	f04f 30ff 	mov.w	r0, #4294967295
 801f218:	4770      	bx	lr
 801f21a:	bf00      	nop
 801f21c:	2005674a 	.word	0x2005674a

0801f220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f224:	b095      	sub	sp, #84	; 0x54
 801f226:	9109      	str	r1, [sp, #36]	; 0x24
 801f228:	a910      	add	r1, sp, #64	; 0x40
 801f22a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801f22e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801f232:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801f236:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801f23a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801f23e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f242:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801f246:	9308      	str	r3, [sp, #32]
 801f248:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f24c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801f250:	930f      	str	r3, [sp, #60]	; 0x3c
 801f252:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801f256:	798d      	ldrb	r5, [r1, #6]
 801f258:	930a      	str	r3, [sp, #40]	; 0x28
 801f25a:	7b4b      	ldrb	r3, [r1, #13]
 801f25c:	0158      	lsls	r0, r3, #5
 801f25e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f262:	4328      	orrs	r0, r5
 801f264:	9007      	str	r0, [sp, #28]
 801f266:	f000 817a 	beq.w	801f55e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f26a:	011b      	lsls	r3, r3, #4
 801f26c:	79c8      	ldrb	r0, [r1, #7]
 801f26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f272:	4303      	orrs	r3, r0
 801f274:	930c      	str	r3, [sp, #48]	; 0x30
 801f276:	f000 8172 	beq.w	801f55e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f27a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f27e:	b29b      	uxth	r3, r3
 801f280:	2f00      	cmp	r7, #0
 801f282:	f000 8117 	beq.w	801f4b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801f286:	1aff      	subs	r7, r7, r3
 801f288:	b2bf      	uxth	r7, r7
 801f28a:	043b      	lsls	r3, r7, #16
 801f28c:	d502      	bpl.n	801f294 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f28e:	1bf6      	subs	r6, r6, r7
 801f290:	2700      	movs	r7, #0
 801f292:	b236      	sxth	r6, r6
 801f294:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f298:	a810      	add	r0, sp, #64	; 0x40
 801f29a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f29e:	428e      	cmp	r6, r1
 801f2a0:	b28b      	uxth	r3, r1
 801f2a2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801f2a6:	bfbf      	itttt	lt
 801f2a8:	18ff      	addlt	r7, r7, r3
 801f2aa:	1bbe      	sublt	r6, r7, r6
 801f2ac:	b2b7      	uxthlt	r7, r6
 801f2ae:	460e      	movlt	r6, r1
 801f2b0:	8891      	ldrh	r1, [r2, #4]
 801f2b2:	440b      	add	r3, r1
 801f2b4:	4631      	mov	r1, r6
 801f2b6:	b21b      	sxth	r3, r3
 801f2b8:	930e      	str	r3, [sp, #56]	; 0x38
 801f2ba:	88d3      	ldrh	r3, [r2, #6]
 801f2bc:	9a08      	ldr	r2, [sp, #32]
 801f2be:	449a      	add	sl, r3
 801f2c0:	fa0f f38a 	sxth.w	r3, sl
 801f2c4:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801f2c8:	930d      	str	r3, [sp, #52]	; 0x34
 801f2ca:	4bb4      	ldr	r3, [pc, #720]	; (801f59c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801f2cc:	f893 b000 	ldrb.w	fp, [r3]
 801f2d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f2d4:	f1dc 0300 	rsbs	r3, ip, #0
 801f2d8:	eb43 030c 	adc.w	r3, r3, ip
 801f2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2de:	464b      	mov	r3, r9
 801f2e0:	f7f9 fcd3 	bl	8018c8a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f2e4:	4631      	mov	r1, r6
 801f2e6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801f2ea:	464b      	mov	r3, r9
 801f2ec:	9a08      	ldr	r2, [sp, #32]
 801f2ee:	a810      	add	r0, sp, #64	; 0x40
 801f2f0:	f7f9 fce3 	bl	8018cba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f2f4:	a914      	add	r1, sp, #80	; 0x50
 801f2f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f2fa:	a813      	add	r0, sp, #76	; 0x4c
 801f2fc:	f7f9 fe3e 	bl	8018f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f300:	f1b9 0f00 	cmp.w	r9, #0
 801f304:	f040 80d9 	bne.w	801f4ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801f308:	f1bb 0f01 	cmp.w	fp, #1
 801f30c:	f040 80dd 	bne.w	801f4ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801f310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f312:	b153      	cbz	r3, 801f32a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f314:	2508      	movs	r5, #8
 801f316:	9a07      	ldr	r2, [sp, #28]
 801f318:	fb95 f3f8 	sdiv	r3, r5, r8
 801f31c:	1e5d      	subs	r5, r3, #1
 801f31e:	4415      	add	r5, r2
 801f320:	fb95 f5f3 	sdiv	r5, r5, r3
 801f324:	fb15 f503 	smulbb	r5, r5, r3
 801f328:	b2ad      	uxth	r5, r5
 801f32a:	b907      	cbnz	r7, 801f32e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f32c:	b16c      	cbz	r4, 801f34a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f32e:	fb04 7305 	mla	r3, r4, r5, r7
 801f332:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f334:	ebaa 0a04 	sub.w	sl, sl, r4
 801f338:	fb08 f303 	mul.w	r3, r8, r3
 801f33c:	fa1f fa8a 	uxth.w	sl, sl
 801f340:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f344:	f003 0407 	and.w	r4, r3, #7
 801f348:	9224      	str	r2, [sp, #144]	; 0x90
 801f34a:	4649      	mov	r1, r9
 801f34c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f34e:	f7ff ff2f 	bl	801f1b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f352:	4649      	mov	r1, r9
 801f354:	4683      	mov	fp, r0
 801f356:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f358:	f7ff ff46 	bl	801f1e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f35e:	9a08      	ldr	r2, [sp, #32]
 801f360:	4681      	mov	r9, r0
 801f362:	1a9b      	subs	r3, r3, r2
 801f364:	459a      	cmp	sl, r3
 801f366:	bfa8      	it	ge
 801f368:	469a      	movge	sl, r3
 801f36a:	f1ba 0f00 	cmp.w	sl, #0
 801f36e:	f340 80f6 	ble.w	801f55e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f372:	1bf6      	subs	r6, r6, r7
 801f374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f376:	1b9e      	subs	r6, r3, r6
 801f378:	9b07      	ldr	r3, [sp, #28]
 801f37a:	429e      	cmp	r6, r3
 801f37c:	bfd4      	ite	le
 801f37e:	ebc7 0706 	rsble	r7, r7, r6
 801f382:	ebc7 0703 	rsbgt	r7, r7, r3
 801f386:	2f00      	cmp	r7, #0
 801f388:	f340 80e9 	ble.w	801f55e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f38c:	1bed      	subs	r5, r5, r7
 801f38e:	fb08 f305 	mul.w	r3, r8, r5
 801f392:	930b      	str	r3, [sp, #44]	; 0x2c
 801f394:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f396:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f39a:	930c      	str	r3, [sp, #48]	; 0x30
 801f39c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f39e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f3a2:	930d      	str	r3, [sp, #52]	; 0x34
 801f3a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3a6:	b2db      	uxtb	r3, r3
 801f3a8:	930e      	str	r3, [sp, #56]	; 0x38
 801f3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	f040 80db 	bne.w	801f568 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801f3b2:	4b7b      	ldr	r3, [pc, #492]	; (801f5a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f3b4:	6818      	ldr	r0, [r3, #0]
 801f3b6:	6803      	ldr	r3, [r0, #0]
 801f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3ba:	4798      	blx	r3
 801f3bc:	2301      	movs	r3, #1
 801f3be:	4a79      	ldr	r2, [pc, #484]	; (801f5a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f3c0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801f3c4:	fb07 9b1b 	mls	fp, r7, fp, r9
 801f3c8:	fa03 f308 	lsl.w	r3, r3, r8
 801f3cc:	8811      	ldrh	r1, [r2, #0]
 801f3ce:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f3d2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f3d6:	3b01      	subs	r3, #1
 801f3d8:	fb06 bb07 	mla	fp, r6, r7, fp
 801f3dc:	b2db      	uxtb	r3, r3
 801f3de:	9308      	str	r3, [sp, #32]
 801f3e0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f3e4:	fb01 2303 	mla	r3, r1, r3, r2
 801f3e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3ec:	18c3      	adds	r3, r0, r3
 801f3ee:	9307      	str	r3, [sp, #28]
 801f3f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f3f2:	781a      	ldrb	r2, [r3, #0]
 801f3f4:	4122      	asrs	r2, r4
 801f3f6:	b2d2      	uxtb	r2, r2
 801f3f8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f3fc:	f0c0 80d4 	bcc.w	801f5a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801f400:	46be      	mov	lr, r7
 801f402:	9907      	ldr	r1, [sp, #28]
 801f404:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f408:	f0c0 80b7 	bcc.w	801f57a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801f40c:	9b08      	ldr	r3, [sp, #32]
 801f40e:	4013      	ands	r3, r2
 801f410:	d041      	beq.n	801f496 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801f412:	20ff      	movs	r0, #255	; 0xff
 801f414:	9d08      	ldr	r5, [sp, #32]
 801f416:	fb90 f5f5 	sdiv	r5, r0, r5
 801f41a:	436b      	muls	r3, r5
 801f41c:	2bfe      	cmp	r3, #254	; 0xfe
 801f41e:	dd03      	ble.n	801f428 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801f420:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f422:	4285      	cmp	r5, r0
 801f424:	f000 80a2 	beq.w	801f56c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801f428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f42a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f42c:	fb15 f303 	smulbb	r3, r5, r3
 801f430:	b29b      	uxth	r3, r3
 801f432:	1c5d      	adds	r5, r3, #1
 801f434:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f438:	780d      	ldrb	r5, [r1, #0]
 801f43a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f43e:	fa1f fc83 	uxth.w	ip, r3
 801f442:	43db      	mvns	r3, r3
 801f444:	fb10 f90c 	smulbb	r9, r0, ip
 801f448:	b2db      	uxtb	r3, r3
 801f44a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f44c:	fb05 9503 	mla	r5, r5, r3, r9
 801f450:	b2ad      	uxth	r5, r5
 801f452:	f105 0901 	add.w	r9, r5, #1
 801f456:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f45a:	fb10 f90c 	smulbb	r9, r0, ip
 801f45e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f460:	122d      	asrs	r5, r5, #8
 801f462:	fb10 fc0c 	smulbb	ip, r0, ip
 801f466:	700d      	strb	r5, [r1, #0]
 801f468:	784d      	ldrb	r5, [r1, #1]
 801f46a:	fb05 9503 	mla	r5, r5, r3, r9
 801f46e:	b2ad      	uxth	r5, r5
 801f470:	f105 0901 	add.w	r9, r5, #1
 801f474:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f478:	122d      	asrs	r5, r5, #8
 801f47a:	704d      	strb	r5, [r1, #1]
 801f47c:	788d      	ldrb	r5, [r1, #2]
 801f47e:	fb05 cc03 	mla	ip, r5, r3, ip
 801f482:	fa1f fc8c 	uxth.w	ip, ip
 801f486:	f10c 0301 	add.w	r3, ip, #1
 801f48a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f48e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f492:	f881 c002 	strb.w	ip, [r1, #2]
 801f496:	4444      	add	r4, r8
 801f498:	4431      	add	r1, r6
 801f49a:	b2a4      	uxth	r4, r4
 801f49c:	2c07      	cmp	r4, #7
 801f49e:	bf89      	itett	hi
 801f4a0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801f4a2:	fa42 f208 	asrls.w	r2, r2, r8
 801f4a6:	2400      	movhi	r4, #0
 801f4a8:	785a      	ldrbhi	r2, [r3, #1]
 801f4aa:	bf8a      	itet	hi
 801f4ac:	3301      	addhi	r3, #1
 801f4ae:	b2d2      	uxtbls	r2, r2
 801f4b0:	9324      	strhi	r3, [sp, #144]	; 0x90
 801f4b2:	e7a7      	b.n	801f404 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801f4b4:	441e      	add	r6, r3
 801f4b6:	b236      	sxth	r6, r6
 801f4b8:	e6ec      	b.n	801f294 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f4ba:	f1b9 0f01 	cmp.w	r9, #1
 801f4be:	f47f af27 	bne.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f4c2:	f1bb 0f01 	cmp.w	fp, #1
 801f4c6:	f47f af23 	bne.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f4ca:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801f5a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801f4ce:	f8db 0000 	ldr.w	r0, [fp]
 801f4d2:	6803      	ldr	r3, [r0, #0]
 801f4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4d6:	4798      	blx	r3
 801f4d8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801f4dc:	465a      	mov	r2, fp
 801f4de:	d006      	beq.n	801f4ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801f4e0:	f1b8 0f04 	cmp.w	r8, #4
 801f4e4:	d13e      	bne.n	801f564 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801f4e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f4e8:	3300      	adds	r3, #0
 801f4ea:	bf18      	it	ne
 801f4ec:	2301      	movne	r3, #1
 801f4ee:	0580      	lsls	r0, r0, #22
 801f4f0:	d563      	bpl.n	801f5ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f4f2:	f1b8 0f08 	cmp.w	r8, #8
 801f4f6:	d160      	bne.n	801f5ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	bf0c      	ite	eq
 801f4fc:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801f500:	f44f 7180 	movne.w	r1, #256	; 0x100
 801f504:	2f00      	cmp	r7, #0
 801f506:	f47f af03 	bne.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f50a:	2c00      	cmp	r4, #0
 801f50c:	f47f af00 	bne.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f510:	9b07      	ldr	r3, [sp, #28]
 801f512:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f514:	18f3      	adds	r3, r6, r3
 801f516:	4283      	cmp	r3, r0
 801f518:	f73f aefa 	bgt.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f51c:	9808      	ldr	r0, [sp, #32]
 801f51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f520:	4403      	add	r3, r0
 801f522:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f524:	4283      	cmp	r3, r0
 801f526:	f73f aef3 	bgt.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f52a:	f1b8 0f08 	cmp.w	r8, #8
 801f52e:	6810      	ldr	r0, [r2, #0]
 801f530:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801f534:	bf18      	it	ne
 801f536:	3501      	addne	r5, #1
 801f538:	6804      	ldr	r4, [r0, #0]
 801f53a:	9105      	str	r1, [sp, #20]
 801f53c:	bf18      	it	ne
 801f53e:	f025 0501 	bicne.w	r5, r5, #1
 801f542:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f544:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801f548:	bf18      	it	ne
 801f54a:	b2ad      	uxthne	r5, r5
 801f54c:	9104      	str	r1, [sp, #16]
 801f54e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f550:	e9cd 5a00 	strd	r5, sl, [sp]
 801f554:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801f558:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f55a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801f55c:	47a0      	blx	r4
 801f55e:	b015      	add	sp, #84	; 0x54
 801f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f564:	2300      	movs	r3, #0
 801f566:	e7c2      	b.n	801f4ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801f568:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f56a:	e727      	b.n	801f3bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801f56c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f56e:	700b      	strb	r3, [r1, #0]
 801f570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f572:	704b      	strb	r3, [r1, #1]
 801f574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f576:	708b      	strb	r3, [r1, #2]
 801f578:	e78d      	b.n	801f496 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801f57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f57c:	b153      	cbz	r3, 801f594 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801f57e:	441c      	add	r4, r3
 801f580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f582:	b2a4      	uxth	r4, r4
 801f584:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801f588:	f004 0407 	and.w	r4, r4, #7
 801f58c:	781a      	ldrb	r2, [r3, #0]
 801f58e:	9324      	str	r3, [sp, #144]	; 0x90
 801f590:	4122      	asrs	r2, r4
 801f592:	b2d2      	uxtb	r2, r2
 801f594:	9b07      	ldr	r3, [sp, #28]
 801f596:	445b      	add	r3, fp
 801f598:	9307      	str	r3, [sp, #28]
 801f59a:	e72d      	b.n	801f3f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801f59c:	20056748 	.word	0x20056748
 801f5a0:	20056750 	.word	0x20056750
 801f5a4:	2005674a 	.word	0x2005674a
 801f5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d1d7      	bne.n	801f55e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f5ae:	4b06      	ldr	r3, [pc, #24]	; (801f5c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f5b0:	6818      	ldr	r0, [r3, #0]
 801f5b2:	6803      	ldr	r3, [r0, #0]
 801f5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f5b6:	4798      	blx	r3
 801f5b8:	e7d1      	b.n	801f55e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	f43f aea8 	beq.w	801f310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f5c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f5c4:	e79e      	b.n	801f504 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801f5c6:	bf00      	nop
 801f5c8:	20056750 	.word	0x20056750

0801f5cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f5cc:	b538      	push	{r3, r4, r5, lr}
 801f5ce:	4c15      	ldr	r4, [pc, #84]	; (801f624 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f5d0:	4605      	mov	r5, r0
 801f5d2:	7823      	ldrb	r3, [r4, #0]
 801f5d4:	f3bf 8f5b 	dmb	ish
 801f5d8:	07da      	lsls	r2, r3, #31
 801f5da:	d40b      	bmi.n	801f5f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f5dc:	4620      	mov	r0, r4
 801f5de:	f006 fe34 	bl	802624a <__cxa_guard_acquire>
 801f5e2:	b138      	cbz	r0, 801f5f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	f006 fe3c 	bl	8026262 <__cxa_guard_release>
 801f5ea:	4a0f      	ldr	r2, [pc, #60]	; (801f628 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f5ec:	490f      	ldr	r1, [pc, #60]	; (801f62c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f5ee:	4810      	ldr	r0, [pc, #64]	; (801f630 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f5f0:	f006 fe24 	bl	802623c <__aeabi_atexit>
 801f5f4:	4c0f      	ldr	r4, [pc, #60]	; (801f634 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f5f6:	7823      	ldrb	r3, [r4, #0]
 801f5f8:	f3bf 8f5b 	dmb	ish
 801f5fc:	07db      	lsls	r3, r3, #31
 801f5fe:	d40b      	bmi.n	801f618 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f600:	4620      	mov	r0, r4
 801f602:	f006 fe22 	bl	802624a <__cxa_guard_acquire>
 801f606:	b138      	cbz	r0, 801f618 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f608:	4620      	mov	r0, r4
 801f60a:	f006 fe2a 	bl	8026262 <__cxa_guard_release>
 801f60e:	4a06      	ldr	r2, [pc, #24]	; (801f628 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f610:	4909      	ldr	r1, [pc, #36]	; (801f638 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f612:	480a      	ldr	r0, [pc, #40]	; (801f63c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f614:	f006 fe12 	bl	802623c <__aeabi_atexit>
 801f618:	4b05      	ldr	r3, [pc, #20]	; (801f630 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f61a:	612b      	str	r3, [r5, #16]
 801f61c:	4b07      	ldr	r3, [pc, #28]	; (801f63c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f61e:	616b      	str	r3, [r5, #20]
 801f620:	bd38      	pop	{r3, r4, r5, pc}
 801f622:	bf00      	nop
 801f624:	2005683c 	.word	0x2005683c
 801f628:	20000000 	.word	0x20000000
 801f62c:	0801df17 	.word	0x0801df17
 801f630:	20000068 	.word	0x20000068
 801f634:	20056840 	.word	0x20056840
 801f638:	0801df15 	.word	0x0801df15
 801f63c:	2000006c 	.word	0x2000006c

0801f640 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f640:	b538      	push	{r3, r4, r5, lr}
 801f642:	4c15      	ldr	r4, [pc, #84]	; (801f698 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f644:	4605      	mov	r5, r0
 801f646:	7823      	ldrb	r3, [r4, #0]
 801f648:	f3bf 8f5b 	dmb	ish
 801f64c:	07da      	lsls	r2, r3, #31
 801f64e:	d40b      	bmi.n	801f668 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f650:	4620      	mov	r0, r4
 801f652:	f006 fdfa 	bl	802624a <__cxa_guard_acquire>
 801f656:	b138      	cbz	r0, 801f668 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f658:	4620      	mov	r0, r4
 801f65a:	f006 fe02 	bl	8026262 <__cxa_guard_release>
 801f65e:	4a0f      	ldr	r2, [pc, #60]	; (801f69c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f660:	490f      	ldr	r1, [pc, #60]	; (801f6a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f662:	4810      	ldr	r0, [pc, #64]	; (801f6a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f664:	f006 fdea 	bl	802623c <__aeabi_atexit>
 801f668:	4c0f      	ldr	r4, [pc, #60]	; (801f6a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f66a:	7823      	ldrb	r3, [r4, #0]
 801f66c:	f3bf 8f5b 	dmb	ish
 801f670:	07db      	lsls	r3, r3, #31
 801f672:	d40b      	bmi.n	801f68c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f674:	4620      	mov	r0, r4
 801f676:	f006 fde8 	bl	802624a <__cxa_guard_acquire>
 801f67a:	b138      	cbz	r0, 801f68c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f67c:	4620      	mov	r0, r4
 801f67e:	f006 fdf0 	bl	8026262 <__cxa_guard_release>
 801f682:	4a06      	ldr	r2, [pc, #24]	; (801f69c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f684:	4909      	ldr	r1, [pc, #36]	; (801f6ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f686:	480a      	ldr	r0, [pc, #40]	; (801f6b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f688:	f006 fdd8 	bl	802623c <__aeabi_atexit>
 801f68c:	4b05      	ldr	r3, [pc, #20]	; (801f6a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f68e:	60ab      	str	r3, [r5, #8]
 801f690:	4b07      	ldr	r3, [pc, #28]	; (801f6b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f692:	60eb      	str	r3, [r5, #12]
 801f694:	bd38      	pop	{r3, r4, r5, pc}
 801f696:	bf00      	nop
 801f698:	2005681c 	.word	0x2005681c
 801f69c:	20000000 	.word	0x20000000
 801f6a0:	0801df1b 	.word	0x0801df1b
 801f6a4:	20000048 	.word	0x20000048
 801f6a8:	20056820 	.word	0x20056820
 801f6ac:	0801df19 	.word	0x0801df19
 801f6b0:	2000004c 	.word	0x2000004c

0801f6b4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f6b4:	b510      	push	{r4, lr}
 801f6b6:	4604      	mov	r4, r0
 801f6b8:	f7ff ff88 	bl	801f5cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f6bc:	4620      	mov	r0, r4
 801f6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6c2:	f7ff bfbd 	b.w	801f640 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f6c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f6c8:	b538      	push	{r3, r4, r5, lr}
 801f6ca:	4c15      	ldr	r4, [pc, #84]	; (801f720 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f6cc:	4605      	mov	r5, r0
 801f6ce:	7823      	ldrb	r3, [r4, #0]
 801f6d0:	f3bf 8f5b 	dmb	ish
 801f6d4:	07da      	lsls	r2, r3, #31
 801f6d6:	d40b      	bmi.n	801f6f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f006 fdb6 	bl	802624a <__cxa_guard_acquire>
 801f6de:	b138      	cbz	r0, 801f6f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f6e0:	4620      	mov	r0, r4
 801f6e2:	f006 fdbe 	bl	8026262 <__cxa_guard_release>
 801f6e6:	4a0f      	ldr	r2, [pc, #60]	; (801f724 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f6e8:	490f      	ldr	r1, [pc, #60]	; (801f728 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f6ea:	4810      	ldr	r0, [pc, #64]	; (801f72c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f6ec:	f006 fda6 	bl	802623c <__aeabi_atexit>
 801f6f0:	4c0f      	ldr	r4, [pc, #60]	; (801f730 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f6f2:	7823      	ldrb	r3, [r4, #0]
 801f6f4:	f3bf 8f5b 	dmb	ish
 801f6f8:	07db      	lsls	r3, r3, #31
 801f6fa:	d40b      	bmi.n	801f714 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	f006 fda4 	bl	802624a <__cxa_guard_acquire>
 801f702:	b138      	cbz	r0, 801f714 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f704:	4620      	mov	r0, r4
 801f706:	f006 fdac 	bl	8026262 <__cxa_guard_release>
 801f70a:	4a06      	ldr	r2, [pc, #24]	; (801f724 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f70c:	4909      	ldr	r1, [pc, #36]	; (801f734 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f70e:	480a      	ldr	r0, [pc, #40]	; (801f738 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f710:	f006 fd94 	bl	802623c <__aeabi_atexit>
 801f714:	4b05      	ldr	r3, [pc, #20]	; (801f72c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f716:	622b      	str	r3, [r5, #32]
 801f718:	4b07      	ldr	r3, [pc, #28]	; (801f738 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f71a:	626b      	str	r3, [r5, #36]	; 0x24
 801f71c:	bd38      	pop	{r3, r4, r5, pc}
 801f71e:	bf00      	nop
 801f720:	20056844 	.word	0x20056844
 801f724:	20000000 	.word	0x20000000
 801f728:	0801df0f 	.word	0x0801df0f
 801f72c:	20000070 	.word	0x20000070
 801f730:	20056848 	.word	0x20056848
 801f734:	0801df0d 	.word	0x0801df0d
 801f738:	20000074 	.word	0x20000074

0801f73c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f73c:	b538      	push	{r3, r4, r5, lr}
 801f73e:	4c15      	ldr	r4, [pc, #84]	; (801f794 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f740:	4605      	mov	r5, r0
 801f742:	7823      	ldrb	r3, [r4, #0]
 801f744:	f3bf 8f5b 	dmb	ish
 801f748:	07da      	lsls	r2, r3, #31
 801f74a:	d40b      	bmi.n	801f764 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f74c:	4620      	mov	r0, r4
 801f74e:	f006 fd7c 	bl	802624a <__cxa_guard_acquire>
 801f752:	b138      	cbz	r0, 801f764 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f754:	4620      	mov	r0, r4
 801f756:	f006 fd84 	bl	8026262 <__cxa_guard_release>
 801f75a:	4a0f      	ldr	r2, [pc, #60]	; (801f798 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f75c:	490f      	ldr	r1, [pc, #60]	; (801f79c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f75e:	4810      	ldr	r0, [pc, #64]	; (801f7a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f760:	f006 fd6c 	bl	802623c <__aeabi_atexit>
 801f764:	4c0f      	ldr	r4, [pc, #60]	; (801f7a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f766:	7823      	ldrb	r3, [r4, #0]
 801f768:	f3bf 8f5b 	dmb	ish
 801f76c:	07db      	lsls	r3, r3, #31
 801f76e:	d40b      	bmi.n	801f788 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f770:	4620      	mov	r0, r4
 801f772:	f006 fd6a 	bl	802624a <__cxa_guard_acquire>
 801f776:	b138      	cbz	r0, 801f788 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f778:	4620      	mov	r0, r4
 801f77a:	f006 fd72 	bl	8026262 <__cxa_guard_release>
 801f77e:	4a06      	ldr	r2, [pc, #24]	; (801f798 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f780:	4909      	ldr	r1, [pc, #36]	; (801f7a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f782:	480a      	ldr	r0, [pc, #40]	; (801f7ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f784:	f006 fd5a 	bl	802623c <__aeabi_atexit>
 801f788:	4b05      	ldr	r3, [pc, #20]	; (801f7a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f78a:	61ab      	str	r3, [r5, #24]
 801f78c:	4b07      	ldr	r3, [pc, #28]	; (801f7ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f78e:	61eb      	str	r3, [r5, #28]
 801f790:	bd38      	pop	{r3, r4, r5, pc}
 801f792:	bf00      	nop
 801f794:	20056824 	.word	0x20056824
 801f798:	20000000 	.word	0x20000000
 801f79c:	0801df13 	.word	0x0801df13
 801f7a0:	20000050 	.word	0x20000050
 801f7a4:	20056828 	.word	0x20056828
 801f7a8:	0801df11 	.word	0x0801df11
 801f7ac:	20000054 	.word	0x20000054

0801f7b0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f7b0:	b510      	push	{r4, lr}
 801f7b2:	4604      	mov	r4, r0
 801f7b4:	f7ff ff88 	bl	801f6c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f7b8:	4620      	mov	r0, r4
 801f7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7be:	f7ff bfbd 	b.w	801f73c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f7c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f7c4:	b538      	push	{r3, r4, r5, lr}
 801f7c6:	4c15      	ldr	r4, [pc, #84]	; (801f81c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f7c8:	4605      	mov	r5, r0
 801f7ca:	7823      	ldrb	r3, [r4, #0]
 801f7cc:	f3bf 8f5b 	dmb	ish
 801f7d0:	07da      	lsls	r2, r3, #31
 801f7d2:	d40b      	bmi.n	801f7ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	f006 fd38 	bl	802624a <__cxa_guard_acquire>
 801f7da:	b138      	cbz	r0, 801f7ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f7dc:	4620      	mov	r0, r4
 801f7de:	f006 fd40 	bl	8026262 <__cxa_guard_release>
 801f7e2:	4a0f      	ldr	r2, [pc, #60]	; (801f820 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f7e4:	490f      	ldr	r1, [pc, #60]	; (801f824 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f7e6:	4810      	ldr	r0, [pc, #64]	; (801f828 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f7e8:	f006 fd28 	bl	802623c <__aeabi_atexit>
 801f7ec:	4c0f      	ldr	r4, [pc, #60]	; (801f82c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f7ee:	7823      	ldrb	r3, [r4, #0]
 801f7f0:	f3bf 8f5b 	dmb	ish
 801f7f4:	07db      	lsls	r3, r3, #31
 801f7f6:	d40b      	bmi.n	801f810 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f7f8:	4620      	mov	r0, r4
 801f7fa:	f006 fd26 	bl	802624a <__cxa_guard_acquire>
 801f7fe:	b138      	cbz	r0, 801f810 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f800:	4620      	mov	r0, r4
 801f802:	f006 fd2e 	bl	8026262 <__cxa_guard_release>
 801f806:	4a06      	ldr	r2, [pc, #24]	; (801f820 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f808:	4909      	ldr	r1, [pc, #36]	; (801f830 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f80a:	480a      	ldr	r0, [pc, #40]	; (801f834 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f80c:	f006 fd16 	bl	802623c <__aeabi_atexit>
 801f810:	4b05      	ldr	r3, [pc, #20]	; (801f828 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f812:	632b      	str	r3, [r5, #48]	; 0x30
 801f814:	4b07      	ldr	r3, [pc, #28]	; (801f834 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f816:	636b      	str	r3, [r5, #52]	; 0x34
 801f818:	bd38      	pop	{r3, r4, r5, pc}
 801f81a:	bf00      	nop
 801f81c:	2005682c 	.word	0x2005682c
 801f820:	20000000 	.word	0x20000000
 801f824:	0801df07 	.word	0x0801df07
 801f828:	20000058 	.word	0x20000058
 801f82c:	20056830 	.word	0x20056830
 801f830:	0801df05 	.word	0x0801df05
 801f834:	2000005c 	.word	0x2000005c

0801f838 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f838:	b538      	push	{r3, r4, r5, lr}
 801f83a:	4c15      	ldr	r4, [pc, #84]	; (801f890 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f83c:	4605      	mov	r5, r0
 801f83e:	7823      	ldrb	r3, [r4, #0]
 801f840:	f3bf 8f5b 	dmb	ish
 801f844:	07da      	lsls	r2, r3, #31
 801f846:	d40b      	bmi.n	801f860 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f848:	4620      	mov	r0, r4
 801f84a:	f006 fcfe 	bl	802624a <__cxa_guard_acquire>
 801f84e:	b138      	cbz	r0, 801f860 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f850:	4620      	mov	r0, r4
 801f852:	f006 fd06 	bl	8026262 <__cxa_guard_release>
 801f856:	4a0f      	ldr	r2, [pc, #60]	; (801f894 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f858:	490f      	ldr	r1, [pc, #60]	; (801f898 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f85a:	4810      	ldr	r0, [pc, #64]	; (801f89c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f85c:	f006 fcee 	bl	802623c <__aeabi_atexit>
 801f860:	4c0f      	ldr	r4, [pc, #60]	; (801f8a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f862:	7823      	ldrb	r3, [r4, #0]
 801f864:	f3bf 8f5b 	dmb	ish
 801f868:	07db      	lsls	r3, r3, #31
 801f86a:	d40b      	bmi.n	801f884 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f86c:	4620      	mov	r0, r4
 801f86e:	f006 fcec 	bl	802624a <__cxa_guard_acquire>
 801f872:	b138      	cbz	r0, 801f884 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f874:	4620      	mov	r0, r4
 801f876:	f006 fcf4 	bl	8026262 <__cxa_guard_release>
 801f87a:	4a06      	ldr	r2, [pc, #24]	; (801f894 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f87c:	4909      	ldr	r1, [pc, #36]	; (801f8a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f87e:	480a      	ldr	r0, [pc, #40]	; (801f8a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f880:	f006 fcdc 	bl	802623c <__aeabi_atexit>
 801f884:	4b05      	ldr	r3, [pc, #20]	; (801f89c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f886:	62ab      	str	r3, [r5, #40]	; 0x28
 801f888:	4b07      	ldr	r3, [pc, #28]	; (801f8a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f88a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f88c:	bd38      	pop	{r3, r4, r5, pc}
 801f88e:	bf00      	nop
 801f890:	20056804 	.word	0x20056804
 801f894:	20000000 	.word	0x20000000
 801f898:	0801df0b 	.word	0x0801df0b
 801f89c:	20000030 	.word	0x20000030
 801f8a0:	20056808 	.word	0x20056808
 801f8a4:	0801df09 	.word	0x0801df09
 801f8a8:	20000034 	.word	0x20000034

0801f8ac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f8ac:	b510      	push	{r4, lr}
 801f8ae:	4604      	mov	r4, r0
 801f8b0:	f7ff ff88 	bl	801f7c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8ba:	f7ff bfbd 	b.w	801f838 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f8c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f8c0:	b538      	push	{r3, r4, r5, lr}
 801f8c2:	4c15      	ldr	r4, [pc, #84]	; (801f918 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f8c4:	4605      	mov	r5, r0
 801f8c6:	7823      	ldrb	r3, [r4, #0]
 801f8c8:	f3bf 8f5b 	dmb	ish
 801f8cc:	07da      	lsls	r2, r3, #31
 801f8ce:	d40b      	bmi.n	801f8e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	f006 fcba 	bl	802624a <__cxa_guard_acquire>
 801f8d6:	b138      	cbz	r0, 801f8e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f8d8:	4620      	mov	r0, r4
 801f8da:	f006 fcc2 	bl	8026262 <__cxa_guard_release>
 801f8de:	4a0f      	ldr	r2, [pc, #60]	; (801f91c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f8e0:	490f      	ldr	r1, [pc, #60]	; (801f920 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f8e2:	4810      	ldr	r0, [pc, #64]	; (801f924 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f8e4:	f006 fcaa 	bl	802623c <__aeabi_atexit>
 801f8e8:	4c0f      	ldr	r4, [pc, #60]	; (801f928 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f8ea:	7823      	ldrb	r3, [r4, #0]
 801f8ec:	f3bf 8f5b 	dmb	ish
 801f8f0:	07db      	lsls	r3, r3, #31
 801f8f2:	d40b      	bmi.n	801f90c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f8f4:	4620      	mov	r0, r4
 801f8f6:	f006 fca8 	bl	802624a <__cxa_guard_acquire>
 801f8fa:	b138      	cbz	r0, 801f90c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	f006 fcb0 	bl	8026262 <__cxa_guard_release>
 801f902:	4a06      	ldr	r2, [pc, #24]	; (801f91c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f904:	4909      	ldr	r1, [pc, #36]	; (801f92c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f906:	480a      	ldr	r0, [pc, #40]	; (801f930 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f908:	f006 fc98 	bl	802623c <__aeabi_atexit>
 801f90c:	4b05      	ldr	r3, [pc, #20]	; (801f924 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f90e:	642b      	str	r3, [r5, #64]	; 0x40
 801f910:	4b07      	ldr	r3, [pc, #28]	; (801f930 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f912:	646b      	str	r3, [r5, #68]	; 0x44
 801f914:	bd38      	pop	{r3, r4, r5, pc}
 801f916:	bf00      	nop
 801f918:	20056834 	.word	0x20056834
 801f91c:	20000000 	.word	0x20000000
 801f920:	0801deff 	.word	0x0801deff
 801f924:	20000060 	.word	0x20000060
 801f928:	20056838 	.word	0x20056838
 801f92c:	0801defd 	.word	0x0801defd
 801f930:	20000064 	.word	0x20000064

0801f934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f934:	b538      	push	{r3, r4, r5, lr}
 801f936:	4c15      	ldr	r4, [pc, #84]	; (801f98c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f938:	4605      	mov	r5, r0
 801f93a:	7823      	ldrb	r3, [r4, #0]
 801f93c:	f3bf 8f5b 	dmb	ish
 801f940:	07da      	lsls	r2, r3, #31
 801f942:	d40b      	bmi.n	801f95c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f944:	4620      	mov	r0, r4
 801f946:	f006 fc80 	bl	802624a <__cxa_guard_acquire>
 801f94a:	b138      	cbz	r0, 801f95c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f94c:	4620      	mov	r0, r4
 801f94e:	f006 fc88 	bl	8026262 <__cxa_guard_release>
 801f952:	4a0f      	ldr	r2, [pc, #60]	; (801f990 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f954:	490f      	ldr	r1, [pc, #60]	; (801f994 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f956:	4810      	ldr	r0, [pc, #64]	; (801f998 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f958:	f006 fc70 	bl	802623c <__aeabi_atexit>
 801f95c:	4c0f      	ldr	r4, [pc, #60]	; (801f99c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f95e:	7823      	ldrb	r3, [r4, #0]
 801f960:	f3bf 8f5b 	dmb	ish
 801f964:	07db      	lsls	r3, r3, #31
 801f966:	d40b      	bmi.n	801f980 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f968:	4620      	mov	r0, r4
 801f96a:	f006 fc6e 	bl	802624a <__cxa_guard_acquire>
 801f96e:	b138      	cbz	r0, 801f980 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f970:	4620      	mov	r0, r4
 801f972:	f006 fc76 	bl	8026262 <__cxa_guard_release>
 801f976:	4a06      	ldr	r2, [pc, #24]	; (801f990 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f978:	4909      	ldr	r1, [pc, #36]	; (801f9a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f97a:	480a      	ldr	r0, [pc, #40]	; (801f9a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f97c:	f006 fc5e 	bl	802623c <__aeabi_atexit>
 801f980:	4b05      	ldr	r3, [pc, #20]	; (801f998 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f982:	63ab      	str	r3, [r5, #56]	; 0x38
 801f984:	4b07      	ldr	r3, [pc, #28]	; (801f9a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f986:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f988:	bd38      	pop	{r3, r4, r5, pc}
 801f98a:	bf00      	nop
 801f98c:	20056814 	.word	0x20056814
 801f990:	20000000 	.word	0x20000000
 801f994:	0801df03 	.word	0x0801df03
 801f998:	20000040 	.word	0x20000040
 801f99c:	20056818 	.word	0x20056818
 801f9a0:	0801df01 	.word	0x0801df01
 801f9a4:	20000044 	.word	0x20000044

0801f9a8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f9a8:	b510      	push	{r4, lr}
 801f9aa:	4604      	mov	r4, r0
 801f9ac:	f7ff ff88 	bl	801f8c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f9b0:	4620      	mov	r0, r4
 801f9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9b6:	f7ff bfbd 	b.w	801f934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f9bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f9bc:	b538      	push	{r3, r4, r5, lr}
 801f9be:	4c15      	ldr	r4, [pc, #84]	; (801fa14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f9c0:	4605      	mov	r5, r0
 801f9c2:	7823      	ldrb	r3, [r4, #0]
 801f9c4:	f3bf 8f5b 	dmb	ish
 801f9c8:	07da      	lsls	r2, r3, #31
 801f9ca:	d40b      	bmi.n	801f9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f9cc:	4620      	mov	r0, r4
 801f9ce:	f006 fc3c 	bl	802624a <__cxa_guard_acquire>
 801f9d2:	b138      	cbz	r0, 801f9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f9d4:	4620      	mov	r0, r4
 801f9d6:	f006 fc44 	bl	8026262 <__cxa_guard_release>
 801f9da:	4a0f      	ldr	r2, [pc, #60]	; (801fa18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f9dc:	490f      	ldr	r1, [pc, #60]	; (801fa1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f9de:	4810      	ldr	r0, [pc, #64]	; (801fa20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f9e0:	f006 fc2c 	bl	802623c <__aeabi_atexit>
 801f9e4:	4c0f      	ldr	r4, [pc, #60]	; (801fa24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f9e6:	7823      	ldrb	r3, [r4, #0]
 801f9e8:	f3bf 8f5b 	dmb	ish
 801f9ec:	07db      	lsls	r3, r3, #31
 801f9ee:	d40b      	bmi.n	801fa08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f9f0:	4620      	mov	r0, r4
 801f9f2:	f006 fc2a 	bl	802624a <__cxa_guard_acquire>
 801f9f6:	b138      	cbz	r0, 801fa08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	f006 fc32 	bl	8026262 <__cxa_guard_release>
 801f9fe:	4a06      	ldr	r2, [pc, #24]	; (801fa18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fa00:	4909      	ldr	r1, [pc, #36]	; (801fa28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801fa02:	480a      	ldr	r0, [pc, #40]	; (801fa2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fa04:	f006 fc1a 	bl	802623c <__aeabi_atexit>
 801fa08:	4b05      	ldr	r3, [pc, #20]	; (801fa20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fa0a:	652b      	str	r3, [r5, #80]	; 0x50
 801fa0c:	4b07      	ldr	r3, [pc, #28]	; (801fa2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fa0e:	656b      	str	r3, [r5, #84]	; 0x54
 801fa10:	bd38      	pop	{r3, r4, r5, pc}
 801fa12:	bf00      	nop
 801fa14:	2005680c 	.word	0x2005680c
 801fa18:	20000000 	.word	0x20000000
 801fa1c:	0801def7 	.word	0x0801def7
 801fa20:	20000038 	.word	0x20000038
 801fa24:	20056810 	.word	0x20056810
 801fa28:	0801def5 	.word	0x0801def5
 801fa2c:	2000003c 	.word	0x2000003c

0801fa30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801fa30:	b538      	push	{r3, r4, r5, lr}
 801fa32:	4c15      	ldr	r4, [pc, #84]	; (801fa88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801fa34:	4605      	mov	r5, r0
 801fa36:	7823      	ldrb	r3, [r4, #0]
 801fa38:	f3bf 8f5b 	dmb	ish
 801fa3c:	07da      	lsls	r2, r3, #31
 801fa3e:	d40b      	bmi.n	801fa58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fa40:	4620      	mov	r0, r4
 801fa42:	f006 fc02 	bl	802624a <__cxa_guard_acquire>
 801fa46:	b138      	cbz	r0, 801fa58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fa48:	4620      	mov	r0, r4
 801fa4a:	f006 fc0a 	bl	8026262 <__cxa_guard_release>
 801fa4e:	4a0f      	ldr	r2, [pc, #60]	; (801fa8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fa50:	490f      	ldr	r1, [pc, #60]	; (801fa90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801fa52:	4810      	ldr	r0, [pc, #64]	; (801fa94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fa54:	f006 fbf2 	bl	802623c <__aeabi_atexit>
 801fa58:	4c0f      	ldr	r4, [pc, #60]	; (801fa98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801fa5a:	7823      	ldrb	r3, [r4, #0]
 801fa5c:	f3bf 8f5b 	dmb	ish
 801fa60:	07db      	lsls	r3, r3, #31
 801fa62:	d40b      	bmi.n	801fa7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801fa64:	4620      	mov	r0, r4
 801fa66:	f006 fbf0 	bl	802624a <__cxa_guard_acquire>
 801fa6a:	b138      	cbz	r0, 801fa7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801fa6c:	4620      	mov	r0, r4
 801fa6e:	f006 fbf8 	bl	8026262 <__cxa_guard_release>
 801fa72:	4a06      	ldr	r2, [pc, #24]	; (801fa8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fa74:	4909      	ldr	r1, [pc, #36]	; (801fa9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801fa76:	480a      	ldr	r0, [pc, #40]	; (801faa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fa78:	f006 fbe0 	bl	802623c <__aeabi_atexit>
 801fa7c:	4b05      	ldr	r3, [pc, #20]	; (801fa94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fa7e:	64ab      	str	r3, [r5, #72]	; 0x48
 801fa80:	4b07      	ldr	r3, [pc, #28]	; (801faa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fa82:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fa84:	bd38      	pop	{r3, r4, r5, pc}
 801fa86:	bf00      	nop
 801fa88:	200567fc 	.word	0x200567fc
 801fa8c:	20000000 	.word	0x20000000
 801fa90:	0801defb 	.word	0x0801defb
 801fa94:	20000028 	.word	0x20000028
 801fa98:	20056800 	.word	0x20056800
 801fa9c:	0801def9 	.word	0x0801def9
 801faa0:	2000002c 	.word	0x2000002c

0801faa4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801faa4:	b510      	push	{r4, lr}
 801faa6:	4604      	mov	r4, r0
 801faa8:	f7ff ff88 	bl	801f9bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801faac:	4620      	mov	r0, r4
 801faae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fab2:	f7ff bfbd 	b.w	801fa30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801fab6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801fab6:	b510      	push	{r4, lr}
 801fab8:	4604      	mov	r4, r0
 801faba:	f7ff fff3 	bl	801faa4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801fabe:	4620      	mov	r0, r4
 801fac0:	f7ff ff72 	bl	801f9a8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801fac4:	4620      	mov	r0, r4
 801fac6:	f7ff fe73 	bl	801f7b0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801faca:	4620      	mov	r0, r4
 801facc:	f7ff fdf2 	bl	801f6b4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801fad0:	4620      	mov	r0, r4
 801fad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fad6:	f7ff bee9 	b.w	801f8ac <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801fadc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801fadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae0:	b087      	sub	sp, #28
 801fae2:	7888      	ldrb	r0, [r1, #2]
 801fae4:	4616      	mov	r6, r2
 801fae6:	9001      	str	r0, [sp, #4]
 801fae8:	7848      	ldrb	r0, [r1, #1]
 801faea:	9100      	str	r1, [sp, #0]
 801faec:	9002      	str	r0, [sp, #8]
 801faee:	7808      	ldrb	r0, [r1, #0]
 801faf0:	9901      	ldr	r1, [sp, #4]
 801faf2:	9003      	str	r0, [sp, #12]
 801faf4:	9802      	ldr	r0, [sp, #8]
 801faf6:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801fafa:	0200      	lsls	r0, r0, #8
 801fafc:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801fb00:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801fb04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801fb08:	9903      	ldr	r1, [sp, #12]
 801fb0a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801fb0e:	4308      	orrs	r0, r1
 801fb10:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801fb14:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801fb18:	9005      	str	r0, [sp, #20]
 801fb1a:	fb05 ca0e 	mla	sl, r5, lr, ip
 801fb1e:	2d00      	cmp	r5, #0
 801fb20:	eb06 080a 	add.w	r8, r6, sl
 801fb24:	db4a      	blt.n	801fbbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801fb26:	45a9      	cmp	r9, r5
 801fb28:	dd48      	ble.n	801fbbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801fb2a:	f1bc 0f00 	cmp.w	ip, #0
 801fb2e:	db43      	blt.n	801fbb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801fb30:	45e6      	cmp	lr, ip
 801fb32:	dd41      	ble.n	801fbb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801fb34:	f816 600a 	ldrb.w	r6, [r6, sl]
 801fb38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fb3c:	441e      	add	r6, r3
 801fb3e:	f11c 0001 	adds.w	r0, ip, #1
 801fb42:	d43e      	bmi.n	801fbc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801fb44:	4586      	cmp	lr, r0
 801fb46:	dd3c      	ble.n	801fbc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801fb48:	2a00      	cmp	r2, #0
 801fb4a:	d03a      	beq.n	801fbc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801fb4c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801fb50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb54:	4418      	add	r0, r3
 801fb56:	3501      	adds	r5, #1
 801fb58:	d437      	bmi.n	801fbca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801fb5a:	45a9      	cmp	r9, r5
 801fb5c:	dd35      	ble.n	801fbca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801fb5e:	b3a4      	cbz	r4, 801fbca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801fb60:	f1bc 0f00 	cmp.w	ip, #0
 801fb64:	db2f      	blt.n	801fbc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801fb66:	45e6      	cmp	lr, ip
 801fb68:	dd2d      	ble.n	801fbc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801fb6a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801fb6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb72:	441d      	add	r5, r3
 801fb74:	f11c 0c01 	adds.w	ip, ip, #1
 801fb78:	d42a      	bmi.n	801fbd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801fb7a:	45e6      	cmp	lr, ip
 801fb7c:	dd28      	ble.n	801fbd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801fb7e:	b33a      	cbz	r2, 801fbd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801fb80:	44c6      	add	lr, r8
 801fb82:	f89e c001 	ldrb.w	ip, [lr, #1]
 801fb86:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fb8a:	4463      	add	r3, ip
 801fb8c:	ea6f 0c07 	mvn.w	ip, r7
 801fb90:	2a0f      	cmp	r2, #15
 801fb92:	f896 a000 	ldrb.w	sl, [r6]
 801fb96:	fa5f fc8c 	uxtb.w	ip, ip
 801fb9a:	f890 b000 	ldrb.w	fp, [r0]
 801fb9e:	f895 9000 	ldrb.w	r9, [r5]
 801fba2:	7819      	ldrb	r1, [r3, #0]
 801fba4:	d801      	bhi.n	801fbaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801fba6:	2c0f      	cmp	r4, #15
 801fba8:	d914      	bls.n	801fbd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801fbaa:	4b40      	ldr	r3, [pc, #256]	; (801fcac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801fbac:	f240 1157 	movw	r1, #343	; 0x157
 801fbb0:	4a3f      	ldr	r2, [pc, #252]	; (801fcb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801fbb2:	4840      	ldr	r0, [pc, #256]	; (801fcb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801fbb4:	f006 fc7c 	bl	80264b0 <__assert_func>
 801fbb8:	ae05      	add	r6, sp, #20
 801fbba:	e7c0      	b.n	801fb3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801fbbc:	a805      	add	r0, sp, #20
 801fbbe:	4606      	mov	r6, r0
 801fbc0:	e7c9      	b.n	801fb56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801fbc2:	a805      	add	r0, sp, #20
 801fbc4:	e7c7      	b.n	801fb56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801fbc6:	ad05      	add	r5, sp, #20
 801fbc8:	e7d4      	b.n	801fb74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801fbca:	ab05      	add	r3, sp, #20
 801fbcc:	461d      	mov	r5, r3
 801fbce:	e7dd      	b.n	801fb8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801fbd0:	ab05      	add	r3, sp, #20
 801fbd2:	e7db      	b.n	801fb8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801fbd4:	b292      	uxth	r2, r2
 801fbd6:	b2a4      	uxth	r4, r4
 801fbd8:	fa1f fc8c 	uxth.w	ip, ip
 801fbdc:	fb02 f804 	mul.w	r8, r2, r4
 801fbe0:	0112      	lsls	r2, r2, #4
 801fbe2:	b2bf      	uxth	r7, r7
 801fbe4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801fbe8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801fbec:	eba2 0208 	sub.w	r2, r2, r8
 801fbf0:	b2a4      	uxth	r4, r4
 801fbf2:	b292      	uxth	r2, r2
 801fbf4:	ebae 0e04 	sub.w	lr, lr, r4
 801fbf8:	fb02 fb0b 	mul.w	fp, r2, fp
 801fbfc:	fa1f fe8e 	uxth.w	lr, lr
 801fc00:	fb0e ba0a 	mla	sl, lr, sl, fp
 801fc04:	fb04 aa09 	mla	sl, r4, r9, sl
 801fc08:	fb08 aa01 	mla	sl, r8, r1, sl
 801fc0c:	9903      	ldr	r1, [sp, #12]
 801fc0e:	fb11 f90c 	smulbb	r9, r1, ip
 801fc12:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801fc16:	9900      	ldr	r1, [sp, #0]
 801fc18:	fb0a 9a07 	mla	sl, sl, r7, r9
 801fc1c:	fa1f fa8a 	uxth.w	sl, sl
 801fc20:	f10a 0901 	add.w	r9, sl, #1
 801fc24:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801fc28:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fc2c:	f881 a000 	strb.w	sl, [r1]
 801fc30:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fc34:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fc38:	fb02 fa0a 	mul.w	sl, r2, sl
 801fc3c:	9902      	ldr	r1, [sp, #8]
 801fc3e:	fb0e aa09 	mla	sl, lr, r9, sl
 801fc42:	f895 9001 	ldrb.w	r9, [r5, #1]
 801fc46:	fb04 aa09 	mla	sl, r4, r9, sl
 801fc4a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801fc4e:	fb08 a909 	mla	r9, r8, r9, sl
 801fc52:	fb11 fa0c 	smulbb	sl, r1, ip
 801fc56:	9900      	ldr	r1, [sp, #0]
 801fc58:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fc5c:	fb09 a907 	mla	r9, r9, r7, sl
 801fc60:	fa1f f989 	uxth.w	r9, r9
 801fc64:	f109 0a01 	add.w	sl, r9, #1
 801fc68:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fc6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc70:	f881 9001 	strb.w	r9, [r1, #1]
 801fc74:	7880      	ldrb	r0, [r0, #2]
 801fc76:	78b6      	ldrb	r6, [r6, #2]
 801fc78:	4342      	muls	r2, r0
 801fc7a:	78a8      	ldrb	r0, [r5, #2]
 801fc7c:	789b      	ldrb	r3, [r3, #2]
 801fc7e:	fb0e 2206 	mla	r2, lr, r6, r2
 801fc82:	fb04 2400 	mla	r4, r4, r0, r2
 801fc86:	fb08 4803 	mla	r8, r8, r3, r4
 801fc8a:	9b01      	ldr	r3, [sp, #4]
 801fc8c:	fb13 fc0c 	smulbb	ip, r3, ip
 801fc90:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fc94:	fb08 c707 	mla	r7, r8, r7, ip
 801fc98:	b2bf      	uxth	r7, r7
 801fc9a:	f107 0c01 	add.w	ip, r7, #1
 801fc9e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801fca2:	123f      	asrs	r7, r7, #8
 801fca4:	708f      	strb	r7, [r1, #2]
 801fca6:	b007      	add	sp, #28
 801fca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcac:	0802e527 	.word	0x0802e527
 801fcb0:	0802ea8f 	.word	0x0802ea8f
 801fcb4:	0802e5f0 	.word	0x0802e5f0

0801fcb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcbc:	ed2d 8b08 	vpush	{d8-d11}
 801fcc0:	b093      	sub	sp, #76	; 0x4c
 801fcc2:	eeb0 aa40 	vmov.f32	s20, s0
 801fcc6:	eef0 9a60 	vmov.f32	s19, s1
 801fcca:	9210      	str	r2, [sp, #64]	; 0x40
 801fccc:	eeb0 9a41 	vmov.f32	s18, s2
 801fcd0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fcd2:	eeb0 8a62 	vmov.f32	s16, s5
 801fcd6:	9309      	str	r3, [sp, #36]	; 0x24
 801fcd8:	eef0 8a43 	vmov.f32	s17, s6
 801fcdc:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801fce0:	eef0 ba44 	vmov.f32	s23, s8
 801fce4:	9011      	str	r0, [sp, #68]	; 0x44
 801fce6:	eeb0 ba64 	vmov.f32	s22, s9
 801fcea:	930e      	str	r3, [sp, #56]	; 0x38
 801fcec:	eef0 aa45 	vmov.f32	s21, s10
 801fcf0:	6850      	ldr	r0, [r2, #4]
 801fcf2:	910d      	str	r1, [sp, #52]	; 0x34
 801fcf4:	6812      	ldr	r2, [r2, #0]
 801fcf6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801fcfa:	fb00 1303 	mla	r3, r0, r3, r1
 801fcfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd02:	18d3      	adds	r3, r2, r3
 801fd04:	930a      	str	r3, [sp, #40]	; 0x28
 801fd06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	930c      	str	r3, [sp, #48]	; 0x30
 801fd0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd0e:	685c      	ldr	r4, [r3, #4]
 801fd10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd12:	3404      	adds	r4, #4
 801fd14:	43db      	mvns	r3, r3
 801fd16:	b2db      	uxtb	r3, r3
 801fd18:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	dc03      	bgt.n	801fd28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	f340 8250 	ble.w	80201c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801fd28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd32:	1e48      	subs	r0, r1, #1
 801fd34:	1e55      	subs	r5, r2, #1
 801fd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	f340 80ee 	ble.w	801ff1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801fd3e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801fd40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd42:	1436      	asrs	r6, r6, #16
 801fd44:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd48:	d406      	bmi.n	801fd58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd4a:	4286      	cmp	r6, r0
 801fd4c:	da04      	bge.n	801fd58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	db02      	blt.n	801fd58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd52:	42ab      	cmp	r3, r5
 801fd54:	f2c0 80e2 	blt.w	801ff1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fd58:	3601      	adds	r6, #1
 801fd5a:	f100 80cf 	bmi.w	801fefc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801fd5e:	42b1      	cmp	r1, r6
 801fd60:	f2c0 80cc 	blt.w	801fefc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801fd64:	3301      	adds	r3, #1
 801fd66:	f100 80c9 	bmi.w	801fefc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801fd6a:	429a      	cmp	r2, r3
 801fd6c:	f2c0 80c6 	blt.w	801fefc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801fd70:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801fd74:	f1bb 0f00 	cmp.w	fp, #0
 801fd78:	f340 80f1 	ble.w	801ff5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fd7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fd80:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801fd82:	141d      	asrs	r5, r3, #16
 801fd84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fd86:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fd8a:	68c7      	ldr	r7, [r0, #12]
 801fd8c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fd8e:	1418      	asrs	r0, r3, #16
 801fd90:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801fd94:	6892      	ldr	r2, [r2, #8]
 801fd96:	f100 8137 	bmi.w	8020008 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fd9a:	f102 3cff 	add.w	ip, r2, #4294967295
 801fd9e:	4560      	cmp	r0, ip
 801fda0:	f280 8132 	bge.w	8020008 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fda4:	2d00      	cmp	r5, #0
 801fda6:	f2c0 812f 	blt.w	8020008 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fdaa:	f107 3cff 	add.w	ip, r7, #4294967295
 801fdae:	4565      	cmp	r5, ip
 801fdb0:	f280 812a 	bge.w	8020008 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fdb4:	b212      	sxth	r2, r2
 801fdb6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fdb8:	fb05 0002 	mla	r0, r5, r2, r0
 801fdbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fdbe:	f817 c000 	ldrb.w	ip, [r7, r0]
 801fdc2:	4405      	add	r5, r0
 801fdc4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fdc8:	eb04 0e0c 	add.w	lr, r4, ip
 801fdcc:	f1b8 0f00 	cmp.w	r8, #0
 801fdd0:	f000 810c 	beq.w	801ffec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801fdd4:	786f      	ldrb	r7, [r5, #1]
 801fdd6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fdda:	4427      	add	r7, r4
 801fddc:	2900      	cmp	r1, #0
 801fdde:	f000 810d 	beq.w	801fffc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fde2:	18a8      	adds	r0, r5, r2
 801fde4:	5caa      	ldrb	r2, [r5, r2]
 801fde6:	7840      	ldrb	r0, [r0, #1]
 801fde8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fdec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fdf0:	4422      	add	r2, r4
 801fdf2:	4420      	add	r0, r4
 801fdf4:	fa1f f388 	uxth.w	r3, r8
 801fdf8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801fdfc:	b289      	uxth	r1, r1
 801fdfe:	f897 c000 	ldrb.w	ip, [r7]
 801fe02:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801fe06:	fb03 f901 	mul.w	r9, r3, r1
 801fe0a:	011b      	lsls	r3, r3, #4
 801fe0c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fe10:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801fe14:	eba3 0309 	sub.w	r3, r3, r9
 801fe18:	b289      	uxth	r1, r1
 801fe1a:	b29b      	uxth	r3, r3
 801fe1c:	eba8 0801 	sub.w	r8, r8, r1
 801fe20:	fb03 fc0c 	mul.w	ip, r3, ip
 801fe24:	fa1f f888 	uxth.w	r8, r8
 801fe28:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe2c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801fe30:	f892 a000 	ldrb.w	sl, [r2]
 801fe34:	fb01 cc0a 	mla	ip, r1, sl, ip
 801fe38:	f890 a000 	ldrb.w	sl, [r0]
 801fe3c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801fe40:	f896 a000 	ldrb.w	sl, [r6]
 801fe44:	fb1a fa03 	smulbb	sl, sl, r3
 801fe48:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fe4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe4e:	fb0c ac05 	mla	ip, ip, r5, sl
 801fe52:	fa1f fc8c 	uxth.w	ip, ip
 801fe56:	f10c 0a01 	add.w	sl, ip, #1
 801fe5a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801fe5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fe62:	f886 a000 	strb.w	sl, [r6]
 801fe66:	f897 c001 	ldrb.w	ip, [r7, #1]
 801fe6a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801fe6e:	fb03 fc0c 	mul.w	ip, r3, ip
 801fe72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe74:	fb08 cc0a 	mla	ip, r8, sl, ip
 801fe78:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fe7c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801fe80:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fe84:	fb09 cc0a 	mla	ip, r9, sl, ip
 801fe88:	f896 a001 	ldrb.w	sl, [r6, #1]
 801fe8c:	fb1a fa03 	smulbb	sl, sl, r3
 801fe90:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fe94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe96:	fb0c ac05 	mla	ip, ip, r5, sl
 801fe9a:	fa1f fc8c 	uxth.w	ip, ip
 801fe9e:	f10c 0a01 	add.w	sl, ip, #1
 801fea2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801fea6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801feaa:	f886 c001 	strb.w	ip, [r6, #1]
 801feae:	78bf      	ldrb	r7, [r7, #2]
 801feb0:	f89e c002 	ldrb.w	ip, [lr, #2]
 801feb4:	437b      	muls	r3, r7
 801feb6:	fb08 330c 	mla	r3, r8, ip, r3
 801feba:	f892 c002 	ldrb.w	ip, [r2, #2]
 801febe:	7882      	ldrb	r2, [r0, #2]
 801fec0:	fb01 310c 	mla	r1, r1, ip, r3
 801fec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fec6:	fb09 1902 	mla	r9, r9, r2, r1
 801feca:	78b1      	ldrb	r1, [r6, #2]
 801fecc:	fb11 f103 	smulbb	r1, r1, r3
 801fed0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fed4:	fb09 1505 	mla	r5, r9, r5, r1
 801fed8:	b2ad      	uxth	r5, r5
 801feda:	1c6b      	adds	r3, r5, #1
 801fedc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fee0:	122d      	asrs	r5, r5, #8
 801fee2:	70b5      	strb	r5, [r6, #2]
 801fee4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fee6:	3603      	adds	r6, #3
 801fee8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801feea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801feee:	4413      	add	r3, r2
 801fef0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fef2:	9325      	str	r3, [sp, #148]	; 0x94
 801fef4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fef6:	4413      	add	r3, r2
 801fef8:	9326      	str	r3, [sp, #152]	; 0x98
 801fefa:	e73b      	b.n	801fd74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801fefc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fefe:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801ff00:	4433      	add	r3, r6
 801ff02:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801ff04:	9325      	str	r3, [sp, #148]	; 0x94
 801ff06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ff08:	4433      	add	r3, r6
 801ff0a:	9326      	str	r3, [sp, #152]	; 0x98
 801ff0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff0e:	3b01      	subs	r3, #1
 801ff10:	9309      	str	r3, [sp, #36]	; 0x24
 801ff12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff14:	3303      	adds	r3, #3
 801ff16:	930a      	str	r3, [sp, #40]	; 0x28
 801ff18:	e70d      	b.n	801fd36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ff1a:	d028      	beq.n	801ff6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ff1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff1e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ff20:	3b01      	subs	r3, #1
 801ff22:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801ff24:	fb00 5003 	mla	r0, r0, r3, r5
 801ff28:	1400      	asrs	r0, r0, #16
 801ff2a:	f53f af21 	bmi.w	801fd70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ff2e:	3901      	subs	r1, #1
 801ff30:	4288      	cmp	r0, r1
 801ff32:	f6bf af1d 	bge.w	801fd70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ff36:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ff38:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ff3a:	fb01 0303 	mla	r3, r1, r3, r0
 801ff3e:	141b      	asrs	r3, r3, #16
 801ff40:	f53f af16 	bmi.w	801fd70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ff44:	3a01      	subs	r2, #1
 801ff46:	4293      	cmp	r3, r2
 801ff48:	f6bf af12 	bge.w	801fd70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ff4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ff52:	1cdf      	adds	r7, r3, #3
 801ff54:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ff58:	f1b9 0f00 	cmp.w	r9, #0
 801ff5c:	dc73      	bgt.n	8020046 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801ff5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ff62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff6a:	441a      	add	r2, r3
 801ff6c:	920a      	str	r2, [sp, #40]	; 0x28
 801ff6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	f340 8129 	ble.w	80201c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801ff76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff7c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ff80:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ff84:	eef0 6a48 	vmov.f32	s13, s16
 801ff88:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ff8c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ff90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff94:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801ff98:	eef0 6a68 	vmov.f32	s13, s17
 801ff9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffa0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801ffa4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ffa8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ffac:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ffb0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ffb4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ffb8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ffbc:	ee18 2a10 	vmov	r2, s16
 801ffc0:	eeb0 8a47 	vmov.f32	s16, s14
 801ffc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffc8:	ee18 2a90 	vmov	r2, s17
 801ffcc:	9327      	str	r3, [sp, #156]	; 0x9c
 801ffce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ffd0:	eef0 8a67 	vmov.f32	s17, s15
 801ffd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffd8:	9328      	str	r3, [sp, #160]	; 0xa0
 801ffda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ffdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ffde:	3b01      	subs	r3, #1
 801ffe0:	930d      	str	r3, [sp, #52]	; 0x34
 801ffe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ffe4:	bf08      	it	eq
 801ffe6:	4613      	moveq	r3, r2
 801ffe8:	9309      	str	r3, [sp, #36]	; 0x24
 801ffea:	e696      	b.n	801fd1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ffec:	b149      	cbz	r1, 8020002 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ffee:	5caa      	ldrb	r2, [r5, r2]
 801fff0:	4670      	mov	r0, lr
 801fff2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fff6:	4422      	add	r2, r4
 801fff8:	4677      	mov	r7, lr
 801fffa:	e6fb      	b.n	801fdf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fffc:	4670      	mov	r0, lr
 801fffe:	4672      	mov	r2, lr
 8020000:	e6f8      	b.n	801fdf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8020002:	4670      	mov	r0, lr
 8020004:	4672      	mov	r2, lr
 8020006:	e7f7      	b.n	801fff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8020008:	f110 0c01 	adds.w	ip, r0, #1
 802000c:	f53f af6a 	bmi.w	801fee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020010:	4562      	cmp	r2, ip
 8020012:	f6ff af67 	blt.w	801fee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020016:	f115 0c01 	adds.w	ip, r5, #1
 802001a:	f53f af63 	bmi.w	801fee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802001e:	4567      	cmp	r7, ip
 8020020:	f6ff af60 	blt.w	801fee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020026:	b23f      	sxth	r7, r7
 8020028:	b212      	sxth	r2, r2
 802002a:	9002      	str	r0, [sp, #8]
 802002c:	9701      	str	r7, [sp, #4]
 802002e:	9200      	str	r2, [sp, #0]
 8020030:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020034:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020038:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802003c:	4623      	mov	r3, r4
 802003e:	4631      	mov	r1, r6
 8020040:	f7ff fd4c 	bl	801fadc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020044:	e74e      	b.n	801fee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020046:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020048:	9826      	ldr	r0, [sp, #152]	; 0x98
 802004a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802004e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020050:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020052:	1400      	asrs	r0, r0, #16
 8020054:	142d      	asrs	r5, r5, #16
 8020056:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020058:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802005c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020060:	fb02 5000 	mla	r0, r2, r0, r5
 8020064:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020066:	f815 e000 	ldrb.w	lr, [r5, r0]
 802006a:	eb05 0c00 	add.w	ip, r5, r0
 802006e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020072:	eb04 060e 	add.w	r6, r4, lr
 8020076:	2b00      	cmp	r3, #0
 8020078:	f000 8097 	beq.w	80201aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802007c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020084:	4425      	add	r5, r4
 8020086:	2900      	cmp	r1, #0
 8020088:	f000 8098 	beq.w	80201bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802008c:	eb0c 0002 	add.w	r0, ip, r2
 8020090:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020094:	7840      	ldrb	r0, [r0, #1]
 8020096:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802009a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802009e:	4422      	add	r2, r4
 80200a0:	4420      	add	r0, r4
 80200a2:	b29b      	uxth	r3, r3
 80200a4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80200a8:	b289      	uxth	r1, r1
 80200aa:	f895 e000 	ldrb.w	lr, [r5]
 80200ae:	3703      	adds	r7, #3
 80200b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80200b4:	fb03 f801 	mul.w	r8, r3, r1
 80200b8:	011b      	lsls	r3, r3, #4
 80200ba:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80200be:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80200c2:	eba3 0308 	sub.w	r3, r3, r8
 80200c6:	b289      	uxth	r1, r1
 80200c8:	b29b      	uxth	r3, r3
 80200ca:	ebac 0c01 	sub.w	ip, ip, r1
 80200ce:	fb03 fe0e 	mul.w	lr, r3, lr
 80200d2:	fa1f fc8c 	uxth.w	ip, ip
 80200d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80200d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200da:	fb0c ee0b 	mla	lr, ip, fp, lr
 80200de:	f892 b000 	ldrb.w	fp, [r2]
 80200e2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80200e6:	f890 b000 	ldrb.w	fp, [r0]
 80200ea:	fb08 ee0b 	mla	lr, r8, fp, lr
 80200ee:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80200f2:	fb1b fb03 	smulbb	fp, fp, r3
 80200f6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80200fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200fc:	fb0e be0a 	mla	lr, lr, sl, fp
 8020100:	fa1f fe8e 	uxth.w	lr, lr
 8020104:	f10e 0b01 	add.w	fp, lr, #1
 8020108:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802010c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020110:	f807 ec06 	strb.w	lr, [r7, #-6]
 8020114:	f895 e001 	ldrb.w	lr, [r5, #1]
 8020118:	f896 b001 	ldrb.w	fp, [r6, #1]
 802011c:	fb03 fe0e 	mul.w	lr, r3, lr
 8020120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020122:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020126:	f892 b001 	ldrb.w	fp, [r2, #1]
 802012a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802012e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020132:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020136:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802013a:	fb1b fb03 	smulbb	fp, fp, r3
 802013e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020144:	fb0e be0a 	mla	lr, lr, sl, fp
 8020148:	fa1f fe8e 	uxth.w	lr, lr
 802014c:	f10e 0b01 	add.w	fp, lr, #1
 8020150:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020154:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020158:	f807 ec05 	strb.w	lr, [r7, #-5]
 802015c:	78ad      	ldrb	r5, [r5, #2]
 802015e:	78b6      	ldrb	r6, [r6, #2]
 8020160:	436b      	muls	r3, r5
 8020162:	7895      	ldrb	r5, [r2, #2]
 8020164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020166:	fb0c 3306 	mla	r3, ip, r6, r3
 802016a:	fb01 3305 	mla	r3, r1, r5, r3
 802016e:	7885      	ldrb	r5, [r0, #2]
 8020170:	fb08 3805 	mla	r8, r8, r5, r3
 8020174:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8020178:	fb13 f302 	smulbb	r3, r3, r2
 802017c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020180:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020182:	fb08 380a 	mla	r8, r8, sl, r3
 8020186:	fa1f f888 	uxth.w	r8, r8
 802018a:	f108 0301 	add.w	r3, r8, #1
 802018e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8020192:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020194:	4413      	add	r3, r2
 8020196:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020198:	ea4f 2828 	mov.w	r8, r8, asr #8
 802019c:	9325      	str	r3, [sp, #148]	; 0x94
 802019e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80201a0:	f807 8c04 	strb.w	r8, [r7, #-4]
 80201a4:	4413      	add	r3, r2
 80201a6:	9326      	str	r3, [sp, #152]	; 0x98
 80201a8:	e6d6      	b.n	801ff58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80201aa:	b151      	cbz	r1, 80201c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80201ac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80201b0:	4630      	mov	r0, r6
 80201b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201b6:	4422      	add	r2, r4
 80201b8:	4635      	mov	r5, r6
 80201ba:	e772      	b.n	80200a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80201bc:	4630      	mov	r0, r6
 80201be:	4632      	mov	r2, r6
 80201c0:	e76f      	b.n	80200a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80201c2:	4630      	mov	r0, r6
 80201c4:	4632      	mov	r2, r6
 80201c6:	e7f7      	b.n	80201b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80201c8:	b013      	add	sp, #76	; 0x4c
 80201ca:	ecbd 8b08 	vpop	{d8-d11}
 80201ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080201d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80201d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201d8:	784d      	ldrb	r5, [r1, #1]
 80201da:	f891 9002 	ldrb.w	r9, [r1, #2]
 80201de:	022d      	lsls	r5, r5, #8
 80201e0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80201e4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80201e8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80201ec:	f891 9000 	ldrb.w	r9, [r1]
 80201f0:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80201f4:	ea45 0509 	orr.w	r5, r5, r9
 80201f8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80201fc:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020200:	9501      	str	r5, [sp, #4]
 8020202:	fb06 470c 	mla	r7, r6, ip, r4
 8020206:	2e00      	cmp	r6, #0
 8020208:	eb02 0e07 	add.w	lr, r2, r7
 802020c:	db46      	blt.n	802029c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 802020e:	45b0      	cmp	r8, r6
 8020210:	dd44      	ble.n	802029c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8020212:	2c00      	cmp	r4, #0
 8020214:	db40      	blt.n	8020298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8020216:	45a4      	cmp	ip, r4
 8020218:	dd3e      	ble.n	8020298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 802021a:	5dd7      	ldrb	r7, [r2, r7]
 802021c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020220:	441f      	add	r7, r3
 8020222:	1c62      	adds	r2, r4, #1
 8020224:	d43d      	bmi.n	80202a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020226:	4594      	cmp	ip, r2
 8020228:	dd3b      	ble.n	80202a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 802022a:	f1ba 0f00 	cmp.w	sl, #0
 802022e:	d038      	beq.n	80202a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020230:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020238:	441d      	add	r5, r3
 802023a:	3601      	adds	r6, #1
 802023c:	d435      	bmi.n	80202aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 802023e:	45b0      	cmp	r8, r6
 8020240:	dd33      	ble.n	80202aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020242:	b390      	cbz	r0, 80202aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020244:	2c00      	cmp	r4, #0
 8020246:	db2e      	blt.n	80202a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8020248:	45a4      	cmp	ip, r4
 802024a:	dd2c      	ble.n	80202a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 802024c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020250:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020254:	441e      	add	r6, r3
 8020256:	1c62      	adds	r2, r4, #1
 8020258:	d42a      	bmi.n	80202b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 802025a:	4594      	cmp	ip, r2
 802025c:	dd28      	ble.n	80202b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 802025e:	f1ba 0f00 	cmp.w	sl, #0
 8020262:	d025      	beq.n	80202b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8020264:	44f4      	add	ip, lr
 8020266:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802026a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802026e:	4413      	add	r3, r2
 8020270:	f1ba 0f0f 	cmp.w	sl, #15
 8020274:	f897 8000 	ldrb.w	r8, [r7]
 8020278:	f895 9000 	ldrb.w	r9, [r5]
 802027c:	f896 e000 	ldrb.w	lr, [r6]
 8020280:	f893 c000 	ldrb.w	ip, [r3]
 8020284:	d801      	bhi.n	802028a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8020286:	280f      	cmp	r0, #15
 8020288:	d914      	bls.n	80202b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 802028a:	4b29      	ldr	r3, [pc, #164]	; (8020330 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 802028c:	f240 1157 	movw	r1, #343	; 0x157
 8020290:	4a28      	ldr	r2, [pc, #160]	; (8020334 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8020292:	4829      	ldr	r0, [pc, #164]	; (8020338 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8020294:	f006 f90c 	bl	80264b0 <__assert_func>
 8020298:	af01      	add	r7, sp, #4
 802029a:	e7c2      	b.n	8020222 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 802029c:	ad01      	add	r5, sp, #4
 802029e:	462f      	mov	r7, r5
 80202a0:	e7cb      	b.n	802023a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80202a2:	ad01      	add	r5, sp, #4
 80202a4:	e7c9      	b.n	802023a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80202a6:	ae01      	add	r6, sp, #4
 80202a8:	e7d5      	b.n	8020256 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80202aa:	ab01      	add	r3, sp, #4
 80202ac:	461e      	mov	r6, r3
 80202ae:	e7df      	b.n	8020270 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80202b0:	ab01      	add	r3, sp, #4
 80202b2:	e7dd      	b.n	8020270 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80202b4:	fa1f f48a 	uxth.w	r4, sl
 80202b8:	b280      	uxth	r0, r0
 80202ba:	fb04 fa00 	mul.w	sl, r4, r0
 80202be:	0124      	lsls	r4, r4, #4
 80202c0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80202c4:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80202c8:	b282      	uxth	r2, r0
 80202ca:	eba4 000a 	sub.w	r0, r4, sl
 80202ce:	ebab 0b02 	sub.w	fp, fp, r2
 80202d2:	b280      	uxth	r0, r0
 80202d4:	fa1f fb8b 	uxth.w	fp, fp
 80202d8:	fb00 f909 	mul.w	r9, r0, r9
 80202dc:	fb0b 9808 	mla	r8, fp, r8, r9
 80202e0:	fb02 8e0e 	mla	lr, r2, lr, r8
 80202e4:	fb0a ec0c 	mla	ip, sl, ip, lr
 80202e8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80202ec:	f881 c000 	strb.w	ip, [r1]
 80202f0:	786c      	ldrb	r4, [r5, #1]
 80202f2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80202f6:	4344      	muls	r4, r0
 80202f8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80202fc:	7874      	ldrb	r4, [r6, #1]
 80202fe:	fb02 cc04 	mla	ip, r2, r4, ip
 8020302:	785c      	ldrb	r4, [r3, #1]
 8020304:	fb0a c404 	mla	r4, sl, r4, ip
 8020308:	1224      	asrs	r4, r4, #8
 802030a:	704c      	strb	r4, [r1, #1]
 802030c:	78ad      	ldrb	r5, [r5, #2]
 802030e:	78bc      	ldrb	r4, [r7, #2]
 8020310:	4368      	muls	r0, r5
 8020312:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020316:	78b0      	ldrb	r0, [r6, #2]
 8020318:	fb02 b000 	mla	r0, r2, r0, fp
 802031c:	789a      	ldrb	r2, [r3, #2]
 802031e:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020322:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020326:	f881 a002 	strb.w	sl, [r1, #2]
 802032a:	b003      	add	sp, #12
 802032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020330:	0802e527 	.word	0x0802e527
 8020334:	0802ea8f 	.word	0x0802ea8f
 8020338:	0802e5f0 	.word	0x0802e5f0

0802033c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802033c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020340:	ed2d 8b0a 	vpush	{d8-d12}
 8020344:	b08d      	sub	sp, #52	; 0x34
 8020346:	eeb0 aa40 	vmov.f32	s20, s0
 802034a:	eef0 9a60 	vmov.f32	s19, s1
 802034e:	900b      	str	r0, [sp, #44]	; 0x2c
 8020350:	eeb0 9a41 	vmov.f32	s18, s2
 8020354:	9306      	str	r3, [sp, #24]
 8020356:	eeb0 8a62 	vmov.f32	s16, s5
 802035a:	eef0 8a43 	vmov.f32	s17, s6
 802035e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8020360:	eeb0 ca44 	vmov.f32	s24, s8
 8020364:	eef0 ba64 	vmov.f32	s23, s9
 8020368:	eeb0 ba45 	vmov.f32	s22, s10
 802036c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020370:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8020374:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020376:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802037a:	6850      	ldr	r0, [r2, #4]
 802037c:	6812      	ldr	r2, [r2, #0]
 802037e:	fb00 1303 	mla	r3, r0, r3, r1
 8020382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020386:	18d3      	adds	r3, r2, r3
 8020388:	9307      	str	r3, [sp, #28]
 802038a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	9308      	str	r3, [sp, #32]
 8020390:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020392:	685d      	ldr	r5, [r3, #4]
 8020394:	3504      	adds	r5, #4
 8020396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020398:	2b00      	cmp	r3, #0
 802039a:	dc03      	bgt.n	80203a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802039c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802039e:	2b00      	cmp	r3, #0
 80203a0:	f340 81e6 	ble.w	8020770 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80203a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80203a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203ae:	1e48      	subs	r0, r1, #1
 80203b0:	1e56      	subs	r6, r2, #1
 80203b2:	9b06      	ldr	r3, [sp, #24]
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	f340 80bd 	ble.w	8020534 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80203ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80203bc:	1427      	asrs	r7, r4, #16
 80203be:	ea4f 4323 	mov.w	r3, r3, asr #16
 80203c2:	d406      	bmi.n	80203d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203c4:	4287      	cmp	r7, r0
 80203c6:	da04      	bge.n	80203d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	db02      	blt.n	80203d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203cc:	42b3      	cmp	r3, r6
 80203ce:	f2c0 80b2 	blt.w	8020536 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80203d2:	3701      	adds	r7, #1
 80203d4:	f100 80a1 	bmi.w	802051a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80203d8:	42b9      	cmp	r1, r7
 80203da:	f2c0 809e 	blt.w	802051a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80203de:	3301      	adds	r3, #1
 80203e0:	f100 809b 	bmi.w	802051a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80203e4:	429a      	cmp	r2, r3
 80203e6:	f2c0 8098 	blt.w	802051a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80203ea:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80203ee:	f1bb 0f00 	cmp.w	fp, #0
 80203f2:	f340 80bf 	ble.w	8020574 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80203f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80203f8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80203fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80203fc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020400:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020404:	1420      	asrs	r0, r4, #16
 8020406:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020408:	ea4f 4723 	mov.w	r7, r3, asr #16
 802040c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020410:	6892      	ldr	r2, [r2, #8]
 8020412:	f100 8103 	bmi.w	802061c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020416:	f102 3eff 	add.w	lr, r2, #4294967295
 802041a:	4570      	cmp	r0, lr
 802041c:	f280 80fe 	bge.w	802061c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020420:	2f00      	cmp	r7, #0
 8020422:	f2c0 80fb 	blt.w	802061c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020426:	f10c 3eff 	add.w	lr, ip, #4294967295
 802042a:	4577      	cmp	r7, lr
 802042c:	f280 80f6 	bge.w	802061c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020430:	b212      	sxth	r2, r2
 8020432:	fb07 0002 	mla	r0, r7, r2, r0
 8020436:	9f08      	ldr	r7, [sp, #32]
 8020438:	f817 8000 	ldrb.w	r8, [r7, r0]
 802043c:	eb07 0e00 	add.w	lr, r7, r0
 8020440:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020444:	eb05 0c08 	add.w	ip, r5, r8
 8020448:	2b00      	cmp	r3, #0
 802044a:	f000 80d8 	beq.w	80205fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 802044e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020452:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020456:	442f      	add	r7, r5
 8020458:	2900      	cmp	r1, #0
 802045a:	f000 80d9 	beq.w	8020610 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802045e:	eb0e 0002 	add.w	r0, lr, r2
 8020462:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020466:	7840      	ldrb	r0, [r0, #1]
 8020468:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802046c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020470:	442a      	add	r2, r5
 8020472:	4428      	add	r0, r5
 8020474:	b29b      	uxth	r3, r3
 8020476:	f815 a008 	ldrb.w	sl, [r5, r8]
 802047a:	b289      	uxth	r1, r1
 802047c:	f897 8000 	ldrb.w	r8, [r7]
 8020480:	fb03 f901 	mul.w	r9, r3, r1
 8020484:	011b      	lsls	r3, r3, #4
 8020486:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802048a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802048e:	eba3 0309 	sub.w	r3, r3, r9
 8020492:	b289      	uxth	r1, r1
 8020494:	b29b      	uxth	r3, r3
 8020496:	ebae 0e01 	sub.w	lr, lr, r1
 802049a:	fb03 f808 	mul.w	r8, r3, r8
 802049e:	fa1f fe8e 	uxth.w	lr, lr
 80204a2:	fb0e 880a 	mla	r8, lr, sl, r8
 80204a6:	f892 a000 	ldrb.w	sl, [r2]
 80204aa:	fb01 880a 	mla	r8, r1, sl, r8
 80204ae:	f890 a000 	ldrb.w	sl, [r0]
 80204b2:	fb09 880a 	mla	r8, r9, sl, r8
 80204b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80204ba:	f886 8000 	strb.w	r8, [r6]
 80204be:	f897 8001 	ldrb.w	r8, [r7, #1]
 80204c2:	f89c a001 	ldrb.w	sl, [ip, #1]
 80204c6:	fb03 f808 	mul.w	r8, r3, r8
 80204ca:	fb0e 880a 	mla	r8, lr, sl, r8
 80204ce:	f892 a001 	ldrb.w	sl, [r2, #1]
 80204d2:	fb01 880a 	mla	r8, r1, sl, r8
 80204d6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80204da:	fb09 880a 	mla	r8, r9, sl, r8
 80204de:	ea4f 2828 	mov.w	r8, r8, asr #8
 80204e2:	f886 8001 	strb.w	r8, [r6, #1]
 80204e6:	78bf      	ldrb	r7, [r7, #2]
 80204e8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80204ec:	437b      	muls	r3, r7
 80204ee:	7892      	ldrb	r2, [r2, #2]
 80204f0:	fb0e 330c 	mla	r3, lr, ip, r3
 80204f4:	fb01 3102 	mla	r1, r1, r2, r3
 80204f8:	7882      	ldrb	r2, [r0, #2]
 80204fa:	fb09 1902 	mla	r9, r9, r2, r1
 80204fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020502:	f886 9002 	strb.w	r9, [r6, #2]
 8020506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020508:	3603      	adds	r6, #3
 802050a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802050c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020510:	441c      	add	r4, r3
 8020512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020514:	4413      	add	r3, r2
 8020516:	9322      	str	r3, [sp, #136]	; 0x88
 8020518:	e769      	b.n	80203ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802051a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802051c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 802051e:	441c      	add	r4, r3
 8020520:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020522:	443b      	add	r3, r7
 8020524:	9322      	str	r3, [sp, #136]	; 0x88
 8020526:	9b06      	ldr	r3, [sp, #24]
 8020528:	3b01      	subs	r3, #1
 802052a:	9306      	str	r3, [sp, #24]
 802052c:	9b07      	ldr	r3, [sp, #28]
 802052e:	3303      	adds	r3, #3
 8020530:	9307      	str	r3, [sp, #28]
 8020532:	e73e      	b.n	80203b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020534:	d026      	beq.n	8020584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020536:	9b06      	ldr	r3, [sp, #24]
 8020538:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802053a:	3b01      	subs	r3, #1
 802053c:	fb00 4003 	mla	r0, r0, r3, r4
 8020540:	1400      	asrs	r0, r0, #16
 8020542:	f53f af52 	bmi.w	80203ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020546:	3901      	subs	r1, #1
 8020548:	4288      	cmp	r0, r1
 802054a:	f6bf af4e 	bge.w	80203ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802054e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020550:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020552:	fb01 0303 	mla	r3, r1, r3, r0
 8020556:	141b      	asrs	r3, r3, #16
 8020558:	f53f af47 	bmi.w	80203ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802055c:	3a01      	subs	r2, #1
 802055e:	4293      	cmp	r3, r2
 8020560:	f6bf af43 	bge.w	80203ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020564:	9b07      	ldr	r3, [sp, #28]
 8020566:	f8dd a018 	ldr.w	sl, [sp, #24]
 802056a:	f103 0803 	add.w	r8, r3, #3
 802056e:	f1ba 0f00 	cmp.w	sl, #0
 8020572:	dc71      	bgt.n	8020658 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020574:	9b06      	ldr	r3, [sp, #24]
 8020576:	9a07      	ldr	r2, [sp, #28]
 8020578:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802057c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020580:	441a      	add	r2, r3
 8020582:	9207      	str	r2, [sp, #28]
 8020584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020586:	2b00      	cmp	r3, #0
 8020588:	f340 80f2 	ble.w	8020770 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802058c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020592:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020596:	eef0 6a48 	vmov.f32	s13, s16
 802059a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802059e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80205a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205a6:	ee16 4a90 	vmov	r4, s13
 80205aa:	eef0 6a68 	vmov.f32	s13, s17
 80205ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205b2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80205b6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80205ba:	ee69 7a27 	vmul.f32	s15, s18, s15
 80205be:	ee37 8a48 	vsub.f32	s16, s14, s16
 80205c2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80205c6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80205ca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205ce:	ee18 2a10 	vmov	r2, s16
 80205d2:	eeb0 8a47 	vmov.f32	s16, s14
 80205d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205da:	ee18 2a90 	vmov	r2, s17
 80205de:	9323      	str	r3, [sp, #140]	; 0x8c
 80205e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80205e2:	eef0 8a67 	vmov.f32	s17, s15
 80205e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ea:	9324      	str	r3, [sp, #144]	; 0x90
 80205ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205f0:	3b01      	subs	r3, #1
 80205f2:	9309      	str	r3, [sp, #36]	; 0x24
 80205f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80205f6:	bf08      	it	eq
 80205f8:	4613      	moveq	r3, r2
 80205fa:	9306      	str	r3, [sp, #24]
 80205fc:	e6cb      	b.n	8020396 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80205fe:	b151      	cbz	r1, 8020616 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020600:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020604:	4660      	mov	r0, ip
 8020606:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802060a:	442a      	add	r2, r5
 802060c:	4667      	mov	r7, ip
 802060e:	e731      	b.n	8020474 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020610:	4660      	mov	r0, ip
 8020612:	4662      	mov	r2, ip
 8020614:	e72e      	b.n	8020474 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020616:	4660      	mov	r0, ip
 8020618:	4662      	mov	r2, ip
 802061a:	e7f7      	b.n	802060c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802061c:	f110 0e01 	adds.w	lr, r0, #1
 8020620:	f53f af71 	bmi.w	8020506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020624:	4572      	cmp	r2, lr
 8020626:	f6ff af6e 	blt.w	8020506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802062a:	f117 0e01 	adds.w	lr, r7, #1
 802062e:	f53f af6a 	bmi.w	8020506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020632:	45f4      	cmp	ip, lr
 8020634:	f6ff af67 	blt.w	8020506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020638:	b212      	sxth	r2, r2
 802063a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802063e:	fa0f f38c 	sxth.w	r3, ip
 8020642:	9200      	str	r2, [sp, #0]
 8020644:	4631      	mov	r1, r6
 8020646:	9a08      	ldr	r2, [sp, #32]
 8020648:	9301      	str	r3, [sp, #4]
 802064a:	462b      	mov	r3, r5
 802064c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020650:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020652:	f7ff fdbf 	bl	80201d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020656:	e756      	b.n	8020506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020658:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802065a:	1426      	asrs	r6, r4, #16
 802065c:	9822      	ldr	r0, [sp, #136]	; 0x88
 802065e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020662:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020666:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020668:	1400      	asrs	r0, r0, #16
 802066a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802066e:	fb02 6000 	mla	r0, r2, r0, r6
 8020672:	9e08      	ldr	r6, [sp, #32]
 8020674:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020678:	eb06 0c00 	add.w	ip, r6, r0
 802067c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020680:	eb05 070e 	add.w	r7, r5, lr
 8020684:	2b00      	cmp	r3, #0
 8020686:	d064      	beq.n	8020752 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8020688:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802068c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020690:	442e      	add	r6, r5
 8020692:	2900      	cmp	r1, #0
 8020694:	d066      	beq.n	8020764 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8020696:	eb0c 0002 	add.w	r0, ip, r2
 802069a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802069e:	7840      	ldrb	r0, [r0, #1]
 80206a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80206a8:	442a      	add	r2, r5
 80206aa:	4428      	add	r0, r5
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80206b2:	b289      	uxth	r1, r1
 80206b4:	f896 e000 	ldrb.w	lr, [r6]
 80206b8:	f108 0803 	add.w	r8, r8, #3
 80206bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80206c0:	fb03 f901 	mul.w	r9, r3, r1
 80206c4:	011b      	lsls	r3, r3, #4
 80206c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80206ca:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80206ce:	eba3 0309 	sub.w	r3, r3, r9
 80206d2:	b289      	uxth	r1, r1
 80206d4:	b29b      	uxth	r3, r3
 80206d6:	ebac 0c01 	sub.w	ip, ip, r1
 80206da:	fb03 fe0e 	mul.w	lr, r3, lr
 80206de:	fa1f fc8c 	uxth.w	ip, ip
 80206e2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80206e6:	f892 b000 	ldrb.w	fp, [r2]
 80206ea:	fb01 ee0b 	mla	lr, r1, fp, lr
 80206ee:	f890 b000 	ldrb.w	fp, [r0]
 80206f2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80206f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80206fa:	f808 ec06 	strb.w	lr, [r8, #-6]
 80206fe:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020702:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020706:	fb03 fe0e 	mul.w	lr, r3, lr
 802070a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802070e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020712:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020716:	f890 b001 	ldrb.w	fp, [r0, #1]
 802071a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802071e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020722:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020726:	78b6      	ldrb	r6, [r6, #2]
 8020728:	78bf      	ldrb	r7, [r7, #2]
 802072a:	4373      	muls	r3, r6
 802072c:	7896      	ldrb	r6, [r2, #2]
 802072e:	7882      	ldrb	r2, [r0, #2]
 8020730:	fb0c 3307 	mla	r3, ip, r7, r3
 8020734:	fb01 3306 	mla	r3, r1, r6, r3
 8020738:	fb09 3902 	mla	r9, r9, r2, r3
 802073c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802073e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020740:	441c      	add	r4, r3
 8020742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020744:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020748:	4413      	add	r3, r2
 802074a:	f808 9c04 	strb.w	r9, [r8, #-4]
 802074e:	9322      	str	r3, [sp, #136]	; 0x88
 8020750:	e70d      	b.n	802056e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020752:	b151      	cbz	r1, 802076a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020754:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020758:	4638      	mov	r0, r7
 802075a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802075e:	442a      	add	r2, r5
 8020760:	463e      	mov	r6, r7
 8020762:	e7a3      	b.n	80206ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020764:	4638      	mov	r0, r7
 8020766:	463a      	mov	r2, r7
 8020768:	e7a0      	b.n	80206ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802076a:	4638      	mov	r0, r7
 802076c:	463a      	mov	r2, r7
 802076e:	e7f7      	b.n	8020760 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020770:	b00d      	add	sp, #52	; 0x34
 8020772:	ecbd 8b0a 	vpop	{d8-d12}
 8020776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802077c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 802077c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020780:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8020784:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020788:	2d00      	cmp	r5, #0
 802078a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802078e:	fb05 040e 	mla	r4, r5, lr, r0
 8020792:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8020796:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 802079a:	eb02 0804 	add.w	r8, r2, r4
 802079e:	db40      	blt.n	8020822 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80207a0:	45a9      	cmp	r9, r5
 80207a2:	dd3e      	ble.n	8020822 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80207a4:	2800      	cmp	r0, #0
 80207a6:	db3a      	blt.n	802081e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80207a8:	4586      	cmp	lr, r0
 80207aa:	dd38      	ble.n	802081e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80207ac:	5d12      	ldrb	r2, [r2, r4]
 80207ae:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80207b2:	1c42      	adds	r2, r0, #1
 80207b4:	d438      	bmi.n	8020828 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80207b6:	4596      	cmp	lr, r2
 80207b8:	dd36      	ble.n	8020828 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80207ba:	b3bf      	cbz	r7, 802082c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 80207bc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80207c0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80207c4:	3501      	adds	r5, #1
 80207c6:	d435      	bmi.n	8020834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80207c8:	45a9      	cmp	r9, r5
 80207ca:	dd33      	ble.n	8020834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80207cc:	f1bc 0f00 	cmp.w	ip, #0
 80207d0:	d033      	beq.n	802083a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 80207d2:	2800      	cmp	r0, #0
 80207d4:	db2c      	blt.n	8020830 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80207d6:	4586      	cmp	lr, r0
 80207d8:	dd2a      	ble.n	8020830 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80207da:	f818 200e 	ldrb.w	r2, [r8, lr]
 80207de:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80207e2:	3001      	adds	r0, #1
 80207e4:	d42c      	bmi.n	8020840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80207e6:	4586      	cmp	lr, r0
 80207e8:	dd2a      	ble.n	8020840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80207ea:	b35f      	cbz	r7, 8020844 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 80207ec:	44c6      	add	lr, r8
 80207ee:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80207f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80207f6:	2f0f      	cmp	r7, #15
 80207f8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80207fc:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8020800:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020804:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020808:	d802      	bhi.n	8020810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 802080a:	f1bc 0f0f 	cmp.w	ip, #15
 802080e:	d91b      	bls.n	8020848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8020810:	4b77      	ldr	r3, [pc, #476]	; (80209f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8020812:	f240 1157 	movw	r1, #343	; 0x157
 8020816:	4a77      	ldr	r2, [pc, #476]	; (80209f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8020818:	4877      	ldr	r0, [pc, #476]	; (80209f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 802081a:	f005 fe49 	bl	80264b0 <__assert_func>
 802081e:	2600      	movs	r6, #0
 8020820:	e7c7      	b.n	80207b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8020822:	2400      	movs	r4, #0
 8020824:	4626      	mov	r6, r4
 8020826:	e7cd      	b.n	80207c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020828:	2400      	movs	r4, #0
 802082a:	e7cb      	b.n	80207c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 802082c:	463c      	mov	r4, r7
 802082e:	e7c9      	b.n	80207c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020830:	2500      	movs	r5, #0
 8020832:	e7d6      	b.n	80207e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8020834:	2200      	movs	r2, #0
 8020836:	4615      	mov	r5, r2
 8020838:	e7dd      	b.n	80207f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802083a:	4662      	mov	r2, ip
 802083c:	4665      	mov	r5, ip
 802083e:	e7da      	b.n	80207f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020840:	2200      	movs	r2, #0
 8020842:	e7d8      	b.n	80207f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020844:	463a      	mov	r2, r7
 8020846:	e7d6      	b.n	80207f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020848:	b2bf      	uxth	r7, r7
 802084a:	fa1f f08c 	uxth.w	r0, ip
 802084e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8020852:	fb00 fe07 	mul.w	lr, r0, r7
 8020856:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802085a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802085e:	ebac 070e 	sub.w	r7, ip, lr
 8020862:	b280      	uxth	r0, r0
 8020864:	b2bf      	uxth	r7, r7
 8020866:	1a1b      	subs	r3, r3, r0
 8020868:	fb07 fc0a 	mul.w	ip, r7, sl
 802086c:	b29b      	uxth	r3, r3
 802086e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020872:	9300      	str	r3, [sp, #0]
 8020874:	fb00 cc09 	mla	ip, r0, r9, ip
 8020878:	fb0e cc08 	mla	ip, lr, r8, ip
 802087c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020880:	9301      	str	r3, [sp, #4]
 8020882:	2b00      	cmp	r3, #0
 8020884:	f000 80b0 	beq.w	80209e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8020888:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802088c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020890:	fb0b fc0c 	mul.w	ip, fp, ip
 8020894:	fb0b f606 	mul.w	r6, fp, r6
 8020898:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802089c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80208a0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80208a4:	44dc      	add	ip, fp
 80208a6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80208aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80208ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208b2:	fb0a fb0b 	mul.w	fp, sl, fp
 80208b6:	fb0a fa04 	mul.w	sl, sl, r4
 80208ba:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80208be:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80208c2:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 80208c6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80208ca:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80208ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80208d2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80208d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208da:	0a36      	lsrs	r6, r6, #8
 80208dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208e0:	44dc      	add	ip, fp
 80208e2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80208e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80208ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208ee:	fb09 fb0b 	mul.w	fp, r9, fp
 80208f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208f6:	fb09 f905 	mul.w	r9, r9, r5
 80208fa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80208fe:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8020902:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020906:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802090a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802090e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020912:	fb0c fc07 	mul.w	ip, ip, r7
 8020916:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802091a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802091e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020922:	445c      	add	r4, fp
 8020924:	fb08 f505 	mul.w	r5, r8, r5
 8020928:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802092c:	fb08 f802 	mul.w	r8, r8, r2
 8020930:	0a24      	lsrs	r4, r4, #8
 8020932:	0a2a      	lsrs	r2, r5, #8
 8020934:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020938:	fb07 f70a 	mul.w	r7, r7, sl
 802093c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020940:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020944:	4415      	add	r5, r2
 8020946:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802094a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802094e:	9a00      	ldr	r2, [sp, #0]
 8020950:	0a2d      	lsrs	r5, r5, #8
 8020952:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020956:	fb03 cc02 	mla	ip, r3, r2, ip
 802095a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802095e:	fb02 7306 	mla	r3, r2, r6, r7
 8020962:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020966:	9a01      	ldr	r2, [sp, #4]
 8020968:	fb05 c50e 	mla	r5, r5, lr, ip
 802096c:	fb0e 3e08 	mla	lr, lr, r8, r3
 8020970:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8020974:	fb04 5400 	mla	r4, r4, r0, r5
 8020978:	fb00 e303 	mla	r3, r0, r3, lr
 802097c:	0a24      	lsrs	r4, r4, #8
 802097e:	0a1b      	lsrs	r3, r3, #8
 8020980:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020984:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020988:	431c      	orrs	r4, r3
 802098a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 802098e:	b29b      	uxth	r3, r3
 8020990:	b2e0      	uxtb	r0, r4
 8020992:	435a      	muls	r2, r3
 8020994:	fb10 f003 	smulbb	r0, r0, r3
 8020998:	1c55      	adds	r5, r2, #1
 802099a:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 802099e:	780a      	ldrb	r2, [r1, #0]
 80209a0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 80209a4:	b2ed      	uxtb	r5, r5
 80209a6:	fb02 0205 	mla	r2, r2, r5, r0
 80209aa:	b292      	uxth	r2, r2
 80209ac:	1c50      	adds	r0, r2, #1
 80209ae:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80209b2:	7848      	ldrb	r0, [r1, #1]
 80209b4:	fb10 f005 	smulbb	r0, r0, r5
 80209b8:	1212      	asrs	r2, r2, #8
 80209ba:	700a      	strb	r2, [r1, #0]
 80209bc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80209c0:	0c24      	lsrs	r4, r4, #16
 80209c2:	fb02 0203 	mla	r2, r2, r3, r0
 80209c6:	b292      	uxth	r2, r2
 80209c8:	1c50      	adds	r0, r2, #1
 80209ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80209ce:	1212      	asrs	r2, r2, #8
 80209d0:	704a      	strb	r2, [r1, #1]
 80209d2:	788a      	ldrb	r2, [r1, #2]
 80209d4:	fb12 f505 	smulbb	r5, r2, r5
 80209d8:	fb04 5303 	mla	r3, r4, r3, r5
 80209dc:	b29b      	uxth	r3, r3
 80209de:	1c5a      	adds	r2, r3, #1
 80209e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209e4:	121b      	asrs	r3, r3, #8
 80209e6:	708b      	strb	r3, [r1, #2]
 80209e8:	b003      	add	sp, #12
 80209ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209ee:	bf00      	nop
 80209f0:	0802e527 	.word	0x0802e527
 80209f4:	0802ea8f 	.word	0x0802ea8f
 80209f8:	0802e5f0 	.word	0x0802e5f0

080209fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80209fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a00:	ed2d 8b08 	vpush	{d8-d11}
 8020a04:	b09f      	sub	sp, #124	; 0x7c
 8020a06:	eeb0 aa40 	vmov.f32	s20, s0
 8020a0a:	eef0 9a60 	vmov.f32	s19, s1
 8020a0e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020a10:	eeb0 9a41 	vmov.f32	s18, s2
 8020a14:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020a16:	eeb0 8a62 	vmov.f32	s16, s5
 8020a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8020a1c:	eef0 8a43 	vmov.f32	s17, s6
 8020a20:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8020a24:	eef0 ba44 	vmov.f32	s23, s8
 8020a28:	901d      	str	r0, [sp, #116]	; 0x74
 8020a2a:	eeb0 ba64 	vmov.f32	s22, s9
 8020a2e:	931c      	str	r3, [sp, #112]	; 0x70
 8020a30:	eef0 aa45 	vmov.f32	s21, s10
 8020a34:	6850      	ldr	r0, [r2, #4]
 8020a36:	9119      	str	r1, [sp, #100]	; 0x64
 8020a38:	6812      	ldr	r2, [r2, #0]
 8020a3a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8020a3c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020a40:	fb00 1303 	mla	r3, r0, r3, r1
 8020a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a48:	18d3      	adds	r3, r2, r3
 8020a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8020a4c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	9312      	str	r3, [sp, #72]	; 0x48
 8020a52:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020a54:	685e      	ldr	r6, [r3, #4]
 8020a56:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020a5a:	3604      	adds	r6, #4
 8020a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8020a5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	dc03      	bgt.n	8020a6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	f340 8378 	ble.w	802115c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020a6c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020a6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020a72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020a76:	1e48      	subs	r0, r1, #1
 8020a78:	1e57      	subs	r7, r2, #1
 8020a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	f340 818c 	ble.w	8020d9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8020a82:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020a84:	142b      	asrs	r3, r5, #16
 8020a86:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020a8a:	d406      	bmi.n	8020a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a8c:	4584      	cmp	ip, r0
 8020a8e:	da04      	bge.n	8020a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	db02      	blt.n	8020a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a94:	42bb      	cmp	r3, r7
 8020a96:	f2c0 8181 	blt.w	8020d9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8020a9a:	f11c 0c01 	adds.w	ip, ip, #1
 8020a9e:	f100 816f 	bmi.w	8020d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020aa2:	4561      	cmp	r1, ip
 8020aa4:	f2c0 816c 	blt.w	8020d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020aa8:	3301      	adds	r3, #1
 8020aaa:	f100 8169 	bmi.w	8020d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020aae:	429a      	cmp	r2, r3
 8020ab0:	f2c0 8166 	blt.w	8020d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ab6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8020aba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	f340 818c 	ble.w	8020dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8020ac2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020ac4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020ac8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020acc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020ad0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020ad2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020ad6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020ad8:	141b      	asrs	r3, r3, #16
 8020ada:	f100 81d0 	bmi.w	8020e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020ade:	f100 38ff 	add.w	r8, r0, #4294967295
 8020ae2:	4543      	cmp	r3, r8
 8020ae4:	f280 81cb 	bge.w	8020e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020ae8:	f1bc 0f00 	cmp.w	ip, #0
 8020aec:	f2c0 81c7 	blt.w	8020e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020af0:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020af4:	45c4      	cmp	ip, r8
 8020af6:	f280 81c2 	bge.w	8020e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020afa:	b200      	sxth	r0, r0
 8020afc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020afe:	fb0c 3300 	mla	r3, ip, r0, r3
 8020b02:	eb04 0803 	add.w	r8, r4, r3
 8020b06:	5ce3      	ldrb	r3, [r4, r3]
 8020b08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020b0c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020b10:	2a00      	cmp	r2, #0
 8020b12:	f000 81a9 	beq.w	8020e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8020b16:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020b1a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020b1e:	940e      	str	r4, [sp, #56]	; 0x38
 8020b20:	0e24      	lsrs	r4, r4, #24
 8020b22:	9415      	str	r4, [sp, #84]	; 0x54
 8020b24:	b179      	cbz	r1, 8020b46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020b26:	eb08 0c00 	add.w	ip, r8, r0
 8020b2a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020b2e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020b32:	900a      	str	r0, [sp, #40]	; 0x28
 8020b34:	0e00      	lsrs	r0, r0, #24
 8020b36:	9013      	str	r0, [sp, #76]	; 0x4c
 8020b38:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020b3c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020b40:	900f      	str	r0, [sp, #60]	; 0x3c
 8020b42:	0e00      	lsrs	r0, r0, #24
 8020b44:	9016      	str	r0, [sp, #88]	; 0x58
 8020b46:	b292      	uxth	r2, r2
 8020b48:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020b4a:	b289      	uxth	r1, r1
 8020b4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b4e:	fb02 f901 	mul.w	r9, r2, r1
 8020b52:	0112      	lsls	r2, r2, #4
 8020b54:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020b58:	eba2 0809 	sub.w	r8, r2, r9
 8020b5c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020b60:	b289      	uxth	r1, r1
 8020b62:	fa1f f888 	uxth.w	r8, r8
 8020b66:	1a52      	subs	r2, r2, r1
 8020b68:	fb08 f000 	mul.w	r0, r8, r0
 8020b6c:	b292      	uxth	r2, r2
 8020b6e:	fb02 000e 	mla	r0, r2, lr, r0
 8020b72:	fb01 0004 	mla	r0, r1, r4, r0
 8020b76:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020b78:	fb09 0004 	mla	r0, r9, r4, r0
 8020b7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b80:	2800      	cmp	r0, #0
 8020b82:	f000 80f2 	beq.w	8020d6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020b86:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020b8a:	d01b      	beq.n	8020bc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020b8c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020b90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b94:	fb0e fa0a 	mul.w	sl, lr, sl
 8020b98:	fb0e fe03 	mul.w	lr, lr, r3
 8020b9c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020ba0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020ba4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020ba8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020bac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020bb0:	4453      	add	r3, sl
 8020bb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020bb6:	0a1b      	lsrs	r3, r3, #8
 8020bb8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020bbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020bc0:	ea43 030c 	orr.w	r3, r3, ip
 8020bc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020bc6:	2cff      	cmp	r4, #255	; 0xff
 8020bc8:	d021      	beq.n	8020c0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020bca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020bcc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020bd0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020bd2:	fb04 fb0b 	mul.w	fp, r4, fp
 8020bd6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020bd8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020bdc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020bde:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020be2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020be6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020bea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020bf2:	44de      	add	lr, fp
 8020bf4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bf8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c08:	ea4e 040a 	orr.w	r4, lr, sl
 8020c0c:	940e      	str	r4, [sp, #56]	; 0x38
 8020c0e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020c10:	2cff      	cmp	r4, #255	; 0xff
 8020c12:	d021      	beq.n	8020c58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8020c14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020c16:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020c1a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020c1c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020c20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020c22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020c26:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020c28:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020c2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c30:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c38:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020c3c:	44de      	add	lr, fp
 8020c3e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020c42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c52:	ea4e 040a 	orr.w	r4, lr, sl
 8020c56:	940a      	str	r4, [sp, #40]	; 0x28
 8020c58:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020c5a:	2cff      	cmp	r4, #255	; 0xff
 8020c5c:	d021      	beq.n	8020ca2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020c5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c60:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020c64:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020c66:	fb04 fb0b 	mul.w	fp, r4, fp
 8020c6a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020c70:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020c72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020c76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020c86:	44de      	add	lr, fp
 8020c88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020c8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c9c:	ea4e 040a 	orr.w	r4, lr, sl
 8020ca0:	940f      	str	r4, [sp, #60]	; 0x3c
 8020ca2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020ca4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020ca8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020cac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020cb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020cb2:	fb08 fc0c 	mul.w	ip, r8, ip
 8020cb6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020cba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020cbe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020cc0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020cc4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020cc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020cca:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020cce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020cd2:	fb08 f80e 	mul.w	r8, r8, lr
 8020cd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020cda:	fb02 8303 	mla	r3, r2, r3, r8
 8020cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ce0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ce4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020cea:	fb01 330a 	mla	r3, r1, sl, r3
 8020cee:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020cf2:	fb09 3901 	mla	r9, r9, r1, r3
 8020cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020cf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020cfa:	4343      	muls	r3, r0
 8020cfc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020d00:	1c58      	adds	r0, r3, #1
 8020d02:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020d06:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020d0a:	ea4c 0c09 	orr.w	ip, ip, r9
 8020d0e:	783b      	ldrb	r3, [r7, #0]
 8020d10:	fa5f f28c 	uxtb.w	r2, ip
 8020d14:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020d18:	fb12 f201 	smulbb	r2, r2, r1
 8020d1c:	b2c0      	uxtb	r0, r0
 8020d1e:	fb03 2300 	mla	r3, r3, r0, r2
 8020d22:	b29b      	uxth	r3, r3
 8020d24:	1c5a      	adds	r2, r3, #1
 8020d26:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d2a:	787a      	ldrb	r2, [r7, #1]
 8020d2c:	fb12 f200 	smulbb	r2, r2, r0
 8020d30:	121b      	asrs	r3, r3, #8
 8020d32:	703b      	strb	r3, [r7, #0]
 8020d34:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020d38:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020d3c:	fb03 2301 	mla	r3, r3, r1, r2
 8020d40:	b29b      	uxth	r3, r3
 8020d42:	1c5a      	adds	r2, r3, #1
 8020d44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d48:	121b      	asrs	r3, r3, #8
 8020d4a:	707b      	strb	r3, [r7, #1]
 8020d4c:	78bb      	ldrb	r3, [r7, #2]
 8020d4e:	fb13 f000 	smulbb	r0, r3, r0
 8020d52:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020d56:	fa1f fc8c 	uxth.w	ip, ip
 8020d5a:	f10c 0301 	add.w	r3, ip, #1
 8020d5e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020d62:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020d66:	f887 c002 	strb.w	ip, [r7, #2]
 8020d6a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020d6c:	3703      	adds	r7, #3
 8020d6e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020d70:	441a      	add	r2, r3
 8020d72:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020d74:	441d      	add	r5, r3
 8020d76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020d78:	9231      	str	r2, [sp, #196]	; 0xc4
 8020d7a:	3b01      	subs	r3, #1
 8020d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8020d7e:	e69c      	b.n	8020aba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020d80:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020d82:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020d84:	441c      	add	r4, r3
 8020d86:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020d88:	441d      	add	r5, r3
 8020d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d8c:	9431      	str	r4, [sp, #196]	; 0xc4
 8020d8e:	3b01      	subs	r3, #1
 8020d90:	9309      	str	r3, [sp, #36]	; 0x24
 8020d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d94:	3303      	adds	r3, #3
 8020d96:	930c      	str	r3, [sp, #48]	; 0x30
 8020d98:	e66f      	b.n	8020a7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020d9a:	d026      	beq.n	8020dea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d9e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020da0:	3b01      	subs	r3, #1
 8020da2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020da4:	fb00 4003 	mla	r0, r0, r3, r4
 8020da8:	1400      	asrs	r0, r0, #16
 8020daa:	f53f ae83 	bmi.w	8020ab4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020dae:	3901      	subs	r1, #1
 8020db0:	4288      	cmp	r0, r1
 8020db2:	f6bf ae7f 	bge.w	8020ab4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020db6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8020db8:	fb01 5303 	mla	r3, r1, r3, r5
 8020dbc:	141b      	asrs	r3, r3, #16
 8020dbe:	f53f ae79 	bmi.w	8020ab4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020dc2:	3a01      	subs	r2, #1
 8020dc4:	4293      	cmp	r3, r2
 8020dc6:	f6bf ae75 	bge.w	8020ab4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020dcc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020dd0:	f103 0e03 	add.w	lr, r3, #3
 8020dd4:	f1bb 0f00 	cmp.w	fp, #0
 8020dd8:	dc71      	bgt.n	8020ebe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ddc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020de2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020de6:	4423      	add	r3, r4
 8020de8:	930c      	str	r3, [sp, #48]	; 0x30
 8020dea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	f340 81b5 	ble.w	802115c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020df6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020df8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020dfc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e00:	eef0 6a48 	vmov.f32	s13, s16
 8020e04:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e10:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8020e14:	eef0 6a68 	vmov.f32	s13, s17
 8020e18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e1c:	ee16 5a90 	vmov	r5, s13
 8020e20:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e24:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e28:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e30:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e38:	ee18 2a10 	vmov	r2, s16
 8020e3c:	eeb0 8a47 	vmov.f32	s16, s14
 8020e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e44:	ee18 2a90 	vmov	r2, s17
 8020e48:	9333      	str	r3, [sp, #204]	; 0xcc
 8020e4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020e4c:	eef0 8a67 	vmov.f32	s17, s15
 8020e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e54:	9334      	str	r3, [sp, #208]	; 0xd0
 8020e56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020e5a:	3b01      	subs	r3, #1
 8020e5c:	9319      	str	r3, [sp, #100]	; 0x64
 8020e5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020e60:	bf08      	it	eq
 8020e62:	4613      	moveq	r3, r2
 8020e64:	9309      	str	r3, [sp, #36]	; 0x24
 8020e66:	e5fa      	b.n	8020a5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020e68:	2900      	cmp	r1, #0
 8020e6a:	f43f ae6c 	beq.w	8020b46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020e6e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020e72:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020e76:	900a      	str	r0, [sp, #40]	; 0x28
 8020e78:	0e00      	lsrs	r0, r0, #24
 8020e7a:	9013      	str	r0, [sp, #76]	; 0x4c
 8020e7c:	e663      	b.n	8020b46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020e7e:	f113 0801 	adds.w	r8, r3, #1
 8020e82:	f53f af72 	bmi.w	8020d6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e86:	4540      	cmp	r0, r8
 8020e88:	f6ff af6f 	blt.w	8020d6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e8c:	f11c 0801 	adds.w	r8, ip, #1
 8020e90:	f53f af6b 	bmi.w	8020d6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e94:	45c6      	cmp	lr, r8
 8020e96:	f6ff af68 	blt.w	8020d6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e9a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020e9c:	b200      	sxth	r0, r0
 8020e9e:	9302      	str	r3, [sp, #8]
 8020ea0:	fa0f f38e 	sxth.w	r3, lr
 8020ea4:	9000      	str	r0, [sp, #0]
 8020ea6:	9301      	str	r3, [sp, #4]
 8020ea8:	4633      	mov	r3, r6
 8020eaa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020eac:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020eb0:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020eb4:	4639      	mov	r1, r7
 8020eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020eb8:	f7ff fc60 	bl	802077c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020ebc:	e755      	b.n	8020d6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020ebe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020ec0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020ec4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020ec6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020eca:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020ecc:	1427      	asrs	r7, r4, #16
 8020ece:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020ed0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ed4:	142b      	asrs	r3, r5, #16
 8020ed6:	fb01 7303 	mla	r3, r1, r3, r7
 8020eda:	18e7      	adds	r7, r4, r3
 8020edc:	5ce3      	ldrb	r3, [r4, r3]
 8020ede:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ee2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020ee6:	2a00      	cmp	r2, #0
 8020ee8:	f000 812e 	beq.w	8021148 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8020eec:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020ef0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020ef4:	9410      	str	r4, [sp, #64]	; 0x40
 8020ef6:	0e24      	lsrs	r4, r4, #24
 8020ef8:	9417      	str	r4, [sp, #92]	; 0x5c
 8020efa:	b170      	cbz	r0, 8020f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020efc:	eb07 0801 	add.w	r8, r7, r1
 8020f00:	5c79      	ldrb	r1, [r7, r1]
 8020f02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f06:	910b      	str	r1, [sp, #44]	; 0x2c
 8020f08:	0e09      	lsrs	r1, r1, #24
 8020f0a:	9114      	str	r1, [sp, #80]	; 0x50
 8020f0c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020f10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f14:	9111      	str	r1, [sp, #68]	; 0x44
 8020f16:	0e09      	lsrs	r1, r1, #24
 8020f18:	9118      	str	r1, [sp, #96]	; 0x60
 8020f1a:	b292      	uxth	r2, r2
 8020f1c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020f1e:	b280      	uxth	r0, r0
 8020f20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f22:	fb02 f900 	mul.w	r9, r2, r0
 8020f26:	0112      	lsls	r2, r2, #4
 8020f28:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020f2c:	eba2 0809 	sub.w	r8, r2, r9
 8020f30:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020f34:	b280      	uxth	r0, r0
 8020f36:	fa1f f888 	uxth.w	r8, r8
 8020f3a:	1a12      	subs	r2, r2, r0
 8020f3c:	fb08 f101 	mul.w	r1, r8, r1
 8020f40:	b292      	uxth	r2, r2
 8020f42:	fb02 110c 	mla	r1, r2, ip, r1
 8020f46:	fb00 1104 	mla	r1, r0, r4, r1
 8020f4a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020f4c:	fb09 1104 	mla	r1, r9, r4, r1
 8020f50:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f54:	2900      	cmp	r1, #0
 8020f56:	f000 80ec 	beq.w	8021132 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8020f5a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020f5e:	d019      	beq.n	8020f94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8020f60:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020f64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f68:	fb0c fa0a 	mul.w	sl, ip, sl
 8020f6c:	fb0c fc03 	mul.w	ip, ip, r3
 8020f70:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f74:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f78:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020f7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f80:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020f84:	4453      	add	r3, sl
 8020f86:	0a3f      	lsrs	r7, r7, #8
 8020f88:	0a1b      	lsrs	r3, r3, #8
 8020f8a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f92:	433b      	orrs	r3, r7
 8020f94:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020f96:	2cff      	cmp	r4, #255	; 0xff
 8020f98:	d020      	beq.n	8020fdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8020f9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f9c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020fa0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020fa2:	4367      	muls	r7, r4
 8020fa4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020fa6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020faa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020fb0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020fb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fb8:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fbc:	44bc      	add	ip, r7
 8020fbe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020fc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fc6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020fca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fd6:	ea4c 040a 	orr.w	r4, ip, sl
 8020fda:	9410      	str	r4, [sp, #64]	; 0x40
 8020fdc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020fde:	2cff      	cmp	r4, #255	; 0xff
 8020fe0:	d020      	beq.n	8021024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8020fe2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fe4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020fe8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020fea:	4367      	muls	r7, r4
 8020fec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ff2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ff6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020ff8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ffc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021000:	fb04 fa0a 	mul.w	sl, r4, sl
 8021004:	44bc      	add	ip, r7
 8021006:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802100a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802100e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021012:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021016:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802101a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802101e:	ea4c 040a 	orr.w	r4, ip, sl
 8021022:	940b      	str	r4, [sp, #44]	; 0x2c
 8021024:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021026:	2cff      	cmp	r4, #255	; 0xff
 8021028:	d020      	beq.n	802106c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802102a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802102c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021030:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021032:	4367      	muls	r7, r4
 8021034:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021036:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802103a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802103e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021040:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021048:	fb04 fa0a 	mul.w	sl, r4, sl
 802104c:	44bc      	add	ip, r7
 802104e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021052:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021056:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802105a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802105e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021062:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021066:	ea4c 040a 	orr.w	r4, ip, sl
 802106a:	9411      	str	r4, [sp, #68]	; 0x44
 802106c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802106e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021076:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802107a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802107c:	fb08 f707 	mul.w	r7, r8, r7
 8021080:	fb02 770c 	mla	r7, r2, ip, r7
 8021084:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021088:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802108a:	fb00 770c 	mla	r7, r0, ip, r7
 802108e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021092:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021094:	fb09 770c 	mla	r7, r9, ip, r7
 8021098:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802109c:	fb08 f80c 	mul.w	r8, r8, ip
 80210a0:	0a3f      	lsrs	r7, r7, #8
 80210a2:	fb02 8303 	mla	r3, r2, r3, r8
 80210a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80210a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80210ac:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80210b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80210b2:	fb00 330a 	mla	r3, r0, sl, r3
 80210b6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80210ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80210bc:	fb09 3c0c 	mla	ip, r9, ip, r3
 80210c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210c6:	434b      	muls	r3, r1
 80210c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210cc:	1c59      	adds	r1, r3, #1
 80210ce:	ea47 070c 	orr.w	r7, r7, ip
 80210d2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80210d6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80210da:	b2fa      	uxtb	r2, r7
 80210dc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80210e0:	fb12 f200 	smulbb	r2, r2, r0
 80210e4:	b2c9      	uxtb	r1, r1
 80210e6:	fb03 2301 	mla	r3, r3, r1, r2
 80210ea:	b29b      	uxth	r3, r3
 80210ec:	1c5a      	adds	r2, r3, #1
 80210ee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210f2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80210f6:	fb12 f201 	smulbb	r2, r2, r1
 80210fa:	121b      	asrs	r3, r3, #8
 80210fc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021100:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021104:	0c3f      	lsrs	r7, r7, #16
 8021106:	fb03 2300 	mla	r3, r3, r0, r2
 802110a:	b29b      	uxth	r3, r3
 802110c:	1c5a      	adds	r2, r3, #1
 802110e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021112:	121b      	asrs	r3, r3, #8
 8021114:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021118:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802111c:	fb13 f101 	smulbb	r1, r3, r1
 8021120:	fb07 1700 	mla	r7, r7, r0, r1
 8021124:	b2bf      	uxth	r7, r7
 8021126:	1c7b      	adds	r3, r7, #1
 8021128:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802112c:	123f      	asrs	r7, r7, #8
 802112e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021132:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021134:	f10e 0e03 	add.w	lr, lr, #3
 8021138:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802113a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802113e:	441a      	add	r2, r3
 8021140:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021142:	9231      	str	r2, [sp, #196]	; 0xc4
 8021144:	441d      	add	r5, r3
 8021146:	e645      	b.n	8020dd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8021148:	2800      	cmp	r0, #0
 802114a:	f43f aee6 	beq.w	8020f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802114e:	5c79      	ldrb	r1, [r7, r1]
 8021150:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021154:	910b      	str	r1, [sp, #44]	; 0x2c
 8021156:	0e09      	lsrs	r1, r1, #24
 8021158:	9114      	str	r1, [sp, #80]	; 0x50
 802115a:	e6de      	b.n	8020f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802115c:	b01f      	add	sp, #124	; 0x7c
 802115e:	ecbd 8b08 	vpop	{d8-d11}
 8021162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021168 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802116c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8021170:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021174:	2c00      	cmp	r4, #0
 8021176:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802117a:	fb04 060c 	mla	r6, r4, ip, r0
 802117e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021182:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8021186:	eb02 0e06 	add.w	lr, r2, r6
 802118a:	db3d      	blt.n	8021208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 802118c:	45a0      	cmp	r8, r4
 802118e:	dd3b      	ble.n	8021208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8021190:	2800      	cmp	r0, #0
 8021192:	db37      	blt.n	8021204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021194:	4584      	cmp	ip, r0
 8021196:	dd35      	ble.n	8021204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021198:	5d92      	ldrb	r2, [r2, r6]
 802119a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802119e:	1c46      	adds	r6, r0, #1
 80211a0:	d435      	bmi.n	802120e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80211a2:	45b4      	cmp	ip, r6
 80211a4:	dd33      	ble.n	802120e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80211a6:	b3a5      	cbz	r5, 8021212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80211a8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80211ac:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80211b0:	3401      	adds	r4, #1
 80211b2:	d432      	bmi.n	802121a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80211b4:	45a0      	cmp	r8, r4
 80211b6:	dd30      	ble.n	802121a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80211b8:	b397      	cbz	r7, 8021220 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80211ba:	2800      	cmp	r0, #0
 80211bc:	db2b      	blt.n	8021216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80211be:	4584      	cmp	ip, r0
 80211c0:	dd29      	ble.n	8021216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80211c2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80211c6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80211ca:	3001      	adds	r0, #1
 80211cc:	d42b      	bmi.n	8021226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80211ce:	4584      	cmp	ip, r0
 80211d0:	dd29      	ble.n	8021226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80211d2:	b355      	cbz	r5, 802122a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80211d4:	44f4      	add	ip, lr
 80211d6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80211da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80211de:	2d0f      	cmp	r5, #15
 80211e0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80211e4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80211e8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80211ec:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80211f0:	d801      	bhi.n	80211f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 80211f2:	2f0f      	cmp	r7, #15
 80211f4:	d91b      	bls.n	802122e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 80211f6:	4b7f      	ldr	r3, [pc, #508]	; (80213f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80211f8:	f240 1157 	movw	r1, #343	; 0x157
 80211fc:	4a7e      	ldr	r2, [pc, #504]	; (80213f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80211fe:	487f      	ldr	r0, [pc, #508]	; (80213fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021200:	f005 f956 	bl	80264b0 <__assert_func>
 8021204:	2200      	movs	r2, #0
 8021206:	e7ca      	b.n	802119e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8021208:	2600      	movs	r6, #0
 802120a:	4632      	mov	r2, r6
 802120c:	e7d0      	b.n	80211b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802120e:	2600      	movs	r6, #0
 8021210:	e7ce      	b.n	80211b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021212:	462e      	mov	r6, r5
 8021214:	e7cc      	b.n	80211b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021216:	2400      	movs	r4, #0
 8021218:	e7d7      	b.n	80211ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 802121a:	2300      	movs	r3, #0
 802121c:	461c      	mov	r4, r3
 802121e:	e7de      	b.n	80211de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021220:	463b      	mov	r3, r7
 8021222:	463c      	mov	r4, r7
 8021224:	e7db      	b.n	80211de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021226:	2300      	movs	r3, #0
 8021228:	e7d9      	b.n	80211de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802122a:	462b      	mov	r3, r5
 802122c:	e7d7      	b.n	80211de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802122e:	b2a8      	uxth	r0, r5
 8021230:	b2bf      	uxth	r7, r7
 8021232:	fb07 fe00 	mul.w	lr, r7, r0
 8021236:	0100      	lsls	r0, r0, #4
 8021238:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802123c:	eba0 0c0e 	sub.w	ip, r0, lr
 8021240:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021244:	b2bf      	uxth	r7, r7
 8021246:	fa1f fc8c 	uxth.w	ip, ip
 802124a:	1bc5      	subs	r5, r0, r7
 802124c:	fb0c f00a 	mul.w	r0, ip, sl
 8021250:	b2ad      	uxth	r5, r5
 8021252:	fb05 000b 	mla	r0, r5, fp, r0
 8021256:	fb07 0009 	mla	r0, r7, r9, r0
 802125a:	fb0e 0008 	mla	r0, lr, r8, r0
 802125e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021262:	9001      	str	r0, [sp, #4]
 8021264:	2800      	cmp	r0, #0
 8021266:	f000 80c2 	beq.w	80213ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 802126a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802126e:	d018      	beq.n	80212a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8021270:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021274:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021278:	fb0b f000 	mul.w	r0, fp, r0
 802127c:	fb0b fb02 	mul.w	fp, fp, r2
 8021280:	0a02      	lsrs	r2, r0, #8
 8021282:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021286:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802128a:	4402      	add	r2, r0
 802128c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021290:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021294:	0a12      	lsrs	r2, r2, #8
 8021296:	0a00      	lsrs	r0, r0, #8
 8021298:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802129c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212a0:	4302      	orrs	r2, r0
 80212a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80212a6:	d01a      	beq.n	80212de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80212a8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80212ac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80212b0:	fb0a f000 	mul.w	r0, sl, r0
 80212b4:	fb0a fa06 	mul.w	sl, sl, r6
 80212b8:	0a06      	lsrs	r6, r0, #8
 80212ba:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80212be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212c2:	4406      	add	r6, r0
 80212c4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80212c8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80212cc:	0a36      	lsrs	r6, r6, #8
 80212ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212da:	ea46 060a 	orr.w	r6, r6, sl
 80212de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80212e2:	d01b      	beq.n	802131c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80212e4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80212e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80212ec:	fb09 fa0a 	mul.w	sl, r9, sl
 80212f0:	fb09 f004 	mul.w	r0, r9, r4
 80212f4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80212f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212fc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021300:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021304:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021308:	4454      	add	r4, sl
 802130a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802130e:	0a24      	lsrs	r4, r4, #8
 8021310:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021314:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021318:	ea44 0409 	orr.w	r4, r4, r9
 802131c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021320:	d01b      	beq.n	802135a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8021322:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802132a:	fb08 f909 	mul.w	r9, r8, r9
 802132e:	fb08 f003 	mul.w	r0, r8, r3
 8021332:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021336:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802133a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802133e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021342:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021346:	444b      	add	r3, r9
 8021348:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802134c:	0a1b      	lsrs	r3, r3, #8
 802134e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021352:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021356:	ea43 0308 	orr.w	r3, r3, r8
 802135a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802135e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021362:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8021366:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802136a:	fb0c f000 	mul.w	r0, ip, r0
 802136e:	fb0c f606 	mul.w	r6, ip, r6
 8021372:	fb05 0808 	mla	r8, r5, r8, r0
 8021376:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802137a:	fb05 6502 	mla	r5, r5, r2, r6
 802137e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021382:	fb07 8800 	mla	r8, r7, r0, r8
 8021386:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802138a:	fb07 5704 	mla	r7, r7, r4, r5
 802138e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021392:	fb0e 8000 	mla	r0, lr, r0, r8
 8021396:	780a      	ldrb	r2, [r1, #0]
 8021398:	fb0e 7e03 	mla	lr, lr, r3, r7
 802139c:	9b01      	ldr	r3, [sp, #4]
 802139e:	0a00      	lsrs	r0, r0, #8
 80213a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213a4:	43db      	mvns	r3, r3
 80213a6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80213aa:	b2db      	uxtb	r3, r3
 80213ac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80213b0:	ea40 0e0e 	orr.w	lr, r0, lr
 80213b4:	fb02 f003 	mul.w	r0, r2, r3
 80213b8:	1c42      	adds	r2, r0, #1
 80213ba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80213be:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80213c2:	700a      	strb	r2, [r1, #0]
 80213c4:	784a      	ldrb	r2, [r1, #1]
 80213c6:	435a      	muls	r2, r3
 80213c8:	1c50      	adds	r0, r2, #1
 80213ca:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80213ce:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80213d2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80213d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80213da:	704a      	strb	r2, [r1, #1]
 80213dc:	788a      	ldrb	r2, [r1, #2]
 80213de:	4353      	muls	r3, r2
 80213e0:	1c5a      	adds	r2, r3, #1
 80213e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80213e6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80213ea:	f881 e002 	strb.w	lr, [r1, #2]
 80213ee:	b003      	add	sp, #12
 80213f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f4:	0802e527 	.word	0x0802e527
 80213f8:	0802ea8f 	.word	0x0802ea8f
 80213fc:	0802e5f0 	.word	0x0802e5f0

08021400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021404:	ed2d 8b0a 	vpush	{d8-d12}
 8021408:	b09b      	sub	sp, #108	; 0x6c
 802140a:	eeb0 aa40 	vmov.f32	s20, s0
 802140e:	eef0 9a60 	vmov.f32	s19, s1
 8021412:	9218      	str	r2, [sp, #96]	; 0x60
 8021414:	eeb0 9a41 	vmov.f32	s18, s2
 8021418:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802141a:	eeb0 8a62 	vmov.f32	s16, s5
 802141e:	9019      	str	r0, [sp, #100]	; 0x64
 8021420:	eef0 8a43 	vmov.f32	s17, s6
 8021424:	6850      	ldr	r0, [r2, #4]
 8021426:	eeb0 ca44 	vmov.f32	s24, s8
 802142a:	9116      	str	r1, [sp, #88]	; 0x58
 802142c:	eef0 ba64 	vmov.f32	s23, s9
 8021430:	9307      	str	r3, [sp, #28]
 8021432:	eeb0 ba45 	vmov.f32	s22, s10
 8021436:	6812      	ldr	r2, [r2, #0]
 8021438:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802143c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 802143e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8021442:	fb00 1303 	mla	r3, r0, r3, r1
 8021446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802144a:	18d3      	adds	r3, r2, r3
 802144c:	930a      	str	r3, [sp, #40]	; 0x28
 802144e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	930f      	str	r3, [sp, #60]	; 0x3c
 8021454:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021456:	685e      	ldr	r6, [r3, #4]
 8021458:	3604      	adds	r6, #4
 802145a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802145c:	2b00      	cmp	r3, #0
 802145e:	dc03      	bgt.n	8021468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021460:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021462:	2b00      	cmp	r3, #0
 8021464:	f340 834f 	ble.w	8021b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021468:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802146a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802146e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021472:	1e48      	subs	r0, r1, #1
 8021474:	1e57      	subs	r7, r2, #1
 8021476:	9b07      	ldr	r3, [sp, #28]
 8021478:	2b00      	cmp	r3, #0
 802147a:	f340 8178 	ble.w	802176e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802147e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021480:	142b      	asrs	r3, r5, #16
 8021482:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021486:	d406      	bmi.n	8021496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021488:	4584      	cmp	ip, r0
 802148a:	da04      	bge.n	8021496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802148c:	2b00      	cmp	r3, #0
 802148e:	db02      	blt.n	8021496 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021490:	42bb      	cmp	r3, r7
 8021492:	f2c0 816d 	blt.w	8021770 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021496:	f11c 0c01 	adds.w	ip, ip, #1
 802149a:	f100 815b 	bmi.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802149e:	4561      	cmp	r1, ip
 80214a0:	f2c0 8158 	blt.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80214a4:	3301      	adds	r3, #1
 80214a6:	f100 8155 	bmi.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80214aa:	429a      	cmp	r2, r3
 80214ac:	f2c0 8152 	blt.w	8021754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80214b0:	9b07      	ldr	r3, [sp, #28]
 80214b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80214b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80214b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	f340 8178 	ble.w	80217ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80214be:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80214c0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80214c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80214c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80214cc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80214ce:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80214d2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80214d4:	141b      	asrs	r3, r3, #16
 80214d6:	f100 81ba 	bmi.w	802184e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80214da:	f101 38ff 	add.w	r8, r1, #4294967295
 80214de:	4543      	cmp	r3, r8
 80214e0:	f280 81b5 	bge.w	802184e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80214e4:	f1bc 0f00 	cmp.w	ip, #0
 80214e8:	f2c0 81b1 	blt.w	802184e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80214ec:	f10e 38ff 	add.w	r8, lr, #4294967295
 80214f0:	45c4      	cmp	ip, r8
 80214f2:	f280 81ac 	bge.w	802184e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80214f6:	b209      	sxth	r1, r1
 80214f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80214fa:	fb0c 3301 	mla	r3, ip, r1, r3
 80214fe:	eb04 0803 	add.w	r8, r4, r3
 8021502:	5ce3      	ldrb	r3, [r4, r3]
 8021504:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021508:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802150c:	2a00      	cmp	r2, #0
 802150e:	f000 8193 	beq.w	8021838 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021512:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021516:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802151a:	940b      	str	r4, [sp, #44]	; 0x2c
 802151c:	0e24      	lsrs	r4, r4, #24
 802151e:	9412      	str	r4, [sp, #72]	; 0x48
 8021520:	b178      	cbz	r0, 8021542 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021522:	eb08 0c01 	add.w	ip, r8, r1
 8021526:	f818 1001 	ldrb.w	r1, [r8, r1]
 802152a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802152e:	9108      	str	r1, [sp, #32]
 8021530:	0e09      	lsrs	r1, r1, #24
 8021532:	9110      	str	r1, [sp, #64]	; 0x40
 8021534:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021538:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802153c:	910c      	str	r1, [sp, #48]	; 0x30
 802153e:	0e09      	lsrs	r1, r1, #24
 8021540:	9113      	str	r1, [sp, #76]	; 0x4c
 8021542:	b292      	uxth	r2, r2
 8021544:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021546:	b280      	uxth	r0, r0
 8021548:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802154a:	fb02 f900 	mul.w	r9, r2, r0
 802154e:	0112      	lsls	r2, r2, #4
 8021550:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021554:	eba2 0809 	sub.w	r8, r2, r9
 8021558:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802155c:	b280      	uxth	r0, r0
 802155e:	fa1f f888 	uxth.w	r8, r8
 8021562:	1a12      	subs	r2, r2, r0
 8021564:	fb08 f101 	mul.w	r1, r8, r1
 8021568:	b292      	uxth	r2, r2
 802156a:	fb02 110e 	mla	r1, r2, lr, r1
 802156e:	fb00 1104 	mla	r1, r0, r4, r1
 8021572:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021574:	fb09 1104 	mla	r1, r9, r4, r1
 8021578:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802157c:	2900      	cmp	r1, #0
 802157e:	f000 80de 	beq.w	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021582:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021586:	d01b      	beq.n	80215c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8021588:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802158c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021590:	fb0e fa0a 	mul.w	sl, lr, sl
 8021594:	fb0e fe03 	mul.w	lr, lr, r3
 8021598:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802159c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80215a0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80215a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215a8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80215ac:	4453      	add	r3, sl
 80215ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215b2:	0a1b      	lsrs	r3, r3, #8
 80215b4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80215b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215bc:	ea43 030c 	orr.w	r3, r3, ip
 80215c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80215c2:	2cff      	cmp	r4, #255	; 0xff
 80215c4:	d021      	beq.n	802160a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80215c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80215c8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80215cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80215ce:	fb04 fb0b 	mul.w	fp, r4, fp
 80215d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80215d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80215d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80215da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80215de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80215e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215ee:	44de      	add	lr, fp
 80215f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021600:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021604:	ea4e 040a 	orr.w	r4, lr, sl
 8021608:	940b      	str	r4, [sp, #44]	; 0x2c
 802160a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802160c:	2cff      	cmp	r4, #255	; 0xff
 802160e:	d021      	beq.n	8021654 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021610:	9c08      	ldr	r4, [sp, #32]
 8021612:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021616:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021618:	fb04 fb0b 	mul.w	fp, r4, fp
 802161c:	9c08      	ldr	r4, [sp, #32]
 802161e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021622:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021624:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021628:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802162c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021630:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021634:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021638:	44de      	add	lr, fp
 802163a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802163e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021642:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021646:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802164a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802164e:	ea4e 040a 	orr.w	r4, lr, sl
 8021652:	9408      	str	r4, [sp, #32]
 8021654:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021656:	2cff      	cmp	r4, #255	; 0xff
 8021658:	d021      	beq.n	802169e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802165a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802165c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021660:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021662:	fb04 fb0b 	mul.w	fp, r4, fp
 8021666:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021668:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802166c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802166e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021672:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021676:	fb04 fa0a 	mul.w	sl, r4, sl
 802167a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802167e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021682:	44de      	add	lr, fp
 8021684:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021688:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802168c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021690:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021694:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021698:	ea4e 040a 	orr.w	r4, lr, sl
 802169c:	940c      	str	r4, [sp, #48]	; 0x30
 802169e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80216a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80216a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216a8:	43c9      	mvns	r1, r1
 80216aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80216ae:	9c08      	ldr	r4, [sp, #32]
 80216b0:	b2c9      	uxtb	r1, r1
 80216b2:	fb08 fc0c 	mul.w	ip, r8, ip
 80216b6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80216ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80216be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80216c0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80216c4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80216c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80216ca:	fb09 cc0e 	mla	ip, r9, lr, ip
 80216ce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80216d2:	fb08 f80e 	mul.w	r8, r8, lr
 80216d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216da:	fb02 8303 	mla	r3, r2, r3, r8
 80216de:	9a08      	ldr	r2, [sp, #32]
 80216e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80216e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216ea:	fb00 330a 	mla	r3, r0, sl, r3
 80216ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80216f2:	fb09 3900 	mla	r9, r9, r0, r3
 80216f6:	783b      	ldrb	r3, [r7, #0]
 80216f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80216fc:	fb03 f201 	mul.w	r2, r3, r1
 8021700:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021704:	1c53      	adds	r3, r2, #1
 8021706:	ea4c 0c09 	orr.w	ip, ip, r9
 802170a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802170e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021712:	703b      	strb	r3, [r7, #0]
 8021714:	787b      	ldrb	r3, [r7, #1]
 8021716:	434b      	muls	r3, r1
 8021718:	1c5a      	adds	r2, r3, #1
 802171a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802171e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021722:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021726:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802172a:	707b      	strb	r3, [r7, #1]
 802172c:	78bb      	ldrb	r3, [r7, #2]
 802172e:	4359      	muls	r1, r3
 8021730:	1c4b      	adds	r3, r1, #1
 8021732:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021736:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802173a:	f887 c002 	strb.w	ip, [r7, #2]
 802173e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021740:	3703      	adds	r7, #3
 8021742:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021744:	441a      	add	r2, r3
 8021746:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021748:	441d      	add	r5, r3
 802174a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802174c:	922f      	str	r2, [sp, #188]	; 0xbc
 802174e:	3b01      	subs	r3, #1
 8021750:	9317      	str	r3, [sp, #92]	; 0x5c
 8021752:	e6b0      	b.n	80214b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021754:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021756:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021758:	441c      	add	r4, r3
 802175a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802175c:	441d      	add	r5, r3
 802175e:	9b07      	ldr	r3, [sp, #28]
 8021760:	942f      	str	r4, [sp, #188]	; 0xbc
 8021762:	3b01      	subs	r3, #1
 8021764:	9307      	str	r3, [sp, #28]
 8021766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021768:	3303      	adds	r3, #3
 802176a:	930a      	str	r3, [sp, #40]	; 0x28
 802176c:	e683      	b.n	8021476 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802176e:	d026      	beq.n	80217be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021770:	9b07      	ldr	r3, [sp, #28]
 8021772:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021774:	3b01      	subs	r3, #1
 8021776:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021778:	fb00 4003 	mla	r0, r0, r3, r4
 802177c:	1400      	asrs	r0, r0, #16
 802177e:	f53f ae97 	bmi.w	80214b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021782:	3901      	subs	r1, #1
 8021784:	4288      	cmp	r0, r1
 8021786:	f6bf ae93 	bge.w	80214b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802178a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 802178c:	fb01 5303 	mla	r3, r1, r3, r5
 8021790:	141b      	asrs	r3, r3, #16
 8021792:	f53f ae8d 	bmi.w	80214b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021796:	3a01      	subs	r2, #1
 8021798:	4293      	cmp	r3, r2
 802179a:	f6bf ae89 	bge.w	80214b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802179e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80217a4:	f103 0e03 	add.w	lr, r3, #3
 80217a8:	f1bb 0f00 	cmp.w	fp, #0
 80217ac:	dc6d      	bgt.n	802188a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80217ae:	9b07      	ldr	r3, [sp, #28]
 80217b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80217b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217ba:	4423      	add	r3, r4
 80217bc:	930a      	str	r3, [sp, #40]	; 0x28
 80217be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	f340 81a0 	ble.w	8021b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80217c6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80217ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217cc:	ee79 9aab 	vadd.f32	s19, s19, s23
 80217d0:	eef0 6a48 	vmov.f32	s13, s16
 80217d4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80217d8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80217dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217e0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80217e4:	eef0 6a68 	vmov.f32	s13, s17
 80217e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217ec:	ee16 5a90 	vmov	r5, s13
 80217f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80217f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80217f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80217fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021800:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021804:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021808:	ee18 2a10 	vmov	r2, s16
 802180c:	eeb0 8a47 	vmov.f32	s16, s14
 8021810:	fb92 f3f3 	sdiv	r3, r2, r3
 8021814:	ee18 2a90 	vmov	r2, s17
 8021818:	9331      	str	r3, [sp, #196]	; 0xc4
 802181a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802181c:	eef0 8a67 	vmov.f32	s17, s15
 8021820:	fb92 f3f3 	sdiv	r3, r2, r3
 8021824:	9332      	str	r3, [sp, #200]	; 0xc8
 8021826:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021828:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802182a:	3b01      	subs	r3, #1
 802182c:	9316      	str	r3, [sp, #88]	; 0x58
 802182e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021830:	bf08      	it	eq
 8021832:	4613      	moveq	r3, r2
 8021834:	9307      	str	r3, [sp, #28]
 8021836:	e610      	b.n	802145a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021838:	2800      	cmp	r0, #0
 802183a:	f43f ae82 	beq.w	8021542 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802183e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021842:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021846:	9108      	str	r1, [sp, #32]
 8021848:	0e09      	lsrs	r1, r1, #24
 802184a:	9110      	str	r1, [sp, #64]	; 0x40
 802184c:	e679      	b.n	8021542 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802184e:	f113 0801 	adds.w	r8, r3, #1
 8021852:	f53f af74 	bmi.w	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021856:	4541      	cmp	r1, r8
 8021858:	f6ff af71 	blt.w	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802185c:	f11c 0801 	adds.w	r8, ip, #1
 8021860:	f53f af6d 	bmi.w	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021864:	45c6      	cmp	lr, r8
 8021866:	f6ff af6a 	blt.w	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802186a:	b209      	sxth	r1, r1
 802186c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021870:	fa0f f38e 	sxth.w	r3, lr
 8021874:	9100      	str	r1, [sp, #0]
 8021876:	4639      	mov	r1, r7
 8021878:	9301      	str	r3, [sp, #4]
 802187a:	4633      	mov	r3, r6
 802187c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021882:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021884:	f7ff fc70 	bl	8021168 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021888:	e759      	b.n	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802188a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802188c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021890:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021892:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021896:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021898:	1427      	asrs	r7, r4, #16
 802189a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802189c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80218a0:	142b      	asrs	r3, r5, #16
 80218a2:	fb01 7303 	mla	r3, r1, r3, r7
 80218a6:	18e7      	adds	r7, r4, r3
 80218a8:	5ce3      	ldrb	r3, [r4, r3]
 80218aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80218ae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80218b2:	2a00      	cmp	r2, #0
 80218b4:	f000 811d 	beq.w	8021af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80218b8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80218bc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80218c0:	940d      	str	r4, [sp, #52]	; 0x34
 80218c2:	0e24      	lsrs	r4, r4, #24
 80218c4:	9414      	str	r4, [sp, #80]	; 0x50
 80218c6:	b170      	cbz	r0, 80218e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80218c8:	eb07 0801 	add.w	r8, r7, r1
 80218cc:	5c79      	ldrb	r1, [r7, r1]
 80218ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218d2:	9109      	str	r1, [sp, #36]	; 0x24
 80218d4:	0e09      	lsrs	r1, r1, #24
 80218d6:	9111      	str	r1, [sp, #68]	; 0x44
 80218d8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80218dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218e0:	910e      	str	r1, [sp, #56]	; 0x38
 80218e2:	0e09      	lsrs	r1, r1, #24
 80218e4:	9115      	str	r1, [sp, #84]	; 0x54
 80218e6:	b292      	uxth	r2, r2
 80218e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218ea:	b280      	uxth	r0, r0
 80218ec:	fb02 f900 	mul.w	r9, r2, r0
 80218f0:	0112      	lsls	r2, r2, #4
 80218f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80218f6:	eba2 0809 	sub.w	r8, r2, r9
 80218fa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80218fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021900:	b280      	uxth	r0, r0
 8021902:	fa1f f888 	uxth.w	r8, r8
 8021906:	1a09      	subs	r1, r1, r0
 8021908:	fb08 f202 	mul.w	r2, r8, r2
 802190c:	b289      	uxth	r1, r1
 802190e:	fb01 220c 	mla	r2, r1, ip, r2
 8021912:	fb00 2204 	mla	r2, r0, r4, r2
 8021916:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021918:	fb09 2204 	mla	r2, r9, r4, r2
 802191c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021920:	2a00      	cmp	r2, #0
 8021922:	f000 80db 	beq.w	8021adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021926:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802192a:	d019      	beq.n	8021960 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 802192c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021934:	fb0c fa0a 	mul.w	sl, ip, sl
 8021938:	fb0c fc03 	mul.w	ip, ip, r3
 802193c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021940:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021944:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021948:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802194c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021950:	4453      	add	r3, sl
 8021952:	0a3f      	lsrs	r7, r7, #8
 8021954:	0a1b      	lsrs	r3, r3, #8
 8021956:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802195a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802195e:	433b      	orrs	r3, r7
 8021960:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021962:	2cff      	cmp	r4, #255	; 0xff
 8021964:	d020      	beq.n	80219a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8021966:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021968:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802196c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802196e:	4367      	muls	r7, r4
 8021970:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021972:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021976:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802197a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802197c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021980:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021984:	fb04 fa0a 	mul.w	sl, r4, sl
 8021988:	44bc      	add	ip, r7
 802198a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802198e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021992:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021996:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802199a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802199e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219a2:	ea4c 040a 	orr.w	r4, ip, sl
 80219a6:	940d      	str	r4, [sp, #52]	; 0x34
 80219a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80219aa:	2cff      	cmp	r4, #255	; 0xff
 80219ac:	d020      	beq.n	80219f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 80219ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80219b0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80219b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80219b6:	4367      	muls	r7, r4
 80219b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80219ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80219be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80219c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80219c4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80219c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80219d0:	44bc      	add	ip, r7
 80219d2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80219d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80219de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80219e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219ea:	ea4c 040a 	orr.w	r4, ip, sl
 80219ee:	9409      	str	r4, [sp, #36]	; 0x24
 80219f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219f2:	2cff      	cmp	r4, #255	; 0xff
 80219f4:	d020      	beq.n	8021a38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 80219f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219f8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80219fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219fe:	4367      	muls	r7, r4
 8021a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021a02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021a06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021a0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021a0c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021a10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a14:	fb04 fa0a 	mul.w	sl, r4, sl
 8021a18:	44bc      	add	ip, r7
 8021a1a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021a1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021a26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a32:	ea4c 040a 	orr.w	r4, ip, sl
 8021a36:	940e      	str	r4, [sp, #56]	; 0x38
 8021a38:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021a3a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021a3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a42:	43d2      	mvns	r2, r2
 8021a44:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021a48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021a4a:	b2d2      	uxtb	r2, r2
 8021a4c:	fb08 f707 	mul.w	r7, r8, r7
 8021a50:	fb01 770c 	mla	r7, r1, ip, r7
 8021a54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021a58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021a5a:	fb00 770c 	mla	r7, r0, ip, r7
 8021a5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021a62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021a64:	fb09 770c 	mla	r7, r9, ip, r7
 8021a68:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021a6c:	fb08 f80c 	mul.w	r8, r8, ip
 8021a70:	0a3f      	lsrs	r7, r7, #8
 8021a72:	fb01 8303 	mla	r3, r1, r3, r8
 8021a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021a78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a7c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021a80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021a82:	fb00 330a 	mla	r3, r0, sl, r3
 8021a86:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021a8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021a8e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021a92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a96:	fb03 f102 	mul.w	r1, r3, r2
 8021a9a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a9e:	1c4b      	adds	r3, r1, #1
 8021aa0:	ea47 070c 	orr.w	r7, r7, ip
 8021aa4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021aa8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021aac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021ab0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021ab4:	4353      	muls	r3, r2
 8021ab6:	1c59      	adds	r1, r3, #1
 8021ab8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021abc:	0a3b      	lsrs	r3, r7, #8
 8021abe:	0c3f      	lsrs	r7, r7, #16
 8021ac0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021ac4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021ac8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021acc:	435a      	muls	r2, r3
 8021ace:	1c53      	adds	r3, r2, #1
 8021ad0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021ad4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021ad8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021adc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021ade:	f10e 0e03 	add.w	lr, lr, #3
 8021ae2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021ae4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021ae8:	441a      	add	r2, r3
 8021aea:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021aec:	922f      	str	r2, [sp, #188]	; 0xbc
 8021aee:	441d      	add	r5, r3
 8021af0:	e65a      	b.n	80217a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8021af2:	2800      	cmp	r0, #0
 8021af4:	f43f aef7 	beq.w	80218e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021af8:	5c79      	ldrb	r1, [r7, r1]
 8021afa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021afe:	9109      	str	r1, [sp, #36]	; 0x24
 8021b00:	0e09      	lsrs	r1, r1, #24
 8021b02:	9111      	str	r1, [sp, #68]	; 0x44
 8021b04:	e6ef      	b.n	80218e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021b06:	b01b      	add	sp, #108	; 0x6c
 8021b08:	ecbd 8b0a 	vpop	{d8-d12}
 8021b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b14:	b08d      	sub	sp, #52	; 0x34
 8021b16:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021b1a:	9103      	str	r1, [sp, #12]
 8021b1c:	fb07 5803 	mla	r8, r7, r3, r5
 8021b20:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021b24:	9803      	ldr	r0, [sp, #12]
 8021b26:	2f00      	cmp	r7, #0
 8021b28:	910b      	str	r1, [sp, #44]	; 0x2c
 8021b2a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021b2e:	9903      	ldr	r1, [sp, #12]
 8021b30:	9c03      	ldr	r4, [sp, #12]
 8021b32:	eb02 0608 	add.w	r6, r2, r8
 8021b36:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021b3a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021b3e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021b42:	7809      	ldrb	r1, [r1, #0]
 8021b44:	7840      	ldrb	r0, [r0, #1]
 8021b46:	78a4      	ldrb	r4, [r4, #2]
 8021b48:	db51      	blt.n	8021bee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021b4a:	45be      	cmp	lr, r7
 8021b4c:	dd4f      	ble.n	8021bee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021b4e:	2d00      	cmp	r5, #0
 8021b50:	db49      	blt.n	8021be6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021b52:	42ab      	cmp	r3, r5
 8021b54:	dd47      	ble.n	8021be6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021b56:	f812 2008 	ldrb.w	r2, [r2, r8]
 8021b5a:	9204      	str	r2, [sp, #16]
 8021b5c:	7872      	ldrb	r2, [r6, #1]
 8021b5e:	9205      	str	r2, [sp, #20]
 8021b60:	78b2      	ldrb	r2, [r6, #2]
 8021b62:	9206      	str	r2, [sp, #24]
 8021b64:	1c6a      	adds	r2, r5, #1
 8021b66:	d449      	bmi.n	8021bfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021b68:	4293      	cmp	r3, r2
 8021b6a:	dd47      	ble.n	8021bfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021b6c:	f1bc 0f00 	cmp.w	ip, #0
 8021b70:	d044      	beq.n	8021bfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021b72:	7972      	ldrb	r2, [r6, #5]
 8021b74:	f896 b003 	ldrb.w	fp, [r6, #3]
 8021b78:	f896 a004 	ldrb.w	sl, [r6, #4]
 8021b7c:	9201      	str	r2, [sp, #4]
 8021b7e:	3701      	adds	r7, #1
 8021b80:	d444      	bmi.n	8021c0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021b82:	45be      	cmp	lr, r7
 8021b84:	dd42      	ble.n	8021c0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021b86:	f1b9 0f00 	cmp.w	r9, #0
 8021b8a:	f000 80c1 	beq.w	8021d10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8021b8e:	2d00      	cmp	r5, #0
 8021b90:	db38      	blt.n	8021c04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8021b92:	42ab      	cmp	r3, r5
 8021b94:	dd36      	ble.n	8021c04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8021b96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021b9a:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021b9e:	2203      	movs	r2, #3
 8021ba0:	fb03 6702 	mla	r7, r3, r2, r6
 8021ba4:	fb03 6202 	mla	r2, r3, r2, r6
 8021ba8:	787f      	ldrb	r7, [r7, #1]
 8021baa:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021bae:	9702      	str	r7, [sp, #8]
 8021bb0:	3501      	adds	r5, #1
 8021bb2:	d432      	bmi.n	8021c1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021bb4:	42ab      	cmp	r3, r5
 8021bb6:	dd30      	ble.n	8021c1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021bb8:	f1bc 0f00 	cmp.w	ip, #0
 8021bbc:	d031      	beq.n	8021c22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021bbe:	2703      	movs	r7, #3
 8021bc0:	fb13 7207 	smlabb	r2, r3, r7, r7
 8021bc4:	5cb5      	ldrb	r5, [r6, r2]
 8021bc6:	fb03 6207 	mla	r2, r3, r7, r6
 8021bca:	fb03 6307 	mla	r3, r3, r7, r6
 8021bce:	7912      	ldrb	r2, [r2, #4]
 8021bd0:	795e      	ldrb	r6, [r3, #5]
 8021bd2:	f1bc 0f0f 	cmp.w	ip, #15
 8021bd6:	d927      	bls.n	8021c28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021bd8:	4b53      	ldr	r3, [pc, #332]	; (8021d28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8021bda:	f240 1157 	movw	r1, #343	; 0x157
 8021bde:	4a53      	ldr	r2, [pc, #332]	; (8021d2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021be0:	4853      	ldr	r0, [pc, #332]	; (8021d30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8021be2:	f004 fc65 	bl	80264b0 <__assert_func>
 8021be6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021bea:	9104      	str	r1, [sp, #16]
 8021bec:	e7ba      	b.n	8021b64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021bee:	9401      	str	r4, [sp, #4]
 8021bf0:	4682      	mov	sl, r0
 8021bf2:	468b      	mov	fp, r1
 8021bf4:	9104      	str	r1, [sp, #16]
 8021bf6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021bfa:	e7c0      	b.n	8021b7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021bfc:	9401      	str	r4, [sp, #4]
 8021bfe:	4682      	mov	sl, r0
 8021c00:	468b      	mov	fp, r1
 8021c02:	e7bc      	b.n	8021b7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021c04:	46a6      	mov	lr, r4
 8021c06:	9002      	str	r0, [sp, #8]
 8021c08:	4688      	mov	r8, r1
 8021c0a:	e7d1      	b.n	8021bb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021c0c:	4626      	mov	r6, r4
 8021c0e:	4602      	mov	r2, r0
 8021c10:	460d      	mov	r5, r1
 8021c12:	46a6      	mov	lr, r4
 8021c14:	9002      	str	r0, [sp, #8]
 8021c16:	4688      	mov	r8, r1
 8021c18:	e7db      	b.n	8021bd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021c1a:	4626      	mov	r6, r4
 8021c1c:	4602      	mov	r2, r0
 8021c1e:	460d      	mov	r5, r1
 8021c20:	e7d7      	b.n	8021bd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021c22:	4626      	mov	r6, r4
 8021c24:	4602      	mov	r2, r0
 8021c26:	460d      	mov	r5, r1
 8021c28:	f1b9 0f0f 	cmp.w	r9, #15
 8021c2c:	d8d4      	bhi.n	8021bd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021c2e:	fa1f f38c 	uxth.w	r3, ip
 8021c32:	fa1f fc89 	uxth.w	ip, r9
 8021c36:	fb03 f70c 	mul.w	r7, r3, ip
 8021c3a:	011b      	lsls	r3, r3, #4
 8021c3c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021c40:	9707      	str	r7, [sp, #28]
 8021c42:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021c46:	fa1f fc8c 	uxth.w	ip, ip
 8021c4a:	eba7 070c 	sub.w	r7, r7, ip
 8021c4e:	b2bf      	uxth	r7, r7
 8021c50:	9709      	str	r7, [sp, #36]	; 0x24
 8021c52:	9f07      	ldr	r7, [sp, #28]
 8021c54:	1bdb      	subs	r3, r3, r7
 8021c56:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8021c5a:	b29b      	uxth	r3, r3
 8021c5c:	9708      	str	r7, [sp, #32]
 8021c5e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021c60:	930a      	str	r3, [sp, #40]	; 0x28
 8021c62:	ea6f 0907 	mvn.w	r9, r7
 8021c66:	fb03 fb0b 	mul.w	fp, r3, fp
 8021c6a:	9f04      	ldr	r7, [sp, #16]
 8021c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c6e:	fa5f f989 	uxtb.w	r9, r9
 8021c72:	fb03 bb07 	mla	fp, r3, r7, fp
 8021c76:	9f07      	ldr	r7, [sp, #28]
 8021c78:	fb11 f109 	smulbb	r1, r1, r9
 8021c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c7e:	fb0c b808 	mla	r8, ip, r8, fp
 8021c82:	fb10 f009 	smulbb	r0, r0, r9
 8021c86:	fb14 f409 	smulbb	r4, r4, r9
 8021c8a:	fb07 8805 	mla	r8, r7, r5, r8
 8021c8e:	9d08      	ldr	r5, [sp, #32]
 8021c90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c92:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021c96:	fb08 1805 	mla	r8, r8, r5, r1
 8021c9a:	9d05      	ldr	r5, [sp, #20]
 8021c9c:	fa1f f888 	uxth.w	r8, r8
 8021ca0:	f108 0101 	add.w	r1, r8, #1
 8021ca4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021ca8:	9903      	ldr	r1, [sp, #12]
 8021caa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021cae:	f881 8000 	strb.w	r8, [r1]
 8021cb2:	fb03 f10a 	mul.w	r1, r3, sl
 8021cb6:	fb07 1105 	mla	r1, r7, r5, r1
 8021cba:	9d02      	ldr	r5, [sp, #8]
 8021cbc:	fb0c 1105 	mla	r1, ip, r5, r1
 8021cc0:	9d07      	ldr	r5, [sp, #28]
 8021cc2:	fb05 1102 	mla	r1, r5, r2, r1
 8021cc6:	9a08      	ldr	r2, [sp, #32]
 8021cc8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021ccc:	fb01 0102 	mla	r1, r1, r2, r0
 8021cd0:	9a03      	ldr	r2, [sp, #12]
 8021cd2:	b289      	uxth	r1, r1
 8021cd4:	1c48      	adds	r0, r1, #1
 8021cd6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021cda:	1209      	asrs	r1, r1, #8
 8021cdc:	7051      	strb	r1, [r2, #1]
 8021cde:	9a01      	ldr	r2, [sp, #4]
 8021ce0:	4353      	muls	r3, r2
 8021ce2:	9a06      	ldr	r2, [sp, #24]
 8021ce4:	fb07 3702 	mla	r7, r7, r2, r3
 8021ce8:	9b08      	ldr	r3, [sp, #32]
 8021cea:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021cee:	fb05 c606 	mla	r6, r5, r6, ip
 8021cf2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021cf6:	fb06 4603 	mla	r6, r6, r3, r4
 8021cfa:	9b03      	ldr	r3, [sp, #12]
 8021cfc:	b2b6      	uxth	r6, r6
 8021cfe:	f106 0e01 	add.w	lr, r6, #1
 8021d02:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021d06:	1236      	asrs	r6, r6, #8
 8021d08:	709e      	strb	r6, [r3, #2]
 8021d0a:	b00d      	add	sp, #52	; 0x34
 8021d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d10:	f1bc 0f0f 	cmp.w	ip, #15
 8021d14:	f63f af60 	bhi.w	8021bd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021d18:	4626      	mov	r6, r4
 8021d1a:	4602      	mov	r2, r0
 8021d1c:	460d      	mov	r5, r1
 8021d1e:	46a6      	mov	lr, r4
 8021d20:	9002      	str	r0, [sp, #8]
 8021d22:	4688      	mov	r8, r1
 8021d24:	e783      	b.n	8021c2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8021d26:	bf00      	nop
 8021d28:	0802e527 	.word	0x0802e527
 8021d2c:	0802ea8f 	.word	0x0802ea8f
 8021d30:	0802e5f0 	.word	0x0802e5f0

08021d34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d38:	ed2d 8b08 	vpush	{d8-d11}
 8021d3c:	b09f      	sub	sp, #124	; 0x7c
 8021d3e:	eeb0 aa40 	vmov.f32	s20, s0
 8021d42:	eef0 9a60 	vmov.f32	s19, s1
 8021d46:	920e      	str	r2, [sp, #56]	; 0x38
 8021d48:	eeb0 9a41 	vmov.f32	s18, s2
 8021d4c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021d4e:	eeb0 8a62 	vmov.f32	s16, s5
 8021d52:	9307      	str	r3, [sp, #28]
 8021d54:	eef0 8a43 	vmov.f32	s17, s6
 8021d58:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8021d5c:	eef0 ba44 	vmov.f32	s23, s8
 8021d60:	901d      	str	r0, [sp, #116]	; 0x74
 8021d62:	eeb0 ba64 	vmov.f32	s22, s9
 8021d66:	930c      	str	r3, [sp, #48]	; 0x30
 8021d68:	eef0 aa45 	vmov.f32	s21, s10
 8021d6c:	6850      	ldr	r0, [r2, #4]
 8021d6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021d70:	6812      	ldr	r2, [r2, #0]
 8021d72:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8021d76:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8021d7a:	fb00 1303 	mla	r3, r0, r3, r1
 8021d7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d82:	18d3      	adds	r3, r2, r3
 8021d84:	9308      	str	r3, [sp, #32]
 8021d86:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021d88:	681b      	ldr	r3, [r3, #0]
 8021d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8021d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d8e:	43db      	mvns	r3, r3
 8021d90:	b2db      	uxtb	r3, r3
 8021d92:	9309      	str	r3, [sp, #36]	; 0x24
 8021d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	dc03      	bgt.n	8021da2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	f340 81f5 	ble.w	802218c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8021da2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021da4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021da8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021dac:	1e48      	subs	r0, r1, #1
 8021dae:	1e54      	subs	r4, r2, #1
 8021db0:	9b07      	ldr	r3, [sp, #28]
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	f340 80d5 	ble.w	8021f62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021db8:	ea5f 452a 	movs.w	r5, sl, asr #16
 8021dbc:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021dc0:	d406      	bmi.n	8021dd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021dc2:	4285      	cmp	r5, r0
 8021dc4:	da04      	bge.n	8021dd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	db02      	blt.n	8021dd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021dca:	42a3      	cmp	r3, r4
 8021dcc:	f2c0 80ca 	blt.w	8021f64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021dd0:	3501      	adds	r5, #1
 8021dd2:	f100 80bb 	bmi.w	8021f4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021dd6:	42a9      	cmp	r1, r5
 8021dd8:	f2c0 80b8 	blt.w	8021f4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021ddc:	3301      	adds	r3, #1
 8021dde:	f100 80b5 	bmi.w	8021f4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021de2:	429a      	cmp	r2, r3
 8021de4:	f2c0 80b2 	blt.w	8021f4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021de8:	9b07      	ldr	r3, [sp, #28]
 8021dea:	9d08      	ldr	r5, [sp, #32]
 8021dec:	930d      	str	r3, [sp, #52]	; 0x34
 8021dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	f340 80d6 	ble.w	8021fa2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021df6:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8021df8:	ea4f 4428 	mov.w	r4, r8, asr #16
 8021dfc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021dfe:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021e02:	68c6      	ldr	r6, [r0, #12]
 8021e04:	ea5f 402a 	movs.w	r0, sl, asr #16
 8021e08:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8021e0c:	689b      	ldr	r3, [r3, #8]
 8021e0e:	f100 810f 	bmi.w	8022030 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021e12:	1e5f      	subs	r7, r3, #1
 8021e14:	42b8      	cmp	r0, r7
 8021e16:	f280 810b 	bge.w	8022030 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021e1a:	2c00      	cmp	r4, #0
 8021e1c:	f2c0 8108 	blt.w	8022030 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021e20:	1e77      	subs	r7, r6, #1
 8021e22:	42bc      	cmp	r4, r7
 8021e24:	f280 8104 	bge.w	8022030 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021e28:	b21b      	sxth	r3, r3
 8021e2a:	fb04 0003 	mla	r0, r4, r3, r0
 8021e2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021e34:	1826      	adds	r6, r4, r0
 8021e36:	5c24      	ldrb	r4, [r4, r0]
 8021e38:	78b7      	ldrb	r7, [r6, #2]
 8021e3a:	7870      	ldrb	r0, [r6, #1]
 8021e3c:	970f      	str	r7, [sp, #60]	; 0x3c
 8021e3e:	7977      	ldrb	r7, [r6, #5]
 8021e40:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021e44:	f896 c004 	ldrb.w	ip, [r6, #4]
 8021e48:	9710      	str	r7, [sp, #64]	; 0x40
 8021e4a:	b1c9      	cbz	r1, 8021e80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021e4c:	f04f 0b03 	mov.w	fp, #3
 8021e50:	f06f 0904 	mvn.w	r9, #4
 8021e54:	3605      	adds	r6, #5
 8021e56:	fb13 930b 	smlabb	r3, r3, fp, r9
 8021e5a:	eb06 0b03 	add.w	fp, r6, r3
 8021e5e:	5cf3      	ldrb	r3, [r6, r3]
 8021e60:	9311      	str	r3, [sp, #68]	; 0x44
 8021e62:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021e66:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e68:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021e6c:	9315      	str	r3, [sp, #84]	; 0x54
 8021e6e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8021e72:	9312      	str	r3, [sp, #72]	; 0x48
 8021e74:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8021e78:	9314      	str	r3, [sp, #80]	; 0x50
 8021e7a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8021e7e:	9316      	str	r3, [sp, #88]	; 0x58
 8021e80:	b292      	uxth	r2, r2
 8021e82:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021e84:	b289      	uxth	r1, r1
 8021e86:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8021e8a:	fb02 f601 	mul.w	r6, r2, r1
 8021e8e:	0112      	lsls	r2, r2, #4
 8021e90:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8021e94:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8021e98:	1b92      	subs	r2, r2, r6
 8021e9a:	b289      	uxth	r1, r1
 8021e9c:	b292      	uxth	r2, r2
 8021e9e:	eba9 0901 	sub.w	r9, r9, r1
 8021ea2:	fb02 fe0e 	mul.w	lr, r2, lr
 8021ea6:	fa1f f989 	uxth.w	r9, r9
 8021eaa:	fb02 fc0c 	mul.w	ip, r2, ip
 8021eae:	fb09 e404 	mla	r4, r9, r4, lr
 8021eb2:	f895 e000 	ldrb.w	lr, [r5]
 8021eb6:	fb09 c000 	mla	r0, r9, r0, ip
 8021eba:	fb01 4407 	mla	r4, r1, r7, r4
 8021ebe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021ec0:	fb06 4407 	mla	r4, r6, r7, r4
 8021ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ec6:	fb1e fe07 	smulbb	lr, lr, r7
 8021eca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021ece:	fb04 e403 	mla	r4, r4, r3, lr
 8021ed2:	b2a4      	uxth	r4, r4
 8021ed4:	f104 0e01 	add.w	lr, r4, #1
 8021ed8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8021edc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ede:	fb01 0004 	mla	r0, r1, r4, r0
 8021ee2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021ee4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021ee8:	fb06 0004 	mla	r0, r6, r4, r0
 8021eec:	786c      	ldrb	r4, [r5, #1]
 8021eee:	f885 e000 	strb.w	lr, [r5]
 8021ef2:	fb14 f407 	smulbb	r4, r4, r7
 8021ef6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021efa:	fb00 4003 	mla	r0, r0, r3, r4
 8021efe:	b280      	uxth	r0, r0
 8021f00:	1c44      	adds	r4, r0, #1
 8021f02:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021f06:	1200      	asrs	r0, r0, #8
 8021f08:	7068      	strb	r0, [r5, #1]
 8021f0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021f0c:	4342      	muls	r2, r0
 8021f0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021f10:	fb09 2200 	mla	r2, r9, r0, r2
 8021f14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021f16:	fb01 2100 	mla	r1, r1, r0, r2
 8021f1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021f1c:	fb06 1602 	mla	r6, r6, r2, r1
 8021f20:	78a9      	ldrb	r1, [r5, #2]
 8021f22:	fb11 f107 	smulbb	r1, r1, r7
 8021f26:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021f2a:	fb06 1303 	mla	r3, r6, r3, r1
 8021f2e:	b29b      	uxth	r3, r3
 8021f30:	1c5e      	adds	r6, r3, #1
 8021f32:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021f36:	121b      	asrs	r3, r3, #8
 8021f38:	70ab      	strb	r3, [r5, #2]
 8021f3a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021f3c:	3503      	adds	r5, #3
 8021f3e:	449a      	add	sl, r3
 8021f40:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f42:	4498      	add	r8, r3
 8021f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f46:	3b01      	subs	r3, #1
 8021f48:	930d      	str	r3, [sp, #52]	; 0x34
 8021f4a:	e750      	b.n	8021dee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8021f4c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021f4e:	449a      	add	sl, r3
 8021f50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f52:	4498      	add	r8, r3
 8021f54:	9b07      	ldr	r3, [sp, #28]
 8021f56:	3b01      	subs	r3, #1
 8021f58:	9307      	str	r3, [sp, #28]
 8021f5a:	9b08      	ldr	r3, [sp, #32]
 8021f5c:	3303      	adds	r3, #3
 8021f5e:	9308      	str	r3, [sp, #32]
 8021f60:	e726      	b.n	8021db0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021f62:	d026      	beq.n	8021fb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021f64:	9b07      	ldr	r3, [sp, #28]
 8021f66:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021f68:	3b01      	subs	r3, #1
 8021f6a:	fb00 a003 	mla	r0, r0, r3, sl
 8021f6e:	1400      	asrs	r0, r0, #16
 8021f70:	f53f af3a 	bmi.w	8021de8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021f74:	3901      	subs	r1, #1
 8021f76:	4288      	cmp	r0, r1
 8021f78:	f6bf af36 	bge.w	8021de8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021f7c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021f7e:	fb01 8303 	mla	r3, r1, r3, r8
 8021f82:	141b      	asrs	r3, r3, #16
 8021f84:	f53f af30 	bmi.w	8021de8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021f88:	3a01      	subs	r2, #1
 8021f8a:	4293      	cmp	r3, r2
 8021f8c:	f6bf af2c 	bge.w	8021de8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021f90:	9b08      	ldr	r3, [sp, #32]
 8021f92:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021f96:	1cdd      	adds	r5, r3, #3
 8021f98:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8021f9c:	f1bc 0f00 	cmp.w	ip, #0
 8021fa0:	dc5f      	bgt.n	8022062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021fa2:	9b07      	ldr	r3, [sp, #28]
 8021fa4:	9a08      	ldr	r2, [sp, #32]
 8021fa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021fae:	441a      	add	r2, r3
 8021fb0:	9208      	str	r2, [sp, #32]
 8021fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	f340 80e9 	ble.w	802218c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8021fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021fc0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021fc4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021fc8:	eef0 6a48 	vmov.f32	s13, s16
 8021fcc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021fd0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021fd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fd8:	ee16 aa90 	vmov	sl, s13
 8021fdc:	eef0 6a68 	vmov.f32	s13, s17
 8021fe0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fe4:	ee16 8a90 	vmov	r8, s13
 8021fe8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021fec:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021ff0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021ff4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021ff8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021ffc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022000:	ee18 2a10 	vmov	r2, s16
 8022004:	eeb0 8a47 	vmov.f32	s16, s14
 8022008:	fb92 f3f3 	sdiv	r3, r2, r3
 802200c:	ee18 2a90 	vmov	r2, s17
 8022010:	9333      	str	r3, [sp, #204]	; 0xcc
 8022012:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022014:	eef0 8a67 	vmov.f32	s17, s15
 8022018:	fb92 f3f3 	sdiv	r3, r2, r3
 802201c:	9334      	str	r3, [sp, #208]	; 0xd0
 802201e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022022:	3b01      	subs	r3, #1
 8022024:	930b      	str	r3, [sp, #44]	; 0x2c
 8022026:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022028:	bf08      	it	eq
 802202a:	4613      	moveq	r3, r2
 802202c:	9307      	str	r3, [sp, #28]
 802202e:	e6b1      	b.n	8021d94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022030:	1c47      	adds	r7, r0, #1
 8022032:	d482      	bmi.n	8021f3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022034:	42bb      	cmp	r3, r7
 8022036:	db80      	blt.n	8021f3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022038:	1c67      	adds	r7, r4, #1
 802203a:	f53f af7e 	bmi.w	8021f3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802203e:	42be      	cmp	r6, r7
 8022040:	f6ff af7b 	blt.w	8021f3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022044:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022046:	b236      	sxth	r6, r6
 8022048:	9001      	str	r0, [sp, #4]
 802204a:	b21b      	sxth	r3, r3
 802204c:	9600      	str	r6, [sp, #0]
 802204e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022050:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8022054:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8022058:	4629      	mov	r1, r5
 802205a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802205c:	f7ff fd58 	bl	8021b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8022060:	e76b      	b.n	8021f3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022062:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8022064:	ea4f 402a 	mov.w	r0, sl, asr #16
 8022068:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802206c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8022070:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8022074:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022078:	fb07 0101 	mla	r1, r7, r1, r0
 802207c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802207e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022082:	1844      	adds	r4, r0, r1
 8022084:	5c40      	ldrb	r0, [r0, r1]
 8022086:	78a6      	ldrb	r6, [r4, #2]
 8022088:	7861      	ldrb	r1, [r4, #1]
 802208a:	960f      	str	r6, [sp, #60]	; 0x3c
 802208c:	78e6      	ldrb	r6, [r4, #3]
 802208e:	910d      	str	r1, [sp, #52]	; 0x34
 8022090:	9610      	str	r6, [sp, #64]	; 0x40
 8022092:	f894 9004 	ldrb.w	r9, [r4, #4]
 8022096:	f894 b005 	ldrb.w	fp, [r4, #5]
 802209a:	b192      	cbz	r2, 80220c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802209c:	f06f 0604 	mvn.w	r6, #4
 80220a0:	2103      	movs	r1, #3
 80220a2:	3405      	adds	r4, #5
 80220a4:	fb17 6701 	smlabb	r7, r7, r1, r6
 80220a8:	19e6      	adds	r6, r4, r7
 80220aa:	5de4      	ldrb	r4, [r4, r7]
 80220ac:	9417      	str	r4, [sp, #92]	; 0x5c
 80220ae:	7874      	ldrb	r4, [r6, #1]
 80220b0:	9419      	str	r4, [sp, #100]	; 0x64
 80220b2:	78b4      	ldrb	r4, [r6, #2]
 80220b4:	941b      	str	r4, [sp, #108]	; 0x6c
 80220b6:	78f4      	ldrb	r4, [r6, #3]
 80220b8:	9418      	str	r4, [sp, #96]	; 0x60
 80220ba:	7934      	ldrb	r4, [r6, #4]
 80220bc:	941a      	str	r4, [sp, #104]	; 0x68
 80220be:	7974      	ldrb	r4, [r6, #5]
 80220c0:	941c      	str	r4, [sp, #112]	; 0x70
 80220c2:	b29b      	uxth	r3, r3
 80220c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80220c6:	b292      	uxth	r2, r2
 80220c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80220ca:	3503      	adds	r5, #3
 80220cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80220d0:	fb03 f402 	mul.w	r4, r3, r2
 80220d4:	011b      	lsls	r3, r3, #4
 80220d6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80220da:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80220de:	1b1b      	subs	r3, r3, r4
 80220e0:	b292      	uxth	r2, r2
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	1ab6      	subs	r6, r6, r2
 80220e6:	435f      	muls	r7, r3
 80220e8:	b2b6      	uxth	r6, r6
 80220ea:	fb03 f909 	mul.w	r9, r3, r9
 80220ee:	fb03 fb0b 	mul.w	fp, r3, fp
 80220f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80220f4:	fb06 7000 	mla	r0, r6, r0, r7
 80220f8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80220fa:	fb06 bb03 	mla	fp, r6, r3, fp
 80220fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022100:	fb02 0007 	mla	r0, r2, r7, r0
 8022104:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8022106:	fb02 bb03 	mla	fp, r2, r3, fp
 802210a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802210c:	fb04 0007 	mla	r0, r4, r7, r0
 8022110:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8022114:	fb17 f701 	smulbb	r7, r7, r1
 8022118:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802211c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802211e:	fb00 700e 	mla	r0, r0, lr, r7
 8022122:	fb06 9101 	mla	r1, r6, r1, r9
 8022126:	b280      	uxth	r0, r0
 8022128:	1c47      	adds	r7, r0, #1
 802212a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802212e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022130:	1200      	asrs	r0, r0, #8
 8022132:	f805 0c06 	strb.w	r0, [r5, #-6]
 8022136:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022138:	fb02 1100 	mla	r1, r2, r0, r1
 802213c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802213e:	fb04 1100 	mla	r1, r4, r0, r1
 8022142:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8022146:	fb04 b403 	mla	r4, r4, r3, fp
 802214a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802214e:	fb10 f007 	smulbb	r0, r0, r7
 8022152:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022156:	fb13 f307 	smulbb	r3, r3, r7
 802215a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802215e:	fb01 010e 	mla	r1, r1, lr, r0
 8022162:	fb04 340e 	mla	r4, r4, lr, r3
 8022166:	b289      	uxth	r1, r1
 8022168:	b2a4      	uxth	r4, r4
 802216a:	1c48      	adds	r0, r1, #1
 802216c:	1c63      	adds	r3, r4, #1
 802216e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022172:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022176:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022178:	1209      	asrs	r1, r1, #8
 802217a:	1224      	asrs	r4, r4, #8
 802217c:	449a      	add	sl, r3
 802217e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022180:	f805 1c05 	strb.w	r1, [r5, #-5]
 8022184:	f805 4c04 	strb.w	r4, [r5, #-4]
 8022188:	4498      	add	r8, r3
 802218a:	e707      	b.n	8021f9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802218c:	b01f      	add	sp, #124	; 0x7c
 802218e:	ecbd 8b08 	vpop	{d8-d11}
 8022192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022198 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8022198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802219c:	b085      	sub	sp, #20
 802219e:	784d      	ldrb	r5, [r1, #1]
 80221a0:	788e      	ldrb	r6, [r1, #2]
 80221a2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80221a6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80221aa:	9403      	str	r4, [sp, #12]
 80221ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80221b0:	780c      	ldrb	r4, [r1, #0]
 80221b2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80221b6:	fb07 ce03 	mla	lr, r7, r3, ip
 80221ba:	2f00      	cmp	r7, #0
 80221bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80221c0:	eb02 0b0e 	add.w	fp, r2, lr
 80221c4:	db56      	blt.n	8022274 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80221c6:	45b9      	cmp	r9, r7
 80221c8:	dd54      	ble.n	8022274 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80221ca:	f1bc 0f00 	cmp.w	ip, #0
 80221ce:	db4d      	blt.n	802226c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80221d0:	4563      	cmp	r3, ip
 80221d2:	dd4b      	ble.n	802226c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80221d4:	f812 200e 	ldrb.w	r2, [r2, lr]
 80221d8:	9200      	str	r2, [sp, #0]
 80221da:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80221de:	9201      	str	r2, [sp, #4]
 80221e0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80221e4:	9202      	str	r2, [sp, #8]
 80221e6:	f11c 0201 	adds.w	r2, ip, #1
 80221ea:	d44a      	bmi.n	8022282 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80221ec:	4293      	cmp	r3, r2
 80221ee:	dd48      	ble.n	8022282 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80221f0:	2800      	cmp	r0, #0
 80221f2:	d046      	beq.n	8022282 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80221f4:	f89b e003 	ldrb.w	lr, [fp, #3]
 80221f8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80221fc:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022200:	3701      	adds	r7, #1
 8022202:	d446      	bmi.n	8022292 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022204:	45b9      	cmp	r9, r7
 8022206:	dd44      	ble.n	8022292 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022208:	9a03      	ldr	r2, [sp, #12]
 802220a:	2a00      	cmp	r2, #0
 802220c:	d045      	beq.n	802229a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802220e:	f1bc 0f00 	cmp.w	ip, #0
 8022212:	db3a      	blt.n	802228a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022214:	4563      	cmp	r3, ip
 8022216:	dd38      	ble.n	802228a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022218:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802221c:	f04f 0903 	mov.w	r9, #3
 8022220:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022224:	fb03 b209 	mla	r2, r3, r9, fp
 8022228:	fb03 b909 	mla	r9, r3, r9, fp
 802222c:	7852      	ldrb	r2, [r2, #1]
 802222e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022232:	f11c 0c01 	adds.w	ip, ip, #1
 8022236:	d40d      	bmi.n	8022254 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022238:	4563      	cmp	r3, ip
 802223a:	dd0b      	ble.n	8022254 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802223c:	b160      	cbz	r0, 8022258 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802223e:	2603      	movs	r6, #3
 8022240:	fb13 6406 	smlabb	r4, r3, r6, r6
 8022244:	fb03 b506 	mla	r5, r3, r6, fp
 8022248:	fb03 b306 	mla	r3, r3, r6, fp
 802224c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8022250:	792d      	ldrb	r5, [r5, #4]
 8022252:	795e      	ldrb	r6, [r3, #5]
 8022254:	280f      	cmp	r0, #15
 8022256:	d802      	bhi.n	802225e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022258:	9b03      	ldr	r3, [sp, #12]
 802225a:	2b0f      	cmp	r3, #15
 802225c:	d922      	bls.n	80222a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802225e:	4b2f      	ldr	r3, [pc, #188]	; (802231c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8022260:	f240 1157 	movw	r1, #343	; 0x157
 8022264:	4a2e      	ldr	r2, [pc, #184]	; (8022320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8022266:	482f      	ldr	r0, [pc, #188]	; (8022324 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8022268:	f004 f922 	bl	80264b0 <__assert_func>
 802226c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022270:	9400      	str	r4, [sp, #0]
 8022272:	e7b8      	b.n	80221e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8022274:	46b2      	mov	sl, r6
 8022276:	46a8      	mov	r8, r5
 8022278:	46a6      	mov	lr, r4
 802227a:	9400      	str	r4, [sp, #0]
 802227c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022280:	e7be      	b.n	8022200 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022282:	46b2      	mov	sl, r6
 8022284:	46a8      	mov	r8, r5
 8022286:	46a6      	mov	lr, r4
 8022288:	e7ba      	b.n	8022200 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802228a:	46b1      	mov	r9, r6
 802228c:	462a      	mov	r2, r5
 802228e:	4627      	mov	r7, r4
 8022290:	e7cf      	b.n	8022232 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8022292:	46b1      	mov	r9, r6
 8022294:	462a      	mov	r2, r5
 8022296:	4627      	mov	r7, r4
 8022298:	e7dc      	b.n	8022254 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802229a:	280f      	cmp	r0, #15
 802229c:	d8df      	bhi.n	802225e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802229e:	46b1      	mov	r9, r6
 80222a0:	462a      	mov	r2, r5
 80222a2:	4627      	mov	r7, r4
 80222a4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80222a8:	b280      	uxth	r0, r0
 80222aa:	fb00 f30b 	mul.w	r3, r0, fp
 80222ae:	0100      	lsls	r0, r0, #4
 80222b0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80222b4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80222b8:	1ac0      	subs	r0, r0, r3
 80222ba:	fa1f fb8b 	uxth.w	fp, fp
 80222be:	b280      	uxth	r0, r0
 80222c0:	ebac 0c0b 	sub.w	ip, ip, fp
 80222c4:	9003      	str	r0, [sp, #12]
 80222c6:	fa1f fc8c 	uxth.w	ip, ip
 80222ca:	fb00 fe0e 	mul.w	lr, r0, lr
 80222ce:	9800      	ldr	r0, [sp, #0]
 80222d0:	fb0c ee00 	mla	lr, ip, r0, lr
 80222d4:	9803      	ldr	r0, [sp, #12]
 80222d6:	fb00 f808 	mul.w	r8, r0, r8
 80222da:	9801      	ldr	r0, [sp, #4]
 80222dc:	fb0b ee07 	mla	lr, fp, r7, lr
 80222e0:	fb0c 8800 	mla	r8, ip, r0, r8
 80222e4:	fb03 ee04 	mla	lr, r3, r4, lr
 80222e8:	fb0b 8202 	mla	r2, fp, r2, r8
 80222ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80222f0:	fb03 2505 	mla	r5, r3, r5, r2
 80222f4:	9a03      	ldr	r2, [sp, #12]
 80222f6:	f881 e000 	strb.w	lr, [r1]
 80222fa:	fb02 f00a 	mul.w	r0, r2, sl
 80222fe:	9a02      	ldr	r2, [sp, #8]
 8022300:	122d      	asrs	r5, r5, #8
 8022302:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022306:	704d      	strb	r5, [r1, #1]
 8022308:	fb0b c909 	mla	r9, fp, r9, ip
 802230c:	fb03 9606 	mla	r6, r3, r6, r9
 8022310:	1236      	asrs	r6, r6, #8
 8022312:	708e      	strb	r6, [r1, #2]
 8022314:	b005      	add	sp, #20
 8022316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802231a:	bf00      	nop
 802231c:	0802e527 	.word	0x0802e527
 8022320:	0802ea8f 	.word	0x0802ea8f
 8022324:	0802e5f0 	.word	0x0802e5f0

08022328 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802232c:	ed2d 8b08 	vpush	{d8-d11}
 8022330:	b09b      	sub	sp, #108	; 0x6c
 8022332:	eeb0 aa40 	vmov.f32	s20, s0
 8022336:	eef0 9a60 	vmov.f32	s19, s1
 802233a:	920b      	str	r2, [sp, #44]	; 0x2c
 802233c:	eeb0 9a41 	vmov.f32	s18, s2
 8022340:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022342:	eeb0 8a62 	vmov.f32	s16, s5
 8022346:	9019      	str	r0, [sp, #100]	; 0x64
 8022348:	eef0 8a43 	vmov.f32	s17, s6
 802234c:	6850      	ldr	r0, [r2, #4]
 802234e:	eef0 ba44 	vmov.f32	s23, s8
 8022352:	9109      	str	r1, [sp, #36]	; 0x24
 8022354:	eeb0 ba64 	vmov.f32	s22, s9
 8022358:	9306      	str	r3, [sp, #24]
 802235a:	eef0 aa45 	vmov.f32	s21, s10
 802235e:	6812      	ldr	r2, [r2, #0]
 8022360:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022364:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8022368:	fb00 1303 	mla	r3, r0, r3, r1
 802236c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022370:	18d3      	adds	r3, r2, r3
 8022372:	9307      	str	r3, [sp, #28]
 8022374:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022376:	681b      	ldr	r3, [r3, #0]
 8022378:	9308      	str	r3, [sp, #32]
 802237a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802237c:	2b00      	cmp	r3, #0
 802237e:	dc03      	bgt.n	8022388 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022382:	2b00      	cmp	r3, #0
 8022384:	f340 81ab 	ble.w	80226de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022388:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802238a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802238e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022392:	1e48      	subs	r0, r1, #1
 8022394:	1e55      	subs	r5, r2, #1
 8022396:	9b06      	ldr	r3, [sp, #24]
 8022398:	2b00      	cmp	r3, #0
 802239a:	f340 80b1 	ble.w	8022500 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802239e:	ea5f 462b 	movs.w	r6, fp, asr #16
 80223a2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80223a6:	d406      	bmi.n	80223b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80223a8:	4286      	cmp	r6, r0
 80223aa:	da04      	bge.n	80223b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	db02      	blt.n	80223b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80223b0:	42ab      	cmp	r3, r5
 80223b2:	f2c0 80a6 	blt.w	8022502 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80223b6:	3601      	adds	r6, #1
 80223b8:	f100 8097 	bmi.w	80224ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223bc:	42b1      	cmp	r1, r6
 80223be:	f2c0 8094 	blt.w	80224ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223c2:	3301      	adds	r3, #1
 80223c4:	f100 8091 	bmi.w	80224ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223c8:	429a      	cmp	r2, r3
 80223ca:	f2c0 808e 	blt.w	80224ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223ce:	9b06      	ldr	r3, [sp, #24]
 80223d0:	9e07      	ldr	r6, [sp, #28]
 80223d2:	930a      	str	r3, [sp, #40]	; 0x28
 80223d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	f340 80b0 	ble.w	802253c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80223dc:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80223de:	1425      	asrs	r5, r4, #16
 80223e0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80223e2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80223e6:	68c7      	ldr	r7, [r0, #12]
 80223e8:	ea5f 402b 	movs.w	r0, fp, asr #16
 80223ec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80223f0:	689b      	ldr	r3, [r3, #8]
 80223f2:	f100 80ea 	bmi.w	80225ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80223f6:	f103 3cff 	add.w	ip, r3, #4294967295
 80223fa:	4560      	cmp	r0, ip
 80223fc:	f280 80e5 	bge.w	80225ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022400:	2d00      	cmp	r5, #0
 8022402:	f2c0 80e2 	blt.w	80225ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022406:	f107 3cff 	add.w	ip, r7, #4294967295
 802240a:	4565      	cmp	r5, ip
 802240c:	f280 80dd 	bge.w	80225ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022410:	b21b      	sxth	r3, r3
 8022412:	fb05 0003 	mla	r0, r5, r3, r0
 8022416:	9d08      	ldr	r5, [sp, #32]
 8022418:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802241c:	182f      	adds	r7, r5, r0
 802241e:	5c2d      	ldrb	r5, [r5, r0]
 8022420:	7878      	ldrb	r0, [r7, #1]
 8022422:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022426:	900c      	str	r0, [sp, #48]	; 0x30
 8022428:	f897 9003 	ldrb.w	r9, [r7, #3]
 802242c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8022430:	f897 a005 	ldrb.w	sl, [r7, #5]
 8022434:	b1c9      	cbz	r1, 802246a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022436:	f04f 0c03 	mov.w	ip, #3
 802243a:	f06f 0004 	mvn.w	r0, #4
 802243e:	3705      	adds	r7, #5
 8022440:	fb13 030c 	smlabb	r3, r3, ip, r0
 8022444:	eb07 0c03 	add.w	ip, r7, r3
 8022448:	5cfb      	ldrb	r3, [r7, r3]
 802244a:	930d      	str	r3, [sp, #52]	; 0x34
 802244c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022450:	930f      	str	r3, [sp, #60]	; 0x3c
 8022452:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022456:	9311      	str	r3, [sp, #68]	; 0x44
 8022458:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802245c:	930e      	str	r3, [sp, #56]	; 0x38
 802245e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8022462:	9310      	str	r3, [sp, #64]	; 0x40
 8022464:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8022468:	9312      	str	r3, [sp, #72]	; 0x48
 802246a:	b292      	uxth	r2, r2
 802246c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802246e:	b289      	uxth	r1, r1
 8022470:	fb02 f301 	mul.w	r3, r2, r1
 8022474:	0112      	lsls	r2, r2, #4
 8022476:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802247a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802247e:	1ad2      	subs	r2, r2, r3
 8022480:	b289      	uxth	r1, r1
 8022482:	b292      	uxth	r2, r2
 8022484:	1a7f      	subs	r7, r7, r1
 8022486:	fb02 f909 	mul.w	r9, r2, r9
 802248a:	b2bf      	uxth	r7, r7
 802248c:	fb02 f808 	mul.w	r8, r2, r8
 8022490:	fb02 fa0a 	mul.w	sl, r2, sl
 8022494:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022496:	fb07 9905 	mla	r9, r7, r5, r9
 802249a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802249c:	fb07 8800 	mla	r8, r7, r0, r8
 80224a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80224a2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80224a6:	fb01 9905 	mla	r9, r1, r5, r9
 80224aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80224ac:	fb01 8800 	mla	r8, r1, r0, r8
 80224b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80224b2:	fb01 a102 	mla	r1, r1, r2, sl
 80224b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80224b8:	fb03 9905 	mla	r9, r3, r5, r9
 80224bc:	fb03 8800 	mla	r8, r3, r0, r8
 80224c0:	fb03 1302 	mla	r3, r3, r2, r1
 80224c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80224c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80224cc:	121b      	asrs	r3, r3, #8
 80224ce:	f886 9000 	strb.w	r9, [r6]
 80224d2:	f886 8001 	strb.w	r8, [r6, #1]
 80224d6:	70b3      	strb	r3, [r6, #2]
 80224d8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80224da:	3603      	adds	r6, #3
 80224dc:	449b      	add	fp, r3
 80224de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80224e0:	441c      	add	r4, r3
 80224e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224e4:	3b01      	subs	r3, #1
 80224e6:	930a      	str	r3, [sp, #40]	; 0x28
 80224e8:	e774      	b.n	80223d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80224ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80224ec:	449b      	add	fp, r3
 80224ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80224f0:	441c      	add	r4, r3
 80224f2:	9b06      	ldr	r3, [sp, #24]
 80224f4:	3b01      	subs	r3, #1
 80224f6:	9306      	str	r3, [sp, #24]
 80224f8:	9b07      	ldr	r3, [sp, #28]
 80224fa:	3303      	adds	r3, #3
 80224fc:	9307      	str	r3, [sp, #28]
 80224fe:	e74a      	b.n	8022396 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022500:	d024      	beq.n	802254c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022502:	9b06      	ldr	r3, [sp, #24]
 8022504:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022506:	3b01      	subs	r3, #1
 8022508:	fb00 b003 	mla	r0, r0, r3, fp
 802250c:	1400      	asrs	r0, r0, #16
 802250e:	f53f af5e 	bmi.w	80223ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022512:	3901      	subs	r1, #1
 8022514:	4288      	cmp	r0, r1
 8022516:	f6bf af5a 	bge.w	80223ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802251a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802251c:	fb01 4303 	mla	r3, r1, r3, r4
 8022520:	141b      	asrs	r3, r3, #16
 8022522:	f53f af54 	bmi.w	80223ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022526:	3a01      	subs	r2, #1
 8022528:	4293      	cmp	r3, r2
 802252a:	f6bf af50 	bge.w	80223ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802252e:	9b07      	ldr	r3, [sp, #28]
 8022530:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022534:	1cde      	adds	r6, r3, #3
 8022536:	f1be 0f00 	cmp.w	lr, #0
 802253a:	dc5f      	bgt.n	80225fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802253c:	9b06      	ldr	r3, [sp, #24]
 802253e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022542:	9b07      	ldr	r3, [sp, #28]
 8022544:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022548:	4423      	add	r3, r4
 802254a:	9307      	str	r3, [sp, #28]
 802254c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802254e:	2b00      	cmp	r3, #0
 8022550:	f340 80c5 	ble.w	80226de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022558:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802255a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802255e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022562:	eef0 6a48 	vmov.f32	s13, s16
 8022566:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802256a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802256e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022572:	ee16 ba90 	vmov	fp, s13
 8022576:	eef0 6a68 	vmov.f32	s13, s17
 802257a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802257e:	ee16 4a90 	vmov	r4, s13
 8022582:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022586:	ee69 7a27 	vmul.f32	s15, s18, s15
 802258a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802258e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022592:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022596:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802259a:	ee18 2a10 	vmov	r2, s16
 802259e:	eeb0 8a47 	vmov.f32	s16, s14
 80225a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80225a6:	ee18 2a90 	vmov	r2, s17
 80225aa:	932f      	str	r3, [sp, #188]	; 0xbc
 80225ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80225ae:	eef0 8a67 	vmov.f32	s17, s15
 80225b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80225b6:	9330      	str	r3, [sp, #192]	; 0xc0
 80225b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225bc:	3b01      	subs	r3, #1
 80225be:	9309      	str	r3, [sp, #36]	; 0x24
 80225c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80225c2:	bf08      	it	eq
 80225c4:	4613      	moveq	r3, r2
 80225c6:	9306      	str	r3, [sp, #24]
 80225c8:	e6d7      	b.n	802237a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80225ca:	f110 0c01 	adds.w	ip, r0, #1
 80225ce:	d483      	bmi.n	80224d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80225d0:	4563      	cmp	r3, ip
 80225d2:	db81      	blt.n	80224d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80225d4:	f115 0c01 	adds.w	ip, r5, #1
 80225d8:	f53f af7e 	bmi.w	80224d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80225dc:	4567      	cmp	r7, ip
 80225de:	f6ff af7b 	blt.w	80224d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80225e2:	b23f      	sxth	r7, r7
 80225e4:	b21b      	sxth	r3, r3
 80225e6:	9700      	str	r7, [sp, #0]
 80225e8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80225ec:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80225f0:	9a08      	ldr	r2, [sp, #32]
 80225f2:	4631      	mov	r1, r6
 80225f4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80225f6:	f7ff fdcf 	bl	8022198 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80225fa:	e76d      	b.n	80224d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80225fc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80225fe:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022602:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022606:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802260a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802260e:	1421      	asrs	r1, r4, #16
 8022610:	930a      	str	r3, [sp, #40]	; 0x28
 8022612:	fb0c 0101 	mla	r1, ip, r1, r0
 8022616:	9808      	ldr	r0, [sp, #32]
 8022618:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802261c:	1845      	adds	r5, r0, r1
 802261e:	5c40      	ldrb	r0, [r0, r1]
 8022620:	796f      	ldrb	r7, [r5, #5]
 8022622:	7869      	ldrb	r1, [r5, #1]
 8022624:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022628:	f895 a003 	ldrb.w	sl, [r5, #3]
 802262c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022630:	970c      	str	r7, [sp, #48]	; 0x30
 8022632:	b1a2      	cbz	r2, 802265e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8022634:	2703      	movs	r7, #3
 8022636:	f06f 0304 	mvn.w	r3, #4
 802263a:	3505      	adds	r5, #5
 802263c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022640:	eb05 070c 	add.w	r7, r5, ip
 8022644:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022648:	9513      	str	r5, [sp, #76]	; 0x4c
 802264a:	787d      	ldrb	r5, [r7, #1]
 802264c:	9515      	str	r5, [sp, #84]	; 0x54
 802264e:	78bd      	ldrb	r5, [r7, #2]
 8022650:	9517      	str	r5, [sp, #92]	; 0x5c
 8022652:	78fd      	ldrb	r5, [r7, #3]
 8022654:	9514      	str	r5, [sp, #80]	; 0x50
 8022656:	793d      	ldrb	r5, [r7, #4]
 8022658:	9516      	str	r5, [sp, #88]	; 0x58
 802265a:	797d      	ldrb	r5, [r7, #5]
 802265c:	9518      	str	r5, [sp, #96]	; 0x60
 802265e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022662:	b292      	uxth	r2, r2
 8022664:	3603      	adds	r6, #3
 8022666:	f10e 3eff 	add.w	lr, lr, #4294967295
 802266a:	fb03 f502 	mul.w	r5, r3, r2
 802266e:	011b      	lsls	r3, r3, #4
 8022670:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022674:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022678:	1b5b      	subs	r3, r3, r5
 802267a:	b292      	uxth	r2, r2
 802267c:	b29b      	uxth	r3, r3
 802267e:	1abf      	subs	r7, r7, r2
 8022680:	fb03 f909 	mul.w	r9, r3, r9
 8022684:	b2bf      	uxth	r7, r7
 8022686:	fb03 fa0a 	mul.w	sl, r3, sl
 802268a:	fb07 9901 	mla	r9, r7, r1, r9
 802268e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022690:	fb07 aa00 	mla	sl, r7, r0, sl
 8022694:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022696:	fb02 9901 	mla	r9, r2, r1, r9
 802269a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802269c:	fb02 aa00 	mla	sl, r2, r0, sl
 80226a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80226a2:	fb05 9901 	mla	r9, r5, r1, r9
 80226a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80226a8:	fb05 aa00 	mla	sl, r5, r0, sl
 80226ac:	434b      	muls	r3, r1
 80226ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80226b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80226b4:	fb07 3308 	mla	r3, r7, r8, r3
 80226b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80226bc:	f806 ac06 	strb.w	sl, [r6, #-6]
 80226c0:	fb02 3201 	mla	r2, r2, r1, r3
 80226c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80226c6:	f806 9c05 	strb.w	r9, [r6, #-5]
 80226ca:	fb05 2503 	mla	r5, r5, r3, r2
 80226ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80226d0:	122d      	asrs	r5, r5, #8
 80226d2:	449b      	add	fp, r3
 80226d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80226d6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80226da:	441c      	add	r4, r3
 80226dc:	e72b      	b.n	8022536 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80226de:	b01b      	add	sp, #108	; 0x6c
 80226e0:	ecbd 8b08 	vpop	{d8-d11}
 80226e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80226e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ec:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80226f0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80226f4:	fb04 5603 	mla	r6, r4, r3, r5
 80226f8:	2c00      	cmp	r4, #0
 80226fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80226fe:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022702:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022706:	db36      	blt.n	8022776 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022708:	45a6      	cmp	lr, r4
 802270a:	dd34      	ble.n	8022776 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 802270c:	2d00      	cmp	r5, #0
 802270e:	db30      	blt.n	8022772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022710:	42ab      	cmp	r3, r5
 8022712:	dd2e      	ble.n	8022772 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022714:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022718:	1c6e      	adds	r6, r5, #1
 802271a:	d42f      	bmi.n	802277c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 802271c:	42b3      	cmp	r3, r6
 802271e:	dd2d      	ble.n	802277c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022720:	b370      	cbz	r0, 8022780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8022722:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022726:	3401      	adds	r4, #1
 8022728:	d42e      	bmi.n	8022788 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802272a:	45a6      	cmp	lr, r4
 802272c:	dd2c      	ble.n	8022788 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802272e:	b377      	cbz	r7, 802278e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022730:	2d00      	cmp	r5, #0
 8022732:	db27      	blt.n	8022784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022734:	42ab      	cmp	r3, r5
 8022736:	dd25      	ble.n	8022784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022738:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802273c:	3501      	adds	r5, #1
 802273e:	d429      	bmi.n	8022794 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022740:	42ab      	cmp	r3, r5
 8022742:	dd27      	ble.n	8022794 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022744:	b340      	cbz	r0, 8022798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8022746:	3301      	adds	r3, #1
 8022748:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802274c:	280f      	cmp	r0, #15
 802274e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022752:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022756:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802275a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802275e:	d801      	bhi.n	8022764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022760:	2f0f      	cmp	r7, #15
 8022762:	d91b      	bls.n	802279c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022764:	4b89      	ldr	r3, [pc, #548]	; (802298c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8022766:	f240 1157 	movw	r1, #343	; 0x157
 802276a:	4a89      	ldr	r2, [pc, #548]	; (8022990 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802276c:	4889      	ldr	r0, [pc, #548]	; (8022994 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 802276e:	f003 fe9f 	bl	80264b0 <__assert_func>
 8022772:	2200      	movs	r2, #0
 8022774:	e7d0      	b.n	8022718 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8022776:	2600      	movs	r6, #0
 8022778:	4632      	mov	r2, r6
 802277a:	e7d4      	b.n	8022726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 802277c:	2600      	movs	r6, #0
 802277e:	e7d2      	b.n	8022726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022780:	4606      	mov	r6, r0
 8022782:	e7d0      	b.n	8022726 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022784:	2400      	movs	r4, #0
 8022786:	e7d9      	b.n	802273c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8022788:	2300      	movs	r3, #0
 802278a:	461c      	mov	r4, r3
 802278c:	e7de      	b.n	802274c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802278e:	463b      	mov	r3, r7
 8022790:	463c      	mov	r4, r7
 8022792:	e7db      	b.n	802274c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022794:	2300      	movs	r3, #0
 8022796:	e7d9      	b.n	802274c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022798:	4603      	mov	r3, r0
 802279a:	e7d7      	b.n	802274c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802279c:	b280      	uxth	r0, r0
 802279e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80227a2:	b2bf      	uxth	r7, r7
 80227a4:	fb00 fe07 	mul.w	lr, r0, r7
 80227a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80227ac:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80227b0:	eba0 0c0e 	sub.w	ip, r0, lr
 80227b4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80227b8:	b2bf      	uxth	r7, r7
 80227ba:	fa1f fc8c 	uxth.w	ip, ip
 80227be:	eba5 0507 	sub.w	r5, r5, r7
 80227c2:	fb0c f00a 	mul.w	r0, ip, sl
 80227c6:	b2ad      	uxth	r5, r5
 80227c8:	fb05 000b 	mla	r0, r5, fp, r0
 80227cc:	fb07 0009 	mla	r0, r7, r9, r0
 80227d0:	fb0e 0008 	mla	r0, lr, r8, r0
 80227d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80227d8:	9001      	str	r0, [sp, #4]
 80227da:	d018      	beq.n	802280e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80227dc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80227e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80227e4:	fb0b f000 	mul.w	r0, fp, r0
 80227e8:	fb0b fb02 	mul.w	fp, fp, r2
 80227ec:	0a02      	lsrs	r2, r0, #8
 80227ee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80227f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80227f6:	4402      	add	r2, r0
 80227f8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80227fc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022800:	0a12      	lsrs	r2, r2, #8
 8022802:	0a00      	lsrs	r0, r0, #8
 8022804:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022808:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802280c:	4302      	orrs	r2, r0
 802280e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022812:	d01a      	beq.n	802284a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8022814:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022818:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802281c:	fb0a f000 	mul.w	r0, sl, r0
 8022820:	fb0a fa06 	mul.w	sl, sl, r6
 8022824:	0a06      	lsrs	r6, r0, #8
 8022826:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802282a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802282e:	4406      	add	r6, r0
 8022830:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022834:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022838:	0a36      	lsrs	r6, r6, #8
 802283a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802283e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022842:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022846:	ea46 060a 	orr.w	r6, r6, sl
 802284a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802284e:	d01b      	beq.n	8022888 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8022850:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022854:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022858:	fb09 fa0a 	mul.w	sl, r9, sl
 802285c:	fb09 f004 	mul.w	r0, r9, r4
 8022860:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022864:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022868:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802286c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022870:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022874:	4454      	add	r4, sl
 8022876:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802287a:	0a24      	lsrs	r4, r4, #8
 802287c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022880:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022884:	ea44 0409 	orr.w	r4, r4, r9
 8022888:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802288c:	d01b      	beq.n	80228c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 802288e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022896:	fb08 f909 	mul.w	r9, r8, r9
 802289a:	fb08 f003 	mul.w	r0, r8, r3
 802289e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80228a2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80228a6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80228aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80228ae:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80228b2:	444b      	add	r3, r9
 80228b4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80228b8:	0a1b      	lsrs	r3, r3, #8
 80228ba:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80228be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80228c2:	ea43 0308 	orr.w	r3, r3, r8
 80228c6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80228ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80228ce:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80228d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80228d6:	fb0c f000 	mul.w	r0, ip, r0
 80228da:	fb0c f606 	mul.w	r6, ip, r6
 80228de:	fb05 0808 	mla	r8, r5, r8, r0
 80228e2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80228e6:	fb05 6502 	mla	r5, r5, r2, r6
 80228ea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80228ee:	fb07 8800 	mla	r8, r7, r0, r8
 80228f2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80228f6:	fb07 5704 	mla	r7, r7, r4, r5
 80228fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228fe:	fb0e 8000 	mla	r0, lr, r0, r8
 8022902:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022906:	9b01      	ldr	r3, [sp, #4]
 8022908:	0a00      	lsrs	r0, r0, #8
 802290a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802290e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022912:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022916:	ea40 0e0e 	orr.w	lr, r0, lr
 802291a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802291e:	b280      	uxth	r0, r0
 8022920:	fa5f f48e 	uxtb.w	r4, lr
 8022924:	4343      	muls	r3, r0
 8022926:	fb14 f400 	smulbb	r4, r4, r0
 802292a:	1c5a      	adds	r2, r3, #1
 802292c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022930:	780b      	ldrb	r3, [r1, #0]
 8022932:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022936:	b2d2      	uxtb	r2, r2
 8022938:	fb03 4302 	mla	r3, r3, r2, r4
 802293c:	b29b      	uxth	r3, r3
 802293e:	1c5c      	adds	r4, r3, #1
 8022940:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022944:	784c      	ldrb	r4, [r1, #1]
 8022946:	fb14 f402 	smulbb	r4, r4, r2
 802294a:	121b      	asrs	r3, r3, #8
 802294c:	700b      	strb	r3, [r1, #0]
 802294e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022952:	fb03 4300 	mla	r3, r3, r0, r4
 8022956:	b29b      	uxth	r3, r3
 8022958:	1c5c      	adds	r4, r3, #1
 802295a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802295e:	121b      	asrs	r3, r3, #8
 8022960:	704b      	strb	r3, [r1, #1]
 8022962:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022966:	f891 e002 	ldrb.w	lr, [r1, #2]
 802296a:	fb1e fe02 	smulbb	lr, lr, r2
 802296e:	fb03 ee00 	mla	lr, r3, r0, lr
 8022972:	fa1f fe8e 	uxth.w	lr, lr
 8022976:	f10e 0301 	add.w	r3, lr, #1
 802297a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802297e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022982:	f881 e002 	strb.w	lr, [r1, #2]
 8022986:	b003      	add	sp, #12
 8022988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802298c:	0802e527 	.word	0x0802e527
 8022990:	0802ea8f 	.word	0x0802ea8f
 8022994:	0802e5f0 	.word	0x0802e5f0

08022998 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802299c:	ed2d 8b08 	vpush	{d8-d11}
 80229a0:	b09d      	sub	sp, #116	; 0x74
 80229a2:	eeb0 aa40 	vmov.f32	s20, s0
 80229a6:	eef0 9a60 	vmov.f32	s19, s1
 80229aa:	9219      	str	r2, [sp, #100]	; 0x64
 80229ac:	eeb0 9a41 	vmov.f32	s18, s2
 80229b0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80229b2:	eeb0 8a62 	vmov.f32	s16, s5
 80229b6:	9307      	str	r3, [sp, #28]
 80229b8:	eef0 8a43 	vmov.f32	s17, s6
 80229bc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80229c0:	eef0 ba44 	vmov.f32	s23, s8
 80229c4:	901b      	str	r0, [sp, #108]	; 0x6c
 80229c6:	eeb0 ba64 	vmov.f32	s22, s9
 80229ca:	931a      	str	r3, [sp, #104]	; 0x68
 80229cc:	eef0 aa45 	vmov.f32	s21, s10
 80229d0:	6850      	ldr	r0, [r2, #4]
 80229d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80229d4:	6812      	ldr	r2, [r2, #0]
 80229d6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80229da:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 80229de:	fb00 1303 	mla	r3, r0, r3, r1
 80229e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229e6:	18d3      	adds	r3, r2, r3
 80229e8:	930a      	str	r3, [sp, #40]	; 0x28
 80229ea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	9310      	str	r3, [sp, #64]	; 0x40
 80229f0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80229f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80229f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	dc03      	bgt.n	8022a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80229fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	f340 8368 	ble.w	80230d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022a04:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022a06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022a0e:	1e48      	subs	r0, r1, #1
 8022a10:	1e57      	subs	r7, r2, #1
 8022a12:	9b07      	ldr	r3, [sp, #28]
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	f340 8187 	ble.w	8022d28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022a1a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022a1e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022a22:	d406      	bmi.n	8022a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022a24:	4584      	cmp	ip, r0
 8022a26:	da04      	bge.n	8022a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	db02      	blt.n	8022a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022a2c:	42bb      	cmp	r3, r7
 8022a2e:	f2c0 817c 	blt.w	8022d2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022a32:	f11c 0c01 	adds.w	ip, ip, #1
 8022a36:	f100 816c 	bmi.w	8022d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022a3a:	4561      	cmp	r1, ip
 8022a3c:	f2c0 8169 	blt.w	8022d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022a40:	3301      	adds	r3, #1
 8022a42:	f100 8166 	bmi.w	8022d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022a46:	429a      	cmp	r2, r3
 8022a48:	f2c0 8163 	blt.w	8022d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022a4c:	9b07      	ldr	r3, [sp, #28]
 8022a4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022a50:	9318      	str	r3, [sp, #96]	; 0x60
 8022a52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022a54:	2b00      	cmp	r3, #0
 8022a56:	f340 8186 	ble.w	8022d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022a5a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022a5c:	142a      	asrs	r2, r5, #16
 8022a5e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022a62:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022a66:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022a6a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022a6e:	f100 81cb 	bmi.w	8022e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022a72:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022a76:	4542      	cmp	r2, r8
 8022a78:	f280 81c6 	bge.w	8022e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022a7c:	2800      	cmp	r0, #0
 8022a7e:	f2c0 81c3 	blt.w	8022e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022a82:	f103 38ff 	add.w	r8, r3, #4294967295
 8022a86:	4540      	cmp	r0, r8
 8022a88:	f280 81be 	bge.w	8022e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022a8c:	fa0f f38e 	sxth.w	r3, lr
 8022a90:	fb00 2203 	mla	r2, r0, r3, r2
 8022a94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022a96:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022a9a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022a9e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022aa2:	2900      	cmp	r1, #0
 8022aa4:	f000 81a6 	beq.w	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8022aa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022aac:	900c      	str	r0, [sp, #48]	; 0x30
 8022aae:	0e00      	lsrs	r0, r0, #24
 8022ab0:	9013      	str	r0, [sp, #76]	; 0x4c
 8022ab2:	f1bc 0f00 	cmp.w	ip, #0
 8022ab6:	d00f      	beq.n	8022ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022ab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022abc:	3b01      	subs	r3, #1
 8022abe:	009b      	lsls	r3, r3, #2
 8022ac0:	3304      	adds	r3, #4
 8022ac2:	eb08 0003 	add.w	r0, r8, r3
 8022ac6:	f858 3003 	ldr.w	r3, [r8, r3]
 8022aca:	9308      	str	r3, [sp, #32]
 8022acc:	0e1b      	lsrs	r3, r3, #24
 8022ace:	9311      	str	r3, [sp, #68]	; 0x44
 8022ad0:	6843      	ldr	r3, [r0, #4]
 8022ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8022ad4:	0e1b      	lsrs	r3, r3, #24
 8022ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8022ad8:	b289      	uxth	r1, r1
 8022ada:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022adc:	fa1f fc8c 	uxth.w	ip, ip
 8022ae0:	0108      	lsls	r0, r1, #4
 8022ae2:	fb01 f90c 	mul.w	r9, r1, ip
 8022ae6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022aea:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8022aee:	eba0 0809 	sub.w	r8, r0, r9
 8022af2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022af4:	fa1f f18c 	uxth.w	r1, ip
 8022af8:	fa1f f888 	uxth.w	r8, r8
 8022afc:	1a5b      	subs	r3, r3, r1
 8022afe:	fb08 f000 	mul.w	r0, r8, r0
 8022b02:	b29b      	uxth	r3, r3
 8022b04:	fb03 000e 	mla	r0, r3, lr, r0
 8022b08:	fb01 0004 	mla	r0, r1, r4, r0
 8022b0c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022b0e:	fb09 0004 	mla	r0, r9, r4, r0
 8022b12:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022b16:	2800      	cmp	r0, #0
 8022b18:	f000 80f2 	beq.w	8022d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022b1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b20:	d01b      	beq.n	8022b5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022b22:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022b26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022b2a:	fb0e fa0a 	mul.w	sl, lr, sl
 8022b2e:	fb0e fe02 	mul.w	lr, lr, r2
 8022b32:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022b36:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022b3a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022b3e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022b42:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022b46:	4452      	add	r2, sl
 8022b48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b4c:	0a12      	lsrs	r2, r2, #8
 8022b4e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022b52:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022b56:	ea42 020c 	orr.w	r2, r2, ip
 8022b5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b5c:	2cff      	cmp	r4, #255	; 0xff
 8022b5e:	d021      	beq.n	8022ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022b60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022b62:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022b66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b68:	fb04 fb0b 	mul.w	fp, r4, fp
 8022b6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022b6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022b72:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022b78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022b80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022b88:	44de      	add	lr, fp
 8022b8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022b9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b9e:	ea4e 040a 	orr.w	r4, lr, sl
 8022ba2:	940c      	str	r4, [sp, #48]	; 0x30
 8022ba4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022ba6:	2cff      	cmp	r4, #255	; 0xff
 8022ba8:	d021      	beq.n	8022bee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8022baa:	9c08      	ldr	r4, [sp, #32]
 8022bac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022bb0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022bb2:	fb04 fb0b 	mul.w	fp, r4, fp
 8022bb6:	9c08      	ldr	r4, [sp, #32]
 8022bb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022bbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022bbe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022bc2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022bc6:	fb04 fa0a 	mul.w	sl, r4, sl
 8022bca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022bce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022bd2:	44de      	add	lr, fp
 8022bd4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022bd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022bdc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022be0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022be4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022be8:	ea4e 040a 	orr.w	r4, lr, sl
 8022bec:	9408      	str	r4, [sp, #32]
 8022bee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022bf0:	2cff      	cmp	r4, #255	; 0xff
 8022bf2:	d021      	beq.n	8022c38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022bf4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022bf6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022bfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022bfc:	fb04 fb0b 	mul.w	fp, r4, fp
 8022c00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022c02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022c06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022c08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022c0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022c10:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022c1c:	44de      	add	lr, fp
 8022c1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022c22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c32:	ea4e 040a 	orr.w	r4, lr, sl
 8022c36:	940d      	str	r4, [sp, #52]	; 0x34
 8022c38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022c3a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022c3e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022c42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022c46:	9c08      	ldr	r4, [sp, #32]
 8022c48:	fb08 fc0c 	mul.w	ip, r8, ip
 8022c4c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022c50:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022c54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022c56:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022c5a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022c5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022c60:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022c64:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022c68:	fb08 f80e 	mul.w	r8, r8, lr
 8022c6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c70:	fb03 8202 	mla	r2, r3, r2, r8
 8022c74:	9b08      	ldr	r3, [sp, #32]
 8022c76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c7a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8022c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c80:	fb01 220a 	mla	r2, r1, sl, r2
 8022c84:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8022c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c8a:	fb09 2901 	mla	r9, r9, r1, r2
 8022c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022c90:	4343      	muls	r3, r0
 8022c92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c96:	1c58      	adds	r0, r3, #1
 8022c98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022c9c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022ca0:	783b      	ldrb	r3, [r7, #0]
 8022ca2:	ea4c 0c09 	orr.w	ip, ip, r9
 8022ca6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022caa:	fa5f f28c 	uxtb.w	r2, ip
 8022cae:	b2c0      	uxtb	r0, r0
 8022cb0:	fb12 f201 	smulbb	r2, r2, r1
 8022cb4:	fb03 2300 	mla	r3, r3, r0, r2
 8022cb8:	b29b      	uxth	r3, r3
 8022cba:	1c5a      	adds	r2, r3, #1
 8022cbc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022cc0:	787a      	ldrb	r2, [r7, #1]
 8022cc2:	fb12 f200 	smulbb	r2, r2, r0
 8022cc6:	121b      	asrs	r3, r3, #8
 8022cc8:	703b      	strb	r3, [r7, #0]
 8022cca:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022cce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022cd2:	fb03 2301 	mla	r3, r3, r1, r2
 8022cd6:	b29b      	uxth	r3, r3
 8022cd8:	1c5a      	adds	r2, r3, #1
 8022cda:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022cde:	121b      	asrs	r3, r3, #8
 8022ce0:	707b      	strb	r3, [r7, #1]
 8022ce2:	78bb      	ldrb	r3, [r7, #2]
 8022ce4:	fb13 f000 	smulbb	r0, r3, r0
 8022ce8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022cec:	fa1f fc8c 	uxth.w	ip, ip
 8022cf0:	f10c 0301 	add.w	r3, ip, #1
 8022cf4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022cf8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022cfc:	f887 c002 	strb.w	ip, [r7, #2]
 8022d00:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022d02:	3703      	adds	r7, #3
 8022d04:	441d      	add	r5, r3
 8022d06:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022d08:	441e      	add	r6, r3
 8022d0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d0c:	3b01      	subs	r3, #1
 8022d0e:	9318      	str	r3, [sp, #96]	; 0x60
 8022d10:	e69f      	b.n	8022a52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022d12:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022d14:	441d      	add	r5, r3
 8022d16:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022d18:	441e      	add	r6, r3
 8022d1a:	9b07      	ldr	r3, [sp, #28]
 8022d1c:	3b01      	subs	r3, #1
 8022d1e:	9307      	str	r3, [sp, #28]
 8022d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d22:	3303      	adds	r3, #3
 8022d24:	930a      	str	r3, [sp, #40]	; 0x28
 8022d26:	e674      	b.n	8022a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d28:	d025      	beq.n	8022d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8022d2a:	9b07      	ldr	r3, [sp, #28]
 8022d2c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8022d2e:	3b01      	subs	r3, #1
 8022d30:	fb00 5003 	mla	r0, r0, r3, r5
 8022d34:	1400      	asrs	r0, r0, #16
 8022d36:	f53f ae89 	bmi.w	8022a4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022d3a:	3901      	subs	r1, #1
 8022d3c:	4288      	cmp	r0, r1
 8022d3e:	f6bf ae85 	bge.w	8022a4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022d42:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8022d44:	fb01 6303 	mla	r3, r1, r3, r6
 8022d48:	141b      	asrs	r3, r3, #16
 8022d4a:	f53f ae7f 	bmi.w	8022a4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022d4e:	3a01      	subs	r2, #1
 8022d50:	4293      	cmp	r3, r2
 8022d52:	f6bf ae7b 	bge.w	8022a4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d58:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022d5c:	f103 0e03 	add.w	lr, r3, #3
 8022d60:	f1bb 0f00 	cmp.w	fp, #0
 8022d64:	dc6e      	bgt.n	8022e44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8022d66:	9b07      	ldr	r3, [sp, #28]
 8022d68:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022d72:	4423      	add	r3, r4
 8022d74:	930a      	str	r3, [sp, #40]	; 0x28
 8022d76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	f340 81ab 	ble.w	80230d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022d84:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022d88:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022d8c:	eef0 6a48 	vmov.f32	s13, s16
 8022d90:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022d94:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022d98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d9c:	ee16 5a90 	vmov	r5, s13
 8022da0:	eef0 6a68 	vmov.f32	s13, s17
 8022da4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022da8:	ee16 6a90 	vmov	r6, s13
 8022dac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022db0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022db4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022db8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022dbc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022dc0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022dc4:	ee18 2a10 	vmov	r2, s16
 8022dc8:	eeb0 8a47 	vmov.f32	s16, s14
 8022dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dd0:	ee18 2a90 	vmov	r2, s17
 8022dd4:	9331      	str	r3, [sp, #196]	; 0xc4
 8022dd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022dd8:	eef0 8a67 	vmov.f32	s17, s15
 8022ddc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022de0:	9332      	str	r3, [sp, #200]	; 0xc8
 8022de2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022de4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022de6:	3b01      	subs	r3, #1
 8022de8:	9317      	str	r3, [sp, #92]	; 0x5c
 8022dea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022dec:	bf08      	it	eq
 8022dee:	4613      	moveq	r3, r2
 8022df0:	9307      	str	r3, [sp, #28]
 8022df2:	e600      	b.n	80229f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022df4:	f1bc 0f00 	cmp.w	ip, #0
 8022df8:	f43f ae6e 	beq.w	8022ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022dfc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022e00:	9308      	str	r3, [sp, #32]
 8022e02:	0e1b      	lsrs	r3, r3, #24
 8022e04:	9311      	str	r3, [sp, #68]	; 0x44
 8022e06:	e667      	b.n	8022ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022e08:	f112 0801 	adds.w	r8, r2, #1
 8022e0c:	f53f af78 	bmi.w	8022d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022e10:	45c6      	cmp	lr, r8
 8022e12:	f6ff af75 	blt.w	8022d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022e16:	f110 0801 	adds.w	r8, r0, #1
 8022e1a:	f53f af71 	bmi.w	8022d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022e1e:	4543      	cmp	r3, r8
 8022e20:	f6ff af6e 	blt.w	8022d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022e24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022e26:	b21b      	sxth	r3, r3
 8022e28:	9201      	str	r2, [sp, #4]
 8022e2a:	9300      	str	r3, [sp, #0]
 8022e2c:	fa0f f38e 	sxth.w	r3, lr
 8022e30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e36:	e9cd c404 	strd	ip, r4, [sp, #16]
 8022e3a:	4639      	mov	r1, r7
 8022e3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022e3e:	f7ff fc53 	bl	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022e42:	e75d      	b.n	8022d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022e44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022e46:	142f      	asrs	r7, r5, #16
 8022e48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e4a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022e4e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8022e52:	1433      	asrs	r3, r6, #16
 8022e54:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022e58:	fb02 7303 	mla	r3, r2, r3, r7
 8022e5c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8022e60:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022e64:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022e68:	2900      	cmp	r1, #0
 8022e6a:	f000 812a 	beq.w	80230c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8022e6e:	687c      	ldr	r4, [r7, #4]
 8022e70:	940e      	str	r4, [sp, #56]	; 0x38
 8022e72:	0e24      	lsrs	r4, r4, #24
 8022e74:	9415      	str	r4, [sp, #84]	; 0x54
 8022e76:	b178      	cbz	r0, 8022e98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022e78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8022e7c:	3a01      	subs	r2, #1
 8022e7e:	0092      	lsls	r2, r2, #2
 8022e80:	3204      	adds	r2, #4
 8022e82:	eb07 0802 	add.w	r8, r7, r2
 8022e86:	58ba      	ldr	r2, [r7, r2]
 8022e88:	9209      	str	r2, [sp, #36]	; 0x24
 8022e8a:	0e12      	lsrs	r2, r2, #24
 8022e8c:	9212      	str	r2, [sp, #72]	; 0x48
 8022e8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8022e92:	920f      	str	r2, [sp, #60]	; 0x3c
 8022e94:	0e12      	lsrs	r2, r2, #24
 8022e96:	9216      	str	r2, [sp, #88]	; 0x58
 8022e98:	b289      	uxth	r1, r1
 8022e9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e9c:	b280      	uxth	r0, r0
 8022e9e:	fb01 f900 	mul.w	r9, r1, r0
 8022ea2:	0109      	lsls	r1, r1, #4
 8022ea4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022ea8:	eba1 0809 	sub.w	r8, r1, r9
 8022eac:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022eb0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022eb2:	b280      	uxth	r0, r0
 8022eb4:	fa1f f888 	uxth.w	r8, r8
 8022eb8:	1a12      	subs	r2, r2, r0
 8022eba:	fb08 f101 	mul.w	r1, r8, r1
 8022ebe:	b292      	uxth	r2, r2
 8022ec0:	fb02 110c 	mla	r1, r2, ip, r1
 8022ec4:	fb00 1104 	mla	r1, r0, r4, r1
 8022ec8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022eca:	fb09 1104 	mla	r1, r9, r4, r1
 8022ece:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022ed2:	2900      	cmp	r1, #0
 8022ed4:	f000 80ec 	beq.w	80230b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022ed8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022edc:	d019      	beq.n	8022f12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8022ede:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ee6:	fb0c fa0a 	mul.w	sl, ip, sl
 8022eea:	fb0c fc03 	mul.w	ip, ip, r3
 8022eee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022ef2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022ef6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022efa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022efe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022f02:	4453      	add	r3, sl
 8022f04:	0a3f      	lsrs	r7, r7, #8
 8022f06:	0a1b      	lsrs	r3, r3, #8
 8022f08:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f10:	433b      	orrs	r3, r7
 8022f12:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f14:	2cff      	cmp	r4, #255	; 0xff
 8022f16:	d020      	beq.n	8022f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8022f18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f1a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022f1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f20:	4367      	muls	r7, r4
 8022f22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022f24:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022f28:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022f2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f2e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022f32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f36:	fb04 fa0a 	mul.w	sl, r4, sl
 8022f3a:	44bc      	add	ip, r7
 8022f3c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022f40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f44:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022f48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f54:	ea4c 040a 	orr.w	r4, ip, sl
 8022f58:	940e      	str	r4, [sp, #56]	; 0x38
 8022f5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022f5c:	2cff      	cmp	r4, #255	; 0xff
 8022f5e:	d020      	beq.n	8022fa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8022f60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022f62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022f66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022f68:	4367      	muls	r7, r4
 8022f6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022f6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022f70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022f74:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022f76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022f7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022f82:	44bc      	add	ip, r7
 8022f84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022f88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022f90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f9c:	ea4c 040a 	orr.w	r4, ip, sl
 8022fa0:	9409      	str	r4, [sp, #36]	; 0x24
 8022fa2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022fa4:	2cff      	cmp	r4, #255	; 0xff
 8022fa6:	d020      	beq.n	8022fea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8022fa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022faa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022fae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022fb0:	4367      	muls	r7, r4
 8022fb2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022fb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022fb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022fbc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022fbe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022fc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022fc6:	fb04 fa0a 	mul.w	sl, r4, sl
 8022fca:	44bc      	add	ip, r7
 8022fcc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022fd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022fd4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022fd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022fdc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022fe0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fe4:	ea4c 040a 	orr.w	r4, ip, sl
 8022fe8:	940f      	str	r4, [sp, #60]	; 0x3c
 8022fea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022fec:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022ff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022ff4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022ff8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022ffa:	fb08 f707 	mul.w	r7, r8, r7
 8022ffe:	fb02 770c 	mla	r7, r2, ip, r7
 8023002:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023006:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023008:	fb00 770c 	mla	r7, r0, ip, r7
 802300c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023010:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023012:	fb09 770c 	mla	r7, r9, ip, r7
 8023016:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802301a:	fb08 f80c 	mul.w	r8, r8, ip
 802301e:	0a3f      	lsrs	r7, r7, #8
 8023020:	fb02 8303 	mla	r3, r2, r3, r8
 8023024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023026:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802302a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802302e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023030:	fb00 330a 	mla	r3, r0, sl, r3
 8023034:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023038:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802303a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802303e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023040:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023044:	434b      	muls	r3, r1
 8023046:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802304a:	1c59      	adds	r1, r3, #1
 802304c:	ea47 070c 	orr.w	r7, r7, ip
 8023050:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023054:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023058:	b2fa      	uxtb	r2, r7
 802305a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802305e:	fb12 f200 	smulbb	r2, r2, r0
 8023062:	b2c9      	uxtb	r1, r1
 8023064:	fb03 2301 	mla	r3, r3, r1, r2
 8023068:	b29b      	uxth	r3, r3
 802306a:	1c5a      	adds	r2, r3, #1
 802306c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023070:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023074:	fb12 f201 	smulbb	r2, r2, r1
 8023078:	121b      	asrs	r3, r3, #8
 802307a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802307e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023082:	0c3f      	lsrs	r7, r7, #16
 8023084:	fb03 2300 	mla	r3, r3, r0, r2
 8023088:	b29b      	uxth	r3, r3
 802308a:	1c5a      	adds	r2, r3, #1
 802308c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023090:	121b      	asrs	r3, r3, #8
 8023092:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023096:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802309a:	fb13 f101 	smulbb	r1, r3, r1
 802309e:	fb07 1700 	mla	r7, r7, r0, r1
 80230a2:	b2bf      	uxth	r7, r7
 80230a4:	1c79      	adds	r1, r7, #1
 80230a6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80230aa:	123f      	asrs	r7, r7, #8
 80230ac:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80230b0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80230b2:	f10e 0e03 	add.w	lr, lr, #3
 80230b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80230ba:	441d      	add	r5, r3
 80230bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80230be:	441e      	add	r6, r3
 80230c0:	e64e      	b.n	8022d60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80230c2:	2800      	cmp	r0, #0
 80230c4:	f43f aee8 	beq.w	8022e98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80230c8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80230cc:	9209      	str	r2, [sp, #36]	; 0x24
 80230ce:	0e12      	lsrs	r2, r2, #24
 80230d0:	9212      	str	r2, [sp, #72]	; 0x48
 80230d2:	e6e1      	b.n	8022e98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80230d4:	b01d      	add	sp, #116	; 0x74
 80230d6:	ecbd 8b08 	vpop	{d8-d11}
 80230da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080230e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80230e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230e4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80230e8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80230ec:	fb04 5603 	mla	r6, r4, r3, r5
 80230f0:	2c00      	cmp	r4, #0
 80230f2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80230f6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80230fa:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80230fe:	db36      	blt.n	802316e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023100:	45a6      	cmp	lr, r4
 8023102:	dd34      	ble.n	802316e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023104:	2d00      	cmp	r5, #0
 8023106:	db30      	blt.n	802316a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8023108:	42ab      	cmp	r3, r5
 802310a:	dd2e      	ble.n	802316a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 802310c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023110:	1c6e      	adds	r6, r5, #1
 8023112:	d42f      	bmi.n	8023174 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023114:	42b3      	cmp	r3, r6
 8023116:	dd2d      	ble.n	8023174 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023118:	b370      	cbz	r0, 8023178 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 802311a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802311e:	3401      	adds	r4, #1
 8023120:	d42e      	bmi.n	8023180 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023122:	45a6      	cmp	lr, r4
 8023124:	dd2c      	ble.n	8023180 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023126:	b377      	cbz	r7, 8023186 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8023128:	2d00      	cmp	r5, #0
 802312a:	db27      	blt.n	802317c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 802312c:	42ab      	cmp	r3, r5
 802312e:	dd25      	ble.n	802317c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8023130:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023134:	3501      	adds	r5, #1
 8023136:	d429      	bmi.n	802318c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8023138:	42ab      	cmp	r3, r5
 802313a:	dd27      	ble.n	802318c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 802313c:	b340      	cbz	r0, 8023190 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 802313e:	3301      	adds	r3, #1
 8023140:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8023144:	280f      	cmp	r0, #15
 8023146:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802314a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802314e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023152:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023156:	d801      	bhi.n	802315c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8023158:	2f0f      	cmp	r7, #15
 802315a:	d91b      	bls.n	8023194 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 802315c:	4b7e      	ldr	r3, [pc, #504]	; (8023358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 802315e:	f240 1157 	movw	r1, #343	; 0x157
 8023162:	4a7e      	ldr	r2, [pc, #504]	; (802335c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8023164:	487e      	ldr	r0, [pc, #504]	; (8023360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8023166:	f003 f9a3 	bl	80264b0 <__assert_func>
 802316a:	2200      	movs	r2, #0
 802316c:	e7d0      	b.n	8023110 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 802316e:	2600      	movs	r6, #0
 8023170:	4632      	mov	r2, r6
 8023172:	e7d4      	b.n	802311e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8023174:	2600      	movs	r6, #0
 8023176:	e7d2      	b.n	802311e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8023178:	4606      	mov	r6, r0
 802317a:	e7d0      	b.n	802311e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 802317c:	2400      	movs	r4, #0
 802317e:	e7d9      	b.n	8023134 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8023180:	2300      	movs	r3, #0
 8023182:	461c      	mov	r4, r3
 8023184:	e7de      	b.n	8023144 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8023186:	463b      	mov	r3, r7
 8023188:	463c      	mov	r4, r7
 802318a:	e7db      	b.n	8023144 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 802318c:	2300      	movs	r3, #0
 802318e:	e7d9      	b.n	8023144 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8023190:	4603      	mov	r3, r0
 8023192:	e7d7      	b.n	8023144 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8023194:	b280      	uxth	r0, r0
 8023196:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802319a:	b2bf      	uxth	r7, r7
 802319c:	fb00 fe07 	mul.w	lr, r0, r7
 80231a0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80231a4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80231a8:	eba0 0c0e 	sub.w	ip, r0, lr
 80231ac:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80231b0:	b2bf      	uxth	r7, r7
 80231b2:	fa1f fc8c 	uxth.w	ip, ip
 80231b6:	eba0 0507 	sub.w	r5, r0, r7
 80231ba:	fb0c f00a 	mul.w	r0, ip, sl
 80231be:	b2ad      	uxth	r5, r5
 80231c0:	fb05 000b 	mla	r0, r5, fp, r0
 80231c4:	fb07 0009 	mla	r0, r7, r9, r0
 80231c8:	fb0e 0008 	mla	r0, lr, r8, r0
 80231cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80231d0:	9001      	str	r0, [sp, #4]
 80231d2:	d018      	beq.n	8023206 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80231d4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80231d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80231dc:	fb0b f000 	mul.w	r0, fp, r0
 80231e0:	fb0b fb02 	mul.w	fp, fp, r2
 80231e4:	0a02      	lsrs	r2, r0, #8
 80231e6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80231ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80231ee:	4402      	add	r2, r0
 80231f0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80231f4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80231f8:	0a12      	lsrs	r2, r2, #8
 80231fa:	0a00      	lsrs	r0, r0, #8
 80231fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023200:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023204:	4302      	orrs	r2, r0
 8023206:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802320a:	d01a      	beq.n	8023242 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 802320c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023210:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023214:	fb0a f000 	mul.w	r0, sl, r0
 8023218:	fb0a fa06 	mul.w	sl, sl, r6
 802321c:	0a06      	lsrs	r6, r0, #8
 802321e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023222:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023226:	4406      	add	r6, r0
 8023228:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802322c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023230:	0a36      	lsrs	r6, r6, #8
 8023232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023236:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802323a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802323e:	ea46 060a 	orr.w	r6, r6, sl
 8023242:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023246:	d01b      	beq.n	8023280 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8023248:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802324c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023250:	fb09 fa0a 	mul.w	sl, r9, sl
 8023254:	fb09 f004 	mul.w	r0, r9, r4
 8023258:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802325c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023260:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8023264:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023268:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802326c:	4454      	add	r4, sl
 802326e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023272:	0a24      	lsrs	r4, r4, #8
 8023274:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023278:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802327c:	ea44 0409 	orr.w	r4, r4, r9
 8023280:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023284:	d01b      	beq.n	80232be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8023286:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802328a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802328e:	fb08 f909 	mul.w	r9, r8, r9
 8023292:	fb08 f003 	mul.w	r0, r8, r3
 8023296:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802329a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802329e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80232a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80232a6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80232aa:	444b      	add	r3, r9
 80232ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80232b0:	0a1b      	lsrs	r3, r3, #8
 80232b2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80232b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80232ba:	ea43 0308 	orr.w	r3, r3, r8
 80232be:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80232c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80232c6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80232ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80232ce:	fb0c f000 	mul.w	r0, ip, r0
 80232d2:	fb0c f606 	mul.w	r6, ip, r6
 80232d6:	fb05 0808 	mla	r8, r5, r8, r0
 80232da:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80232de:	fb05 6502 	mla	r5, r5, r2, r6
 80232e2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80232e6:	fb07 8800 	mla	r8, r7, r0, r8
 80232ea:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80232ee:	fb07 5704 	mla	r7, r7, r4, r5
 80232f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232f6:	fb0e 8000 	mla	r0, lr, r0, r8
 80232fa:	780a      	ldrb	r2, [r1, #0]
 80232fc:	fb0e 7e03 	mla	lr, lr, r3, r7
 8023300:	9b01      	ldr	r3, [sp, #4]
 8023302:	0a00      	lsrs	r0, r0, #8
 8023304:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023308:	43db      	mvns	r3, r3
 802330a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802330e:	b2db      	uxtb	r3, r3
 8023310:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023314:	ea40 0e0e 	orr.w	lr, r0, lr
 8023318:	fb02 f003 	mul.w	r0, r2, r3
 802331c:	1c42      	adds	r2, r0, #1
 802331e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023322:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023326:	700a      	strb	r2, [r1, #0]
 8023328:	784a      	ldrb	r2, [r1, #1]
 802332a:	435a      	muls	r2, r3
 802332c:	1c50      	adds	r0, r2, #1
 802332e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023332:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023336:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802333a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802333e:	704a      	strb	r2, [r1, #1]
 8023340:	788a      	ldrb	r2, [r1, #2]
 8023342:	4353      	muls	r3, r2
 8023344:	1c5a      	adds	r2, r3, #1
 8023346:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802334a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802334e:	f881 e002 	strb.w	lr, [r1, #2]
 8023352:	b003      	add	sp, #12
 8023354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023358:	0802e527 	.word	0x0802e527
 802335c:	0802ea8f 	.word	0x0802ea8f
 8023360:	0802e5f0 	.word	0x0802e5f0

08023364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023368:	ed2d 8b08 	vpush	{d8-d11}
 802336c:	b099      	sub	sp, #100	; 0x64
 802336e:	eeb0 aa40 	vmov.f32	s20, s0
 8023372:	eef0 9a60 	vmov.f32	s19, s1
 8023376:	9017      	str	r0, [sp, #92]	; 0x5c
 8023378:	eeb0 9a41 	vmov.f32	s18, s2
 802337c:	9306      	str	r3, [sp, #24]
 802337e:	eeb0 8a62 	vmov.f32	s16, s5
 8023382:	eef0 8a43 	vmov.f32	s17, s6
 8023386:	eef0 ba44 	vmov.f32	s23, s8
 802338a:	eeb0 ba64 	vmov.f32	s22, s9
 802338e:	eef0 aa45 	vmov.f32	s21, s10
 8023392:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8023396:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023398:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802339c:	6850      	ldr	r0, [r2, #4]
 802339e:	6812      	ldr	r2, [r2, #0]
 80233a0:	fb00 1303 	mla	r3, r0, r3, r1
 80233a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80233a8:	18d3      	adds	r3, r2, r3
 80233aa:	9309      	str	r3, [sp, #36]	; 0x24
 80233ac:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233ae:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80233b2:	681b      	ldr	r3, [r3, #0]
 80233b4:	930e      	str	r3, [sp, #56]	; 0x38
 80233b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	dc03      	bgt.n	80233c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80233bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80233be:	2b00      	cmp	r3, #0
 80233c0:	f340 8360 	ble.w	8023a84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80233c4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80233ce:	1e48      	subs	r0, r1, #1
 80233d0:	1e57      	subs	r7, r2, #1
 80233d2:	9b06      	ldr	r3, [sp, #24]
 80233d4:	2b00      	cmp	r3, #0
 80233d6:	f340 817b 	ble.w	80236d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80233da:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80233de:	ea4f 4326 	mov.w	r3, r6, asr #16
 80233e2:	d406      	bmi.n	80233f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80233e4:	4584      	cmp	ip, r0
 80233e6:	da04      	bge.n	80233f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	db02      	blt.n	80233f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80233ec:	42bb      	cmp	r3, r7
 80233ee:	f2c0 8170 	blt.w	80236d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80233f2:	f11c 0c01 	adds.w	ip, ip, #1
 80233f6:	f100 8160 	bmi.w	80236ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80233fa:	4561      	cmp	r1, ip
 80233fc:	f2c0 815d 	blt.w	80236ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023400:	3301      	adds	r3, #1
 8023402:	f100 815a 	bmi.w	80236ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023406:	429a      	cmp	r2, r3
 8023408:	f2c0 8157 	blt.w	80236ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802340c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023410:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023412:	f1b8 0f00 	cmp.w	r8, #0
 8023416:	f340 8179 	ble.w	802370c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802341a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802341c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023420:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023422:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023426:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802342a:	142a      	asrs	r2, r5, #16
 802342c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023430:	689b      	ldr	r3, [r3, #8]
 8023432:	f100 81be 	bmi.w	80237b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023436:	f103 39ff 	add.w	r9, r3, #4294967295
 802343a:	454a      	cmp	r2, r9
 802343c:	f280 81b9 	bge.w	80237b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023440:	f1bc 0f00 	cmp.w	ip, #0
 8023444:	f2c0 81b5 	blt.w	80237b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023448:	f10e 39ff 	add.w	r9, lr, #4294967295
 802344c:	45cc      	cmp	ip, r9
 802344e:	f280 81b0 	bge.w	80237b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023452:	b21b      	sxth	r3, r3
 8023454:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023456:	fb0c 2203 	mla	r2, ip, r3, r2
 802345a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802345e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023462:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023466:	2900      	cmp	r1, #0
 8023468:	f000 8197 	beq.w	802379a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 802346c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8023470:	940a      	str	r4, [sp, #40]	; 0x28
 8023472:	0e24      	lsrs	r4, r4, #24
 8023474:	9411      	str	r4, [sp, #68]	; 0x44
 8023476:	b180      	cbz	r0, 802349a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802347c:	3b01      	subs	r3, #1
 802347e:	009b      	lsls	r3, r3, #2
 8023480:	3304      	adds	r3, #4
 8023482:	eb09 0c03 	add.w	ip, r9, r3
 8023486:	f859 3003 	ldr.w	r3, [r9, r3]
 802348a:	9307      	str	r3, [sp, #28]
 802348c:	0e1b      	lsrs	r3, r3, #24
 802348e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023490:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023494:	930b      	str	r3, [sp, #44]	; 0x2c
 8023496:	0e1b      	lsrs	r3, r3, #24
 8023498:	9312      	str	r3, [sp, #72]	; 0x48
 802349a:	b289      	uxth	r1, r1
 802349c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802349e:	b280      	uxth	r0, r0
 80234a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80234a2:	fb01 fa00 	mul.w	sl, r1, r0
 80234a6:	0109      	lsls	r1, r1, #4
 80234a8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80234ac:	eba1 090a 	sub.w	r9, r1, sl
 80234b0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80234b4:	b280      	uxth	r0, r0
 80234b6:	fa1f f989 	uxth.w	r9, r9
 80234ba:	1a09      	subs	r1, r1, r0
 80234bc:	fb09 f303 	mul.w	r3, r9, r3
 80234c0:	b289      	uxth	r1, r1
 80234c2:	fb01 330e 	mla	r3, r1, lr, r3
 80234c6:	fb00 3304 	mla	r3, r0, r4, r3
 80234ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80234cc:	fb0a 3304 	mla	r3, sl, r4, r3
 80234d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	f000 80e8 	beq.w	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80234da:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80234de:	d01b      	beq.n	8023518 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80234e0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80234e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80234e8:	fb0e fb0b 	mul.w	fp, lr, fp
 80234ec:	fb0e fe02 	mul.w	lr, lr, r2
 80234f0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80234f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80234f8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80234fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023500:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023504:	445a      	add	r2, fp
 8023506:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802350a:	0a12      	lsrs	r2, r2, #8
 802350c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023510:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023514:	ea42 020c 	orr.w	r2, r2, ip
 8023518:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802351a:	2cff      	cmp	r4, #255	; 0xff
 802351c:	d021      	beq.n	8023562 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802351e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023520:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023524:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023526:	fb04 fc0c 	mul.w	ip, r4, ip
 802352a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802352c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023530:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023534:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023536:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802353a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802353e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023542:	44e6      	add	lr, ip
 8023544:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023548:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802354c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023550:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023554:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023558:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802355c:	ea4e 040b 	orr.w	r4, lr, fp
 8023560:	940a      	str	r4, [sp, #40]	; 0x28
 8023562:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023564:	2cff      	cmp	r4, #255	; 0xff
 8023566:	d021      	beq.n	80235ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023568:	9c07      	ldr	r4, [sp, #28]
 802356a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802356e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023570:	fb04 fc0c 	mul.w	ip, r4, ip
 8023574:	9c07      	ldr	r4, [sp, #28]
 8023576:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802357a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802357e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023580:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023584:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023588:	fb04 fb0b 	mul.w	fp, r4, fp
 802358c:	44e6      	add	lr, ip
 802358e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023592:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023596:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802359a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802359e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80235a2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80235a6:	ea4e 040b 	orr.w	r4, lr, fp
 80235aa:	9407      	str	r4, [sp, #28]
 80235ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235ae:	2cff      	cmp	r4, #255	; 0xff
 80235b0:	d021      	beq.n	80235f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80235b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80235b4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80235b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235ba:	fb04 fc0c 	mul.w	ip, r4, ip
 80235be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80235c0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80235c4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80235c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80235ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80235d2:	fb04 fb0b 	mul.w	fp, r4, fp
 80235d6:	44e6      	add	lr, ip
 80235d8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80235dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235e0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80235e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80235e8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80235ec:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80235f0:	ea4e 040b 	orr.w	r4, lr, fp
 80235f4:	940b      	str	r4, [sp, #44]	; 0x2c
 80235f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80235f8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80235fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023600:	2bff      	cmp	r3, #255	; 0xff
 8023602:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023606:	9c07      	ldr	r4, [sp, #28]
 8023608:	fb09 fc0c 	mul.w	ip, r9, ip
 802360c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023610:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023614:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023616:	fb00 cc0e 	mla	ip, r0, lr, ip
 802361a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802361e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023620:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023624:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023628:	fb09 f90e 	mul.w	r9, r9, lr
 802362c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023630:	fb01 9202 	mla	r2, r1, r2, r9
 8023634:	9907      	ldr	r1, [sp, #28]
 8023636:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802363a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802363e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023640:	fb00 220b 	mla	r2, r0, fp, r2
 8023644:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023648:	fb0a 2a00 	mla	sl, sl, r0, r2
 802364c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023650:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023654:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023658:	fa5f f08c 	uxtb.w	r0, ip
 802365c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023660:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023664:	f000 80a2 	beq.w	80237ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023668:	43db      	mvns	r3, r3
 802366a:	783a      	ldrb	r2, [r7, #0]
 802366c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023670:	b2db      	uxtb	r3, r3
 8023672:	fb02 fe03 	mul.w	lr, r2, r3
 8023676:	fb0a fa03 	mul.w	sl, sl, r3
 802367a:	f10e 0201 	add.w	r2, lr, #1
 802367e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023682:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023686:	703a      	strb	r2, [r7, #0]
 8023688:	787a      	ldrb	r2, [r7, #1]
 802368a:	fb02 f003 	mul.w	r0, r2, r3
 802368e:	f10a 0301 	add.w	r3, sl, #1
 8023692:	1c42      	adds	r2, r0, #1
 8023694:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023698:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802369c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80236a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80236a4:	707a      	strb	r2, [r7, #1]
 80236a6:	f887 c002 	strb.w	ip, [r7, #2]
 80236aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80236ac:	3703      	adds	r7, #3
 80236ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80236b2:	441d      	add	r5, r3
 80236b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236b6:	441e      	add	r6, r3
 80236b8:	e6ab      	b.n	8023412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80236ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80236bc:	441d      	add	r5, r3
 80236be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236c0:	441e      	add	r6, r3
 80236c2:	9b06      	ldr	r3, [sp, #24]
 80236c4:	3b01      	subs	r3, #1
 80236c6:	9306      	str	r3, [sp, #24]
 80236c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236ca:	3303      	adds	r3, #3
 80236cc:	9309      	str	r3, [sp, #36]	; 0x24
 80236ce:	e680      	b.n	80233d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80236d0:	d024      	beq.n	802371c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80236d2:	9b06      	ldr	r3, [sp, #24]
 80236d4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80236d6:	3b01      	subs	r3, #1
 80236d8:	fb00 5003 	mla	r0, r0, r3, r5
 80236dc:	1400      	asrs	r0, r0, #16
 80236de:	f53f ae95 	bmi.w	802340c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80236e2:	3901      	subs	r1, #1
 80236e4:	4288      	cmp	r0, r1
 80236e6:	f6bf ae91 	bge.w	802340c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80236ea:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80236ec:	fb01 6303 	mla	r3, r1, r3, r6
 80236f0:	141b      	asrs	r3, r3, #16
 80236f2:	f53f ae8b 	bmi.w	802340c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80236f6:	3a01      	subs	r2, #1
 80236f8:	4293      	cmp	r3, r2
 80236fa:	f6bf ae87 	bge.w	802340c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80236fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023700:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023704:	1cdf      	adds	r7, r3, #3
 8023706:	f1bb 0f00 	cmp.w	fp, #0
 802370a:	dc6e      	bgt.n	80237ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802370c:	9b06      	ldr	r3, [sp, #24]
 802370e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023714:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023718:	4423      	add	r3, r4
 802371a:	9309      	str	r3, [sp, #36]	; 0x24
 802371c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802371e:	2b00      	cmp	r3, #0
 8023720:	f340 81b0 	ble.w	8023a84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023728:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802372a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802372e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023732:	eef0 6a48 	vmov.f32	s13, s16
 8023736:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802373a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802373e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023742:	ee16 5a90 	vmov	r5, s13
 8023746:	eef0 6a68 	vmov.f32	s13, s17
 802374a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802374e:	ee16 6a90 	vmov	r6, s13
 8023752:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023756:	ee69 7a27 	vmul.f32	s15, s18, s15
 802375a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802375e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023762:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023766:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802376a:	ee18 2a10 	vmov	r2, s16
 802376e:	eeb0 8a47 	vmov.f32	s16, s14
 8023772:	fb92 f3f3 	sdiv	r3, r2, r3
 8023776:	ee18 2a90 	vmov	r2, s17
 802377a:	932d      	str	r3, [sp, #180]	; 0xb4
 802377c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802377e:	eef0 8a67 	vmov.f32	s17, s15
 8023782:	fb92 f3f3 	sdiv	r3, r2, r3
 8023786:	932e      	str	r3, [sp, #184]	; 0xb8
 8023788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802378a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802378c:	3b01      	subs	r3, #1
 802378e:	9315      	str	r3, [sp, #84]	; 0x54
 8023790:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023792:	bf08      	it	eq
 8023794:	4613      	moveq	r3, r2
 8023796:	9306      	str	r3, [sp, #24]
 8023798:	e60d      	b.n	80233b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802379a:	2800      	cmp	r0, #0
 802379c:	f43f ae7d 	beq.w	802349a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80237a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80237a4:	9307      	str	r3, [sp, #28]
 80237a6:	0e1b      	lsrs	r3, r3, #24
 80237a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80237aa:	e676      	b.n	802349a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80237ac:	7038      	strb	r0, [r7, #0]
 80237ae:	7079      	strb	r1, [r7, #1]
 80237b0:	e779      	b.n	80236a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80237b2:	f112 0901 	adds.w	r9, r2, #1
 80237b6:	f53f af78 	bmi.w	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80237ba:	454b      	cmp	r3, r9
 80237bc:	f6ff af75 	blt.w	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80237c0:	f11c 0901 	adds.w	r9, ip, #1
 80237c4:	f53f af71 	bmi.w	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80237c8:	45ce      	cmp	lr, r9
 80237ca:	f6ff af6e 	blt.w	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80237ce:	b21b      	sxth	r3, r3
 80237d0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80237d4:	fa0f f28e 	sxth.w	r2, lr
 80237d8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80237dc:	9200      	str	r2, [sp, #0]
 80237de:	4639      	mov	r1, r7
 80237e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80237e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80237e4:	f7ff fc7c 	bl	80230e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80237e8:	e75f      	b.n	80236aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80237ea:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80237ec:	1429      	asrs	r1, r5, #16
 80237ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80237f0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80237f4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80237f8:	1433      	asrs	r3, r6, #16
 80237fa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80237fe:	fb0c 1303 	mla	r3, ip, r3, r1
 8023802:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023804:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023808:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802380c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023810:	2a00      	cmp	r2, #0
 8023812:	f000 8129 	beq.w	8023a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023816:	684c      	ldr	r4, [r1, #4]
 8023818:	940c      	str	r4, [sp, #48]	; 0x30
 802381a:	0e24      	lsrs	r4, r4, #24
 802381c:	9413      	str	r4, [sp, #76]	; 0x4c
 802381e:	b198      	cbz	r0, 8023848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023820:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8023824:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023828:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802382c:	f10c 0c04 	add.w	ip, ip, #4
 8023830:	eb01 080c 	add.w	r8, r1, ip
 8023834:	f851 100c 	ldr.w	r1, [r1, ip]
 8023838:	9108      	str	r1, [sp, #32]
 802383a:	0e09      	lsrs	r1, r1, #24
 802383c:	9110      	str	r1, [sp, #64]	; 0x40
 802383e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023842:	910d      	str	r1, [sp, #52]	; 0x34
 8023844:	0e09      	lsrs	r1, r1, #24
 8023846:	9114      	str	r1, [sp, #80]	; 0x50
 8023848:	b292      	uxth	r2, r2
 802384a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802384c:	b280      	uxth	r0, r0
 802384e:	fb02 f900 	mul.w	r9, r2, r0
 8023852:	0112      	lsls	r2, r2, #4
 8023854:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023858:	eba2 0809 	sub.w	r8, r2, r9
 802385c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023862:	b280      	uxth	r0, r0
 8023864:	fa1f f888 	uxth.w	r8, r8
 8023868:	1a09      	subs	r1, r1, r0
 802386a:	fb08 f202 	mul.w	r2, r8, r2
 802386e:	b289      	uxth	r1, r1
 8023870:	fb01 220e 	mla	r2, r1, lr, r2
 8023874:	fb00 2204 	mla	r2, r0, r4, r2
 8023878:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802387a:	fb09 2204 	mla	r2, r9, r4, r2
 802387e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023882:	2a00      	cmp	r2, #0
 8023884:	f000 80e8 	beq.w	8023a58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023888:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802388c:	d01b      	beq.n	80238c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 802388e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023896:	fb0e fa0a 	mul.w	sl, lr, sl
 802389a:	fb0e fe03 	mul.w	lr, lr, r3
 802389e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80238a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80238a6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80238aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80238ae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80238b2:	4453      	add	r3, sl
 80238b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238b8:	0a1b      	lsrs	r3, r3, #8
 80238ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80238c2:	ea43 030c 	orr.w	r3, r3, ip
 80238c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80238c8:	2cff      	cmp	r4, #255	; 0xff
 80238ca:	d021      	beq.n	8023910 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80238cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80238ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80238d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80238d4:	fb04 fc0c 	mul.w	ip, r4, ip
 80238d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80238da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80238de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80238e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80238e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80238f0:	44e6      	add	lr, ip
 80238f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80238f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80238fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023902:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023906:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802390a:	ea4e 040a 	orr.w	r4, lr, sl
 802390e:	940c      	str	r4, [sp, #48]	; 0x30
 8023910:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023912:	2cff      	cmp	r4, #255	; 0xff
 8023914:	d021      	beq.n	802395a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8023916:	9c08      	ldr	r4, [sp, #32]
 8023918:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802391c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802391e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023922:	9c08      	ldr	r4, [sp, #32]
 8023924:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023928:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802392a:	fb04 fa0e 	mul.w	sl, r4, lr
 802392e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023932:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023936:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802393a:	44e6      	add	lr, ip
 802393c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023940:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023944:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023948:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802394c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023950:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023954:	ea4e 040a 	orr.w	r4, lr, sl
 8023958:	9408      	str	r4, [sp, #32]
 802395a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802395c:	2cff      	cmp	r4, #255	; 0xff
 802395e:	d021      	beq.n	80239a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8023960:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023962:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023966:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023968:	fb04 fc0c 	mul.w	ip, r4, ip
 802396c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802396e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023972:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023976:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023978:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802397c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023980:	fb04 fa0a 	mul.w	sl, r4, sl
 8023984:	44e6      	add	lr, ip
 8023986:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802398a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802398e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023992:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023996:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802399a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802399e:	ea4e 040a 	orr.w	r4, lr, sl
 80239a2:	940d      	str	r4, [sp, #52]	; 0x34
 80239a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80239a6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80239aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80239ae:	2aff      	cmp	r2, #255	; 0xff
 80239b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80239b4:	9c08      	ldr	r4, [sp, #32]
 80239b6:	fb08 fc0c 	mul.w	ip, r8, ip
 80239ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80239be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80239c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80239c4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80239c8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80239cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80239ce:	fb09 cc0e 	mla	ip, r9, lr, ip
 80239d2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80239d6:	fb08 f80e 	mul.w	r8, r8, lr
 80239da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239de:	fb01 8303 	mla	r3, r1, r3, r8
 80239e2:	9908      	ldr	r1, [sp, #32]
 80239e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80239e8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80239ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80239ee:	fb00 330a 	mla	r3, r0, sl, r3
 80239f2:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80239f6:	fb09 3e0e 	mla	lr, r9, lr, r3
 80239fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239fe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023a02:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023a06:	fa5f f08c 	uxtb.w	r0, ip
 8023a0a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023a0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023a12:	d032      	beq.n	8023a7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023a14:	43d2      	mvns	r2, r2
 8023a16:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023a1a:	b2d2      	uxtb	r2, r2
 8023a1c:	fb0e fe02 	mul.w	lr, lr, r2
 8023a20:	f10e 0301 	add.w	r3, lr, #1
 8023a24:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023a28:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023a2c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023a30:	4350      	muls	r0, r2
 8023a32:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023a36:	1c43      	adds	r3, r0, #1
 8023a38:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023a3c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023a40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023a44:	4353      	muls	r3, r2
 8023a46:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023a4a:	1c5a      	adds	r2, r3, #1
 8023a4c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023a50:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023a54:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023a58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023a5a:	3703      	adds	r7, #3
 8023a5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a60:	441d      	add	r5, r3
 8023a62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a64:	441e      	add	r6, r3
 8023a66:	e64e      	b.n	8023706 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8023a68:	2800      	cmp	r0, #0
 8023a6a:	f43f aeed 	beq.w	8023848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023a6e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023a72:	9108      	str	r1, [sp, #32]
 8023a74:	0e09      	lsrs	r1, r1, #24
 8023a76:	9110      	str	r1, [sp, #64]	; 0x40
 8023a78:	e6e6      	b.n	8023848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023a7a:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023a7e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023a82:	e7e7      	b.n	8023a54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8023a84:	b019      	add	sp, #100	; 0x64
 8023a86:	ecbd 8b08 	vpop	{d8-d11}
 8023a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a94:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023a98:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023a9c:	2800      	cmp	r0, #0
 8023a9e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023aa2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023aa6:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023aaa:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023aae:	db6b      	blt.n	8023b88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023ab0:	4580      	cmp	r8, r0
 8023ab2:	dd69      	ble.n	8023b88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023ab4:	f1bc 0f00 	cmp.w	ip, #0
 8023ab8:	db66      	blt.n	8023b88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023aba:	45e1      	cmp	r9, ip
 8023abc:	dd64      	ble.n	8023b88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023abe:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023ac2:	f01e 0f01 	tst.w	lr, #1
 8023ac6:	5d16      	ldrb	r6, [r2, r4]
 8023ac8:	bf0c      	ite	eq
 8023aca:	f006 060f 	andeq.w	r6, r6, #15
 8023ace:	1136      	asrne	r6, r6, #4
 8023ad0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023ad4:	b2f6      	uxtb	r6, r6
 8023ad6:	f110 0a01 	adds.w	sl, r0, #1
 8023ada:	d457      	bmi.n	8023b8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023adc:	45d0      	cmp	r8, sl
 8023ade:	dd55      	ble.n	8023b8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023ae0:	f1bc 0f00 	cmp.w	ip, #0
 8023ae4:	db52      	blt.n	8023b8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023ae6:	45e1      	cmp	r9, ip
 8023ae8:	dd50      	ble.n	8023b8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023aea:	2f00      	cmp	r7, #0
 8023aec:	f000 80ac 	beq.w	8023c48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8023af0:	f10e 0b01 	add.w	fp, lr, #1
 8023af4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023af8:	f01b 0f01 	tst.w	fp, #1
 8023afc:	5d14      	ldrb	r4, [r2, r4]
 8023afe:	bf0c      	ite	eq
 8023b00:	f004 040f 	andeq.w	r4, r4, #15
 8023b04:	1124      	asrne	r4, r4, #4
 8023b06:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023b0a:	b2e4      	uxtb	r4, r4
 8023b0c:	2d00      	cmp	r5, #0
 8023b0e:	f000 8096 	beq.w	8023c3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023b12:	2800      	cmp	r0, #0
 8023b14:	f10c 0c01 	add.w	ip, ip, #1
 8023b18:	db3c      	blt.n	8023b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023b1a:	4580      	cmp	r8, r0
 8023b1c:	dd3a      	ble.n	8023b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023b1e:	f1bc 0f00 	cmp.w	ip, #0
 8023b22:	db37      	blt.n	8023b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023b24:	45e1      	cmp	r9, ip
 8023b26:	dd35      	ble.n	8023b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023b28:	eb03 0b0e 	add.w	fp, r3, lr
 8023b2c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023b30:	f01b 0f01 	tst.w	fp, #1
 8023b34:	5c10      	ldrb	r0, [r2, r0]
 8023b36:	bf0c      	ite	eq
 8023b38:	f000 000f 	andeq.w	r0, r0, #15
 8023b3c:	1100      	asrne	r0, r0, #4
 8023b3e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023b42:	b2c0      	uxtb	r0, r0
 8023b44:	f1ba 0f00 	cmp.w	sl, #0
 8023b48:	db26      	blt.n	8023b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023b4a:	45d0      	cmp	r8, sl
 8023b4c:	dd24      	ble.n	8023b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023b4e:	f1bc 0f00 	cmp.w	ip, #0
 8023b52:	db21      	blt.n	8023b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023b54:	45e1      	cmp	r9, ip
 8023b56:	dd1f      	ble.n	8023b98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023b58:	b307      	cbz	r7, 8023b9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8023b5a:	3301      	adds	r3, #1
 8023b5c:	449e      	add	lr, r3
 8023b5e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023b62:	f01e 0f01 	tst.w	lr, #1
 8023b66:	5cd3      	ldrb	r3, [r2, r3]
 8023b68:	bf0c      	ite	eq
 8023b6a:	f003 030f 	andeq.w	r3, r3, #15
 8023b6e:	111b      	asrne	r3, r3, #4
 8023b70:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023b74:	b2db      	uxtb	r3, r3
 8023b76:	2f0f      	cmp	r7, #15
 8023b78:	d911      	bls.n	8023b9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8023b7a:	4b35      	ldr	r3, [pc, #212]	; (8023c50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8023b7c:	f240 1157 	movw	r1, #343	; 0x157
 8023b80:	4a34      	ldr	r2, [pc, #208]	; (8023c54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023b82:	4835      	ldr	r0, [pc, #212]	; (8023c58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023b84:	f002 fc94 	bl	80264b0 <__assert_func>
 8023b88:	2600      	movs	r6, #0
 8023b8a:	e7a4      	b.n	8023ad6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8023b8c:	2400      	movs	r4, #0
 8023b8e:	e7bd      	b.n	8023b0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023b90:	463c      	mov	r4, r7
 8023b92:	e7be      	b.n	8023b12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023b94:	2000      	movs	r0, #0
 8023b96:	e7d5      	b.n	8023b44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023b98:	2300      	movs	r3, #0
 8023b9a:	e7ec      	b.n	8023b76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8023b9c:	463b      	mov	r3, r7
 8023b9e:	2d0f      	cmp	r5, #15
 8023ba0:	d8eb      	bhi.n	8023b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023ba2:	b2bf      	uxth	r7, r7
 8023ba4:	b2ad      	uxth	r5, r5
 8023ba6:	fb07 f205 	mul.w	r2, r7, r5
 8023baa:	013f      	lsls	r7, r7, #4
 8023bac:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023bb0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023bb4:	1abf      	subs	r7, r7, r2
 8023bb6:	b2ad      	uxth	r5, r5
 8023bb8:	b2bf      	uxth	r7, r7
 8023bba:	ebac 0c05 	sub.w	ip, ip, r5
 8023bbe:	437c      	muls	r4, r7
 8023bc0:	fa1f fc8c 	uxth.w	ip, ip
 8023bc4:	fb06 440c 	mla	r4, r6, ip, r4
 8023bc8:	fb05 4400 	mla	r4, r5, r0, r4
 8023bcc:	fb02 4203 	mla	r2, r2, r3, r4
 8023bd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023bd4:	b38a      	cbz	r2, 8023c3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023bd6:	4b21      	ldr	r3, [pc, #132]	; (8023c5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023bd8:	681c      	ldr	r4, [r3, #0]
 8023bda:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8023bde:	b2e5      	uxtb	r5, r4
 8023be0:	4353      	muls	r3, r2
 8023be2:	1c5a      	adds	r2, r3, #1
 8023be4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023be8:	1212      	asrs	r2, r2, #8
 8023bea:	b290      	uxth	r0, r2
 8023bec:	43d2      	mvns	r2, r2
 8023bee:	fb15 f500 	smulbb	r5, r5, r0
 8023bf2:	b2d3      	uxtb	r3, r2
 8023bf4:	780a      	ldrb	r2, [r1, #0]
 8023bf6:	fb02 5203 	mla	r2, r2, r3, r5
 8023bfa:	b292      	uxth	r2, r2
 8023bfc:	1c55      	adds	r5, r2, #1
 8023bfe:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023c02:	784d      	ldrb	r5, [r1, #1]
 8023c04:	fb15 f503 	smulbb	r5, r5, r3
 8023c08:	1212      	asrs	r2, r2, #8
 8023c0a:	700a      	strb	r2, [r1, #0]
 8023c0c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023c10:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023c14:	fb02 5200 	mla	r2, r2, r0, r5
 8023c18:	b292      	uxth	r2, r2
 8023c1a:	1c55      	adds	r5, r2, #1
 8023c1c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023c20:	1212      	asrs	r2, r2, #8
 8023c22:	704a      	strb	r2, [r1, #1]
 8023c24:	788a      	ldrb	r2, [r1, #2]
 8023c26:	fb12 f303 	smulbb	r3, r2, r3
 8023c2a:	fb04 3300 	mla	r3, r4, r0, r3
 8023c2e:	b29b      	uxth	r3, r3
 8023c30:	1c5a      	adds	r2, r3, #1
 8023c32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023c36:	121b      	asrs	r3, r3, #8
 8023c38:	708b      	strb	r3, [r1, #2]
 8023c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c3e:	2f0f      	cmp	r7, #15
 8023c40:	d89b      	bhi.n	8023b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023c42:	462b      	mov	r3, r5
 8023c44:	4628      	mov	r0, r5
 8023c46:	e7ac      	b.n	8023ba2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8023c48:	2d00      	cmp	r5, #0
 8023c4a:	d1a1      	bne.n	8023b90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8023c4c:	462c      	mov	r4, r5
 8023c4e:	e7f8      	b.n	8023c42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023c50:	0802e527 	.word	0x0802e527
 8023c54:	0802ea8f 	.word	0x0802ea8f
 8023c58:	0802e5f0 	.word	0x0802e5f0
 8023c5c:	20056778 	.word	0x20056778

08023c60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	ed2d 8b08 	vpush	{d8-d11}
 8023c68:	b097      	sub	sp, #92	; 0x5c
 8023c6a:	eeb0 aa40 	vmov.f32	s20, s0
 8023c6e:	eef0 9a60 	vmov.f32	s19, s1
 8023c72:	9214      	str	r2, [sp, #80]	; 0x50
 8023c74:	eeb0 9a41 	vmov.f32	s18, s2
 8023c78:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023c7a:	eeb0 8a62 	vmov.f32	s16, s5
 8023c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8023c80:	eef0 8a43 	vmov.f32	s17, s6
 8023c84:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023c88:	eef0 ba44 	vmov.f32	s23, s8
 8023c8c:	9015      	str	r0, [sp, #84]	; 0x54
 8023c8e:	eeb0 ba64 	vmov.f32	s22, s9
 8023c92:	6850      	ldr	r0, [r2, #4]
 8023c94:	eef0 aa45 	vmov.f32	s21, s10
 8023c98:	910c      	str	r1, [sp, #48]	; 0x30
 8023c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8023c9c:	6812      	ldr	r2, [r2, #0]
 8023c9e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023ca2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8023ca6:	fb00 1303 	mla	r3, r0, r3, r1
 8023caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023cae:	eb02 0a03 	add.w	sl, r2, r3
 8023cb2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cb4:	689b      	ldr	r3, [r3, #8]
 8023cb6:	3301      	adds	r3, #1
 8023cb8:	f023 0301 	bic.w	r3, r3, #1
 8023cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cc0:	681f      	ldr	r7, [r3, #0]
 8023cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023cc4:	2b00      	cmp	r3, #0
 8023cc6:	dc03      	bgt.n	8023cd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023cca:	2b00      	cmp	r3, #0
 8023ccc:	f340 8247 	ble.w	802415e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023cd0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023cda:	1e48      	subs	r0, r1, #1
 8023cdc:	f102 3cff 	add.w	ip, r2, #4294967295
 8023ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ce2:	2b00      	cmp	r3, #0
 8023ce4:	f340 80e5 	ble.w	8023eb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8023ce8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8023cec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023cf0:	d406      	bmi.n	8023d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023cf2:	4586      	cmp	lr, r0
 8023cf4:	da04      	bge.n	8023d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	db02      	blt.n	8023d00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023cfa:	4563      	cmp	r3, ip
 8023cfc:	f2c0 80da 	blt.w	8023eb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8023d00:	f11e 0e01 	adds.w	lr, lr, #1
 8023d04:	f100 80cb 	bmi.w	8023e9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023d08:	4571      	cmp	r1, lr
 8023d0a:	f2c0 80c8 	blt.w	8023e9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023d0e:	3301      	adds	r3, #1
 8023d10:	f100 80c5 	bmi.w	8023e9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023d14:	429a      	cmp	r2, r3
 8023d16:	f2c0 80c2 	blt.w	8023e9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d1c:	46d0      	mov	r8, sl
 8023d1e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023d22:	930d      	str	r3, [sp, #52]	; 0x34
 8023d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	f340 80e3 	ble.w	8023ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023d2c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023d2e:	1430      	asrs	r0, r6, #16
 8023d30:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023d34:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023d38:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023d3c:	142b      	asrs	r3, r5, #16
 8023d3e:	f100 812e 	bmi.w	8023f9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023d42:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023d46:	455b      	cmp	r3, fp
 8023d48:	f280 8129 	bge.w	8023f9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023d4c:	2800      	cmp	r0, #0
 8023d4e:	f2c0 8126 	blt.w	8023f9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023d52:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023d56:	4558      	cmp	r0, fp
 8023d58:	f280 8121 	bge.w	8023f9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023d5c:	fb00 3309 	mla	r3, r0, r9, r3
 8023d60:	0858      	lsrs	r0, r3, #1
 8023d62:	07dc      	lsls	r4, r3, #31
 8023d64:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023d68:	bf54      	ite	pl
 8023d6a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023d6e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023d72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023d76:	fa5f fc8c 	uxtb.w	ip, ip
 8023d7a:	2a00      	cmp	r2, #0
 8023d7c:	f000 80fe 	beq.w	8023f7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023d80:	1c58      	adds	r0, r3, #1
 8023d82:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023d86:	07c0      	lsls	r0, r0, #31
 8023d88:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023d8c:	bf54      	ite	pl
 8023d8e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023d92:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023d96:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023d9a:	fa5f f08e 	uxtb.w	r0, lr
 8023d9e:	9010      	str	r0, [sp, #64]	; 0x40
 8023da0:	b1d9      	cbz	r1, 8023dda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023da2:	444b      	add	r3, r9
 8023da4:	0858      	lsrs	r0, r3, #1
 8023da6:	07dc      	lsls	r4, r3, #31
 8023da8:	f103 0301 	add.w	r3, r3, #1
 8023dac:	5c38      	ldrb	r0, [r7, r0]
 8023dae:	bf54      	ite	pl
 8023db0:	f000 000f 	andpl.w	r0, r0, #15
 8023db4:	1100      	asrmi	r0, r0, #4
 8023db6:	07dc      	lsls	r4, r3, #31
 8023db8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023dbc:	b2c0      	uxtb	r0, r0
 8023dbe:	900a      	str	r0, [sp, #40]	; 0x28
 8023dc0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8023dc4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8023dc8:	bf54      	ite	pl
 8023dca:	f00e 030f 	andpl.w	r3, lr, #15
 8023dce:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8023dd2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023dd6:	b2db      	uxtb	r3, r3
 8023dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8023dda:	b292      	uxth	r2, r2
 8023ddc:	b289      	uxth	r1, r1
 8023dde:	0113      	lsls	r3, r2, #4
 8023de0:	fb02 f001 	mul.w	r0, r2, r1
 8023de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023de6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023dea:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8023dee:	1a1b      	subs	r3, r3, r0
 8023df0:	b289      	uxth	r1, r1
 8023df2:	b29b      	uxth	r3, r3
 8023df4:	ebae 0e01 	sub.w	lr, lr, r1
 8023df8:	4353      	muls	r3, r2
 8023dfa:	fa1f fe8e 	uxth.w	lr, lr
 8023dfe:	fb0c 320e 	mla	r2, ip, lr, r3
 8023e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e04:	fb01 2203 	mla	r2, r1, r3, r2
 8023e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e0a:	fb00 2203 	mla	r2, r0, r3, r2
 8023e0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e12:	2a00      	cmp	r2, #0
 8023e14:	d039      	beq.n	8023e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023e16:	4bc7      	ldr	r3, [pc, #796]	; (8024134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023e18:	6819      	ldr	r1, [r3, #0]
 8023e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e1c:	fa5f fc81 	uxtb.w	ip, r1
 8023e20:	435a      	muls	r2, r3
 8023e22:	1c53      	adds	r3, r2, #1
 8023e24:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023e28:	1212      	asrs	r2, r2, #8
 8023e2a:	b290      	uxth	r0, r2
 8023e2c:	43d2      	mvns	r2, r2
 8023e2e:	fb1c fc00 	smulbb	ip, ip, r0
 8023e32:	b2d3      	uxtb	r3, r2
 8023e34:	f898 2000 	ldrb.w	r2, [r8]
 8023e38:	fb02 c203 	mla	r2, r2, r3, ip
 8023e3c:	b292      	uxth	r2, r2
 8023e3e:	f102 0c01 	add.w	ip, r2, #1
 8023e42:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023e46:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023e4a:	fb1c fc03 	smulbb	ip, ip, r3
 8023e4e:	1212      	asrs	r2, r2, #8
 8023e50:	f888 2000 	strb.w	r2, [r8]
 8023e54:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023e58:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023e5c:	fb02 c200 	mla	r2, r2, r0, ip
 8023e60:	b292      	uxth	r2, r2
 8023e62:	f102 0c01 	add.w	ip, r2, #1
 8023e66:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023e6a:	1212      	asrs	r2, r2, #8
 8023e6c:	f888 2001 	strb.w	r2, [r8, #1]
 8023e70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023e74:	fb12 f303 	smulbb	r3, r2, r3
 8023e78:	fb01 3300 	mla	r3, r1, r0, r3
 8023e7c:	b29b      	uxth	r3, r3
 8023e7e:	1c5a      	adds	r2, r3, #1
 8023e80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023e84:	121b      	asrs	r3, r3, #8
 8023e86:	f888 3002 	strb.w	r3, [r8, #2]
 8023e8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023e8c:	f108 0803 	add.w	r8, r8, #3
 8023e90:	441d      	add	r5, r3
 8023e92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e94:	441e      	add	r6, r3
 8023e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e98:	3b01      	subs	r3, #1
 8023e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8023e9c:	e742      	b.n	8023d24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023e9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023ea0:	f10a 0a03 	add.w	sl, sl, #3
 8023ea4:	441d      	add	r5, r3
 8023ea6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ea8:	441e      	add	r6, r3
 8023eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023eac:	3b01      	subs	r3, #1
 8023eae:	9309      	str	r3, [sp, #36]	; 0x24
 8023eb0:	e716      	b.n	8023ce0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023eb2:	d024      	beq.n	8023efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023eb6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023eb8:	3b01      	subs	r3, #1
 8023eba:	fb00 5003 	mla	r0, r0, r3, r5
 8023ebe:	1400      	asrs	r0, r0, #16
 8023ec0:	f53f af2b 	bmi.w	8023d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023ec4:	3901      	subs	r1, #1
 8023ec6:	4288      	cmp	r0, r1
 8023ec8:	f6bf af27 	bge.w	8023d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023ecc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023ece:	fb01 6303 	mla	r3, r1, r3, r6
 8023ed2:	141b      	asrs	r3, r3, #16
 8023ed4:	f53f af21 	bmi.w	8023d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023ed8:	3a01      	subs	r2, #1
 8023eda:	4293      	cmp	r3, r2
 8023edc:	f6bf af1d 	bge.w	8023d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023ee0:	f10a 0e03 	add.w	lr, sl, #3
 8023ee4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8023ee8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023eec:	f1b8 0f00 	cmp.w	r8, #0
 8023ef0:	dc76      	bgt.n	8023fe0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8023ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ef4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023ef8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023efc:	44a2      	add	sl, r4
 8023efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f00:	2b00      	cmp	r3, #0
 8023f02:	f340 812c 	ble.w	802415e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f0c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023f10:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023f14:	eef0 6a48 	vmov.f32	s13, s16
 8023f18:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023f1c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023f20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f24:	ee16 5a90 	vmov	r5, s13
 8023f28:	eef0 6a68 	vmov.f32	s13, s17
 8023f2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f30:	ee16 6a90 	vmov	r6, s13
 8023f34:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023f38:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023f3c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023f40:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023f44:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023f48:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023f4c:	ee18 2a10 	vmov	r2, s16
 8023f50:	eeb0 8a47 	vmov.f32	s16, s14
 8023f54:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f58:	ee18 2a90 	vmov	r2, s17
 8023f5c:	932b      	str	r3, [sp, #172]	; 0xac
 8023f5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f60:	eef0 8a67 	vmov.f32	s17, s15
 8023f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f68:	932c      	str	r3, [sp, #176]	; 0xb0
 8023f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023f6e:	3b01      	subs	r3, #1
 8023f70:	930c      	str	r3, [sp, #48]	; 0x30
 8023f72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f74:	bf08      	it	eq
 8023f76:	4613      	moveq	r3, r2
 8023f78:	9309      	str	r3, [sp, #36]	; 0x24
 8023f7a:	e6a2      	b.n	8023cc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023f7c:	2900      	cmp	r1, #0
 8023f7e:	f43f af2c 	beq.w	8023dda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023f82:	eb09 0003 	add.w	r0, r9, r3
 8023f86:	0843      	lsrs	r3, r0, #1
 8023f88:	07c0      	lsls	r0, r0, #31
 8023f8a:	5cfb      	ldrb	r3, [r7, r3]
 8023f8c:	bf54      	ite	pl
 8023f8e:	f003 030f 	andpl.w	r3, r3, #15
 8023f92:	111b      	asrmi	r3, r3, #4
 8023f94:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023f98:	b2db      	uxtb	r3, r3
 8023f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8023f9c:	e71d      	b.n	8023dda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023f9e:	f113 0b01 	adds.w	fp, r3, #1
 8023fa2:	f53f af72 	bmi.w	8023e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023fa6:	45dc      	cmp	ip, fp
 8023fa8:	f6ff af6f 	blt.w	8023e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023fac:	f110 0b01 	adds.w	fp, r0, #1
 8023fb0:	f53f af6b 	bmi.w	8023e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023fb4:	45de      	cmp	lr, fp
 8023fb6:	f6ff af68 	blt.w	8023e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023fba:	9302      	str	r3, [sp, #8]
 8023fbc:	fa0f f38e 	sxth.w	r3, lr
 8023fc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023fc2:	9301      	str	r3, [sp, #4]
 8023fc4:	fa0f f38c 	sxth.w	r3, ip
 8023fc8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023fcc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023fd0:	9300      	str	r3, [sp, #0]
 8023fd2:	463a      	mov	r2, r7
 8023fd4:	464b      	mov	r3, r9
 8023fd6:	4641      	mov	r1, r8
 8023fd8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023fda:	f7ff fd59 	bl	8023a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8023fde:	e754      	b.n	8023e8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023fe0:	142a      	asrs	r2, r5, #16
 8023fe2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023fe6:	1433      	asrs	r3, r6, #16
 8023fe8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023fec:	fb09 2303 	mla	r3, r9, r3, r2
 8023ff0:	085a      	lsrs	r2, r3, #1
 8023ff2:	07dc      	lsls	r4, r3, #31
 8023ff4:	5cba      	ldrb	r2, [r7, r2]
 8023ff6:	bf54      	ite	pl
 8023ff8:	f002 020f 	andpl.w	r2, r2, #15
 8023ffc:	1112      	asrmi	r2, r2, #4
 8023ffe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024002:	b2d2      	uxtb	r2, r2
 8024004:	2900      	cmp	r1, #0
 8024006:	f000 8097 	beq.w	8024138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802400a:	f103 0b01 	add.w	fp, r3, #1
 802400e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8024012:	f01b 0f01 	tst.w	fp, #1
 8024016:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802401a:	bf0c      	ite	eq
 802401c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024020:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024024:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024028:	fa5f f48c 	uxtb.w	r4, ip
 802402c:	9412      	str	r4, [sp, #72]	; 0x48
 802402e:	b300      	cbz	r0, 8024072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024030:	444b      	add	r3, r9
 8024032:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024036:	07dc      	lsls	r4, r3, #31
 8024038:	f103 0301 	add.w	r3, r3, #1
 802403c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024040:	bf54      	ite	pl
 8024042:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024046:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802404a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802404e:	fa5f f48c 	uxtb.w	r4, ip
 8024052:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024056:	940b      	str	r4, [sp, #44]	; 0x2c
 8024058:	07dc      	lsls	r4, r3, #31
 802405a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802405e:	bf54      	ite	pl
 8024060:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024064:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024068:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802406c:	fa5f f38c 	uxtb.w	r3, ip
 8024070:	9313      	str	r3, [sp, #76]	; 0x4c
 8024072:	b289      	uxth	r1, r1
 8024074:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024076:	b280      	uxth	r0, r0
 8024078:	fb01 f300 	mul.w	r3, r1, r0
 802407c:	0109      	lsls	r1, r1, #4
 802407e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024082:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024086:	1ac9      	subs	r1, r1, r3
 8024088:	b280      	uxth	r0, r0
 802408a:	b289      	uxth	r1, r1
 802408c:	ebac 0c00 	sub.w	ip, ip, r0
 8024090:	4361      	muls	r1, r4
 8024092:	fa1f fc8c 	uxth.w	ip, ip
 8024096:	fb02 120c 	mla	r2, r2, ip, r1
 802409a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802409c:	fb00 2001 	mla	r0, r0, r1, r2
 80240a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80240a2:	fb03 0302 	mla	r3, r3, r2, r0
 80240a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d039      	beq.n	8024122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80240ae:	4a21      	ldr	r2, [pc, #132]	; (8024134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80240b0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80240b4:	6810      	ldr	r0, [r2, #0]
 80240b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80240b8:	fa5f fc80 	uxtb.w	ip, r0
 80240bc:	4353      	muls	r3, r2
 80240be:	1c5a      	adds	r2, r3, #1
 80240c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80240c4:	121b      	asrs	r3, r3, #8
 80240c6:	b29a      	uxth	r2, r3
 80240c8:	43db      	mvns	r3, r3
 80240ca:	fb1c fc02 	smulbb	ip, ip, r2
 80240ce:	b2db      	uxtb	r3, r3
 80240d0:	fb01 c103 	mla	r1, r1, r3, ip
 80240d4:	b289      	uxth	r1, r1
 80240d6:	f101 0c01 	add.w	ip, r1, #1
 80240da:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80240de:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80240e2:	fb1c fc03 	smulbb	ip, ip, r3
 80240e6:	1209      	asrs	r1, r1, #8
 80240e8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80240ec:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80240f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80240f4:	fb01 c102 	mla	r1, r1, r2, ip
 80240f8:	b289      	uxth	r1, r1
 80240fa:	f101 0c01 	add.w	ip, r1, #1
 80240fe:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024102:	1209      	asrs	r1, r1, #8
 8024104:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024108:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802410c:	fb11 f303 	smulbb	r3, r1, r3
 8024110:	fb00 3002 	mla	r0, r0, r2, r3
 8024114:	b280      	uxth	r0, r0
 8024116:	1c42      	adds	r2, r0, #1
 8024118:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802411c:	1200      	asrs	r0, r0, #8
 802411e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024122:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024124:	f10e 0e03 	add.w	lr, lr, #3
 8024128:	f108 38ff 	add.w	r8, r8, #4294967295
 802412c:	441d      	add	r5, r3
 802412e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024130:	441e      	add	r6, r3
 8024132:	e6db      	b.n	8023eec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024134:	20056778 	.word	0x20056778
 8024138:	2800      	cmp	r0, #0
 802413a:	d09a      	beq.n	8024072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802413c:	444b      	add	r3, r9
 802413e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024142:	07db      	lsls	r3, r3, #31
 8024144:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024148:	bf54      	ite	pl
 802414a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802414e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024152:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024156:	fa5f f38c 	uxtb.w	r3, ip
 802415a:	930b      	str	r3, [sp, #44]	; 0x2c
 802415c:	e789      	b.n	8024072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802415e:	b017      	add	sp, #92	; 0x5c
 8024160:	ecbd 8b08 	vpop	{d8-d11}
 8024164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024168 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802416c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024170:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024174:	2800      	cmp	r0, #0
 8024176:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802417a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802417e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024182:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024186:	db6b      	blt.n	8024260 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024188:	4580      	cmp	r8, r0
 802418a:	dd69      	ble.n	8024260 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802418c:	f1bc 0f00 	cmp.w	ip, #0
 8024190:	db66      	blt.n	8024260 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024192:	45e1      	cmp	r9, ip
 8024194:	dd64      	ble.n	8024260 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024196:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802419a:	f01e 0f01 	tst.w	lr, #1
 802419e:	5d16      	ldrb	r6, [r2, r4]
 80241a0:	bf0c      	ite	eq
 80241a2:	f006 060f 	andeq.w	r6, r6, #15
 80241a6:	1136      	asrne	r6, r6, #4
 80241a8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80241ac:	b2f6      	uxtb	r6, r6
 80241ae:	f110 0a01 	adds.w	sl, r0, #1
 80241b2:	d457      	bmi.n	8024264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80241b4:	45d0      	cmp	r8, sl
 80241b6:	dd55      	ble.n	8024264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80241b8:	f1bc 0f00 	cmp.w	ip, #0
 80241bc:	db52      	blt.n	8024264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80241be:	45e1      	cmp	r9, ip
 80241c0:	dd50      	ble.n	8024264 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80241c2:	2f00      	cmp	r7, #0
 80241c4:	f000 80a5 	beq.w	8024312 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80241c8:	f10e 0b01 	add.w	fp, lr, #1
 80241cc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80241d0:	f01b 0f01 	tst.w	fp, #1
 80241d4:	5d14      	ldrb	r4, [r2, r4]
 80241d6:	bf0c      	ite	eq
 80241d8:	f004 040f 	andeq.w	r4, r4, #15
 80241dc:	1124      	asrne	r4, r4, #4
 80241de:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80241e2:	b2e4      	uxtb	r4, r4
 80241e4:	2d00      	cmp	r5, #0
 80241e6:	f000 808f 	beq.w	8024308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80241ea:	2800      	cmp	r0, #0
 80241ec:	f10c 0c01 	add.w	ip, ip, #1
 80241f0:	db3c      	blt.n	802426c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80241f2:	4580      	cmp	r8, r0
 80241f4:	dd3a      	ble.n	802426c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80241f6:	f1bc 0f00 	cmp.w	ip, #0
 80241fa:	db37      	blt.n	802426c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80241fc:	45e1      	cmp	r9, ip
 80241fe:	dd35      	ble.n	802426c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024200:	eb03 0b0e 	add.w	fp, r3, lr
 8024204:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024208:	f01b 0f01 	tst.w	fp, #1
 802420c:	5c10      	ldrb	r0, [r2, r0]
 802420e:	bf0c      	ite	eq
 8024210:	f000 000f 	andeq.w	r0, r0, #15
 8024214:	1100      	asrne	r0, r0, #4
 8024216:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802421a:	b2c0      	uxtb	r0, r0
 802421c:	f1ba 0f00 	cmp.w	sl, #0
 8024220:	db26      	blt.n	8024270 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024222:	45d0      	cmp	r8, sl
 8024224:	dd24      	ble.n	8024270 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024226:	f1bc 0f00 	cmp.w	ip, #0
 802422a:	db21      	blt.n	8024270 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802422c:	45e1      	cmp	r9, ip
 802422e:	dd1f      	ble.n	8024270 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024230:	b307      	cbz	r7, 8024274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024232:	3301      	adds	r3, #1
 8024234:	449e      	add	lr, r3
 8024236:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802423a:	f01e 0f01 	tst.w	lr, #1
 802423e:	5cd3      	ldrb	r3, [r2, r3]
 8024240:	bf0c      	ite	eq
 8024242:	f003 030f 	andeq.w	r3, r3, #15
 8024246:	111b      	asrne	r3, r3, #4
 8024248:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802424c:	b2db      	uxtb	r3, r3
 802424e:	2f0f      	cmp	r7, #15
 8024250:	d911      	bls.n	8024276 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024252:	4b32      	ldr	r3, [pc, #200]	; (802431c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024254:	f240 1157 	movw	r1, #343	; 0x157
 8024258:	4a31      	ldr	r2, [pc, #196]	; (8024320 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802425a:	4832      	ldr	r0, [pc, #200]	; (8024324 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802425c:	f002 f928 	bl	80264b0 <__assert_func>
 8024260:	2600      	movs	r6, #0
 8024262:	e7a4      	b.n	80241ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024264:	2400      	movs	r4, #0
 8024266:	e7bd      	b.n	80241e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024268:	463c      	mov	r4, r7
 802426a:	e7be      	b.n	80241ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802426c:	2000      	movs	r0, #0
 802426e:	e7d5      	b.n	802421c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8024270:	2300      	movs	r3, #0
 8024272:	e7ec      	b.n	802424e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024274:	463b      	mov	r3, r7
 8024276:	2d0f      	cmp	r5, #15
 8024278:	d8eb      	bhi.n	8024252 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802427a:	b2bf      	uxth	r7, r7
 802427c:	b2ad      	uxth	r5, r5
 802427e:	fb07 f205 	mul.w	r2, r7, r5
 8024282:	013f      	lsls	r7, r7, #4
 8024284:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024288:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802428c:	1abf      	subs	r7, r7, r2
 802428e:	b2ad      	uxth	r5, r5
 8024290:	b2bf      	uxth	r7, r7
 8024292:	ebac 0c05 	sub.w	ip, ip, r5
 8024296:	437c      	muls	r4, r7
 8024298:	fa1f fc8c 	uxth.w	ip, ip
 802429c:	fb06 440c 	mla	r4, r6, ip, r4
 80242a0:	fb05 4400 	mla	r4, r5, r0, r4
 80242a4:	fb02 4303 	mla	r3, r2, r3, r4
 80242a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80242ac:	b353      	cbz	r3, 8024304 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80242ae:	4a1e      	ldr	r2, [pc, #120]	; (8024328 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80242b0:	7808      	ldrb	r0, [r1, #0]
 80242b2:	6814      	ldr	r4, [r2, #0]
 80242b4:	b29a      	uxth	r2, r3
 80242b6:	43db      	mvns	r3, r3
 80242b8:	b2e5      	uxtb	r5, r4
 80242ba:	b2db      	uxtb	r3, r3
 80242bc:	fb15 f502 	smulbb	r5, r5, r2
 80242c0:	fb00 5003 	mla	r0, r0, r3, r5
 80242c4:	b280      	uxth	r0, r0
 80242c6:	1c45      	adds	r5, r0, #1
 80242c8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80242cc:	784d      	ldrb	r5, [r1, #1]
 80242ce:	fb15 f503 	smulbb	r5, r5, r3
 80242d2:	1200      	asrs	r0, r0, #8
 80242d4:	7008      	strb	r0, [r1, #0]
 80242d6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80242da:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80242de:	fb00 5002 	mla	r0, r0, r2, r5
 80242e2:	b280      	uxth	r0, r0
 80242e4:	1c45      	adds	r5, r0, #1
 80242e6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80242ea:	1200      	asrs	r0, r0, #8
 80242ec:	7048      	strb	r0, [r1, #1]
 80242ee:	7888      	ldrb	r0, [r1, #2]
 80242f0:	fb10 f303 	smulbb	r3, r0, r3
 80242f4:	fb04 3202 	mla	r2, r4, r2, r3
 80242f8:	b292      	uxth	r2, r2
 80242fa:	1c53      	adds	r3, r2, #1
 80242fc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024300:	1212      	asrs	r2, r2, #8
 8024302:	708a      	strb	r2, [r1, #2]
 8024304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024308:	2f0f      	cmp	r7, #15
 802430a:	d8a2      	bhi.n	8024252 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802430c:	462b      	mov	r3, r5
 802430e:	4628      	mov	r0, r5
 8024310:	e7b3      	b.n	802427a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8024312:	2d00      	cmp	r5, #0
 8024314:	d1a8      	bne.n	8024268 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8024316:	462c      	mov	r4, r5
 8024318:	e7f8      	b.n	802430c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802431a:	bf00      	nop
 802431c:	0802e527 	.word	0x0802e527
 8024320:	0802ea8f 	.word	0x0802ea8f
 8024324:	0802e5f0 	.word	0x0802e5f0
 8024328:	20056778 	.word	0x20056778

0802432c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024330:	ed2d 8b08 	vpush	{d8-d11}
 8024334:	b093      	sub	sp, #76	; 0x4c
 8024336:	461c      	mov	r4, r3
 8024338:	eeb0 aa40 	vmov.f32	s20, s0
 802433c:	920c      	str	r2, [sp, #48]	; 0x30
 802433e:	eef0 9a60 	vmov.f32	s19, s1
 8024342:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024344:	eeb0 9a41 	vmov.f32	s18, s2
 8024348:	9011      	str	r0, [sp, #68]	; 0x44
 802434a:	eeb0 8a62 	vmov.f32	s16, s5
 802434e:	6850      	ldr	r0, [r2, #4]
 8024350:	eef0 8a43 	vmov.f32	s17, s6
 8024354:	9107      	str	r1, [sp, #28]
 8024356:	eef0 ba44 	vmov.f32	s23, s8
 802435a:	6812      	ldr	r2, [r2, #0]
 802435c:	eeb0 ba64 	vmov.f32	s22, s9
 8024360:	eef0 aa45 	vmov.f32	s21, s10
 8024364:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024368:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 802436c:	fb00 1303 	mla	r3, r0, r3, r1
 8024370:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024374:	eb02 0b03 	add.w	fp, r2, r3
 8024378:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802437a:	689b      	ldr	r3, [r3, #8]
 802437c:	3301      	adds	r3, #1
 802437e:	f023 0301 	bic.w	r3, r3, #1
 8024382:	9309      	str	r3, [sp, #36]	; 0x24
 8024384:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024386:	f8d3 8000 	ldr.w	r8, [r3]
 802438a:	9b07      	ldr	r3, [sp, #28]
 802438c:	2b00      	cmp	r3, #0
 802438e:	dc03      	bgt.n	8024398 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024392:	2b00      	cmp	r3, #0
 8024394:	f340 822b 	ble.w	80247ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024398:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802439a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802439e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243a2:	1e48      	subs	r0, r1, #1
 80243a4:	1e57      	subs	r7, r2, #1
 80243a6:	2c00      	cmp	r4, #0
 80243a8:	f340 80d7 	ble.w	802455a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80243ac:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80243b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80243b4:	d406      	bmi.n	80243c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80243b6:	4584      	cmp	ip, r0
 80243b8:	da04      	bge.n	80243c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80243ba:	2b00      	cmp	r3, #0
 80243bc:	db02      	blt.n	80243c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80243be:	42bb      	cmp	r3, r7
 80243c0:	f2c0 80cc 	blt.w	802455c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80243c4:	f11c 0c01 	adds.w	ip, ip, #1
 80243c8:	f100 80bf 	bmi.w	802454a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80243cc:	4561      	cmp	r1, ip
 80243ce:	f2c0 80bc 	blt.w	802454a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80243d2:	3301      	adds	r3, #1
 80243d4:	f100 80b9 	bmi.w	802454a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80243d8:	429a      	cmp	r2, r3
 80243da:	f2c0 80b6 	blt.w	802454a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80243de:	46a2      	mov	sl, r4
 80243e0:	465f      	mov	r7, fp
 80243e2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80243e6:	f1ba 0f00 	cmp.w	sl, #0
 80243ea:	f340 80d4 	ble.w	8024596 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80243ee:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80243f2:	1430      	asrs	r0, r6, #16
 80243f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80243f8:	9308      	str	r3, [sp, #32]
 80243fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243fc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024400:	142b      	asrs	r3, r5, #16
 8024402:	f100 8124 	bmi.w	802464e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024406:	f10c 32ff 	add.w	r2, ip, #4294967295
 802440a:	4293      	cmp	r3, r2
 802440c:	f280 811f 	bge.w	802464e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024410:	2800      	cmp	r0, #0
 8024412:	f2c0 811c 	blt.w	802464e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024416:	f10e 32ff 	add.w	r2, lr, #4294967295
 802441a:	4290      	cmp	r0, r2
 802441c:	f280 8117 	bge.w	802464e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024420:	fb00 3309 	mla	r3, r0, r9, r3
 8024424:	0858      	lsrs	r0, r3, #1
 8024426:	07da      	lsls	r2, r3, #31
 8024428:	9a08      	ldr	r2, [sp, #32]
 802442a:	f818 c000 	ldrb.w	ip, [r8, r0]
 802442e:	bf54      	ite	pl
 8024430:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024434:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024438:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802443c:	fa5f fc8c 	uxtb.w	ip, ip
 8024440:	2a00      	cmp	r2, #0
 8024442:	f000 80ed 	beq.w	8024620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024446:	1c58      	adds	r0, r3, #1
 8024448:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802444c:	07c0      	lsls	r0, r0, #31
 802444e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8024452:	bf54      	ite	pl
 8024454:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024458:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802445c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024460:	fa5f fe8e 	uxtb.w	lr, lr
 8024464:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024468:	b1c9      	cbz	r1, 802449e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 802446a:	444b      	add	r3, r9
 802446c:	0858      	lsrs	r0, r3, #1
 802446e:	07da      	lsls	r2, r3, #31
 8024470:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024474:	bf54      	ite	pl
 8024476:	f000 000f 	andpl.w	r0, r0, #15
 802447a:	1100      	asrmi	r0, r0, #4
 802447c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024480:	b2c0      	uxtb	r0, r0
 8024482:	900a      	str	r0, [sp, #40]	; 0x28
 8024484:	1c58      	adds	r0, r3, #1
 8024486:	0843      	lsrs	r3, r0, #1
 8024488:	07c2      	lsls	r2, r0, #31
 802448a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802448e:	bf54      	ite	pl
 8024490:	f003 030f 	andpl.w	r3, r3, #15
 8024494:	111b      	asrmi	r3, r3, #4
 8024496:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802449a:	b2db      	uxtb	r3, r3
 802449c:	930e      	str	r3, [sp, #56]	; 0x38
 802449e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80244a2:	b289      	uxth	r1, r1
 80244a4:	fb02 f301 	mul.w	r3, r2, r1
 80244a8:	0112      	lsls	r2, r2, #4
 80244aa:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80244ae:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80244b2:	1ad2      	subs	r2, r2, r3
 80244b4:	b289      	uxth	r1, r1
 80244b6:	b292      	uxth	r2, r2
 80244b8:	1a40      	subs	r0, r0, r1
 80244ba:	fa1f fe80 	uxth.w	lr, r0
 80244be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80244c0:	4342      	muls	r2, r0
 80244c2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80244c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80244c8:	fb01 c102 	mla	r1, r1, r2, ip
 80244cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80244ce:	fb03 1302 	mla	r3, r3, r2, r1
 80244d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80244d6:	b383      	cbz	r3, 802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80244d8:	4ac7      	ldr	r2, [pc, #796]	; (80247f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80244da:	2bff      	cmp	r3, #255	; 0xff
 80244dc:	6812      	ldr	r2, [r2, #0]
 80244de:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80244e2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80244e6:	b2d2      	uxtb	r2, r2
 80244e8:	f000 80ac 	beq.w	8024644 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80244ec:	b299      	uxth	r1, r3
 80244ee:	43db      	mvns	r3, r3
 80244f0:	f897 c000 	ldrb.w	ip, [r7]
 80244f4:	fb12 f201 	smulbb	r2, r2, r1
 80244f8:	b2db      	uxtb	r3, r3
 80244fa:	fb10 f001 	smulbb	r0, r0, r1
 80244fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8024502:	fb1e f101 	smulbb	r1, lr, r1
 8024506:	b292      	uxth	r2, r2
 8024508:	f102 0c01 	add.w	ip, r2, #1
 802450c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024510:	1212      	asrs	r2, r2, #8
 8024512:	703a      	strb	r2, [r7, #0]
 8024514:	787a      	ldrb	r2, [r7, #1]
 8024516:	fb02 0003 	mla	r0, r2, r3, r0
 802451a:	b280      	uxth	r0, r0
 802451c:	1c42      	adds	r2, r0, #1
 802451e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024522:	78ba      	ldrb	r2, [r7, #2]
 8024524:	fb02 1303 	mla	r3, r2, r3, r1
 8024528:	1200      	asrs	r0, r0, #8
 802452a:	b29b      	uxth	r3, r3
 802452c:	7078      	strb	r0, [r7, #1]
 802452e:	f103 0e01 	add.w	lr, r3, #1
 8024532:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024536:	121b      	asrs	r3, r3, #8
 8024538:	70bb      	strb	r3, [r7, #2]
 802453a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802453c:	3703      	adds	r7, #3
 802453e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024542:	441d      	add	r5, r3
 8024544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024546:	441e      	add	r6, r3
 8024548:	e74d      	b.n	80243e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802454a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802454c:	3c01      	subs	r4, #1
 802454e:	f10b 0b03 	add.w	fp, fp, #3
 8024552:	441d      	add	r5, r3
 8024554:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024556:	441e      	add	r6, r3
 8024558:	e725      	b.n	80243a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802455a:	d021      	beq.n	80245a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802455c:	1e63      	subs	r3, r4, #1
 802455e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024560:	fb00 5003 	mla	r0, r0, r3, r5
 8024564:	1400      	asrs	r0, r0, #16
 8024566:	f53f af3a 	bmi.w	80243de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802456a:	3901      	subs	r1, #1
 802456c:	4288      	cmp	r0, r1
 802456e:	f6bf af36 	bge.w	80243de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024572:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024574:	fb01 6303 	mla	r3, r1, r3, r6
 8024578:	141b      	asrs	r3, r3, #16
 802457a:	f53f af30 	bmi.w	80243de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802457e:	3a01      	subs	r2, #1
 8024580:	4293      	cmp	r3, r2
 8024582:	f6bf af2c 	bge.w	80243de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024586:	f10b 0c03 	add.w	ip, fp, #3
 802458a:	46a6      	mov	lr, r4
 802458c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024590:	f1be 0f00 	cmp.w	lr, #0
 8024594:	dc79      	bgt.n	802468a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8024596:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802459a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802459e:	44a3      	add	fp, r4
 80245a0:	9b07      	ldr	r3, [sp, #28]
 80245a2:	2b00      	cmp	r3, #0
 80245a4:	f340 8123 	ble.w	80247ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80245a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80245ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245ae:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80245b2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80245b6:	eef0 6a48 	vmov.f32	s13, s16
 80245ba:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80245be:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80245c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245c6:	ee16 5a90 	vmov	r5, s13
 80245ca:	eef0 6a68 	vmov.f32	s13, s17
 80245ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245d2:	ee16 6a90 	vmov	r6, s13
 80245d6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80245da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80245de:	ee37 8a48 	vsub.f32	s16, s14, s16
 80245e2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80245e6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80245ea:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80245ee:	ee18 2a10 	vmov	r2, s16
 80245f2:	eeb0 8a47 	vmov.f32	s16, s14
 80245f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80245fa:	ee18 2a90 	vmov	r2, s17
 80245fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8024600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024602:	eef0 8a67 	vmov.f32	s17, s15
 8024606:	fb92 f3f3 	sdiv	r3, r2, r3
 802460a:	9328      	str	r3, [sp, #160]	; 0xa0
 802460c:	9b07      	ldr	r3, [sp, #28]
 802460e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024610:	3b01      	subs	r3, #1
 8024612:	9307      	str	r3, [sp, #28]
 8024614:	bf08      	it	eq
 8024616:	4614      	moveq	r4, r2
 8024618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802461a:	bf18      	it	ne
 802461c:	461c      	movne	r4, r3
 802461e:	e6b4      	b.n	802438a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024620:	2900      	cmp	r1, #0
 8024622:	f43f af3c 	beq.w	802449e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024626:	eb09 0003 	add.w	r0, r9, r3
 802462a:	0843      	lsrs	r3, r0, #1
 802462c:	07c0      	lsls	r0, r0, #31
 802462e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024632:	bf54      	ite	pl
 8024634:	f003 030f 	andpl.w	r3, r3, #15
 8024638:	111b      	asrmi	r3, r3, #4
 802463a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802463e:	b2db      	uxtb	r3, r3
 8024640:	930a      	str	r3, [sp, #40]	; 0x28
 8024642:	e72c      	b.n	802449e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024644:	703a      	strb	r2, [r7, #0]
 8024646:	7078      	strb	r0, [r7, #1]
 8024648:	f887 e002 	strb.w	lr, [r7, #2]
 802464c:	e775      	b.n	802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802464e:	1c5a      	adds	r2, r3, #1
 8024650:	f53f af73 	bmi.w	802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024654:	4594      	cmp	ip, r2
 8024656:	f6ff af70 	blt.w	802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802465a:	1c42      	adds	r2, r0, #1
 802465c:	f53f af6d 	bmi.w	802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024660:	4596      	cmp	lr, r2
 8024662:	f6ff af6a 	blt.w	802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024666:	9302      	str	r3, [sp, #8]
 8024668:	fa0f f38e 	sxth.w	r3, lr
 802466c:	9a08      	ldr	r2, [sp, #32]
 802466e:	9301      	str	r3, [sp, #4]
 8024670:	fa0f f38c 	sxth.w	r3, ip
 8024674:	9105      	str	r1, [sp, #20]
 8024676:	4639      	mov	r1, r7
 8024678:	9300      	str	r3, [sp, #0]
 802467a:	464b      	mov	r3, r9
 802467c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024680:	4642      	mov	r2, r8
 8024682:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024684:	f7ff fd70 	bl	8024168 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024688:	e757      	b.n	802453a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802468a:	142a      	asrs	r2, r5, #16
 802468c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024690:	1433      	asrs	r3, r6, #16
 8024692:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8024696:	fb09 2303 	mla	r3, r9, r3, r2
 802469a:	085a      	lsrs	r2, r3, #1
 802469c:	07d9      	lsls	r1, r3, #31
 802469e:	f818 2002 	ldrb.w	r2, [r8, r2]
 80246a2:	bf54      	ite	pl
 80246a4:	f002 020f 	andpl.w	r2, r2, #15
 80246a8:	1112      	asrmi	r2, r2, #4
 80246aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80246ae:	b2d2      	uxtb	r2, r2
 80246b0:	2800      	cmp	r0, #0
 80246b2:	f000 8085 	beq.w	80247c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80246b6:	f103 0a01 	add.w	sl, r3, #1
 80246ba:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80246be:	f01a 0f01 	tst.w	sl, #1
 80246c2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80246c6:	bf0c      	ite	eq
 80246c8:	f001 010f 	andeq.w	r1, r1, #15
 80246cc:	1109      	asrne	r1, r1, #4
 80246ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80246d2:	b2c9      	uxtb	r1, r1
 80246d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80246d6:	b1df      	cbz	r7, 8024710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80246d8:	444b      	add	r3, r9
 80246da:	0859      	lsrs	r1, r3, #1
 80246dc:	f013 0f01 	tst.w	r3, #1
 80246e0:	f103 0301 	add.w	r3, r3, #1
 80246e4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80246e8:	bf0c      	ite	eq
 80246ea:	f001 010f 	andeq.w	r1, r1, #15
 80246ee:	1109      	asrne	r1, r1, #4
 80246f0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80246f4:	b2c9      	uxtb	r1, r1
 80246f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80246f8:	0859      	lsrs	r1, r3, #1
 80246fa:	07db      	lsls	r3, r3, #31
 80246fc:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024700:	bf54      	ite	pl
 8024702:	f001 010f 	andpl.w	r1, r1, #15
 8024706:	1109      	asrmi	r1, r1, #4
 8024708:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802470c:	b2c9      	uxtb	r1, r1
 802470e:	9110      	str	r1, [sp, #64]	; 0x40
 8024710:	b280      	uxth	r0, r0
 8024712:	b2bf      	uxth	r7, r7
 8024714:	fb00 f307 	mul.w	r3, r0, r7
 8024718:	0100      	lsls	r0, r0, #4
 802471a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802471e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024722:	1ac0      	subs	r0, r0, r3
 8024724:	b2bf      	uxth	r7, r7
 8024726:	b280      	uxth	r0, r0
 8024728:	1bc9      	subs	r1, r1, r7
 802472a:	fa1f fa81 	uxth.w	sl, r1
 802472e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024730:	4348      	muls	r0, r1
 8024732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024734:	fb02 020a 	mla	r2, r2, sl, r0
 8024738:	fb07 2701 	mla	r7, r7, r1, r2
 802473c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802473e:	fb03 7302 	mla	r3, r3, r2, r7
 8024742:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024746:	b393      	cbz	r3, 80247ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024748:	4a2b      	ldr	r2, [pc, #172]	; (80247f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802474a:	2bff      	cmp	r3, #255	; 0xff
 802474c:	6811      	ldr	r1, [r2, #0]
 802474e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024752:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024756:	b2c9      	uxtb	r1, r1
 8024758:	d042      	beq.n	80247e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802475a:	b298      	uxth	r0, r3
 802475c:	43db      	mvns	r3, r3
 802475e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024762:	fb11 f100 	smulbb	r1, r1, r0
 8024766:	b2db      	uxtb	r3, r3
 8024768:	fb17 f700 	smulbb	r7, r7, r0
 802476c:	fb02 1103 	mla	r1, r2, r3, r1
 8024770:	fb1a f000 	smulbb	r0, sl, r0
 8024774:	b289      	uxth	r1, r1
 8024776:	1c4a      	adds	r2, r1, #1
 8024778:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802477c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024780:	fb02 7703 	mla	r7, r2, r3, r7
 8024784:	1209      	asrs	r1, r1, #8
 8024786:	b2bf      	uxth	r7, r7
 8024788:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802478c:	1c7a      	adds	r2, r7, #1
 802478e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024792:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024796:	fb02 0303 	mla	r3, r2, r3, r0
 802479a:	123f      	asrs	r7, r7, #8
 802479c:	b29b      	uxth	r3, r3
 802479e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80247a2:	1c5a      	adds	r2, r3, #1
 80247a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80247a8:	121b      	asrs	r3, r3, #8
 80247aa:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80247ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80247b0:	f10c 0c03 	add.w	ip, ip, #3
 80247b4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80247b8:	441d      	add	r5, r3
 80247ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247bc:	441e      	add	r6, r3
 80247be:	e6e7      	b.n	8024590 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80247c0:	2f00      	cmp	r7, #0
 80247c2:	d0a5      	beq.n	8024710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80247c4:	444b      	add	r3, r9
 80247c6:	0859      	lsrs	r1, r3, #1
 80247c8:	07db      	lsls	r3, r3, #31
 80247ca:	f818 1001 	ldrb.w	r1, [r8, r1]
 80247ce:	bf54      	ite	pl
 80247d0:	f001 010f 	andpl.w	r1, r1, #15
 80247d4:	1109      	asrmi	r1, r1, #4
 80247d6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80247da:	b2c9      	uxtb	r1, r1
 80247dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80247de:	e797      	b.n	8024710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80247e0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80247e4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80247e8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80247ec:	e7df      	b.n	80247ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80247ee:	b013      	add	sp, #76	; 0x4c
 80247f0:	ecbd 8b08 	vpop	{d8-d11}
 80247f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247f8:	20056778 	.word	0x20056778

080247fc <CRC_Lock>:
 80247fc:	4a20      	ldr	r2, [pc, #128]	; (8024880 <CRC_Lock+0x84>)
 80247fe:	b530      	push	{r4, r5, lr}
 8024800:	6813      	ldr	r3, [r2, #0]
 8024802:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024806:	f24c 2540 	movw	r5, #49728	; 0xc240
 802480a:	f023 0301 	bic.w	r3, r3, #1
 802480e:	6013      	str	r3, [r2, #0]
 8024810:	4b1c      	ldr	r3, [pc, #112]	; (8024884 <CRC_Lock+0x88>)
 8024812:	681a      	ldr	r2, [r3, #0]
 8024814:	4022      	ands	r2, r4
 8024816:	42aa      	cmp	r2, r5
 8024818:	d005      	beq.n	8024826 <CRC_Lock+0x2a>
 802481a:	681b      	ldr	r3, [r3, #0]
 802481c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024820:	4023      	ands	r3, r4
 8024822:	4293      	cmp	r3, r2
 8024824:	d124      	bne.n	8024870 <CRC_Lock+0x74>
 8024826:	4b18      	ldr	r3, [pc, #96]	; (8024888 <CRC_Lock+0x8c>)
 8024828:	681b      	ldr	r3, [r3, #0]
 802482a:	bb0b      	cbnz	r3, 8024870 <CRC_Lock+0x74>
 802482c:	4b17      	ldr	r3, [pc, #92]	; (802488c <CRC_Lock+0x90>)
 802482e:	681a      	ldr	r2, [r3, #0]
 8024830:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024834:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024838:	d00d      	beq.n	8024856 <CRC_Lock+0x5a>
 802483a:	681a      	ldr	r2, [r3, #0]
 802483c:	f240 4483 	movw	r4, #1155	; 0x483
 8024840:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024844:	42a2      	cmp	r2, r4
 8024846:	d006      	beq.n	8024856 <CRC_Lock+0x5a>
 8024848:	681b      	ldr	r3, [r3, #0]
 802484a:	f240 4285 	movw	r2, #1157	; 0x485
 802484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024852:	4293      	cmp	r3, r2
 8024854:	d10c      	bne.n	8024870 <CRC_Lock+0x74>
 8024856:	4b0e      	ldr	r3, [pc, #56]	; (8024890 <CRC_Lock+0x94>)
 8024858:	2201      	movs	r2, #1
 802485a:	601a      	str	r2, [r3, #0]
 802485c:	681a      	ldr	r2, [r3, #0]
 802485e:	2a00      	cmp	r2, #0
 8024860:	d1fc      	bne.n	802485c <CRC_Lock+0x60>
 8024862:	4b0c      	ldr	r3, [pc, #48]	; (8024894 <CRC_Lock+0x98>)
 8024864:	6018      	str	r0, [r3, #0]
 8024866:	6818      	ldr	r0, [r3, #0]
 8024868:	1a43      	subs	r3, r0, r1
 802486a:	4258      	negs	r0, r3
 802486c:	4158      	adcs	r0, r3
 802486e:	bd30      	pop	{r4, r5, pc}
 8024870:	4b09      	ldr	r3, [pc, #36]	; (8024898 <CRC_Lock+0x9c>)
 8024872:	2201      	movs	r2, #1
 8024874:	601a      	str	r2, [r3, #0]
 8024876:	681a      	ldr	r2, [r3, #0]
 8024878:	2a00      	cmp	r2, #0
 802487a:	d1fc      	bne.n	8024876 <CRC_Lock+0x7a>
 802487c:	4b07      	ldr	r3, [pc, #28]	; (802489c <CRC_Lock+0xa0>)
 802487e:	e7f1      	b.n	8024864 <CRC_Lock+0x68>
 8024880:	e0002000 	.word	0xe0002000
 8024884:	e000ed00 	.word	0xe000ed00
 8024888:	e0042000 	.word	0xe0042000
 802488c:	5c001000 	.word	0x5c001000
 8024890:	58024c08 	.word	0x58024c08
 8024894:	58024c00 	.word	0x58024c00
 8024898:	40023008 	.word	0x40023008
 802489c:	40023000 	.word	0x40023000

080248a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80248a0:	6101      	str	r1, [r0, #16]
 80248a2:	4770      	bx	lr

080248a4 <_ZN8touchgfx8Gestures4tickEv>:
 80248a4:	7b83      	ldrb	r3, [r0, #14]
 80248a6:	b14b      	cbz	r3, 80248bc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80248a8:	8903      	ldrh	r3, [r0, #8]
 80248aa:	3301      	adds	r3, #1
 80248ac:	b29b      	uxth	r3, r3
 80248ae:	2b07      	cmp	r3, #7
 80248b0:	8103      	strh	r3, [r0, #8]
 80248b2:	bf81      	itttt	hi
 80248b4:	2300      	movhi	r3, #0
 80248b6:	8143      	strhhi	r3, [r0, #10]
 80248b8:	8183      	strhhi	r3, [r0, #12]
 80248ba:	7383      	strbhi	r3, [r0, #14]
 80248bc:	4770      	bx	lr
	...

080248c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80248c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80248c4:	4604      	mov	r4, r0
 80248c6:	4698      	mov	r8, r3
 80248c8:	8880      	ldrh	r0, [r0, #4]
 80248ca:	4617      	mov	r7, r2
 80248cc:	4b1d      	ldr	r3, [pc, #116]	; (8024944 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80248ce:	460e      	mov	r6, r1
 80248d0:	f8ad 0006 	strh.w	r0, [sp, #6]
 80248d4:	eba8 0000 	sub.w	r0, r8, r0
 80248d8:	9300      	str	r3, [sp, #0]
 80248da:	2300      	movs	r3, #0
 80248dc:	b280      	uxth	r0, r0
 80248de:	8aa2      	ldrh	r2, [r4, #20]
 80248e0:	f88d 3004 	strb.w	r3, [sp, #4]
 80248e4:	b203      	sxth	r3, r0
 80248e6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80248ea:	88e1      	ldrh	r1, [r4, #6]
 80248ec:	2b00      	cmp	r3, #0
 80248ee:	f8ad 800a 	strh.w	r8, [sp, #10]
 80248f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80248f6:	bfb8      	it	lt
 80248f8:	4240      	neglt	r0, r0
 80248fa:	f8ad 500c 	strh.w	r5, [sp, #12]
 80248fe:	bfb8      	it	lt
 8024900:	b203      	sxthlt	r3, r0
 8024902:	4293      	cmp	r3, r2
 8024904:	dc08      	bgt.n	8024918 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024906:	1a69      	subs	r1, r5, r1
 8024908:	b289      	uxth	r1, r1
 802490a:	b20b      	sxth	r3, r1
 802490c:	2b00      	cmp	r3, #0
 802490e:	bfbc      	itt	lt
 8024910:	4249      	neglt	r1, r1
 8024912:	b20b      	sxthlt	r3, r1
 8024914:	429a      	cmp	r2, r3
 8024916:	da13      	bge.n	8024940 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024918:	6920      	ldr	r0, [r4, #16]
 802491a:	4669      	mov	r1, sp
 802491c:	eba8 0606 	sub.w	r6, r8, r6
 8024920:	1bef      	subs	r7, r5, r7
 8024922:	6803      	ldr	r3, [r0, #0]
 8024924:	685b      	ldr	r3, [r3, #4]
 8024926:	4798      	blx	r3
 8024928:	2300      	movs	r3, #0
 802492a:	2001      	movs	r0, #1
 802492c:	8166      	strh	r6, [r4, #10]
 802492e:	8123      	strh	r3, [r4, #8]
 8024930:	81a7      	strh	r7, [r4, #12]
 8024932:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024936:	80e5      	strh	r5, [r4, #6]
 8024938:	73a0      	strb	r0, [r4, #14]
 802493a:	b004      	add	sp, #16
 802493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024940:	2000      	movs	r0, #0
 8024942:	e7fa      	b.n	802493a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024944:	0802d984 	.word	0x0802d984

08024948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024948:	b5f0      	push	{r4, r5, r6, r7, lr}
 802494a:	461e      	mov	r6, r3
 802494c:	1e4b      	subs	r3, r1, #1
 802494e:	b085      	sub	sp, #20
 8024950:	4604      	mov	r4, r0
 8024952:	2b01      	cmp	r3, #1
 8024954:	460d      	mov	r5, r1
 8024956:	4617      	mov	r7, r2
 8024958:	d84b      	bhi.n	80249f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802495a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802495e:	1cd3      	adds	r3, r2, #3
 8024960:	b29b      	uxth	r3, r3
 8024962:	2b06      	cmp	r3, #6
 8024964:	d916      	bls.n	8024994 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024966:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024a08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802496a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802496e:	f8cd c004 	str.w	ip, [sp, #4]
 8024972:	f04f 0c00 	mov.w	ip, #0
 8024976:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802497a:	6900      	ldr	r0, [r0, #16]
 802497c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024980:	a901      	add	r1, sp, #4
 8024982:	f88d c008 	strb.w	ip, [sp, #8]
 8024986:	f8ad 200a 	strh.w	r2, [sp, #10]
 802498a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802498e:	6803      	ldr	r3, [r0, #0]
 8024990:	689b      	ldr	r3, [r3, #8]
 8024992:	4798      	blx	r3
 8024994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024998:	1cd3      	adds	r3, r2, #3
 802499a:	b29b      	uxth	r3, r3
 802499c:	2b06      	cmp	r3, #6
 802499e:	d916      	bls.n	80249ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80249a0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024a08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80249a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80249a8:	f8cd c004 	str.w	ip, [sp, #4]
 80249ac:	f04f 0c01 	mov.w	ip, #1
 80249b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80249b4:	6920      	ldr	r0, [r4, #16]
 80249b6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80249ba:	a901      	add	r1, sp, #4
 80249bc:	f88d c008 	strb.w	ip, [sp, #8]
 80249c0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80249c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80249c8:	6803      	ldr	r3, [r0, #0]
 80249ca:	689b      	ldr	r3, [r3, #8]
 80249cc:	4798      	blx	r3
 80249ce:	4b0d      	ldr	r3, [pc, #52]	; (8024a04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80249d0:	a901      	add	r1, sp, #4
 80249d2:	6920      	ldr	r0, [r4, #16]
 80249d4:	9301      	str	r3, [sp, #4]
 80249d6:	2300      	movs	r3, #0
 80249d8:	f88d 5008 	strb.w	r5, [sp, #8]
 80249dc:	f8ad 700a 	strh.w	r7, [sp, #10]
 80249e0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80249e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80249e8:	6803      	ldr	r3, [r0, #0]
 80249ea:	681b      	ldr	r3, [r3, #0]
 80249ec:	4798      	blx	r3
 80249ee:	b005      	add	sp, #20
 80249f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249f2:	2900      	cmp	r1, #0
 80249f4:	d1eb      	bne.n	80249ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80249f6:	80a2      	strh	r2, [r4, #4]
 80249f8:	80c6      	strh	r6, [r0, #6]
 80249fa:	60a1      	str	r1, [r4, #8]
 80249fc:	81a1      	strh	r1, [r4, #12]
 80249fe:	73a1      	strb	r1, [r4, #14]
 8024a00:	e7e5      	b.n	80249ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024a02:	bf00      	nop
 8024a04:	0802d970 	.word	0x0802d970
 8024a08:	0802d998 	.word	0x0802d998

08024a0c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 8024a0c:	10c9      	asrs	r1, r1, #3
 8024a0e:	2900      	cmp	r1, #0
 8024a10:	bfb8      	it	lt
 8024a12:	4249      	neglt	r1, r1
 8024a14:	2801      	cmp	r0, #1
 8024a16:	d108      	bne.n	8024a2a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024a18:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024a1c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024a20:	4601      	mov	r1, r0
 8024a22:	dd02      	ble.n	8024a2a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024a24:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024a28:	4770      	bx	lr
 8024a2a:	29ff      	cmp	r1, #255	; 0xff
 8024a2c:	bfa8      	it	ge
 8024a2e:	21ff      	movge	r1, #255	; 0xff
 8024a30:	4608      	mov	r0, r1
 8024a32:	4770      	bx	lr

08024a34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a38:	688c      	ldr	r4, [r1, #8]
 8024a3a:	b087      	sub	sp, #28
 8024a3c:	4607      	mov	r7, r0
 8024a3e:	2c00      	cmp	r4, #0
 8024a40:	db2b      	blt.n	8024a9a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024a42:	6803      	ldr	r3, [r0, #0]
 8024a44:	691a      	ldr	r2, [r3, #16]
 8024a46:	42a2      	cmp	r2, r4
 8024a48:	dd27      	ble.n	8024a9a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024a4a:	685a      	ldr	r2, [r3, #4]
 8024a4c:	695e      	ldr	r6, [r3, #20]
 8024a4e:	68cd      	ldr	r5, [r1, #12]
 8024a50:	fb06 2604 	mla	r6, r6, r4, r2
 8024a54:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024a58:	698a      	ldr	r2, [r1, #24]
 8024a5a:	f893 a008 	ldrb.w	sl, [r3, #8]
 8024a5e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024a62:	9205      	str	r2, [sp, #20]
 8024a64:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024a68:	9b05      	ldr	r3, [sp, #20]
 8024a6a:	6839      	ldr	r1, [r7, #0]
 8024a6c:	eb03 0c02 	add.w	ip, r3, r2
 8024a70:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024a74:	68c9      	ldr	r1, [r1, #12]
 8024a76:	1898      	adds	r0, r3, r2
 8024a78:	4288      	cmp	r0, r1
 8024a7a:	db02      	blt.n	8024a82 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024a7c:	1a8b      	subs	r3, r1, r2
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	dd09      	ble.n	8024a96 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024a82:	6878      	ldr	r0, [r7, #4]
 8024a84:	6801      	ldr	r1, [r0, #0]
 8024a86:	9400      	str	r4, [sp, #0]
 8024a88:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024a8c:	4653      	mov	r3, sl
 8024a8e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8024a92:	4631      	mov	r1, r6
 8024a94:	47d8      	blx	fp
 8024a96:	3d01      	subs	r5, #1
 8024a98:	d1e4      	bne.n	8024a64 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024a9a:	b007      	add	sp, #28
 8024a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024aa0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024aa0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024aa4:	b90b      	cbnz	r3, 8024aaa <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8024aa6:	f001 b991 	b.w	8025dcc <_ZN8touchgfx7Outline6lineToEii>
 8024aaa:	4770      	bx	lr

08024aac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ab0:	4604      	mov	r4, r0
 8024ab2:	2600      	movs	r6, #0
 8024ab4:	4b8f      	ldr	r3, [pc, #572]	; (8024cf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8024ab6:	f100 0518 	add.w	r5, r0, #24
 8024aba:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8024abe:	b086      	sub	sp, #24
 8024ac0:	4690      	mov	r8, r2
 8024ac2:	e9c0 3100 	strd	r3, r1, [r0]
 8024ac6:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8024aca:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8024ace:	4628      	mov	r0, r5
 8024ad0:	f001 fba0 	bl	8026214 <_ZN8touchgfx15RenderingBufferC1Ev>
 8024ad4:	4638      	mov	r0, r7
 8024ad6:	f000 fb45 	bl	8025164 <_ZN8touchgfx7OutlineC1Ev>
 8024ada:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8024ade:	f001 fb41 	bl	8026164 <_ZN8touchgfx8ScanlineC1Ev>
 8024ae2:	2301      	movs	r3, #1
 8024ae4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8024ae8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8024aec:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8024af0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024af4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8024af8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8024afc:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8024b00:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8024b04:	f7f2 ff36 	bl	8017974 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8024b08:	b928      	cbnz	r0, 8024b16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 8024b0a:	4b7b      	ldr	r3, [pc, #492]	; (8024cf8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024b0c:	212d      	movs	r1, #45	; 0x2d
 8024b0e:	4a7b      	ldr	r2, [pc, #492]	; (8024cfc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024b10:	487b      	ldr	r0, [pc, #492]	; (8024d00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8024b12:	f001 fccd 	bl	80264b0 <__assert_func>
 8024b16:	f9b8 2000 	ldrsh.w	r2, [r8]
 8024b1a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024b1e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024b22:	4410      	add	r0, r2
 8024b24:	9602      	str	r6, [sp, #8]
 8024b26:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8024b2a:	b280      	uxth	r0, r0
 8024b2c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024b30:	fa0f fa80 	sxth.w	sl, r0
 8024b34:	f1ba 0f00 	cmp.w	sl, #0
 8024b38:	dd70      	ble.n	8024c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024b3a:	4591      	cmp	r9, r2
 8024b3c:	dd6e      	ble.n	8024c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024b3e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024b42:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024b46:	440b      	add	r3, r1
 8024b48:	b29b      	uxth	r3, r3
 8024b4a:	b21e      	sxth	r6, r3
 8024b4c:	2e00      	cmp	r6, #0
 8024b4e:	dd65      	ble.n	8024c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024b50:	458e      	cmp	lr, r1
 8024b52:	dd63      	ble.n	8024c1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024b54:	45d1      	cmp	r9, sl
 8024b56:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8024b5a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024b5e:	bfb8      	it	lt
 8024b60:	fa1f f089 	uxthlt.w	r0, r9
 8024b64:	45b6      	cmp	lr, r6
 8024b66:	f8ad 2008 	strh.w	r2, [sp, #8]
 8024b6a:	bfb8      	it	lt
 8024b6c:	fa1f f38e 	uxthlt.w	r3, lr
 8024b70:	1a80      	subs	r0, r0, r2
 8024b72:	f8ad 100a 	strh.w	r1, [sp, #10]
 8024b76:	1a5b      	subs	r3, r3, r1
 8024b78:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024b7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024b80:	f10d 0808 	add.w	r8, sp, #8
 8024b84:	ae04      	add	r6, sp, #16
 8024b86:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024b8a:	e886 0003 	stmia.w	r6, {r0, r1}
 8024b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8024b92:	4660      	mov	r0, ip
 8024b94:	4631      	mov	r1, r6
 8024b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b98:	4798      	blx	r3
 8024b9a:	6861      	ldr	r1, [r4, #4]
 8024b9c:	4640      	mov	r0, r8
 8024b9e:	3104      	adds	r1, #4
 8024ba0:	f7f4 fa02 	bl	8018fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024ba4:	4630      	mov	r0, r6
 8024ba6:	f7f4 fa17 	bl	8018fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024baa:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024bae:	f7f2 fe71 	bl	8017894 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024bb2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8024bb6:	4638      	mov	r0, r7
 8024bb8:	f000 fab0 	bl	802511c <_ZN8touchgfx7Outline5resetEv>
 8024bbc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024bc0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024bc4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8024bc8:	015b      	lsls	r3, r3, #5
 8024bca:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8024bce:	0152      	lsls	r2, r2, #5
 8024bd0:	60e3      	str	r3, [r4, #12]
 8024bd2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8024bd6:	60a2      	str	r2, [r4, #8]
 8024bd8:	015b      	lsls	r3, r3, #5
 8024bda:	6123      	str	r3, [r4, #16]
 8024bdc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024be0:	015b      	lsls	r3, r3, #5
 8024be2:	6163      	str	r3, [r4, #20]
 8024be4:	4b47      	ldr	r3, [pc, #284]	; (8024d04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024be6:	6818      	ldr	r0, [r3, #0]
 8024be8:	6803      	ldr	r3, [r0, #0]
 8024bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024bec:	4798      	blx	r3
 8024bee:	4606      	mov	r6, r0
 8024bf0:	f7e1 f8e4 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8024bf4:	6803      	ldr	r3, [r0, #0]
 8024bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024bf8:	4798      	blx	r3
 8024bfa:	4607      	mov	r7, r0
 8024bfc:	f7e1 f8de 	bl	8005dbc <_ZN8touchgfx3HAL3lcdEv>
 8024c00:	6803      	ldr	r3, [r0, #0]
 8024c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c04:	4798      	blx	r3
 8024c06:	280d      	cmp	r0, #13
 8024c08:	d854      	bhi.n	8024cb4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 8024c0a:	e8df f000 	tbb	[pc, r0]
 8024c0e:	554b      	.short	0x554b
 8024c10:	2b6e0a66 	.word	0x2b6e0a66
 8024c14:	5f5f5f3b 	.word	0x5f5f5f3b
 8024c18:	6e6e5f5f 	.word	0x6e6e5f5f
 8024c1c:	2300      	movs	r3, #0
 8024c1e:	9303      	str	r3, [sp, #12]
 8024c20:	e7ae      	b.n	8024b80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8024c22:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024c26:	2108      	movs	r1, #8
 8024c28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024c2c:	fb92 f1f1 	sdiv	r1, r2, r1
 8024c30:	fb07 1303 	mla	r3, r7, r3, r1
 8024c34:	441e      	add	r6, r3
 8024c36:	4253      	negs	r3, r2
 8024c38:	f002 0207 	and.w	r2, r2, #7
 8024c3c:	f003 0307 	and.w	r3, r3, #7
 8024c40:	bf58      	it	pl
 8024c42:	425a      	negpl	r2, r3
 8024c44:	b2d2      	uxtb	r2, r2
 8024c46:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8024c4a:	4628      	mov	r0, r5
 8024c4c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024c50:	6721      	str	r1, [r4, #112]	; 0x70
 8024c52:	e9cd 1700 	strd	r1, r7, [sp]
 8024c56:	4631      	mov	r1, r6
 8024c58:	f001 fae8 	bl	802622c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8024c5c:	4620      	mov	r0, r4
 8024c5e:	b006      	add	sp, #24
 8024c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c64:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024c68:	2104      	movs	r1, #4
 8024c6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024c6e:	fb92 f1f1 	sdiv	r1, r2, r1
 8024c72:	fb07 1303 	mla	r3, r7, r3, r1
 8024c76:	441e      	add	r6, r3
 8024c78:	4253      	negs	r3, r2
 8024c7a:	f002 0203 	and.w	r2, r2, #3
 8024c7e:	f003 0303 	and.w	r3, r3, #3
 8024c82:	e7dd      	b.n	8024c40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024c84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024c88:	2102      	movs	r1, #2
 8024c8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024c8e:	2a00      	cmp	r2, #0
 8024c90:	fb92 f1f1 	sdiv	r1, r2, r1
 8024c94:	f002 0201 	and.w	r2, r2, #1
 8024c98:	fb07 1303 	mla	r3, r7, r3, r1
 8024c9c:	bfb8      	it	lt
 8024c9e:	4252      	neglt	r2, r2
 8024ca0:	441e      	add	r6, r3
 8024ca2:	e7cf      	b.n	8024c44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8024ca4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024ca8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024cac:	437b      	muls	r3, r7
 8024cae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024cb2:	441e      	add	r6, r3
 8024cb4:	2200      	movs	r2, #0
 8024cb6:	e7c6      	b.n	8024c46 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8024cb8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024cbc:	2103      	movs	r1, #3
 8024cbe:	fb07 f203 	mul.w	r2, r7, r3
 8024cc2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8024cc6:	fb13 2301 	smlabb	r3, r3, r1, r2
 8024cca:	e7f2      	b.n	8024cb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8024ccc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024cd0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024cd4:	fb07 2303 	mla	r3, r7, r3, r2
 8024cd8:	e7eb      	b.n	8024cb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8024cda:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024cde:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024ce2:	437b      	muls	r3, r7
 8024ce4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024ce8:	e7e3      	b.n	8024cb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8024cea:	4b07      	ldr	r3, [pc, #28]	; (8024d08 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8024cec:	216c      	movs	r1, #108	; 0x6c
 8024cee:	4a03      	ldr	r2, [pc, #12]	; (8024cfc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024cf0:	e70e      	b.n	8024b10 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8024cf2:	bf00      	nop
 8024cf4:	0802edb4 	.word	0x0802edb4
 8024cf8:	0802ecff 	.word	0x0802ecff
 8024cfc:	0802edbc 	.word	0x0802edbc
 8024d00:	0802ed5b 	.word	0x0802ed5b
 8024d04:	20056750 	.word	0x20056750
 8024d08:	0802ed8f 	.word	0x0802ed8f

08024d0c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8024d0c:	6812      	ldr	r2, [r2, #0]
 8024d0e:	2a00      	cmp	r2, #0
 8024d10:	db0b      	blt.n	8024d2a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024d12:	9800      	ldr	r0, [sp, #0]
 8024d14:	6800      	ldr	r0, [r0, #0]
 8024d16:	4290      	cmp	r0, r2
 8024d18:	bfd4      	ite	le
 8024d1a:	2002      	movle	r0, #2
 8024d1c:	2000      	movgt	r0, #0
 8024d1e:	680a      	ldr	r2, [r1, #0]
 8024d20:	2a00      	cmp	r2, #0
 8024d22:	da04      	bge.n	8024d2e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024d24:	f040 0004 	orr.w	r0, r0, #4
 8024d28:	4770      	bx	lr
 8024d2a:	2001      	movs	r0, #1
 8024d2c:	e7f7      	b.n	8024d1e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8024d2e:	681b      	ldr	r3, [r3, #0]
 8024d30:	4293      	cmp	r3, r2
 8024d32:	bfd8      	it	le
 8024d34:	f040 0008 	orrle.w	r0, r0, #8
 8024d38:	4770      	bx	lr
	...

08024d3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8024d3c:	4b07      	ldr	r3, [pc, #28]	; (8024d5c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8024d3e:	b510      	push	{r4, lr}
 8024d40:	781b      	ldrb	r3, [r3, #0]
 8024d42:	2b01      	cmp	r3, #1
 8024d44:	d108      	bne.n	8024d58 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8024d46:	6843      	ldr	r3, [r0, #4]
 8024d48:	6814      	ldr	r4, [r2, #0]
 8024d4a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8024d4e:	680b      	ldr	r3, [r1, #0]
 8024d50:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024d54:	6013      	str	r3, [r2, #0]
 8024d56:	600c      	str	r4, [r1, #0]
 8024d58:	bd10      	pop	{r4, pc}
 8024d5a:	bf00      	nop
 8024d5c:	20056748 	.word	0x20056748

08024d60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d62:	b085      	sub	sp, #20
 8024d64:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024d68:	4604      	mov	r4, r0
 8024d6a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024d6e:	b33b      	cbz	r3, 8024dc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024d70:	aa02      	add	r2, sp, #8
 8024d72:	a903      	add	r1, sp, #12
 8024d74:	f7ff ffe2 	bl	8024d3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024d78:	68a3      	ldr	r3, [r4, #8]
 8024d7a:	9e03      	ldr	r6, [sp, #12]
 8024d7c:	aa02      	add	r2, sp, #8
 8024d7e:	9f02      	ldr	r7, [sp, #8]
 8024d80:	a903      	add	r1, sp, #12
 8024d82:	1af6      	subs	r6, r6, r3
 8024d84:	68e3      	ldr	r3, [r4, #12]
 8024d86:	4620      	mov	r0, r4
 8024d88:	1aff      	subs	r7, r7, r3
 8024d8a:	f104 0314 	add.w	r3, r4, #20
 8024d8e:	9603      	str	r6, [sp, #12]
 8024d90:	9300      	str	r3, [sp, #0]
 8024d92:	f104 0310 	add.w	r3, r4, #16
 8024d96:	9702      	str	r7, [sp, #8]
 8024d98:	f7ff ffb8 	bl	8024d0c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024d9c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8024da0:	4605      	mov	r5, r0
 8024da2:	b97b      	cbnz	r3, 8024dc4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024da4:	463a      	mov	r2, r7
 8024da6:	4631      	mov	r1, r6
 8024da8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024dac:	f7ff fe78 	bl	8024aa0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024db0:	9b03      	ldr	r3, [sp, #12]
 8024db2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8024db6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8024dba:	9b02      	ldr	r3, [sp, #8]
 8024dbc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8024dc0:	b005      	add	sp, #20
 8024dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024dc4:	b110      	cbz	r0, 8024dcc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8024dc6:	ea13 0200 	ands.w	r2, r3, r0
 8024dca:	d11c      	bne.n	8024e06 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8024dcc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8024dd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8024dd4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8024dd8:	b188      	cbz	r0, 8024dfe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8024dda:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8024dde:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024de2:	b913      	cbnz	r3, 8024dea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024de4:	4630      	mov	r0, r6
 8024de6:	f001 f821 	bl	8025e2c <_ZN8touchgfx7Outline6moveToEii>
 8024dea:	2300      	movs	r3, #0
 8024dec:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024df0:	2301      	movs	r3, #1
 8024df2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8024df6:	4630      	mov	r0, r6
 8024df8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024dfc:	e7d6      	b.n	8024dac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8024dfe:	4630      	mov	r0, r6
 8024e00:	f7ff fe4e 	bl	8024aa0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024e04:	e7f7      	b.n	8024df6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8024e06:	4615      	mov	r5, r2
 8024e08:	e7d2      	b.n	8024db0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08024e0a <_ZN8touchgfx6Canvas5closeEv>:
 8024e0a:	b538      	push	{r3, r4, r5, lr}
 8024e0c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024e10:	4604      	mov	r4, r0
 8024e12:	b993      	cbnz	r3, 8024e3a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024e14:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8024e18:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8024e1c:	4213      	tst	r3, r2
 8024e1e:	d10c      	bne.n	8024e3a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024e20:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8024e24:	b123      	cbz	r3, 8024e30 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024e26:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 8024e2a:	4628      	mov	r0, r5
 8024e2c:	f7ff fe38 	bl	8024aa0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024e30:	4628      	mov	r0, r5
 8024e32:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8024e36:	f7ff fe33 	bl	8024aa0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024e3a:	2300      	movs	r3, #0
 8024e3c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024e40:	bd38      	pop	{r3, r4, r5, pc}

08024e42 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e44:	b085      	sub	sp, #20
 8024e46:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024e4a:	4604      	mov	r4, r0
 8024e4c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024e50:	b353      	cbz	r3, 8024ea8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024e52:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024e56:	b90b      	cbnz	r3, 8024e5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8024e58:	f7ff ffd7 	bl	8024e0a <_ZN8touchgfx6Canvas5closeEv>
 8024e5c:	aa02      	add	r2, sp, #8
 8024e5e:	a903      	add	r1, sp, #12
 8024e60:	4620      	mov	r0, r4
 8024e62:	f7ff ff6b 	bl	8024d3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024e66:	68a3      	ldr	r3, [r4, #8]
 8024e68:	9d03      	ldr	r5, [sp, #12]
 8024e6a:	aa02      	add	r2, sp, #8
 8024e6c:	9e02      	ldr	r6, [sp, #8]
 8024e6e:	a903      	add	r1, sp, #12
 8024e70:	1aed      	subs	r5, r5, r3
 8024e72:	68e3      	ldr	r3, [r4, #12]
 8024e74:	4620      	mov	r0, r4
 8024e76:	1af6      	subs	r6, r6, r3
 8024e78:	f104 0314 	add.w	r3, r4, #20
 8024e7c:	9503      	str	r5, [sp, #12]
 8024e7e:	9300      	str	r3, [sp, #0]
 8024e80:	f104 0310 	add.w	r3, r4, #16
 8024e84:	9602      	str	r6, [sp, #8]
 8024e86:	f7ff ff41 	bl	8024d0c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024e8a:	4607      	mov	r7, r0
 8024e8c:	b170      	cbz	r0, 8024eac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024e8e:	2301      	movs	r3, #1
 8024e90:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024e94:	9a03      	ldr	r2, [sp, #12]
 8024e96:	9b02      	ldr	r3, [sp, #8]
 8024e98:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8024e9c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8024ea0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8024ea4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8024ea8:	b005      	add	sp, #20
 8024eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024eac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024eb0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8024eb4:	b92b      	cbnz	r3, 8024ec2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8024eb6:	4632      	mov	r2, r6
 8024eb8:	4629      	mov	r1, r5
 8024eba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024ebe:	f000 ffb5 	bl	8025e2c <_ZN8touchgfx7Outline6moveToEii>
 8024ec2:	2300      	movs	r3, #0
 8024ec4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024ec8:	2301      	movs	r3, #1
 8024eca:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8024ece:	e7e1      	b.n	8024e94 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ed4:	4604      	mov	r4, r0
 8024ed6:	b087      	sub	sp, #28
 8024ed8:	9105      	str	r1, [sp, #20]
 8024eda:	f001 f8ec 	bl	80260b6 <_ZN8touchgfx7Outline8getCellsEv>
 8024ede:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024ee2:	4605      	mov	r5, r0
 8024ee4:	f1b9 0f00 	cmp.w	r9, #0
 8024ee8:	d103      	bne.n	8024ef2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8024eea:	2001      	movs	r0, #1
 8024eec:	b007      	add	sp, #28
 8024eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ef2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8024ef6:	2e00      	cmp	r6, #0
 8024ef8:	d139      	bne.n	8024f6e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8024efa:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024efe:	f105 0708 	add.w	r7, r5, #8
 8024f02:	4640      	mov	r0, r8
 8024f04:	f001 f919 	bl	802613a <_ZN8touchgfx8Scanline5resetEv>
 8024f08:	f109 33ff 	add.w	r3, r9, #4294967295
 8024f0c:	9303      	str	r3, [sp, #12]
 8024f0e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024f12:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8024f16:	46da      	mov	sl, fp
 8024f18:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8024f1c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024f20:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024f24:	9b03      	ldr	r3, [sp, #12]
 8024f26:	4416      	add	r6, r2
 8024f28:	9504      	str	r5, [sp, #16]
 8024f2a:	463d      	mov	r5, r7
 8024f2c:	3b01      	subs	r3, #1
 8024f2e:	9303      	str	r3, [sp, #12]
 8024f30:	3301      	adds	r3, #1
 8024f32:	d01e      	beq.n	8024f72 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024f34:	3708      	adds	r7, #8
 8024f36:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8024f3a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8024f3e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024f42:	4290      	cmp	r0, r2
 8024f44:	d11e      	bne.n	8024f84 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8024f46:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8024f4a:	4411      	add	r1, r2
 8024f4c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024f50:	e7e8      	b.n	8024f24 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024f52:	1c91      	adds	r1, r2, #2
 8024f54:	f04f 0301 	mov.w	r3, #1
 8024f58:	65e1      	str	r1, [r4, #92]	; 0x5c
 8024f5a:	8053      	strh	r3, [r2, #2]
 8024f5c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024f5e:	1c91      	adds	r1, r2, #2
 8024f60:	65a1      	str	r1, [r4, #88]	; 0x58
 8024f62:	f8a2 b002 	strh.w	fp, [r2, #2]
 8024f66:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024f68:	3201      	adds	r2, #1
 8024f6a:	6562      	str	r2, [r4, #84]	; 0x54
 8024f6c:	e03a      	b.n	8024fe4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024f6e:	2000      	movs	r0, #0
 8024f70:	e7bc      	b.n	8024eec <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024f72:	b951      	cbnz	r1, 8024f8a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024f74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d0b7      	beq.n	8024eea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024f7a:	4641      	mov	r1, r8
 8024f7c:	9805      	ldr	r0, [sp, #20]
 8024f7e:	f7ff fd59 	bl	8024a34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024f82:	e7b2      	b.n	8024eea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024f84:	2900      	cmp	r1, #0
 8024f86:	d035      	beq.n	8024ff4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8024f88:	9504      	str	r5, [sp, #16]
 8024f8a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024f8e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024f92:	f7ff fd3b 	bl	8024a0c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8024f96:	4605      	mov	r5, r0
 8024f98:	b330      	cbz	r0, 8024fe8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024f9a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024f9c:	b182      	cbz	r2, 8024fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024f9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024fa0:	4591      	cmp	r9, r2
 8024fa2:	d00d      	beq.n	8024fc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024fa4:	4641      	mov	r1, r8
 8024fa6:	9805      	ldr	r0, [sp, #20]
 8024fa8:	f7ff fd44 	bl	8024a34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024fac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024fb0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024fb2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024fb6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8024fb8:	2300      	movs	r3, #0
 8024fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024fbc:	6563      	str	r3, [r4, #84]	; 0x54
 8024fbe:	65a2      	str	r2, [r4, #88]	; 0x58
 8024fc0:	f1bb 0f00 	cmp.w	fp, #0
 8024fc4:	db10      	blt.n	8024fe8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024fc6:	f7f2 fce3 	bl	8017990 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024fca:	4583      	cmp	fp, r0
 8024fcc:	da0c      	bge.n	8024fe8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024fce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024fd0:	f802 500b 	strb.w	r5, [r2, fp]
 8024fd4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8024fd6:	3201      	adds	r2, #1
 8024fd8:	4593      	cmp	fp, r2
 8024fda:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024fdc:	d1b9      	bne.n	8024f52 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024fde:	8811      	ldrh	r1, [r2, #0]
 8024fe0:	3101      	adds	r1, #1
 8024fe2:	8011      	strh	r1, [r2, #0]
 8024fe4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8024fe8:	9b03      	ldr	r3, [sp, #12]
 8024fea:	3301      	adds	r3, #1
 8024fec:	d0c2      	beq.n	8024f74 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024fee:	f10b 0a01 	add.w	sl, fp, #1
 8024ff2:	9d04      	ldr	r5, [sp, #16]
 8024ff4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024ff8:	4553      	cmp	r3, sl
 8024ffa:	dd88      	ble.n	8024f0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024ffc:	01b1      	lsls	r1, r6, #6
 8024ffe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025002:	f7ff fd03 	bl	8024a0c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8025006:	4683      	mov	fp, r0
 8025008:	2800      	cmp	r0, #0
 802500a:	d080      	beq.n	8024f0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802500c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802500e:	b183      	cbz	r3, 8025032 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025010:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8025012:	4599      	cmp	r9, r3
 8025014:	d00d      	beq.n	8025032 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025016:	4641      	mov	r1, r8
 8025018:	9805      	ldr	r0, [sp, #20]
 802501a:	f7ff fd0b 	bl	8024a34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802501e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025022:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8025026:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8025028:	65e3      	str	r3, [r4, #92]	; 0x5c
 802502a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802502c:	65a3      	str	r3, [r4, #88]	; 0x58
 802502e:	2300      	movs	r3, #0
 8025030:	6563      	str	r3, [r4, #84]	; 0x54
 8025032:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025036:	464a      	mov	r2, r9
 8025038:	f8cd b000 	str.w	fp, [sp]
 802503c:	4651      	mov	r1, sl
 802503e:	eba3 030a 	sub.w	r3, r3, sl
 8025042:	4640      	mov	r0, r8
 8025044:	f001 f8a4 	bl	8026190 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8025048:	e761      	b.n	8024f0e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802504a <_ZN8touchgfx6Canvas6renderEh>:
 802504a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802504c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025050:	4604      	mov	r4, r0
 8025052:	460d      	mov	r5, r1
 8025054:	b913      	cbnz	r3, 802505c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8025056:	2001      	movs	r0, #1
 8025058:	b003      	add	sp, #12
 802505a:	bd30      	pop	{r4, r5, pc}
 802505c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8025060:	2b00      	cmp	r3, #0
 8025062:	d12f      	bne.n	80250c4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8025064:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8025068:	2b00      	cmp	r3, #0
 802506a:	d0f4      	beq.n	8025056 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802506c:	6840      	ldr	r0, [r0, #4]
 802506e:	6803      	ldr	r3, [r0, #0]
 8025070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025072:	4798      	blx	r3
 8025074:	fb10 f105 	smulbb	r1, r0, r5
 8025078:	b288      	uxth	r0, r1
 802507a:	1c41      	adds	r1, r0, #1
 802507c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025080:	120d      	asrs	r5, r1, #8
 8025082:	d0e8      	beq.n	8025056 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8025084:	4620      	mov	r0, r4
 8025086:	f7ff fec0 	bl	8024e0a <_ZN8touchgfx6Canvas5closeEv>
 802508a:	6860      	ldr	r0, [r4, #4]
 802508c:	6803      	ldr	r3, [r0, #0]
 802508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8025090:	4798      	blx	r3
 8025092:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8025096:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802509a:	8082      	strh	r2, [r0, #4]
 802509c:	80c3      	strh	r3, [r0, #6]
 802509e:	6860      	ldr	r0, [r4, #4]
 80250a0:	6803      	ldr	r3, [r0, #0]
 80250a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80250a4:	4798      	blx	r3
 80250a6:	7205      	strb	r5, [r0, #8]
 80250a8:	6860      	ldr	r0, [r4, #4]
 80250aa:	6803      	ldr	r3, [r0, #0]
 80250ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80250ae:	4798      	blx	r3
 80250b0:	f104 0318 	add.w	r3, r4, #24
 80250b4:	4669      	mov	r1, sp
 80250b6:	e9cd 3000 	strd	r3, r0, [sp]
 80250ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80250be:	f7ff ff07 	bl	8024ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80250c2:	e7c9      	b.n	8025058 <_ZN8touchgfx6Canvas6renderEh+0xe>
 80250c4:	2000      	movs	r0, #0
 80250c6:	e7c7      	b.n	8025058 <_ZN8touchgfx6Canvas6renderEh+0xe>

080250c8 <_ZN8touchgfx6CanvasD1Ev>:
 80250c8:	b538      	push	{r3, r4, r5, lr}
 80250ca:	4605      	mov	r5, r0
 80250cc:	4b08      	ldr	r3, [pc, #32]	; (80250f0 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80250ce:	4604      	mov	r4, r0
 80250d0:	f845 3b30 	str.w	r3, [r5], #48
 80250d4:	4b07      	ldr	r3, [pc, #28]	; (80250f4 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80250d6:	6818      	ldr	r0, [r3, #0]
 80250d8:	6803      	ldr	r3, [r0, #0]
 80250da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80250dc:	4798      	blx	r3
 80250de:	4628      	mov	r0, r5
 80250e0:	f000 f814 	bl	802510c <_ZN8touchgfx7OutlineD1Ev>
 80250e4:	f104 0018 	add.w	r0, r4, #24
 80250e8:	f001 f88b 	bl	8026202 <_ZN8touchgfx15RenderingBufferD1Ev>
 80250ec:	4620      	mov	r0, r4
 80250ee:	bd38      	pop	{r3, r4, r5, pc}
 80250f0:	0802edb4 	.word	0x0802edb4
 80250f4:	20056750 	.word	0x20056750

080250f8 <_ZN8touchgfx6CanvasD0Ev>:
 80250f8:	b510      	push	{r4, lr}
 80250fa:	4604      	mov	r4, r0
 80250fc:	f7ff ffe4 	bl	80250c8 <_ZN8touchgfx6CanvasD1Ev>
 8025100:	21bc      	movs	r1, #188	; 0xbc
 8025102:	4620      	mov	r0, r4
 8025104:	f001 f89f 	bl	8026246 <_ZdlPvj>
 8025108:	4620      	mov	r0, r4
 802510a:	bd10      	pop	{r4, pc}

0802510c <_ZN8touchgfx7OutlineD1Ev>:
 802510c:	4770      	bx	lr

0802510e <_ZN8touchgfx7OutlineD0Ev>:
 802510e:	b510      	push	{r4, lr}
 8025110:	4604      	mov	r4, r0
 8025112:	2148      	movs	r1, #72	; 0x48
 8025114:	f001 f897 	bl	8026246 <_ZdlPvj>
 8025118:	4620      	mov	r0, r4
 802511a:	bd10      	pop	{r4, pc}

0802511c <_ZN8touchgfx7Outline5resetEv>:
 802511c:	b510      	push	{r4, lr}
 802511e:	4604      	mov	r4, r0
 8025120:	f7f2 fc4e 	bl	80179c0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8025124:	60e0      	str	r0, [r4, #12]
 8025126:	f7f2 fc51 	bl	80179cc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802512a:	68e3      	ldr	r3, [r4, #12]
 802512c:	2200      	movs	r2, #0
 802512e:	08c0      	lsrs	r0, r0, #3
 8025130:	6123      	str	r3, [r4, #16]
 8025132:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025136:	6060      	str	r0, [r4, #4]
 8025138:	82a3      	strh	r3, [r4, #20]
 802513a:	82e3      	strh	r3, [r4, #22]
 802513c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802513e:	60a2      	str	r2, [r4, #8]
 8025140:	f023 0301 	bic.w	r3, r3, #1
 8025144:	8322      	strh	r2, [r4, #24]
 8025146:	8362      	strh	r2, [r4, #26]
 8025148:	f043 0302 	orr.w	r3, r3, #2
 802514c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025150:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025152:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025156:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802515a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802515e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8025162:	bd10      	pop	{r4, pc}

08025164 <_ZN8touchgfx7OutlineC1Ev>:
 8025164:	4b0f      	ldr	r3, [pc, #60]	; (80251a4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8025166:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802516a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802516e:	b510      	push	{r4, lr}
 8025170:	6003      	str	r3, [r0, #0]
 8025172:	2300      	movs	r3, #0
 8025174:	4604      	mov	r4, r0
 8025176:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802517a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802517e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025182:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025186:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802518a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802518e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8025192:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8025196:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802519a:	f7ff ffbf 	bl	802511c <_ZN8touchgfx7Outline5resetEv>
 802519e:	4620      	mov	r0, r4
 80251a0:	bd10      	pop	{r4, pc}
 80251a2:	bf00      	nop
 80251a4:	0802ee84 	.word	0x0802ee84

080251a8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80251a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251ac:	b095      	sub	sp, #84	; 0x54
 80251ae:	4604      	mov	r4, r0
 80251b0:	1155      	asrs	r5, r2, #5
 80251b2:	f002 061f 	and.w	r6, r2, #31
 80251b6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80251b8:	1157      	asrs	r7, r2, #5
 80251ba:	9304      	str	r3, [sp, #16]
 80251bc:	1153      	asrs	r3, r2, #5
 80251be:	9300      	str	r3, [sp, #0]
 80251c0:	1143      	asrs	r3, r0, #5
 80251c2:	930c      	str	r3, [sp, #48]	; 0x30
 80251c4:	f000 031f 	and.w	r3, r0, #31
 80251c8:	9303      	str	r3, [sp, #12]
 80251ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80251cc:	42ab      	cmp	r3, r5
 80251ce:	bfc8      	it	gt
 80251d0:	462b      	movgt	r3, r5
 80251d2:	ea4f 1562 	mov.w	r5, r2, asr #5
 80251d6:	bfc8      	it	gt
 80251d8:	6323      	strgt	r3, [r4, #48]	; 0x30
 80251da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80251dc:	42ab      	cmp	r3, r5
 80251de:	bfd8      	it	le
 80251e0:	462b      	movle	r3, r5
 80251e2:	ea4f 1560 	mov.w	r5, r0, asr #5
 80251e6:	bfdc      	itt	le
 80251e8:	3301      	addle	r3, #1
 80251ea:	63a3      	strle	r3, [r4, #56]	; 0x38
 80251ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80251ee:	42ab      	cmp	r3, r5
 80251f0:	bfc8      	it	gt
 80251f2:	462b      	movgt	r3, r5
 80251f4:	ea4f 1560 	mov.w	r5, r0, asr #5
 80251f8:	bfc8      	it	gt
 80251fa:	6323      	strgt	r3, [r4, #48]	; 0x30
 80251fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80251fe:	42ab      	cmp	r3, r5
 8025200:	bfd8      	it	le
 8025202:	462b      	movle	r3, r5
 8025204:	ea4f 1561 	mov.w	r5, r1, asr #5
 8025208:	bfdc      	itt	le
 802520a:	3301      	addle	r3, #1
 802520c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802520e:	9b04      	ldr	r3, [sp, #16]
 8025210:	eba3 0a01 	sub.w	sl, r3, r1
 8025214:	1143      	asrs	r3, r0, #5
 8025216:	429f      	cmp	r7, r3
 8025218:	f040 811d 	bne.w	8025456 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 802521c:	9b04      	ldr	r3, [sp, #16]
 802521e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8025222:	9b03      	ldr	r3, [sp, #12]
 8025224:	429e      	cmp	r6, r3
 8025226:	d131      	bne.n	802528c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8025228:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802522c:	fa0f fb8b 	sxth.w	fp, fp
 8025230:	f9bd 2000 	ldrsh.w	r2, [sp]
 8025234:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025238:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802523c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025240:	4281      	cmp	r1, r0
 8025242:	f000 80e6 	beq.w	8025412 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025246:	8b60      	ldrh	r0, [r4, #26]
 8025248:	8b21      	ldrh	r1, [r4, #24]
 802524a:	4301      	orrs	r1, r0
 802524c:	d00b      	beq.n	8025266 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802524e:	2b00      	cmp	r3, #0
 8025250:	db09      	blt.n	8025266 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8025252:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025254:	428b      	cmp	r3, r1
 8025256:	da06      	bge.n	8025266 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8025258:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802525c:	4299      	cmp	r1, r3
 802525e:	d308      	bcc.n	8025272 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8025260:	2301      	movs	r3, #1
 8025262:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025266:	f8a4 b014 	strh.w	fp, [r4, #20]
 802526a:	2300      	movs	r3, #0
 802526c:	82e2      	strh	r2, [r4, #22]
 802526e:	8323      	strh	r3, [r4, #24]
 8025270:	e01f      	b.n	80252b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8025272:	f104 0314 	add.w	r3, r4, #20
 8025276:	6925      	ldr	r5, [r4, #16]
 8025278:	cb03      	ldmia	r3!, {r0, r1}
 802527a:	6028      	str	r0, [r5, #0]
 802527c:	6069      	str	r1, [r5, #4]
 802527e:	6923      	ldr	r3, [r4, #16]
 8025280:	3308      	adds	r3, #8
 8025282:	6123      	str	r3, [r4, #16]
 8025284:	68a3      	ldr	r3, [r4, #8]
 8025286:	3301      	adds	r3, #1
 8025288:	60a3      	str	r3, [r4, #8]
 802528a:	e7ec      	b.n	8025266 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802528c:	9b04      	ldr	r3, [sp, #16]
 802528e:	45ab      	cmp	fp, r5
 8025290:	f001 011f 	and.w	r1, r1, #31
 8025294:	8b20      	ldrh	r0, [r4, #24]
 8025296:	f003 031f 	and.w	r3, r3, #31
 802529a:	8b62      	ldrh	r2, [r4, #26]
 802529c:	9305      	str	r3, [sp, #20]
 802529e:	9b03      	ldr	r3, [sp, #12]
 80252a0:	eba3 0306 	sub.w	r3, r3, r6
 80252a4:	d107      	bne.n	80252b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 80252a6:	4418      	add	r0, r3
 80252a8:	8320      	strh	r0, [r4, #24]
 80252aa:	9805      	ldr	r0, [sp, #20]
 80252ac:	4401      	add	r1, r0
 80252ae:	fb03 2301 	mla	r3, r3, r1, r2
 80252b2:	8363      	strh	r3, [r4, #26]
 80252b4:	e0ad      	b.n	8025412 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80252b6:	f1ba 0f00 	cmp.w	sl, #0
 80252ba:	db33      	blt.n	8025324 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 80252bc:	2701      	movs	r7, #1
 80252be:	f1c1 0c20 	rsb	ip, r1, #32
 80252c2:	9702      	str	r7, [sp, #8]
 80252c4:	2720      	movs	r7, #32
 80252c6:	fb03 f30c 	mul.w	r3, r3, ip
 80252ca:	9701      	str	r7, [sp, #4]
 80252cc:	9f01      	ldr	r7, [sp, #4]
 80252ce:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80252d2:	4439      	add	r1, r7
 80252d4:	fb93 fcfa 	sdiv	ip, r3, sl
 80252d8:	fb0a 331c 	mls	r3, sl, ip, r3
 80252dc:	2b00      	cmp	r3, #0
 80252de:	bfbc      	itt	lt
 80252e0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80252e4:	4453      	addlt	r3, sl
 80252e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80252ea:	9a02      	ldr	r2, [sp, #8]
 80252ec:	4460      	add	r0, ip
 80252ee:	4415      	add	r5, r2
 80252f0:	f9bd 2000 	ldrsh.w	r2, [sp]
 80252f4:	b200      	sxth	r0, r0
 80252f6:	0417      	lsls	r7, r2, #16
 80252f8:	9200      	str	r2, [sp, #0]
 80252fa:	fa0f fe85 	sxth.w	lr, r5
 80252fe:	8320      	strh	r0, [r4, #24]
 8025300:	9704      	str	r7, [sp, #16]
 8025302:	b209      	sxth	r1, r1
 8025304:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8025308:	9a04      	ldr	r2, [sp, #16]
 802530a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802530e:	8361      	strh	r1, [r4, #26]
 8025310:	eb0e 0902 	add.w	r9, lr, r2
 8025314:	454f      	cmp	r7, r9
 8025316:	d10d      	bne.n	8025334 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8025318:	4ba0      	ldr	r3, [pc, #640]	; (802559c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802531a:	2177      	movs	r1, #119	; 0x77
 802531c:	4aa0      	ldr	r2, [pc, #640]	; (80255a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 802531e:	48a1      	ldr	r0, [pc, #644]	; (80255a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8025320:	f001 f8c6 	bl	80264b0 <__assert_func>
 8025324:	f04f 37ff 	mov.w	r7, #4294967295
 8025328:	434b      	muls	r3, r1
 802532a:	f1ca 0a00 	rsb	sl, sl, #0
 802532e:	9702      	str	r7, [sp, #8]
 8025330:	2700      	movs	r7, #0
 8025332:	e7ca      	b.n	80252ca <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8025334:	ea50 0201 	orrs.w	r2, r0, r1
 8025338:	d00c      	beq.n	8025354 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802533a:	f1b8 0f00 	cmp.w	r8, #0
 802533e:	db09      	blt.n	8025354 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025340:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025342:	4588      	cmp	r8, r1
 8025344:	da06      	bge.n	8025354 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025346:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802534a:	4288      	cmp	r0, r1
 802534c:	d364      	bcc.n	8025418 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802534e:	2101      	movs	r1, #1
 8025350:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025354:	2100      	movs	r1, #0
 8025356:	9a00      	ldr	r2, [sp, #0]
 8025358:	45ab      	cmp	fp, r5
 802535a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802535e:	82e2      	strh	r2, [r4, #22]
 8025360:	4466      	add	r6, ip
 8025362:	8321      	strh	r1, [r4, #24]
 8025364:	8361      	strh	r1, [r4, #26]
 8025366:	d04b      	beq.n	8025400 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8025368:	9a03      	ldr	r2, [sp, #12]
 802536a:	eba3 030a 	sub.w	r3, r3, sl
 802536e:	f04f 0800 	mov.w	r8, #0
 8025372:	1b91      	subs	r1, r2, r6
 8025374:	448c      	add	ip, r1
 8025376:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802537a:	fb9c f7fa 	sdiv	r7, ip, sl
 802537e:	fb0a cc17 	mls	ip, sl, r7, ip
 8025382:	f1bc 0f00 	cmp.w	ip, #0
 8025386:	bfbc      	itt	lt
 8025388:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802538c:	44d4      	addlt	ip, sl
 802538e:	1c7a      	adds	r2, r7, #1
 8025390:	9207      	str	r2, [sp, #28]
 8025392:	eb13 030c 	adds.w	r3, r3, ip
 8025396:	9a02      	ldr	r2, [sp, #8]
 8025398:	bf54      	ite	pl
 802539a:	9807      	ldrpl	r0, [sp, #28]
 802539c:	4638      	movmi	r0, r7
 802539e:	4415      	add	r5, r2
 80253a0:	9a04      	ldr	r2, [sp, #16]
 80253a2:	fa0f fe80 	sxth.w	lr, r0
 80253a6:	4406      	add	r6, r0
 80253a8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 80253ac:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80253b0:	fa0f f985 	sxth.w	r9, r5
 80253b4:	bf58      	it	pl
 80253b6:	eba3 030a 	subpl.w	r3, r3, sl
 80253ba:	4410      	add	r0, r2
 80253bc:	b209      	sxth	r1, r1
 80253be:	444a      	add	r2, r9
 80253c0:	f8a4 e018 	strh.w	lr, [r4, #24]
 80253c4:	8361      	strh	r1, [r4, #26]
 80253c6:	4290      	cmp	r0, r2
 80253c8:	d0a6      	beq.n	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80253ca:	ea5e 0201 	orrs.w	r2, lr, r1
 80253ce:	d00d      	beq.n	80253ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80253d0:	9a00      	ldr	r2, [sp, #0]
 80253d2:	2a00      	cmp	r2, #0
 80253d4:	db0a      	blt.n	80253ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80253d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80253d8:	428a      	cmp	r2, r1
 80253da:	da07      	bge.n	80253ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80253dc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80253e0:	4288      	cmp	r0, r1
 80253e2:	d329      	bcc.n	8025438 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 80253e4:	f04f 0201 	mov.w	r2, #1
 80253e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80253ec:	9a00      	ldr	r2, [sp, #0]
 80253ee:	45ab      	cmp	fp, r5
 80253f0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80253f4:	82e2      	strh	r2, [r4, #22]
 80253f6:	f8a4 8018 	strh.w	r8, [r4, #24]
 80253fa:	f8a4 801a 	strh.w	r8, [r4, #26]
 80253fe:	d1c8      	bne.n	8025392 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8025400:	9b03      	ldr	r3, [sp, #12]
 8025402:	9a01      	ldr	r2, [sp, #4]
 8025404:	1b9e      	subs	r6, r3, r6
 8025406:	9b05      	ldr	r3, [sp, #20]
 8025408:	3320      	adds	r3, #32
 802540a:	8326      	strh	r6, [r4, #24]
 802540c:	1a9b      	subs	r3, r3, r2
 802540e:	435e      	muls	r6, r3
 8025410:	8366      	strh	r6, [r4, #26]
 8025412:	b015      	add	sp, #84	; 0x54
 8025414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025418:	f104 0714 	add.w	r7, r4, #20
 802541c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025420:	cf03      	ldmia	r7!, {r0, r1}
 8025422:	f8c8 0000 	str.w	r0, [r8]
 8025426:	f8c8 1004 	str.w	r1, [r8, #4]
 802542a:	6921      	ldr	r1, [r4, #16]
 802542c:	3108      	adds	r1, #8
 802542e:	6121      	str	r1, [r4, #16]
 8025430:	68a1      	ldr	r1, [r4, #8]
 8025432:	3101      	adds	r1, #1
 8025434:	60a1      	str	r1, [r4, #8]
 8025436:	e78d      	b.n	8025354 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025438:	f104 0e14 	add.w	lr, r4, #20
 802543c:	6922      	ldr	r2, [r4, #16]
 802543e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025442:	9206      	str	r2, [sp, #24]
 8025444:	6010      	str	r0, [r2, #0]
 8025446:	6051      	str	r1, [r2, #4]
 8025448:	6921      	ldr	r1, [r4, #16]
 802544a:	3108      	adds	r1, #8
 802544c:	6121      	str	r1, [r4, #16]
 802544e:	68a1      	ldr	r1, [r4, #8]
 8025450:	3101      	adds	r1, #1
 8025452:	60a1      	str	r1, [r4, #8]
 8025454:	e7ca      	b.n	80253ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8025456:	eba0 0b02 	sub.w	fp, r0, r2
 802545a:	f1ba 0f00 	cmp.w	sl, #0
 802545e:	f040 80a3 	bne.w	80255a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8025462:	f1bb 0f00 	cmp.w	fp, #0
 8025466:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802546a:	8b62      	ldrh	r2, [r4, #26]
 802546c:	b22d      	sxth	r5, r5
 802546e:	bfa8      	it	ge
 8025470:	f04f 0a20 	movge.w	sl, #32
 8025474:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8025478:	8b21      	ldrh	r1, [r4, #24]
 802547a:	bfb8      	it	lt
 802547c:	f04f 39ff 	movlt.w	r9, #4294967295
 8025480:	ebaa 0606 	sub.w	r6, sl, r6
 8025484:	bfa8      	it	ge
 8025486:	f04f 0901 	movge.w	r9, #1
 802548a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802548e:	4431      	add	r1, r6
 8025490:	fb06 2603 	mla	r6, r6, r3, r2
 8025494:	9a00      	ldr	r2, [sp, #0]
 8025496:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802549a:	b209      	sxth	r1, r1
 802549c:	444a      	add	r2, r9
 802549e:	b236      	sxth	r6, r6
 80254a0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 80254a4:	8321      	strh	r1, [r4, #24]
 80254a6:	b217      	sxth	r7, r2
 80254a8:	8366      	strh	r6, [r4, #26]
 80254aa:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 80254ae:	45f4      	cmp	ip, lr
 80254b0:	f43f af32 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80254b4:	4331      	orrs	r1, r6
 80254b6:	d00b      	beq.n	80254d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80254b8:	2800      	cmp	r0, #0
 80254ba:	db09      	blt.n	80254d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80254bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80254be:	4288      	cmp	r0, r1
 80254c0:	da06      	bge.n	80254d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80254c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80254c6:	4288      	cmp	r0, r1
 80254c8:	d33b      	bcc.n	8025542 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 80254ca:	2101      	movs	r1, #1
 80254cc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80254d0:	f1aa 0610 	sub.w	r6, sl, #16
 80254d4:	82e7      	strh	r7, [r4, #22]
 80254d6:	2700      	movs	r7, #0
 80254d8:	82a5      	strh	r5, [r4, #20]
 80254da:	0076      	lsls	r6, r6, #1
 80254dc:	8327      	strh	r7, [r4, #24]
 80254de:	fb06 fc03 	mul.w	ip, r6, r3
 80254e2:	b236      	sxth	r6, r6
 80254e4:	8367      	strh	r7, [r4, #26]
 80254e6:	fa0f fc8c 	sxth.w	ip, ip
 80254ea:	ea46 010c 	orr.w	r1, r6, ip
 80254ee:	9100      	str	r1, [sp, #0]
 80254f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80254f2:	428a      	cmp	r2, r1
 80254f4:	d046      	beq.n	8025584 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 80254f6:	444a      	add	r2, r9
 80254f8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80254fc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025500:	fa0f f882 	sxth.w	r8, r2
 8025504:	8326      	strh	r6, [r4, #24]
 8025506:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802550a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802550e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8025512:	4570      	cmp	r0, lr
 8025514:	f43f af00 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025518:	9800      	ldr	r0, [sp, #0]
 802551a:	b160      	cbz	r0, 8025536 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802551c:	2900      	cmp	r1, #0
 802551e:	db0a      	blt.n	8025536 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025520:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8025522:	4281      	cmp	r1, r0
 8025524:	da07      	bge.n	8025536 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025526:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802552a:	4288      	cmp	r0, r1
 802552c:	d319      	bcc.n	8025562 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 802552e:	f04f 0101 	mov.w	r1, #1
 8025532:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025536:	82a5      	strh	r5, [r4, #20]
 8025538:	f8a4 8016 	strh.w	r8, [r4, #22]
 802553c:	8327      	strh	r7, [r4, #24]
 802553e:	8367      	strh	r7, [r4, #26]
 8025540:	e7d6      	b.n	80254f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8025542:	f104 0614 	add.w	r6, r4, #20
 8025546:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802554a:	ce03      	ldmia	r6!, {r0, r1}
 802554c:	f8cc 0000 	str.w	r0, [ip]
 8025550:	f8cc 1004 	str.w	r1, [ip, #4]
 8025554:	6921      	ldr	r1, [r4, #16]
 8025556:	3108      	adds	r1, #8
 8025558:	6121      	str	r1, [r4, #16]
 802555a:	68a1      	ldr	r1, [r4, #8]
 802555c:	3101      	adds	r1, #1
 802555e:	60a1      	str	r1, [r4, #8]
 8025560:	e7b6      	b.n	80254d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8025562:	f104 0e14 	add.w	lr, r4, #20
 8025566:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802556a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802556e:	f8cb 0000 	str.w	r0, [fp]
 8025572:	f8cb 1004 	str.w	r1, [fp, #4]
 8025576:	6921      	ldr	r1, [r4, #16]
 8025578:	3108      	adds	r1, #8
 802557a:	6121      	str	r1, [r4, #16]
 802557c:	68a1      	ldr	r1, [r4, #8]
 802557e:	3101      	adds	r1, #1
 8025580:	60a1      	str	r1, [r4, #8]
 8025582:	e7d8      	b.n	8025536 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025584:	9a03      	ldr	r2, [sp, #12]
 8025586:	8b61      	ldrh	r1, [r4, #26]
 8025588:	f1a2 0e20 	sub.w	lr, r2, #32
 802558c:	8b22      	ldrh	r2, [r4, #24]
 802558e:	44d6      	add	lr, sl
 8025590:	4472      	add	r2, lr
 8025592:	fb0e 1303 	mla	r3, lr, r3, r1
 8025596:	8322      	strh	r2, [r4, #24]
 8025598:	e68b      	b.n	80252b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802559a:	bf00      	nop
 802559c:	0802ee0b 	.word	0x0802ee0b
 80255a0:	0802ee8c 	.word	0x0802ee8c
 80255a4:	0802ee3c 	.word	0x0802ee3c
 80255a8:	f1bb 0f00 	cmp.w	fp, #0
 80255ac:	f2c0 8124 	blt.w	80257f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 80255b0:	2201      	movs	r2, #1
 80255b2:	f1c6 0320 	rsb	r3, r6, #32
 80255b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80255b8:	2220      	movs	r2, #32
 80255ba:	fb0a f303 	mul.w	r3, sl, r3
 80255be:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80255c2:	9202      	str	r2, [sp, #8]
 80255c4:	fb93 fcfb 	sdiv	ip, r3, fp
 80255c8:	fb0b 331c 	mls	r3, fp, ip, r3
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	9308      	str	r3, [sp, #32]
 80255d0:	bfbe      	ittt	lt
 80255d2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80255d6:	445b      	addlt	r3, fp
 80255d8:	9308      	strlt	r3, [sp, #32]
 80255da:	eb0c 0301 	add.w	r3, ip, r1
 80255de:	9301      	str	r3, [sp, #4]
 80255e0:	115b      	asrs	r3, r3, #5
 80255e2:	9305      	str	r3, [sp, #20]
 80255e4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80255e8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 80255ec:	461f      	mov	r7, r3
 80255ee:	9b02      	ldr	r3, [sp, #8]
 80255f0:	42b3      	cmp	r3, r6
 80255f2:	f040 8117 	bne.w	8025824 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 80255f6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80255fa:	f9bd 3000 	ldrsh.w	r3, [sp]
 80255fe:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025602:	42b9      	cmp	r1, r7
 8025604:	d016      	beq.n	8025634 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025606:	8b60      	ldrh	r0, [r4, #26]
 8025608:	8b21      	ldrh	r1, [r4, #24]
 802560a:	4301      	orrs	r1, r0
 802560c:	d00d      	beq.n	802562a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802560e:	f1b8 0f00 	cmp.w	r8, #0
 8025612:	db0a      	blt.n	802562a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025614:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025616:	4541      	cmp	r1, r8
 8025618:	dd07      	ble.n	802562a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802561a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802561e:	4288      	cmp	r0, r1
 8025620:	f0c0 80f3 	bcc.w	802580a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8025624:	2101      	movs	r1, #1
 8025626:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802562a:	82e3      	strh	r3, [r4, #22]
 802562c:	2300      	movs	r3, #0
 802562e:	82a2      	strh	r2, [r4, #20]
 8025630:	8323      	strh	r3, [r4, #24]
 8025632:	8363      	strh	r3, [r4, #26]
 8025634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025636:	9a00      	ldr	r2, [sp, #0]
 8025638:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802563c:	441a      	add	r2, r3
 802563e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025642:	4691      	mov	r9, r2
 8025644:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025648:	fa0f f589 	sxth.w	r5, r9
 802564c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025650:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025654:	4281      	cmp	r1, r0
 8025656:	d015      	beq.n	8025684 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8025658:	8b60      	ldrh	r0, [r4, #26]
 802565a:	8b21      	ldrh	r1, [r4, #24]
 802565c:	4301      	orrs	r1, r0
 802565e:	d00c      	beq.n	802567a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025660:	2a00      	cmp	r2, #0
 8025662:	db0a      	blt.n	802567a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025664:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025666:	428a      	cmp	r2, r1
 8025668:	da07      	bge.n	802567a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802566a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802566e:	4291      	cmp	r1, r2
 8025670:	f0c0 81ae 	bcc.w	80259d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8025674:	2201      	movs	r2, #1
 8025676:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802567a:	82a3      	strh	r3, [r4, #20]
 802567c:	2300      	movs	r3, #0
 802567e:	82e5      	strh	r5, [r4, #22]
 8025680:	8323      	strh	r3, [r4, #24]
 8025682:	8363      	strh	r3, [r4, #26]
 8025684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025686:	454b      	cmp	r3, r9
 8025688:	f000 808a 	beq.w	80257a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802568c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8025690:	fb93 f2fb 	sdiv	r2, r3, fp
 8025694:	fb0b 3312 	mls	r3, fp, r2, r3
 8025698:	9205      	str	r2, [sp, #20]
 802569a:	2b00      	cmp	r3, #0
 802569c:	9307      	str	r3, [sp, #28]
 802569e:	da04      	bge.n	80256aa <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 80256a0:	1e53      	subs	r3, r2, #1
 80256a2:	9305      	str	r3, [sp, #20]
 80256a4:	9b07      	ldr	r3, [sp, #28]
 80256a6:	445b      	add	r3, fp
 80256a8:	9307      	str	r3, [sp, #28]
 80256aa:	9b08      	ldr	r3, [sp, #32]
 80256ac:	f04f 0a00 	mov.w	sl, #0
 80256b0:	eba3 030b 	sub.w	r3, r3, fp
 80256b4:	9308      	str	r3, [sp, #32]
 80256b6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 80256ba:	f1c3 0320 	rsb	r3, r3, #32
 80256be:	930a      	str	r3, [sp, #40]	; 0x28
 80256c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80256c2:	9b02      	ldr	r3, [sp, #8]
 80256c4:	1a9b      	subs	r3, r3, r2
 80256c6:	9309      	str	r3, [sp, #36]	; 0x24
 80256c8:	9902      	ldr	r1, [sp, #8]
 80256ca:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80256ce:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80256d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80256d6:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 80256da:	189b      	adds	r3, r3, r2
 80256dc:	9308      	str	r3, [sp, #32]
 80256de:	bf57      	itett	pl
 80256e0:	eba3 030b 	subpl.w	r3, r3, fp
 80256e4:	9b05      	ldrmi	r3, [sp, #20]
 80256e6:	9308      	strpl	r3, [sp, #32]
 80256e8:	9b05      	ldrpl	r3, [sp, #20]
 80256ea:	bf58      	it	pl
 80256ec:	3301      	addpl	r3, #1
 80256ee:	9300      	str	r3, [sp, #0]
 80256f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80256f4:	4413      	add	r3, r2
 80256f6:	9301      	str	r3, [sp, #4]
 80256f8:	115b      	asrs	r3, r3, #5
 80256fa:	9306      	str	r3, [sp, #24]
 80256fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256fe:	428b      	cmp	r3, r1
 8025700:	f040 8180 	bne.w	8025a04 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025704:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8025708:	fa0f f389 	sxth.w	r3, r9
 802570c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025710:	4541      	cmp	r1, r8
 8025712:	d017      	beq.n	8025744 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025714:	8b60      	ldrh	r0, [r4, #26]
 8025716:	8b21      	ldrh	r1, [r4, #24]
 8025718:	4301      	orrs	r1, r0
 802571a:	d00d      	beq.n	8025738 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802571c:	2e00      	cmp	r6, #0
 802571e:	db0b      	blt.n	8025738 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025720:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025722:	42b1      	cmp	r1, r6
 8025724:	dd08      	ble.n	8025738 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025726:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802572a:	4288      	cmp	r0, r1
 802572c:	f0c0 815d 	bcc.w	80259ea <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8025730:	f04f 0101 	mov.w	r1, #1
 8025734:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025738:	82a2      	strh	r2, [r4, #20]
 802573a:	82e3      	strh	r3, [r4, #22]
 802573c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025740:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025746:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802574a:	4499      	add	r9, r3
 802574c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025750:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025754:	fa0f f589 	sxth.w	r5, r9
 8025758:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802575c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025760:	4281      	cmp	r1, r0
 8025762:	f43f add9 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025766:	8b60      	ldrh	r0, [r4, #26]
 8025768:	8b21      	ldrh	r1, [r4, #24]
 802576a:	4301      	orrs	r1, r0
 802576c:	d00d      	beq.n	802578a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802576e:	2a00      	cmp	r2, #0
 8025770:	db0b      	blt.n	802578a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025772:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025774:	428a      	cmp	r2, r1
 8025776:	da08      	bge.n	802578a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025778:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802577c:	4291      	cmp	r1, r2
 802577e:	f0c0 8228 	bcc.w	8025bd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8025782:	f04f 0201 	mov.w	r2, #1
 8025786:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802578a:	82a3      	strh	r3, [r4, #20]
 802578c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802578e:	82e5      	strh	r5, [r4, #22]
 8025790:	454b      	cmp	r3, r9
 8025792:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025796:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802579a:	f8dd c004 	ldr.w	ip, [sp, #4]
 802579e:	d193      	bne.n	80256c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 80257a0:	9b02      	ldr	r3, [sp, #8]
 80257a2:	f1c3 0e20 	rsb	lr, r3, #32
 80257a6:	9b04      	ldr	r3, [sp, #16]
 80257a8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 80257ac:	9b03      	ldr	r3, [sp, #12]
 80257ae:	459e      	cmp	lr, r3
 80257b0:	f040 8229 	bne.w	8025c06 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 80257b4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80257b8:	fa0f f58b 	sxth.w	r5, fp
 80257bc:	fa0f f289 	sxth.w	r2, r9
 80257c0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80257c4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 80257c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80257cc:	4281      	cmp	r1, r0
 80257ce:	f43f ae20 	beq.w	8025412 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80257d2:	8b60      	ldrh	r0, [r4, #26]
 80257d4:	8b21      	ldrh	r1, [r4, #24]
 80257d6:	4301      	orrs	r1, r0
 80257d8:	d00c      	beq.n	80257f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80257da:	2b00      	cmp	r3, #0
 80257dc:	db0a      	blt.n	80257f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80257de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80257e0:	428b      	cmp	r3, r1
 80257e2:	da07      	bge.n	80257f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80257e4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80257e8:	4299      	cmp	r1, r3
 80257ea:	f0c0 81ff 	bcc.w	8025bec <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 80257ee:	2301      	movs	r3, #1
 80257f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80257f4:	82a5      	strh	r5, [r4, #20]
 80257f6:	e538      	b.n	802526a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 80257f8:	f04f 32ff 	mov.w	r2, #4294967295
 80257fc:	fb0a f306 	mul.w	r3, sl, r6
 8025800:	f1cb 0b00 	rsb	fp, fp, #0
 8025804:	920b      	str	r2, [sp, #44]	; 0x2c
 8025806:	2200      	movs	r2, #0
 8025808:	e6d9      	b.n	80255be <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 802580a:	f104 0514 	add.w	r5, r4, #20
 802580e:	6926      	ldr	r6, [r4, #16]
 8025810:	cd03      	ldmia	r5!, {r0, r1}
 8025812:	6030      	str	r0, [r6, #0]
 8025814:	6071      	str	r1, [r6, #4]
 8025816:	6921      	ldr	r1, [r4, #16]
 8025818:	3108      	adds	r1, #8
 802581a:	6121      	str	r1, [r4, #16]
 802581c:	68a1      	ldr	r1, [r4, #8]
 802581e:	3101      	adds	r1, #1
 8025820:	60a1      	str	r1, [r4, #8]
 8025822:	e702      	b.n	802562a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025824:	9b01      	ldr	r3, [sp, #4]
 8025826:	f001 011f 	and.w	r1, r1, #31
 802582a:	8b20      	ldrh	r0, [r4, #24]
 802582c:	f003 031f 	and.w	r3, r3, #31
 8025830:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025834:	930d      	str	r3, [sp, #52]	; 0x34
 8025836:	9b02      	ldr	r3, [sp, #8]
 8025838:	1b9a      	subs	r2, r3, r6
 802583a:	9b05      	ldr	r3, [sp, #20]
 802583c:	42ab      	cmp	r3, r5
 802583e:	d107      	bne.n	8025850 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8025840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025842:	4410      	add	r0, r2
 8025844:	4419      	add	r1, r3
 8025846:	8320      	strh	r0, [r4, #24]
 8025848:	fb02 9201 	mla	r2, r2, r1, r9
 802584c:	8362      	strh	r2, [r4, #26]
 802584e:	e6f1      	b.n	8025634 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025850:	f1bc 0f00 	cmp.w	ip, #0
 8025854:	f2c0 8093 	blt.w	802597e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8025858:	f1c1 0320 	rsb	r3, r1, #32
 802585c:	435a      	muls	r2, r3
 802585e:	2301      	movs	r3, #1
 8025860:	9309      	str	r3, [sp, #36]	; 0x24
 8025862:	2320      	movs	r3, #32
 8025864:	9307      	str	r3, [sp, #28]
 8025866:	9b07      	ldr	r3, [sp, #28]
 8025868:	fb92 fefc 	sdiv	lr, r2, ip
 802586c:	fb0c 221e 	mls	r2, ip, lr, r2
 8025870:	4419      	add	r1, r3
 8025872:	2a00      	cmp	r2, #0
 8025874:	bfbc      	itt	lt
 8025876:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802587a:	4462      	addlt	r2, ip
 802587c:	fb0e 9101 	mla	r1, lr, r1, r9
 8025880:	4470      	add	r0, lr
 8025882:	b20b      	sxth	r3, r1
 8025884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025886:	b200      	sxth	r0, r0
 8025888:	440d      	add	r5, r1
 802588a:	f9bd 1000 	ldrsh.w	r1, [sp]
 802588e:	8320      	strh	r0, [r4, #24]
 8025890:	fa0f f985 	sxth.w	r9, r5
 8025894:	9106      	str	r1, [sp, #24]
 8025896:	0409      	lsls	r1, r1, #16
 8025898:	8363      	strh	r3, [r4, #26]
 802589a:	910a      	str	r1, [sp, #40]	; 0x28
 802589c:	4449      	add	r1, r9
 802589e:	42b9      	cmp	r1, r7
 80258a0:	f43f ad3a 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80258a4:	4303      	orrs	r3, r0
 80258a6:	d00c      	beq.n	80258c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80258a8:	f1b8 0f00 	cmp.w	r8, #0
 80258ac:	db09      	blt.n	80258c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80258ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80258b0:	4543      	cmp	r3, r8
 80258b2:	dd06      	ble.n	80258c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80258b4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80258b8:	4299      	cmp	r1, r3
 80258ba:	d368      	bcc.n	802598e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 80258bc:	2301      	movs	r3, #1
 80258be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80258c2:	9b06      	ldr	r3, [sp, #24]
 80258c4:	4476      	add	r6, lr
 80258c6:	f8a4 9014 	strh.w	r9, [r4, #20]
 80258ca:	82e3      	strh	r3, [r4, #22]
 80258cc:	2300      	movs	r3, #0
 80258ce:	8323      	strh	r3, [r4, #24]
 80258d0:	8363      	strh	r3, [r4, #26]
 80258d2:	9b05      	ldr	r3, [sp, #20]
 80258d4:	42ab      	cmp	r3, r5
 80258d6:	d048      	beq.n	802596a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 80258d8:	9b02      	ldr	r3, [sp, #8]
 80258da:	eba2 020c 	sub.w	r2, r2, ip
 80258de:	1b9b      	subs	r3, r3, r6
 80258e0:	4473      	add	r3, lr
 80258e2:	015b      	lsls	r3, r3, #5
 80258e4:	fb93 f8fc 	sdiv	r8, r3, ip
 80258e8:	fb0c 3318 	mls	r3, ip, r8, r3
 80258ec:	2b00      	cmp	r3, #0
 80258ee:	bfbc      	itt	lt
 80258f0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80258f4:	4463      	addlt	r3, ip
 80258f6:	f108 0101 	add.w	r1, r8, #1
 80258fa:	910f      	str	r1, [sp, #60]	; 0x3c
 80258fc:	18d2      	adds	r2, r2, r3
 80258fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025900:	bf56      	itet	pl
 8025902:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8025904:	4640      	movmi	r0, r8
 8025906:	eba2 020c 	subpl.w	r2, r2, ip
 802590a:	fa0f fe80 	sxth.w	lr, r0
 802590e:	4406      	add	r6, r0
 8025910:	0141      	lsls	r1, r0, #5
 8025912:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025914:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025918:	4405      	add	r5, r0
 802591a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802591e:	b209      	sxth	r1, r1
 8025920:	fa0f f985 	sxth.w	r9, r5
 8025924:	4438      	add	r0, r7
 8025926:	8361      	strh	r1, [r4, #26]
 8025928:	444f      	add	r7, r9
 802592a:	42b8      	cmp	r0, r7
 802592c:	f43f acf4 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025930:	ea5e 0101 	orrs.w	r1, lr, r1
 8025934:	d00e      	beq.n	8025954 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025936:	9906      	ldr	r1, [sp, #24]
 8025938:	2900      	cmp	r1, #0
 802593a:	db0b      	blt.n	8025954 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802593c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802593e:	9806      	ldr	r0, [sp, #24]
 8025940:	4288      	cmp	r0, r1
 8025942:	da07      	bge.n	8025954 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025944:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025948:	4288      	cmp	r0, r1
 802594a:	d330      	bcc.n	80259ae <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802594c:	f04f 0101 	mov.w	r1, #1
 8025950:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025954:	9906      	ldr	r1, [sp, #24]
 8025956:	f8a4 9014 	strh.w	r9, [r4, #20]
 802595a:	82e1      	strh	r1, [r4, #22]
 802595c:	f04f 0100 	mov.w	r1, #0
 8025960:	8321      	strh	r1, [r4, #24]
 8025962:	8361      	strh	r1, [r4, #26]
 8025964:	9905      	ldr	r1, [sp, #20]
 8025966:	42a9      	cmp	r1, r5
 8025968:	d1c8      	bne.n	80258fc <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802596a:	9b02      	ldr	r3, [sp, #8]
 802596c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802596e:	1b9e      	subs	r6, r3, r6
 8025970:	9b07      	ldr	r3, [sp, #28]
 8025972:	3120      	adds	r1, #32
 8025974:	8326      	strh	r6, [r4, #24]
 8025976:	1ac9      	subs	r1, r1, r3
 8025978:	434e      	muls	r6, r1
 802597a:	8366      	strh	r6, [r4, #26]
 802597c:	e65a      	b.n	8025634 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802597e:	f04f 33ff 	mov.w	r3, #4294967295
 8025982:	434a      	muls	r2, r1
 8025984:	f1cc 0c00 	rsb	ip, ip, #0
 8025988:	9309      	str	r3, [sp, #36]	; 0x24
 802598a:	2300      	movs	r3, #0
 802598c:	e76a      	b.n	8025864 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802598e:	f104 0314 	add.w	r3, r4, #20
 8025992:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025996:	cb03      	ldmia	r3!, {r0, r1}
 8025998:	f8c8 0000 	str.w	r0, [r8]
 802599c:	f8c8 1004 	str.w	r1, [r8, #4]
 80259a0:	6923      	ldr	r3, [r4, #16]
 80259a2:	3308      	adds	r3, #8
 80259a4:	6123      	str	r3, [r4, #16]
 80259a6:	68a3      	ldr	r3, [r4, #8]
 80259a8:	3301      	adds	r3, #1
 80259aa:	60a3      	str	r3, [r4, #8]
 80259ac:	e789      	b.n	80258c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80259ae:	6921      	ldr	r1, [r4, #16]
 80259b0:	f104 0e14 	add.w	lr, r4, #20
 80259b4:	910e      	str	r1, [sp, #56]	; 0x38
 80259b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80259b8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80259bc:	6038      	str	r0, [r7, #0]
 80259be:	4638      	mov	r0, r7
 80259c0:	6079      	str	r1, [r7, #4]
 80259c2:	6921      	ldr	r1, [r4, #16]
 80259c4:	3108      	adds	r1, #8
 80259c6:	6121      	str	r1, [r4, #16]
 80259c8:	68a1      	ldr	r1, [r4, #8]
 80259ca:	3101      	adds	r1, #1
 80259cc:	60a1      	str	r1, [r4, #8]
 80259ce:	e7c1      	b.n	8025954 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80259d0:	f104 0214 	add.w	r2, r4, #20
 80259d4:	6926      	ldr	r6, [r4, #16]
 80259d6:	ca03      	ldmia	r2!, {r0, r1}
 80259d8:	6030      	str	r0, [r6, #0]
 80259da:	6071      	str	r1, [r6, #4]
 80259dc:	6922      	ldr	r2, [r4, #16]
 80259de:	3208      	adds	r2, #8
 80259e0:	6122      	str	r2, [r4, #16]
 80259e2:	68a2      	ldr	r2, [r4, #8]
 80259e4:	3201      	adds	r2, #1
 80259e6:	60a2      	str	r2, [r4, #8]
 80259e8:	e647      	b.n	802567a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 80259ea:	f104 0514 	add.w	r5, r4, #20
 80259ee:	6926      	ldr	r6, [r4, #16]
 80259f0:	cd03      	ldmia	r5!, {r0, r1}
 80259f2:	6030      	str	r0, [r6, #0]
 80259f4:	6071      	str	r1, [r6, #4]
 80259f6:	6921      	ldr	r1, [r4, #16]
 80259f8:	3108      	adds	r1, #8
 80259fa:	6121      	str	r1, [r4, #16]
 80259fc:	68a1      	ldr	r1, [r4, #8]
 80259fe:	3101      	adds	r1, #1
 8025a00:	60a1      	str	r1, [r4, #8]
 8025a02:	e699      	b.n	8025738 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025a04:	9b01      	ldr	r3, [sp, #4]
 8025a06:	ea4f 176c 	mov.w	r7, ip, asr #5
 8025a0a:	8b20      	ldrh	r0, [r4, #24]
 8025a0c:	f00c 0c1f 	and.w	ip, ip, #31
 8025a10:	f003 031f 	and.w	r3, r3, #31
 8025a14:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8025a18:	9310      	str	r3, [sp, #64]	; 0x40
 8025a1a:	9b06      	ldr	r3, [sp, #24]
 8025a1c:	429f      	cmp	r7, r3
 8025a1e:	d10a      	bne.n	8025a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8025a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a22:	4418      	add	r0, r3
 8025a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a26:	449c      	add	ip, r3
 8025a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a2a:	8320      	strh	r0, [r4, #24]
 8025a2c:	fb03 ee0c 	mla	lr, r3, ip, lr
 8025a30:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025a34:	e686      	b.n	8025744 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025a36:	9b00      	ldr	r3, [sp, #0]
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	f2c0 80a0 	blt.w	8025b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 8025a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025a40:	f1cc 0320 	rsb	r3, ip, #32
 8025a44:	434b      	muls	r3, r1
 8025a46:	2101      	movs	r1, #1
 8025a48:	910e      	str	r1, [sp, #56]	; 0x38
 8025a4a:	2120      	movs	r1, #32
 8025a4c:	9a00      	ldr	r2, [sp, #0]
 8025a4e:	910d      	str	r1, [sp, #52]	; 0x34
 8025a50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025a52:	fb93 f5f2 	sdiv	r5, r3, r2
 8025a56:	fb02 3315 	mls	r3, r2, r5, r3
 8025a5a:	448c      	add	ip, r1
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	bfbc      	itt	lt
 8025a60:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8025a64:	189b      	addlt	r3, r3, r2
 8025a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025a68:	fb05 ec0c 	mla	ip, r5, ip, lr
 8025a6c:	4428      	add	r0, r5
 8025a6e:	4417      	add	r7, r2
 8025a70:	fa0f f18c 	sxth.w	r1, ip
 8025a74:	fa0f fc89 	sxth.w	ip, r9
 8025a78:	fa0f fe87 	sxth.w	lr, r7
 8025a7c:	8361      	strh	r1, [r4, #26]
 8025a7e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8025a82:	b200      	sxth	r0, r0
 8025a84:	920f      	str	r2, [sp, #60]	; 0x3c
 8025a86:	4472      	add	r2, lr
 8025a88:	8320      	strh	r0, [r4, #24]
 8025a8a:	4542      	cmp	r2, r8
 8025a8c:	f43f ac44 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025a90:	ea50 0201 	orrs.w	r2, r0, r1
 8025a94:	d00c      	beq.n	8025ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025a96:	2e00      	cmp	r6, #0
 8025a98:	db0a      	blt.n	8025ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025a9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025a9c:	42b1      	cmp	r1, r6
 8025a9e:	dd07      	ble.n	8025ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025aa0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025aa4:	4288      	cmp	r0, r1
 8025aa6:	d375      	bcc.n	8025b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8025aa8:	f04f 0201 	mov.w	r2, #1
 8025aac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025ab2:	f8a4 e014 	strh.w	lr, [r4, #20]
 8025ab6:	1956      	adds	r6, r2, r5
 8025ab8:	9a06      	ldr	r2, [sp, #24]
 8025aba:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025abe:	42ba      	cmp	r2, r7
 8025ac0:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025ac4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025ac8:	d04c      	beq.n	8025b64 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 8025aca:	9a02      	ldr	r2, [sp, #8]
 8025acc:	1b91      	subs	r1, r2, r6
 8025ace:	9a00      	ldr	r2, [sp, #0]
 8025ad0:	440d      	add	r5, r1
 8025ad2:	016d      	lsls	r5, r5, #5
 8025ad4:	fb95 fef2 	sdiv	lr, r5, r2
 8025ad8:	fb02 551e 	mls	r5, r2, lr, r5
 8025adc:	2d00      	cmp	r5, #0
 8025ade:	bfbc      	itt	lt
 8025ae0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025ae4:	18ad      	addlt	r5, r5, r2
 8025ae6:	9a00      	ldr	r2, [sp, #0]
 8025ae8:	1a9b      	subs	r3, r3, r2
 8025aea:	f10e 0201 	add.w	r2, lr, #1
 8025aee:	9213      	str	r2, [sp, #76]	; 0x4c
 8025af0:	195b      	adds	r3, r3, r5
 8025af2:	bf57      	itett	pl
 8025af4:	9a00      	ldrpl	r2, [sp, #0]
 8025af6:	4670      	movmi	r0, lr
 8025af8:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 8025afa:	1a9b      	subpl	r3, r3, r2
 8025afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025afe:	fa0f f880 	sxth.w	r8, r0
 8025b02:	4406      	add	r6, r0
 8025b04:	4417      	add	r7, r2
 8025b06:	0141      	lsls	r1, r0, #5
 8025b08:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025b0c:	b23a      	sxth	r2, r7
 8025b0e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8025b12:	b209      	sxth	r1, r1
 8025b14:	9211      	str	r2, [sp, #68]	; 0x44
 8025b16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025b18:	8361      	strh	r1, [r4, #26]
 8025b1a:	1882      	adds	r2, r0, r2
 8025b1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025b1e:	9212      	str	r2, [sp, #72]	; 0x48
 8025b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025b22:	4402      	add	r2, r0
 8025b24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025b26:	4290      	cmp	r0, r2
 8025b28:	f43f abf6 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025b2c:	ea58 0201 	orrs.w	r2, r8, r1
 8025b30:	d00d      	beq.n	8025b4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025b32:	f1bc 0f00 	cmp.w	ip, #0
 8025b36:	db0a      	blt.n	8025b4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025b38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025b3a:	458c      	cmp	ip, r1
 8025b3c:	da07      	bge.n	8025b4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025b3e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025b42:	4288      	cmp	r0, r1
 8025b44:	d336      	bcc.n	8025bb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8025b46:	f04f 0201 	mov.w	r2, #1
 8025b4a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025b4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025b50:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025b54:	82a2      	strh	r2, [r4, #20]
 8025b56:	9a06      	ldr	r2, [sp, #24]
 8025b58:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025b5c:	42ba      	cmp	r2, r7
 8025b5e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025b62:	d1c5      	bne.n	8025af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8025b64:	9b02      	ldr	r3, [sp, #8]
 8025b66:	1b9e      	subs	r6, r3, r6
 8025b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025b6a:	f103 0c20 	add.w	ip, r3, #32
 8025b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025b70:	8326      	strh	r6, [r4, #24]
 8025b72:	ebac 0c03 	sub.w	ip, ip, r3
 8025b76:	fb06 f60c 	mul.w	r6, r6, ip
 8025b7a:	8366      	strh	r6, [r4, #26]
 8025b7c:	e5e2      	b.n	8025744 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025b7e:	9a00      	ldr	r2, [sp, #0]
 8025b80:	f04f 31ff 	mov.w	r1, #4294967295
 8025b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b86:	4252      	negs	r2, r2
 8025b88:	910e      	str	r1, [sp, #56]	; 0x38
 8025b8a:	fb03 f30c 	mul.w	r3, r3, ip
 8025b8e:	2100      	movs	r1, #0
 8025b90:	9200      	str	r2, [sp, #0]
 8025b92:	e75b      	b.n	8025a4c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 8025b94:	f104 0614 	add.w	r6, r4, #20
 8025b98:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025b9c:	ce03      	ldmia	r6!, {r0, r1}
 8025b9e:	f8c8 0000 	str.w	r0, [r8]
 8025ba2:	f8c8 1004 	str.w	r1, [r8, #4]
 8025ba6:	6921      	ldr	r1, [r4, #16]
 8025ba8:	3108      	adds	r1, #8
 8025baa:	6121      	str	r1, [r4, #16]
 8025bac:	68a1      	ldr	r1, [r4, #8]
 8025bae:	3101      	adds	r1, #1
 8025bb0:	60a1      	str	r1, [r4, #8]
 8025bb2:	e77d      	b.n	8025ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025bb4:	f104 0814 	add.w	r8, r4, #20
 8025bb8:	6922      	ldr	r2, [r4, #16]
 8025bba:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025bbe:	9212      	str	r2, [sp, #72]	; 0x48
 8025bc0:	6010      	str	r0, [r2, #0]
 8025bc2:	6051      	str	r1, [r2, #4]
 8025bc4:	6921      	ldr	r1, [r4, #16]
 8025bc6:	3108      	adds	r1, #8
 8025bc8:	6121      	str	r1, [r4, #16]
 8025bca:	68a1      	ldr	r1, [r4, #8]
 8025bcc:	3101      	adds	r1, #1
 8025bce:	60a1      	str	r1, [r4, #8]
 8025bd0:	e7bd      	b.n	8025b4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025bd2:	f104 0214 	add.w	r2, r4, #20
 8025bd6:	6926      	ldr	r6, [r4, #16]
 8025bd8:	ca03      	ldmia	r2!, {r0, r1}
 8025bda:	6030      	str	r0, [r6, #0]
 8025bdc:	6071      	str	r1, [r6, #4]
 8025bde:	6922      	ldr	r2, [r4, #16]
 8025be0:	3208      	adds	r2, #8
 8025be2:	6122      	str	r2, [r4, #16]
 8025be4:	68a2      	ldr	r2, [r4, #8]
 8025be6:	3201      	adds	r2, #1
 8025be8:	60a2      	str	r2, [r4, #8]
 8025bea:	e5ce      	b.n	802578a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025bec:	f104 0314 	add.w	r3, r4, #20
 8025bf0:	6926      	ldr	r6, [r4, #16]
 8025bf2:	cb03      	ldmia	r3!, {r0, r1}
 8025bf4:	6030      	str	r0, [r6, #0]
 8025bf6:	6071      	str	r1, [r6, #4]
 8025bf8:	6923      	ldr	r3, [r4, #16]
 8025bfa:	3308      	adds	r3, #8
 8025bfc:	6123      	str	r3, [r4, #16]
 8025bfe:	68a3      	ldr	r3, [r4, #8]
 8025c00:	3301      	adds	r3, #1
 8025c02:	60a3      	str	r3, [r4, #8]
 8025c04:	e5f6      	b.n	80257f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025c06:	9b01      	ldr	r3, [sp, #4]
 8025c08:	8b20      	ldrh	r0, [r4, #24]
 8025c0a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8025c0e:	f003 021f 	and.w	r2, r3, #31
 8025c12:	9b04      	ldr	r3, [sp, #16]
 8025c14:	45dc      	cmp	ip, fp
 8025c16:	8b66      	ldrh	r6, [r4, #26]
 8025c18:	f003 031f 	and.w	r3, r3, #31
 8025c1c:	9305      	str	r3, [sp, #20]
 8025c1e:	9b03      	ldr	r3, [sp, #12]
 8025c20:	eba3 050e 	sub.w	r5, r3, lr
 8025c24:	d108      	bne.n	8025c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 8025c26:	9b05      	ldr	r3, [sp, #20]
 8025c28:	4428      	add	r0, r5
 8025c2a:	441a      	add	r2, r3
 8025c2c:	8320      	strh	r0, [r4, #24]
 8025c2e:	fb05 6502 	mla	r5, r5, r2, r6
 8025c32:	8365      	strh	r5, [r4, #26]
 8025c34:	f7ff bbed 	b.w	8025412 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025c38:	9b04      	ldr	r3, [sp, #16]
 8025c3a:	9901      	ldr	r1, [sp, #4]
 8025c3c:	1a5b      	subs	r3, r3, r1
 8025c3e:	9300      	str	r3, [sp, #0]
 8025c40:	f100 809c 	bmi.w	8025d7c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8025c44:	f1c2 0120 	rsb	r1, r2, #32
 8025c48:	434d      	muls	r5, r1
 8025c4a:	2101      	movs	r1, #1
 8025c4c:	9102      	str	r1, [sp, #8]
 8025c4e:	2120      	movs	r1, #32
 8025c50:	9b00      	ldr	r3, [sp, #0]
 8025c52:	9101      	str	r1, [sp, #4]
 8025c54:	9901      	ldr	r1, [sp, #4]
 8025c56:	fb95 f7f3 	sdiv	r7, r5, r3
 8025c5a:	fb03 5517 	mls	r5, r3, r7, r5
 8025c5e:	440a      	add	r2, r1
 8025c60:	2d00      	cmp	r5, #0
 8025c62:	bfbc      	itt	lt
 8025c64:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025c68:	18ed      	addlt	r5, r5, r3
 8025c6a:	fb07 6202 	mla	r2, r7, r2, r6
 8025c6e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8025c72:	4438      	add	r0, r7
 8025c74:	b211      	sxth	r1, r2
 8025c76:	9a02      	ldr	r2, [sp, #8]
 8025c78:	b200      	sxth	r0, r0
 8025c7a:	4494      	add	ip, r2
 8025c7c:	fa0f f289 	sxth.w	r2, r9
 8025c80:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025c84:	0413      	lsls	r3, r2, #16
 8025c86:	8320      	strh	r0, [r4, #24]
 8025c88:	fa0f f88c 	sxth.w	r8, ip
 8025c8c:	8361      	strh	r1, [r4, #26]
 8025c8e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 8025c92:	9304      	str	r3, [sp, #16]
 8025c94:	eb08 0a03 	add.w	sl, r8, r3
 8025c98:	45d1      	cmp	r9, sl
 8025c9a:	f43f ab3d 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025c9e:	ea50 0301 	orrs.w	r3, r0, r1
 8025ca2:	d00b      	beq.n	8025cbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025ca4:	2e00      	cmp	r6, #0
 8025ca6:	db09      	blt.n	8025cbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025ca8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025caa:	428e      	cmp	r6, r1
 8025cac:	da06      	bge.n	8025cbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025cae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025cb2:	4288      	cmp	r0, r1
 8025cb4:	d36b      	bcc.n	8025d8e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 8025cb6:	2101      	movs	r1, #1
 8025cb8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025cbc:	2100      	movs	r1, #0
 8025cbe:	45e3      	cmp	fp, ip
 8025cc0:	f8a4 8014 	strh.w	r8, [r4, #20]
 8025cc4:	44be      	add	lr, r7
 8025cc6:	82e2      	strh	r2, [r4, #22]
 8025cc8:	8321      	strh	r1, [r4, #24]
 8025cca:	8361      	strh	r1, [r4, #26]
 8025ccc:	d047      	beq.n	8025d5e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 8025cce:	9b03      	ldr	r3, [sp, #12]
 8025cd0:	f04f 0900 	mov.w	r9, #0
 8025cd4:	eba3 060e 	sub.w	r6, r3, lr
 8025cd8:	9b00      	ldr	r3, [sp, #0]
 8025cda:	443e      	add	r6, r7
 8025cdc:	0176      	lsls	r6, r6, #5
 8025cde:	fb96 f7f3 	sdiv	r7, r6, r3
 8025ce2:	fb03 6617 	mls	r6, r3, r7, r6
 8025ce6:	428e      	cmp	r6, r1
 8025ce8:	bfbc      	itt	lt
 8025cea:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025cee:	18f6      	addlt	r6, r6, r3
 8025cf0:	9b00      	ldr	r3, [sp, #0]
 8025cf2:	1aed      	subs	r5, r5, r3
 8025cf4:	1c7b      	adds	r3, r7, #1
 8025cf6:	9307      	str	r3, [sp, #28]
 8025cf8:	19ad      	adds	r5, r5, r6
 8025cfa:	bf57      	itett	pl
 8025cfc:	9b00      	ldrpl	r3, [sp, #0]
 8025cfe:	4638      	movmi	r0, r7
 8025d00:	9807      	ldrpl	r0, [sp, #28]
 8025d02:	1aed      	subpl	r5, r5, r3
 8025d04:	9b02      	ldr	r3, [sp, #8]
 8025d06:	fa0f f880 	sxth.w	r8, r0
 8025d0a:	4486      	add	lr, r0
 8025d0c:	449c      	add	ip, r3
 8025d0e:	0141      	lsls	r1, r0, #5
 8025d10:	9b04      	ldr	r3, [sp, #16]
 8025d12:	fa0f fa8c 	sxth.w	sl, ip
 8025d16:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025d1a:	b209      	sxth	r1, r1
 8025d1c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8025d20:	4418      	add	r0, r3
 8025d22:	4453      	add	r3, sl
 8025d24:	8361      	strh	r1, [r4, #26]
 8025d26:	4298      	cmp	r0, r3
 8025d28:	f43f aaf6 	beq.w	8025318 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025d2c:	ea58 0301 	orrs.w	r3, r8, r1
 8025d30:	d00c      	beq.n	8025d4c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025d32:	2a00      	cmp	r2, #0
 8025d34:	db0a      	blt.n	8025d4c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025d36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025d38:	428a      	cmp	r2, r1
 8025d3a:	da07      	bge.n	8025d4c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025d3c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025d40:	4288      	cmp	r0, r1
 8025d42:	d334      	bcc.n	8025dae <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8025d44:	f04f 0301 	mov.w	r3, #1
 8025d48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025d4c:	45e3      	cmp	fp, ip
 8025d4e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8025d52:	82e2      	strh	r2, [r4, #22]
 8025d54:	f8a4 9018 	strh.w	r9, [r4, #24]
 8025d58:	f8a4 901a 	strh.w	r9, [r4, #26]
 8025d5c:	d1cc      	bne.n	8025cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 8025d5e:	9b03      	ldr	r3, [sp, #12]
 8025d60:	9e05      	ldr	r6, [sp, #20]
 8025d62:	eba3 0e0e 	sub.w	lr, r3, lr
 8025d66:	9b01      	ldr	r3, [sp, #4]
 8025d68:	3620      	adds	r6, #32
 8025d6a:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025d6e:	1af6      	subs	r6, r6, r3
 8025d70:	fb0e fe06 	mul.w	lr, lr, r6
 8025d74:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025d78:	f7ff bb4b 	b.w	8025412 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025d7c:	9b00      	ldr	r3, [sp, #0]
 8025d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8025d82:	4355      	muls	r5, r2
 8025d84:	425b      	negs	r3, r3
 8025d86:	9102      	str	r1, [sp, #8]
 8025d88:	2100      	movs	r1, #0
 8025d8a:	9300      	str	r3, [sp, #0]
 8025d8c:	e760      	b.n	8025c50 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 8025d8e:	f104 0614 	add.w	r6, r4, #20
 8025d92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025d96:	ce03      	ldmia	r6!, {r0, r1}
 8025d98:	f8c9 0000 	str.w	r0, [r9]
 8025d9c:	f8c9 1004 	str.w	r1, [r9, #4]
 8025da0:	6921      	ldr	r1, [r4, #16]
 8025da2:	3108      	adds	r1, #8
 8025da4:	6121      	str	r1, [r4, #16]
 8025da6:	68a1      	ldr	r1, [r4, #8]
 8025da8:	3101      	adds	r1, #1
 8025daa:	60a1      	str	r1, [r4, #8]
 8025dac:	e786      	b.n	8025cbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025dae:	f104 0814 	add.w	r8, r4, #20
 8025db2:	6923      	ldr	r3, [r4, #16]
 8025db4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025db8:	9306      	str	r3, [sp, #24]
 8025dba:	6018      	str	r0, [r3, #0]
 8025dbc:	6059      	str	r1, [r3, #4]
 8025dbe:	6921      	ldr	r1, [r4, #16]
 8025dc0:	3108      	adds	r1, #8
 8025dc2:	6121      	str	r1, [r4, #16]
 8025dc4:	68a1      	ldr	r1, [r4, #8]
 8025dc6:	3101      	adds	r1, #1
 8025dc8:	60a1      	str	r1, [r4, #8]
 8025dca:	e7bf      	b.n	8025d4c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

08025dcc <_ZN8touchgfx7Outline6lineToEii>:
 8025dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025dce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025dd0:	4604      	mov	r4, r0
 8025dd2:	460d      	mov	r5, r1
 8025dd4:	4616      	mov	r6, r2
 8025dd6:	079b      	lsls	r3, r3, #30
 8025dd8:	d526      	bpl.n	8025e28 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025dda:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8025dde:	ea85 0001 	eor.w	r0, r5, r1
 8025de2:	ea86 0302 	eor.w	r3, r6, r2
 8025de6:	4303      	orrs	r3, r0
 8025de8:	d01e      	beq.n	8025e28 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025dea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025dec:	114b      	asrs	r3, r1, #5
 8025dee:	9600      	str	r6, [sp, #0]
 8025df0:	4283      	cmp	r3, r0
 8025df2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025df4:	bfb8      	it	lt
 8025df6:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025df8:	3301      	adds	r3, #1
 8025dfa:	4283      	cmp	r3, r0
 8025dfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025dfe:	bfc8      	it	gt
 8025e00:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025e02:	116b      	asrs	r3, r5, #5
 8025e04:	4283      	cmp	r3, r0
 8025e06:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025e08:	bfb8      	it	lt
 8025e0a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025e0c:	3301      	adds	r3, #1
 8025e0e:	4283      	cmp	r3, r0
 8025e10:	4620      	mov	r0, r4
 8025e12:	bfc8      	it	gt
 8025e14:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025e16:	462b      	mov	r3, r5
 8025e18:	f7ff f9c6 	bl	80251a8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8025e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025e1e:	f043 0301 	orr.w	r3, r3, #1
 8025e22:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025e26:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025e28:	b002      	add	sp, #8
 8025e2a:	bd70      	pop	{r4, r5, r6, pc}

08025e2c <_ZN8touchgfx7Outline6moveToEii>:
 8025e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e2e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025e30:	4615      	mov	r5, r2
 8025e32:	4604      	mov	r4, r0
 8025e34:	460e      	mov	r6, r1
 8025e36:	079a      	lsls	r2, r3, #30
 8025e38:	d401      	bmi.n	8025e3e <_ZN8touchgfx7Outline6moveToEii+0x12>
 8025e3a:	f7ff f96f 	bl	802511c <_ZN8touchgfx7Outline5resetEv>
 8025e3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025e40:	07db      	lsls	r3, r3, #31
 8025e42:	d504      	bpl.n	8025e4e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025e44:	4620      	mov	r0, r4
 8025e46:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8025e4a:	f7ff ffbf 	bl	8025dcc <_ZN8touchgfx7Outline6lineToEii>
 8025e4e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025e52:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8025e56:	f345 174f 	sbfx	r7, r5, #5, #16
 8025e5a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8025e5e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8025e62:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025e66:	428a      	cmp	r2, r1
 8025e68:	d015      	beq.n	8025e96 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 8025e6a:	8b61      	ldrh	r1, [r4, #26]
 8025e6c:	8b22      	ldrh	r2, [r4, #24]
 8025e6e:	430a      	orrs	r2, r1
 8025e70:	d00b      	beq.n	8025e8a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	db09      	blt.n	8025e8a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025e76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025e78:	4293      	cmp	r3, r2
 8025e7a:	da06      	bge.n	8025e8a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025e7c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025e80:	429a      	cmp	r2, r3
 8025e82:	d30d      	bcc.n	8025ea0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8025e84:	2301      	movs	r3, #1
 8025e86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025e8a:	2300      	movs	r3, #0
 8025e8c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025e90:	82e7      	strh	r7, [r4, #22]
 8025e92:	8323      	strh	r3, [r4, #24]
 8025e94:	8363      	strh	r3, [r4, #26]
 8025e96:	61e6      	str	r6, [r4, #28]
 8025e98:	62a5      	str	r5, [r4, #40]	; 0x28
 8025e9a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8025e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025ea0:	f104 0314 	add.w	r3, r4, #20
 8025ea4:	6922      	ldr	r2, [r4, #16]
 8025ea6:	cb03      	ldmia	r3!, {r0, r1}
 8025ea8:	6010      	str	r0, [r2, #0]
 8025eaa:	6051      	str	r1, [r2, #4]
 8025eac:	6923      	ldr	r3, [r4, #16]
 8025eae:	3308      	adds	r3, #8
 8025eb0:	6123      	str	r3, [r4, #16]
 8025eb2:	68a3      	ldr	r3, [r4, #8]
 8025eb4:	3301      	adds	r3, #1
 8025eb6:	60a3      	str	r3, [r4, #8]
 8025eb8:	e7e7      	b.n	8025e8a <_ZN8touchgfx7Outline6moveToEii+0x5e>

08025eba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8025eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ebe:	b0d1      	sub	sp, #324	; 0x144
 8025ec0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025ec4:	466c      	mov	r4, sp
 8025ec6:	1a0d      	subs	r5, r1, r0
 8025ec8:	f100 0208 	add.w	r2, r0, #8
 8025ecc:	2d48      	cmp	r5, #72	; 0x48
 8025ece:	f340 80ba 	ble.w	8026046 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025ed2:	112d      	asrs	r5, r5, #4
 8025ed4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025ed8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025edc:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8025ee0:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025ee4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025ee8:	681e      	ldr	r6, [r3, #0]
 8025eea:	6006      	str	r6, [r0, #0]
 8025eec:	685e      	ldr	r6, [r3, #4]
 8025eee:	6046      	str	r6, [r0, #4]
 8025ef0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025ef4:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025ef8:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025efc:	80df      	strh	r7, [r3, #6]
 8025efe:	f1a1 0308 	sub.w	r3, r1, #8
 8025f02:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8025f06:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025f0a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8025f0e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025f12:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025f16:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025f1a:	4565      	cmp	r5, ip
 8025f1c:	da0f      	bge.n	8025f3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8025f1e:	681d      	ldr	r5, [r3, #0]
 8025f20:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025f24:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025f28:	6015      	str	r5, [r2, #0]
 8025f2a:	685d      	ldr	r5, [r3, #4]
 8025f2c:	6055      	str	r5, [r2, #4]
 8025f2e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025f32:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025f36:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025f3a:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025f3e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025f42:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025f46:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8025f4a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8025f4e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025f52:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025f56:	45ac      	cmp	ip, r5
 8025f58:	da0d      	bge.n	8025f76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8025f5a:	6815      	ldr	r5, [r2, #0]
 8025f5c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025f60:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025f64:	6005      	str	r5, [r0, #0]
 8025f66:	6855      	ldr	r5, [r2, #4]
 8025f68:	8107      	strh	r7, [r0, #8]
 8025f6a:	6045      	str	r5, [r0, #4]
 8025f6c:	8146      	strh	r6, [r0, #10]
 8025f6e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8025f72:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8025f76:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8025f7a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025f7e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025f82:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025f86:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025f8a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025f8e:	4565      	cmp	r5, ip
 8025f90:	da0f      	bge.n	8025fb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025f92:	681d      	ldr	r5, [r3, #0]
 8025f94:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025f98:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025f9c:	6005      	str	r5, [r0, #0]
 8025f9e:	685d      	ldr	r5, [r3, #4]
 8025fa0:	6045      	str	r5, [r0, #4]
 8025fa2:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025fa6:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025faa:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025fae:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025fb2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8025fb6:	f102 0508 	add.w	r5, r2, #8
 8025fba:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8025fbe:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025fc2:	462f      	mov	r7, r5
 8025fc4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025fc8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025fcc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8025fd0:	4556      	cmp	r6, sl
 8025fd2:	db18      	blt.n	8026006 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025fd4:	3b08      	subs	r3, #8
 8025fd6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8025fda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025fde:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8025fe2:	45b2      	cmp	sl, r6
 8025fe4:	dbf6      	blt.n	8025fd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025fe6:	42ab      	cmp	r3, r5
 8025fe8:	681e      	ldr	r6, [r3, #0]
 8025fea:	d30e      	bcc.n	802600a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025fec:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025ff0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025ff4:	602e      	str	r6, [r5, #0]
 8025ff6:	685e      	ldr	r6, [r3, #4]
 8025ff8:	606e      	str	r6, [r5, #4]
 8025ffa:	f8a3 9000 	strh.w	r9, [r3]
 8025ffe:	f8a3 8002 	strh.w	r8, [r3, #2]
 8026002:	809f      	strh	r7, [r3, #4]
 8026004:	80da      	strh	r2, [r3, #6]
 8026006:	462a      	mov	r2, r5
 8026008:	e7d3      	b.n	8025fb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802600a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802600e:	6006      	str	r6, [r0, #0]
 8026010:	685e      	ldr	r6, [r3, #4]
 8026012:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8026016:	6046      	str	r6, [r0, #4]
 8026018:	1a1e      	subs	r6, r3, r0
 802601a:	80da      	strh	r2, [r3, #6]
 802601c:	1b4a      	subs	r2, r1, r5
 802601e:	f8a3 e000 	strh.w	lr, [r3]
 8026022:	10d2      	asrs	r2, r2, #3
 8026024:	f8a3 c002 	strh.w	ip, [r3, #2]
 8026028:	f8a3 8004 	strh.w	r8, [r3, #4]
 802602c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8026030:	bfb5      	itete	lt
 8026032:	e9c4 0300 	strdlt	r0, r3, [r4]
 8026036:	4607      	movge	r7, r0
 8026038:	460b      	movlt	r3, r1
 802603a:	e9c4 5100 	strdge	r5, r1, [r4]
 802603e:	4638      	mov	r0, r7
 8026040:	3408      	adds	r4, #8
 8026042:	4619      	mov	r1, r3
 8026044:	e73f      	b.n	8025ec6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026046:	4291      	cmp	r1, r2
 8026048:	d925      	bls.n	8026096 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802604a:	f1a2 0310 	sub.w	r3, r2, #16
 802604e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8026052:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8026056:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802605a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802605e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8026062:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026066:	42ae      	cmp	r6, r5
 8026068:	da13      	bge.n	8026092 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802606a:	461d      	mov	r5, r3
 802606c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8026070:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8026074:	3b08      	subs	r3, #8
 8026076:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802607a:	619e      	str	r6, [r3, #24]
 802607c:	42a8      	cmp	r0, r5
 802607e:	686e      	ldr	r6, [r5, #4]
 8026080:	f8a3 c010 	strh.w	ip, [r3, #16]
 8026084:	61de      	str	r6, [r3, #28]
 8026086:	825f      	strh	r7, [r3, #18]
 8026088:	f8a3 8014 	strh.w	r8, [r3, #20]
 802608c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8026090:	d1dd      	bne.n	802604e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8026092:	3208      	adds	r2, #8
 8026094:	e7d7      	b.n	8026046 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8026096:	466b      	mov	r3, sp
 8026098:	429c      	cmp	r4, r3
 802609a:	d903      	bls.n	80260a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802609c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80260a0:	3c08      	subs	r4, #8
 80260a2:	e710      	b.n	8025ec6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80260a4:	b051      	add	sp, #324	; 0x144
 80260a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080260aa <_ZN8touchgfx7Outline9sortCellsEv>:
 80260aa:	6881      	ldr	r1, [r0, #8]
 80260ac:	b111      	cbz	r1, 80260b4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80260ae:	68c0      	ldr	r0, [r0, #12]
 80260b0:	f7ff bf03 	b.w	8025eba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80260b4:	4770      	bx	lr

080260b6 <_ZN8touchgfx7Outline8getCellsEv>:
 80260b6:	b510      	push	{r4, lr}
 80260b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80260ba:	4604      	mov	r4, r0
 80260bc:	07da      	lsls	r2, r3, #31
 80260be:	d507      	bpl.n	80260d0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80260c0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80260c4:	f7ff fe82 	bl	8025dcc <_ZN8touchgfx7Outline6lineToEii>
 80260c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80260ca:	f023 0301 	bic.w	r3, r3, #1
 80260ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 80260d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80260d2:	079b      	lsls	r3, r3, #30
 80260d4:	d51a      	bpl.n	802610c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80260d6:	8b62      	ldrh	r2, [r4, #26]
 80260d8:	8b23      	ldrh	r3, [r4, #24]
 80260da:	4313      	orrs	r3, r2
 80260dc:	d00d      	beq.n	80260fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80260de:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80260e2:	2b00      	cmp	r3, #0
 80260e4:	db09      	blt.n	80260fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80260e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80260e8:	4293      	cmp	r3, r2
 80260ea:	da06      	bge.n	80260fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80260ec:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80260f0:	429a      	cmp	r2, r3
 80260f2:	d80d      	bhi.n	8026110 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80260f4:	2301      	movs	r3, #1
 80260f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80260fa:	68a0      	ldr	r0, [r4, #8]
 80260fc:	b138      	cbz	r0, 802610e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80260fe:	4620      	mov	r0, r4
 8026100:	f7ff ffd3 	bl	80260aa <_ZN8touchgfx7Outline9sortCellsEv>
 8026104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026106:	f023 0302 	bic.w	r3, r3, #2
 802610a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802610c:	68e0      	ldr	r0, [r4, #12]
 802610e:	bd10      	pop	{r4, pc}
 8026110:	f104 0314 	add.w	r3, r4, #20
 8026114:	6922      	ldr	r2, [r4, #16]
 8026116:	cb03      	ldmia	r3!, {r0, r1}
 8026118:	6010      	str	r0, [r2, #0]
 802611a:	6051      	str	r1, [r2, #4]
 802611c:	6923      	ldr	r3, [r4, #16]
 802611e:	3308      	adds	r3, #8
 8026120:	6123      	str	r3, [r4, #16]
 8026122:	68a3      	ldr	r3, [r4, #8]
 8026124:	3301      	adds	r3, #1
 8026126:	60a3      	str	r3, [r4, #8]
 8026128:	e7e7      	b.n	80260fa <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802612a <_ZN8touchgfx8ScanlineD1Ev>:
 802612a:	4770      	bx	lr

0802612c <_ZN8touchgfx8ScanlineD0Ev>:
 802612c:	b510      	push	{r4, lr}
 802612e:	4604      	mov	r4, r0
 8026130:	2124      	movs	r1, #36	; 0x24
 8026132:	f000 f888 	bl	8026246 <_ZdlPvj>
 8026136:	4620      	mov	r0, r4
 8026138:	bd10      	pop	{r4, pc}

0802613a <_ZN8touchgfx8Scanline5resetEv>:
 802613a:	b510      	push	{r4, lr}
 802613c:	4604      	mov	r4, r0
 802613e:	f7f1 fc2d 	bl	801799c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8026142:	61a0      	str	r0, [r4, #24]
 8026144:	f7f1 fc30 	bl	80179a8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8026148:	61e0      	str	r0, [r4, #28]
 802614a:	f7f1 fc33 	bl	80179b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802614e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026152:	6220      	str	r0, [r4, #32]
 8026154:	6160      	str	r0, [r4, #20]
 8026156:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802615a:	69e3      	ldr	r3, [r4, #28]
 802615c:	6123      	str	r3, [r4, #16]
 802615e:	2300      	movs	r3, #0
 8026160:	60e3      	str	r3, [r4, #12]
 8026162:	bd10      	pop	{r4, pc}

08026164 <_ZN8touchgfx8ScanlineC1Ev>:
 8026164:	4b09      	ldr	r3, [pc, #36]	; (802618c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8026166:	b510      	push	{r4, lr}
 8026168:	6003      	str	r3, [r0, #0]
 802616a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802616e:	4604      	mov	r4, r0
 8026170:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026174:	2300      	movs	r3, #0
 8026176:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802617a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802617e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8026182:	f7ff ffda 	bl	802613a <_ZN8touchgfx8Scanline5resetEv>
 8026186:	4620      	mov	r0, r4
 8026188:	bd10      	pop	{r4, pc}
 802618a:	bf00      	nop
 802618c:	0802eec4 	.word	0x0802eec4

08026190 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8026190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026194:	1e0c      	subs	r4, r1, #0
 8026196:	4605      	mov	r5, r0
 8026198:	4617      	mov	r7, r2
 802619a:	461e      	mov	r6, r3
 802619c:	da03      	bge.n	80261a6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802619e:	4426      	add	r6, r4
 80261a0:	2e01      	cmp	r6, #1
 80261a2:	d421      	bmi.n	80261e8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80261a4:	2400      	movs	r4, #0
 80261a6:	f7f1 fbf3 	bl	8017990 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80261aa:	42a0      	cmp	r0, r4
 80261ac:	dd1c      	ble.n	80261e8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80261ae:	eb04 0806 	add.w	r8, r4, r6
 80261b2:	f7f1 fbed 	bl	8017990 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80261b6:	4580      	cmp	r8, r0
 80261b8:	d902      	bls.n	80261c0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80261ba:	f7f1 fbe9 	bl	8017990 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80261be:	1b06      	subs	r6, r0, r4
 80261c0:	69a8      	ldr	r0, [r5, #24]
 80261c2:	4632      	mov	r2, r6
 80261c4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80261c8:	4420      	add	r0, r4
 80261ca:	f7f4 f92f 	bl	801a42c <_ZN8touchgfx6memsetEPvhm>
 80261ce:	686b      	ldr	r3, [r5, #4]
 80261d0:	b2b2      	uxth	r2, r6
 80261d2:	3301      	adds	r3, #1
 80261d4:	42a3      	cmp	r3, r4
 80261d6:	696b      	ldr	r3, [r5, #20]
 80261d8:	d108      	bne.n	80261ec <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80261da:	8819      	ldrh	r1, [r3, #0]
 80261dc:	440a      	add	r2, r1
 80261de:	801a      	strh	r2, [r3, #0]
 80261e0:	3c01      	subs	r4, #1
 80261e2:	4434      	add	r4, r6
 80261e4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80261e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80261ec:	1c99      	adds	r1, r3, #2
 80261ee:	6169      	str	r1, [r5, #20]
 80261f0:	805a      	strh	r2, [r3, #2]
 80261f2:	692b      	ldr	r3, [r5, #16]
 80261f4:	1c9a      	adds	r2, r3, #2
 80261f6:	612a      	str	r2, [r5, #16]
 80261f8:	805c      	strh	r4, [r3, #2]
 80261fa:	68eb      	ldr	r3, [r5, #12]
 80261fc:	3301      	adds	r3, #1
 80261fe:	60eb      	str	r3, [r5, #12]
 8026200:	e7ee      	b.n	80261e0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08026202 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8026202:	4770      	bx	lr

08026204 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8026204:	b510      	push	{r4, lr}
 8026206:	4604      	mov	r4, r0
 8026208:	2118      	movs	r1, #24
 802620a:	f000 f81c 	bl	8026246 <_ZdlPvj>
 802620e:	4620      	mov	r0, r4
 8026210:	bd10      	pop	{r4, pc}
	...

08026214 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8026214:	4a04      	ldr	r2, [pc, #16]	; (8026228 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8026216:	6002      	str	r2, [r0, #0]
 8026218:	2200      	movs	r2, #0
 802621a:	6042      	str	r2, [r0, #4]
 802621c:	7202      	strb	r2, [r0, #8]
 802621e:	6142      	str	r2, [r0, #20]
 8026220:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8026224:	4770      	bx	lr
 8026226:	bf00      	nop
 8026228:	0802eed4 	.word	0x0802eed4

0802622c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802622c:	60c3      	str	r3, [r0, #12]
 802622e:	9b00      	ldr	r3, [sp, #0]
 8026230:	6041      	str	r1, [r0, #4]
 8026232:	6103      	str	r3, [r0, #16]
 8026234:	9b01      	ldr	r3, [sp, #4]
 8026236:	7202      	strb	r2, [r0, #8]
 8026238:	6143      	str	r3, [r0, #20]
 802623a:	4770      	bx	lr

0802623c <__aeabi_atexit>:
 802623c:	460b      	mov	r3, r1
 802623e:	4601      	mov	r1, r0
 8026240:	4618      	mov	r0, r3
 8026242:	f000 b959 	b.w	80264f8 <__cxa_atexit>

08026246 <_ZdlPvj>:
 8026246:	f000 b812 	b.w	802626e <_ZdlPv>

0802624a <__cxa_guard_acquire>:
 802624a:	6803      	ldr	r3, [r0, #0]
 802624c:	07db      	lsls	r3, r3, #31
 802624e:	d406      	bmi.n	802625e <__cxa_guard_acquire+0x14>
 8026250:	7843      	ldrb	r3, [r0, #1]
 8026252:	b103      	cbz	r3, 8026256 <__cxa_guard_acquire+0xc>
 8026254:	deff      	udf	#255	; 0xff
 8026256:	2301      	movs	r3, #1
 8026258:	7043      	strb	r3, [r0, #1]
 802625a:	4618      	mov	r0, r3
 802625c:	4770      	bx	lr
 802625e:	2000      	movs	r0, #0
 8026260:	4770      	bx	lr

08026262 <__cxa_guard_release>:
 8026262:	2301      	movs	r3, #1
 8026264:	6003      	str	r3, [r0, #0]
 8026266:	4770      	bx	lr

08026268 <__cxa_pure_virtual>:
 8026268:	b508      	push	{r3, lr}
 802626a:	f000 f80f 	bl	802628c <_ZSt9terminatev>

0802626e <_ZdlPv>:
 802626e:	f000 b995 	b.w	802659c <free>

08026272 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026272:	b508      	push	{r3, lr}
 8026274:	4780      	blx	r0
 8026276:	f000 f913 	bl	80264a0 <abort>
	...

0802627c <_ZSt13get_terminatev>:
 802627c:	4b02      	ldr	r3, [pc, #8]	; (8026288 <_ZSt13get_terminatev+0xc>)
 802627e:	6818      	ldr	r0, [r3, #0]
 8026280:	f3bf 8f5b 	dmb	ish
 8026284:	4770      	bx	lr
 8026286:	bf00      	nop
 8026288:	20000078 	.word	0x20000078

0802628c <_ZSt9terminatev>:
 802628c:	b508      	push	{r3, lr}
 802628e:	f7ff fff5 	bl	802627c <_ZSt13get_terminatev>
 8026292:	f7ff ffee 	bl	8026272 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08026298 <ceil>:
 8026298:	ee10 1a90 	vmov	r1, s1
 802629c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80262a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80262a4:	2b13      	cmp	r3, #19
 80262a6:	b530      	push	{r4, r5, lr}
 80262a8:	ee10 0a10 	vmov	r0, s0
 80262ac:	ee10 5a10 	vmov	r5, s0
 80262b0:	dc2f      	bgt.n	8026312 <ceil+0x7a>
 80262b2:	2b00      	cmp	r3, #0
 80262b4:	da13      	bge.n	80262de <ceil+0x46>
 80262b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8026378 <ceil+0xe0>
 80262ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80262be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80262c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262c6:	dd05      	ble.n	80262d4 <ceil+0x3c>
 80262c8:	2900      	cmp	r1, #0
 80262ca:	db4c      	blt.n	8026366 <ceil+0xce>
 80262cc:	4301      	orrs	r1, r0
 80262ce:	d04e      	beq.n	802636e <ceil+0xd6>
 80262d0:	492b      	ldr	r1, [pc, #172]	; (8026380 <ceil+0xe8>)
 80262d2:	2000      	movs	r0, #0
 80262d4:	460b      	mov	r3, r1
 80262d6:	4602      	mov	r2, r0
 80262d8:	ec43 2b10 	vmov	d0, r2, r3
 80262dc:	e020      	b.n	8026320 <ceil+0x88>
 80262de:	4a29      	ldr	r2, [pc, #164]	; (8026384 <ceil+0xec>)
 80262e0:	411a      	asrs	r2, r3
 80262e2:	ea01 0402 	and.w	r4, r1, r2
 80262e6:	4304      	orrs	r4, r0
 80262e8:	d01a      	beq.n	8026320 <ceil+0x88>
 80262ea:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8026378 <ceil+0xe0>
 80262ee:	ee30 0b07 	vadd.f64	d0, d0, d7
 80262f2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80262f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262fa:	ddeb      	ble.n	80262d4 <ceil+0x3c>
 80262fc:	2900      	cmp	r1, #0
 80262fe:	bfc2      	ittt	gt
 8026300:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8026304:	fa40 f303 	asrgt.w	r3, r0, r3
 8026308:	18c9      	addgt	r1, r1, r3
 802630a:	ea21 0102 	bic.w	r1, r1, r2
 802630e:	2000      	movs	r0, #0
 8026310:	e7e0      	b.n	80262d4 <ceil+0x3c>
 8026312:	2b33      	cmp	r3, #51	; 0x33
 8026314:	dd05      	ble.n	8026322 <ceil+0x8a>
 8026316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802631a:	d101      	bne.n	8026320 <ceil+0x88>
 802631c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8026320:	bd30      	pop	{r4, r5, pc}
 8026322:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8026326:	f04f 32ff 	mov.w	r2, #4294967295
 802632a:	40e2      	lsrs	r2, r4
 802632c:	4202      	tst	r2, r0
 802632e:	d0f7      	beq.n	8026320 <ceil+0x88>
 8026330:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8026378 <ceil+0xe0>
 8026334:	ee30 0b07 	vadd.f64	d0, d0, d7
 8026338:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802633c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026340:	ddc8      	ble.n	80262d4 <ceil+0x3c>
 8026342:	2900      	cmp	r1, #0
 8026344:	dd02      	ble.n	802634c <ceil+0xb4>
 8026346:	2b14      	cmp	r3, #20
 8026348:	d103      	bne.n	8026352 <ceil+0xba>
 802634a:	3101      	adds	r1, #1
 802634c:	ea20 0002 	bic.w	r0, r0, r2
 8026350:	e7c0      	b.n	80262d4 <ceil+0x3c>
 8026352:	2401      	movs	r4, #1
 8026354:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8026358:	fa04 f303 	lsl.w	r3, r4, r3
 802635c:	4418      	add	r0, r3
 802635e:	42a8      	cmp	r0, r5
 8026360:	bf38      	it	cc
 8026362:	1909      	addcc	r1, r1, r4
 8026364:	e7f2      	b.n	802634c <ceil+0xb4>
 8026366:	2000      	movs	r0, #0
 8026368:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802636c:	e7b2      	b.n	80262d4 <ceil+0x3c>
 802636e:	4608      	mov	r0, r1
 8026370:	e7b0      	b.n	80262d4 <ceil+0x3c>
 8026372:	bf00      	nop
 8026374:	f3af 8000 	nop.w
 8026378:	8800759c 	.word	0x8800759c
 802637c:	7e37e43c 	.word	0x7e37e43c
 8026380:	3ff00000 	.word	0x3ff00000
 8026384:	000fffff 	.word	0x000fffff

08026388 <fmin>:
 8026388:	b508      	push	{r3, lr}
 802638a:	ed2d 8b04 	vpush	{d8-d9}
 802638e:	eeb0 8b40 	vmov.f64	d8, d0
 8026392:	eeb0 9b41 	vmov.f64	d9, d1
 8026396:	f000 f813 	bl	80263c0 <__fpclassifyd>
 802639a:	b148      	cbz	r0, 80263b0 <fmin+0x28>
 802639c:	eeb0 0b49 	vmov.f64	d0, d9
 80263a0:	f000 f80e 	bl	80263c0 <__fpclassifyd>
 80263a4:	b130      	cbz	r0, 80263b4 <fmin+0x2c>
 80263a6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80263aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263ae:	d401      	bmi.n	80263b4 <fmin+0x2c>
 80263b0:	eeb0 8b49 	vmov.f64	d8, d9
 80263b4:	eeb0 0b48 	vmov.f64	d0, d8
 80263b8:	ecbd 8b04 	vpop	{d8-d9}
 80263bc:	bd08      	pop	{r3, pc}
	...

080263c0 <__fpclassifyd>:
 80263c0:	ec51 0b10 	vmov	r0, r1, d0
 80263c4:	b510      	push	{r4, lr}
 80263c6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80263ca:	460b      	mov	r3, r1
 80263cc:	d019      	beq.n	8026402 <__fpclassifyd+0x42>
 80263ce:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80263d2:	490e      	ldr	r1, [pc, #56]	; (802640c <__fpclassifyd+0x4c>)
 80263d4:	428a      	cmp	r2, r1
 80263d6:	d90e      	bls.n	80263f6 <__fpclassifyd+0x36>
 80263d8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80263dc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80263e0:	428a      	cmp	r2, r1
 80263e2:	d908      	bls.n	80263f6 <__fpclassifyd+0x36>
 80263e4:	4a0a      	ldr	r2, [pc, #40]	; (8026410 <__fpclassifyd+0x50>)
 80263e6:	4213      	tst	r3, r2
 80263e8:	d007      	beq.n	80263fa <__fpclassifyd+0x3a>
 80263ea:	4294      	cmp	r4, r2
 80263ec:	d107      	bne.n	80263fe <__fpclassifyd+0x3e>
 80263ee:	fab0 f080 	clz	r0, r0
 80263f2:	0940      	lsrs	r0, r0, #5
 80263f4:	bd10      	pop	{r4, pc}
 80263f6:	2004      	movs	r0, #4
 80263f8:	e7fc      	b.n	80263f4 <__fpclassifyd+0x34>
 80263fa:	2003      	movs	r0, #3
 80263fc:	e7fa      	b.n	80263f4 <__fpclassifyd+0x34>
 80263fe:	2000      	movs	r0, #0
 8026400:	e7f8      	b.n	80263f4 <__fpclassifyd+0x34>
 8026402:	2800      	cmp	r0, #0
 8026404:	d1ee      	bne.n	80263e4 <__fpclassifyd+0x24>
 8026406:	2002      	movs	r0, #2
 8026408:	e7f4      	b.n	80263f4 <__fpclassifyd+0x34>
 802640a:	bf00      	nop
 802640c:	7fdfffff 	.word	0x7fdfffff
 8026410:	7ff00000 	.word	0x7ff00000

08026414 <round>:
 8026414:	ee10 1a90 	vmov	r1, s1
 8026418:	f3c1 500a 	ubfx	r0, r1, #20, #11
 802641c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8026420:	2a13      	cmp	r2, #19
 8026422:	b510      	push	{r4, lr}
 8026424:	ee10 3a10 	vmov	r3, s0
 8026428:	dc19      	bgt.n	802645e <round+0x4a>
 802642a:	2a00      	cmp	r2, #0
 802642c:	da09      	bge.n	8026442 <round+0x2e>
 802642e:	3201      	adds	r2, #1
 8026430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8026434:	d103      	bne.n	802643e <round+0x2a>
 8026436:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802643a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 802643e:	2000      	movs	r0, #0
 8026440:	e027      	b.n	8026492 <round+0x7e>
 8026442:	4816      	ldr	r0, [pc, #88]	; (802649c <round+0x88>)
 8026444:	4110      	asrs	r0, r2
 8026446:	ea01 0400 	and.w	r4, r1, r0
 802644a:	4323      	orrs	r3, r4
 802644c:	d00e      	beq.n	802646c <round+0x58>
 802644e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8026452:	fa43 f202 	asr.w	r2, r3, r2
 8026456:	4411      	add	r1, r2
 8026458:	ea21 0100 	bic.w	r1, r1, r0
 802645c:	e7ef      	b.n	802643e <round+0x2a>
 802645e:	2a33      	cmp	r2, #51	; 0x33
 8026460:	dd05      	ble.n	802646e <round+0x5a>
 8026462:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8026466:	d101      	bne.n	802646c <round+0x58>
 8026468:	ee30 0b00 	vadd.f64	d0, d0, d0
 802646c:	bd10      	pop	{r4, pc}
 802646e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8026472:	f04f 30ff 	mov.w	r0, #4294967295
 8026476:	fa20 f404 	lsr.w	r4, r0, r4
 802647a:	4223      	tst	r3, r4
 802647c:	d0f6      	beq.n	802646c <round+0x58>
 802647e:	2001      	movs	r0, #1
 8026480:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8026484:	fa00 f202 	lsl.w	r2, r0, r2
 8026488:	189b      	adds	r3, r3, r2
 802648a:	bf28      	it	cs
 802648c:	1809      	addcs	r1, r1, r0
 802648e:	ea23 0004 	bic.w	r0, r3, r4
 8026492:	460b      	mov	r3, r1
 8026494:	4602      	mov	r2, r0
 8026496:	ec43 2b10 	vmov	d0, r2, r3
 802649a:	e7e7      	b.n	802646c <round+0x58>
 802649c:	000fffff 	.word	0x000fffff

080264a0 <abort>:
 80264a0:	b508      	push	{r3, lr}
 80264a2:	2006      	movs	r0, #6
 80264a4:	f001 f920 	bl	80276e8 <raise>
 80264a8:	2001      	movs	r0, #1
 80264aa:	f7dc fbfb 	bl	8002ca4 <_exit>
	...

080264b0 <__assert_func>:
 80264b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80264b2:	4614      	mov	r4, r2
 80264b4:	461a      	mov	r2, r3
 80264b6:	4b09      	ldr	r3, [pc, #36]	; (80264dc <__assert_func+0x2c>)
 80264b8:	681b      	ldr	r3, [r3, #0]
 80264ba:	4605      	mov	r5, r0
 80264bc:	68d8      	ldr	r0, [r3, #12]
 80264be:	b14c      	cbz	r4, 80264d4 <__assert_func+0x24>
 80264c0:	4b07      	ldr	r3, [pc, #28]	; (80264e0 <__assert_func+0x30>)
 80264c2:	9100      	str	r1, [sp, #0]
 80264c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80264c8:	4906      	ldr	r1, [pc, #24]	; (80264e4 <__assert_func+0x34>)
 80264ca:	462b      	mov	r3, r5
 80264cc:	f000 f828 	bl	8026520 <fiprintf>
 80264d0:	f7ff ffe6 	bl	80264a0 <abort>
 80264d4:	4b04      	ldr	r3, [pc, #16]	; (80264e8 <__assert_func+0x38>)
 80264d6:	461c      	mov	r4, r3
 80264d8:	e7f3      	b.n	80264c2 <__assert_func+0x12>
 80264da:	bf00      	nop
 80264dc:	2000007c 	.word	0x2000007c
 80264e0:	0802eedc 	.word	0x0802eedc
 80264e4:	0802eee9 	.word	0x0802eee9
 80264e8:	0802ef17 	.word	0x0802ef17

080264ec <atexit>:
 80264ec:	2300      	movs	r3, #0
 80264ee:	4601      	mov	r1, r0
 80264f0:	461a      	mov	r2, r3
 80264f2:	4618      	mov	r0, r3
 80264f4:	f002 b872 	b.w	80285dc <__register_exitproc>

080264f8 <__cxa_atexit>:
 80264f8:	b510      	push	{r4, lr}
 80264fa:	4c05      	ldr	r4, [pc, #20]	; (8026510 <__cxa_atexit+0x18>)
 80264fc:	4613      	mov	r3, r2
 80264fe:	b12c      	cbz	r4, 802650c <__cxa_atexit+0x14>
 8026500:	460a      	mov	r2, r1
 8026502:	4601      	mov	r1, r0
 8026504:	2002      	movs	r0, #2
 8026506:	f002 f869 	bl	80285dc <__register_exitproc>
 802650a:	bd10      	pop	{r4, pc}
 802650c:	4620      	mov	r0, r4
 802650e:	e7fc      	b.n	802650a <__cxa_atexit+0x12>
 8026510:	080285dd 	.word	0x080285dd

08026514 <__errno>:
 8026514:	4b01      	ldr	r3, [pc, #4]	; (802651c <__errno+0x8>)
 8026516:	6818      	ldr	r0, [r3, #0]
 8026518:	4770      	bx	lr
 802651a:	bf00      	nop
 802651c:	2000007c 	.word	0x2000007c

08026520 <fiprintf>:
 8026520:	b40e      	push	{r1, r2, r3}
 8026522:	b503      	push	{r0, r1, lr}
 8026524:	4601      	mov	r1, r0
 8026526:	ab03      	add	r3, sp, #12
 8026528:	4805      	ldr	r0, [pc, #20]	; (8026540 <fiprintf+0x20>)
 802652a:	f853 2b04 	ldr.w	r2, [r3], #4
 802652e:	6800      	ldr	r0, [r0, #0]
 8026530:	9301      	str	r3, [sp, #4]
 8026532:	f000 f925 	bl	8026780 <_vfiprintf_r>
 8026536:	b002      	add	sp, #8
 8026538:	f85d eb04 	ldr.w	lr, [sp], #4
 802653c:	b003      	add	sp, #12
 802653e:	4770      	bx	lr
 8026540:	2000007c 	.word	0x2000007c

08026544 <__libc_init_array>:
 8026544:	b570      	push	{r4, r5, r6, lr}
 8026546:	4d0d      	ldr	r5, [pc, #52]	; (802657c <__libc_init_array+0x38>)
 8026548:	4c0d      	ldr	r4, [pc, #52]	; (8026580 <__libc_init_array+0x3c>)
 802654a:	1b64      	subs	r4, r4, r5
 802654c:	10a4      	asrs	r4, r4, #2
 802654e:	2600      	movs	r6, #0
 8026550:	42a6      	cmp	r6, r4
 8026552:	d109      	bne.n	8026568 <__libc_init_array+0x24>
 8026554:	4d0b      	ldr	r5, [pc, #44]	; (8026584 <__libc_init_array+0x40>)
 8026556:	4c0c      	ldr	r4, [pc, #48]	; (8026588 <__libc_init_array+0x44>)
 8026558:	f004 fba0 	bl	802ac9c <_init>
 802655c:	1b64      	subs	r4, r4, r5
 802655e:	10a4      	asrs	r4, r4, #2
 8026560:	2600      	movs	r6, #0
 8026562:	42a6      	cmp	r6, r4
 8026564:	d105      	bne.n	8026572 <__libc_init_array+0x2e>
 8026566:	bd70      	pop	{r4, r5, r6, pc}
 8026568:	f855 3b04 	ldr.w	r3, [r5], #4
 802656c:	4798      	blx	r3
 802656e:	3601      	adds	r6, #1
 8026570:	e7ee      	b.n	8026550 <__libc_init_array+0xc>
 8026572:	f855 3b04 	ldr.w	r3, [r5], #4
 8026576:	4798      	blx	r3
 8026578:	3601      	adds	r6, #1
 802657a:	e7f2      	b.n	8026562 <__libc_init_array+0x1e>
 802657c:	080d907c 	.word	0x080d907c
 8026580:	080d907c 	.word	0x080d907c
 8026584:	080d907c 	.word	0x080d907c
 8026588:	080d90ac 	.word	0x080d90ac

0802658c <malloc>:
 802658c:	4b02      	ldr	r3, [pc, #8]	; (8026598 <malloc+0xc>)
 802658e:	4601      	mov	r1, r0
 8026590:	6818      	ldr	r0, [r3, #0]
 8026592:	f000 b871 	b.w	8026678 <_malloc_r>
 8026596:	bf00      	nop
 8026598:	2000007c 	.word	0x2000007c

0802659c <free>:
 802659c:	4b02      	ldr	r3, [pc, #8]	; (80265a8 <free+0xc>)
 802659e:	4601      	mov	r1, r0
 80265a0:	6818      	ldr	r0, [r3, #0]
 80265a2:	f000 b819 	b.w	80265d8 <_free_r>
 80265a6:	bf00      	nop
 80265a8:	2000007c 	.word	0x2000007c

080265ac <memcpy>:
 80265ac:	440a      	add	r2, r1
 80265ae:	4291      	cmp	r1, r2
 80265b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80265b4:	d100      	bne.n	80265b8 <memcpy+0xc>
 80265b6:	4770      	bx	lr
 80265b8:	b510      	push	{r4, lr}
 80265ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80265be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80265c2:	4291      	cmp	r1, r2
 80265c4:	d1f9      	bne.n	80265ba <memcpy+0xe>
 80265c6:	bd10      	pop	{r4, pc}

080265c8 <memset>:
 80265c8:	4402      	add	r2, r0
 80265ca:	4603      	mov	r3, r0
 80265cc:	4293      	cmp	r3, r2
 80265ce:	d100      	bne.n	80265d2 <memset+0xa>
 80265d0:	4770      	bx	lr
 80265d2:	f803 1b01 	strb.w	r1, [r3], #1
 80265d6:	e7f9      	b.n	80265cc <memset+0x4>

080265d8 <_free_r>:
 80265d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80265da:	2900      	cmp	r1, #0
 80265dc:	d048      	beq.n	8026670 <_free_r+0x98>
 80265de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80265e2:	9001      	str	r0, [sp, #4]
 80265e4:	2b00      	cmp	r3, #0
 80265e6:	f1a1 0404 	sub.w	r4, r1, #4
 80265ea:	bfb8      	it	lt
 80265ec:	18e4      	addlt	r4, r4, r3
 80265ee:	f003 fc23 	bl	8029e38 <__malloc_lock>
 80265f2:	4a20      	ldr	r2, [pc, #128]	; (8026674 <_free_r+0x9c>)
 80265f4:	9801      	ldr	r0, [sp, #4]
 80265f6:	6813      	ldr	r3, [r2, #0]
 80265f8:	4615      	mov	r5, r2
 80265fa:	b933      	cbnz	r3, 802660a <_free_r+0x32>
 80265fc:	6063      	str	r3, [r4, #4]
 80265fe:	6014      	str	r4, [r2, #0]
 8026600:	b003      	add	sp, #12
 8026602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026606:	f003 bc1d 	b.w	8029e44 <__malloc_unlock>
 802660a:	42a3      	cmp	r3, r4
 802660c:	d90b      	bls.n	8026626 <_free_r+0x4e>
 802660e:	6821      	ldr	r1, [r4, #0]
 8026610:	1862      	adds	r2, r4, r1
 8026612:	4293      	cmp	r3, r2
 8026614:	bf04      	itt	eq
 8026616:	681a      	ldreq	r2, [r3, #0]
 8026618:	685b      	ldreq	r3, [r3, #4]
 802661a:	6063      	str	r3, [r4, #4]
 802661c:	bf04      	itt	eq
 802661e:	1852      	addeq	r2, r2, r1
 8026620:	6022      	streq	r2, [r4, #0]
 8026622:	602c      	str	r4, [r5, #0]
 8026624:	e7ec      	b.n	8026600 <_free_r+0x28>
 8026626:	461a      	mov	r2, r3
 8026628:	685b      	ldr	r3, [r3, #4]
 802662a:	b10b      	cbz	r3, 8026630 <_free_r+0x58>
 802662c:	42a3      	cmp	r3, r4
 802662e:	d9fa      	bls.n	8026626 <_free_r+0x4e>
 8026630:	6811      	ldr	r1, [r2, #0]
 8026632:	1855      	adds	r5, r2, r1
 8026634:	42a5      	cmp	r5, r4
 8026636:	d10b      	bne.n	8026650 <_free_r+0x78>
 8026638:	6824      	ldr	r4, [r4, #0]
 802663a:	4421      	add	r1, r4
 802663c:	1854      	adds	r4, r2, r1
 802663e:	42a3      	cmp	r3, r4
 8026640:	6011      	str	r1, [r2, #0]
 8026642:	d1dd      	bne.n	8026600 <_free_r+0x28>
 8026644:	681c      	ldr	r4, [r3, #0]
 8026646:	685b      	ldr	r3, [r3, #4]
 8026648:	6053      	str	r3, [r2, #4]
 802664a:	4421      	add	r1, r4
 802664c:	6011      	str	r1, [r2, #0]
 802664e:	e7d7      	b.n	8026600 <_free_r+0x28>
 8026650:	d902      	bls.n	8026658 <_free_r+0x80>
 8026652:	230c      	movs	r3, #12
 8026654:	6003      	str	r3, [r0, #0]
 8026656:	e7d3      	b.n	8026600 <_free_r+0x28>
 8026658:	6825      	ldr	r5, [r4, #0]
 802665a:	1961      	adds	r1, r4, r5
 802665c:	428b      	cmp	r3, r1
 802665e:	bf04      	itt	eq
 8026660:	6819      	ldreq	r1, [r3, #0]
 8026662:	685b      	ldreq	r3, [r3, #4]
 8026664:	6063      	str	r3, [r4, #4]
 8026666:	bf04      	itt	eq
 8026668:	1949      	addeq	r1, r1, r5
 802666a:	6021      	streq	r1, [r4, #0]
 802666c:	6054      	str	r4, [r2, #4]
 802666e:	e7c7      	b.n	8026600 <_free_r+0x28>
 8026670:	b003      	add	sp, #12
 8026672:	bd30      	pop	{r4, r5, pc}
 8026674:	2005684c 	.word	0x2005684c

08026678 <_malloc_r>:
 8026678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802667a:	1ccd      	adds	r5, r1, #3
 802667c:	f025 0503 	bic.w	r5, r5, #3
 8026680:	3508      	adds	r5, #8
 8026682:	2d0c      	cmp	r5, #12
 8026684:	bf38      	it	cc
 8026686:	250c      	movcc	r5, #12
 8026688:	2d00      	cmp	r5, #0
 802668a:	4606      	mov	r6, r0
 802668c:	db01      	blt.n	8026692 <_malloc_r+0x1a>
 802668e:	42a9      	cmp	r1, r5
 8026690:	d903      	bls.n	802669a <_malloc_r+0x22>
 8026692:	230c      	movs	r3, #12
 8026694:	6033      	str	r3, [r6, #0]
 8026696:	2000      	movs	r0, #0
 8026698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802669a:	f003 fbcd 	bl	8029e38 <__malloc_lock>
 802669e:	4921      	ldr	r1, [pc, #132]	; (8026724 <_malloc_r+0xac>)
 80266a0:	680a      	ldr	r2, [r1, #0]
 80266a2:	4614      	mov	r4, r2
 80266a4:	b99c      	cbnz	r4, 80266ce <_malloc_r+0x56>
 80266a6:	4f20      	ldr	r7, [pc, #128]	; (8026728 <_malloc_r+0xb0>)
 80266a8:	683b      	ldr	r3, [r7, #0]
 80266aa:	b923      	cbnz	r3, 80266b6 <_malloc_r+0x3e>
 80266ac:	4621      	mov	r1, r4
 80266ae:	4630      	mov	r0, r6
 80266b0:	f000 ffdc 	bl	802766c <_sbrk_r>
 80266b4:	6038      	str	r0, [r7, #0]
 80266b6:	4629      	mov	r1, r5
 80266b8:	4630      	mov	r0, r6
 80266ba:	f000 ffd7 	bl	802766c <_sbrk_r>
 80266be:	1c43      	adds	r3, r0, #1
 80266c0:	d123      	bne.n	802670a <_malloc_r+0x92>
 80266c2:	230c      	movs	r3, #12
 80266c4:	6033      	str	r3, [r6, #0]
 80266c6:	4630      	mov	r0, r6
 80266c8:	f003 fbbc 	bl	8029e44 <__malloc_unlock>
 80266cc:	e7e3      	b.n	8026696 <_malloc_r+0x1e>
 80266ce:	6823      	ldr	r3, [r4, #0]
 80266d0:	1b5b      	subs	r3, r3, r5
 80266d2:	d417      	bmi.n	8026704 <_malloc_r+0x8c>
 80266d4:	2b0b      	cmp	r3, #11
 80266d6:	d903      	bls.n	80266e0 <_malloc_r+0x68>
 80266d8:	6023      	str	r3, [r4, #0]
 80266da:	441c      	add	r4, r3
 80266dc:	6025      	str	r5, [r4, #0]
 80266de:	e004      	b.n	80266ea <_malloc_r+0x72>
 80266e0:	6863      	ldr	r3, [r4, #4]
 80266e2:	42a2      	cmp	r2, r4
 80266e4:	bf0c      	ite	eq
 80266e6:	600b      	streq	r3, [r1, #0]
 80266e8:	6053      	strne	r3, [r2, #4]
 80266ea:	4630      	mov	r0, r6
 80266ec:	f003 fbaa 	bl	8029e44 <__malloc_unlock>
 80266f0:	f104 000b 	add.w	r0, r4, #11
 80266f4:	1d23      	adds	r3, r4, #4
 80266f6:	f020 0007 	bic.w	r0, r0, #7
 80266fa:	1ac2      	subs	r2, r0, r3
 80266fc:	d0cc      	beq.n	8026698 <_malloc_r+0x20>
 80266fe:	1a1b      	subs	r3, r3, r0
 8026700:	50a3      	str	r3, [r4, r2]
 8026702:	e7c9      	b.n	8026698 <_malloc_r+0x20>
 8026704:	4622      	mov	r2, r4
 8026706:	6864      	ldr	r4, [r4, #4]
 8026708:	e7cc      	b.n	80266a4 <_malloc_r+0x2c>
 802670a:	1cc4      	adds	r4, r0, #3
 802670c:	f024 0403 	bic.w	r4, r4, #3
 8026710:	42a0      	cmp	r0, r4
 8026712:	d0e3      	beq.n	80266dc <_malloc_r+0x64>
 8026714:	1a21      	subs	r1, r4, r0
 8026716:	4630      	mov	r0, r6
 8026718:	f000 ffa8 	bl	802766c <_sbrk_r>
 802671c:	3001      	adds	r0, #1
 802671e:	d1dd      	bne.n	80266dc <_malloc_r+0x64>
 8026720:	e7cf      	b.n	80266c2 <_malloc_r+0x4a>
 8026722:	bf00      	nop
 8026724:	2005684c 	.word	0x2005684c
 8026728:	20056850 	.word	0x20056850

0802672c <__sfputc_r>:
 802672c:	6893      	ldr	r3, [r2, #8]
 802672e:	3b01      	subs	r3, #1
 8026730:	2b00      	cmp	r3, #0
 8026732:	b410      	push	{r4}
 8026734:	6093      	str	r3, [r2, #8]
 8026736:	da08      	bge.n	802674a <__sfputc_r+0x1e>
 8026738:	6994      	ldr	r4, [r2, #24]
 802673a:	42a3      	cmp	r3, r4
 802673c:	db01      	blt.n	8026742 <__sfputc_r+0x16>
 802673e:	290a      	cmp	r1, #10
 8026740:	d103      	bne.n	802674a <__sfputc_r+0x1e>
 8026742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026746:	f001 be89 	b.w	802845c <__swbuf_r>
 802674a:	6813      	ldr	r3, [r2, #0]
 802674c:	1c58      	adds	r0, r3, #1
 802674e:	6010      	str	r0, [r2, #0]
 8026750:	7019      	strb	r1, [r3, #0]
 8026752:	4608      	mov	r0, r1
 8026754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026758:	4770      	bx	lr

0802675a <__sfputs_r>:
 802675a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802675c:	4606      	mov	r6, r0
 802675e:	460f      	mov	r7, r1
 8026760:	4614      	mov	r4, r2
 8026762:	18d5      	adds	r5, r2, r3
 8026764:	42ac      	cmp	r4, r5
 8026766:	d101      	bne.n	802676c <__sfputs_r+0x12>
 8026768:	2000      	movs	r0, #0
 802676a:	e007      	b.n	802677c <__sfputs_r+0x22>
 802676c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026770:	463a      	mov	r2, r7
 8026772:	4630      	mov	r0, r6
 8026774:	f7ff ffda 	bl	802672c <__sfputc_r>
 8026778:	1c43      	adds	r3, r0, #1
 802677a:	d1f3      	bne.n	8026764 <__sfputs_r+0xa>
 802677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026780 <_vfiprintf_r>:
 8026780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026784:	460d      	mov	r5, r1
 8026786:	b09d      	sub	sp, #116	; 0x74
 8026788:	4614      	mov	r4, r2
 802678a:	4698      	mov	r8, r3
 802678c:	4606      	mov	r6, r0
 802678e:	b118      	cbz	r0, 8026798 <_vfiprintf_r+0x18>
 8026790:	6983      	ldr	r3, [r0, #24]
 8026792:	b90b      	cbnz	r3, 8026798 <_vfiprintf_r+0x18>
 8026794:	f002 feac 	bl	80294f0 <__sinit>
 8026798:	4b89      	ldr	r3, [pc, #548]	; (80269c0 <_vfiprintf_r+0x240>)
 802679a:	429d      	cmp	r5, r3
 802679c:	d11b      	bne.n	80267d6 <_vfiprintf_r+0x56>
 802679e:	6875      	ldr	r5, [r6, #4]
 80267a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80267a2:	07d9      	lsls	r1, r3, #31
 80267a4:	d405      	bmi.n	80267b2 <_vfiprintf_r+0x32>
 80267a6:	89ab      	ldrh	r3, [r5, #12]
 80267a8:	059a      	lsls	r2, r3, #22
 80267aa:	d402      	bmi.n	80267b2 <_vfiprintf_r+0x32>
 80267ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80267ae:	f003 fab0 	bl	8029d12 <__retarget_lock_acquire_recursive>
 80267b2:	89ab      	ldrh	r3, [r5, #12]
 80267b4:	071b      	lsls	r3, r3, #28
 80267b6:	d501      	bpl.n	80267bc <_vfiprintf_r+0x3c>
 80267b8:	692b      	ldr	r3, [r5, #16]
 80267ba:	b9eb      	cbnz	r3, 80267f8 <_vfiprintf_r+0x78>
 80267bc:	4629      	mov	r1, r5
 80267be:	4630      	mov	r0, r6
 80267c0:	f001 fe9e 	bl	8028500 <__swsetup_r>
 80267c4:	b1c0      	cbz	r0, 80267f8 <_vfiprintf_r+0x78>
 80267c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80267c8:	07dc      	lsls	r4, r3, #31
 80267ca:	d50e      	bpl.n	80267ea <_vfiprintf_r+0x6a>
 80267cc:	f04f 30ff 	mov.w	r0, #4294967295
 80267d0:	b01d      	add	sp, #116	; 0x74
 80267d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267d6:	4b7b      	ldr	r3, [pc, #492]	; (80269c4 <_vfiprintf_r+0x244>)
 80267d8:	429d      	cmp	r5, r3
 80267da:	d101      	bne.n	80267e0 <_vfiprintf_r+0x60>
 80267dc:	68b5      	ldr	r5, [r6, #8]
 80267de:	e7df      	b.n	80267a0 <_vfiprintf_r+0x20>
 80267e0:	4b79      	ldr	r3, [pc, #484]	; (80269c8 <_vfiprintf_r+0x248>)
 80267e2:	429d      	cmp	r5, r3
 80267e4:	bf08      	it	eq
 80267e6:	68f5      	ldreq	r5, [r6, #12]
 80267e8:	e7da      	b.n	80267a0 <_vfiprintf_r+0x20>
 80267ea:	89ab      	ldrh	r3, [r5, #12]
 80267ec:	0598      	lsls	r0, r3, #22
 80267ee:	d4ed      	bmi.n	80267cc <_vfiprintf_r+0x4c>
 80267f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80267f2:	f003 fa90 	bl	8029d16 <__retarget_lock_release_recursive>
 80267f6:	e7e9      	b.n	80267cc <_vfiprintf_r+0x4c>
 80267f8:	2300      	movs	r3, #0
 80267fa:	9309      	str	r3, [sp, #36]	; 0x24
 80267fc:	2320      	movs	r3, #32
 80267fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026802:	f8cd 800c 	str.w	r8, [sp, #12]
 8026806:	2330      	movs	r3, #48	; 0x30
 8026808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80269cc <_vfiprintf_r+0x24c>
 802680c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026810:	f04f 0901 	mov.w	r9, #1
 8026814:	4623      	mov	r3, r4
 8026816:	469a      	mov	sl, r3
 8026818:	f813 2b01 	ldrb.w	r2, [r3], #1
 802681c:	b10a      	cbz	r2, 8026822 <_vfiprintf_r+0xa2>
 802681e:	2a25      	cmp	r2, #37	; 0x25
 8026820:	d1f9      	bne.n	8026816 <_vfiprintf_r+0x96>
 8026822:	ebba 0b04 	subs.w	fp, sl, r4
 8026826:	d00b      	beq.n	8026840 <_vfiprintf_r+0xc0>
 8026828:	465b      	mov	r3, fp
 802682a:	4622      	mov	r2, r4
 802682c:	4629      	mov	r1, r5
 802682e:	4630      	mov	r0, r6
 8026830:	f7ff ff93 	bl	802675a <__sfputs_r>
 8026834:	3001      	adds	r0, #1
 8026836:	f000 80aa 	beq.w	802698e <_vfiprintf_r+0x20e>
 802683a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802683c:	445a      	add	r2, fp
 802683e:	9209      	str	r2, [sp, #36]	; 0x24
 8026840:	f89a 3000 	ldrb.w	r3, [sl]
 8026844:	2b00      	cmp	r3, #0
 8026846:	f000 80a2 	beq.w	802698e <_vfiprintf_r+0x20e>
 802684a:	2300      	movs	r3, #0
 802684c:	f04f 32ff 	mov.w	r2, #4294967295
 8026850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026854:	f10a 0a01 	add.w	sl, sl, #1
 8026858:	9304      	str	r3, [sp, #16]
 802685a:	9307      	str	r3, [sp, #28]
 802685c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026860:	931a      	str	r3, [sp, #104]	; 0x68
 8026862:	4654      	mov	r4, sl
 8026864:	2205      	movs	r2, #5
 8026866:	f814 1b01 	ldrb.w	r1, [r4], #1
 802686a:	4858      	ldr	r0, [pc, #352]	; (80269cc <_vfiprintf_r+0x24c>)
 802686c:	f7d9 fcf0 	bl	8000250 <memchr>
 8026870:	9a04      	ldr	r2, [sp, #16]
 8026872:	b9d8      	cbnz	r0, 80268ac <_vfiprintf_r+0x12c>
 8026874:	06d1      	lsls	r1, r2, #27
 8026876:	bf44      	itt	mi
 8026878:	2320      	movmi	r3, #32
 802687a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802687e:	0713      	lsls	r3, r2, #28
 8026880:	bf44      	itt	mi
 8026882:	232b      	movmi	r3, #43	; 0x2b
 8026884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026888:	f89a 3000 	ldrb.w	r3, [sl]
 802688c:	2b2a      	cmp	r3, #42	; 0x2a
 802688e:	d015      	beq.n	80268bc <_vfiprintf_r+0x13c>
 8026890:	9a07      	ldr	r2, [sp, #28]
 8026892:	4654      	mov	r4, sl
 8026894:	2000      	movs	r0, #0
 8026896:	f04f 0c0a 	mov.w	ip, #10
 802689a:	4621      	mov	r1, r4
 802689c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80268a0:	3b30      	subs	r3, #48	; 0x30
 80268a2:	2b09      	cmp	r3, #9
 80268a4:	d94e      	bls.n	8026944 <_vfiprintf_r+0x1c4>
 80268a6:	b1b0      	cbz	r0, 80268d6 <_vfiprintf_r+0x156>
 80268a8:	9207      	str	r2, [sp, #28]
 80268aa:	e014      	b.n	80268d6 <_vfiprintf_r+0x156>
 80268ac:	eba0 0308 	sub.w	r3, r0, r8
 80268b0:	fa09 f303 	lsl.w	r3, r9, r3
 80268b4:	4313      	orrs	r3, r2
 80268b6:	9304      	str	r3, [sp, #16]
 80268b8:	46a2      	mov	sl, r4
 80268ba:	e7d2      	b.n	8026862 <_vfiprintf_r+0xe2>
 80268bc:	9b03      	ldr	r3, [sp, #12]
 80268be:	1d19      	adds	r1, r3, #4
 80268c0:	681b      	ldr	r3, [r3, #0]
 80268c2:	9103      	str	r1, [sp, #12]
 80268c4:	2b00      	cmp	r3, #0
 80268c6:	bfbb      	ittet	lt
 80268c8:	425b      	neglt	r3, r3
 80268ca:	f042 0202 	orrlt.w	r2, r2, #2
 80268ce:	9307      	strge	r3, [sp, #28]
 80268d0:	9307      	strlt	r3, [sp, #28]
 80268d2:	bfb8      	it	lt
 80268d4:	9204      	strlt	r2, [sp, #16]
 80268d6:	7823      	ldrb	r3, [r4, #0]
 80268d8:	2b2e      	cmp	r3, #46	; 0x2e
 80268da:	d10c      	bne.n	80268f6 <_vfiprintf_r+0x176>
 80268dc:	7863      	ldrb	r3, [r4, #1]
 80268de:	2b2a      	cmp	r3, #42	; 0x2a
 80268e0:	d135      	bne.n	802694e <_vfiprintf_r+0x1ce>
 80268e2:	9b03      	ldr	r3, [sp, #12]
 80268e4:	1d1a      	adds	r2, r3, #4
 80268e6:	681b      	ldr	r3, [r3, #0]
 80268e8:	9203      	str	r2, [sp, #12]
 80268ea:	2b00      	cmp	r3, #0
 80268ec:	bfb8      	it	lt
 80268ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80268f2:	3402      	adds	r4, #2
 80268f4:	9305      	str	r3, [sp, #20]
 80268f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80269dc <_vfiprintf_r+0x25c>
 80268fa:	7821      	ldrb	r1, [r4, #0]
 80268fc:	2203      	movs	r2, #3
 80268fe:	4650      	mov	r0, sl
 8026900:	f7d9 fca6 	bl	8000250 <memchr>
 8026904:	b140      	cbz	r0, 8026918 <_vfiprintf_r+0x198>
 8026906:	2340      	movs	r3, #64	; 0x40
 8026908:	eba0 000a 	sub.w	r0, r0, sl
 802690c:	fa03 f000 	lsl.w	r0, r3, r0
 8026910:	9b04      	ldr	r3, [sp, #16]
 8026912:	4303      	orrs	r3, r0
 8026914:	3401      	adds	r4, #1
 8026916:	9304      	str	r3, [sp, #16]
 8026918:	f814 1b01 	ldrb.w	r1, [r4], #1
 802691c:	482c      	ldr	r0, [pc, #176]	; (80269d0 <_vfiprintf_r+0x250>)
 802691e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026922:	2206      	movs	r2, #6
 8026924:	f7d9 fc94 	bl	8000250 <memchr>
 8026928:	2800      	cmp	r0, #0
 802692a:	d03f      	beq.n	80269ac <_vfiprintf_r+0x22c>
 802692c:	4b29      	ldr	r3, [pc, #164]	; (80269d4 <_vfiprintf_r+0x254>)
 802692e:	bb1b      	cbnz	r3, 8026978 <_vfiprintf_r+0x1f8>
 8026930:	9b03      	ldr	r3, [sp, #12]
 8026932:	3307      	adds	r3, #7
 8026934:	f023 0307 	bic.w	r3, r3, #7
 8026938:	3308      	adds	r3, #8
 802693a:	9303      	str	r3, [sp, #12]
 802693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802693e:	443b      	add	r3, r7
 8026940:	9309      	str	r3, [sp, #36]	; 0x24
 8026942:	e767      	b.n	8026814 <_vfiprintf_r+0x94>
 8026944:	fb0c 3202 	mla	r2, ip, r2, r3
 8026948:	460c      	mov	r4, r1
 802694a:	2001      	movs	r0, #1
 802694c:	e7a5      	b.n	802689a <_vfiprintf_r+0x11a>
 802694e:	2300      	movs	r3, #0
 8026950:	3401      	adds	r4, #1
 8026952:	9305      	str	r3, [sp, #20]
 8026954:	4619      	mov	r1, r3
 8026956:	f04f 0c0a 	mov.w	ip, #10
 802695a:	4620      	mov	r0, r4
 802695c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026960:	3a30      	subs	r2, #48	; 0x30
 8026962:	2a09      	cmp	r2, #9
 8026964:	d903      	bls.n	802696e <_vfiprintf_r+0x1ee>
 8026966:	2b00      	cmp	r3, #0
 8026968:	d0c5      	beq.n	80268f6 <_vfiprintf_r+0x176>
 802696a:	9105      	str	r1, [sp, #20]
 802696c:	e7c3      	b.n	80268f6 <_vfiprintf_r+0x176>
 802696e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026972:	4604      	mov	r4, r0
 8026974:	2301      	movs	r3, #1
 8026976:	e7f0      	b.n	802695a <_vfiprintf_r+0x1da>
 8026978:	ab03      	add	r3, sp, #12
 802697a:	9300      	str	r3, [sp, #0]
 802697c:	462a      	mov	r2, r5
 802697e:	4b16      	ldr	r3, [pc, #88]	; (80269d8 <_vfiprintf_r+0x258>)
 8026980:	a904      	add	r1, sp, #16
 8026982:	4630      	mov	r0, r6
 8026984:	f000 f8bc 	bl	8026b00 <_printf_float>
 8026988:	4607      	mov	r7, r0
 802698a:	1c78      	adds	r0, r7, #1
 802698c:	d1d6      	bne.n	802693c <_vfiprintf_r+0x1bc>
 802698e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026990:	07d9      	lsls	r1, r3, #31
 8026992:	d405      	bmi.n	80269a0 <_vfiprintf_r+0x220>
 8026994:	89ab      	ldrh	r3, [r5, #12]
 8026996:	059a      	lsls	r2, r3, #22
 8026998:	d402      	bmi.n	80269a0 <_vfiprintf_r+0x220>
 802699a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802699c:	f003 f9bb 	bl	8029d16 <__retarget_lock_release_recursive>
 80269a0:	89ab      	ldrh	r3, [r5, #12]
 80269a2:	065b      	lsls	r3, r3, #25
 80269a4:	f53f af12 	bmi.w	80267cc <_vfiprintf_r+0x4c>
 80269a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80269aa:	e711      	b.n	80267d0 <_vfiprintf_r+0x50>
 80269ac:	ab03      	add	r3, sp, #12
 80269ae:	9300      	str	r3, [sp, #0]
 80269b0:	462a      	mov	r2, r5
 80269b2:	4b09      	ldr	r3, [pc, #36]	; (80269d8 <_vfiprintf_r+0x258>)
 80269b4:	a904      	add	r1, sp, #16
 80269b6:	4630      	mov	r0, r6
 80269b8:	f000 fb2e 	bl	8027018 <_printf_i>
 80269bc:	e7e4      	b.n	8026988 <_vfiprintf_r+0x208>
 80269be:	bf00      	nop
 80269c0:	0802f170 	.word	0x0802f170
 80269c4:	0802f190 	.word	0x0802f190
 80269c8:	0802f150 	.word	0x0802f150
 80269cc:	0802ef1c 	.word	0x0802ef1c
 80269d0:	0802ef26 	.word	0x0802ef26
 80269d4:	08026b01 	.word	0x08026b01
 80269d8:	0802675b 	.word	0x0802675b
 80269dc:	0802ef22 	.word	0x0802ef22

080269e0 <__cvt>:
 80269e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269e2:	ed2d 8b02 	vpush	{d8}
 80269e6:	eeb0 8b40 	vmov.f64	d8, d0
 80269ea:	b085      	sub	sp, #20
 80269ec:	4617      	mov	r7, r2
 80269ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80269f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80269f2:	ee18 2a90 	vmov	r2, s17
 80269f6:	f025 0520 	bic.w	r5, r5, #32
 80269fa:	2a00      	cmp	r2, #0
 80269fc:	bfb6      	itet	lt
 80269fe:	222d      	movlt	r2, #45	; 0x2d
 8026a00:	2200      	movge	r2, #0
 8026a02:	eeb1 8b40 	vneglt.f64	d8, d0
 8026a06:	2d46      	cmp	r5, #70	; 0x46
 8026a08:	460c      	mov	r4, r1
 8026a0a:	701a      	strb	r2, [r3, #0]
 8026a0c:	d004      	beq.n	8026a18 <__cvt+0x38>
 8026a0e:	2d45      	cmp	r5, #69	; 0x45
 8026a10:	d100      	bne.n	8026a14 <__cvt+0x34>
 8026a12:	3401      	adds	r4, #1
 8026a14:	2102      	movs	r1, #2
 8026a16:	e000      	b.n	8026a1a <__cvt+0x3a>
 8026a18:	2103      	movs	r1, #3
 8026a1a:	ab03      	add	r3, sp, #12
 8026a1c:	9301      	str	r3, [sp, #4]
 8026a1e:	ab02      	add	r3, sp, #8
 8026a20:	9300      	str	r3, [sp, #0]
 8026a22:	4622      	mov	r2, r4
 8026a24:	4633      	mov	r3, r6
 8026a26:	eeb0 0b48 	vmov.f64	d0, d8
 8026a2a:	f001 fec5 	bl	80287b8 <_dtoa_r>
 8026a2e:	2d47      	cmp	r5, #71	; 0x47
 8026a30:	d109      	bne.n	8026a46 <__cvt+0x66>
 8026a32:	07fb      	lsls	r3, r7, #31
 8026a34:	d407      	bmi.n	8026a46 <__cvt+0x66>
 8026a36:	9b03      	ldr	r3, [sp, #12]
 8026a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026a3a:	1a1b      	subs	r3, r3, r0
 8026a3c:	6013      	str	r3, [r2, #0]
 8026a3e:	b005      	add	sp, #20
 8026a40:	ecbd 8b02 	vpop	{d8}
 8026a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a46:	2d46      	cmp	r5, #70	; 0x46
 8026a48:	eb00 0204 	add.w	r2, r0, r4
 8026a4c:	d10c      	bne.n	8026a68 <__cvt+0x88>
 8026a4e:	7803      	ldrb	r3, [r0, #0]
 8026a50:	2b30      	cmp	r3, #48	; 0x30
 8026a52:	d107      	bne.n	8026a64 <__cvt+0x84>
 8026a54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a5c:	bf1c      	itt	ne
 8026a5e:	f1c4 0401 	rsbne	r4, r4, #1
 8026a62:	6034      	strne	r4, [r6, #0]
 8026a64:	6833      	ldr	r3, [r6, #0]
 8026a66:	441a      	add	r2, r3
 8026a68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a70:	bf08      	it	eq
 8026a72:	9203      	streq	r2, [sp, #12]
 8026a74:	2130      	movs	r1, #48	; 0x30
 8026a76:	9b03      	ldr	r3, [sp, #12]
 8026a78:	4293      	cmp	r3, r2
 8026a7a:	d2dc      	bcs.n	8026a36 <__cvt+0x56>
 8026a7c:	1c5c      	adds	r4, r3, #1
 8026a7e:	9403      	str	r4, [sp, #12]
 8026a80:	7019      	strb	r1, [r3, #0]
 8026a82:	e7f8      	b.n	8026a76 <__cvt+0x96>

08026a84 <__exponent>:
 8026a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026a86:	4603      	mov	r3, r0
 8026a88:	2900      	cmp	r1, #0
 8026a8a:	bfb8      	it	lt
 8026a8c:	4249      	neglt	r1, r1
 8026a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8026a92:	bfb4      	ite	lt
 8026a94:	222d      	movlt	r2, #45	; 0x2d
 8026a96:	222b      	movge	r2, #43	; 0x2b
 8026a98:	2909      	cmp	r1, #9
 8026a9a:	7042      	strb	r2, [r0, #1]
 8026a9c:	dd2a      	ble.n	8026af4 <__exponent+0x70>
 8026a9e:	f10d 0407 	add.w	r4, sp, #7
 8026aa2:	46a4      	mov	ip, r4
 8026aa4:	270a      	movs	r7, #10
 8026aa6:	46a6      	mov	lr, r4
 8026aa8:	460a      	mov	r2, r1
 8026aaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8026aae:	fb07 1516 	mls	r5, r7, r6, r1
 8026ab2:	3530      	adds	r5, #48	; 0x30
 8026ab4:	2a63      	cmp	r2, #99	; 0x63
 8026ab6:	f104 34ff 	add.w	r4, r4, #4294967295
 8026aba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8026abe:	4631      	mov	r1, r6
 8026ac0:	dcf1      	bgt.n	8026aa6 <__exponent+0x22>
 8026ac2:	3130      	adds	r1, #48	; 0x30
 8026ac4:	f1ae 0502 	sub.w	r5, lr, #2
 8026ac8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8026acc:	1c44      	adds	r4, r0, #1
 8026ace:	4629      	mov	r1, r5
 8026ad0:	4561      	cmp	r1, ip
 8026ad2:	d30a      	bcc.n	8026aea <__exponent+0x66>
 8026ad4:	f10d 0209 	add.w	r2, sp, #9
 8026ad8:	eba2 020e 	sub.w	r2, r2, lr
 8026adc:	4565      	cmp	r5, ip
 8026ade:	bf88      	it	hi
 8026ae0:	2200      	movhi	r2, #0
 8026ae2:	4413      	add	r3, r2
 8026ae4:	1a18      	subs	r0, r3, r0
 8026ae6:	b003      	add	sp, #12
 8026ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026aee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8026af2:	e7ed      	b.n	8026ad0 <__exponent+0x4c>
 8026af4:	2330      	movs	r3, #48	; 0x30
 8026af6:	3130      	adds	r1, #48	; 0x30
 8026af8:	7083      	strb	r3, [r0, #2]
 8026afa:	70c1      	strb	r1, [r0, #3]
 8026afc:	1d03      	adds	r3, r0, #4
 8026afe:	e7f1      	b.n	8026ae4 <__exponent+0x60>

08026b00 <_printf_float>:
 8026b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b04:	b08b      	sub	sp, #44	; 0x2c
 8026b06:	460c      	mov	r4, r1
 8026b08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8026b0c:	4616      	mov	r6, r2
 8026b0e:	461f      	mov	r7, r3
 8026b10:	4605      	mov	r5, r0
 8026b12:	f003 f8f9 	bl	8029d08 <_localeconv_r>
 8026b16:	f8d0 b000 	ldr.w	fp, [r0]
 8026b1a:	4658      	mov	r0, fp
 8026b1c:	f7d9 fb90 	bl	8000240 <strlen>
 8026b20:	2300      	movs	r3, #0
 8026b22:	9308      	str	r3, [sp, #32]
 8026b24:	f8d8 3000 	ldr.w	r3, [r8]
 8026b28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8026b2c:	6822      	ldr	r2, [r4, #0]
 8026b2e:	3307      	adds	r3, #7
 8026b30:	f023 0307 	bic.w	r3, r3, #7
 8026b34:	f103 0108 	add.w	r1, r3, #8
 8026b38:	f8c8 1000 	str.w	r1, [r8]
 8026b3c:	4682      	mov	sl, r0
 8026b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026b42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8026b46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8026da8 <_printf_float+0x2a8>
 8026b4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8026b4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8026b52:	eeb4 6b47 	vcmp.f64	d6, d7
 8026b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b5a:	dd24      	ble.n	8026ba6 <_printf_float+0xa6>
 8026b5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b64:	d502      	bpl.n	8026b6c <_printf_float+0x6c>
 8026b66:	232d      	movs	r3, #45	; 0x2d
 8026b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026b6c:	4b90      	ldr	r3, [pc, #576]	; (8026db0 <_printf_float+0x2b0>)
 8026b6e:	4891      	ldr	r0, [pc, #580]	; (8026db4 <_printf_float+0x2b4>)
 8026b70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8026b74:	bf94      	ite	ls
 8026b76:	4698      	movls	r8, r3
 8026b78:	4680      	movhi	r8, r0
 8026b7a:	2303      	movs	r3, #3
 8026b7c:	6123      	str	r3, [r4, #16]
 8026b7e:	f022 0204 	bic.w	r2, r2, #4
 8026b82:	2300      	movs	r3, #0
 8026b84:	6022      	str	r2, [r4, #0]
 8026b86:	9304      	str	r3, [sp, #16]
 8026b88:	9700      	str	r7, [sp, #0]
 8026b8a:	4633      	mov	r3, r6
 8026b8c:	aa09      	add	r2, sp, #36	; 0x24
 8026b8e:	4621      	mov	r1, r4
 8026b90:	4628      	mov	r0, r5
 8026b92:	f000 f9d3 	bl	8026f3c <_printf_common>
 8026b96:	3001      	adds	r0, #1
 8026b98:	f040 808a 	bne.w	8026cb0 <_printf_float+0x1b0>
 8026b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8026ba0:	b00b      	add	sp, #44	; 0x2c
 8026ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ba6:	eeb4 0b40 	vcmp.f64	d0, d0
 8026baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bae:	d709      	bvc.n	8026bc4 <_printf_float+0xc4>
 8026bb0:	ee10 3a90 	vmov	r3, s1
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	bfbc      	itt	lt
 8026bb8:	232d      	movlt	r3, #45	; 0x2d
 8026bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8026bbe:	487e      	ldr	r0, [pc, #504]	; (8026db8 <_printf_float+0x2b8>)
 8026bc0:	4b7e      	ldr	r3, [pc, #504]	; (8026dbc <_printf_float+0x2bc>)
 8026bc2:	e7d5      	b.n	8026b70 <_printf_float+0x70>
 8026bc4:	6863      	ldr	r3, [r4, #4]
 8026bc6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8026bca:	9104      	str	r1, [sp, #16]
 8026bcc:	1c59      	adds	r1, r3, #1
 8026bce:	d13c      	bne.n	8026c4a <_printf_float+0x14a>
 8026bd0:	2306      	movs	r3, #6
 8026bd2:	6063      	str	r3, [r4, #4]
 8026bd4:	2300      	movs	r3, #0
 8026bd6:	9303      	str	r3, [sp, #12]
 8026bd8:	ab08      	add	r3, sp, #32
 8026bda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8026bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8026be2:	ab07      	add	r3, sp, #28
 8026be4:	6861      	ldr	r1, [r4, #4]
 8026be6:	9300      	str	r3, [sp, #0]
 8026be8:	6022      	str	r2, [r4, #0]
 8026bea:	f10d 031b 	add.w	r3, sp, #27
 8026bee:	4628      	mov	r0, r5
 8026bf0:	f7ff fef6 	bl	80269e0 <__cvt>
 8026bf4:	9b04      	ldr	r3, [sp, #16]
 8026bf6:	9907      	ldr	r1, [sp, #28]
 8026bf8:	2b47      	cmp	r3, #71	; 0x47
 8026bfa:	4680      	mov	r8, r0
 8026bfc:	d108      	bne.n	8026c10 <_printf_float+0x110>
 8026bfe:	1cc8      	adds	r0, r1, #3
 8026c00:	db02      	blt.n	8026c08 <_printf_float+0x108>
 8026c02:	6863      	ldr	r3, [r4, #4]
 8026c04:	4299      	cmp	r1, r3
 8026c06:	dd41      	ble.n	8026c8c <_printf_float+0x18c>
 8026c08:	f1a9 0902 	sub.w	r9, r9, #2
 8026c0c:	fa5f f989 	uxtb.w	r9, r9
 8026c10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026c14:	d820      	bhi.n	8026c58 <_printf_float+0x158>
 8026c16:	3901      	subs	r1, #1
 8026c18:	464a      	mov	r2, r9
 8026c1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8026c1e:	9107      	str	r1, [sp, #28]
 8026c20:	f7ff ff30 	bl	8026a84 <__exponent>
 8026c24:	9a08      	ldr	r2, [sp, #32]
 8026c26:	9004      	str	r0, [sp, #16]
 8026c28:	1813      	adds	r3, r2, r0
 8026c2a:	2a01      	cmp	r2, #1
 8026c2c:	6123      	str	r3, [r4, #16]
 8026c2e:	dc02      	bgt.n	8026c36 <_printf_float+0x136>
 8026c30:	6822      	ldr	r2, [r4, #0]
 8026c32:	07d2      	lsls	r2, r2, #31
 8026c34:	d501      	bpl.n	8026c3a <_printf_float+0x13a>
 8026c36:	3301      	adds	r3, #1
 8026c38:	6123      	str	r3, [r4, #16]
 8026c3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	d0a2      	beq.n	8026b88 <_printf_float+0x88>
 8026c42:	232d      	movs	r3, #45	; 0x2d
 8026c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026c48:	e79e      	b.n	8026b88 <_printf_float+0x88>
 8026c4a:	9904      	ldr	r1, [sp, #16]
 8026c4c:	2947      	cmp	r1, #71	; 0x47
 8026c4e:	d1c1      	bne.n	8026bd4 <_printf_float+0xd4>
 8026c50:	2b00      	cmp	r3, #0
 8026c52:	d1bf      	bne.n	8026bd4 <_printf_float+0xd4>
 8026c54:	2301      	movs	r3, #1
 8026c56:	e7bc      	b.n	8026bd2 <_printf_float+0xd2>
 8026c58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8026c5c:	d118      	bne.n	8026c90 <_printf_float+0x190>
 8026c5e:	2900      	cmp	r1, #0
 8026c60:	6863      	ldr	r3, [r4, #4]
 8026c62:	dd0b      	ble.n	8026c7c <_printf_float+0x17c>
 8026c64:	6121      	str	r1, [r4, #16]
 8026c66:	b913      	cbnz	r3, 8026c6e <_printf_float+0x16e>
 8026c68:	6822      	ldr	r2, [r4, #0]
 8026c6a:	07d0      	lsls	r0, r2, #31
 8026c6c:	d502      	bpl.n	8026c74 <_printf_float+0x174>
 8026c6e:	3301      	adds	r3, #1
 8026c70:	440b      	add	r3, r1
 8026c72:	6123      	str	r3, [r4, #16]
 8026c74:	2300      	movs	r3, #0
 8026c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8026c78:	9304      	str	r3, [sp, #16]
 8026c7a:	e7de      	b.n	8026c3a <_printf_float+0x13a>
 8026c7c:	b913      	cbnz	r3, 8026c84 <_printf_float+0x184>
 8026c7e:	6822      	ldr	r2, [r4, #0]
 8026c80:	07d2      	lsls	r2, r2, #31
 8026c82:	d501      	bpl.n	8026c88 <_printf_float+0x188>
 8026c84:	3302      	adds	r3, #2
 8026c86:	e7f4      	b.n	8026c72 <_printf_float+0x172>
 8026c88:	2301      	movs	r3, #1
 8026c8a:	e7f2      	b.n	8026c72 <_printf_float+0x172>
 8026c8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026c90:	9b08      	ldr	r3, [sp, #32]
 8026c92:	4299      	cmp	r1, r3
 8026c94:	db05      	blt.n	8026ca2 <_printf_float+0x1a2>
 8026c96:	6823      	ldr	r3, [r4, #0]
 8026c98:	6121      	str	r1, [r4, #16]
 8026c9a:	07d8      	lsls	r0, r3, #31
 8026c9c:	d5ea      	bpl.n	8026c74 <_printf_float+0x174>
 8026c9e:	1c4b      	adds	r3, r1, #1
 8026ca0:	e7e7      	b.n	8026c72 <_printf_float+0x172>
 8026ca2:	2900      	cmp	r1, #0
 8026ca4:	bfd4      	ite	le
 8026ca6:	f1c1 0202 	rsble	r2, r1, #2
 8026caa:	2201      	movgt	r2, #1
 8026cac:	4413      	add	r3, r2
 8026cae:	e7e0      	b.n	8026c72 <_printf_float+0x172>
 8026cb0:	6823      	ldr	r3, [r4, #0]
 8026cb2:	055a      	lsls	r2, r3, #21
 8026cb4:	d407      	bmi.n	8026cc6 <_printf_float+0x1c6>
 8026cb6:	6923      	ldr	r3, [r4, #16]
 8026cb8:	4642      	mov	r2, r8
 8026cba:	4631      	mov	r1, r6
 8026cbc:	4628      	mov	r0, r5
 8026cbe:	47b8      	blx	r7
 8026cc0:	3001      	adds	r0, #1
 8026cc2:	d12a      	bne.n	8026d1a <_printf_float+0x21a>
 8026cc4:	e76a      	b.n	8026b9c <_printf_float+0x9c>
 8026cc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026cca:	f240 80e2 	bls.w	8026e92 <_printf_float+0x392>
 8026cce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026cd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cda:	d133      	bne.n	8026d44 <_printf_float+0x244>
 8026cdc:	4a38      	ldr	r2, [pc, #224]	; (8026dc0 <_printf_float+0x2c0>)
 8026cde:	2301      	movs	r3, #1
 8026ce0:	4631      	mov	r1, r6
 8026ce2:	4628      	mov	r0, r5
 8026ce4:	47b8      	blx	r7
 8026ce6:	3001      	adds	r0, #1
 8026ce8:	f43f af58 	beq.w	8026b9c <_printf_float+0x9c>
 8026cec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026cf0:	429a      	cmp	r2, r3
 8026cf2:	db02      	blt.n	8026cfa <_printf_float+0x1fa>
 8026cf4:	6823      	ldr	r3, [r4, #0]
 8026cf6:	07d8      	lsls	r0, r3, #31
 8026cf8:	d50f      	bpl.n	8026d1a <_printf_float+0x21a>
 8026cfa:	4653      	mov	r3, sl
 8026cfc:	465a      	mov	r2, fp
 8026cfe:	4631      	mov	r1, r6
 8026d00:	4628      	mov	r0, r5
 8026d02:	47b8      	blx	r7
 8026d04:	3001      	adds	r0, #1
 8026d06:	f43f af49 	beq.w	8026b9c <_printf_float+0x9c>
 8026d0a:	f04f 0800 	mov.w	r8, #0
 8026d0e:	f104 091a 	add.w	r9, r4, #26
 8026d12:	9b08      	ldr	r3, [sp, #32]
 8026d14:	3b01      	subs	r3, #1
 8026d16:	4543      	cmp	r3, r8
 8026d18:	dc09      	bgt.n	8026d2e <_printf_float+0x22e>
 8026d1a:	6823      	ldr	r3, [r4, #0]
 8026d1c:	079b      	lsls	r3, r3, #30
 8026d1e:	f100 8108 	bmi.w	8026f32 <_printf_float+0x432>
 8026d22:	68e0      	ldr	r0, [r4, #12]
 8026d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d26:	4298      	cmp	r0, r3
 8026d28:	bfb8      	it	lt
 8026d2a:	4618      	movlt	r0, r3
 8026d2c:	e738      	b.n	8026ba0 <_printf_float+0xa0>
 8026d2e:	2301      	movs	r3, #1
 8026d30:	464a      	mov	r2, r9
 8026d32:	4631      	mov	r1, r6
 8026d34:	4628      	mov	r0, r5
 8026d36:	47b8      	blx	r7
 8026d38:	3001      	adds	r0, #1
 8026d3a:	f43f af2f 	beq.w	8026b9c <_printf_float+0x9c>
 8026d3e:	f108 0801 	add.w	r8, r8, #1
 8026d42:	e7e6      	b.n	8026d12 <_printf_float+0x212>
 8026d44:	9b07      	ldr	r3, [sp, #28]
 8026d46:	2b00      	cmp	r3, #0
 8026d48:	dc3c      	bgt.n	8026dc4 <_printf_float+0x2c4>
 8026d4a:	4a1d      	ldr	r2, [pc, #116]	; (8026dc0 <_printf_float+0x2c0>)
 8026d4c:	2301      	movs	r3, #1
 8026d4e:	4631      	mov	r1, r6
 8026d50:	4628      	mov	r0, r5
 8026d52:	47b8      	blx	r7
 8026d54:	3001      	adds	r0, #1
 8026d56:	f43f af21 	beq.w	8026b9c <_printf_float+0x9c>
 8026d5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026d5e:	4313      	orrs	r3, r2
 8026d60:	d102      	bne.n	8026d68 <_printf_float+0x268>
 8026d62:	6823      	ldr	r3, [r4, #0]
 8026d64:	07d9      	lsls	r1, r3, #31
 8026d66:	d5d8      	bpl.n	8026d1a <_printf_float+0x21a>
 8026d68:	4653      	mov	r3, sl
 8026d6a:	465a      	mov	r2, fp
 8026d6c:	4631      	mov	r1, r6
 8026d6e:	4628      	mov	r0, r5
 8026d70:	47b8      	blx	r7
 8026d72:	3001      	adds	r0, #1
 8026d74:	f43f af12 	beq.w	8026b9c <_printf_float+0x9c>
 8026d78:	f04f 0900 	mov.w	r9, #0
 8026d7c:	f104 0a1a 	add.w	sl, r4, #26
 8026d80:	9b07      	ldr	r3, [sp, #28]
 8026d82:	425b      	negs	r3, r3
 8026d84:	454b      	cmp	r3, r9
 8026d86:	dc01      	bgt.n	8026d8c <_printf_float+0x28c>
 8026d88:	9b08      	ldr	r3, [sp, #32]
 8026d8a:	e795      	b.n	8026cb8 <_printf_float+0x1b8>
 8026d8c:	2301      	movs	r3, #1
 8026d8e:	4652      	mov	r2, sl
 8026d90:	4631      	mov	r1, r6
 8026d92:	4628      	mov	r0, r5
 8026d94:	47b8      	blx	r7
 8026d96:	3001      	adds	r0, #1
 8026d98:	f43f af00 	beq.w	8026b9c <_printf_float+0x9c>
 8026d9c:	f109 0901 	add.w	r9, r9, #1
 8026da0:	e7ee      	b.n	8026d80 <_printf_float+0x280>
 8026da2:	bf00      	nop
 8026da4:	f3af 8000 	nop.w
 8026da8:	ffffffff 	.word	0xffffffff
 8026dac:	7fefffff 	.word	0x7fefffff
 8026db0:	0802ef2d 	.word	0x0802ef2d
 8026db4:	0802ef31 	.word	0x0802ef31
 8026db8:	0802ef39 	.word	0x0802ef39
 8026dbc:	0802ef35 	.word	0x0802ef35
 8026dc0:	0802e242 	.word	0x0802e242
 8026dc4:	9a08      	ldr	r2, [sp, #32]
 8026dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026dc8:	429a      	cmp	r2, r3
 8026dca:	bfa8      	it	ge
 8026dcc:	461a      	movge	r2, r3
 8026dce:	2a00      	cmp	r2, #0
 8026dd0:	4691      	mov	r9, r2
 8026dd2:	dc38      	bgt.n	8026e46 <_printf_float+0x346>
 8026dd4:	2300      	movs	r3, #0
 8026dd6:	9305      	str	r3, [sp, #20]
 8026dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026ddc:	f104 021a 	add.w	r2, r4, #26
 8026de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026de2:	9905      	ldr	r1, [sp, #20]
 8026de4:	9304      	str	r3, [sp, #16]
 8026de6:	eba3 0309 	sub.w	r3, r3, r9
 8026dea:	428b      	cmp	r3, r1
 8026dec:	dc33      	bgt.n	8026e56 <_printf_float+0x356>
 8026dee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026df2:	429a      	cmp	r2, r3
 8026df4:	db3c      	blt.n	8026e70 <_printf_float+0x370>
 8026df6:	6823      	ldr	r3, [r4, #0]
 8026df8:	07da      	lsls	r2, r3, #31
 8026dfa:	d439      	bmi.n	8026e70 <_printf_float+0x370>
 8026dfc:	9a08      	ldr	r2, [sp, #32]
 8026dfe:	9b04      	ldr	r3, [sp, #16]
 8026e00:	9907      	ldr	r1, [sp, #28]
 8026e02:	1ad3      	subs	r3, r2, r3
 8026e04:	eba2 0901 	sub.w	r9, r2, r1
 8026e08:	4599      	cmp	r9, r3
 8026e0a:	bfa8      	it	ge
 8026e0c:	4699      	movge	r9, r3
 8026e0e:	f1b9 0f00 	cmp.w	r9, #0
 8026e12:	dc35      	bgt.n	8026e80 <_printf_float+0x380>
 8026e14:	f04f 0800 	mov.w	r8, #0
 8026e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026e1c:	f104 0a1a 	add.w	sl, r4, #26
 8026e20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026e24:	1a9b      	subs	r3, r3, r2
 8026e26:	eba3 0309 	sub.w	r3, r3, r9
 8026e2a:	4543      	cmp	r3, r8
 8026e2c:	f77f af75 	ble.w	8026d1a <_printf_float+0x21a>
 8026e30:	2301      	movs	r3, #1
 8026e32:	4652      	mov	r2, sl
 8026e34:	4631      	mov	r1, r6
 8026e36:	4628      	mov	r0, r5
 8026e38:	47b8      	blx	r7
 8026e3a:	3001      	adds	r0, #1
 8026e3c:	f43f aeae 	beq.w	8026b9c <_printf_float+0x9c>
 8026e40:	f108 0801 	add.w	r8, r8, #1
 8026e44:	e7ec      	b.n	8026e20 <_printf_float+0x320>
 8026e46:	4613      	mov	r3, r2
 8026e48:	4631      	mov	r1, r6
 8026e4a:	4642      	mov	r2, r8
 8026e4c:	4628      	mov	r0, r5
 8026e4e:	47b8      	blx	r7
 8026e50:	3001      	adds	r0, #1
 8026e52:	d1bf      	bne.n	8026dd4 <_printf_float+0x2d4>
 8026e54:	e6a2      	b.n	8026b9c <_printf_float+0x9c>
 8026e56:	2301      	movs	r3, #1
 8026e58:	4631      	mov	r1, r6
 8026e5a:	4628      	mov	r0, r5
 8026e5c:	9204      	str	r2, [sp, #16]
 8026e5e:	47b8      	blx	r7
 8026e60:	3001      	adds	r0, #1
 8026e62:	f43f ae9b 	beq.w	8026b9c <_printf_float+0x9c>
 8026e66:	9b05      	ldr	r3, [sp, #20]
 8026e68:	9a04      	ldr	r2, [sp, #16]
 8026e6a:	3301      	adds	r3, #1
 8026e6c:	9305      	str	r3, [sp, #20]
 8026e6e:	e7b7      	b.n	8026de0 <_printf_float+0x2e0>
 8026e70:	4653      	mov	r3, sl
 8026e72:	465a      	mov	r2, fp
 8026e74:	4631      	mov	r1, r6
 8026e76:	4628      	mov	r0, r5
 8026e78:	47b8      	blx	r7
 8026e7a:	3001      	adds	r0, #1
 8026e7c:	d1be      	bne.n	8026dfc <_printf_float+0x2fc>
 8026e7e:	e68d      	b.n	8026b9c <_printf_float+0x9c>
 8026e80:	9a04      	ldr	r2, [sp, #16]
 8026e82:	464b      	mov	r3, r9
 8026e84:	4442      	add	r2, r8
 8026e86:	4631      	mov	r1, r6
 8026e88:	4628      	mov	r0, r5
 8026e8a:	47b8      	blx	r7
 8026e8c:	3001      	adds	r0, #1
 8026e8e:	d1c1      	bne.n	8026e14 <_printf_float+0x314>
 8026e90:	e684      	b.n	8026b9c <_printf_float+0x9c>
 8026e92:	9a08      	ldr	r2, [sp, #32]
 8026e94:	2a01      	cmp	r2, #1
 8026e96:	dc01      	bgt.n	8026e9c <_printf_float+0x39c>
 8026e98:	07db      	lsls	r3, r3, #31
 8026e9a:	d537      	bpl.n	8026f0c <_printf_float+0x40c>
 8026e9c:	2301      	movs	r3, #1
 8026e9e:	4642      	mov	r2, r8
 8026ea0:	4631      	mov	r1, r6
 8026ea2:	4628      	mov	r0, r5
 8026ea4:	47b8      	blx	r7
 8026ea6:	3001      	adds	r0, #1
 8026ea8:	f43f ae78 	beq.w	8026b9c <_printf_float+0x9c>
 8026eac:	4653      	mov	r3, sl
 8026eae:	465a      	mov	r2, fp
 8026eb0:	4631      	mov	r1, r6
 8026eb2:	4628      	mov	r0, r5
 8026eb4:	47b8      	blx	r7
 8026eb6:	3001      	adds	r0, #1
 8026eb8:	f43f ae70 	beq.w	8026b9c <_printf_float+0x9c>
 8026ebc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026ec0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ec8:	d01b      	beq.n	8026f02 <_printf_float+0x402>
 8026eca:	9b08      	ldr	r3, [sp, #32]
 8026ecc:	f108 0201 	add.w	r2, r8, #1
 8026ed0:	3b01      	subs	r3, #1
 8026ed2:	4631      	mov	r1, r6
 8026ed4:	4628      	mov	r0, r5
 8026ed6:	47b8      	blx	r7
 8026ed8:	3001      	adds	r0, #1
 8026eda:	d10e      	bne.n	8026efa <_printf_float+0x3fa>
 8026edc:	e65e      	b.n	8026b9c <_printf_float+0x9c>
 8026ede:	2301      	movs	r3, #1
 8026ee0:	464a      	mov	r2, r9
 8026ee2:	4631      	mov	r1, r6
 8026ee4:	4628      	mov	r0, r5
 8026ee6:	47b8      	blx	r7
 8026ee8:	3001      	adds	r0, #1
 8026eea:	f43f ae57 	beq.w	8026b9c <_printf_float+0x9c>
 8026eee:	f108 0801 	add.w	r8, r8, #1
 8026ef2:	9b08      	ldr	r3, [sp, #32]
 8026ef4:	3b01      	subs	r3, #1
 8026ef6:	4543      	cmp	r3, r8
 8026ef8:	dcf1      	bgt.n	8026ede <_printf_float+0x3de>
 8026efa:	9b04      	ldr	r3, [sp, #16]
 8026efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026f00:	e6db      	b.n	8026cba <_printf_float+0x1ba>
 8026f02:	f04f 0800 	mov.w	r8, #0
 8026f06:	f104 091a 	add.w	r9, r4, #26
 8026f0a:	e7f2      	b.n	8026ef2 <_printf_float+0x3f2>
 8026f0c:	2301      	movs	r3, #1
 8026f0e:	4642      	mov	r2, r8
 8026f10:	e7df      	b.n	8026ed2 <_printf_float+0x3d2>
 8026f12:	2301      	movs	r3, #1
 8026f14:	464a      	mov	r2, r9
 8026f16:	4631      	mov	r1, r6
 8026f18:	4628      	mov	r0, r5
 8026f1a:	47b8      	blx	r7
 8026f1c:	3001      	adds	r0, #1
 8026f1e:	f43f ae3d 	beq.w	8026b9c <_printf_float+0x9c>
 8026f22:	f108 0801 	add.w	r8, r8, #1
 8026f26:	68e3      	ldr	r3, [r4, #12]
 8026f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026f2a:	1a5b      	subs	r3, r3, r1
 8026f2c:	4543      	cmp	r3, r8
 8026f2e:	dcf0      	bgt.n	8026f12 <_printf_float+0x412>
 8026f30:	e6f7      	b.n	8026d22 <_printf_float+0x222>
 8026f32:	f04f 0800 	mov.w	r8, #0
 8026f36:	f104 0919 	add.w	r9, r4, #25
 8026f3a:	e7f4      	b.n	8026f26 <_printf_float+0x426>

08026f3c <_printf_common>:
 8026f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f40:	4616      	mov	r6, r2
 8026f42:	4699      	mov	r9, r3
 8026f44:	688a      	ldr	r2, [r1, #8]
 8026f46:	690b      	ldr	r3, [r1, #16]
 8026f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026f4c:	4293      	cmp	r3, r2
 8026f4e:	bfb8      	it	lt
 8026f50:	4613      	movlt	r3, r2
 8026f52:	6033      	str	r3, [r6, #0]
 8026f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026f58:	4607      	mov	r7, r0
 8026f5a:	460c      	mov	r4, r1
 8026f5c:	b10a      	cbz	r2, 8026f62 <_printf_common+0x26>
 8026f5e:	3301      	adds	r3, #1
 8026f60:	6033      	str	r3, [r6, #0]
 8026f62:	6823      	ldr	r3, [r4, #0]
 8026f64:	0699      	lsls	r1, r3, #26
 8026f66:	bf42      	ittt	mi
 8026f68:	6833      	ldrmi	r3, [r6, #0]
 8026f6a:	3302      	addmi	r3, #2
 8026f6c:	6033      	strmi	r3, [r6, #0]
 8026f6e:	6825      	ldr	r5, [r4, #0]
 8026f70:	f015 0506 	ands.w	r5, r5, #6
 8026f74:	d106      	bne.n	8026f84 <_printf_common+0x48>
 8026f76:	f104 0a19 	add.w	sl, r4, #25
 8026f7a:	68e3      	ldr	r3, [r4, #12]
 8026f7c:	6832      	ldr	r2, [r6, #0]
 8026f7e:	1a9b      	subs	r3, r3, r2
 8026f80:	42ab      	cmp	r3, r5
 8026f82:	dc26      	bgt.n	8026fd2 <_printf_common+0x96>
 8026f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026f88:	1e13      	subs	r3, r2, #0
 8026f8a:	6822      	ldr	r2, [r4, #0]
 8026f8c:	bf18      	it	ne
 8026f8e:	2301      	movne	r3, #1
 8026f90:	0692      	lsls	r2, r2, #26
 8026f92:	d42b      	bmi.n	8026fec <_printf_common+0xb0>
 8026f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026f98:	4649      	mov	r1, r9
 8026f9a:	4638      	mov	r0, r7
 8026f9c:	47c0      	blx	r8
 8026f9e:	3001      	adds	r0, #1
 8026fa0:	d01e      	beq.n	8026fe0 <_printf_common+0xa4>
 8026fa2:	6823      	ldr	r3, [r4, #0]
 8026fa4:	68e5      	ldr	r5, [r4, #12]
 8026fa6:	6832      	ldr	r2, [r6, #0]
 8026fa8:	f003 0306 	and.w	r3, r3, #6
 8026fac:	2b04      	cmp	r3, #4
 8026fae:	bf08      	it	eq
 8026fb0:	1aad      	subeq	r5, r5, r2
 8026fb2:	68a3      	ldr	r3, [r4, #8]
 8026fb4:	6922      	ldr	r2, [r4, #16]
 8026fb6:	bf0c      	ite	eq
 8026fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026fbc:	2500      	movne	r5, #0
 8026fbe:	4293      	cmp	r3, r2
 8026fc0:	bfc4      	itt	gt
 8026fc2:	1a9b      	subgt	r3, r3, r2
 8026fc4:	18ed      	addgt	r5, r5, r3
 8026fc6:	2600      	movs	r6, #0
 8026fc8:	341a      	adds	r4, #26
 8026fca:	42b5      	cmp	r5, r6
 8026fcc:	d11a      	bne.n	8027004 <_printf_common+0xc8>
 8026fce:	2000      	movs	r0, #0
 8026fd0:	e008      	b.n	8026fe4 <_printf_common+0xa8>
 8026fd2:	2301      	movs	r3, #1
 8026fd4:	4652      	mov	r2, sl
 8026fd6:	4649      	mov	r1, r9
 8026fd8:	4638      	mov	r0, r7
 8026fda:	47c0      	blx	r8
 8026fdc:	3001      	adds	r0, #1
 8026fde:	d103      	bne.n	8026fe8 <_printf_common+0xac>
 8026fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8026fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fe8:	3501      	adds	r5, #1
 8026fea:	e7c6      	b.n	8026f7a <_printf_common+0x3e>
 8026fec:	18e1      	adds	r1, r4, r3
 8026fee:	1c5a      	adds	r2, r3, #1
 8026ff0:	2030      	movs	r0, #48	; 0x30
 8026ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026ff6:	4422      	add	r2, r4
 8026ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027000:	3302      	adds	r3, #2
 8027002:	e7c7      	b.n	8026f94 <_printf_common+0x58>
 8027004:	2301      	movs	r3, #1
 8027006:	4622      	mov	r2, r4
 8027008:	4649      	mov	r1, r9
 802700a:	4638      	mov	r0, r7
 802700c:	47c0      	blx	r8
 802700e:	3001      	adds	r0, #1
 8027010:	d0e6      	beq.n	8026fe0 <_printf_common+0xa4>
 8027012:	3601      	adds	r6, #1
 8027014:	e7d9      	b.n	8026fca <_printf_common+0x8e>
	...

08027018 <_printf_i>:
 8027018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802701c:	460c      	mov	r4, r1
 802701e:	4691      	mov	r9, r2
 8027020:	7e27      	ldrb	r7, [r4, #24]
 8027022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027024:	2f78      	cmp	r7, #120	; 0x78
 8027026:	4680      	mov	r8, r0
 8027028:	469a      	mov	sl, r3
 802702a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802702e:	d807      	bhi.n	8027040 <_printf_i+0x28>
 8027030:	2f62      	cmp	r7, #98	; 0x62
 8027032:	d80a      	bhi.n	802704a <_printf_i+0x32>
 8027034:	2f00      	cmp	r7, #0
 8027036:	f000 80d8 	beq.w	80271ea <_printf_i+0x1d2>
 802703a:	2f58      	cmp	r7, #88	; 0x58
 802703c:	f000 80a3 	beq.w	8027186 <_printf_i+0x16e>
 8027040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027048:	e03a      	b.n	80270c0 <_printf_i+0xa8>
 802704a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802704e:	2b15      	cmp	r3, #21
 8027050:	d8f6      	bhi.n	8027040 <_printf_i+0x28>
 8027052:	a001      	add	r0, pc, #4	; (adr r0, 8027058 <_printf_i+0x40>)
 8027054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027058:	080270b1 	.word	0x080270b1
 802705c:	080270c5 	.word	0x080270c5
 8027060:	08027041 	.word	0x08027041
 8027064:	08027041 	.word	0x08027041
 8027068:	08027041 	.word	0x08027041
 802706c:	08027041 	.word	0x08027041
 8027070:	080270c5 	.word	0x080270c5
 8027074:	08027041 	.word	0x08027041
 8027078:	08027041 	.word	0x08027041
 802707c:	08027041 	.word	0x08027041
 8027080:	08027041 	.word	0x08027041
 8027084:	080271d1 	.word	0x080271d1
 8027088:	080270f5 	.word	0x080270f5
 802708c:	080271b3 	.word	0x080271b3
 8027090:	08027041 	.word	0x08027041
 8027094:	08027041 	.word	0x08027041
 8027098:	080271f3 	.word	0x080271f3
 802709c:	08027041 	.word	0x08027041
 80270a0:	080270f5 	.word	0x080270f5
 80270a4:	08027041 	.word	0x08027041
 80270a8:	08027041 	.word	0x08027041
 80270ac:	080271bb 	.word	0x080271bb
 80270b0:	680b      	ldr	r3, [r1, #0]
 80270b2:	1d1a      	adds	r2, r3, #4
 80270b4:	681b      	ldr	r3, [r3, #0]
 80270b6:	600a      	str	r2, [r1, #0]
 80270b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80270bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80270c0:	2301      	movs	r3, #1
 80270c2:	e0a3      	b.n	802720c <_printf_i+0x1f4>
 80270c4:	6825      	ldr	r5, [r4, #0]
 80270c6:	6808      	ldr	r0, [r1, #0]
 80270c8:	062e      	lsls	r6, r5, #24
 80270ca:	f100 0304 	add.w	r3, r0, #4
 80270ce:	d50a      	bpl.n	80270e6 <_printf_i+0xce>
 80270d0:	6805      	ldr	r5, [r0, #0]
 80270d2:	600b      	str	r3, [r1, #0]
 80270d4:	2d00      	cmp	r5, #0
 80270d6:	da03      	bge.n	80270e0 <_printf_i+0xc8>
 80270d8:	232d      	movs	r3, #45	; 0x2d
 80270da:	426d      	negs	r5, r5
 80270dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80270e0:	485e      	ldr	r0, [pc, #376]	; (802725c <_printf_i+0x244>)
 80270e2:	230a      	movs	r3, #10
 80270e4:	e019      	b.n	802711a <_printf_i+0x102>
 80270e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80270ea:	6805      	ldr	r5, [r0, #0]
 80270ec:	600b      	str	r3, [r1, #0]
 80270ee:	bf18      	it	ne
 80270f0:	b22d      	sxthne	r5, r5
 80270f2:	e7ef      	b.n	80270d4 <_printf_i+0xbc>
 80270f4:	680b      	ldr	r3, [r1, #0]
 80270f6:	6825      	ldr	r5, [r4, #0]
 80270f8:	1d18      	adds	r0, r3, #4
 80270fa:	6008      	str	r0, [r1, #0]
 80270fc:	0628      	lsls	r0, r5, #24
 80270fe:	d501      	bpl.n	8027104 <_printf_i+0xec>
 8027100:	681d      	ldr	r5, [r3, #0]
 8027102:	e002      	b.n	802710a <_printf_i+0xf2>
 8027104:	0669      	lsls	r1, r5, #25
 8027106:	d5fb      	bpl.n	8027100 <_printf_i+0xe8>
 8027108:	881d      	ldrh	r5, [r3, #0]
 802710a:	4854      	ldr	r0, [pc, #336]	; (802725c <_printf_i+0x244>)
 802710c:	2f6f      	cmp	r7, #111	; 0x6f
 802710e:	bf0c      	ite	eq
 8027110:	2308      	moveq	r3, #8
 8027112:	230a      	movne	r3, #10
 8027114:	2100      	movs	r1, #0
 8027116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802711a:	6866      	ldr	r6, [r4, #4]
 802711c:	60a6      	str	r6, [r4, #8]
 802711e:	2e00      	cmp	r6, #0
 8027120:	bfa2      	ittt	ge
 8027122:	6821      	ldrge	r1, [r4, #0]
 8027124:	f021 0104 	bicge.w	r1, r1, #4
 8027128:	6021      	strge	r1, [r4, #0]
 802712a:	b90d      	cbnz	r5, 8027130 <_printf_i+0x118>
 802712c:	2e00      	cmp	r6, #0
 802712e:	d04d      	beq.n	80271cc <_printf_i+0x1b4>
 8027130:	4616      	mov	r6, r2
 8027132:	fbb5 f1f3 	udiv	r1, r5, r3
 8027136:	fb03 5711 	mls	r7, r3, r1, r5
 802713a:	5dc7      	ldrb	r7, [r0, r7]
 802713c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027140:	462f      	mov	r7, r5
 8027142:	42bb      	cmp	r3, r7
 8027144:	460d      	mov	r5, r1
 8027146:	d9f4      	bls.n	8027132 <_printf_i+0x11a>
 8027148:	2b08      	cmp	r3, #8
 802714a:	d10b      	bne.n	8027164 <_printf_i+0x14c>
 802714c:	6823      	ldr	r3, [r4, #0]
 802714e:	07df      	lsls	r7, r3, #31
 8027150:	d508      	bpl.n	8027164 <_printf_i+0x14c>
 8027152:	6923      	ldr	r3, [r4, #16]
 8027154:	6861      	ldr	r1, [r4, #4]
 8027156:	4299      	cmp	r1, r3
 8027158:	bfde      	ittt	le
 802715a:	2330      	movle	r3, #48	; 0x30
 802715c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027160:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027164:	1b92      	subs	r2, r2, r6
 8027166:	6122      	str	r2, [r4, #16]
 8027168:	f8cd a000 	str.w	sl, [sp]
 802716c:	464b      	mov	r3, r9
 802716e:	aa03      	add	r2, sp, #12
 8027170:	4621      	mov	r1, r4
 8027172:	4640      	mov	r0, r8
 8027174:	f7ff fee2 	bl	8026f3c <_printf_common>
 8027178:	3001      	adds	r0, #1
 802717a:	d14c      	bne.n	8027216 <_printf_i+0x1fe>
 802717c:	f04f 30ff 	mov.w	r0, #4294967295
 8027180:	b004      	add	sp, #16
 8027182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027186:	4835      	ldr	r0, [pc, #212]	; (802725c <_printf_i+0x244>)
 8027188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802718c:	6823      	ldr	r3, [r4, #0]
 802718e:	680e      	ldr	r6, [r1, #0]
 8027190:	061f      	lsls	r7, r3, #24
 8027192:	f856 5b04 	ldr.w	r5, [r6], #4
 8027196:	600e      	str	r6, [r1, #0]
 8027198:	d514      	bpl.n	80271c4 <_printf_i+0x1ac>
 802719a:	07d9      	lsls	r1, r3, #31
 802719c:	bf44      	itt	mi
 802719e:	f043 0320 	orrmi.w	r3, r3, #32
 80271a2:	6023      	strmi	r3, [r4, #0]
 80271a4:	b91d      	cbnz	r5, 80271ae <_printf_i+0x196>
 80271a6:	6823      	ldr	r3, [r4, #0]
 80271a8:	f023 0320 	bic.w	r3, r3, #32
 80271ac:	6023      	str	r3, [r4, #0]
 80271ae:	2310      	movs	r3, #16
 80271b0:	e7b0      	b.n	8027114 <_printf_i+0xfc>
 80271b2:	6823      	ldr	r3, [r4, #0]
 80271b4:	f043 0320 	orr.w	r3, r3, #32
 80271b8:	6023      	str	r3, [r4, #0]
 80271ba:	2378      	movs	r3, #120	; 0x78
 80271bc:	4828      	ldr	r0, [pc, #160]	; (8027260 <_printf_i+0x248>)
 80271be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80271c2:	e7e3      	b.n	802718c <_printf_i+0x174>
 80271c4:	065e      	lsls	r6, r3, #25
 80271c6:	bf48      	it	mi
 80271c8:	b2ad      	uxthmi	r5, r5
 80271ca:	e7e6      	b.n	802719a <_printf_i+0x182>
 80271cc:	4616      	mov	r6, r2
 80271ce:	e7bb      	b.n	8027148 <_printf_i+0x130>
 80271d0:	680b      	ldr	r3, [r1, #0]
 80271d2:	6826      	ldr	r6, [r4, #0]
 80271d4:	6960      	ldr	r0, [r4, #20]
 80271d6:	1d1d      	adds	r5, r3, #4
 80271d8:	600d      	str	r5, [r1, #0]
 80271da:	0635      	lsls	r5, r6, #24
 80271dc:	681b      	ldr	r3, [r3, #0]
 80271de:	d501      	bpl.n	80271e4 <_printf_i+0x1cc>
 80271e0:	6018      	str	r0, [r3, #0]
 80271e2:	e002      	b.n	80271ea <_printf_i+0x1d2>
 80271e4:	0671      	lsls	r1, r6, #25
 80271e6:	d5fb      	bpl.n	80271e0 <_printf_i+0x1c8>
 80271e8:	8018      	strh	r0, [r3, #0]
 80271ea:	2300      	movs	r3, #0
 80271ec:	6123      	str	r3, [r4, #16]
 80271ee:	4616      	mov	r6, r2
 80271f0:	e7ba      	b.n	8027168 <_printf_i+0x150>
 80271f2:	680b      	ldr	r3, [r1, #0]
 80271f4:	1d1a      	adds	r2, r3, #4
 80271f6:	600a      	str	r2, [r1, #0]
 80271f8:	681e      	ldr	r6, [r3, #0]
 80271fa:	6862      	ldr	r2, [r4, #4]
 80271fc:	2100      	movs	r1, #0
 80271fe:	4630      	mov	r0, r6
 8027200:	f7d9 f826 	bl	8000250 <memchr>
 8027204:	b108      	cbz	r0, 802720a <_printf_i+0x1f2>
 8027206:	1b80      	subs	r0, r0, r6
 8027208:	6060      	str	r0, [r4, #4]
 802720a:	6863      	ldr	r3, [r4, #4]
 802720c:	6123      	str	r3, [r4, #16]
 802720e:	2300      	movs	r3, #0
 8027210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027214:	e7a8      	b.n	8027168 <_printf_i+0x150>
 8027216:	6923      	ldr	r3, [r4, #16]
 8027218:	4632      	mov	r2, r6
 802721a:	4649      	mov	r1, r9
 802721c:	4640      	mov	r0, r8
 802721e:	47d0      	blx	sl
 8027220:	3001      	adds	r0, #1
 8027222:	d0ab      	beq.n	802717c <_printf_i+0x164>
 8027224:	6823      	ldr	r3, [r4, #0]
 8027226:	079b      	lsls	r3, r3, #30
 8027228:	d413      	bmi.n	8027252 <_printf_i+0x23a>
 802722a:	68e0      	ldr	r0, [r4, #12]
 802722c:	9b03      	ldr	r3, [sp, #12]
 802722e:	4298      	cmp	r0, r3
 8027230:	bfb8      	it	lt
 8027232:	4618      	movlt	r0, r3
 8027234:	e7a4      	b.n	8027180 <_printf_i+0x168>
 8027236:	2301      	movs	r3, #1
 8027238:	4632      	mov	r2, r6
 802723a:	4649      	mov	r1, r9
 802723c:	4640      	mov	r0, r8
 802723e:	47d0      	blx	sl
 8027240:	3001      	adds	r0, #1
 8027242:	d09b      	beq.n	802717c <_printf_i+0x164>
 8027244:	3501      	adds	r5, #1
 8027246:	68e3      	ldr	r3, [r4, #12]
 8027248:	9903      	ldr	r1, [sp, #12]
 802724a:	1a5b      	subs	r3, r3, r1
 802724c:	42ab      	cmp	r3, r5
 802724e:	dcf2      	bgt.n	8027236 <_printf_i+0x21e>
 8027250:	e7eb      	b.n	802722a <_printf_i+0x212>
 8027252:	2500      	movs	r5, #0
 8027254:	f104 0619 	add.w	r6, r4, #25
 8027258:	e7f5      	b.n	8027246 <_printf_i+0x22e>
 802725a:	bf00      	nop
 802725c:	0802ef3d 	.word	0x0802ef3d
 8027260:	0802ef4e 	.word	0x0802ef4e

08027264 <_scanf_float>:
 8027264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027268:	b087      	sub	sp, #28
 802726a:	4617      	mov	r7, r2
 802726c:	9303      	str	r3, [sp, #12]
 802726e:	688b      	ldr	r3, [r1, #8]
 8027270:	1e5a      	subs	r2, r3, #1
 8027272:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8027276:	bf83      	ittte	hi
 8027278:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802727c:	195b      	addhi	r3, r3, r5
 802727e:	9302      	strhi	r3, [sp, #8]
 8027280:	2300      	movls	r3, #0
 8027282:	bf86      	itte	hi
 8027284:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027288:	608b      	strhi	r3, [r1, #8]
 802728a:	9302      	strls	r3, [sp, #8]
 802728c:	680b      	ldr	r3, [r1, #0]
 802728e:	468b      	mov	fp, r1
 8027290:	2500      	movs	r5, #0
 8027292:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8027296:	f84b 3b1c 	str.w	r3, [fp], #28
 802729a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802729e:	4680      	mov	r8, r0
 80272a0:	460c      	mov	r4, r1
 80272a2:	465e      	mov	r6, fp
 80272a4:	46aa      	mov	sl, r5
 80272a6:	46a9      	mov	r9, r5
 80272a8:	9501      	str	r5, [sp, #4]
 80272aa:	68a2      	ldr	r2, [r4, #8]
 80272ac:	b152      	cbz	r2, 80272c4 <_scanf_float+0x60>
 80272ae:	683b      	ldr	r3, [r7, #0]
 80272b0:	781b      	ldrb	r3, [r3, #0]
 80272b2:	2b4e      	cmp	r3, #78	; 0x4e
 80272b4:	d864      	bhi.n	8027380 <_scanf_float+0x11c>
 80272b6:	2b40      	cmp	r3, #64	; 0x40
 80272b8:	d83c      	bhi.n	8027334 <_scanf_float+0xd0>
 80272ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80272be:	b2c8      	uxtb	r0, r1
 80272c0:	280e      	cmp	r0, #14
 80272c2:	d93a      	bls.n	802733a <_scanf_float+0xd6>
 80272c4:	f1b9 0f00 	cmp.w	r9, #0
 80272c8:	d003      	beq.n	80272d2 <_scanf_float+0x6e>
 80272ca:	6823      	ldr	r3, [r4, #0]
 80272cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80272d0:	6023      	str	r3, [r4, #0]
 80272d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80272d6:	f1ba 0f01 	cmp.w	sl, #1
 80272da:	f200 8113 	bhi.w	8027504 <_scanf_float+0x2a0>
 80272de:	455e      	cmp	r6, fp
 80272e0:	f200 8105 	bhi.w	80274ee <_scanf_float+0x28a>
 80272e4:	2501      	movs	r5, #1
 80272e6:	4628      	mov	r0, r5
 80272e8:	b007      	add	sp, #28
 80272ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80272f2:	2a0d      	cmp	r2, #13
 80272f4:	d8e6      	bhi.n	80272c4 <_scanf_float+0x60>
 80272f6:	a101      	add	r1, pc, #4	; (adr r1, 80272fc <_scanf_float+0x98>)
 80272f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80272fc:	0802743b 	.word	0x0802743b
 8027300:	080272c5 	.word	0x080272c5
 8027304:	080272c5 	.word	0x080272c5
 8027308:	080272c5 	.word	0x080272c5
 802730c:	0802749b 	.word	0x0802749b
 8027310:	08027473 	.word	0x08027473
 8027314:	080272c5 	.word	0x080272c5
 8027318:	080272c5 	.word	0x080272c5
 802731c:	08027449 	.word	0x08027449
 8027320:	080272c5 	.word	0x080272c5
 8027324:	080272c5 	.word	0x080272c5
 8027328:	080272c5 	.word	0x080272c5
 802732c:	080272c5 	.word	0x080272c5
 8027330:	08027401 	.word	0x08027401
 8027334:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8027338:	e7db      	b.n	80272f2 <_scanf_float+0x8e>
 802733a:	290e      	cmp	r1, #14
 802733c:	d8c2      	bhi.n	80272c4 <_scanf_float+0x60>
 802733e:	a001      	add	r0, pc, #4	; (adr r0, 8027344 <_scanf_float+0xe0>)
 8027340:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8027344:	080273f3 	.word	0x080273f3
 8027348:	080272c5 	.word	0x080272c5
 802734c:	080273f3 	.word	0x080273f3
 8027350:	08027487 	.word	0x08027487
 8027354:	080272c5 	.word	0x080272c5
 8027358:	080273a1 	.word	0x080273a1
 802735c:	080273dd 	.word	0x080273dd
 8027360:	080273dd 	.word	0x080273dd
 8027364:	080273dd 	.word	0x080273dd
 8027368:	080273dd 	.word	0x080273dd
 802736c:	080273dd 	.word	0x080273dd
 8027370:	080273dd 	.word	0x080273dd
 8027374:	080273dd 	.word	0x080273dd
 8027378:	080273dd 	.word	0x080273dd
 802737c:	080273dd 	.word	0x080273dd
 8027380:	2b6e      	cmp	r3, #110	; 0x6e
 8027382:	d809      	bhi.n	8027398 <_scanf_float+0x134>
 8027384:	2b60      	cmp	r3, #96	; 0x60
 8027386:	d8b2      	bhi.n	80272ee <_scanf_float+0x8a>
 8027388:	2b54      	cmp	r3, #84	; 0x54
 802738a:	d077      	beq.n	802747c <_scanf_float+0x218>
 802738c:	2b59      	cmp	r3, #89	; 0x59
 802738e:	d199      	bne.n	80272c4 <_scanf_float+0x60>
 8027390:	2d07      	cmp	r5, #7
 8027392:	d197      	bne.n	80272c4 <_scanf_float+0x60>
 8027394:	2508      	movs	r5, #8
 8027396:	e029      	b.n	80273ec <_scanf_float+0x188>
 8027398:	2b74      	cmp	r3, #116	; 0x74
 802739a:	d06f      	beq.n	802747c <_scanf_float+0x218>
 802739c:	2b79      	cmp	r3, #121	; 0x79
 802739e:	e7f6      	b.n	802738e <_scanf_float+0x12a>
 80273a0:	6821      	ldr	r1, [r4, #0]
 80273a2:	05c8      	lsls	r0, r1, #23
 80273a4:	d51a      	bpl.n	80273dc <_scanf_float+0x178>
 80273a6:	9b02      	ldr	r3, [sp, #8]
 80273a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80273ac:	6021      	str	r1, [r4, #0]
 80273ae:	f109 0901 	add.w	r9, r9, #1
 80273b2:	b11b      	cbz	r3, 80273bc <_scanf_float+0x158>
 80273b4:	3b01      	subs	r3, #1
 80273b6:	3201      	adds	r2, #1
 80273b8:	9302      	str	r3, [sp, #8]
 80273ba:	60a2      	str	r2, [r4, #8]
 80273bc:	68a3      	ldr	r3, [r4, #8]
 80273be:	3b01      	subs	r3, #1
 80273c0:	60a3      	str	r3, [r4, #8]
 80273c2:	6923      	ldr	r3, [r4, #16]
 80273c4:	3301      	adds	r3, #1
 80273c6:	6123      	str	r3, [r4, #16]
 80273c8:	687b      	ldr	r3, [r7, #4]
 80273ca:	3b01      	subs	r3, #1
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	607b      	str	r3, [r7, #4]
 80273d0:	f340 8084 	ble.w	80274dc <_scanf_float+0x278>
 80273d4:	683b      	ldr	r3, [r7, #0]
 80273d6:	3301      	adds	r3, #1
 80273d8:	603b      	str	r3, [r7, #0]
 80273da:	e766      	b.n	80272aa <_scanf_float+0x46>
 80273dc:	eb1a 0f05 	cmn.w	sl, r5
 80273e0:	f47f af70 	bne.w	80272c4 <_scanf_float+0x60>
 80273e4:	6822      	ldr	r2, [r4, #0]
 80273e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80273ea:	6022      	str	r2, [r4, #0]
 80273ec:	f806 3b01 	strb.w	r3, [r6], #1
 80273f0:	e7e4      	b.n	80273bc <_scanf_float+0x158>
 80273f2:	6822      	ldr	r2, [r4, #0]
 80273f4:	0610      	lsls	r0, r2, #24
 80273f6:	f57f af65 	bpl.w	80272c4 <_scanf_float+0x60>
 80273fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80273fe:	e7f4      	b.n	80273ea <_scanf_float+0x186>
 8027400:	f1ba 0f00 	cmp.w	sl, #0
 8027404:	d10e      	bne.n	8027424 <_scanf_float+0x1c0>
 8027406:	f1b9 0f00 	cmp.w	r9, #0
 802740a:	d10e      	bne.n	802742a <_scanf_float+0x1c6>
 802740c:	6822      	ldr	r2, [r4, #0]
 802740e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8027412:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8027416:	d108      	bne.n	802742a <_scanf_float+0x1c6>
 8027418:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802741c:	6022      	str	r2, [r4, #0]
 802741e:	f04f 0a01 	mov.w	sl, #1
 8027422:	e7e3      	b.n	80273ec <_scanf_float+0x188>
 8027424:	f1ba 0f02 	cmp.w	sl, #2
 8027428:	d055      	beq.n	80274d6 <_scanf_float+0x272>
 802742a:	2d01      	cmp	r5, #1
 802742c:	d002      	beq.n	8027434 <_scanf_float+0x1d0>
 802742e:	2d04      	cmp	r5, #4
 8027430:	f47f af48 	bne.w	80272c4 <_scanf_float+0x60>
 8027434:	3501      	adds	r5, #1
 8027436:	b2ed      	uxtb	r5, r5
 8027438:	e7d8      	b.n	80273ec <_scanf_float+0x188>
 802743a:	f1ba 0f01 	cmp.w	sl, #1
 802743e:	f47f af41 	bne.w	80272c4 <_scanf_float+0x60>
 8027442:	f04f 0a02 	mov.w	sl, #2
 8027446:	e7d1      	b.n	80273ec <_scanf_float+0x188>
 8027448:	b97d      	cbnz	r5, 802746a <_scanf_float+0x206>
 802744a:	f1b9 0f00 	cmp.w	r9, #0
 802744e:	f47f af3c 	bne.w	80272ca <_scanf_float+0x66>
 8027452:	6822      	ldr	r2, [r4, #0]
 8027454:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8027458:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802745c:	f47f af39 	bne.w	80272d2 <_scanf_float+0x6e>
 8027460:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8027464:	6022      	str	r2, [r4, #0]
 8027466:	2501      	movs	r5, #1
 8027468:	e7c0      	b.n	80273ec <_scanf_float+0x188>
 802746a:	2d03      	cmp	r5, #3
 802746c:	d0e2      	beq.n	8027434 <_scanf_float+0x1d0>
 802746e:	2d05      	cmp	r5, #5
 8027470:	e7de      	b.n	8027430 <_scanf_float+0x1cc>
 8027472:	2d02      	cmp	r5, #2
 8027474:	f47f af26 	bne.w	80272c4 <_scanf_float+0x60>
 8027478:	2503      	movs	r5, #3
 802747a:	e7b7      	b.n	80273ec <_scanf_float+0x188>
 802747c:	2d06      	cmp	r5, #6
 802747e:	f47f af21 	bne.w	80272c4 <_scanf_float+0x60>
 8027482:	2507      	movs	r5, #7
 8027484:	e7b2      	b.n	80273ec <_scanf_float+0x188>
 8027486:	6822      	ldr	r2, [r4, #0]
 8027488:	0591      	lsls	r1, r2, #22
 802748a:	f57f af1b 	bpl.w	80272c4 <_scanf_float+0x60>
 802748e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8027492:	6022      	str	r2, [r4, #0]
 8027494:	f8cd 9004 	str.w	r9, [sp, #4]
 8027498:	e7a8      	b.n	80273ec <_scanf_float+0x188>
 802749a:	6822      	ldr	r2, [r4, #0]
 802749c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80274a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80274a4:	d006      	beq.n	80274b4 <_scanf_float+0x250>
 80274a6:	0550      	lsls	r0, r2, #21
 80274a8:	f57f af0c 	bpl.w	80272c4 <_scanf_float+0x60>
 80274ac:	f1b9 0f00 	cmp.w	r9, #0
 80274b0:	f43f af0f 	beq.w	80272d2 <_scanf_float+0x6e>
 80274b4:	0591      	lsls	r1, r2, #22
 80274b6:	bf58      	it	pl
 80274b8:	9901      	ldrpl	r1, [sp, #4]
 80274ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80274be:	bf58      	it	pl
 80274c0:	eba9 0101 	subpl.w	r1, r9, r1
 80274c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80274c8:	bf58      	it	pl
 80274ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80274ce:	6022      	str	r2, [r4, #0]
 80274d0:	f04f 0900 	mov.w	r9, #0
 80274d4:	e78a      	b.n	80273ec <_scanf_float+0x188>
 80274d6:	f04f 0a03 	mov.w	sl, #3
 80274da:	e787      	b.n	80273ec <_scanf_float+0x188>
 80274dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80274e0:	4639      	mov	r1, r7
 80274e2:	4640      	mov	r0, r8
 80274e4:	4798      	blx	r3
 80274e6:	2800      	cmp	r0, #0
 80274e8:	f43f aedf 	beq.w	80272aa <_scanf_float+0x46>
 80274ec:	e6ea      	b.n	80272c4 <_scanf_float+0x60>
 80274ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80274f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80274f6:	463a      	mov	r2, r7
 80274f8:	4640      	mov	r0, r8
 80274fa:	4798      	blx	r3
 80274fc:	6923      	ldr	r3, [r4, #16]
 80274fe:	3b01      	subs	r3, #1
 8027500:	6123      	str	r3, [r4, #16]
 8027502:	e6ec      	b.n	80272de <_scanf_float+0x7a>
 8027504:	1e6b      	subs	r3, r5, #1
 8027506:	2b06      	cmp	r3, #6
 8027508:	d825      	bhi.n	8027556 <_scanf_float+0x2f2>
 802750a:	2d02      	cmp	r5, #2
 802750c:	d836      	bhi.n	802757c <_scanf_float+0x318>
 802750e:	455e      	cmp	r6, fp
 8027510:	f67f aee8 	bls.w	80272e4 <_scanf_float+0x80>
 8027514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027518:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802751c:	463a      	mov	r2, r7
 802751e:	4640      	mov	r0, r8
 8027520:	4798      	blx	r3
 8027522:	6923      	ldr	r3, [r4, #16]
 8027524:	3b01      	subs	r3, #1
 8027526:	6123      	str	r3, [r4, #16]
 8027528:	e7f1      	b.n	802750e <_scanf_float+0x2aa>
 802752a:	9802      	ldr	r0, [sp, #8]
 802752c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027530:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8027534:	9002      	str	r0, [sp, #8]
 8027536:	463a      	mov	r2, r7
 8027538:	4640      	mov	r0, r8
 802753a:	4798      	blx	r3
 802753c:	6923      	ldr	r3, [r4, #16]
 802753e:	3b01      	subs	r3, #1
 8027540:	6123      	str	r3, [r4, #16]
 8027542:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027546:	fa5f fa8a 	uxtb.w	sl, sl
 802754a:	f1ba 0f02 	cmp.w	sl, #2
 802754e:	d1ec      	bne.n	802752a <_scanf_float+0x2c6>
 8027550:	3d03      	subs	r5, #3
 8027552:	b2ed      	uxtb	r5, r5
 8027554:	1b76      	subs	r6, r6, r5
 8027556:	6823      	ldr	r3, [r4, #0]
 8027558:	05da      	lsls	r2, r3, #23
 802755a:	d52f      	bpl.n	80275bc <_scanf_float+0x358>
 802755c:	055b      	lsls	r3, r3, #21
 802755e:	d510      	bpl.n	8027582 <_scanf_float+0x31e>
 8027560:	455e      	cmp	r6, fp
 8027562:	f67f aebf 	bls.w	80272e4 <_scanf_float+0x80>
 8027566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802756a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802756e:	463a      	mov	r2, r7
 8027570:	4640      	mov	r0, r8
 8027572:	4798      	blx	r3
 8027574:	6923      	ldr	r3, [r4, #16]
 8027576:	3b01      	subs	r3, #1
 8027578:	6123      	str	r3, [r4, #16]
 802757a:	e7f1      	b.n	8027560 <_scanf_float+0x2fc>
 802757c:	46aa      	mov	sl, r5
 802757e:	9602      	str	r6, [sp, #8]
 8027580:	e7df      	b.n	8027542 <_scanf_float+0x2de>
 8027582:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8027586:	6923      	ldr	r3, [r4, #16]
 8027588:	2965      	cmp	r1, #101	; 0x65
 802758a:	f103 33ff 	add.w	r3, r3, #4294967295
 802758e:	f106 35ff 	add.w	r5, r6, #4294967295
 8027592:	6123      	str	r3, [r4, #16]
 8027594:	d00c      	beq.n	80275b0 <_scanf_float+0x34c>
 8027596:	2945      	cmp	r1, #69	; 0x45
 8027598:	d00a      	beq.n	80275b0 <_scanf_float+0x34c>
 802759a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802759e:	463a      	mov	r2, r7
 80275a0:	4640      	mov	r0, r8
 80275a2:	4798      	blx	r3
 80275a4:	6923      	ldr	r3, [r4, #16]
 80275a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80275aa:	3b01      	subs	r3, #1
 80275ac:	1eb5      	subs	r5, r6, #2
 80275ae:	6123      	str	r3, [r4, #16]
 80275b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80275b4:	463a      	mov	r2, r7
 80275b6:	4640      	mov	r0, r8
 80275b8:	4798      	blx	r3
 80275ba:	462e      	mov	r6, r5
 80275bc:	6825      	ldr	r5, [r4, #0]
 80275be:	f015 0510 	ands.w	r5, r5, #16
 80275c2:	d14d      	bne.n	8027660 <_scanf_float+0x3fc>
 80275c4:	7035      	strb	r5, [r6, #0]
 80275c6:	6823      	ldr	r3, [r4, #0]
 80275c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80275cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80275d0:	d11a      	bne.n	8027608 <_scanf_float+0x3a4>
 80275d2:	9b01      	ldr	r3, [sp, #4]
 80275d4:	454b      	cmp	r3, r9
 80275d6:	eba3 0209 	sub.w	r2, r3, r9
 80275da:	d122      	bne.n	8027622 <_scanf_float+0x3be>
 80275dc:	2200      	movs	r2, #0
 80275de:	4659      	mov	r1, fp
 80275e0:	4640      	mov	r0, r8
 80275e2:	f000 feaf 	bl	8028344 <_strtod_r>
 80275e6:	9b03      	ldr	r3, [sp, #12]
 80275e8:	6821      	ldr	r1, [r4, #0]
 80275ea:	681b      	ldr	r3, [r3, #0]
 80275ec:	f011 0f02 	tst.w	r1, #2
 80275f0:	f103 0204 	add.w	r2, r3, #4
 80275f4:	d020      	beq.n	8027638 <_scanf_float+0x3d4>
 80275f6:	9903      	ldr	r1, [sp, #12]
 80275f8:	600a      	str	r2, [r1, #0]
 80275fa:	681b      	ldr	r3, [r3, #0]
 80275fc:	ed83 0b00 	vstr	d0, [r3]
 8027600:	68e3      	ldr	r3, [r4, #12]
 8027602:	3301      	adds	r3, #1
 8027604:	60e3      	str	r3, [r4, #12]
 8027606:	e66e      	b.n	80272e6 <_scanf_float+0x82>
 8027608:	9b04      	ldr	r3, [sp, #16]
 802760a:	2b00      	cmp	r3, #0
 802760c:	d0e6      	beq.n	80275dc <_scanf_float+0x378>
 802760e:	9905      	ldr	r1, [sp, #20]
 8027610:	230a      	movs	r3, #10
 8027612:	462a      	mov	r2, r5
 8027614:	3101      	adds	r1, #1
 8027616:	4640      	mov	r0, r8
 8027618:	f000 ff1e 	bl	8028458 <_strtol_r>
 802761c:	9b04      	ldr	r3, [sp, #16]
 802761e:	9e05      	ldr	r6, [sp, #20]
 8027620:	1ac2      	subs	r2, r0, r3
 8027622:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8027626:	429e      	cmp	r6, r3
 8027628:	bf28      	it	cs
 802762a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802762e:	490d      	ldr	r1, [pc, #52]	; (8027664 <_scanf_float+0x400>)
 8027630:	4630      	mov	r0, r6
 8027632:	f000 f875 	bl	8027720 <siprintf>
 8027636:	e7d1      	b.n	80275dc <_scanf_float+0x378>
 8027638:	f011 0f04 	tst.w	r1, #4
 802763c:	9903      	ldr	r1, [sp, #12]
 802763e:	600a      	str	r2, [r1, #0]
 8027640:	d1db      	bne.n	80275fa <_scanf_float+0x396>
 8027642:	eeb4 0b40 	vcmp.f64	d0, d0
 8027646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802764a:	681e      	ldr	r6, [r3, #0]
 802764c:	d705      	bvc.n	802765a <_scanf_float+0x3f6>
 802764e:	4806      	ldr	r0, [pc, #24]	; (8027668 <_scanf_float+0x404>)
 8027650:	f000 f81c 	bl	802768c <nanf>
 8027654:	ed86 0a00 	vstr	s0, [r6]
 8027658:	e7d2      	b.n	8027600 <_scanf_float+0x39c>
 802765a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802765e:	e7f9      	b.n	8027654 <_scanf_float+0x3f0>
 8027660:	2500      	movs	r5, #0
 8027662:	e640      	b.n	80272e6 <_scanf_float+0x82>
 8027664:	0802ef5f 	.word	0x0802ef5f
 8027668:	0802ef17 	.word	0x0802ef17

0802766c <_sbrk_r>:
 802766c:	b538      	push	{r3, r4, r5, lr}
 802766e:	4d06      	ldr	r5, [pc, #24]	; (8027688 <_sbrk_r+0x1c>)
 8027670:	2300      	movs	r3, #0
 8027672:	4604      	mov	r4, r0
 8027674:	4608      	mov	r0, r1
 8027676:	602b      	str	r3, [r5, #0]
 8027678:	f7db fb8c 	bl	8002d94 <_sbrk>
 802767c:	1c43      	adds	r3, r0, #1
 802767e:	d102      	bne.n	8027686 <_sbrk_r+0x1a>
 8027680:	682b      	ldr	r3, [r5, #0]
 8027682:	b103      	cbz	r3, 8027686 <_sbrk_r+0x1a>
 8027684:	6023      	str	r3, [r4, #0]
 8027686:	bd38      	pop	{r3, r4, r5, pc}
 8027688:	2005715c 	.word	0x2005715c

0802768c <nanf>:
 802768c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027694 <nanf+0x8>
 8027690:	4770      	bx	lr
 8027692:	bf00      	nop
 8027694:	7fc00000 	.word	0x7fc00000

08027698 <_raise_r>:
 8027698:	291f      	cmp	r1, #31
 802769a:	b538      	push	{r3, r4, r5, lr}
 802769c:	4604      	mov	r4, r0
 802769e:	460d      	mov	r5, r1
 80276a0:	d904      	bls.n	80276ac <_raise_r+0x14>
 80276a2:	2316      	movs	r3, #22
 80276a4:	6003      	str	r3, [r0, #0]
 80276a6:	f04f 30ff 	mov.w	r0, #4294967295
 80276aa:	bd38      	pop	{r3, r4, r5, pc}
 80276ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80276ae:	b112      	cbz	r2, 80276b6 <_raise_r+0x1e>
 80276b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80276b4:	b94b      	cbnz	r3, 80276ca <_raise_r+0x32>
 80276b6:	4620      	mov	r0, r4
 80276b8:	f000 f830 	bl	802771c <_getpid_r>
 80276bc:	462a      	mov	r2, r5
 80276be:	4601      	mov	r1, r0
 80276c0:	4620      	mov	r0, r4
 80276c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80276c6:	f000 b817 	b.w	80276f8 <_kill_r>
 80276ca:	2b01      	cmp	r3, #1
 80276cc:	d00a      	beq.n	80276e4 <_raise_r+0x4c>
 80276ce:	1c59      	adds	r1, r3, #1
 80276d0:	d103      	bne.n	80276da <_raise_r+0x42>
 80276d2:	2316      	movs	r3, #22
 80276d4:	6003      	str	r3, [r0, #0]
 80276d6:	2001      	movs	r0, #1
 80276d8:	e7e7      	b.n	80276aa <_raise_r+0x12>
 80276da:	2400      	movs	r4, #0
 80276dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80276e0:	4628      	mov	r0, r5
 80276e2:	4798      	blx	r3
 80276e4:	2000      	movs	r0, #0
 80276e6:	e7e0      	b.n	80276aa <_raise_r+0x12>

080276e8 <raise>:
 80276e8:	4b02      	ldr	r3, [pc, #8]	; (80276f4 <raise+0xc>)
 80276ea:	4601      	mov	r1, r0
 80276ec:	6818      	ldr	r0, [r3, #0]
 80276ee:	f7ff bfd3 	b.w	8027698 <_raise_r>
 80276f2:	bf00      	nop
 80276f4:	2000007c 	.word	0x2000007c

080276f8 <_kill_r>:
 80276f8:	b538      	push	{r3, r4, r5, lr}
 80276fa:	4d07      	ldr	r5, [pc, #28]	; (8027718 <_kill_r+0x20>)
 80276fc:	2300      	movs	r3, #0
 80276fe:	4604      	mov	r4, r0
 8027700:	4608      	mov	r0, r1
 8027702:	4611      	mov	r1, r2
 8027704:	602b      	str	r3, [r5, #0]
 8027706:	f7db fabd 	bl	8002c84 <_kill>
 802770a:	1c43      	adds	r3, r0, #1
 802770c:	d102      	bne.n	8027714 <_kill_r+0x1c>
 802770e:	682b      	ldr	r3, [r5, #0]
 8027710:	b103      	cbz	r3, 8027714 <_kill_r+0x1c>
 8027712:	6023      	str	r3, [r4, #0]
 8027714:	bd38      	pop	{r3, r4, r5, pc}
 8027716:	bf00      	nop
 8027718:	2005715c 	.word	0x2005715c

0802771c <_getpid_r>:
 802771c:	f7db baaa 	b.w	8002c74 <_getpid>

08027720 <siprintf>:
 8027720:	b40e      	push	{r1, r2, r3}
 8027722:	b500      	push	{lr}
 8027724:	b09c      	sub	sp, #112	; 0x70
 8027726:	ab1d      	add	r3, sp, #116	; 0x74
 8027728:	9002      	str	r0, [sp, #8]
 802772a:	9006      	str	r0, [sp, #24]
 802772c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027730:	4809      	ldr	r0, [pc, #36]	; (8027758 <siprintf+0x38>)
 8027732:	9107      	str	r1, [sp, #28]
 8027734:	9104      	str	r1, [sp, #16]
 8027736:	4909      	ldr	r1, [pc, #36]	; (802775c <siprintf+0x3c>)
 8027738:	f853 2b04 	ldr.w	r2, [r3], #4
 802773c:	9105      	str	r1, [sp, #20]
 802773e:	6800      	ldr	r0, [r0, #0]
 8027740:	9301      	str	r3, [sp, #4]
 8027742:	a902      	add	r1, sp, #8
 8027744:	f003 f8d0 	bl	802a8e8 <_svfiprintf_r>
 8027748:	9b02      	ldr	r3, [sp, #8]
 802774a:	2200      	movs	r2, #0
 802774c:	701a      	strb	r2, [r3, #0]
 802774e:	b01c      	add	sp, #112	; 0x70
 8027750:	f85d eb04 	ldr.w	lr, [sp], #4
 8027754:	b003      	add	sp, #12
 8027756:	4770      	bx	lr
 8027758:	2000007c 	.word	0x2000007c
 802775c:	ffff0208 	.word	0xffff0208

08027760 <sulp>:
 8027760:	b570      	push	{r4, r5, r6, lr}
 8027762:	4604      	mov	r4, r0
 8027764:	460d      	mov	r5, r1
 8027766:	4616      	mov	r6, r2
 8027768:	ec45 4b10 	vmov	d0, r4, r5
 802776c:	f002 fedc 	bl	802a528 <__ulp>
 8027770:	b17e      	cbz	r6, 8027792 <sulp+0x32>
 8027772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8027776:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802777a:	2b00      	cmp	r3, #0
 802777c:	dd09      	ble.n	8027792 <sulp+0x32>
 802777e:	051b      	lsls	r3, r3, #20
 8027780:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8027784:	2000      	movs	r0, #0
 8027786:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802778a:	ec41 0b17 	vmov	d7, r0, r1
 802778e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027792:	bd70      	pop	{r4, r5, r6, pc}
 8027794:	0000      	movs	r0, r0
	...

08027798 <_strtod_l>:
 8027798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802779c:	ed2d 8b0c 	vpush	{d8-d13}
 80277a0:	b09d      	sub	sp, #116	; 0x74
 80277a2:	461f      	mov	r7, r3
 80277a4:	2300      	movs	r3, #0
 80277a6:	9318      	str	r3, [sp, #96]	; 0x60
 80277a8:	4ba6      	ldr	r3, [pc, #664]	; (8027a44 <_strtod_l+0x2ac>)
 80277aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80277ac:	681b      	ldr	r3, [r3, #0]
 80277ae:	9308      	str	r3, [sp, #32]
 80277b0:	4604      	mov	r4, r0
 80277b2:	4618      	mov	r0, r3
 80277b4:	468a      	mov	sl, r1
 80277b6:	f7d8 fd43 	bl	8000240 <strlen>
 80277ba:	f04f 0800 	mov.w	r8, #0
 80277be:	4605      	mov	r5, r0
 80277c0:	f04f 0900 	mov.w	r9, #0
 80277c4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80277c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80277ca:	781a      	ldrb	r2, [r3, #0]
 80277cc:	2a2b      	cmp	r2, #43	; 0x2b
 80277ce:	d04d      	beq.n	802786c <_strtod_l+0xd4>
 80277d0:	d83a      	bhi.n	8027848 <_strtod_l+0xb0>
 80277d2:	2a0d      	cmp	r2, #13
 80277d4:	d833      	bhi.n	802783e <_strtod_l+0xa6>
 80277d6:	2a08      	cmp	r2, #8
 80277d8:	d833      	bhi.n	8027842 <_strtod_l+0xaa>
 80277da:	2a00      	cmp	r2, #0
 80277dc:	d03d      	beq.n	802785a <_strtod_l+0xc2>
 80277de:	2300      	movs	r3, #0
 80277e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80277e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80277e4:	7833      	ldrb	r3, [r6, #0]
 80277e6:	2b30      	cmp	r3, #48	; 0x30
 80277e8:	f040 80b6 	bne.w	8027958 <_strtod_l+0x1c0>
 80277ec:	7873      	ldrb	r3, [r6, #1]
 80277ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80277f2:	2b58      	cmp	r3, #88	; 0x58
 80277f4:	d16d      	bne.n	80278d2 <_strtod_l+0x13a>
 80277f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80277f8:	9301      	str	r3, [sp, #4]
 80277fa:	ab18      	add	r3, sp, #96	; 0x60
 80277fc:	9702      	str	r7, [sp, #8]
 80277fe:	9300      	str	r3, [sp, #0]
 8027800:	4a91      	ldr	r2, [pc, #580]	; (8027a48 <_strtod_l+0x2b0>)
 8027802:	ab19      	add	r3, sp, #100	; 0x64
 8027804:	a917      	add	r1, sp, #92	; 0x5c
 8027806:	4620      	mov	r0, r4
 8027808:	f001 ff76 	bl	80296f8 <__gethex>
 802780c:	f010 0507 	ands.w	r5, r0, #7
 8027810:	4607      	mov	r7, r0
 8027812:	d005      	beq.n	8027820 <_strtod_l+0x88>
 8027814:	2d06      	cmp	r5, #6
 8027816:	d12b      	bne.n	8027870 <_strtod_l+0xd8>
 8027818:	3601      	adds	r6, #1
 802781a:	2300      	movs	r3, #0
 802781c:	9617      	str	r6, [sp, #92]	; 0x5c
 802781e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027822:	2b00      	cmp	r3, #0
 8027824:	f040 856e 	bne.w	8028304 <_strtod_l+0xb6c>
 8027828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802782a:	b1e3      	cbz	r3, 8027866 <_strtod_l+0xce>
 802782c:	ec49 8b17 	vmov	d7, r8, r9
 8027830:	eeb1 0b47 	vneg.f64	d0, d7
 8027834:	b01d      	add	sp, #116	; 0x74
 8027836:	ecbd 8b0c 	vpop	{d8-d13}
 802783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802783e:	2a20      	cmp	r2, #32
 8027840:	d1cd      	bne.n	80277de <_strtod_l+0x46>
 8027842:	3301      	adds	r3, #1
 8027844:	9317      	str	r3, [sp, #92]	; 0x5c
 8027846:	e7bf      	b.n	80277c8 <_strtod_l+0x30>
 8027848:	2a2d      	cmp	r2, #45	; 0x2d
 802784a:	d1c8      	bne.n	80277de <_strtod_l+0x46>
 802784c:	2201      	movs	r2, #1
 802784e:	920b      	str	r2, [sp, #44]	; 0x2c
 8027850:	1c5a      	adds	r2, r3, #1
 8027852:	9217      	str	r2, [sp, #92]	; 0x5c
 8027854:	785b      	ldrb	r3, [r3, #1]
 8027856:	2b00      	cmp	r3, #0
 8027858:	d1c3      	bne.n	80277e2 <_strtod_l+0x4a>
 802785a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802785c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027860:	2b00      	cmp	r3, #0
 8027862:	f040 854d 	bne.w	8028300 <_strtod_l+0xb68>
 8027866:	ec49 8b10 	vmov	d0, r8, r9
 802786a:	e7e3      	b.n	8027834 <_strtod_l+0x9c>
 802786c:	2200      	movs	r2, #0
 802786e:	e7ee      	b.n	802784e <_strtod_l+0xb6>
 8027870:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027872:	b13a      	cbz	r2, 8027884 <_strtod_l+0xec>
 8027874:	2135      	movs	r1, #53	; 0x35
 8027876:	a81a      	add	r0, sp, #104	; 0x68
 8027878:	f002 ff62 	bl	802a740 <__copybits>
 802787c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802787e:	4620      	mov	r0, r4
 8027880:	f002 fb26 	bl	8029ed0 <_Bfree>
 8027884:	3d01      	subs	r5, #1
 8027886:	2d05      	cmp	r5, #5
 8027888:	d807      	bhi.n	802789a <_strtod_l+0x102>
 802788a:	e8df f005 	tbb	[pc, r5]
 802788e:	0b0e      	.short	0x0b0e
 8027890:	030e1d18 	.word	0x030e1d18
 8027894:	f04f 0900 	mov.w	r9, #0
 8027898:	46c8      	mov	r8, r9
 802789a:	073b      	lsls	r3, r7, #28
 802789c:	d5c0      	bpl.n	8027820 <_strtod_l+0x88>
 802789e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80278a2:	e7bd      	b.n	8027820 <_strtod_l+0x88>
 80278a4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80278a8:	e7f7      	b.n	802789a <_strtod_l+0x102>
 80278aa:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80278ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80278b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80278b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80278b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80278bc:	e7ed      	b.n	802789a <_strtod_l+0x102>
 80278be:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8027a4c <_strtod_l+0x2b4>
 80278c2:	f04f 0800 	mov.w	r8, #0
 80278c6:	e7e8      	b.n	802789a <_strtod_l+0x102>
 80278c8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80278cc:	f04f 38ff 	mov.w	r8, #4294967295
 80278d0:	e7e3      	b.n	802789a <_strtod_l+0x102>
 80278d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80278d4:	1c5a      	adds	r2, r3, #1
 80278d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80278d8:	785b      	ldrb	r3, [r3, #1]
 80278da:	2b30      	cmp	r3, #48	; 0x30
 80278dc:	d0f9      	beq.n	80278d2 <_strtod_l+0x13a>
 80278de:	2b00      	cmp	r3, #0
 80278e0:	d09e      	beq.n	8027820 <_strtod_l+0x88>
 80278e2:	2301      	movs	r3, #1
 80278e4:	9306      	str	r3, [sp, #24]
 80278e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80278e8:	930c      	str	r3, [sp, #48]	; 0x30
 80278ea:	2300      	movs	r3, #0
 80278ec:	9304      	str	r3, [sp, #16]
 80278ee:	930a      	str	r3, [sp, #40]	; 0x28
 80278f0:	461e      	mov	r6, r3
 80278f2:	220a      	movs	r2, #10
 80278f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80278f6:	f890 b000 	ldrb.w	fp, [r0]
 80278fa:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80278fe:	b2d9      	uxtb	r1, r3
 8027900:	2909      	cmp	r1, #9
 8027902:	d92b      	bls.n	802795c <_strtod_l+0x1c4>
 8027904:	9908      	ldr	r1, [sp, #32]
 8027906:	462a      	mov	r2, r5
 8027908:	f003 f939 	bl	802ab7e <strncmp>
 802790c:	2800      	cmp	r0, #0
 802790e:	d035      	beq.n	802797c <_strtod_l+0x1e4>
 8027910:	2000      	movs	r0, #0
 8027912:	465a      	mov	r2, fp
 8027914:	4633      	mov	r3, r6
 8027916:	4683      	mov	fp, r0
 8027918:	4601      	mov	r1, r0
 802791a:	2a65      	cmp	r2, #101	; 0x65
 802791c:	d001      	beq.n	8027922 <_strtod_l+0x18a>
 802791e:	2a45      	cmp	r2, #69	; 0x45
 8027920:	d118      	bne.n	8027954 <_strtod_l+0x1bc>
 8027922:	b91b      	cbnz	r3, 802792c <_strtod_l+0x194>
 8027924:	9b06      	ldr	r3, [sp, #24]
 8027926:	4303      	orrs	r3, r0
 8027928:	d097      	beq.n	802785a <_strtod_l+0xc2>
 802792a:	2300      	movs	r3, #0
 802792c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8027930:	f10a 0201 	add.w	r2, sl, #1
 8027934:	9217      	str	r2, [sp, #92]	; 0x5c
 8027936:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802793a:	2a2b      	cmp	r2, #43	; 0x2b
 802793c:	d077      	beq.n	8027a2e <_strtod_l+0x296>
 802793e:	2a2d      	cmp	r2, #45	; 0x2d
 8027940:	d07d      	beq.n	8027a3e <_strtod_l+0x2a6>
 8027942:	f04f 0e00 	mov.w	lr, #0
 8027946:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802794a:	2d09      	cmp	r5, #9
 802794c:	f240 8084 	bls.w	8027a58 <_strtod_l+0x2c0>
 8027950:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027954:	2500      	movs	r5, #0
 8027956:	e09f      	b.n	8027a98 <_strtod_l+0x300>
 8027958:	2300      	movs	r3, #0
 802795a:	e7c3      	b.n	80278e4 <_strtod_l+0x14c>
 802795c:	2e08      	cmp	r6, #8
 802795e:	bfd5      	itete	le
 8027960:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8027962:	9904      	ldrgt	r1, [sp, #16]
 8027964:	fb02 3301 	mlale	r3, r2, r1, r3
 8027968:	fb02 3301 	mlagt	r3, r2, r1, r3
 802796c:	f100 0001 	add.w	r0, r0, #1
 8027970:	bfd4      	ite	le
 8027972:	930a      	strle	r3, [sp, #40]	; 0x28
 8027974:	9304      	strgt	r3, [sp, #16]
 8027976:	3601      	adds	r6, #1
 8027978:	9017      	str	r0, [sp, #92]	; 0x5c
 802797a:	e7bb      	b.n	80278f4 <_strtod_l+0x15c>
 802797c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802797e:	195a      	adds	r2, r3, r5
 8027980:	9217      	str	r2, [sp, #92]	; 0x5c
 8027982:	5d5a      	ldrb	r2, [r3, r5]
 8027984:	b3ae      	cbz	r6, 80279f2 <_strtod_l+0x25a>
 8027986:	4683      	mov	fp, r0
 8027988:	4633      	mov	r3, r6
 802798a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802798e:	2909      	cmp	r1, #9
 8027990:	d912      	bls.n	80279b8 <_strtod_l+0x220>
 8027992:	2101      	movs	r1, #1
 8027994:	e7c1      	b.n	802791a <_strtod_l+0x182>
 8027996:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027998:	1c5a      	adds	r2, r3, #1
 802799a:	9217      	str	r2, [sp, #92]	; 0x5c
 802799c:	785a      	ldrb	r2, [r3, #1]
 802799e:	3001      	adds	r0, #1
 80279a0:	2a30      	cmp	r2, #48	; 0x30
 80279a2:	d0f8      	beq.n	8027996 <_strtod_l+0x1fe>
 80279a4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80279a8:	2b08      	cmp	r3, #8
 80279aa:	f200 84b0 	bhi.w	802830e <_strtod_l+0xb76>
 80279ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80279b0:	930c      	str	r3, [sp, #48]	; 0x30
 80279b2:	4683      	mov	fp, r0
 80279b4:	2000      	movs	r0, #0
 80279b6:	4603      	mov	r3, r0
 80279b8:	3a30      	subs	r2, #48	; 0x30
 80279ba:	f100 0101 	add.w	r1, r0, #1
 80279be:	d012      	beq.n	80279e6 <_strtod_l+0x24e>
 80279c0:	448b      	add	fp, r1
 80279c2:	eb00 0c03 	add.w	ip, r0, r3
 80279c6:	4619      	mov	r1, r3
 80279c8:	250a      	movs	r5, #10
 80279ca:	4561      	cmp	r1, ip
 80279cc:	d113      	bne.n	80279f6 <_strtod_l+0x25e>
 80279ce:	1819      	adds	r1, r3, r0
 80279d0:	2908      	cmp	r1, #8
 80279d2:	f103 0301 	add.w	r3, r3, #1
 80279d6:	4403      	add	r3, r0
 80279d8:	dc1d      	bgt.n	8027a16 <_strtod_l+0x27e>
 80279da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80279dc:	210a      	movs	r1, #10
 80279de:	fb01 2200 	mla	r2, r1, r0, r2
 80279e2:	920a      	str	r2, [sp, #40]	; 0x28
 80279e4:	2100      	movs	r1, #0
 80279e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80279e8:	1c50      	adds	r0, r2, #1
 80279ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80279ec:	7852      	ldrb	r2, [r2, #1]
 80279ee:	4608      	mov	r0, r1
 80279f0:	e7cb      	b.n	802798a <_strtod_l+0x1f2>
 80279f2:	4630      	mov	r0, r6
 80279f4:	e7d4      	b.n	80279a0 <_strtod_l+0x208>
 80279f6:	2908      	cmp	r1, #8
 80279f8:	dc04      	bgt.n	8027a04 <_strtod_l+0x26c>
 80279fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80279fc:	436f      	muls	r7, r5
 80279fe:	970a      	str	r7, [sp, #40]	; 0x28
 8027a00:	3101      	adds	r1, #1
 8027a02:	e7e2      	b.n	80279ca <_strtod_l+0x232>
 8027a04:	f101 0e01 	add.w	lr, r1, #1
 8027a08:	f1be 0f10 	cmp.w	lr, #16
 8027a0c:	bfde      	ittt	le
 8027a0e:	9f04      	ldrle	r7, [sp, #16]
 8027a10:	436f      	mulle	r7, r5
 8027a12:	9704      	strle	r7, [sp, #16]
 8027a14:	e7f4      	b.n	8027a00 <_strtod_l+0x268>
 8027a16:	2b10      	cmp	r3, #16
 8027a18:	bfdf      	itttt	le
 8027a1a:	9804      	ldrle	r0, [sp, #16]
 8027a1c:	210a      	movle	r1, #10
 8027a1e:	fb01 2200 	mlale	r2, r1, r0, r2
 8027a22:	9204      	strle	r2, [sp, #16]
 8027a24:	e7de      	b.n	80279e4 <_strtod_l+0x24c>
 8027a26:	f04f 0b00 	mov.w	fp, #0
 8027a2a:	2101      	movs	r1, #1
 8027a2c:	e77a      	b.n	8027924 <_strtod_l+0x18c>
 8027a2e:	f04f 0e00 	mov.w	lr, #0
 8027a32:	f10a 0202 	add.w	r2, sl, #2
 8027a36:	9217      	str	r2, [sp, #92]	; 0x5c
 8027a38:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8027a3c:	e783      	b.n	8027946 <_strtod_l+0x1ae>
 8027a3e:	f04f 0e01 	mov.w	lr, #1
 8027a42:	e7f6      	b.n	8027a32 <_strtod_l+0x29a>
 8027a44:	0802f21c 	.word	0x0802f21c
 8027a48:	0802ef68 	.word	0x0802ef68
 8027a4c:	7ff00000 	.word	0x7ff00000
 8027a50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027a52:	1c55      	adds	r5, r2, #1
 8027a54:	9517      	str	r5, [sp, #92]	; 0x5c
 8027a56:	7852      	ldrb	r2, [r2, #1]
 8027a58:	2a30      	cmp	r2, #48	; 0x30
 8027a5a:	d0f9      	beq.n	8027a50 <_strtod_l+0x2b8>
 8027a5c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8027a60:	2d08      	cmp	r5, #8
 8027a62:	f63f af77 	bhi.w	8027954 <_strtod_l+0x1bc>
 8027a66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8027a6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027a6c:	9208      	str	r2, [sp, #32]
 8027a6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027a70:	1c55      	adds	r5, r2, #1
 8027a72:	9517      	str	r5, [sp, #92]	; 0x5c
 8027a74:	7852      	ldrb	r2, [r2, #1]
 8027a76:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8027a7a:	2f09      	cmp	r7, #9
 8027a7c:	d937      	bls.n	8027aee <_strtod_l+0x356>
 8027a7e:	9f08      	ldr	r7, [sp, #32]
 8027a80:	1bed      	subs	r5, r5, r7
 8027a82:	2d08      	cmp	r5, #8
 8027a84:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8027a88:	dc02      	bgt.n	8027a90 <_strtod_l+0x2f8>
 8027a8a:	4565      	cmp	r5, ip
 8027a8c:	bfa8      	it	ge
 8027a8e:	4665      	movge	r5, ip
 8027a90:	f1be 0f00 	cmp.w	lr, #0
 8027a94:	d000      	beq.n	8027a98 <_strtod_l+0x300>
 8027a96:	426d      	negs	r5, r5
 8027a98:	2b00      	cmp	r3, #0
 8027a9a:	d14f      	bne.n	8027b3c <_strtod_l+0x3a4>
 8027a9c:	9b06      	ldr	r3, [sp, #24]
 8027a9e:	4303      	orrs	r3, r0
 8027aa0:	f47f aebe 	bne.w	8027820 <_strtod_l+0x88>
 8027aa4:	2900      	cmp	r1, #0
 8027aa6:	f47f aed8 	bne.w	802785a <_strtod_l+0xc2>
 8027aaa:	2a69      	cmp	r2, #105	; 0x69
 8027aac:	d027      	beq.n	8027afe <_strtod_l+0x366>
 8027aae:	dc24      	bgt.n	8027afa <_strtod_l+0x362>
 8027ab0:	2a49      	cmp	r2, #73	; 0x49
 8027ab2:	d024      	beq.n	8027afe <_strtod_l+0x366>
 8027ab4:	2a4e      	cmp	r2, #78	; 0x4e
 8027ab6:	f47f aed0 	bne.w	802785a <_strtod_l+0xc2>
 8027aba:	499b      	ldr	r1, [pc, #620]	; (8027d28 <_strtod_l+0x590>)
 8027abc:	a817      	add	r0, sp, #92	; 0x5c
 8027abe:	f002 f873 	bl	8029ba8 <__match>
 8027ac2:	2800      	cmp	r0, #0
 8027ac4:	f43f aec9 	beq.w	802785a <_strtod_l+0xc2>
 8027ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027aca:	781b      	ldrb	r3, [r3, #0]
 8027acc:	2b28      	cmp	r3, #40	; 0x28
 8027ace:	d12d      	bne.n	8027b2c <_strtod_l+0x394>
 8027ad0:	4996      	ldr	r1, [pc, #600]	; (8027d2c <_strtod_l+0x594>)
 8027ad2:	aa1a      	add	r2, sp, #104	; 0x68
 8027ad4:	a817      	add	r0, sp, #92	; 0x5c
 8027ad6:	f002 f87b 	bl	8029bd0 <__hexnan>
 8027ada:	2805      	cmp	r0, #5
 8027adc:	d126      	bne.n	8027b2c <_strtod_l+0x394>
 8027ade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027ae0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8027ae4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8027ae8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8027aec:	e698      	b.n	8027820 <_strtod_l+0x88>
 8027aee:	250a      	movs	r5, #10
 8027af0:	fb05 250c 	mla	r5, r5, ip, r2
 8027af4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8027af8:	e7b9      	b.n	8027a6e <_strtod_l+0x2d6>
 8027afa:	2a6e      	cmp	r2, #110	; 0x6e
 8027afc:	e7db      	b.n	8027ab6 <_strtod_l+0x31e>
 8027afe:	498c      	ldr	r1, [pc, #560]	; (8027d30 <_strtod_l+0x598>)
 8027b00:	a817      	add	r0, sp, #92	; 0x5c
 8027b02:	f002 f851 	bl	8029ba8 <__match>
 8027b06:	2800      	cmp	r0, #0
 8027b08:	f43f aea7 	beq.w	802785a <_strtod_l+0xc2>
 8027b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027b0e:	4989      	ldr	r1, [pc, #548]	; (8027d34 <_strtod_l+0x59c>)
 8027b10:	3b01      	subs	r3, #1
 8027b12:	a817      	add	r0, sp, #92	; 0x5c
 8027b14:	9317      	str	r3, [sp, #92]	; 0x5c
 8027b16:	f002 f847 	bl	8029ba8 <__match>
 8027b1a:	b910      	cbnz	r0, 8027b22 <_strtod_l+0x38a>
 8027b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027b1e:	3301      	adds	r3, #1
 8027b20:	9317      	str	r3, [sp, #92]	; 0x5c
 8027b22:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8027d48 <_strtod_l+0x5b0>
 8027b26:	f04f 0800 	mov.w	r8, #0
 8027b2a:	e679      	b.n	8027820 <_strtod_l+0x88>
 8027b2c:	4882      	ldr	r0, [pc, #520]	; (8027d38 <_strtod_l+0x5a0>)
 8027b2e:	f002 ffdb 	bl	802aae8 <nan>
 8027b32:	ed8d 0b04 	vstr	d0, [sp, #16]
 8027b36:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027b3a:	e671      	b.n	8027820 <_strtod_l+0x88>
 8027b3c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8027b40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027b44:	eba5 020b 	sub.w	r2, r5, fp
 8027b48:	2e00      	cmp	r6, #0
 8027b4a:	bf08      	it	eq
 8027b4c:	461e      	moveq	r6, r3
 8027b4e:	2b10      	cmp	r3, #16
 8027b50:	ed8d 7b08 	vstr	d7, [sp, #32]
 8027b54:	9206      	str	r2, [sp, #24]
 8027b56:	461a      	mov	r2, r3
 8027b58:	bfa8      	it	ge
 8027b5a:	2210      	movge	r2, #16
 8027b5c:	2b09      	cmp	r3, #9
 8027b5e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8027b62:	dd0e      	ble.n	8027b82 <_strtod_l+0x3ea>
 8027b64:	4975      	ldr	r1, [pc, #468]	; (8027d3c <_strtod_l+0x5a4>)
 8027b66:	eddd 7a04 	vldr	s15, [sp, #16]
 8027b6a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8027b6e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8027b72:	ed9d 5b08 	vldr	d5, [sp, #32]
 8027b76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027b7a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8027b7e:	ec59 8b17 	vmov	r8, r9, d7
 8027b82:	2b0f      	cmp	r3, #15
 8027b84:	dc37      	bgt.n	8027bf6 <_strtod_l+0x45e>
 8027b86:	9906      	ldr	r1, [sp, #24]
 8027b88:	2900      	cmp	r1, #0
 8027b8a:	f43f ae49 	beq.w	8027820 <_strtod_l+0x88>
 8027b8e:	dd23      	ble.n	8027bd8 <_strtod_l+0x440>
 8027b90:	2916      	cmp	r1, #22
 8027b92:	dc0b      	bgt.n	8027bac <_strtod_l+0x414>
 8027b94:	4b69      	ldr	r3, [pc, #420]	; (8027d3c <_strtod_l+0x5a4>)
 8027b96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8027b9a:	ed93 7b00 	vldr	d7, [r3]
 8027b9e:	ec49 8b16 	vmov	d6, r8, r9
 8027ba2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027ba6:	ec59 8b17 	vmov	r8, r9, d7
 8027baa:	e639      	b.n	8027820 <_strtod_l+0x88>
 8027bac:	9806      	ldr	r0, [sp, #24]
 8027bae:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8027bb2:	4281      	cmp	r1, r0
 8027bb4:	db1f      	blt.n	8027bf6 <_strtod_l+0x45e>
 8027bb6:	4a61      	ldr	r2, [pc, #388]	; (8027d3c <_strtod_l+0x5a4>)
 8027bb8:	f1c3 030f 	rsb	r3, r3, #15
 8027bbc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8027bc0:	ed91 7b00 	vldr	d7, [r1]
 8027bc4:	ec49 8b16 	vmov	d6, r8, r9
 8027bc8:	1ac3      	subs	r3, r0, r3
 8027bca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8027bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027bd2:	ed92 6b00 	vldr	d6, [r2]
 8027bd6:	e7e4      	b.n	8027ba2 <_strtod_l+0x40a>
 8027bd8:	9906      	ldr	r1, [sp, #24]
 8027bda:	3116      	adds	r1, #22
 8027bdc:	db0b      	blt.n	8027bf6 <_strtod_l+0x45e>
 8027bde:	4b57      	ldr	r3, [pc, #348]	; (8027d3c <_strtod_l+0x5a4>)
 8027be0:	ebab 0505 	sub.w	r5, fp, r5
 8027be4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8027be8:	ed95 7b00 	vldr	d7, [r5]
 8027bec:	ec49 8b16 	vmov	d6, r8, r9
 8027bf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027bf4:	e7d7      	b.n	8027ba6 <_strtod_l+0x40e>
 8027bf6:	9906      	ldr	r1, [sp, #24]
 8027bf8:	1a9a      	subs	r2, r3, r2
 8027bfa:	440a      	add	r2, r1
 8027bfc:	2a00      	cmp	r2, #0
 8027bfe:	dd74      	ble.n	8027cea <_strtod_l+0x552>
 8027c00:	f012 000f 	ands.w	r0, r2, #15
 8027c04:	d00a      	beq.n	8027c1c <_strtod_l+0x484>
 8027c06:	494d      	ldr	r1, [pc, #308]	; (8027d3c <_strtod_l+0x5a4>)
 8027c08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027c0c:	ed91 7b00 	vldr	d7, [r1]
 8027c10:	ec49 8b16 	vmov	d6, r8, r9
 8027c14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027c18:	ec59 8b17 	vmov	r8, r9, d7
 8027c1c:	f032 020f 	bics.w	r2, r2, #15
 8027c20:	d04f      	beq.n	8027cc2 <_strtod_l+0x52a>
 8027c22:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8027c26:	dd22      	ble.n	8027c6e <_strtod_l+0x4d6>
 8027c28:	2500      	movs	r5, #0
 8027c2a:	462e      	mov	r6, r5
 8027c2c:	950a      	str	r5, [sp, #40]	; 0x28
 8027c2e:	462f      	mov	r7, r5
 8027c30:	2322      	movs	r3, #34	; 0x22
 8027c32:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8027d48 <_strtod_l+0x5b0>
 8027c36:	6023      	str	r3, [r4, #0]
 8027c38:	f04f 0800 	mov.w	r8, #0
 8027c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	f43f adee 	beq.w	8027820 <_strtod_l+0x88>
 8027c44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027c46:	4620      	mov	r0, r4
 8027c48:	f002 f942 	bl	8029ed0 <_Bfree>
 8027c4c:	4639      	mov	r1, r7
 8027c4e:	4620      	mov	r0, r4
 8027c50:	f002 f93e 	bl	8029ed0 <_Bfree>
 8027c54:	4631      	mov	r1, r6
 8027c56:	4620      	mov	r0, r4
 8027c58:	f002 f93a 	bl	8029ed0 <_Bfree>
 8027c5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027c5e:	4620      	mov	r0, r4
 8027c60:	f002 f936 	bl	8029ed0 <_Bfree>
 8027c64:	4629      	mov	r1, r5
 8027c66:	4620      	mov	r0, r4
 8027c68:	f002 f932 	bl	8029ed0 <_Bfree>
 8027c6c:	e5d8      	b.n	8027820 <_strtod_l+0x88>
 8027c6e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8027c72:	2000      	movs	r0, #0
 8027c74:	4f32      	ldr	r7, [pc, #200]	; (8027d40 <_strtod_l+0x5a8>)
 8027c76:	1112      	asrs	r2, r2, #4
 8027c78:	4601      	mov	r1, r0
 8027c7a:	2a01      	cmp	r2, #1
 8027c7c:	dc24      	bgt.n	8027cc8 <_strtod_l+0x530>
 8027c7e:	b108      	cbz	r0, 8027c84 <_strtod_l+0x4ec>
 8027c80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027c84:	4a2e      	ldr	r2, [pc, #184]	; (8027d40 <_strtod_l+0x5a8>)
 8027c86:	482f      	ldr	r0, [pc, #188]	; (8027d44 <_strtod_l+0x5ac>)
 8027c88:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8027c8c:	ed91 7b00 	vldr	d7, [r1]
 8027c90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8027c94:	ec49 8b16 	vmov	d6, r8, r9
 8027c98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027c9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027ca0:	9905      	ldr	r1, [sp, #20]
 8027ca2:	4a29      	ldr	r2, [pc, #164]	; (8027d48 <_strtod_l+0x5b0>)
 8027ca4:	400a      	ands	r2, r1
 8027ca6:	4282      	cmp	r2, r0
 8027ca8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027cac:	d8bc      	bhi.n	8027c28 <_strtod_l+0x490>
 8027cae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8027cb2:	4282      	cmp	r2, r0
 8027cb4:	bf86      	itte	hi
 8027cb6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8027d4c <_strtod_l+0x5b4>
 8027cba:	f04f 38ff 	movhi.w	r8, #4294967295
 8027cbe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8027cc2:	2200      	movs	r2, #0
 8027cc4:	9204      	str	r2, [sp, #16]
 8027cc6:	e07f      	b.n	8027dc8 <_strtod_l+0x630>
 8027cc8:	f012 0f01 	tst.w	r2, #1
 8027ccc:	d00a      	beq.n	8027ce4 <_strtod_l+0x54c>
 8027cce:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8027cd2:	ed90 7b00 	vldr	d7, [r0]
 8027cd6:	ed9d 6b04 	vldr	d6, [sp, #16]
 8027cda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027cde:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027ce2:	2001      	movs	r0, #1
 8027ce4:	3101      	adds	r1, #1
 8027ce6:	1052      	asrs	r2, r2, #1
 8027ce8:	e7c7      	b.n	8027c7a <_strtod_l+0x4e2>
 8027cea:	d0ea      	beq.n	8027cc2 <_strtod_l+0x52a>
 8027cec:	4252      	negs	r2, r2
 8027cee:	f012 000f 	ands.w	r0, r2, #15
 8027cf2:	d00a      	beq.n	8027d0a <_strtod_l+0x572>
 8027cf4:	4911      	ldr	r1, [pc, #68]	; (8027d3c <_strtod_l+0x5a4>)
 8027cf6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027cfa:	ed91 7b00 	vldr	d7, [r1]
 8027cfe:	ec49 8b16 	vmov	d6, r8, r9
 8027d02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027d06:	ec59 8b17 	vmov	r8, r9, d7
 8027d0a:	1112      	asrs	r2, r2, #4
 8027d0c:	d0d9      	beq.n	8027cc2 <_strtod_l+0x52a>
 8027d0e:	2a1f      	cmp	r2, #31
 8027d10:	dd1e      	ble.n	8027d50 <_strtod_l+0x5b8>
 8027d12:	2500      	movs	r5, #0
 8027d14:	462e      	mov	r6, r5
 8027d16:	950a      	str	r5, [sp, #40]	; 0x28
 8027d18:	462f      	mov	r7, r5
 8027d1a:	2322      	movs	r3, #34	; 0x22
 8027d1c:	f04f 0800 	mov.w	r8, #0
 8027d20:	f04f 0900 	mov.w	r9, #0
 8027d24:	6023      	str	r3, [r4, #0]
 8027d26:	e789      	b.n	8027c3c <_strtod_l+0x4a4>
 8027d28:	0802ef3a 	.word	0x0802ef3a
 8027d2c:	0802ef7c 	.word	0x0802ef7c
 8027d30:	0802ef32 	.word	0x0802ef32
 8027d34:	0802f0bc 	.word	0x0802f0bc
 8027d38:	0802ef17 	.word	0x0802ef17
 8027d3c:	0802f2b8 	.word	0x0802f2b8
 8027d40:	0802f290 	.word	0x0802f290
 8027d44:	7ca00000 	.word	0x7ca00000
 8027d48:	7ff00000 	.word	0x7ff00000
 8027d4c:	7fefffff 	.word	0x7fefffff
 8027d50:	f012 0110 	ands.w	r1, r2, #16
 8027d54:	bf18      	it	ne
 8027d56:	216a      	movne	r1, #106	; 0x6a
 8027d58:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8027d5c:	9104      	str	r1, [sp, #16]
 8027d5e:	49c0      	ldr	r1, [pc, #768]	; (8028060 <_strtod_l+0x8c8>)
 8027d60:	2000      	movs	r0, #0
 8027d62:	07d7      	lsls	r7, r2, #31
 8027d64:	d508      	bpl.n	8027d78 <_strtod_l+0x5e0>
 8027d66:	ed9d 6b08 	vldr	d6, [sp, #32]
 8027d6a:	ed91 7b00 	vldr	d7, [r1]
 8027d6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027d72:	ed8d 7b08 	vstr	d7, [sp, #32]
 8027d76:	2001      	movs	r0, #1
 8027d78:	1052      	asrs	r2, r2, #1
 8027d7a:	f101 0108 	add.w	r1, r1, #8
 8027d7e:	d1f0      	bne.n	8027d62 <_strtod_l+0x5ca>
 8027d80:	b108      	cbz	r0, 8027d86 <_strtod_l+0x5ee>
 8027d82:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8027d86:	9a04      	ldr	r2, [sp, #16]
 8027d88:	b1ba      	cbz	r2, 8027dba <_strtod_l+0x622>
 8027d8a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8027d8e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8027d92:	2a00      	cmp	r2, #0
 8027d94:	4649      	mov	r1, r9
 8027d96:	dd10      	ble.n	8027dba <_strtod_l+0x622>
 8027d98:	2a1f      	cmp	r2, #31
 8027d9a:	f340 8132 	ble.w	8028002 <_strtod_l+0x86a>
 8027d9e:	2a34      	cmp	r2, #52	; 0x34
 8027da0:	bfde      	ittt	le
 8027da2:	3a20      	suble	r2, #32
 8027da4:	f04f 30ff 	movle.w	r0, #4294967295
 8027da8:	fa00 f202 	lslle.w	r2, r0, r2
 8027dac:	f04f 0800 	mov.w	r8, #0
 8027db0:	bfcc      	ite	gt
 8027db2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8027db6:	ea02 0901 	andle.w	r9, r2, r1
 8027dba:	ec49 8b17 	vmov	d7, r8, r9
 8027dbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dc6:	d0a4      	beq.n	8027d12 <_strtod_l+0x57a>
 8027dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027dca:	9200      	str	r2, [sp, #0]
 8027dcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027dce:	4632      	mov	r2, r6
 8027dd0:	4620      	mov	r0, r4
 8027dd2:	f002 f8e9 	bl	8029fa8 <__s2b>
 8027dd6:	900a      	str	r0, [sp, #40]	; 0x28
 8027dd8:	2800      	cmp	r0, #0
 8027dda:	f43f af25 	beq.w	8027c28 <_strtod_l+0x490>
 8027dde:	9b06      	ldr	r3, [sp, #24]
 8027de0:	ebab 0505 	sub.w	r5, fp, r5
 8027de4:	2b00      	cmp	r3, #0
 8027de6:	bfb4      	ite	lt
 8027de8:	462b      	movlt	r3, r5
 8027dea:	2300      	movge	r3, #0
 8027dec:	930c      	str	r3, [sp, #48]	; 0x30
 8027dee:	9b06      	ldr	r3, [sp, #24]
 8027df0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8028048 <_strtod_l+0x8b0>
 8027df4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8028050 <_strtod_l+0x8b8>
 8027df8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8028058 <_strtod_l+0x8c0>
 8027dfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027e00:	2500      	movs	r5, #0
 8027e02:	9312      	str	r3, [sp, #72]	; 0x48
 8027e04:	462e      	mov	r6, r5
 8027e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e08:	4620      	mov	r0, r4
 8027e0a:	6859      	ldr	r1, [r3, #4]
 8027e0c:	f002 f820 	bl	8029e50 <_Balloc>
 8027e10:	4607      	mov	r7, r0
 8027e12:	2800      	cmp	r0, #0
 8027e14:	f43f af0c 	beq.w	8027c30 <_strtod_l+0x498>
 8027e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e1a:	691a      	ldr	r2, [r3, #16]
 8027e1c:	3202      	adds	r2, #2
 8027e1e:	f103 010c 	add.w	r1, r3, #12
 8027e22:	0092      	lsls	r2, r2, #2
 8027e24:	300c      	adds	r0, #12
 8027e26:	f7fe fbc1 	bl	80265ac <memcpy>
 8027e2a:	ec49 8b10 	vmov	d0, r8, r9
 8027e2e:	aa1a      	add	r2, sp, #104	; 0x68
 8027e30:	a919      	add	r1, sp, #100	; 0x64
 8027e32:	4620      	mov	r0, r4
 8027e34:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8027e38:	f002 fbf2 	bl	802a620 <__d2b>
 8027e3c:	9018      	str	r0, [sp, #96]	; 0x60
 8027e3e:	2800      	cmp	r0, #0
 8027e40:	f43f aef6 	beq.w	8027c30 <_strtod_l+0x498>
 8027e44:	2101      	movs	r1, #1
 8027e46:	4620      	mov	r0, r4
 8027e48:	f002 f948 	bl	802a0dc <__i2b>
 8027e4c:	4606      	mov	r6, r0
 8027e4e:	2800      	cmp	r0, #0
 8027e50:	f43f aeee 	beq.w	8027c30 <_strtod_l+0x498>
 8027e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027e56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	bfab      	itete	ge
 8027e5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8027e5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8027e60:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8027e64:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8027e68:	bfac      	ite	ge
 8027e6a:	eb03 0b02 	addge.w	fp, r3, r2
 8027e6e:	eba2 0a03 	sublt.w	sl, r2, r3
 8027e72:	9a04      	ldr	r2, [sp, #16]
 8027e74:	1a9b      	subs	r3, r3, r2
 8027e76:	440b      	add	r3, r1
 8027e78:	4a7a      	ldr	r2, [pc, #488]	; (8028064 <_strtod_l+0x8cc>)
 8027e7a:	3b01      	subs	r3, #1
 8027e7c:	4293      	cmp	r3, r2
 8027e7e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8027e82:	f280 80d1 	bge.w	8028028 <_strtod_l+0x890>
 8027e86:	1ad2      	subs	r2, r2, r3
 8027e88:	2a1f      	cmp	r2, #31
 8027e8a:	eba1 0102 	sub.w	r1, r1, r2
 8027e8e:	f04f 0001 	mov.w	r0, #1
 8027e92:	f300 80bd 	bgt.w	8028010 <_strtod_l+0x878>
 8027e96:	fa00 f302 	lsl.w	r3, r0, r2
 8027e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8027e9c:	2300      	movs	r3, #0
 8027e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8027ea0:	eb0b 0301 	add.w	r3, fp, r1
 8027ea4:	9a04      	ldr	r2, [sp, #16]
 8027ea6:	459b      	cmp	fp, r3
 8027ea8:	448a      	add	sl, r1
 8027eaa:	4492      	add	sl, r2
 8027eac:	465a      	mov	r2, fp
 8027eae:	bfa8      	it	ge
 8027eb0:	461a      	movge	r2, r3
 8027eb2:	4552      	cmp	r2, sl
 8027eb4:	bfa8      	it	ge
 8027eb6:	4652      	movge	r2, sl
 8027eb8:	2a00      	cmp	r2, #0
 8027eba:	bfc2      	ittt	gt
 8027ebc:	1a9b      	subgt	r3, r3, r2
 8027ebe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8027ec2:	ebab 0b02 	subgt.w	fp, fp, r2
 8027ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027ec8:	2a00      	cmp	r2, #0
 8027eca:	dd18      	ble.n	8027efe <_strtod_l+0x766>
 8027ecc:	4631      	mov	r1, r6
 8027ece:	4620      	mov	r0, r4
 8027ed0:	9315      	str	r3, [sp, #84]	; 0x54
 8027ed2:	f002 f9bf 	bl	802a254 <__pow5mult>
 8027ed6:	4606      	mov	r6, r0
 8027ed8:	2800      	cmp	r0, #0
 8027eda:	f43f aea9 	beq.w	8027c30 <_strtod_l+0x498>
 8027ede:	4601      	mov	r1, r0
 8027ee0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027ee2:	4620      	mov	r0, r4
 8027ee4:	f002 f910 	bl	802a108 <__multiply>
 8027ee8:	9014      	str	r0, [sp, #80]	; 0x50
 8027eea:	2800      	cmp	r0, #0
 8027eec:	f43f aea0 	beq.w	8027c30 <_strtod_l+0x498>
 8027ef0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027ef2:	4620      	mov	r0, r4
 8027ef4:	f001 ffec 	bl	8029ed0 <_Bfree>
 8027ef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027efa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027efc:	9218      	str	r2, [sp, #96]	; 0x60
 8027efe:	2b00      	cmp	r3, #0
 8027f00:	f300 8097 	bgt.w	8028032 <_strtod_l+0x89a>
 8027f04:	9b06      	ldr	r3, [sp, #24]
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	dd08      	ble.n	8027f1c <_strtod_l+0x784>
 8027f0a:	4639      	mov	r1, r7
 8027f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027f0e:	4620      	mov	r0, r4
 8027f10:	f002 f9a0 	bl	802a254 <__pow5mult>
 8027f14:	4607      	mov	r7, r0
 8027f16:	2800      	cmp	r0, #0
 8027f18:	f43f ae8a 	beq.w	8027c30 <_strtod_l+0x498>
 8027f1c:	f1ba 0f00 	cmp.w	sl, #0
 8027f20:	dd08      	ble.n	8027f34 <_strtod_l+0x79c>
 8027f22:	4639      	mov	r1, r7
 8027f24:	4652      	mov	r2, sl
 8027f26:	4620      	mov	r0, r4
 8027f28:	f002 f9ee 	bl	802a308 <__lshift>
 8027f2c:	4607      	mov	r7, r0
 8027f2e:	2800      	cmp	r0, #0
 8027f30:	f43f ae7e 	beq.w	8027c30 <_strtod_l+0x498>
 8027f34:	f1bb 0f00 	cmp.w	fp, #0
 8027f38:	dd08      	ble.n	8027f4c <_strtod_l+0x7b4>
 8027f3a:	4631      	mov	r1, r6
 8027f3c:	465a      	mov	r2, fp
 8027f3e:	4620      	mov	r0, r4
 8027f40:	f002 f9e2 	bl	802a308 <__lshift>
 8027f44:	4606      	mov	r6, r0
 8027f46:	2800      	cmp	r0, #0
 8027f48:	f43f ae72 	beq.w	8027c30 <_strtod_l+0x498>
 8027f4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027f4e:	463a      	mov	r2, r7
 8027f50:	4620      	mov	r0, r4
 8027f52:	f002 fa61 	bl	802a418 <__mdiff>
 8027f56:	4605      	mov	r5, r0
 8027f58:	2800      	cmp	r0, #0
 8027f5a:	f43f ae69 	beq.w	8027c30 <_strtod_l+0x498>
 8027f5e:	2300      	movs	r3, #0
 8027f60:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8027f64:	60c3      	str	r3, [r0, #12]
 8027f66:	4631      	mov	r1, r6
 8027f68:	f002 fa3a 	bl	802a3e0 <__mcmp>
 8027f6c:	2800      	cmp	r0, #0
 8027f6e:	da7f      	bge.n	8028070 <_strtod_l+0x8d8>
 8027f70:	ea5a 0308 	orrs.w	r3, sl, r8
 8027f74:	f040 80a5 	bne.w	80280c2 <_strtod_l+0x92a>
 8027f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	f040 80a0 	bne.w	80280c2 <_strtod_l+0x92a>
 8027f82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027f86:	0d1b      	lsrs	r3, r3, #20
 8027f88:	051b      	lsls	r3, r3, #20
 8027f8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8027f8e:	f240 8098 	bls.w	80280c2 <_strtod_l+0x92a>
 8027f92:	696b      	ldr	r3, [r5, #20]
 8027f94:	b91b      	cbnz	r3, 8027f9e <_strtod_l+0x806>
 8027f96:	692b      	ldr	r3, [r5, #16]
 8027f98:	2b01      	cmp	r3, #1
 8027f9a:	f340 8092 	ble.w	80280c2 <_strtod_l+0x92a>
 8027f9e:	4629      	mov	r1, r5
 8027fa0:	2201      	movs	r2, #1
 8027fa2:	4620      	mov	r0, r4
 8027fa4:	f002 f9b0 	bl	802a308 <__lshift>
 8027fa8:	4631      	mov	r1, r6
 8027faa:	4605      	mov	r5, r0
 8027fac:	f002 fa18 	bl	802a3e0 <__mcmp>
 8027fb0:	2800      	cmp	r0, #0
 8027fb2:	f340 8086 	ble.w	80280c2 <_strtod_l+0x92a>
 8027fb6:	9904      	ldr	r1, [sp, #16]
 8027fb8:	4a2b      	ldr	r2, [pc, #172]	; (8028068 <_strtod_l+0x8d0>)
 8027fba:	464b      	mov	r3, r9
 8027fbc:	2900      	cmp	r1, #0
 8027fbe:	f000 80a1 	beq.w	8028104 <_strtod_l+0x96c>
 8027fc2:	ea02 0109 	and.w	r1, r2, r9
 8027fc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8027fca:	f300 809b 	bgt.w	8028104 <_strtod_l+0x96c>
 8027fce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8027fd2:	f77f aea2 	ble.w	8027d1a <_strtod_l+0x582>
 8027fd6:	4a25      	ldr	r2, [pc, #148]	; (802806c <_strtod_l+0x8d4>)
 8027fd8:	2300      	movs	r3, #0
 8027fda:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8027fde:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8027fe2:	ec49 8b17 	vmov	d7, r8, r9
 8027fe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027fea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027fee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8027ff2:	4313      	orrs	r3, r2
 8027ff4:	bf08      	it	eq
 8027ff6:	2322      	moveq	r3, #34	; 0x22
 8027ff8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027ffc:	bf08      	it	eq
 8027ffe:	6023      	streq	r3, [r4, #0]
 8028000:	e620      	b.n	8027c44 <_strtod_l+0x4ac>
 8028002:	f04f 31ff 	mov.w	r1, #4294967295
 8028006:	fa01 f202 	lsl.w	r2, r1, r2
 802800a:	ea02 0808 	and.w	r8, r2, r8
 802800e:	e6d4      	b.n	8027dba <_strtod_l+0x622>
 8028010:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8028014:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8028018:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 802801c:	33e2      	adds	r3, #226	; 0xe2
 802801e:	fa00 f303 	lsl.w	r3, r0, r3
 8028022:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8028026:	e73b      	b.n	8027ea0 <_strtod_l+0x708>
 8028028:	2000      	movs	r0, #0
 802802a:	2301      	movs	r3, #1
 802802c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8028030:	e736      	b.n	8027ea0 <_strtod_l+0x708>
 8028032:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028034:	461a      	mov	r2, r3
 8028036:	4620      	mov	r0, r4
 8028038:	f002 f966 	bl	802a308 <__lshift>
 802803c:	9018      	str	r0, [sp, #96]	; 0x60
 802803e:	2800      	cmp	r0, #0
 8028040:	f47f af60 	bne.w	8027f04 <_strtod_l+0x76c>
 8028044:	e5f4      	b.n	8027c30 <_strtod_l+0x498>
 8028046:	bf00      	nop
 8028048:	94a03595 	.word	0x94a03595
 802804c:	3fcfffff 	.word	0x3fcfffff
 8028050:	94a03595 	.word	0x94a03595
 8028054:	3fdfffff 	.word	0x3fdfffff
 8028058:	35afe535 	.word	0x35afe535
 802805c:	3fe00000 	.word	0x3fe00000
 8028060:	0802ef90 	.word	0x0802ef90
 8028064:	fffffc02 	.word	0xfffffc02
 8028068:	7ff00000 	.word	0x7ff00000
 802806c:	39500000 	.word	0x39500000
 8028070:	46cb      	mov	fp, r9
 8028072:	d165      	bne.n	8028140 <_strtod_l+0x9a8>
 8028074:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028078:	f1ba 0f00 	cmp.w	sl, #0
 802807c:	d02a      	beq.n	80280d4 <_strtod_l+0x93c>
 802807e:	4aaa      	ldr	r2, [pc, #680]	; (8028328 <_strtod_l+0xb90>)
 8028080:	4293      	cmp	r3, r2
 8028082:	d12b      	bne.n	80280dc <_strtod_l+0x944>
 8028084:	9b04      	ldr	r3, [sp, #16]
 8028086:	4641      	mov	r1, r8
 8028088:	b1fb      	cbz	r3, 80280ca <_strtod_l+0x932>
 802808a:	4aa8      	ldr	r2, [pc, #672]	; (802832c <_strtod_l+0xb94>)
 802808c:	ea09 0202 	and.w	r2, r9, r2
 8028090:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8028094:	f04f 30ff 	mov.w	r0, #4294967295
 8028098:	d81a      	bhi.n	80280d0 <_strtod_l+0x938>
 802809a:	0d12      	lsrs	r2, r2, #20
 802809c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80280a0:	fa00 f303 	lsl.w	r3, r0, r3
 80280a4:	4299      	cmp	r1, r3
 80280a6:	d119      	bne.n	80280dc <_strtod_l+0x944>
 80280a8:	4ba1      	ldr	r3, [pc, #644]	; (8028330 <_strtod_l+0xb98>)
 80280aa:	459b      	cmp	fp, r3
 80280ac:	d102      	bne.n	80280b4 <_strtod_l+0x91c>
 80280ae:	3101      	adds	r1, #1
 80280b0:	f43f adbe 	beq.w	8027c30 <_strtod_l+0x498>
 80280b4:	4b9d      	ldr	r3, [pc, #628]	; (802832c <_strtod_l+0xb94>)
 80280b6:	ea0b 0303 	and.w	r3, fp, r3
 80280ba:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80280be:	f04f 0800 	mov.w	r8, #0
 80280c2:	9b04      	ldr	r3, [sp, #16]
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d186      	bne.n	8027fd6 <_strtod_l+0x83e>
 80280c8:	e5bc      	b.n	8027c44 <_strtod_l+0x4ac>
 80280ca:	f04f 33ff 	mov.w	r3, #4294967295
 80280ce:	e7e9      	b.n	80280a4 <_strtod_l+0x90c>
 80280d0:	4603      	mov	r3, r0
 80280d2:	e7e7      	b.n	80280a4 <_strtod_l+0x90c>
 80280d4:	ea53 0308 	orrs.w	r3, r3, r8
 80280d8:	f43f af6d 	beq.w	8027fb6 <_strtod_l+0x81e>
 80280dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80280de:	b1db      	cbz	r3, 8028118 <_strtod_l+0x980>
 80280e0:	ea13 0f0b 	tst.w	r3, fp
 80280e4:	d0ed      	beq.n	80280c2 <_strtod_l+0x92a>
 80280e6:	9a04      	ldr	r2, [sp, #16]
 80280e8:	4640      	mov	r0, r8
 80280ea:	4649      	mov	r1, r9
 80280ec:	f1ba 0f00 	cmp.w	sl, #0
 80280f0:	d016      	beq.n	8028120 <_strtod_l+0x988>
 80280f2:	f7ff fb35 	bl	8027760 <sulp>
 80280f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80280fa:	ee37 7b00 	vadd.f64	d7, d7, d0
 80280fe:	ec59 8b17 	vmov	r8, r9, d7
 8028102:	e7de      	b.n	80280c2 <_strtod_l+0x92a>
 8028104:	4013      	ands	r3, r2
 8028106:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802810a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802810e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8028112:	f04f 38ff 	mov.w	r8, #4294967295
 8028116:	e7d4      	b.n	80280c2 <_strtod_l+0x92a>
 8028118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802811a:	ea13 0f08 	tst.w	r3, r8
 802811e:	e7e1      	b.n	80280e4 <_strtod_l+0x94c>
 8028120:	f7ff fb1e 	bl	8027760 <sulp>
 8028124:	ed9d 7b08 	vldr	d7, [sp, #32]
 8028128:	ee37 7b40 	vsub.f64	d7, d7, d0
 802812c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028130:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028138:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 802813c:	d1c1      	bne.n	80280c2 <_strtod_l+0x92a>
 802813e:	e5ec      	b.n	8027d1a <_strtod_l+0x582>
 8028140:	4631      	mov	r1, r6
 8028142:	4628      	mov	r0, r5
 8028144:	f002 fac8 	bl	802a6d8 <__ratio>
 8028148:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802814c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8028150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028154:	d867      	bhi.n	8028226 <_strtod_l+0xa8e>
 8028156:	f1ba 0f00 	cmp.w	sl, #0
 802815a:	d044      	beq.n	80281e6 <_strtod_l+0xa4e>
 802815c:	4b75      	ldr	r3, [pc, #468]	; (8028334 <_strtod_l+0xb9c>)
 802815e:	2200      	movs	r2, #0
 8028160:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8028164:	4971      	ldr	r1, [pc, #452]	; (802832c <_strtod_l+0xb94>)
 8028166:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8028340 <_strtod_l+0xba8>
 802816a:	ea0b 0001 	and.w	r0, fp, r1
 802816e:	4560      	cmp	r0, ip
 8028170:	900d      	str	r0, [sp, #52]	; 0x34
 8028172:	f040 808b 	bne.w	802828c <_strtod_l+0xaf4>
 8028176:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802817a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 802817e:	ec49 8b10 	vmov	d0, r8, r9
 8028182:	ec43 2b1c 	vmov	d12, r2, r3
 8028186:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802818a:	f002 f9cd 	bl	802a528 <__ulp>
 802818e:	ec49 8b1d 	vmov	d13, r8, r9
 8028192:	eeac db00 	vfma.f64	d13, d12, d0
 8028196:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 802819a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802819c:	4963      	ldr	r1, [pc, #396]	; (802832c <_strtod_l+0xb94>)
 802819e:	4a66      	ldr	r2, [pc, #408]	; (8028338 <_strtod_l+0xba0>)
 80281a0:	4019      	ands	r1, r3
 80281a2:	4291      	cmp	r1, r2
 80281a4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80281a8:	d947      	bls.n	802823a <_strtod_l+0xaa2>
 80281aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80281b0:	4293      	cmp	r3, r2
 80281b2:	d103      	bne.n	80281bc <_strtod_l+0xa24>
 80281b4:	9b08      	ldr	r3, [sp, #32]
 80281b6:	3301      	adds	r3, #1
 80281b8:	f43f ad3a 	beq.w	8027c30 <_strtod_l+0x498>
 80281bc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8028330 <_strtod_l+0xb98>
 80281c0:	f04f 38ff 	mov.w	r8, #4294967295
 80281c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80281c6:	4620      	mov	r0, r4
 80281c8:	f001 fe82 	bl	8029ed0 <_Bfree>
 80281cc:	4639      	mov	r1, r7
 80281ce:	4620      	mov	r0, r4
 80281d0:	f001 fe7e 	bl	8029ed0 <_Bfree>
 80281d4:	4631      	mov	r1, r6
 80281d6:	4620      	mov	r0, r4
 80281d8:	f001 fe7a 	bl	8029ed0 <_Bfree>
 80281dc:	4629      	mov	r1, r5
 80281de:	4620      	mov	r0, r4
 80281e0:	f001 fe76 	bl	8029ed0 <_Bfree>
 80281e4:	e60f      	b.n	8027e06 <_strtod_l+0x66e>
 80281e6:	f1b8 0f00 	cmp.w	r8, #0
 80281ea:	d112      	bne.n	8028212 <_strtod_l+0xa7a>
 80281ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80281f0:	b9b3      	cbnz	r3, 8028220 <_strtod_l+0xa88>
 80281f2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80281f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80281fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8028202:	d401      	bmi.n	8028208 <_strtod_l+0xa70>
 8028204:	ee20 8b08 	vmul.f64	d8, d0, d8
 8028208:	eeb1 7b48 	vneg.f64	d7, d8
 802820c:	ec53 2b17 	vmov	r2, r3, d7
 8028210:	e7a8      	b.n	8028164 <_strtod_l+0x9cc>
 8028212:	f1b8 0f01 	cmp.w	r8, #1
 8028216:	d103      	bne.n	8028220 <_strtod_l+0xa88>
 8028218:	f1b9 0f00 	cmp.w	r9, #0
 802821c:	f43f ad7d 	beq.w	8027d1a <_strtod_l+0x582>
 8028220:	4b46      	ldr	r3, [pc, #280]	; (802833c <_strtod_l+0xba4>)
 8028222:	2200      	movs	r2, #0
 8028224:	e79c      	b.n	8028160 <_strtod_l+0x9c8>
 8028226:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 802822a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802822e:	f1ba 0f00 	cmp.w	sl, #0
 8028232:	d0e9      	beq.n	8028208 <_strtod_l+0xa70>
 8028234:	ec53 2b18 	vmov	r2, r3, d8
 8028238:	e794      	b.n	8028164 <_strtod_l+0x9cc>
 802823a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802823e:	9b04      	ldr	r3, [sp, #16]
 8028240:	2b00      	cmp	r3, #0
 8028242:	d1bf      	bne.n	80281c4 <_strtod_l+0xa2c>
 8028244:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8028248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802824a:	0d1b      	lsrs	r3, r3, #20
 802824c:	051b      	lsls	r3, r3, #20
 802824e:	429a      	cmp	r2, r3
 8028250:	d1b8      	bne.n	80281c4 <_strtod_l+0xa2c>
 8028252:	ec51 0b18 	vmov	r0, r1, d8
 8028256:	f7d8 fa1f 	bl	8000698 <__aeabi_d2lz>
 802825a:	f7d8 f9d7 	bl	800060c <__aeabi_l2d>
 802825e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028262:	ec41 0b17 	vmov	d7, r0, r1
 8028266:	ea43 0308 	orr.w	r3, r3, r8
 802826a:	ea53 030a 	orrs.w	r3, r3, sl
 802826e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8028272:	d03e      	beq.n	80282f2 <_strtod_l+0xb5a>
 8028274:	eeb4 8bca 	vcmpe.f64	d8, d10
 8028278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802827c:	f53f ace2 	bmi.w	8027c44 <_strtod_l+0x4ac>
 8028280:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8028284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028288:	dd9c      	ble.n	80281c4 <_strtod_l+0xa2c>
 802828a:	e4db      	b.n	8027c44 <_strtod_l+0x4ac>
 802828c:	9904      	ldr	r1, [sp, #16]
 802828e:	b301      	cbz	r1, 80282d2 <_strtod_l+0xb3a>
 8028290:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028292:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8028296:	d81c      	bhi.n	80282d2 <_strtod_l+0xb3a>
 8028298:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8028320 <_strtod_l+0xb88>
 802829c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80282a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282a4:	d811      	bhi.n	80282ca <_strtod_l+0xb32>
 80282a6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80282aa:	ee18 3a10 	vmov	r3, s16
 80282ae:	2b01      	cmp	r3, #1
 80282b0:	bf38      	it	cc
 80282b2:	2301      	movcc	r3, #1
 80282b4:	ee08 3a10 	vmov	s16, r3
 80282b8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80282bc:	f1ba 0f00 	cmp.w	sl, #0
 80282c0:	d114      	bne.n	80282ec <_strtod_l+0xb54>
 80282c2:	eeb1 7b48 	vneg.f64	d7, d8
 80282c6:	ec53 2b17 	vmov	r2, r3, d7
 80282ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80282cc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80282d0:	1a0b      	subs	r3, r1, r0
 80282d2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80282d6:	ec43 2b1c 	vmov	d12, r2, r3
 80282da:	f002 f925 	bl	802a528 <__ulp>
 80282de:	ed9d 7b08 	vldr	d7, [sp, #32]
 80282e2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80282e6:	ec59 8b17 	vmov	r8, r9, d7
 80282ea:	e7a8      	b.n	802823e <_strtod_l+0xaa6>
 80282ec:	ec53 2b18 	vmov	r2, r3, d8
 80282f0:	e7eb      	b.n	80282ca <_strtod_l+0xb32>
 80282f2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80282f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282fa:	f57f af63 	bpl.w	80281c4 <_strtod_l+0xa2c>
 80282fe:	e4a1      	b.n	8027c44 <_strtod_l+0x4ac>
 8028300:	2300      	movs	r3, #0
 8028302:	930b      	str	r3, [sp, #44]	; 0x2c
 8028304:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028308:	6013      	str	r3, [r2, #0]
 802830a:	f7ff ba8d 	b.w	8027828 <_strtod_l+0x90>
 802830e:	2a65      	cmp	r2, #101	; 0x65
 8028310:	f43f ab89 	beq.w	8027a26 <_strtod_l+0x28e>
 8028314:	2a45      	cmp	r2, #69	; 0x45
 8028316:	f43f ab86 	beq.w	8027a26 <_strtod_l+0x28e>
 802831a:	2101      	movs	r1, #1
 802831c:	f7ff bbbe 	b.w	8027a9c <_strtod_l+0x304>
 8028320:	ffc00000 	.word	0xffc00000
 8028324:	41dfffff 	.word	0x41dfffff
 8028328:	000fffff 	.word	0x000fffff
 802832c:	7ff00000 	.word	0x7ff00000
 8028330:	7fefffff 	.word	0x7fefffff
 8028334:	3ff00000 	.word	0x3ff00000
 8028338:	7c9fffff 	.word	0x7c9fffff
 802833c:	bff00000 	.word	0xbff00000
 8028340:	7fe00000 	.word	0x7fe00000

08028344 <_strtod_r>:
 8028344:	4b01      	ldr	r3, [pc, #4]	; (802834c <_strtod_r+0x8>)
 8028346:	f7ff ba27 	b.w	8027798 <_strtod_l>
 802834a:	bf00      	nop
 802834c:	200000e8 	.word	0x200000e8

08028350 <_strtol_l.isra.0>:
 8028350:	2b01      	cmp	r3, #1
 8028352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028356:	d001      	beq.n	802835c <_strtol_l.isra.0+0xc>
 8028358:	2b24      	cmp	r3, #36	; 0x24
 802835a:	d906      	bls.n	802836a <_strtol_l.isra.0+0x1a>
 802835c:	f7fe f8da 	bl	8026514 <__errno>
 8028360:	2316      	movs	r3, #22
 8028362:	6003      	str	r3, [r0, #0]
 8028364:	2000      	movs	r0, #0
 8028366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802836a:	4f3a      	ldr	r7, [pc, #232]	; (8028454 <_strtol_l.isra.0+0x104>)
 802836c:	468e      	mov	lr, r1
 802836e:	4676      	mov	r6, lr
 8028370:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8028374:	5de5      	ldrb	r5, [r4, r7]
 8028376:	f015 0508 	ands.w	r5, r5, #8
 802837a:	d1f8      	bne.n	802836e <_strtol_l.isra.0+0x1e>
 802837c:	2c2d      	cmp	r4, #45	; 0x2d
 802837e:	d134      	bne.n	80283ea <_strtol_l.isra.0+0x9a>
 8028380:	f89e 4000 	ldrb.w	r4, [lr]
 8028384:	f04f 0801 	mov.w	r8, #1
 8028388:	f106 0e02 	add.w	lr, r6, #2
 802838c:	2b00      	cmp	r3, #0
 802838e:	d05c      	beq.n	802844a <_strtol_l.isra.0+0xfa>
 8028390:	2b10      	cmp	r3, #16
 8028392:	d10c      	bne.n	80283ae <_strtol_l.isra.0+0x5e>
 8028394:	2c30      	cmp	r4, #48	; 0x30
 8028396:	d10a      	bne.n	80283ae <_strtol_l.isra.0+0x5e>
 8028398:	f89e 4000 	ldrb.w	r4, [lr]
 802839c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80283a0:	2c58      	cmp	r4, #88	; 0x58
 80283a2:	d14d      	bne.n	8028440 <_strtol_l.isra.0+0xf0>
 80283a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80283a8:	2310      	movs	r3, #16
 80283aa:	f10e 0e02 	add.w	lr, lr, #2
 80283ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80283b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80283b6:	2600      	movs	r6, #0
 80283b8:	fbbc f9f3 	udiv	r9, ip, r3
 80283bc:	4635      	mov	r5, r6
 80283be:	fb03 ca19 	mls	sl, r3, r9, ip
 80283c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80283c6:	2f09      	cmp	r7, #9
 80283c8:	d818      	bhi.n	80283fc <_strtol_l.isra.0+0xac>
 80283ca:	463c      	mov	r4, r7
 80283cc:	42a3      	cmp	r3, r4
 80283ce:	dd24      	ble.n	802841a <_strtol_l.isra.0+0xca>
 80283d0:	2e00      	cmp	r6, #0
 80283d2:	db1f      	blt.n	8028414 <_strtol_l.isra.0+0xc4>
 80283d4:	45a9      	cmp	r9, r5
 80283d6:	d31d      	bcc.n	8028414 <_strtol_l.isra.0+0xc4>
 80283d8:	d101      	bne.n	80283de <_strtol_l.isra.0+0x8e>
 80283da:	45a2      	cmp	sl, r4
 80283dc:	db1a      	blt.n	8028414 <_strtol_l.isra.0+0xc4>
 80283de:	fb05 4503 	mla	r5, r5, r3, r4
 80283e2:	2601      	movs	r6, #1
 80283e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80283e8:	e7eb      	b.n	80283c2 <_strtol_l.isra.0+0x72>
 80283ea:	2c2b      	cmp	r4, #43	; 0x2b
 80283ec:	bf08      	it	eq
 80283ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80283f2:	46a8      	mov	r8, r5
 80283f4:	bf08      	it	eq
 80283f6:	f106 0e02 	addeq.w	lr, r6, #2
 80283fa:	e7c7      	b.n	802838c <_strtol_l.isra.0+0x3c>
 80283fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8028400:	2f19      	cmp	r7, #25
 8028402:	d801      	bhi.n	8028408 <_strtol_l.isra.0+0xb8>
 8028404:	3c37      	subs	r4, #55	; 0x37
 8028406:	e7e1      	b.n	80283cc <_strtol_l.isra.0+0x7c>
 8028408:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802840c:	2f19      	cmp	r7, #25
 802840e:	d804      	bhi.n	802841a <_strtol_l.isra.0+0xca>
 8028410:	3c57      	subs	r4, #87	; 0x57
 8028412:	e7db      	b.n	80283cc <_strtol_l.isra.0+0x7c>
 8028414:	f04f 36ff 	mov.w	r6, #4294967295
 8028418:	e7e4      	b.n	80283e4 <_strtol_l.isra.0+0x94>
 802841a:	2e00      	cmp	r6, #0
 802841c:	da05      	bge.n	802842a <_strtol_l.isra.0+0xda>
 802841e:	2322      	movs	r3, #34	; 0x22
 8028420:	6003      	str	r3, [r0, #0]
 8028422:	4665      	mov	r5, ip
 8028424:	b942      	cbnz	r2, 8028438 <_strtol_l.isra.0+0xe8>
 8028426:	4628      	mov	r0, r5
 8028428:	e79d      	b.n	8028366 <_strtol_l.isra.0+0x16>
 802842a:	f1b8 0f00 	cmp.w	r8, #0
 802842e:	d000      	beq.n	8028432 <_strtol_l.isra.0+0xe2>
 8028430:	426d      	negs	r5, r5
 8028432:	2a00      	cmp	r2, #0
 8028434:	d0f7      	beq.n	8028426 <_strtol_l.isra.0+0xd6>
 8028436:	b10e      	cbz	r6, 802843c <_strtol_l.isra.0+0xec>
 8028438:	f10e 31ff 	add.w	r1, lr, #4294967295
 802843c:	6011      	str	r1, [r2, #0]
 802843e:	e7f2      	b.n	8028426 <_strtol_l.isra.0+0xd6>
 8028440:	2430      	movs	r4, #48	; 0x30
 8028442:	2b00      	cmp	r3, #0
 8028444:	d1b3      	bne.n	80283ae <_strtol_l.isra.0+0x5e>
 8028446:	2308      	movs	r3, #8
 8028448:	e7b1      	b.n	80283ae <_strtol_l.isra.0+0x5e>
 802844a:	2c30      	cmp	r4, #48	; 0x30
 802844c:	d0a4      	beq.n	8028398 <_strtol_l.isra.0+0x48>
 802844e:	230a      	movs	r3, #10
 8028450:	e7ad      	b.n	80283ae <_strtol_l.isra.0+0x5e>
 8028452:	bf00      	nop
 8028454:	0802efb9 	.word	0x0802efb9

08028458 <_strtol_r>:
 8028458:	f7ff bf7a 	b.w	8028350 <_strtol_l.isra.0>

0802845c <__swbuf_r>:
 802845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802845e:	460e      	mov	r6, r1
 8028460:	4614      	mov	r4, r2
 8028462:	4605      	mov	r5, r0
 8028464:	b118      	cbz	r0, 802846e <__swbuf_r+0x12>
 8028466:	6983      	ldr	r3, [r0, #24]
 8028468:	b90b      	cbnz	r3, 802846e <__swbuf_r+0x12>
 802846a:	f001 f841 	bl	80294f0 <__sinit>
 802846e:	4b21      	ldr	r3, [pc, #132]	; (80284f4 <__swbuf_r+0x98>)
 8028470:	429c      	cmp	r4, r3
 8028472:	d12b      	bne.n	80284cc <__swbuf_r+0x70>
 8028474:	686c      	ldr	r4, [r5, #4]
 8028476:	69a3      	ldr	r3, [r4, #24]
 8028478:	60a3      	str	r3, [r4, #8]
 802847a:	89a3      	ldrh	r3, [r4, #12]
 802847c:	071a      	lsls	r2, r3, #28
 802847e:	d52f      	bpl.n	80284e0 <__swbuf_r+0x84>
 8028480:	6923      	ldr	r3, [r4, #16]
 8028482:	b36b      	cbz	r3, 80284e0 <__swbuf_r+0x84>
 8028484:	6923      	ldr	r3, [r4, #16]
 8028486:	6820      	ldr	r0, [r4, #0]
 8028488:	1ac0      	subs	r0, r0, r3
 802848a:	6963      	ldr	r3, [r4, #20]
 802848c:	b2f6      	uxtb	r6, r6
 802848e:	4283      	cmp	r3, r0
 8028490:	4637      	mov	r7, r6
 8028492:	dc04      	bgt.n	802849e <__swbuf_r+0x42>
 8028494:	4621      	mov	r1, r4
 8028496:	4628      	mov	r0, r5
 8028498:	f000 ff96 	bl	80293c8 <_fflush_r>
 802849c:	bb30      	cbnz	r0, 80284ec <__swbuf_r+0x90>
 802849e:	68a3      	ldr	r3, [r4, #8]
 80284a0:	3b01      	subs	r3, #1
 80284a2:	60a3      	str	r3, [r4, #8]
 80284a4:	6823      	ldr	r3, [r4, #0]
 80284a6:	1c5a      	adds	r2, r3, #1
 80284a8:	6022      	str	r2, [r4, #0]
 80284aa:	701e      	strb	r6, [r3, #0]
 80284ac:	6963      	ldr	r3, [r4, #20]
 80284ae:	3001      	adds	r0, #1
 80284b0:	4283      	cmp	r3, r0
 80284b2:	d004      	beq.n	80284be <__swbuf_r+0x62>
 80284b4:	89a3      	ldrh	r3, [r4, #12]
 80284b6:	07db      	lsls	r3, r3, #31
 80284b8:	d506      	bpl.n	80284c8 <__swbuf_r+0x6c>
 80284ba:	2e0a      	cmp	r6, #10
 80284bc:	d104      	bne.n	80284c8 <__swbuf_r+0x6c>
 80284be:	4621      	mov	r1, r4
 80284c0:	4628      	mov	r0, r5
 80284c2:	f000 ff81 	bl	80293c8 <_fflush_r>
 80284c6:	b988      	cbnz	r0, 80284ec <__swbuf_r+0x90>
 80284c8:	4638      	mov	r0, r7
 80284ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80284cc:	4b0a      	ldr	r3, [pc, #40]	; (80284f8 <__swbuf_r+0x9c>)
 80284ce:	429c      	cmp	r4, r3
 80284d0:	d101      	bne.n	80284d6 <__swbuf_r+0x7a>
 80284d2:	68ac      	ldr	r4, [r5, #8]
 80284d4:	e7cf      	b.n	8028476 <__swbuf_r+0x1a>
 80284d6:	4b09      	ldr	r3, [pc, #36]	; (80284fc <__swbuf_r+0xa0>)
 80284d8:	429c      	cmp	r4, r3
 80284da:	bf08      	it	eq
 80284dc:	68ec      	ldreq	r4, [r5, #12]
 80284de:	e7ca      	b.n	8028476 <__swbuf_r+0x1a>
 80284e0:	4621      	mov	r1, r4
 80284e2:	4628      	mov	r0, r5
 80284e4:	f000 f80c 	bl	8028500 <__swsetup_r>
 80284e8:	2800      	cmp	r0, #0
 80284ea:	d0cb      	beq.n	8028484 <__swbuf_r+0x28>
 80284ec:	f04f 37ff 	mov.w	r7, #4294967295
 80284f0:	e7ea      	b.n	80284c8 <__swbuf_r+0x6c>
 80284f2:	bf00      	nop
 80284f4:	0802f170 	.word	0x0802f170
 80284f8:	0802f190 	.word	0x0802f190
 80284fc:	0802f150 	.word	0x0802f150

08028500 <__swsetup_r>:
 8028500:	4b32      	ldr	r3, [pc, #200]	; (80285cc <__swsetup_r+0xcc>)
 8028502:	b570      	push	{r4, r5, r6, lr}
 8028504:	681d      	ldr	r5, [r3, #0]
 8028506:	4606      	mov	r6, r0
 8028508:	460c      	mov	r4, r1
 802850a:	b125      	cbz	r5, 8028516 <__swsetup_r+0x16>
 802850c:	69ab      	ldr	r3, [r5, #24]
 802850e:	b913      	cbnz	r3, 8028516 <__swsetup_r+0x16>
 8028510:	4628      	mov	r0, r5
 8028512:	f000 ffed 	bl	80294f0 <__sinit>
 8028516:	4b2e      	ldr	r3, [pc, #184]	; (80285d0 <__swsetup_r+0xd0>)
 8028518:	429c      	cmp	r4, r3
 802851a:	d10f      	bne.n	802853c <__swsetup_r+0x3c>
 802851c:	686c      	ldr	r4, [r5, #4]
 802851e:	89a3      	ldrh	r3, [r4, #12]
 8028520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028524:	0719      	lsls	r1, r3, #28
 8028526:	d42c      	bmi.n	8028582 <__swsetup_r+0x82>
 8028528:	06dd      	lsls	r5, r3, #27
 802852a:	d411      	bmi.n	8028550 <__swsetup_r+0x50>
 802852c:	2309      	movs	r3, #9
 802852e:	6033      	str	r3, [r6, #0]
 8028530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028534:	81a3      	strh	r3, [r4, #12]
 8028536:	f04f 30ff 	mov.w	r0, #4294967295
 802853a:	e03e      	b.n	80285ba <__swsetup_r+0xba>
 802853c:	4b25      	ldr	r3, [pc, #148]	; (80285d4 <__swsetup_r+0xd4>)
 802853e:	429c      	cmp	r4, r3
 8028540:	d101      	bne.n	8028546 <__swsetup_r+0x46>
 8028542:	68ac      	ldr	r4, [r5, #8]
 8028544:	e7eb      	b.n	802851e <__swsetup_r+0x1e>
 8028546:	4b24      	ldr	r3, [pc, #144]	; (80285d8 <__swsetup_r+0xd8>)
 8028548:	429c      	cmp	r4, r3
 802854a:	bf08      	it	eq
 802854c:	68ec      	ldreq	r4, [r5, #12]
 802854e:	e7e6      	b.n	802851e <__swsetup_r+0x1e>
 8028550:	0758      	lsls	r0, r3, #29
 8028552:	d512      	bpl.n	802857a <__swsetup_r+0x7a>
 8028554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028556:	b141      	cbz	r1, 802856a <__swsetup_r+0x6a>
 8028558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802855c:	4299      	cmp	r1, r3
 802855e:	d002      	beq.n	8028566 <__swsetup_r+0x66>
 8028560:	4630      	mov	r0, r6
 8028562:	f7fe f839 	bl	80265d8 <_free_r>
 8028566:	2300      	movs	r3, #0
 8028568:	6363      	str	r3, [r4, #52]	; 0x34
 802856a:	89a3      	ldrh	r3, [r4, #12]
 802856c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028570:	81a3      	strh	r3, [r4, #12]
 8028572:	2300      	movs	r3, #0
 8028574:	6063      	str	r3, [r4, #4]
 8028576:	6923      	ldr	r3, [r4, #16]
 8028578:	6023      	str	r3, [r4, #0]
 802857a:	89a3      	ldrh	r3, [r4, #12]
 802857c:	f043 0308 	orr.w	r3, r3, #8
 8028580:	81a3      	strh	r3, [r4, #12]
 8028582:	6923      	ldr	r3, [r4, #16]
 8028584:	b94b      	cbnz	r3, 802859a <__swsetup_r+0x9a>
 8028586:	89a3      	ldrh	r3, [r4, #12]
 8028588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802858c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028590:	d003      	beq.n	802859a <__swsetup_r+0x9a>
 8028592:	4621      	mov	r1, r4
 8028594:	4630      	mov	r0, r6
 8028596:	f001 fbe3 	bl	8029d60 <__smakebuf_r>
 802859a:	89a0      	ldrh	r0, [r4, #12]
 802859c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80285a0:	f010 0301 	ands.w	r3, r0, #1
 80285a4:	d00a      	beq.n	80285bc <__swsetup_r+0xbc>
 80285a6:	2300      	movs	r3, #0
 80285a8:	60a3      	str	r3, [r4, #8]
 80285aa:	6963      	ldr	r3, [r4, #20]
 80285ac:	425b      	negs	r3, r3
 80285ae:	61a3      	str	r3, [r4, #24]
 80285b0:	6923      	ldr	r3, [r4, #16]
 80285b2:	b943      	cbnz	r3, 80285c6 <__swsetup_r+0xc6>
 80285b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80285b8:	d1ba      	bne.n	8028530 <__swsetup_r+0x30>
 80285ba:	bd70      	pop	{r4, r5, r6, pc}
 80285bc:	0781      	lsls	r1, r0, #30
 80285be:	bf58      	it	pl
 80285c0:	6963      	ldrpl	r3, [r4, #20]
 80285c2:	60a3      	str	r3, [r4, #8]
 80285c4:	e7f4      	b.n	80285b0 <__swsetup_r+0xb0>
 80285c6:	2000      	movs	r0, #0
 80285c8:	e7f7      	b.n	80285ba <__swsetup_r+0xba>
 80285ca:	bf00      	nop
 80285cc:	2000007c 	.word	0x2000007c
 80285d0:	0802f170 	.word	0x0802f170
 80285d4:	0802f190 	.word	0x0802f190
 80285d8:	0802f150 	.word	0x0802f150

080285dc <__register_exitproc>:
 80285dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80285e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802869c <__register_exitproc+0xc0>
 80285e4:	4606      	mov	r6, r0
 80285e6:	f8d8 0000 	ldr.w	r0, [r8]
 80285ea:	461f      	mov	r7, r3
 80285ec:	460d      	mov	r5, r1
 80285ee:	4691      	mov	r9, r2
 80285f0:	f001 fb8f 	bl	8029d12 <__retarget_lock_acquire_recursive>
 80285f4:	4b25      	ldr	r3, [pc, #148]	; (802868c <__register_exitproc+0xb0>)
 80285f6:	681c      	ldr	r4, [r3, #0]
 80285f8:	b934      	cbnz	r4, 8028608 <__register_exitproc+0x2c>
 80285fa:	4c25      	ldr	r4, [pc, #148]	; (8028690 <__register_exitproc+0xb4>)
 80285fc:	601c      	str	r4, [r3, #0]
 80285fe:	4b25      	ldr	r3, [pc, #148]	; (8028694 <__register_exitproc+0xb8>)
 8028600:	b113      	cbz	r3, 8028608 <__register_exitproc+0x2c>
 8028602:	681b      	ldr	r3, [r3, #0]
 8028604:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028608:	6863      	ldr	r3, [r4, #4]
 802860a:	2b1f      	cmp	r3, #31
 802860c:	dd07      	ble.n	802861e <__register_exitproc+0x42>
 802860e:	f8d8 0000 	ldr.w	r0, [r8]
 8028612:	f001 fb80 	bl	8029d16 <__retarget_lock_release_recursive>
 8028616:	f04f 30ff 	mov.w	r0, #4294967295
 802861a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802861e:	b34e      	cbz	r6, 8028674 <__register_exitproc+0x98>
 8028620:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028624:	b988      	cbnz	r0, 802864a <__register_exitproc+0x6e>
 8028626:	4b1c      	ldr	r3, [pc, #112]	; (8028698 <__register_exitproc+0xbc>)
 8028628:	b923      	cbnz	r3, 8028634 <__register_exitproc+0x58>
 802862a:	f8d8 0000 	ldr.w	r0, [r8]
 802862e:	f001 fb71 	bl	8029d14 <__retarget_lock_release>
 8028632:	e7f0      	b.n	8028616 <__register_exitproc+0x3a>
 8028634:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028638:	f7fd ffa8 	bl	802658c <malloc>
 802863c:	2800      	cmp	r0, #0
 802863e:	d0f4      	beq.n	802862a <__register_exitproc+0x4e>
 8028640:	2300      	movs	r3, #0
 8028642:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028646:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802864a:	6863      	ldr	r3, [r4, #4]
 802864c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028650:	2201      	movs	r2, #1
 8028652:	409a      	lsls	r2, r3
 8028654:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028658:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802865c:	4313      	orrs	r3, r2
 802865e:	2e02      	cmp	r6, #2
 8028660:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028664:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028668:	bf02      	ittt	eq
 802866a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802866e:	431a      	orreq	r2, r3
 8028670:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028674:	6863      	ldr	r3, [r4, #4]
 8028676:	f8d8 0000 	ldr.w	r0, [r8]
 802867a:	1c5a      	adds	r2, r3, #1
 802867c:	3302      	adds	r3, #2
 802867e:	6062      	str	r2, [r4, #4]
 8028680:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028684:	f001 fb47 	bl	8029d16 <__retarget_lock_release_recursive>
 8028688:	2000      	movs	r0, #0
 802868a:	e7c6      	b.n	802861a <__register_exitproc+0x3e>
 802868c:	200569e8 	.word	0x200569e8
 8028690:	2005695c 	.word	0x2005695c
 8028694:	0802ef64 	.word	0x0802ef64
 8028698:	0802658d 	.word	0x0802658d
 802869c:	200000e0 	.word	0x200000e0

080286a0 <quorem>:
 80286a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286a4:	6903      	ldr	r3, [r0, #16]
 80286a6:	690c      	ldr	r4, [r1, #16]
 80286a8:	42a3      	cmp	r3, r4
 80286aa:	4607      	mov	r7, r0
 80286ac:	f2c0 8081 	blt.w	80287b2 <quorem+0x112>
 80286b0:	3c01      	subs	r4, #1
 80286b2:	f101 0814 	add.w	r8, r1, #20
 80286b6:	f100 0514 	add.w	r5, r0, #20
 80286ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80286be:	9301      	str	r3, [sp, #4]
 80286c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80286c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80286c8:	3301      	adds	r3, #1
 80286ca:	429a      	cmp	r2, r3
 80286cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80286d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80286d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80286d8:	d331      	bcc.n	802873e <quorem+0x9e>
 80286da:	f04f 0e00 	mov.w	lr, #0
 80286de:	4640      	mov	r0, r8
 80286e0:	46ac      	mov	ip, r5
 80286e2:	46f2      	mov	sl, lr
 80286e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80286e8:	b293      	uxth	r3, r2
 80286ea:	fb06 e303 	mla	r3, r6, r3, lr
 80286ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80286f2:	b29b      	uxth	r3, r3
 80286f4:	ebaa 0303 	sub.w	r3, sl, r3
 80286f8:	0c12      	lsrs	r2, r2, #16
 80286fa:	f8dc a000 	ldr.w	sl, [ip]
 80286fe:	fb06 e202 	mla	r2, r6, r2, lr
 8028702:	fa13 f38a 	uxtah	r3, r3, sl
 8028706:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802870a:	fa1f fa82 	uxth.w	sl, r2
 802870e:	f8dc 2000 	ldr.w	r2, [ip]
 8028712:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8028716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802871a:	b29b      	uxth	r3, r3
 802871c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028720:	4581      	cmp	r9, r0
 8028722:	f84c 3b04 	str.w	r3, [ip], #4
 8028726:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802872a:	d2db      	bcs.n	80286e4 <quorem+0x44>
 802872c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028730:	b92b      	cbnz	r3, 802873e <quorem+0x9e>
 8028732:	9b01      	ldr	r3, [sp, #4]
 8028734:	3b04      	subs	r3, #4
 8028736:	429d      	cmp	r5, r3
 8028738:	461a      	mov	r2, r3
 802873a:	d32e      	bcc.n	802879a <quorem+0xfa>
 802873c:	613c      	str	r4, [r7, #16]
 802873e:	4638      	mov	r0, r7
 8028740:	f001 fe4e 	bl	802a3e0 <__mcmp>
 8028744:	2800      	cmp	r0, #0
 8028746:	db24      	blt.n	8028792 <quorem+0xf2>
 8028748:	3601      	adds	r6, #1
 802874a:	4628      	mov	r0, r5
 802874c:	f04f 0c00 	mov.w	ip, #0
 8028750:	f858 2b04 	ldr.w	r2, [r8], #4
 8028754:	f8d0 e000 	ldr.w	lr, [r0]
 8028758:	b293      	uxth	r3, r2
 802875a:	ebac 0303 	sub.w	r3, ip, r3
 802875e:	0c12      	lsrs	r2, r2, #16
 8028760:	fa13 f38e 	uxtah	r3, r3, lr
 8028764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802876c:	b29b      	uxth	r3, r3
 802876e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028772:	45c1      	cmp	r9, r8
 8028774:	f840 3b04 	str.w	r3, [r0], #4
 8028778:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802877c:	d2e8      	bcs.n	8028750 <quorem+0xb0>
 802877e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028786:	b922      	cbnz	r2, 8028792 <quorem+0xf2>
 8028788:	3b04      	subs	r3, #4
 802878a:	429d      	cmp	r5, r3
 802878c:	461a      	mov	r2, r3
 802878e:	d30a      	bcc.n	80287a6 <quorem+0x106>
 8028790:	613c      	str	r4, [r7, #16]
 8028792:	4630      	mov	r0, r6
 8028794:	b003      	add	sp, #12
 8028796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802879a:	6812      	ldr	r2, [r2, #0]
 802879c:	3b04      	subs	r3, #4
 802879e:	2a00      	cmp	r2, #0
 80287a0:	d1cc      	bne.n	802873c <quorem+0x9c>
 80287a2:	3c01      	subs	r4, #1
 80287a4:	e7c7      	b.n	8028736 <quorem+0x96>
 80287a6:	6812      	ldr	r2, [r2, #0]
 80287a8:	3b04      	subs	r3, #4
 80287aa:	2a00      	cmp	r2, #0
 80287ac:	d1f0      	bne.n	8028790 <quorem+0xf0>
 80287ae:	3c01      	subs	r4, #1
 80287b0:	e7eb      	b.n	802878a <quorem+0xea>
 80287b2:	2000      	movs	r0, #0
 80287b4:	e7ee      	b.n	8028794 <quorem+0xf4>
	...

080287b8 <_dtoa_r>:
 80287b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287bc:	ec59 8b10 	vmov	r8, r9, d0
 80287c0:	b095      	sub	sp, #84	; 0x54
 80287c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80287c4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80287c6:	9107      	str	r1, [sp, #28]
 80287c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80287cc:	4606      	mov	r6, r0
 80287ce:	9209      	str	r2, [sp, #36]	; 0x24
 80287d0:	9310      	str	r3, [sp, #64]	; 0x40
 80287d2:	b975      	cbnz	r5, 80287f2 <_dtoa_r+0x3a>
 80287d4:	2010      	movs	r0, #16
 80287d6:	f7fd fed9 	bl	802658c <malloc>
 80287da:	4602      	mov	r2, r0
 80287dc:	6270      	str	r0, [r6, #36]	; 0x24
 80287de:	b920      	cbnz	r0, 80287ea <_dtoa_r+0x32>
 80287e0:	4bab      	ldr	r3, [pc, #684]	; (8028a90 <_dtoa_r+0x2d8>)
 80287e2:	21ea      	movs	r1, #234	; 0xea
 80287e4:	48ab      	ldr	r0, [pc, #684]	; (8028a94 <_dtoa_r+0x2dc>)
 80287e6:	f7fd fe63 	bl	80264b0 <__assert_func>
 80287ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80287ee:	6005      	str	r5, [r0, #0]
 80287f0:	60c5      	str	r5, [r0, #12]
 80287f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80287f4:	6819      	ldr	r1, [r3, #0]
 80287f6:	b151      	cbz	r1, 802880e <_dtoa_r+0x56>
 80287f8:	685a      	ldr	r2, [r3, #4]
 80287fa:	604a      	str	r2, [r1, #4]
 80287fc:	2301      	movs	r3, #1
 80287fe:	4093      	lsls	r3, r2
 8028800:	608b      	str	r3, [r1, #8]
 8028802:	4630      	mov	r0, r6
 8028804:	f001 fb64 	bl	8029ed0 <_Bfree>
 8028808:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802880a:	2200      	movs	r2, #0
 802880c:	601a      	str	r2, [r3, #0]
 802880e:	f1b9 0300 	subs.w	r3, r9, #0
 8028812:	bfbb      	ittet	lt
 8028814:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8028818:	9303      	strlt	r3, [sp, #12]
 802881a:	2300      	movge	r3, #0
 802881c:	2201      	movlt	r2, #1
 802881e:	bfac      	ite	ge
 8028820:	6023      	strge	r3, [r4, #0]
 8028822:	6022      	strlt	r2, [r4, #0]
 8028824:	4b9c      	ldr	r3, [pc, #624]	; (8028a98 <_dtoa_r+0x2e0>)
 8028826:	9c03      	ldr	r4, [sp, #12]
 8028828:	43a3      	bics	r3, r4
 802882a:	d11a      	bne.n	8028862 <_dtoa_r+0xaa>
 802882c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802882e:	f242 730f 	movw	r3, #9999	; 0x270f
 8028832:	6013      	str	r3, [r2, #0]
 8028834:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8028838:	ea53 0308 	orrs.w	r3, r3, r8
 802883c:	f000 8512 	beq.w	8029264 <_dtoa_r+0xaac>
 8028840:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028842:	b953      	cbnz	r3, 802885a <_dtoa_r+0xa2>
 8028844:	4b95      	ldr	r3, [pc, #596]	; (8028a9c <_dtoa_r+0x2e4>)
 8028846:	e01f      	b.n	8028888 <_dtoa_r+0xd0>
 8028848:	4b95      	ldr	r3, [pc, #596]	; (8028aa0 <_dtoa_r+0x2e8>)
 802884a:	9300      	str	r3, [sp, #0]
 802884c:	3308      	adds	r3, #8
 802884e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028850:	6013      	str	r3, [r2, #0]
 8028852:	9800      	ldr	r0, [sp, #0]
 8028854:	b015      	add	sp, #84	; 0x54
 8028856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802885a:	4b90      	ldr	r3, [pc, #576]	; (8028a9c <_dtoa_r+0x2e4>)
 802885c:	9300      	str	r3, [sp, #0]
 802885e:	3303      	adds	r3, #3
 8028860:	e7f5      	b.n	802884e <_dtoa_r+0x96>
 8028862:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028866:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802886e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8028872:	d10b      	bne.n	802888c <_dtoa_r+0xd4>
 8028874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028876:	2301      	movs	r3, #1
 8028878:	6013      	str	r3, [r2, #0]
 802887a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802887c:	2b00      	cmp	r3, #0
 802887e:	f000 84ee 	beq.w	802925e <_dtoa_r+0xaa6>
 8028882:	4888      	ldr	r0, [pc, #544]	; (8028aa4 <_dtoa_r+0x2ec>)
 8028884:	6018      	str	r0, [r3, #0]
 8028886:	1e43      	subs	r3, r0, #1
 8028888:	9300      	str	r3, [sp, #0]
 802888a:	e7e2      	b.n	8028852 <_dtoa_r+0x9a>
 802888c:	a913      	add	r1, sp, #76	; 0x4c
 802888e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8028892:	aa12      	add	r2, sp, #72	; 0x48
 8028894:	4630      	mov	r0, r6
 8028896:	f001 fec3 	bl	802a620 <__d2b>
 802889a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802889e:	4605      	mov	r5, r0
 80288a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80288a2:	2900      	cmp	r1, #0
 80288a4:	d047      	beq.n	8028936 <_dtoa_r+0x17e>
 80288a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80288a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80288ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80288b0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80288b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80288b8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80288bc:	2400      	movs	r4, #0
 80288be:	ec43 2b16 	vmov	d6, r2, r3
 80288c2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80288c6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8028a78 <_dtoa_r+0x2c0>
 80288ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80288ce:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8028a80 <_dtoa_r+0x2c8>
 80288d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80288d6:	eeb0 7b46 	vmov.f64	d7, d6
 80288da:	ee06 1a90 	vmov	s13, r1
 80288de:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80288e2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8028a88 <_dtoa_r+0x2d0>
 80288e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80288ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80288ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80288f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288f6:	ee16 ba90 	vmov	fp, s13
 80288fa:	9411      	str	r4, [sp, #68]	; 0x44
 80288fc:	d508      	bpl.n	8028910 <_dtoa_r+0x158>
 80288fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8028902:	eeb4 6b47 	vcmp.f64	d6, d7
 8028906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802890a:	bf18      	it	ne
 802890c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028910:	f1bb 0f16 	cmp.w	fp, #22
 8028914:	d832      	bhi.n	802897c <_dtoa_r+0x1c4>
 8028916:	4b64      	ldr	r3, [pc, #400]	; (8028aa8 <_dtoa_r+0x2f0>)
 8028918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802891c:	ed93 7b00 	vldr	d7, [r3]
 8028920:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8028924:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802892c:	d501      	bpl.n	8028932 <_dtoa_r+0x17a>
 802892e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028932:	2300      	movs	r3, #0
 8028934:	e023      	b.n	802897e <_dtoa_r+0x1c6>
 8028936:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028938:	4401      	add	r1, r0
 802893a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802893e:	2b20      	cmp	r3, #32
 8028940:	bfc3      	ittte	gt
 8028942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028946:	fa04 f303 	lslgt.w	r3, r4, r3
 802894a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802894e:	f1c3 0320 	rsble	r3, r3, #32
 8028952:	bfc6      	itte	gt
 8028954:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028958:	ea43 0308 	orrgt.w	r3, r3, r8
 802895c:	fa08 f303 	lslle.w	r3, r8, r3
 8028960:	ee07 3a90 	vmov	s15, r3
 8028964:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028968:	3901      	subs	r1, #1
 802896a:	ed8d 7b00 	vstr	d7, [sp]
 802896e:	9c01      	ldr	r4, [sp, #4]
 8028970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028974:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028978:	2401      	movs	r4, #1
 802897a:	e7a0      	b.n	80288be <_dtoa_r+0x106>
 802897c:	2301      	movs	r3, #1
 802897e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028980:	1a43      	subs	r3, r0, r1
 8028982:	1e5a      	subs	r2, r3, #1
 8028984:	bf45      	ittet	mi
 8028986:	f1c3 0301 	rsbmi	r3, r3, #1
 802898a:	9305      	strmi	r3, [sp, #20]
 802898c:	2300      	movpl	r3, #0
 802898e:	2300      	movmi	r3, #0
 8028990:	9206      	str	r2, [sp, #24]
 8028992:	bf54      	ite	pl
 8028994:	9305      	strpl	r3, [sp, #20]
 8028996:	9306      	strmi	r3, [sp, #24]
 8028998:	f1bb 0f00 	cmp.w	fp, #0
 802899c:	db18      	blt.n	80289d0 <_dtoa_r+0x218>
 802899e:	9b06      	ldr	r3, [sp, #24]
 80289a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80289a4:	445b      	add	r3, fp
 80289a6:	9306      	str	r3, [sp, #24]
 80289a8:	2300      	movs	r3, #0
 80289aa:	9a07      	ldr	r2, [sp, #28]
 80289ac:	2a09      	cmp	r2, #9
 80289ae:	d849      	bhi.n	8028a44 <_dtoa_r+0x28c>
 80289b0:	2a05      	cmp	r2, #5
 80289b2:	bfc4      	itt	gt
 80289b4:	3a04      	subgt	r2, #4
 80289b6:	9207      	strgt	r2, [sp, #28]
 80289b8:	9a07      	ldr	r2, [sp, #28]
 80289ba:	f1a2 0202 	sub.w	r2, r2, #2
 80289be:	bfcc      	ite	gt
 80289c0:	2400      	movgt	r4, #0
 80289c2:	2401      	movle	r4, #1
 80289c4:	2a03      	cmp	r2, #3
 80289c6:	d848      	bhi.n	8028a5a <_dtoa_r+0x2a2>
 80289c8:	e8df f002 	tbb	[pc, r2]
 80289cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80289d0:	9b05      	ldr	r3, [sp, #20]
 80289d2:	2200      	movs	r2, #0
 80289d4:	eba3 030b 	sub.w	r3, r3, fp
 80289d8:	9305      	str	r3, [sp, #20]
 80289da:	920e      	str	r2, [sp, #56]	; 0x38
 80289dc:	f1cb 0300 	rsb	r3, fp, #0
 80289e0:	e7e3      	b.n	80289aa <_dtoa_r+0x1f2>
 80289e2:	2200      	movs	r2, #0
 80289e4:	9208      	str	r2, [sp, #32]
 80289e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80289e8:	2a00      	cmp	r2, #0
 80289ea:	dc39      	bgt.n	8028a60 <_dtoa_r+0x2a8>
 80289ec:	f04f 0a01 	mov.w	sl, #1
 80289f0:	46d1      	mov	r9, sl
 80289f2:	4652      	mov	r2, sl
 80289f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80289f8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80289fa:	2100      	movs	r1, #0
 80289fc:	6079      	str	r1, [r7, #4]
 80289fe:	2004      	movs	r0, #4
 8028a00:	f100 0c14 	add.w	ip, r0, #20
 8028a04:	4594      	cmp	ip, r2
 8028a06:	6879      	ldr	r1, [r7, #4]
 8028a08:	d92f      	bls.n	8028a6a <_dtoa_r+0x2b2>
 8028a0a:	4630      	mov	r0, r6
 8028a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8028a0e:	f001 fa1f 	bl	8029e50 <_Balloc>
 8028a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a14:	9000      	str	r0, [sp, #0]
 8028a16:	4602      	mov	r2, r0
 8028a18:	2800      	cmp	r0, #0
 8028a1a:	d149      	bne.n	8028ab0 <_dtoa_r+0x2f8>
 8028a1c:	4b23      	ldr	r3, [pc, #140]	; (8028aac <_dtoa_r+0x2f4>)
 8028a1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028a22:	e6df      	b.n	80287e4 <_dtoa_r+0x2c>
 8028a24:	2201      	movs	r2, #1
 8028a26:	e7dd      	b.n	80289e4 <_dtoa_r+0x22c>
 8028a28:	2200      	movs	r2, #0
 8028a2a:	9208      	str	r2, [sp, #32]
 8028a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028a2e:	eb0b 0a02 	add.w	sl, fp, r2
 8028a32:	f10a 0901 	add.w	r9, sl, #1
 8028a36:	464a      	mov	r2, r9
 8028a38:	2a01      	cmp	r2, #1
 8028a3a:	bfb8      	it	lt
 8028a3c:	2201      	movlt	r2, #1
 8028a3e:	e7db      	b.n	80289f8 <_dtoa_r+0x240>
 8028a40:	2201      	movs	r2, #1
 8028a42:	e7f2      	b.n	8028a2a <_dtoa_r+0x272>
 8028a44:	2401      	movs	r4, #1
 8028a46:	2200      	movs	r2, #0
 8028a48:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8028a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8028a50:	2100      	movs	r1, #0
 8028a52:	46d1      	mov	r9, sl
 8028a54:	2212      	movs	r2, #18
 8028a56:	9109      	str	r1, [sp, #36]	; 0x24
 8028a58:	e7ce      	b.n	80289f8 <_dtoa_r+0x240>
 8028a5a:	2201      	movs	r2, #1
 8028a5c:	9208      	str	r2, [sp, #32]
 8028a5e:	e7f5      	b.n	8028a4c <_dtoa_r+0x294>
 8028a60:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8028a64:	46d1      	mov	r9, sl
 8028a66:	4652      	mov	r2, sl
 8028a68:	e7c6      	b.n	80289f8 <_dtoa_r+0x240>
 8028a6a:	3101      	adds	r1, #1
 8028a6c:	6079      	str	r1, [r7, #4]
 8028a6e:	0040      	lsls	r0, r0, #1
 8028a70:	e7c6      	b.n	8028a00 <_dtoa_r+0x248>
 8028a72:	bf00      	nop
 8028a74:	f3af 8000 	nop.w
 8028a78:	636f4361 	.word	0x636f4361
 8028a7c:	3fd287a7 	.word	0x3fd287a7
 8028a80:	8b60c8b3 	.word	0x8b60c8b3
 8028a84:	3fc68a28 	.word	0x3fc68a28
 8028a88:	509f79fb 	.word	0x509f79fb
 8028a8c:	3fd34413 	.word	0x3fd34413
 8028a90:	0802f0c6 	.word	0x0802f0c6
 8028a94:	0802f0dd 	.word	0x0802f0dd
 8028a98:	7ff00000 	.word	0x7ff00000
 8028a9c:	0802f0c2 	.word	0x0802f0c2
 8028aa0:	0802f0b9 	.word	0x0802f0b9
 8028aa4:	0802e243 	.word	0x0802e243
 8028aa8:	0802f2b8 	.word	0x0802f2b8
 8028aac:	0802f13c 	.word	0x0802f13c
 8028ab0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8028ab2:	9900      	ldr	r1, [sp, #0]
 8028ab4:	6011      	str	r1, [r2, #0]
 8028ab6:	f1b9 0f0e 	cmp.w	r9, #14
 8028aba:	d872      	bhi.n	8028ba2 <_dtoa_r+0x3ea>
 8028abc:	2c00      	cmp	r4, #0
 8028abe:	d070      	beq.n	8028ba2 <_dtoa_r+0x3ea>
 8028ac0:	f1bb 0f00 	cmp.w	fp, #0
 8028ac4:	f340 80a6 	ble.w	8028c14 <_dtoa_r+0x45c>
 8028ac8:	49ca      	ldr	r1, [pc, #808]	; (8028df4 <_dtoa_r+0x63c>)
 8028aca:	f00b 020f 	and.w	r2, fp, #15
 8028ace:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8028ad2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8028ad6:	ed92 7b00 	vldr	d7, [r2]
 8028ada:	ea4f 112b 	mov.w	r1, fp, asr #4
 8028ade:	f000 808d 	beq.w	8028bfc <_dtoa_r+0x444>
 8028ae2:	4ac5      	ldr	r2, [pc, #788]	; (8028df8 <_dtoa_r+0x640>)
 8028ae4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8028ae8:	ed92 6b08 	vldr	d6, [r2, #32]
 8028aec:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8028af0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8028af4:	f001 010f 	and.w	r1, r1, #15
 8028af8:	2203      	movs	r2, #3
 8028afa:	48bf      	ldr	r0, [pc, #764]	; (8028df8 <_dtoa_r+0x640>)
 8028afc:	2900      	cmp	r1, #0
 8028afe:	d17f      	bne.n	8028c00 <_dtoa_r+0x448>
 8028b00:	ed9d 6b02 	vldr	d6, [sp, #8]
 8028b04:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028b08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028b0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028b0e:	2900      	cmp	r1, #0
 8028b10:	f000 80b2 	beq.w	8028c78 <_dtoa_r+0x4c0>
 8028b14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028b1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b24:	f140 80a8 	bpl.w	8028c78 <_dtoa_r+0x4c0>
 8028b28:	f1b9 0f00 	cmp.w	r9, #0
 8028b2c:	f000 80a4 	beq.w	8028c78 <_dtoa_r+0x4c0>
 8028b30:	f1ba 0f00 	cmp.w	sl, #0
 8028b34:	dd31      	ble.n	8028b9a <_dtoa_r+0x3e2>
 8028b36:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8028b3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028b3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028b42:	f10b 37ff 	add.w	r7, fp, #4294967295
 8028b46:	3201      	adds	r2, #1
 8028b48:	4650      	mov	r0, sl
 8028b4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8028b4e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8028b52:	ee07 2a90 	vmov	s15, r2
 8028b56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028b5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8028b5e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8028b62:	9c03      	ldr	r4, [sp, #12]
 8028b64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8028b68:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8028b6c:	2800      	cmp	r0, #0
 8028b6e:	f040 8086 	bne.w	8028c7e <_dtoa_r+0x4c6>
 8028b72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8028b76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8028b7a:	ec42 1b17 	vmov	d7, r1, r2
 8028b7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b86:	f300 8272 	bgt.w	802906e <_dtoa_r+0x8b6>
 8028b8a:	eeb1 7b47 	vneg.f64	d7, d7
 8028b8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b96:	f100 8267 	bmi.w	8029068 <_dtoa_r+0x8b0>
 8028b9a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8028b9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8028ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028ba4:	2a00      	cmp	r2, #0
 8028ba6:	f2c0 8129 	blt.w	8028dfc <_dtoa_r+0x644>
 8028baa:	f1bb 0f0e 	cmp.w	fp, #14
 8028bae:	f300 8125 	bgt.w	8028dfc <_dtoa_r+0x644>
 8028bb2:	4b90      	ldr	r3, [pc, #576]	; (8028df4 <_dtoa_r+0x63c>)
 8028bb4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028bb8:	ed93 6b00 	vldr	d6, [r3]
 8028bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028bbe:	2b00      	cmp	r3, #0
 8028bc0:	f280 80c3 	bge.w	8028d4a <_dtoa_r+0x592>
 8028bc4:	f1b9 0f00 	cmp.w	r9, #0
 8028bc8:	f300 80bf 	bgt.w	8028d4a <_dtoa_r+0x592>
 8028bcc:	f040 824c 	bne.w	8029068 <_dtoa_r+0x8b0>
 8028bd0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8028bd4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8028bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028bdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028be4:	464c      	mov	r4, r9
 8028be6:	464f      	mov	r7, r9
 8028be8:	f280 8222 	bge.w	8029030 <_dtoa_r+0x878>
 8028bec:	f8dd 8000 	ldr.w	r8, [sp]
 8028bf0:	2331      	movs	r3, #49	; 0x31
 8028bf2:	f808 3b01 	strb.w	r3, [r8], #1
 8028bf6:	f10b 0b01 	add.w	fp, fp, #1
 8028bfa:	e21e      	b.n	802903a <_dtoa_r+0x882>
 8028bfc:	2202      	movs	r2, #2
 8028bfe:	e77c      	b.n	8028afa <_dtoa_r+0x342>
 8028c00:	07cc      	lsls	r4, r1, #31
 8028c02:	d504      	bpl.n	8028c0e <_dtoa_r+0x456>
 8028c04:	ed90 6b00 	vldr	d6, [r0]
 8028c08:	3201      	adds	r2, #1
 8028c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028c0e:	1049      	asrs	r1, r1, #1
 8028c10:	3008      	adds	r0, #8
 8028c12:	e773      	b.n	8028afc <_dtoa_r+0x344>
 8028c14:	d02e      	beq.n	8028c74 <_dtoa_r+0x4bc>
 8028c16:	f1cb 0100 	rsb	r1, fp, #0
 8028c1a:	4a76      	ldr	r2, [pc, #472]	; (8028df4 <_dtoa_r+0x63c>)
 8028c1c:	f001 000f 	and.w	r0, r1, #15
 8028c20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028c24:	ed92 7b00 	vldr	d7, [r2]
 8028c28:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8028c2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028c30:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8028c34:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8028c38:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8028c3c:	486e      	ldr	r0, [pc, #440]	; (8028df8 <_dtoa_r+0x640>)
 8028c3e:	1109      	asrs	r1, r1, #4
 8028c40:	2400      	movs	r4, #0
 8028c42:	2202      	movs	r2, #2
 8028c44:	b939      	cbnz	r1, 8028c56 <_dtoa_r+0x49e>
 8028c46:	2c00      	cmp	r4, #0
 8028c48:	f43f af60 	beq.w	8028b0c <_dtoa_r+0x354>
 8028c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028c54:	e75a      	b.n	8028b0c <_dtoa_r+0x354>
 8028c56:	07cf      	lsls	r7, r1, #31
 8028c58:	d509      	bpl.n	8028c6e <_dtoa_r+0x4b6>
 8028c5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8028c5e:	ed90 7b00 	vldr	d7, [r0]
 8028c62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028c66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8028c6a:	3201      	adds	r2, #1
 8028c6c:	2401      	movs	r4, #1
 8028c6e:	1049      	asrs	r1, r1, #1
 8028c70:	3008      	adds	r0, #8
 8028c72:	e7e7      	b.n	8028c44 <_dtoa_r+0x48c>
 8028c74:	2202      	movs	r2, #2
 8028c76:	e749      	b.n	8028b0c <_dtoa_r+0x354>
 8028c78:	465f      	mov	r7, fp
 8028c7a:	4648      	mov	r0, r9
 8028c7c:	e765      	b.n	8028b4a <_dtoa_r+0x392>
 8028c7e:	ec42 1b17 	vmov	d7, r1, r2
 8028c82:	4a5c      	ldr	r2, [pc, #368]	; (8028df4 <_dtoa_r+0x63c>)
 8028c84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028c88:	ed12 4b02 	vldr	d4, [r2, #-8]
 8028c8c:	9a00      	ldr	r2, [sp, #0]
 8028c8e:	1814      	adds	r4, r2, r0
 8028c90:	9a08      	ldr	r2, [sp, #32]
 8028c92:	b352      	cbz	r2, 8028cea <_dtoa_r+0x532>
 8028c94:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8028c98:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8028c9c:	f8dd 8000 	ldr.w	r8, [sp]
 8028ca0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8028ca4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028ca8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028cac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028cb0:	ee14 2a90 	vmov	r2, s9
 8028cb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028cb8:	3230      	adds	r2, #48	; 0x30
 8028cba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cc6:	f808 2b01 	strb.w	r2, [r8], #1
 8028cca:	d439      	bmi.n	8028d40 <_dtoa_r+0x588>
 8028ccc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8028cd0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cd8:	d472      	bmi.n	8028dc0 <_dtoa_r+0x608>
 8028cda:	45a0      	cmp	r8, r4
 8028cdc:	f43f af5d 	beq.w	8028b9a <_dtoa_r+0x3e2>
 8028ce0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8028ce4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028ce8:	e7e0      	b.n	8028cac <_dtoa_r+0x4f4>
 8028cea:	f8dd 8000 	ldr.w	r8, [sp]
 8028cee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028cf2:	4621      	mov	r1, r4
 8028cf4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028cf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028cfc:	ee14 2a90 	vmov	r2, s9
 8028d00:	3230      	adds	r2, #48	; 0x30
 8028d02:	f808 2b01 	strb.w	r2, [r8], #1
 8028d06:	45a0      	cmp	r8, r4
 8028d08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028d0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028d10:	d118      	bne.n	8028d44 <_dtoa_r+0x58c>
 8028d12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8028d16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8028d1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8028d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d22:	dc4d      	bgt.n	8028dc0 <_dtoa_r+0x608>
 8028d24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028d28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d30:	f57f af33 	bpl.w	8028b9a <_dtoa_r+0x3e2>
 8028d34:	4688      	mov	r8, r1
 8028d36:	3901      	subs	r1, #1
 8028d38:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8028d3c:	2b30      	cmp	r3, #48	; 0x30
 8028d3e:	d0f9      	beq.n	8028d34 <_dtoa_r+0x57c>
 8028d40:	46bb      	mov	fp, r7
 8028d42:	e02a      	b.n	8028d9a <_dtoa_r+0x5e2>
 8028d44:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028d48:	e7d6      	b.n	8028cf8 <_dtoa_r+0x540>
 8028d4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028d4e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8028d52:	f8dd 8000 	ldr.w	r8, [sp]
 8028d56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8028d5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8028d5e:	ee15 3a10 	vmov	r3, s10
 8028d62:	3330      	adds	r3, #48	; 0x30
 8028d64:	f808 3b01 	strb.w	r3, [r8], #1
 8028d68:	9b00      	ldr	r3, [sp, #0]
 8028d6a:	eba8 0303 	sub.w	r3, r8, r3
 8028d6e:	4599      	cmp	r9, r3
 8028d70:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8028d74:	eea3 7b46 	vfms.f64	d7, d3, d6
 8028d78:	d133      	bne.n	8028de2 <_dtoa_r+0x62a>
 8028d7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8028d7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d86:	dc1a      	bgt.n	8028dbe <_dtoa_r+0x606>
 8028d88:	eeb4 7b46 	vcmp.f64	d7, d6
 8028d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d90:	d103      	bne.n	8028d9a <_dtoa_r+0x5e2>
 8028d92:	ee15 3a10 	vmov	r3, s10
 8028d96:	07d9      	lsls	r1, r3, #31
 8028d98:	d411      	bmi.n	8028dbe <_dtoa_r+0x606>
 8028d9a:	4629      	mov	r1, r5
 8028d9c:	4630      	mov	r0, r6
 8028d9e:	f001 f897 	bl	8029ed0 <_Bfree>
 8028da2:	2300      	movs	r3, #0
 8028da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028da6:	f888 3000 	strb.w	r3, [r8]
 8028daa:	f10b 0301 	add.w	r3, fp, #1
 8028dae:	6013      	str	r3, [r2, #0]
 8028db0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	f43f ad4d 	beq.w	8028852 <_dtoa_r+0x9a>
 8028db8:	f8c3 8000 	str.w	r8, [r3]
 8028dbc:	e549      	b.n	8028852 <_dtoa_r+0x9a>
 8028dbe:	465f      	mov	r7, fp
 8028dc0:	4643      	mov	r3, r8
 8028dc2:	4698      	mov	r8, r3
 8028dc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028dc8:	2a39      	cmp	r2, #57	; 0x39
 8028dca:	d106      	bne.n	8028dda <_dtoa_r+0x622>
 8028dcc:	9a00      	ldr	r2, [sp, #0]
 8028dce:	429a      	cmp	r2, r3
 8028dd0:	d1f7      	bne.n	8028dc2 <_dtoa_r+0x60a>
 8028dd2:	9900      	ldr	r1, [sp, #0]
 8028dd4:	2230      	movs	r2, #48	; 0x30
 8028dd6:	3701      	adds	r7, #1
 8028dd8:	700a      	strb	r2, [r1, #0]
 8028dda:	781a      	ldrb	r2, [r3, #0]
 8028ddc:	3201      	adds	r2, #1
 8028dde:	701a      	strb	r2, [r3, #0]
 8028de0:	e7ae      	b.n	8028d40 <_dtoa_r+0x588>
 8028de2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028de6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028dee:	d1b2      	bne.n	8028d56 <_dtoa_r+0x59e>
 8028df0:	e7d3      	b.n	8028d9a <_dtoa_r+0x5e2>
 8028df2:	bf00      	nop
 8028df4:	0802f2b8 	.word	0x0802f2b8
 8028df8:	0802f290 	.word	0x0802f290
 8028dfc:	9908      	ldr	r1, [sp, #32]
 8028dfe:	2900      	cmp	r1, #0
 8028e00:	f000 80d1 	beq.w	8028fa6 <_dtoa_r+0x7ee>
 8028e04:	9907      	ldr	r1, [sp, #28]
 8028e06:	2901      	cmp	r1, #1
 8028e08:	f300 80b4 	bgt.w	8028f74 <_dtoa_r+0x7bc>
 8028e0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8028e0e:	2900      	cmp	r1, #0
 8028e10:	f000 80ac 	beq.w	8028f6c <_dtoa_r+0x7b4>
 8028e14:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8028e18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8028e1c:	461c      	mov	r4, r3
 8028e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8028e20:	9b05      	ldr	r3, [sp, #20]
 8028e22:	4413      	add	r3, r2
 8028e24:	9305      	str	r3, [sp, #20]
 8028e26:	9b06      	ldr	r3, [sp, #24]
 8028e28:	2101      	movs	r1, #1
 8028e2a:	4413      	add	r3, r2
 8028e2c:	4630      	mov	r0, r6
 8028e2e:	9306      	str	r3, [sp, #24]
 8028e30:	f001 f954 	bl	802a0dc <__i2b>
 8028e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e36:	4607      	mov	r7, r0
 8028e38:	f1b8 0f00 	cmp.w	r8, #0
 8028e3c:	dd0d      	ble.n	8028e5a <_dtoa_r+0x6a2>
 8028e3e:	9a06      	ldr	r2, [sp, #24]
 8028e40:	2a00      	cmp	r2, #0
 8028e42:	dd0a      	ble.n	8028e5a <_dtoa_r+0x6a2>
 8028e44:	4542      	cmp	r2, r8
 8028e46:	9905      	ldr	r1, [sp, #20]
 8028e48:	bfa8      	it	ge
 8028e4a:	4642      	movge	r2, r8
 8028e4c:	1a89      	subs	r1, r1, r2
 8028e4e:	9105      	str	r1, [sp, #20]
 8028e50:	9906      	ldr	r1, [sp, #24]
 8028e52:	eba8 0802 	sub.w	r8, r8, r2
 8028e56:	1a8a      	subs	r2, r1, r2
 8028e58:	9206      	str	r2, [sp, #24]
 8028e5a:	b303      	cbz	r3, 8028e9e <_dtoa_r+0x6e6>
 8028e5c:	9a08      	ldr	r2, [sp, #32]
 8028e5e:	2a00      	cmp	r2, #0
 8028e60:	f000 80a6 	beq.w	8028fb0 <_dtoa_r+0x7f8>
 8028e64:	2c00      	cmp	r4, #0
 8028e66:	dd13      	ble.n	8028e90 <_dtoa_r+0x6d8>
 8028e68:	4639      	mov	r1, r7
 8028e6a:	4622      	mov	r2, r4
 8028e6c:	4630      	mov	r0, r6
 8028e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8028e70:	f001 f9f0 	bl	802a254 <__pow5mult>
 8028e74:	462a      	mov	r2, r5
 8028e76:	4601      	mov	r1, r0
 8028e78:	4607      	mov	r7, r0
 8028e7a:	4630      	mov	r0, r6
 8028e7c:	f001 f944 	bl	802a108 <__multiply>
 8028e80:	4629      	mov	r1, r5
 8028e82:	900a      	str	r0, [sp, #40]	; 0x28
 8028e84:	4630      	mov	r0, r6
 8028e86:	f001 f823 	bl	8029ed0 <_Bfree>
 8028e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028e8e:	4615      	mov	r5, r2
 8028e90:	1b1a      	subs	r2, r3, r4
 8028e92:	d004      	beq.n	8028e9e <_dtoa_r+0x6e6>
 8028e94:	4629      	mov	r1, r5
 8028e96:	4630      	mov	r0, r6
 8028e98:	f001 f9dc 	bl	802a254 <__pow5mult>
 8028e9c:	4605      	mov	r5, r0
 8028e9e:	2101      	movs	r1, #1
 8028ea0:	4630      	mov	r0, r6
 8028ea2:	f001 f91b 	bl	802a0dc <__i2b>
 8028ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028ea8:	2b00      	cmp	r3, #0
 8028eaa:	4604      	mov	r4, r0
 8028eac:	f340 8082 	ble.w	8028fb4 <_dtoa_r+0x7fc>
 8028eb0:	461a      	mov	r2, r3
 8028eb2:	4601      	mov	r1, r0
 8028eb4:	4630      	mov	r0, r6
 8028eb6:	f001 f9cd 	bl	802a254 <__pow5mult>
 8028eba:	9b07      	ldr	r3, [sp, #28]
 8028ebc:	2b01      	cmp	r3, #1
 8028ebe:	4604      	mov	r4, r0
 8028ec0:	dd7b      	ble.n	8028fba <_dtoa_r+0x802>
 8028ec2:	2300      	movs	r3, #0
 8028ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8028ec6:	6922      	ldr	r2, [r4, #16]
 8028ec8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028ecc:	6910      	ldr	r0, [r2, #16]
 8028ece:	f001 f8b5 	bl	802a03c <__hi0bits>
 8028ed2:	f1c0 0020 	rsb	r0, r0, #32
 8028ed6:	9b06      	ldr	r3, [sp, #24]
 8028ed8:	4418      	add	r0, r3
 8028eda:	f010 001f 	ands.w	r0, r0, #31
 8028ede:	f000 808d 	beq.w	8028ffc <_dtoa_r+0x844>
 8028ee2:	f1c0 0220 	rsb	r2, r0, #32
 8028ee6:	2a04      	cmp	r2, #4
 8028ee8:	f340 8086 	ble.w	8028ff8 <_dtoa_r+0x840>
 8028eec:	f1c0 001c 	rsb	r0, r0, #28
 8028ef0:	9b05      	ldr	r3, [sp, #20]
 8028ef2:	4403      	add	r3, r0
 8028ef4:	9305      	str	r3, [sp, #20]
 8028ef6:	9b06      	ldr	r3, [sp, #24]
 8028ef8:	4403      	add	r3, r0
 8028efa:	4480      	add	r8, r0
 8028efc:	9306      	str	r3, [sp, #24]
 8028efe:	9b05      	ldr	r3, [sp, #20]
 8028f00:	2b00      	cmp	r3, #0
 8028f02:	dd05      	ble.n	8028f10 <_dtoa_r+0x758>
 8028f04:	4629      	mov	r1, r5
 8028f06:	461a      	mov	r2, r3
 8028f08:	4630      	mov	r0, r6
 8028f0a:	f001 f9fd 	bl	802a308 <__lshift>
 8028f0e:	4605      	mov	r5, r0
 8028f10:	9b06      	ldr	r3, [sp, #24]
 8028f12:	2b00      	cmp	r3, #0
 8028f14:	dd05      	ble.n	8028f22 <_dtoa_r+0x76a>
 8028f16:	4621      	mov	r1, r4
 8028f18:	461a      	mov	r2, r3
 8028f1a:	4630      	mov	r0, r6
 8028f1c:	f001 f9f4 	bl	802a308 <__lshift>
 8028f20:	4604      	mov	r4, r0
 8028f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028f24:	2b00      	cmp	r3, #0
 8028f26:	d06b      	beq.n	8029000 <_dtoa_r+0x848>
 8028f28:	4621      	mov	r1, r4
 8028f2a:	4628      	mov	r0, r5
 8028f2c:	f001 fa58 	bl	802a3e0 <__mcmp>
 8028f30:	2800      	cmp	r0, #0
 8028f32:	da65      	bge.n	8029000 <_dtoa_r+0x848>
 8028f34:	2300      	movs	r3, #0
 8028f36:	4629      	mov	r1, r5
 8028f38:	220a      	movs	r2, #10
 8028f3a:	4630      	mov	r0, r6
 8028f3c:	f000 ffea 	bl	8029f14 <__multadd>
 8028f40:	9b08      	ldr	r3, [sp, #32]
 8028f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028f46:	4605      	mov	r5, r0
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	f000 8192 	beq.w	8029272 <_dtoa_r+0xaba>
 8028f4e:	4639      	mov	r1, r7
 8028f50:	2300      	movs	r3, #0
 8028f52:	220a      	movs	r2, #10
 8028f54:	4630      	mov	r0, r6
 8028f56:	f000 ffdd 	bl	8029f14 <__multadd>
 8028f5a:	f1ba 0f00 	cmp.w	sl, #0
 8028f5e:	4607      	mov	r7, r0
 8028f60:	f300 808e 	bgt.w	8029080 <_dtoa_r+0x8c8>
 8028f64:	9b07      	ldr	r3, [sp, #28]
 8028f66:	2b02      	cmp	r3, #2
 8028f68:	dc51      	bgt.n	802900e <_dtoa_r+0x856>
 8028f6a:	e089      	b.n	8029080 <_dtoa_r+0x8c8>
 8028f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028f6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8028f72:	e751      	b.n	8028e18 <_dtoa_r+0x660>
 8028f74:	f109 34ff 	add.w	r4, r9, #4294967295
 8028f78:	42a3      	cmp	r3, r4
 8028f7a:	bfbf      	itttt	lt
 8028f7c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8028f7e:	1ae3      	sublt	r3, r4, r3
 8028f80:	18d2      	addlt	r2, r2, r3
 8028f82:	4613      	movlt	r3, r2
 8028f84:	bfb7      	itett	lt
 8028f86:	930e      	strlt	r3, [sp, #56]	; 0x38
 8028f88:	1b1c      	subge	r4, r3, r4
 8028f8a:	4623      	movlt	r3, r4
 8028f8c:	2400      	movlt	r4, #0
 8028f8e:	f1b9 0f00 	cmp.w	r9, #0
 8028f92:	bfb5      	itete	lt
 8028f94:	9a05      	ldrlt	r2, [sp, #20]
 8028f96:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8028f9a:	eba2 0809 	sublt.w	r8, r2, r9
 8028f9e:	464a      	movge	r2, r9
 8028fa0:	bfb8      	it	lt
 8028fa2:	2200      	movlt	r2, #0
 8028fa4:	e73b      	b.n	8028e1e <_dtoa_r+0x666>
 8028fa6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8028faa:	9f08      	ldr	r7, [sp, #32]
 8028fac:	461c      	mov	r4, r3
 8028fae:	e743      	b.n	8028e38 <_dtoa_r+0x680>
 8028fb0:	461a      	mov	r2, r3
 8028fb2:	e76f      	b.n	8028e94 <_dtoa_r+0x6dc>
 8028fb4:	9b07      	ldr	r3, [sp, #28]
 8028fb6:	2b01      	cmp	r3, #1
 8028fb8:	dc18      	bgt.n	8028fec <_dtoa_r+0x834>
 8028fba:	9b02      	ldr	r3, [sp, #8]
 8028fbc:	b9b3      	cbnz	r3, 8028fec <_dtoa_r+0x834>
 8028fbe:	9b03      	ldr	r3, [sp, #12]
 8028fc0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8028fc4:	b9a2      	cbnz	r2, 8028ff0 <_dtoa_r+0x838>
 8028fc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028fca:	0d12      	lsrs	r2, r2, #20
 8028fcc:	0512      	lsls	r2, r2, #20
 8028fce:	b18a      	cbz	r2, 8028ff4 <_dtoa_r+0x83c>
 8028fd0:	9b05      	ldr	r3, [sp, #20]
 8028fd2:	3301      	adds	r3, #1
 8028fd4:	9305      	str	r3, [sp, #20]
 8028fd6:	9b06      	ldr	r3, [sp, #24]
 8028fd8:	3301      	adds	r3, #1
 8028fda:	9306      	str	r3, [sp, #24]
 8028fdc:	2301      	movs	r3, #1
 8028fde:	930a      	str	r3, [sp, #40]	; 0x28
 8028fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028fe2:	2b00      	cmp	r3, #0
 8028fe4:	f47f af6f 	bne.w	8028ec6 <_dtoa_r+0x70e>
 8028fe8:	2001      	movs	r0, #1
 8028fea:	e774      	b.n	8028ed6 <_dtoa_r+0x71e>
 8028fec:	2300      	movs	r3, #0
 8028fee:	e7f6      	b.n	8028fde <_dtoa_r+0x826>
 8028ff0:	9b02      	ldr	r3, [sp, #8]
 8028ff2:	e7f4      	b.n	8028fde <_dtoa_r+0x826>
 8028ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8028ff6:	e7f3      	b.n	8028fe0 <_dtoa_r+0x828>
 8028ff8:	d081      	beq.n	8028efe <_dtoa_r+0x746>
 8028ffa:	4610      	mov	r0, r2
 8028ffc:	301c      	adds	r0, #28
 8028ffe:	e777      	b.n	8028ef0 <_dtoa_r+0x738>
 8029000:	f1b9 0f00 	cmp.w	r9, #0
 8029004:	dc37      	bgt.n	8029076 <_dtoa_r+0x8be>
 8029006:	9b07      	ldr	r3, [sp, #28]
 8029008:	2b02      	cmp	r3, #2
 802900a:	dd34      	ble.n	8029076 <_dtoa_r+0x8be>
 802900c:	46ca      	mov	sl, r9
 802900e:	f1ba 0f00 	cmp.w	sl, #0
 8029012:	d10d      	bne.n	8029030 <_dtoa_r+0x878>
 8029014:	4621      	mov	r1, r4
 8029016:	4653      	mov	r3, sl
 8029018:	2205      	movs	r2, #5
 802901a:	4630      	mov	r0, r6
 802901c:	f000 ff7a 	bl	8029f14 <__multadd>
 8029020:	4601      	mov	r1, r0
 8029022:	4604      	mov	r4, r0
 8029024:	4628      	mov	r0, r5
 8029026:	f001 f9db 	bl	802a3e0 <__mcmp>
 802902a:	2800      	cmp	r0, #0
 802902c:	f73f adde 	bgt.w	8028bec <_dtoa_r+0x434>
 8029030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029032:	f8dd 8000 	ldr.w	r8, [sp]
 8029036:	ea6f 0b03 	mvn.w	fp, r3
 802903a:	f04f 0900 	mov.w	r9, #0
 802903e:	4621      	mov	r1, r4
 8029040:	4630      	mov	r0, r6
 8029042:	f000 ff45 	bl	8029ed0 <_Bfree>
 8029046:	2f00      	cmp	r7, #0
 8029048:	f43f aea7 	beq.w	8028d9a <_dtoa_r+0x5e2>
 802904c:	f1b9 0f00 	cmp.w	r9, #0
 8029050:	d005      	beq.n	802905e <_dtoa_r+0x8a6>
 8029052:	45b9      	cmp	r9, r7
 8029054:	d003      	beq.n	802905e <_dtoa_r+0x8a6>
 8029056:	4649      	mov	r1, r9
 8029058:	4630      	mov	r0, r6
 802905a:	f000 ff39 	bl	8029ed0 <_Bfree>
 802905e:	4639      	mov	r1, r7
 8029060:	4630      	mov	r0, r6
 8029062:	f000 ff35 	bl	8029ed0 <_Bfree>
 8029066:	e698      	b.n	8028d9a <_dtoa_r+0x5e2>
 8029068:	2400      	movs	r4, #0
 802906a:	4627      	mov	r7, r4
 802906c:	e7e0      	b.n	8029030 <_dtoa_r+0x878>
 802906e:	46bb      	mov	fp, r7
 8029070:	4604      	mov	r4, r0
 8029072:	4607      	mov	r7, r0
 8029074:	e5ba      	b.n	8028bec <_dtoa_r+0x434>
 8029076:	9b08      	ldr	r3, [sp, #32]
 8029078:	46ca      	mov	sl, r9
 802907a:	2b00      	cmp	r3, #0
 802907c:	f000 8100 	beq.w	8029280 <_dtoa_r+0xac8>
 8029080:	f1b8 0f00 	cmp.w	r8, #0
 8029084:	dd05      	ble.n	8029092 <_dtoa_r+0x8da>
 8029086:	4639      	mov	r1, r7
 8029088:	4642      	mov	r2, r8
 802908a:	4630      	mov	r0, r6
 802908c:	f001 f93c 	bl	802a308 <__lshift>
 8029090:	4607      	mov	r7, r0
 8029092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029094:	2b00      	cmp	r3, #0
 8029096:	d05d      	beq.n	8029154 <_dtoa_r+0x99c>
 8029098:	6879      	ldr	r1, [r7, #4]
 802909a:	4630      	mov	r0, r6
 802909c:	f000 fed8 	bl	8029e50 <_Balloc>
 80290a0:	4680      	mov	r8, r0
 80290a2:	b928      	cbnz	r0, 80290b0 <_dtoa_r+0x8f8>
 80290a4:	4b82      	ldr	r3, [pc, #520]	; (80292b0 <_dtoa_r+0xaf8>)
 80290a6:	4602      	mov	r2, r0
 80290a8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80290ac:	f7ff bb9a 	b.w	80287e4 <_dtoa_r+0x2c>
 80290b0:	693a      	ldr	r2, [r7, #16]
 80290b2:	3202      	adds	r2, #2
 80290b4:	0092      	lsls	r2, r2, #2
 80290b6:	f107 010c 	add.w	r1, r7, #12
 80290ba:	300c      	adds	r0, #12
 80290bc:	f7fd fa76 	bl	80265ac <memcpy>
 80290c0:	2201      	movs	r2, #1
 80290c2:	4641      	mov	r1, r8
 80290c4:	4630      	mov	r0, r6
 80290c6:	f001 f91f 	bl	802a308 <__lshift>
 80290ca:	9b00      	ldr	r3, [sp, #0]
 80290cc:	3301      	adds	r3, #1
 80290ce:	9305      	str	r3, [sp, #20]
 80290d0:	9b00      	ldr	r3, [sp, #0]
 80290d2:	4453      	add	r3, sl
 80290d4:	9309      	str	r3, [sp, #36]	; 0x24
 80290d6:	9b02      	ldr	r3, [sp, #8]
 80290d8:	f003 0301 	and.w	r3, r3, #1
 80290dc:	46b9      	mov	r9, r7
 80290de:	9308      	str	r3, [sp, #32]
 80290e0:	4607      	mov	r7, r0
 80290e2:	9b05      	ldr	r3, [sp, #20]
 80290e4:	4621      	mov	r1, r4
 80290e6:	3b01      	subs	r3, #1
 80290e8:	4628      	mov	r0, r5
 80290ea:	9302      	str	r3, [sp, #8]
 80290ec:	f7ff fad8 	bl	80286a0 <quorem>
 80290f0:	4603      	mov	r3, r0
 80290f2:	3330      	adds	r3, #48	; 0x30
 80290f4:	9006      	str	r0, [sp, #24]
 80290f6:	4649      	mov	r1, r9
 80290f8:	4628      	mov	r0, r5
 80290fa:	930a      	str	r3, [sp, #40]	; 0x28
 80290fc:	f001 f970 	bl	802a3e0 <__mcmp>
 8029100:	463a      	mov	r2, r7
 8029102:	4682      	mov	sl, r0
 8029104:	4621      	mov	r1, r4
 8029106:	4630      	mov	r0, r6
 8029108:	f001 f986 	bl	802a418 <__mdiff>
 802910c:	68c2      	ldr	r2, [r0, #12]
 802910e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029110:	4680      	mov	r8, r0
 8029112:	bb0a      	cbnz	r2, 8029158 <_dtoa_r+0x9a0>
 8029114:	4601      	mov	r1, r0
 8029116:	4628      	mov	r0, r5
 8029118:	f001 f962 	bl	802a3e0 <__mcmp>
 802911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802911e:	4602      	mov	r2, r0
 8029120:	4641      	mov	r1, r8
 8029122:	4630      	mov	r0, r6
 8029124:	920e      	str	r2, [sp, #56]	; 0x38
 8029126:	930a      	str	r3, [sp, #40]	; 0x28
 8029128:	f000 fed2 	bl	8029ed0 <_Bfree>
 802912c:	9b07      	ldr	r3, [sp, #28]
 802912e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029130:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8029134:	ea43 0102 	orr.w	r1, r3, r2
 8029138:	9b08      	ldr	r3, [sp, #32]
 802913a:	430b      	orrs	r3, r1
 802913c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802913e:	d10d      	bne.n	802915c <_dtoa_r+0x9a4>
 8029140:	2b39      	cmp	r3, #57	; 0x39
 8029142:	d029      	beq.n	8029198 <_dtoa_r+0x9e0>
 8029144:	f1ba 0f00 	cmp.w	sl, #0
 8029148:	dd01      	ble.n	802914e <_dtoa_r+0x996>
 802914a:	9b06      	ldr	r3, [sp, #24]
 802914c:	3331      	adds	r3, #49	; 0x31
 802914e:	9a02      	ldr	r2, [sp, #8]
 8029150:	7013      	strb	r3, [r2, #0]
 8029152:	e774      	b.n	802903e <_dtoa_r+0x886>
 8029154:	4638      	mov	r0, r7
 8029156:	e7b8      	b.n	80290ca <_dtoa_r+0x912>
 8029158:	2201      	movs	r2, #1
 802915a:	e7e1      	b.n	8029120 <_dtoa_r+0x968>
 802915c:	f1ba 0f00 	cmp.w	sl, #0
 8029160:	db06      	blt.n	8029170 <_dtoa_r+0x9b8>
 8029162:	9907      	ldr	r1, [sp, #28]
 8029164:	ea41 0a0a 	orr.w	sl, r1, sl
 8029168:	9908      	ldr	r1, [sp, #32]
 802916a:	ea5a 0101 	orrs.w	r1, sl, r1
 802916e:	d120      	bne.n	80291b2 <_dtoa_r+0x9fa>
 8029170:	2a00      	cmp	r2, #0
 8029172:	ddec      	ble.n	802914e <_dtoa_r+0x996>
 8029174:	4629      	mov	r1, r5
 8029176:	2201      	movs	r2, #1
 8029178:	4630      	mov	r0, r6
 802917a:	9305      	str	r3, [sp, #20]
 802917c:	f001 f8c4 	bl	802a308 <__lshift>
 8029180:	4621      	mov	r1, r4
 8029182:	4605      	mov	r5, r0
 8029184:	f001 f92c 	bl	802a3e0 <__mcmp>
 8029188:	2800      	cmp	r0, #0
 802918a:	9b05      	ldr	r3, [sp, #20]
 802918c:	dc02      	bgt.n	8029194 <_dtoa_r+0x9dc>
 802918e:	d1de      	bne.n	802914e <_dtoa_r+0x996>
 8029190:	07da      	lsls	r2, r3, #31
 8029192:	d5dc      	bpl.n	802914e <_dtoa_r+0x996>
 8029194:	2b39      	cmp	r3, #57	; 0x39
 8029196:	d1d8      	bne.n	802914a <_dtoa_r+0x992>
 8029198:	9a02      	ldr	r2, [sp, #8]
 802919a:	2339      	movs	r3, #57	; 0x39
 802919c:	7013      	strb	r3, [r2, #0]
 802919e:	4643      	mov	r3, r8
 80291a0:	4698      	mov	r8, r3
 80291a2:	3b01      	subs	r3, #1
 80291a4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80291a8:	2a39      	cmp	r2, #57	; 0x39
 80291aa:	d051      	beq.n	8029250 <_dtoa_r+0xa98>
 80291ac:	3201      	adds	r2, #1
 80291ae:	701a      	strb	r2, [r3, #0]
 80291b0:	e745      	b.n	802903e <_dtoa_r+0x886>
 80291b2:	2a00      	cmp	r2, #0
 80291b4:	dd03      	ble.n	80291be <_dtoa_r+0xa06>
 80291b6:	2b39      	cmp	r3, #57	; 0x39
 80291b8:	d0ee      	beq.n	8029198 <_dtoa_r+0x9e0>
 80291ba:	3301      	adds	r3, #1
 80291bc:	e7c7      	b.n	802914e <_dtoa_r+0x996>
 80291be:	9a05      	ldr	r2, [sp, #20]
 80291c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80291c2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80291c6:	428a      	cmp	r2, r1
 80291c8:	d02b      	beq.n	8029222 <_dtoa_r+0xa6a>
 80291ca:	4629      	mov	r1, r5
 80291cc:	2300      	movs	r3, #0
 80291ce:	220a      	movs	r2, #10
 80291d0:	4630      	mov	r0, r6
 80291d2:	f000 fe9f 	bl	8029f14 <__multadd>
 80291d6:	45b9      	cmp	r9, r7
 80291d8:	4605      	mov	r5, r0
 80291da:	f04f 0300 	mov.w	r3, #0
 80291de:	f04f 020a 	mov.w	r2, #10
 80291e2:	4649      	mov	r1, r9
 80291e4:	4630      	mov	r0, r6
 80291e6:	d107      	bne.n	80291f8 <_dtoa_r+0xa40>
 80291e8:	f000 fe94 	bl	8029f14 <__multadd>
 80291ec:	4681      	mov	r9, r0
 80291ee:	4607      	mov	r7, r0
 80291f0:	9b05      	ldr	r3, [sp, #20]
 80291f2:	3301      	adds	r3, #1
 80291f4:	9305      	str	r3, [sp, #20]
 80291f6:	e774      	b.n	80290e2 <_dtoa_r+0x92a>
 80291f8:	f000 fe8c 	bl	8029f14 <__multadd>
 80291fc:	4639      	mov	r1, r7
 80291fe:	4681      	mov	r9, r0
 8029200:	2300      	movs	r3, #0
 8029202:	220a      	movs	r2, #10
 8029204:	4630      	mov	r0, r6
 8029206:	f000 fe85 	bl	8029f14 <__multadd>
 802920a:	4607      	mov	r7, r0
 802920c:	e7f0      	b.n	80291f0 <_dtoa_r+0xa38>
 802920e:	f1ba 0f00 	cmp.w	sl, #0
 8029212:	9a00      	ldr	r2, [sp, #0]
 8029214:	bfcc      	ite	gt
 8029216:	46d0      	movgt	r8, sl
 8029218:	f04f 0801 	movle.w	r8, #1
 802921c:	4490      	add	r8, r2
 802921e:	f04f 0900 	mov.w	r9, #0
 8029222:	4629      	mov	r1, r5
 8029224:	2201      	movs	r2, #1
 8029226:	4630      	mov	r0, r6
 8029228:	9302      	str	r3, [sp, #8]
 802922a:	f001 f86d 	bl	802a308 <__lshift>
 802922e:	4621      	mov	r1, r4
 8029230:	4605      	mov	r5, r0
 8029232:	f001 f8d5 	bl	802a3e0 <__mcmp>
 8029236:	2800      	cmp	r0, #0
 8029238:	dcb1      	bgt.n	802919e <_dtoa_r+0x9e6>
 802923a:	d102      	bne.n	8029242 <_dtoa_r+0xa8a>
 802923c:	9b02      	ldr	r3, [sp, #8]
 802923e:	07db      	lsls	r3, r3, #31
 8029240:	d4ad      	bmi.n	802919e <_dtoa_r+0x9e6>
 8029242:	4643      	mov	r3, r8
 8029244:	4698      	mov	r8, r3
 8029246:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802924a:	2a30      	cmp	r2, #48	; 0x30
 802924c:	d0fa      	beq.n	8029244 <_dtoa_r+0xa8c>
 802924e:	e6f6      	b.n	802903e <_dtoa_r+0x886>
 8029250:	9a00      	ldr	r2, [sp, #0]
 8029252:	429a      	cmp	r2, r3
 8029254:	d1a4      	bne.n	80291a0 <_dtoa_r+0x9e8>
 8029256:	f10b 0b01 	add.w	fp, fp, #1
 802925a:	2331      	movs	r3, #49	; 0x31
 802925c:	e778      	b.n	8029150 <_dtoa_r+0x998>
 802925e:	4b15      	ldr	r3, [pc, #84]	; (80292b4 <_dtoa_r+0xafc>)
 8029260:	f7ff bb12 	b.w	8028888 <_dtoa_r+0xd0>
 8029264:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029266:	2b00      	cmp	r3, #0
 8029268:	f47f aaee 	bne.w	8028848 <_dtoa_r+0x90>
 802926c:	4b12      	ldr	r3, [pc, #72]	; (80292b8 <_dtoa_r+0xb00>)
 802926e:	f7ff bb0b 	b.w	8028888 <_dtoa_r+0xd0>
 8029272:	f1ba 0f00 	cmp.w	sl, #0
 8029276:	dc03      	bgt.n	8029280 <_dtoa_r+0xac8>
 8029278:	9b07      	ldr	r3, [sp, #28]
 802927a:	2b02      	cmp	r3, #2
 802927c:	f73f aec7 	bgt.w	802900e <_dtoa_r+0x856>
 8029280:	f8dd 8000 	ldr.w	r8, [sp]
 8029284:	4621      	mov	r1, r4
 8029286:	4628      	mov	r0, r5
 8029288:	f7ff fa0a 	bl	80286a0 <quorem>
 802928c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8029290:	f808 3b01 	strb.w	r3, [r8], #1
 8029294:	9a00      	ldr	r2, [sp, #0]
 8029296:	eba8 0202 	sub.w	r2, r8, r2
 802929a:	4592      	cmp	sl, r2
 802929c:	ddb7      	ble.n	802920e <_dtoa_r+0xa56>
 802929e:	4629      	mov	r1, r5
 80292a0:	2300      	movs	r3, #0
 80292a2:	220a      	movs	r2, #10
 80292a4:	4630      	mov	r0, r6
 80292a6:	f000 fe35 	bl	8029f14 <__multadd>
 80292aa:	4605      	mov	r5, r0
 80292ac:	e7ea      	b.n	8029284 <_dtoa_r+0xacc>
 80292ae:	bf00      	nop
 80292b0:	0802f13c 	.word	0x0802f13c
 80292b4:	0802e242 	.word	0x0802e242
 80292b8:	0802f0b9 	.word	0x0802f0b9

080292bc <__sflush_r>:
 80292bc:	898a      	ldrh	r2, [r1, #12]
 80292be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292c2:	4605      	mov	r5, r0
 80292c4:	0710      	lsls	r0, r2, #28
 80292c6:	460c      	mov	r4, r1
 80292c8:	d458      	bmi.n	802937c <__sflush_r+0xc0>
 80292ca:	684b      	ldr	r3, [r1, #4]
 80292cc:	2b00      	cmp	r3, #0
 80292ce:	dc05      	bgt.n	80292dc <__sflush_r+0x20>
 80292d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80292d2:	2b00      	cmp	r3, #0
 80292d4:	dc02      	bgt.n	80292dc <__sflush_r+0x20>
 80292d6:	2000      	movs	r0, #0
 80292d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80292de:	2e00      	cmp	r6, #0
 80292e0:	d0f9      	beq.n	80292d6 <__sflush_r+0x1a>
 80292e2:	2300      	movs	r3, #0
 80292e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80292e8:	682f      	ldr	r7, [r5, #0]
 80292ea:	602b      	str	r3, [r5, #0]
 80292ec:	d032      	beq.n	8029354 <__sflush_r+0x98>
 80292ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80292f0:	89a3      	ldrh	r3, [r4, #12]
 80292f2:	075a      	lsls	r2, r3, #29
 80292f4:	d505      	bpl.n	8029302 <__sflush_r+0x46>
 80292f6:	6863      	ldr	r3, [r4, #4]
 80292f8:	1ac0      	subs	r0, r0, r3
 80292fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80292fc:	b10b      	cbz	r3, 8029302 <__sflush_r+0x46>
 80292fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029300:	1ac0      	subs	r0, r0, r3
 8029302:	2300      	movs	r3, #0
 8029304:	4602      	mov	r2, r0
 8029306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029308:	6a21      	ldr	r1, [r4, #32]
 802930a:	4628      	mov	r0, r5
 802930c:	47b0      	blx	r6
 802930e:	1c43      	adds	r3, r0, #1
 8029310:	89a3      	ldrh	r3, [r4, #12]
 8029312:	d106      	bne.n	8029322 <__sflush_r+0x66>
 8029314:	6829      	ldr	r1, [r5, #0]
 8029316:	291d      	cmp	r1, #29
 8029318:	d82c      	bhi.n	8029374 <__sflush_r+0xb8>
 802931a:	4a2a      	ldr	r2, [pc, #168]	; (80293c4 <__sflush_r+0x108>)
 802931c:	40ca      	lsrs	r2, r1
 802931e:	07d6      	lsls	r6, r2, #31
 8029320:	d528      	bpl.n	8029374 <__sflush_r+0xb8>
 8029322:	2200      	movs	r2, #0
 8029324:	6062      	str	r2, [r4, #4]
 8029326:	04d9      	lsls	r1, r3, #19
 8029328:	6922      	ldr	r2, [r4, #16]
 802932a:	6022      	str	r2, [r4, #0]
 802932c:	d504      	bpl.n	8029338 <__sflush_r+0x7c>
 802932e:	1c42      	adds	r2, r0, #1
 8029330:	d101      	bne.n	8029336 <__sflush_r+0x7a>
 8029332:	682b      	ldr	r3, [r5, #0]
 8029334:	b903      	cbnz	r3, 8029338 <__sflush_r+0x7c>
 8029336:	6560      	str	r0, [r4, #84]	; 0x54
 8029338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802933a:	602f      	str	r7, [r5, #0]
 802933c:	2900      	cmp	r1, #0
 802933e:	d0ca      	beq.n	80292d6 <__sflush_r+0x1a>
 8029340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029344:	4299      	cmp	r1, r3
 8029346:	d002      	beq.n	802934e <__sflush_r+0x92>
 8029348:	4628      	mov	r0, r5
 802934a:	f7fd f945 	bl	80265d8 <_free_r>
 802934e:	2000      	movs	r0, #0
 8029350:	6360      	str	r0, [r4, #52]	; 0x34
 8029352:	e7c1      	b.n	80292d8 <__sflush_r+0x1c>
 8029354:	6a21      	ldr	r1, [r4, #32]
 8029356:	2301      	movs	r3, #1
 8029358:	4628      	mov	r0, r5
 802935a:	47b0      	blx	r6
 802935c:	1c41      	adds	r1, r0, #1
 802935e:	d1c7      	bne.n	80292f0 <__sflush_r+0x34>
 8029360:	682b      	ldr	r3, [r5, #0]
 8029362:	2b00      	cmp	r3, #0
 8029364:	d0c4      	beq.n	80292f0 <__sflush_r+0x34>
 8029366:	2b1d      	cmp	r3, #29
 8029368:	d001      	beq.n	802936e <__sflush_r+0xb2>
 802936a:	2b16      	cmp	r3, #22
 802936c:	d101      	bne.n	8029372 <__sflush_r+0xb6>
 802936e:	602f      	str	r7, [r5, #0]
 8029370:	e7b1      	b.n	80292d6 <__sflush_r+0x1a>
 8029372:	89a3      	ldrh	r3, [r4, #12]
 8029374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029378:	81a3      	strh	r3, [r4, #12]
 802937a:	e7ad      	b.n	80292d8 <__sflush_r+0x1c>
 802937c:	690f      	ldr	r7, [r1, #16]
 802937e:	2f00      	cmp	r7, #0
 8029380:	d0a9      	beq.n	80292d6 <__sflush_r+0x1a>
 8029382:	0793      	lsls	r3, r2, #30
 8029384:	680e      	ldr	r6, [r1, #0]
 8029386:	bf08      	it	eq
 8029388:	694b      	ldreq	r3, [r1, #20]
 802938a:	600f      	str	r7, [r1, #0]
 802938c:	bf18      	it	ne
 802938e:	2300      	movne	r3, #0
 8029390:	eba6 0807 	sub.w	r8, r6, r7
 8029394:	608b      	str	r3, [r1, #8]
 8029396:	f1b8 0f00 	cmp.w	r8, #0
 802939a:	dd9c      	ble.n	80292d6 <__sflush_r+0x1a>
 802939c:	6a21      	ldr	r1, [r4, #32]
 802939e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80293a0:	4643      	mov	r3, r8
 80293a2:	463a      	mov	r2, r7
 80293a4:	4628      	mov	r0, r5
 80293a6:	47b0      	blx	r6
 80293a8:	2800      	cmp	r0, #0
 80293aa:	dc06      	bgt.n	80293ba <__sflush_r+0xfe>
 80293ac:	89a3      	ldrh	r3, [r4, #12]
 80293ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80293b2:	81a3      	strh	r3, [r4, #12]
 80293b4:	f04f 30ff 	mov.w	r0, #4294967295
 80293b8:	e78e      	b.n	80292d8 <__sflush_r+0x1c>
 80293ba:	4407      	add	r7, r0
 80293bc:	eba8 0800 	sub.w	r8, r8, r0
 80293c0:	e7e9      	b.n	8029396 <__sflush_r+0xda>
 80293c2:	bf00      	nop
 80293c4:	20400001 	.word	0x20400001

080293c8 <_fflush_r>:
 80293c8:	b538      	push	{r3, r4, r5, lr}
 80293ca:	690b      	ldr	r3, [r1, #16]
 80293cc:	4605      	mov	r5, r0
 80293ce:	460c      	mov	r4, r1
 80293d0:	b913      	cbnz	r3, 80293d8 <_fflush_r+0x10>
 80293d2:	2500      	movs	r5, #0
 80293d4:	4628      	mov	r0, r5
 80293d6:	bd38      	pop	{r3, r4, r5, pc}
 80293d8:	b118      	cbz	r0, 80293e2 <_fflush_r+0x1a>
 80293da:	6983      	ldr	r3, [r0, #24]
 80293dc:	b90b      	cbnz	r3, 80293e2 <_fflush_r+0x1a>
 80293de:	f000 f887 	bl	80294f0 <__sinit>
 80293e2:	4b14      	ldr	r3, [pc, #80]	; (8029434 <_fflush_r+0x6c>)
 80293e4:	429c      	cmp	r4, r3
 80293e6:	d11b      	bne.n	8029420 <_fflush_r+0x58>
 80293e8:	686c      	ldr	r4, [r5, #4]
 80293ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80293ee:	2b00      	cmp	r3, #0
 80293f0:	d0ef      	beq.n	80293d2 <_fflush_r+0xa>
 80293f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80293f4:	07d0      	lsls	r0, r2, #31
 80293f6:	d404      	bmi.n	8029402 <_fflush_r+0x3a>
 80293f8:	0599      	lsls	r1, r3, #22
 80293fa:	d402      	bmi.n	8029402 <_fflush_r+0x3a>
 80293fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80293fe:	f000 fc88 	bl	8029d12 <__retarget_lock_acquire_recursive>
 8029402:	4628      	mov	r0, r5
 8029404:	4621      	mov	r1, r4
 8029406:	f7ff ff59 	bl	80292bc <__sflush_r>
 802940a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802940c:	07da      	lsls	r2, r3, #31
 802940e:	4605      	mov	r5, r0
 8029410:	d4e0      	bmi.n	80293d4 <_fflush_r+0xc>
 8029412:	89a3      	ldrh	r3, [r4, #12]
 8029414:	059b      	lsls	r3, r3, #22
 8029416:	d4dd      	bmi.n	80293d4 <_fflush_r+0xc>
 8029418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802941a:	f000 fc7c 	bl	8029d16 <__retarget_lock_release_recursive>
 802941e:	e7d9      	b.n	80293d4 <_fflush_r+0xc>
 8029420:	4b05      	ldr	r3, [pc, #20]	; (8029438 <_fflush_r+0x70>)
 8029422:	429c      	cmp	r4, r3
 8029424:	d101      	bne.n	802942a <_fflush_r+0x62>
 8029426:	68ac      	ldr	r4, [r5, #8]
 8029428:	e7df      	b.n	80293ea <_fflush_r+0x22>
 802942a:	4b04      	ldr	r3, [pc, #16]	; (802943c <_fflush_r+0x74>)
 802942c:	429c      	cmp	r4, r3
 802942e:	bf08      	it	eq
 8029430:	68ec      	ldreq	r4, [r5, #12]
 8029432:	e7da      	b.n	80293ea <_fflush_r+0x22>
 8029434:	0802f170 	.word	0x0802f170
 8029438:	0802f190 	.word	0x0802f190
 802943c:	0802f150 	.word	0x0802f150

08029440 <std>:
 8029440:	2300      	movs	r3, #0
 8029442:	b510      	push	{r4, lr}
 8029444:	4604      	mov	r4, r0
 8029446:	e9c0 3300 	strd	r3, r3, [r0]
 802944a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802944e:	6083      	str	r3, [r0, #8]
 8029450:	8181      	strh	r1, [r0, #12]
 8029452:	6643      	str	r3, [r0, #100]	; 0x64
 8029454:	81c2      	strh	r2, [r0, #14]
 8029456:	6183      	str	r3, [r0, #24]
 8029458:	4619      	mov	r1, r3
 802945a:	2208      	movs	r2, #8
 802945c:	305c      	adds	r0, #92	; 0x5c
 802945e:	f7fd f8b3 	bl	80265c8 <memset>
 8029462:	4b05      	ldr	r3, [pc, #20]	; (8029478 <std+0x38>)
 8029464:	6263      	str	r3, [r4, #36]	; 0x24
 8029466:	4b05      	ldr	r3, [pc, #20]	; (802947c <std+0x3c>)
 8029468:	62a3      	str	r3, [r4, #40]	; 0x28
 802946a:	4b05      	ldr	r3, [pc, #20]	; (8029480 <std+0x40>)
 802946c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802946e:	4b05      	ldr	r3, [pc, #20]	; (8029484 <std+0x44>)
 8029470:	6224      	str	r4, [r4, #32]
 8029472:	6323      	str	r3, [r4, #48]	; 0x30
 8029474:	bd10      	pop	{r4, pc}
 8029476:	bf00      	nop
 8029478:	0802aaf9 	.word	0x0802aaf9
 802947c:	0802ab1b 	.word	0x0802ab1b
 8029480:	0802ab53 	.word	0x0802ab53
 8029484:	0802ab77 	.word	0x0802ab77

08029488 <_cleanup_r>:
 8029488:	4901      	ldr	r1, [pc, #4]	; (8029490 <_cleanup_r+0x8>)
 802948a:	f000 b8af 	b.w	80295ec <_fwalk_reent>
 802948e:	bf00      	nop
 8029490:	080293c9 	.word	0x080293c9

08029494 <__sfmoreglue>:
 8029494:	b570      	push	{r4, r5, r6, lr}
 8029496:	1e4a      	subs	r2, r1, #1
 8029498:	2568      	movs	r5, #104	; 0x68
 802949a:	4355      	muls	r5, r2
 802949c:	460e      	mov	r6, r1
 802949e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80294a2:	f7fd f8e9 	bl	8026678 <_malloc_r>
 80294a6:	4604      	mov	r4, r0
 80294a8:	b140      	cbz	r0, 80294bc <__sfmoreglue+0x28>
 80294aa:	2100      	movs	r1, #0
 80294ac:	e9c0 1600 	strd	r1, r6, [r0]
 80294b0:	300c      	adds	r0, #12
 80294b2:	60a0      	str	r0, [r4, #8]
 80294b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80294b8:	f7fd f886 	bl	80265c8 <memset>
 80294bc:	4620      	mov	r0, r4
 80294be:	bd70      	pop	{r4, r5, r6, pc}

080294c0 <__sfp_lock_acquire>:
 80294c0:	4801      	ldr	r0, [pc, #4]	; (80294c8 <__sfp_lock_acquire+0x8>)
 80294c2:	f000 bc26 	b.w	8029d12 <__retarget_lock_acquire_recursive>
 80294c6:	bf00      	nop
 80294c8:	20057158 	.word	0x20057158

080294cc <__sfp_lock_release>:
 80294cc:	4801      	ldr	r0, [pc, #4]	; (80294d4 <__sfp_lock_release+0x8>)
 80294ce:	f000 bc22 	b.w	8029d16 <__retarget_lock_release_recursive>
 80294d2:	bf00      	nop
 80294d4:	20057158 	.word	0x20057158

080294d8 <__sinit_lock_acquire>:
 80294d8:	4801      	ldr	r0, [pc, #4]	; (80294e0 <__sinit_lock_acquire+0x8>)
 80294da:	f000 bc1a 	b.w	8029d12 <__retarget_lock_acquire_recursive>
 80294de:	bf00      	nop
 80294e0:	20057153 	.word	0x20057153

080294e4 <__sinit_lock_release>:
 80294e4:	4801      	ldr	r0, [pc, #4]	; (80294ec <__sinit_lock_release+0x8>)
 80294e6:	f000 bc16 	b.w	8029d16 <__retarget_lock_release_recursive>
 80294ea:	bf00      	nop
 80294ec:	20057153 	.word	0x20057153

080294f0 <__sinit>:
 80294f0:	b510      	push	{r4, lr}
 80294f2:	4604      	mov	r4, r0
 80294f4:	f7ff fff0 	bl	80294d8 <__sinit_lock_acquire>
 80294f8:	69a3      	ldr	r3, [r4, #24]
 80294fa:	b11b      	cbz	r3, 8029504 <__sinit+0x14>
 80294fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029500:	f7ff bff0 	b.w	80294e4 <__sinit_lock_release>
 8029504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029508:	6523      	str	r3, [r4, #80]	; 0x50
 802950a:	4b13      	ldr	r3, [pc, #76]	; (8029558 <__sinit+0x68>)
 802950c:	4a13      	ldr	r2, [pc, #76]	; (802955c <__sinit+0x6c>)
 802950e:	681b      	ldr	r3, [r3, #0]
 8029510:	62a2      	str	r2, [r4, #40]	; 0x28
 8029512:	42a3      	cmp	r3, r4
 8029514:	bf04      	itt	eq
 8029516:	2301      	moveq	r3, #1
 8029518:	61a3      	streq	r3, [r4, #24]
 802951a:	4620      	mov	r0, r4
 802951c:	f000 f820 	bl	8029560 <__sfp>
 8029520:	6060      	str	r0, [r4, #4]
 8029522:	4620      	mov	r0, r4
 8029524:	f000 f81c 	bl	8029560 <__sfp>
 8029528:	60a0      	str	r0, [r4, #8]
 802952a:	4620      	mov	r0, r4
 802952c:	f000 f818 	bl	8029560 <__sfp>
 8029530:	2200      	movs	r2, #0
 8029532:	60e0      	str	r0, [r4, #12]
 8029534:	2104      	movs	r1, #4
 8029536:	6860      	ldr	r0, [r4, #4]
 8029538:	f7ff ff82 	bl	8029440 <std>
 802953c:	68a0      	ldr	r0, [r4, #8]
 802953e:	2201      	movs	r2, #1
 8029540:	2109      	movs	r1, #9
 8029542:	f7ff ff7d 	bl	8029440 <std>
 8029546:	68e0      	ldr	r0, [r4, #12]
 8029548:	2202      	movs	r2, #2
 802954a:	2112      	movs	r1, #18
 802954c:	f7ff ff78 	bl	8029440 <std>
 8029550:	2301      	movs	r3, #1
 8029552:	61a3      	str	r3, [r4, #24]
 8029554:	e7d2      	b.n	80294fc <__sinit+0xc>
 8029556:	bf00      	nop
 8029558:	0802ef18 	.word	0x0802ef18
 802955c:	08029489 	.word	0x08029489

08029560 <__sfp>:
 8029560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029562:	4607      	mov	r7, r0
 8029564:	f7ff ffac 	bl	80294c0 <__sfp_lock_acquire>
 8029568:	4b1e      	ldr	r3, [pc, #120]	; (80295e4 <__sfp+0x84>)
 802956a:	681e      	ldr	r6, [r3, #0]
 802956c:	69b3      	ldr	r3, [r6, #24]
 802956e:	b913      	cbnz	r3, 8029576 <__sfp+0x16>
 8029570:	4630      	mov	r0, r6
 8029572:	f7ff ffbd 	bl	80294f0 <__sinit>
 8029576:	3648      	adds	r6, #72	; 0x48
 8029578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802957c:	3b01      	subs	r3, #1
 802957e:	d503      	bpl.n	8029588 <__sfp+0x28>
 8029580:	6833      	ldr	r3, [r6, #0]
 8029582:	b30b      	cbz	r3, 80295c8 <__sfp+0x68>
 8029584:	6836      	ldr	r6, [r6, #0]
 8029586:	e7f7      	b.n	8029578 <__sfp+0x18>
 8029588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802958c:	b9d5      	cbnz	r5, 80295c4 <__sfp+0x64>
 802958e:	4b16      	ldr	r3, [pc, #88]	; (80295e8 <__sfp+0x88>)
 8029590:	60e3      	str	r3, [r4, #12]
 8029592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8029596:	6665      	str	r5, [r4, #100]	; 0x64
 8029598:	f000 fbba 	bl	8029d10 <__retarget_lock_init_recursive>
 802959c:	f7ff ff96 	bl	80294cc <__sfp_lock_release>
 80295a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80295a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80295a8:	6025      	str	r5, [r4, #0]
 80295aa:	61a5      	str	r5, [r4, #24]
 80295ac:	2208      	movs	r2, #8
 80295ae:	4629      	mov	r1, r5
 80295b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80295b4:	f7fd f808 	bl	80265c8 <memset>
 80295b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80295bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80295c0:	4620      	mov	r0, r4
 80295c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80295c4:	3468      	adds	r4, #104	; 0x68
 80295c6:	e7d9      	b.n	802957c <__sfp+0x1c>
 80295c8:	2104      	movs	r1, #4
 80295ca:	4638      	mov	r0, r7
 80295cc:	f7ff ff62 	bl	8029494 <__sfmoreglue>
 80295d0:	4604      	mov	r4, r0
 80295d2:	6030      	str	r0, [r6, #0]
 80295d4:	2800      	cmp	r0, #0
 80295d6:	d1d5      	bne.n	8029584 <__sfp+0x24>
 80295d8:	f7ff ff78 	bl	80294cc <__sfp_lock_release>
 80295dc:	230c      	movs	r3, #12
 80295de:	603b      	str	r3, [r7, #0]
 80295e0:	e7ee      	b.n	80295c0 <__sfp+0x60>
 80295e2:	bf00      	nop
 80295e4:	0802ef18 	.word	0x0802ef18
 80295e8:	ffff0001 	.word	0xffff0001

080295ec <_fwalk_reent>:
 80295ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80295f0:	4606      	mov	r6, r0
 80295f2:	4688      	mov	r8, r1
 80295f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80295f8:	2700      	movs	r7, #0
 80295fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80295fe:	f1b9 0901 	subs.w	r9, r9, #1
 8029602:	d505      	bpl.n	8029610 <_fwalk_reent+0x24>
 8029604:	6824      	ldr	r4, [r4, #0]
 8029606:	2c00      	cmp	r4, #0
 8029608:	d1f7      	bne.n	80295fa <_fwalk_reent+0xe>
 802960a:	4638      	mov	r0, r7
 802960c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029610:	89ab      	ldrh	r3, [r5, #12]
 8029612:	2b01      	cmp	r3, #1
 8029614:	d907      	bls.n	8029626 <_fwalk_reent+0x3a>
 8029616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802961a:	3301      	adds	r3, #1
 802961c:	d003      	beq.n	8029626 <_fwalk_reent+0x3a>
 802961e:	4629      	mov	r1, r5
 8029620:	4630      	mov	r0, r6
 8029622:	47c0      	blx	r8
 8029624:	4307      	orrs	r7, r0
 8029626:	3568      	adds	r5, #104	; 0x68
 8029628:	e7e9      	b.n	80295fe <_fwalk_reent+0x12>

0802962a <rshift>:
 802962a:	6903      	ldr	r3, [r0, #16]
 802962c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029634:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029638:	f100 0414 	add.w	r4, r0, #20
 802963c:	dd45      	ble.n	80296ca <rshift+0xa0>
 802963e:	f011 011f 	ands.w	r1, r1, #31
 8029642:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029646:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802964a:	d10c      	bne.n	8029666 <rshift+0x3c>
 802964c:	f100 0710 	add.w	r7, r0, #16
 8029650:	4629      	mov	r1, r5
 8029652:	42b1      	cmp	r1, r6
 8029654:	d334      	bcc.n	80296c0 <rshift+0x96>
 8029656:	1a9b      	subs	r3, r3, r2
 8029658:	009b      	lsls	r3, r3, #2
 802965a:	1eea      	subs	r2, r5, #3
 802965c:	4296      	cmp	r6, r2
 802965e:	bf38      	it	cc
 8029660:	2300      	movcc	r3, #0
 8029662:	4423      	add	r3, r4
 8029664:	e015      	b.n	8029692 <rshift+0x68>
 8029666:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802966a:	f1c1 0820 	rsb	r8, r1, #32
 802966e:	40cf      	lsrs	r7, r1
 8029670:	f105 0e04 	add.w	lr, r5, #4
 8029674:	46a1      	mov	r9, r4
 8029676:	4576      	cmp	r6, lr
 8029678:	46f4      	mov	ip, lr
 802967a:	d815      	bhi.n	80296a8 <rshift+0x7e>
 802967c:	1a9b      	subs	r3, r3, r2
 802967e:	009a      	lsls	r2, r3, #2
 8029680:	3a04      	subs	r2, #4
 8029682:	3501      	adds	r5, #1
 8029684:	42ae      	cmp	r6, r5
 8029686:	bf38      	it	cc
 8029688:	2200      	movcc	r2, #0
 802968a:	18a3      	adds	r3, r4, r2
 802968c:	50a7      	str	r7, [r4, r2]
 802968e:	b107      	cbz	r7, 8029692 <rshift+0x68>
 8029690:	3304      	adds	r3, #4
 8029692:	1b1a      	subs	r2, r3, r4
 8029694:	42a3      	cmp	r3, r4
 8029696:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802969a:	bf08      	it	eq
 802969c:	2300      	moveq	r3, #0
 802969e:	6102      	str	r2, [r0, #16]
 80296a0:	bf08      	it	eq
 80296a2:	6143      	streq	r3, [r0, #20]
 80296a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80296a8:	f8dc c000 	ldr.w	ip, [ip]
 80296ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80296b0:	ea4c 0707 	orr.w	r7, ip, r7
 80296b4:	f849 7b04 	str.w	r7, [r9], #4
 80296b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80296bc:	40cf      	lsrs	r7, r1
 80296be:	e7da      	b.n	8029676 <rshift+0x4c>
 80296c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80296c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80296c8:	e7c3      	b.n	8029652 <rshift+0x28>
 80296ca:	4623      	mov	r3, r4
 80296cc:	e7e1      	b.n	8029692 <rshift+0x68>

080296ce <__hexdig_fun>:
 80296ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80296d2:	2b09      	cmp	r3, #9
 80296d4:	d802      	bhi.n	80296dc <__hexdig_fun+0xe>
 80296d6:	3820      	subs	r0, #32
 80296d8:	b2c0      	uxtb	r0, r0
 80296da:	4770      	bx	lr
 80296dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80296e0:	2b05      	cmp	r3, #5
 80296e2:	d801      	bhi.n	80296e8 <__hexdig_fun+0x1a>
 80296e4:	3847      	subs	r0, #71	; 0x47
 80296e6:	e7f7      	b.n	80296d8 <__hexdig_fun+0xa>
 80296e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80296ec:	2b05      	cmp	r3, #5
 80296ee:	d801      	bhi.n	80296f4 <__hexdig_fun+0x26>
 80296f0:	3827      	subs	r0, #39	; 0x27
 80296f2:	e7f1      	b.n	80296d8 <__hexdig_fun+0xa>
 80296f4:	2000      	movs	r0, #0
 80296f6:	4770      	bx	lr

080296f8 <__gethex>:
 80296f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296fc:	ed2d 8b02 	vpush	{d8}
 8029700:	b089      	sub	sp, #36	; 0x24
 8029702:	ee08 0a10 	vmov	s16, r0
 8029706:	9304      	str	r3, [sp, #16]
 8029708:	4bbc      	ldr	r3, [pc, #752]	; (80299fc <__gethex+0x304>)
 802970a:	681b      	ldr	r3, [r3, #0]
 802970c:	9301      	str	r3, [sp, #4]
 802970e:	4618      	mov	r0, r3
 8029710:	468b      	mov	fp, r1
 8029712:	4690      	mov	r8, r2
 8029714:	f7d6 fd94 	bl	8000240 <strlen>
 8029718:	9b01      	ldr	r3, [sp, #4]
 802971a:	f8db 2000 	ldr.w	r2, [fp]
 802971e:	4403      	add	r3, r0
 8029720:	4682      	mov	sl, r0
 8029722:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8029726:	9305      	str	r3, [sp, #20]
 8029728:	1c93      	adds	r3, r2, #2
 802972a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802972e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029732:	32fe      	adds	r2, #254	; 0xfe
 8029734:	18d1      	adds	r1, r2, r3
 8029736:	461f      	mov	r7, r3
 8029738:	f813 0b01 	ldrb.w	r0, [r3], #1
 802973c:	9100      	str	r1, [sp, #0]
 802973e:	2830      	cmp	r0, #48	; 0x30
 8029740:	d0f8      	beq.n	8029734 <__gethex+0x3c>
 8029742:	f7ff ffc4 	bl	80296ce <__hexdig_fun>
 8029746:	4604      	mov	r4, r0
 8029748:	2800      	cmp	r0, #0
 802974a:	d13a      	bne.n	80297c2 <__gethex+0xca>
 802974c:	9901      	ldr	r1, [sp, #4]
 802974e:	4652      	mov	r2, sl
 8029750:	4638      	mov	r0, r7
 8029752:	f001 fa14 	bl	802ab7e <strncmp>
 8029756:	4605      	mov	r5, r0
 8029758:	2800      	cmp	r0, #0
 802975a:	d168      	bne.n	802982e <__gethex+0x136>
 802975c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029760:	eb07 060a 	add.w	r6, r7, sl
 8029764:	f7ff ffb3 	bl	80296ce <__hexdig_fun>
 8029768:	2800      	cmp	r0, #0
 802976a:	d062      	beq.n	8029832 <__gethex+0x13a>
 802976c:	4633      	mov	r3, r6
 802976e:	7818      	ldrb	r0, [r3, #0]
 8029770:	2830      	cmp	r0, #48	; 0x30
 8029772:	461f      	mov	r7, r3
 8029774:	f103 0301 	add.w	r3, r3, #1
 8029778:	d0f9      	beq.n	802976e <__gethex+0x76>
 802977a:	f7ff ffa8 	bl	80296ce <__hexdig_fun>
 802977e:	2301      	movs	r3, #1
 8029780:	fab0 f480 	clz	r4, r0
 8029784:	0964      	lsrs	r4, r4, #5
 8029786:	4635      	mov	r5, r6
 8029788:	9300      	str	r3, [sp, #0]
 802978a:	463a      	mov	r2, r7
 802978c:	4616      	mov	r6, r2
 802978e:	3201      	adds	r2, #1
 8029790:	7830      	ldrb	r0, [r6, #0]
 8029792:	f7ff ff9c 	bl	80296ce <__hexdig_fun>
 8029796:	2800      	cmp	r0, #0
 8029798:	d1f8      	bne.n	802978c <__gethex+0x94>
 802979a:	9901      	ldr	r1, [sp, #4]
 802979c:	4652      	mov	r2, sl
 802979e:	4630      	mov	r0, r6
 80297a0:	f001 f9ed 	bl	802ab7e <strncmp>
 80297a4:	b980      	cbnz	r0, 80297c8 <__gethex+0xd0>
 80297a6:	b94d      	cbnz	r5, 80297bc <__gethex+0xc4>
 80297a8:	eb06 050a 	add.w	r5, r6, sl
 80297ac:	462a      	mov	r2, r5
 80297ae:	4616      	mov	r6, r2
 80297b0:	3201      	adds	r2, #1
 80297b2:	7830      	ldrb	r0, [r6, #0]
 80297b4:	f7ff ff8b 	bl	80296ce <__hexdig_fun>
 80297b8:	2800      	cmp	r0, #0
 80297ba:	d1f8      	bne.n	80297ae <__gethex+0xb6>
 80297bc:	1bad      	subs	r5, r5, r6
 80297be:	00ad      	lsls	r5, r5, #2
 80297c0:	e004      	b.n	80297cc <__gethex+0xd4>
 80297c2:	2400      	movs	r4, #0
 80297c4:	4625      	mov	r5, r4
 80297c6:	e7e0      	b.n	802978a <__gethex+0x92>
 80297c8:	2d00      	cmp	r5, #0
 80297ca:	d1f7      	bne.n	80297bc <__gethex+0xc4>
 80297cc:	7833      	ldrb	r3, [r6, #0]
 80297ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80297d2:	2b50      	cmp	r3, #80	; 0x50
 80297d4:	d13b      	bne.n	802984e <__gethex+0x156>
 80297d6:	7873      	ldrb	r3, [r6, #1]
 80297d8:	2b2b      	cmp	r3, #43	; 0x2b
 80297da:	d02c      	beq.n	8029836 <__gethex+0x13e>
 80297dc:	2b2d      	cmp	r3, #45	; 0x2d
 80297de:	d02e      	beq.n	802983e <__gethex+0x146>
 80297e0:	1c71      	adds	r1, r6, #1
 80297e2:	f04f 0900 	mov.w	r9, #0
 80297e6:	7808      	ldrb	r0, [r1, #0]
 80297e8:	f7ff ff71 	bl	80296ce <__hexdig_fun>
 80297ec:	1e43      	subs	r3, r0, #1
 80297ee:	b2db      	uxtb	r3, r3
 80297f0:	2b18      	cmp	r3, #24
 80297f2:	d82c      	bhi.n	802984e <__gethex+0x156>
 80297f4:	f1a0 0210 	sub.w	r2, r0, #16
 80297f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80297fc:	f7ff ff67 	bl	80296ce <__hexdig_fun>
 8029800:	1e43      	subs	r3, r0, #1
 8029802:	b2db      	uxtb	r3, r3
 8029804:	2b18      	cmp	r3, #24
 8029806:	d91d      	bls.n	8029844 <__gethex+0x14c>
 8029808:	f1b9 0f00 	cmp.w	r9, #0
 802980c:	d000      	beq.n	8029810 <__gethex+0x118>
 802980e:	4252      	negs	r2, r2
 8029810:	4415      	add	r5, r2
 8029812:	f8cb 1000 	str.w	r1, [fp]
 8029816:	b1e4      	cbz	r4, 8029852 <__gethex+0x15a>
 8029818:	9b00      	ldr	r3, [sp, #0]
 802981a:	2b00      	cmp	r3, #0
 802981c:	bf14      	ite	ne
 802981e:	2700      	movne	r7, #0
 8029820:	2706      	moveq	r7, #6
 8029822:	4638      	mov	r0, r7
 8029824:	b009      	add	sp, #36	; 0x24
 8029826:	ecbd 8b02 	vpop	{d8}
 802982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802982e:	463e      	mov	r6, r7
 8029830:	4625      	mov	r5, r4
 8029832:	2401      	movs	r4, #1
 8029834:	e7ca      	b.n	80297cc <__gethex+0xd4>
 8029836:	f04f 0900 	mov.w	r9, #0
 802983a:	1cb1      	adds	r1, r6, #2
 802983c:	e7d3      	b.n	80297e6 <__gethex+0xee>
 802983e:	f04f 0901 	mov.w	r9, #1
 8029842:	e7fa      	b.n	802983a <__gethex+0x142>
 8029844:	230a      	movs	r3, #10
 8029846:	fb03 0202 	mla	r2, r3, r2, r0
 802984a:	3a10      	subs	r2, #16
 802984c:	e7d4      	b.n	80297f8 <__gethex+0x100>
 802984e:	4631      	mov	r1, r6
 8029850:	e7df      	b.n	8029812 <__gethex+0x11a>
 8029852:	1bf3      	subs	r3, r6, r7
 8029854:	3b01      	subs	r3, #1
 8029856:	4621      	mov	r1, r4
 8029858:	2b07      	cmp	r3, #7
 802985a:	dc0b      	bgt.n	8029874 <__gethex+0x17c>
 802985c:	ee18 0a10 	vmov	r0, s16
 8029860:	f000 faf6 	bl	8029e50 <_Balloc>
 8029864:	4604      	mov	r4, r0
 8029866:	b940      	cbnz	r0, 802987a <__gethex+0x182>
 8029868:	4b65      	ldr	r3, [pc, #404]	; (8029a00 <__gethex+0x308>)
 802986a:	4602      	mov	r2, r0
 802986c:	21de      	movs	r1, #222	; 0xde
 802986e:	4865      	ldr	r0, [pc, #404]	; (8029a04 <__gethex+0x30c>)
 8029870:	f7fc fe1e 	bl	80264b0 <__assert_func>
 8029874:	3101      	adds	r1, #1
 8029876:	105b      	asrs	r3, r3, #1
 8029878:	e7ee      	b.n	8029858 <__gethex+0x160>
 802987a:	f100 0914 	add.w	r9, r0, #20
 802987e:	f04f 0b00 	mov.w	fp, #0
 8029882:	f1ca 0301 	rsb	r3, sl, #1
 8029886:	f8cd 9008 	str.w	r9, [sp, #8]
 802988a:	f8cd b000 	str.w	fp, [sp]
 802988e:	9306      	str	r3, [sp, #24]
 8029890:	42b7      	cmp	r7, r6
 8029892:	d340      	bcc.n	8029916 <__gethex+0x21e>
 8029894:	9802      	ldr	r0, [sp, #8]
 8029896:	9b00      	ldr	r3, [sp, #0]
 8029898:	f840 3b04 	str.w	r3, [r0], #4
 802989c:	eba0 0009 	sub.w	r0, r0, r9
 80298a0:	1080      	asrs	r0, r0, #2
 80298a2:	0146      	lsls	r6, r0, #5
 80298a4:	6120      	str	r0, [r4, #16]
 80298a6:	4618      	mov	r0, r3
 80298a8:	f000 fbc8 	bl	802a03c <__hi0bits>
 80298ac:	1a30      	subs	r0, r6, r0
 80298ae:	f8d8 6000 	ldr.w	r6, [r8]
 80298b2:	42b0      	cmp	r0, r6
 80298b4:	dd63      	ble.n	802997e <__gethex+0x286>
 80298b6:	1b87      	subs	r7, r0, r6
 80298b8:	4639      	mov	r1, r7
 80298ba:	4620      	mov	r0, r4
 80298bc:	f000 ff63 	bl	802a786 <__any_on>
 80298c0:	4682      	mov	sl, r0
 80298c2:	b1a8      	cbz	r0, 80298f0 <__gethex+0x1f8>
 80298c4:	1e7b      	subs	r3, r7, #1
 80298c6:	1159      	asrs	r1, r3, #5
 80298c8:	f003 021f 	and.w	r2, r3, #31
 80298cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80298d0:	f04f 0a01 	mov.w	sl, #1
 80298d4:	fa0a f202 	lsl.w	r2, sl, r2
 80298d8:	420a      	tst	r2, r1
 80298da:	d009      	beq.n	80298f0 <__gethex+0x1f8>
 80298dc:	4553      	cmp	r3, sl
 80298de:	dd05      	ble.n	80298ec <__gethex+0x1f4>
 80298e0:	1eb9      	subs	r1, r7, #2
 80298e2:	4620      	mov	r0, r4
 80298e4:	f000 ff4f 	bl	802a786 <__any_on>
 80298e8:	2800      	cmp	r0, #0
 80298ea:	d145      	bne.n	8029978 <__gethex+0x280>
 80298ec:	f04f 0a02 	mov.w	sl, #2
 80298f0:	4639      	mov	r1, r7
 80298f2:	4620      	mov	r0, r4
 80298f4:	f7ff fe99 	bl	802962a <rshift>
 80298f8:	443d      	add	r5, r7
 80298fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80298fe:	42ab      	cmp	r3, r5
 8029900:	da4c      	bge.n	802999c <__gethex+0x2a4>
 8029902:	ee18 0a10 	vmov	r0, s16
 8029906:	4621      	mov	r1, r4
 8029908:	f000 fae2 	bl	8029ed0 <_Bfree>
 802990c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802990e:	2300      	movs	r3, #0
 8029910:	6013      	str	r3, [r2, #0]
 8029912:	27a3      	movs	r7, #163	; 0xa3
 8029914:	e785      	b.n	8029822 <__gethex+0x12a>
 8029916:	1e73      	subs	r3, r6, #1
 8029918:	9a05      	ldr	r2, [sp, #20]
 802991a:	9303      	str	r3, [sp, #12]
 802991c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029920:	4293      	cmp	r3, r2
 8029922:	d019      	beq.n	8029958 <__gethex+0x260>
 8029924:	f1bb 0f20 	cmp.w	fp, #32
 8029928:	d107      	bne.n	802993a <__gethex+0x242>
 802992a:	9b02      	ldr	r3, [sp, #8]
 802992c:	9a00      	ldr	r2, [sp, #0]
 802992e:	f843 2b04 	str.w	r2, [r3], #4
 8029932:	9302      	str	r3, [sp, #8]
 8029934:	2300      	movs	r3, #0
 8029936:	9300      	str	r3, [sp, #0]
 8029938:	469b      	mov	fp, r3
 802993a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802993e:	f7ff fec6 	bl	80296ce <__hexdig_fun>
 8029942:	9b00      	ldr	r3, [sp, #0]
 8029944:	f000 000f 	and.w	r0, r0, #15
 8029948:	fa00 f00b 	lsl.w	r0, r0, fp
 802994c:	4303      	orrs	r3, r0
 802994e:	9300      	str	r3, [sp, #0]
 8029950:	f10b 0b04 	add.w	fp, fp, #4
 8029954:	9b03      	ldr	r3, [sp, #12]
 8029956:	e00d      	b.n	8029974 <__gethex+0x27c>
 8029958:	9b03      	ldr	r3, [sp, #12]
 802995a:	9a06      	ldr	r2, [sp, #24]
 802995c:	4413      	add	r3, r2
 802995e:	42bb      	cmp	r3, r7
 8029960:	d3e0      	bcc.n	8029924 <__gethex+0x22c>
 8029962:	4618      	mov	r0, r3
 8029964:	9901      	ldr	r1, [sp, #4]
 8029966:	9307      	str	r3, [sp, #28]
 8029968:	4652      	mov	r2, sl
 802996a:	f001 f908 	bl	802ab7e <strncmp>
 802996e:	9b07      	ldr	r3, [sp, #28]
 8029970:	2800      	cmp	r0, #0
 8029972:	d1d7      	bne.n	8029924 <__gethex+0x22c>
 8029974:	461e      	mov	r6, r3
 8029976:	e78b      	b.n	8029890 <__gethex+0x198>
 8029978:	f04f 0a03 	mov.w	sl, #3
 802997c:	e7b8      	b.n	80298f0 <__gethex+0x1f8>
 802997e:	da0a      	bge.n	8029996 <__gethex+0x29e>
 8029980:	1a37      	subs	r7, r6, r0
 8029982:	4621      	mov	r1, r4
 8029984:	ee18 0a10 	vmov	r0, s16
 8029988:	463a      	mov	r2, r7
 802998a:	f000 fcbd 	bl	802a308 <__lshift>
 802998e:	1bed      	subs	r5, r5, r7
 8029990:	4604      	mov	r4, r0
 8029992:	f100 0914 	add.w	r9, r0, #20
 8029996:	f04f 0a00 	mov.w	sl, #0
 802999a:	e7ae      	b.n	80298fa <__gethex+0x202>
 802999c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80299a0:	42a8      	cmp	r0, r5
 80299a2:	dd72      	ble.n	8029a8a <__gethex+0x392>
 80299a4:	1b45      	subs	r5, r0, r5
 80299a6:	42ae      	cmp	r6, r5
 80299a8:	dc36      	bgt.n	8029a18 <__gethex+0x320>
 80299aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80299ae:	2b02      	cmp	r3, #2
 80299b0:	d02a      	beq.n	8029a08 <__gethex+0x310>
 80299b2:	2b03      	cmp	r3, #3
 80299b4:	d02c      	beq.n	8029a10 <__gethex+0x318>
 80299b6:	2b01      	cmp	r3, #1
 80299b8:	d115      	bne.n	80299e6 <__gethex+0x2ee>
 80299ba:	42ae      	cmp	r6, r5
 80299bc:	d113      	bne.n	80299e6 <__gethex+0x2ee>
 80299be:	2e01      	cmp	r6, #1
 80299c0:	d10b      	bne.n	80299da <__gethex+0x2e2>
 80299c2:	9a04      	ldr	r2, [sp, #16]
 80299c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80299c8:	6013      	str	r3, [r2, #0]
 80299ca:	2301      	movs	r3, #1
 80299cc:	6123      	str	r3, [r4, #16]
 80299ce:	f8c9 3000 	str.w	r3, [r9]
 80299d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80299d4:	2762      	movs	r7, #98	; 0x62
 80299d6:	601c      	str	r4, [r3, #0]
 80299d8:	e723      	b.n	8029822 <__gethex+0x12a>
 80299da:	1e71      	subs	r1, r6, #1
 80299dc:	4620      	mov	r0, r4
 80299de:	f000 fed2 	bl	802a786 <__any_on>
 80299e2:	2800      	cmp	r0, #0
 80299e4:	d1ed      	bne.n	80299c2 <__gethex+0x2ca>
 80299e6:	ee18 0a10 	vmov	r0, s16
 80299ea:	4621      	mov	r1, r4
 80299ec:	f000 fa70 	bl	8029ed0 <_Bfree>
 80299f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80299f2:	2300      	movs	r3, #0
 80299f4:	6013      	str	r3, [r2, #0]
 80299f6:	2750      	movs	r7, #80	; 0x50
 80299f8:	e713      	b.n	8029822 <__gethex+0x12a>
 80299fa:	bf00      	nop
 80299fc:	0802f21c 	.word	0x0802f21c
 8029a00:	0802f13c 	.word	0x0802f13c
 8029a04:	0802f1b0 	.word	0x0802f1b0
 8029a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029a0a:	2b00      	cmp	r3, #0
 8029a0c:	d1eb      	bne.n	80299e6 <__gethex+0x2ee>
 8029a0e:	e7d8      	b.n	80299c2 <__gethex+0x2ca>
 8029a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029a12:	2b00      	cmp	r3, #0
 8029a14:	d1d5      	bne.n	80299c2 <__gethex+0x2ca>
 8029a16:	e7e6      	b.n	80299e6 <__gethex+0x2ee>
 8029a18:	1e6f      	subs	r7, r5, #1
 8029a1a:	f1ba 0f00 	cmp.w	sl, #0
 8029a1e:	d131      	bne.n	8029a84 <__gethex+0x38c>
 8029a20:	b127      	cbz	r7, 8029a2c <__gethex+0x334>
 8029a22:	4639      	mov	r1, r7
 8029a24:	4620      	mov	r0, r4
 8029a26:	f000 feae 	bl	802a786 <__any_on>
 8029a2a:	4682      	mov	sl, r0
 8029a2c:	117b      	asrs	r3, r7, #5
 8029a2e:	2101      	movs	r1, #1
 8029a30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029a34:	f007 071f 	and.w	r7, r7, #31
 8029a38:	fa01 f707 	lsl.w	r7, r1, r7
 8029a3c:	421f      	tst	r7, r3
 8029a3e:	4629      	mov	r1, r5
 8029a40:	4620      	mov	r0, r4
 8029a42:	bf18      	it	ne
 8029a44:	f04a 0a02 	orrne.w	sl, sl, #2
 8029a48:	1b76      	subs	r6, r6, r5
 8029a4a:	f7ff fdee 	bl	802962a <rshift>
 8029a4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029a52:	2702      	movs	r7, #2
 8029a54:	f1ba 0f00 	cmp.w	sl, #0
 8029a58:	d048      	beq.n	8029aec <__gethex+0x3f4>
 8029a5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029a5e:	2b02      	cmp	r3, #2
 8029a60:	d015      	beq.n	8029a8e <__gethex+0x396>
 8029a62:	2b03      	cmp	r3, #3
 8029a64:	d017      	beq.n	8029a96 <__gethex+0x39e>
 8029a66:	2b01      	cmp	r3, #1
 8029a68:	d109      	bne.n	8029a7e <__gethex+0x386>
 8029a6a:	f01a 0f02 	tst.w	sl, #2
 8029a6e:	d006      	beq.n	8029a7e <__gethex+0x386>
 8029a70:	f8d9 0000 	ldr.w	r0, [r9]
 8029a74:	ea4a 0a00 	orr.w	sl, sl, r0
 8029a78:	f01a 0f01 	tst.w	sl, #1
 8029a7c:	d10e      	bne.n	8029a9c <__gethex+0x3a4>
 8029a7e:	f047 0710 	orr.w	r7, r7, #16
 8029a82:	e033      	b.n	8029aec <__gethex+0x3f4>
 8029a84:	f04f 0a01 	mov.w	sl, #1
 8029a88:	e7d0      	b.n	8029a2c <__gethex+0x334>
 8029a8a:	2701      	movs	r7, #1
 8029a8c:	e7e2      	b.n	8029a54 <__gethex+0x35c>
 8029a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029a90:	f1c3 0301 	rsb	r3, r3, #1
 8029a94:	9315      	str	r3, [sp, #84]	; 0x54
 8029a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029a98:	2b00      	cmp	r3, #0
 8029a9a:	d0f0      	beq.n	8029a7e <__gethex+0x386>
 8029a9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8029aa0:	f104 0314 	add.w	r3, r4, #20
 8029aa4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029aa8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029aac:	f04f 0c00 	mov.w	ip, #0
 8029ab0:	4618      	mov	r0, r3
 8029ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8029ab6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029aba:	d01c      	beq.n	8029af6 <__gethex+0x3fe>
 8029abc:	3201      	adds	r2, #1
 8029abe:	6002      	str	r2, [r0, #0]
 8029ac0:	2f02      	cmp	r7, #2
 8029ac2:	f104 0314 	add.w	r3, r4, #20
 8029ac6:	d13f      	bne.n	8029b48 <__gethex+0x450>
 8029ac8:	f8d8 2000 	ldr.w	r2, [r8]
 8029acc:	3a01      	subs	r2, #1
 8029ace:	42b2      	cmp	r2, r6
 8029ad0:	d10a      	bne.n	8029ae8 <__gethex+0x3f0>
 8029ad2:	1171      	asrs	r1, r6, #5
 8029ad4:	2201      	movs	r2, #1
 8029ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8029ada:	f006 061f 	and.w	r6, r6, #31
 8029ade:	fa02 f606 	lsl.w	r6, r2, r6
 8029ae2:	421e      	tst	r6, r3
 8029ae4:	bf18      	it	ne
 8029ae6:	4617      	movne	r7, r2
 8029ae8:	f047 0720 	orr.w	r7, r7, #32
 8029aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029aee:	601c      	str	r4, [r3, #0]
 8029af0:	9b04      	ldr	r3, [sp, #16]
 8029af2:	601d      	str	r5, [r3, #0]
 8029af4:	e695      	b.n	8029822 <__gethex+0x12a>
 8029af6:	4299      	cmp	r1, r3
 8029af8:	f843 cc04 	str.w	ip, [r3, #-4]
 8029afc:	d8d8      	bhi.n	8029ab0 <__gethex+0x3b8>
 8029afe:	68a3      	ldr	r3, [r4, #8]
 8029b00:	459b      	cmp	fp, r3
 8029b02:	db19      	blt.n	8029b38 <__gethex+0x440>
 8029b04:	6861      	ldr	r1, [r4, #4]
 8029b06:	ee18 0a10 	vmov	r0, s16
 8029b0a:	3101      	adds	r1, #1
 8029b0c:	f000 f9a0 	bl	8029e50 <_Balloc>
 8029b10:	4681      	mov	r9, r0
 8029b12:	b918      	cbnz	r0, 8029b1c <__gethex+0x424>
 8029b14:	4b1a      	ldr	r3, [pc, #104]	; (8029b80 <__gethex+0x488>)
 8029b16:	4602      	mov	r2, r0
 8029b18:	2184      	movs	r1, #132	; 0x84
 8029b1a:	e6a8      	b.n	802986e <__gethex+0x176>
 8029b1c:	6922      	ldr	r2, [r4, #16]
 8029b1e:	3202      	adds	r2, #2
 8029b20:	f104 010c 	add.w	r1, r4, #12
 8029b24:	0092      	lsls	r2, r2, #2
 8029b26:	300c      	adds	r0, #12
 8029b28:	f7fc fd40 	bl	80265ac <memcpy>
 8029b2c:	4621      	mov	r1, r4
 8029b2e:	ee18 0a10 	vmov	r0, s16
 8029b32:	f000 f9cd 	bl	8029ed0 <_Bfree>
 8029b36:	464c      	mov	r4, r9
 8029b38:	6923      	ldr	r3, [r4, #16]
 8029b3a:	1c5a      	adds	r2, r3, #1
 8029b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029b40:	6122      	str	r2, [r4, #16]
 8029b42:	2201      	movs	r2, #1
 8029b44:	615a      	str	r2, [r3, #20]
 8029b46:	e7bb      	b.n	8029ac0 <__gethex+0x3c8>
 8029b48:	6922      	ldr	r2, [r4, #16]
 8029b4a:	455a      	cmp	r2, fp
 8029b4c:	dd0b      	ble.n	8029b66 <__gethex+0x46e>
 8029b4e:	2101      	movs	r1, #1
 8029b50:	4620      	mov	r0, r4
 8029b52:	f7ff fd6a 	bl	802962a <rshift>
 8029b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8029b5a:	3501      	adds	r5, #1
 8029b5c:	42ab      	cmp	r3, r5
 8029b5e:	f6ff aed0 	blt.w	8029902 <__gethex+0x20a>
 8029b62:	2701      	movs	r7, #1
 8029b64:	e7c0      	b.n	8029ae8 <__gethex+0x3f0>
 8029b66:	f016 061f 	ands.w	r6, r6, #31
 8029b6a:	d0fa      	beq.n	8029b62 <__gethex+0x46a>
 8029b6c:	449a      	add	sl, r3
 8029b6e:	f1c6 0620 	rsb	r6, r6, #32
 8029b72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8029b76:	f000 fa61 	bl	802a03c <__hi0bits>
 8029b7a:	42b0      	cmp	r0, r6
 8029b7c:	dbe7      	blt.n	8029b4e <__gethex+0x456>
 8029b7e:	e7f0      	b.n	8029b62 <__gethex+0x46a>
 8029b80:	0802f13c 	.word	0x0802f13c

08029b84 <L_shift>:
 8029b84:	f1c2 0208 	rsb	r2, r2, #8
 8029b88:	0092      	lsls	r2, r2, #2
 8029b8a:	b570      	push	{r4, r5, r6, lr}
 8029b8c:	f1c2 0620 	rsb	r6, r2, #32
 8029b90:	6843      	ldr	r3, [r0, #4]
 8029b92:	6804      	ldr	r4, [r0, #0]
 8029b94:	fa03 f506 	lsl.w	r5, r3, r6
 8029b98:	432c      	orrs	r4, r5
 8029b9a:	40d3      	lsrs	r3, r2
 8029b9c:	6004      	str	r4, [r0, #0]
 8029b9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8029ba2:	4288      	cmp	r0, r1
 8029ba4:	d3f4      	bcc.n	8029b90 <L_shift+0xc>
 8029ba6:	bd70      	pop	{r4, r5, r6, pc}

08029ba8 <__match>:
 8029ba8:	b530      	push	{r4, r5, lr}
 8029baa:	6803      	ldr	r3, [r0, #0]
 8029bac:	3301      	adds	r3, #1
 8029bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029bb2:	b914      	cbnz	r4, 8029bba <__match+0x12>
 8029bb4:	6003      	str	r3, [r0, #0]
 8029bb6:	2001      	movs	r0, #1
 8029bb8:	bd30      	pop	{r4, r5, pc}
 8029bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029bbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8029bc2:	2d19      	cmp	r5, #25
 8029bc4:	bf98      	it	ls
 8029bc6:	3220      	addls	r2, #32
 8029bc8:	42a2      	cmp	r2, r4
 8029bca:	d0f0      	beq.n	8029bae <__match+0x6>
 8029bcc:	2000      	movs	r0, #0
 8029bce:	e7f3      	b.n	8029bb8 <__match+0x10>

08029bd0 <__hexnan>:
 8029bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bd4:	680b      	ldr	r3, [r1, #0]
 8029bd6:	6801      	ldr	r1, [r0, #0]
 8029bd8:	115e      	asrs	r6, r3, #5
 8029bda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8029bde:	f013 031f 	ands.w	r3, r3, #31
 8029be2:	b087      	sub	sp, #28
 8029be4:	bf18      	it	ne
 8029be6:	3604      	addne	r6, #4
 8029be8:	2500      	movs	r5, #0
 8029bea:	1f37      	subs	r7, r6, #4
 8029bec:	4682      	mov	sl, r0
 8029bee:	4690      	mov	r8, r2
 8029bf0:	9301      	str	r3, [sp, #4]
 8029bf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8029bf6:	46b9      	mov	r9, r7
 8029bf8:	463c      	mov	r4, r7
 8029bfa:	9502      	str	r5, [sp, #8]
 8029bfc:	46ab      	mov	fp, r5
 8029bfe:	784a      	ldrb	r2, [r1, #1]
 8029c00:	1c4b      	adds	r3, r1, #1
 8029c02:	9303      	str	r3, [sp, #12]
 8029c04:	b342      	cbz	r2, 8029c58 <__hexnan+0x88>
 8029c06:	4610      	mov	r0, r2
 8029c08:	9105      	str	r1, [sp, #20]
 8029c0a:	9204      	str	r2, [sp, #16]
 8029c0c:	f7ff fd5f 	bl	80296ce <__hexdig_fun>
 8029c10:	2800      	cmp	r0, #0
 8029c12:	d14f      	bne.n	8029cb4 <__hexnan+0xe4>
 8029c14:	9a04      	ldr	r2, [sp, #16]
 8029c16:	9905      	ldr	r1, [sp, #20]
 8029c18:	2a20      	cmp	r2, #32
 8029c1a:	d818      	bhi.n	8029c4e <__hexnan+0x7e>
 8029c1c:	9b02      	ldr	r3, [sp, #8]
 8029c1e:	459b      	cmp	fp, r3
 8029c20:	dd13      	ble.n	8029c4a <__hexnan+0x7a>
 8029c22:	454c      	cmp	r4, r9
 8029c24:	d206      	bcs.n	8029c34 <__hexnan+0x64>
 8029c26:	2d07      	cmp	r5, #7
 8029c28:	dc04      	bgt.n	8029c34 <__hexnan+0x64>
 8029c2a:	462a      	mov	r2, r5
 8029c2c:	4649      	mov	r1, r9
 8029c2e:	4620      	mov	r0, r4
 8029c30:	f7ff ffa8 	bl	8029b84 <L_shift>
 8029c34:	4544      	cmp	r4, r8
 8029c36:	d950      	bls.n	8029cda <__hexnan+0x10a>
 8029c38:	2300      	movs	r3, #0
 8029c3a:	f1a4 0904 	sub.w	r9, r4, #4
 8029c3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8029c42:	f8cd b008 	str.w	fp, [sp, #8]
 8029c46:	464c      	mov	r4, r9
 8029c48:	461d      	mov	r5, r3
 8029c4a:	9903      	ldr	r1, [sp, #12]
 8029c4c:	e7d7      	b.n	8029bfe <__hexnan+0x2e>
 8029c4e:	2a29      	cmp	r2, #41	; 0x29
 8029c50:	d156      	bne.n	8029d00 <__hexnan+0x130>
 8029c52:	3102      	adds	r1, #2
 8029c54:	f8ca 1000 	str.w	r1, [sl]
 8029c58:	f1bb 0f00 	cmp.w	fp, #0
 8029c5c:	d050      	beq.n	8029d00 <__hexnan+0x130>
 8029c5e:	454c      	cmp	r4, r9
 8029c60:	d206      	bcs.n	8029c70 <__hexnan+0xa0>
 8029c62:	2d07      	cmp	r5, #7
 8029c64:	dc04      	bgt.n	8029c70 <__hexnan+0xa0>
 8029c66:	462a      	mov	r2, r5
 8029c68:	4649      	mov	r1, r9
 8029c6a:	4620      	mov	r0, r4
 8029c6c:	f7ff ff8a 	bl	8029b84 <L_shift>
 8029c70:	4544      	cmp	r4, r8
 8029c72:	d934      	bls.n	8029cde <__hexnan+0x10e>
 8029c74:	f1a8 0204 	sub.w	r2, r8, #4
 8029c78:	4623      	mov	r3, r4
 8029c7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8029c7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8029c82:	429f      	cmp	r7, r3
 8029c84:	d2f9      	bcs.n	8029c7a <__hexnan+0xaa>
 8029c86:	1b3b      	subs	r3, r7, r4
 8029c88:	f023 0303 	bic.w	r3, r3, #3
 8029c8c:	3304      	adds	r3, #4
 8029c8e:	3401      	adds	r4, #1
 8029c90:	3e03      	subs	r6, #3
 8029c92:	42b4      	cmp	r4, r6
 8029c94:	bf88      	it	hi
 8029c96:	2304      	movhi	r3, #4
 8029c98:	4443      	add	r3, r8
 8029c9a:	2200      	movs	r2, #0
 8029c9c:	f843 2b04 	str.w	r2, [r3], #4
 8029ca0:	429f      	cmp	r7, r3
 8029ca2:	d2fb      	bcs.n	8029c9c <__hexnan+0xcc>
 8029ca4:	683b      	ldr	r3, [r7, #0]
 8029ca6:	b91b      	cbnz	r3, 8029cb0 <__hexnan+0xe0>
 8029ca8:	4547      	cmp	r7, r8
 8029caa:	d127      	bne.n	8029cfc <__hexnan+0x12c>
 8029cac:	2301      	movs	r3, #1
 8029cae:	603b      	str	r3, [r7, #0]
 8029cb0:	2005      	movs	r0, #5
 8029cb2:	e026      	b.n	8029d02 <__hexnan+0x132>
 8029cb4:	3501      	adds	r5, #1
 8029cb6:	2d08      	cmp	r5, #8
 8029cb8:	f10b 0b01 	add.w	fp, fp, #1
 8029cbc:	dd06      	ble.n	8029ccc <__hexnan+0xfc>
 8029cbe:	4544      	cmp	r4, r8
 8029cc0:	d9c3      	bls.n	8029c4a <__hexnan+0x7a>
 8029cc2:	2300      	movs	r3, #0
 8029cc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8029cc8:	2501      	movs	r5, #1
 8029cca:	3c04      	subs	r4, #4
 8029ccc:	6822      	ldr	r2, [r4, #0]
 8029cce:	f000 000f 	and.w	r0, r0, #15
 8029cd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8029cd6:	6022      	str	r2, [r4, #0]
 8029cd8:	e7b7      	b.n	8029c4a <__hexnan+0x7a>
 8029cda:	2508      	movs	r5, #8
 8029cdc:	e7b5      	b.n	8029c4a <__hexnan+0x7a>
 8029cde:	9b01      	ldr	r3, [sp, #4]
 8029ce0:	2b00      	cmp	r3, #0
 8029ce2:	d0df      	beq.n	8029ca4 <__hexnan+0xd4>
 8029ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8029ce8:	f1c3 0320 	rsb	r3, r3, #32
 8029cec:	fa22 f303 	lsr.w	r3, r2, r3
 8029cf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029cf4:	401a      	ands	r2, r3
 8029cf6:	f846 2c04 	str.w	r2, [r6, #-4]
 8029cfa:	e7d3      	b.n	8029ca4 <__hexnan+0xd4>
 8029cfc:	3f04      	subs	r7, #4
 8029cfe:	e7d1      	b.n	8029ca4 <__hexnan+0xd4>
 8029d00:	2004      	movs	r0, #4
 8029d02:	b007      	add	sp, #28
 8029d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029d08 <_localeconv_r>:
 8029d08:	4800      	ldr	r0, [pc, #0]	; (8029d0c <_localeconv_r+0x4>)
 8029d0a:	4770      	bx	lr
 8029d0c:	200001d8 	.word	0x200001d8

08029d10 <__retarget_lock_init_recursive>:
 8029d10:	4770      	bx	lr

08029d12 <__retarget_lock_acquire_recursive>:
 8029d12:	4770      	bx	lr

08029d14 <__retarget_lock_release>:
 8029d14:	4770      	bx	lr

08029d16 <__retarget_lock_release_recursive>:
 8029d16:	4770      	bx	lr

08029d18 <__swhatbuf_r>:
 8029d18:	b570      	push	{r4, r5, r6, lr}
 8029d1a:	460e      	mov	r6, r1
 8029d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029d20:	2900      	cmp	r1, #0
 8029d22:	b096      	sub	sp, #88	; 0x58
 8029d24:	4614      	mov	r4, r2
 8029d26:	461d      	mov	r5, r3
 8029d28:	da07      	bge.n	8029d3a <__swhatbuf_r+0x22>
 8029d2a:	2300      	movs	r3, #0
 8029d2c:	602b      	str	r3, [r5, #0]
 8029d2e:	89b3      	ldrh	r3, [r6, #12]
 8029d30:	061a      	lsls	r2, r3, #24
 8029d32:	d410      	bmi.n	8029d56 <__swhatbuf_r+0x3e>
 8029d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029d38:	e00e      	b.n	8029d58 <__swhatbuf_r+0x40>
 8029d3a:	466a      	mov	r2, sp
 8029d3c:	f000 ff60 	bl	802ac00 <_fstat_r>
 8029d40:	2800      	cmp	r0, #0
 8029d42:	dbf2      	blt.n	8029d2a <__swhatbuf_r+0x12>
 8029d44:	9a01      	ldr	r2, [sp, #4]
 8029d46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029d4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8029d4e:	425a      	negs	r2, r3
 8029d50:	415a      	adcs	r2, r3
 8029d52:	602a      	str	r2, [r5, #0]
 8029d54:	e7ee      	b.n	8029d34 <__swhatbuf_r+0x1c>
 8029d56:	2340      	movs	r3, #64	; 0x40
 8029d58:	2000      	movs	r0, #0
 8029d5a:	6023      	str	r3, [r4, #0]
 8029d5c:	b016      	add	sp, #88	; 0x58
 8029d5e:	bd70      	pop	{r4, r5, r6, pc}

08029d60 <__smakebuf_r>:
 8029d60:	898b      	ldrh	r3, [r1, #12]
 8029d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029d64:	079d      	lsls	r5, r3, #30
 8029d66:	4606      	mov	r6, r0
 8029d68:	460c      	mov	r4, r1
 8029d6a:	d507      	bpl.n	8029d7c <__smakebuf_r+0x1c>
 8029d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029d70:	6023      	str	r3, [r4, #0]
 8029d72:	6123      	str	r3, [r4, #16]
 8029d74:	2301      	movs	r3, #1
 8029d76:	6163      	str	r3, [r4, #20]
 8029d78:	b002      	add	sp, #8
 8029d7a:	bd70      	pop	{r4, r5, r6, pc}
 8029d7c:	ab01      	add	r3, sp, #4
 8029d7e:	466a      	mov	r2, sp
 8029d80:	f7ff ffca 	bl	8029d18 <__swhatbuf_r>
 8029d84:	9900      	ldr	r1, [sp, #0]
 8029d86:	4605      	mov	r5, r0
 8029d88:	4630      	mov	r0, r6
 8029d8a:	f7fc fc75 	bl	8026678 <_malloc_r>
 8029d8e:	b948      	cbnz	r0, 8029da4 <__smakebuf_r+0x44>
 8029d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029d94:	059a      	lsls	r2, r3, #22
 8029d96:	d4ef      	bmi.n	8029d78 <__smakebuf_r+0x18>
 8029d98:	f023 0303 	bic.w	r3, r3, #3
 8029d9c:	f043 0302 	orr.w	r3, r3, #2
 8029da0:	81a3      	strh	r3, [r4, #12]
 8029da2:	e7e3      	b.n	8029d6c <__smakebuf_r+0xc>
 8029da4:	4b0d      	ldr	r3, [pc, #52]	; (8029ddc <__smakebuf_r+0x7c>)
 8029da6:	62b3      	str	r3, [r6, #40]	; 0x28
 8029da8:	89a3      	ldrh	r3, [r4, #12]
 8029daa:	6020      	str	r0, [r4, #0]
 8029dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029db0:	81a3      	strh	r3, [r4, #12]
 8029db2:	9b00      	ldr	r3, [sp, #0]
 8029db4:	6163      	str	r3, [r4, #20]
 8029db6:	9b01      	ldr	r3, [sp, #4]
 8029db8:	6120      	str	r0, [r4, #16]
 8029dba:	b15b      	cbz	r3, 8029dd4 <__smakebuf_r+0x74>
 8029dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029dc0:	4630      	mov	r0, r6
 8029dc2:	f000 ff2f 	bl	802ac24 <_isatty_r>
 8029dc6:	b128      	cbz	r0, 8029dd4 <__smakebuf_r+0x74>
 8029dc8:	89a3      	ldrh	r3, [r4, #12]
 8029dca:	f023 0303 	bic.w	r3, r3, #3
 8029dce:	f043 0301 	orr.w	r3, r3, #1
 8029dd2:	81a3      	strh	r3, [r4, #12]
 8029dd4:	89a0      	ldrh	r0, [r4, #12]
 8029dd6:	4305      	orrs	r5, r0
 8029dd8:	81a5      	strh	r5, [r4, #12]
 8029dda:	e7cd      	b.n	8029d78 <__smakebuf_r+0x18>
 8029ddc:	08029489 	.word	0x08029489

08029de0 <__ascii_mbtowc>:
 8029de0:	b082      	sub	sp, #8
 8029de2:	b901      	cbnz	r1, 8029de6 <__ascii_mbtowc+0x6>
 8029de4:	a901      	add	r1, sp, #4
 8029de6:	b142      	cbz	r2, 8029dfa <__ascii_mbtowc+0x1a>
 8029de8:	b14b      	cbz	r3, 8029dfe <__ascii_mbtowc+0x1e>
 8029dea:	7813      	ldrb	r3, [r2, #0]
 8029dec:	600b      	str	r3, [r1, #0]
 8029dee:	7812      	ldrb	r2, [r2, #0]
 8029df0:	1e10      	subs	r0, r2, #0
 8029df2:	bf18      	it	ne
 8029df4:	2001      	movne	r0, #1
 8029df6:	b002      	add	sp, #8
 8029df8:	4770      	bx	lr
 8029dfa:	4610      	mov	r0, r2
 8029dfc:	e7fb      	b.n	8029df6 <__ascii_mbtowc+0x16>
 8029dfe:	f06f 0001 	mvn.w	r0, #1
 8029e02:	e7f8      	b.n	8029df6 <__ascii_mbtowc+0x16>

08029e04 <memmove>:
 8029e04:	4288      	cmp	r0, r1
 8029e06:	b510      	push	{r4, lr}
 8029e08:	eb01 0402 	add.w	r4, r1, r2
 8029e0c:	d902      	bls.n	8029e14 <memmove+0x10>
 8029e0e:	4284      	cmp	r4, r0
 8029e10:	4623      	mov	r3, r4
 8029e12:	d807      	bhi.n	8029e24 <memmove+0x20>
 8029e14:	1e43      	subs	r3, r0, #1
 8029e16:	42a1      	cmp	r1, r4
 8029e18:	d008      	beq.n	8029e2c <memmove+0x28>
 8029e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029e22:	e7f8      	b.n	8029e16 <memmove+0x12>
 8029e24:	4402      	add	r2, r0
 8029e26:	4601      	mov	r1, r0
 8029e28:	428a      	cmp	r2, r1
 8029e2a:	d100      	bne.n	8029e2e <memmove+0x2a>
 8029e2c:	bd10      	pop	{r4, pc}
 8029e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029e36:	e7f7      	b.n	8029e28 <memmove+0x24>

08029e38 <__malloc_lock>:
 8029e38:	4801      	ldr	r0, [pc, #4]	; (8029e40 <__malloc_lock+0x8>)
 8029e3a:	f7ff bf6a 	b.w	8029d12 <__retarget_lock_acquire_recursive>
 8029e3e:	bf00      	nop
 8029e40:	20057154 	.word	0x20057154

08029e44 <__malloc_unlock>:
 8029e44:	4801      	ldr	r0, [pc, #4]	; (8029e4c <__malloc_unlock+0x8>)
 8029e46:	f7ff bf66 	b.w	8029d16 <__retarget_lock_release_recursive>
 8029e4a:	bf00      	nop
 8029e4c:	20057154 	.word	0x20057154

08029e50 <_Balloc>:
 8029e50:	b570      	push	{r4, r5, r6, lr}
 8029e52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029e54:	4604      	mov	r4, r0
 8029e56:	460d      	mov	r5, r1
 8029e58:	b976      	cbnz	r6, 8029e78 <_Balloc+0x28>
 8029e5a:	2010      	movs	r0, #16
 8029e5c:	f7fc fb96 	bl	802658c <malloc>
 8029e60:	4602      	mov	r2, r0
 8029e62:	6260      	str	r0, [r4, #36]	; 0x24
 8029e64:	b920      	cbnz	r0, 8029e70 <_Balloc+0x20>
 8029e66:	4b18      	ldr	r3, [pc, #96]	; (8029ec8 <_Balloc+0x78>)
 8029e68:	4818      	ldr	r0, [pc, #96]	; (8029ecc <_Balloc+0x7c>)
 8029e6a:	2166      	movs	r1, #102	; 0x66
 8029e6c:	f7fc fb20 	bl	80264b0 <__assert_func>
 8029e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029e74:	6006      	str	r6, [r0, #0]
 8029e76:	60c6      	str	r6, [r0, #12]
 8029e78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8029e7a:	68f3      	ldr	r3, [r6, #12]
 8029e7c:	b183      	cbz	r3, 8029ea0 <_Balloc+0x50>
 8029e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029e80:	68db      	ldr	r3, [r3, #12]
 8029e82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8029e86:	b9b8      	cbnz	r0, 8029eb8 <_Balloc+0x68>
 8029e88:	2101      	movs	r1, #1
 8029e8a:	fa01 f605 	lsl.w	r6, r1, r5
 8029e8e:	1d72      	adds	r2, r6, #5
 8029e90:	0092      	lsls	r2, r2, #2
 8029e92:	4620      	mov	r0, r4
 8029e94:	f000 fc98 	bl	802a7c8 <_calloc_r>
 8029e98:	b160      	cbz	r0, 8029eb4 <_Balloc+0x64>
 8029e9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8029e9e:	e00e      	b.n	8029ebe <_Balloc+0x6e>
 8029ea0:	2221      	movs	r2, #33	; 0x21
 8029ea2:	2104      	movs	r1, #4
 8029ea4:	4620      	mov	r0, r4
 8029ea6:	f000 fc8f 	bl	802a7c8 <_calloc_r>
 8029eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029eac:	60f0      	str	r0, [r6, #12]
 8029eae:	68db      	ldr	r3, [r3, #12]
 8029eb0:	2b00      	cmp	r3, #0
 8029eb2:	d1e4      	bne.n	8029e7e <_Balloc+0x2e>
 8029eb4:	2000      	movs	r0, #0
 8029eb6:	bd70      	pop	{r4, r5, r6, pc}
 8029eb8:	6802      	ldr	r2, [r0, #0]
 8029eba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8029ebe:	2300      	movs	r3, #0
 8029ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029ec4:	e7f7      	b.n	8029eb6 <_Balloc+0x66>
 8029ec6:	bf00      	nop
 8029ec8:	0802f0c6 	.word	0x0802f0c6
 8029ecc:	0802f230 	.word	0x0802f230

08029ed0 <_Bfree>:
 8029ed0:	b570      	push	{r4, r5, r6, lr}
 8029ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029ed4:	4605      	mov	r5, r0
 8029ed6:	460c      	mov	r4, r1
 8029ed8:	b976      	cbnz	r6, 8029ef8 <_Bfree+0x28>
 8029eda:	2010      	movs	r0, #16
 8029edc:	f7fc fb56 	bl	802658c <malloc>
 8029ee0:	4602      	mov	r2, r0
 8029ee2:	6268      	str	r0, [r5, #36]	; 0x24
 8029ee4:	b920      	cbnz	r0, 8029ef0 <_Bfree+0x20>
 8029ee6:	4b09      	ldr	r3, [pc, #36]	; (8029f0c <_Bfree+0x3c>)
 8029ee8:	4809      	ldr	r0, [pc, #36]	; (8029f10 <_Bfree+0x40>)
 8029eea:	218a      	movs	r1, #138	; 0x8a
 8029eec:	f7fc fae0 	bl	80264b0 <__assert_func>
 8029ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029ef4:	6006      	str	r6, [r0, #0]
 8029ef6:	60c6      	str	r6, [r0, #12]
 8029ef8:	b13c      	cbz	r4, 8029f0a <_Bfree+0x3a>
 8029efa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029efc:	6862      	ldr	r2, [r4, #4]
 8029efe:	68db      	ldr	r3, [r3, #12]
 8029f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029f04:	6021      	str	r1, [r4, #0]
 8029f06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8029f0a:	bd70      	pop	{r4, r5, r6, pc}
 8029f0c:	0802f0c6 	.word	0x0802f0c6
 8029f10:	0802f230 	.word	0x0802f230

08029f14 <__multadd>:
 8029f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029f18:	690e      	ldr	r6, [r1, #16]
 8029f1a:	4607      	mov	r7, r0
 8029f1c:	4698      	mov	r8, r3
 8029f1e:	460c      	mov	r4, r1
 8029f20:	f101 0014 	add.w	r0, r1, #20
 8029f24:	2300      	movs	r3, #0
 8029f26:	6805      	ldr	r5, [r0, #0]
 8029f28:	b2a9      	uxth	r1, r5
 8029f2a:	fb02 8101 	mla	r1, r2, r1, r8
 8029f2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8029f32:	0c2d      	lsrs	r5, r5, #16
 8029f34:	fb02 c505 	mla	r5, r2, r5, ip
 8029f38:	b289      	uxth	r1, r1
 8029f3a:	3301      	adds	r3, #1
 8029f3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8029f40:	429e      	cmp	r6, r3
 8029f42:	f840 1b04 	str.w	r1, [r0], #4
 8029f46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8029f4a:	dcec      	bgt.n	8029f26 <__multadd+0x12>
 8029f4c:	f1b8 0f00 	cmp.w	r8, #0
 8029f50:	d022      	beq.n	8029f98 <__multadd+0x84>
 8029f52:	68a3      	ldr	r3, [r4, #8]
 8029f54:	42b3      	cmp	r3, r6
 8029f56:	dc19      	bgt.n	8029f8c <__multadd+0x78>
 8029f58:	6861      	ldr	r1, [r4, #4]
 8029f5a:	4638      	mov	r0, r7
 8029f5c:	3101      	adds	r1, #1
 8029f5e:	f7ff ff77 	bl	8029e50 <_Balloc>
 8029f62:	4605      	mov	r5, r0
 8029f64:	b928      	cbnz	r0, 8029f72 <__multadd+0x5e>
 8029f66:	4602      	mov	r2, r0
 8029f68:	4b0d      	ldr	r3, [pc, #52]	; (8029fa0 <__multadd+0x8c>)
 8029f6a:	480e      	ldr	r0, [pc, #56]	; (8029fa4 <__multadd+0x90>)
 8029f6c:	21b5      	movs	r1, #181	; 0xb5
 8029f6e:	f7fc fa9f 	bl	80264b0 <__assert_func>
 8029f72:	6922      	ldr	r2, [r4, #16]
 8029f74:	3202      	adds	r2, #2
 8029f76:	f104 010c 	add.w	r1, r4, #12
 8029f7a:	0092      	lsls	r2, r2, #2
 8029f7c:	300c      	adds	r0, #12
 8029f7e:	f7fc fb15 	bl	80265ac <memcpy>
 8029f82:	4621      	mov	r1, r4
 8029f84:	4638      	mov	r0, r7
 8029f86:	f7ff ffa3 	bl	8029ed0 <_Bfree>
 8029f8a:	462c      	mov	r4, r5
 8029f8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8029f90:	3601      	adds	r6, #1
 8029f92:	f8c3 8014 	str.w	r8, [r3, #20]
 8029f96:	6126      	str	r6, [r4, #16]
 8029f98:	4620      	mov	r0, r4
 8029f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029f9e:	bf00      	nop
 8029fa0:	0802f13c 	.word	0x0802f13c
 8029fa4:	0802f230 	.word	0x0802f230

08029fa8 <__s2b>:
 8029fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029fac:	460c      	mov	r4, r1
 8029fae:	4615      	mov	r5, r2
 8029fb0:	461f      	mov	r7, r3
 8029fb2:	2209      	movs	r2, #9
 8029fb4:	3308      	adds	r3, #8
 8029fb6:	4606      	mov	r6, r0
 8029fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8029fbc:	2100      	movs	r1, #0
 8029fbe:	2201      	movs	r2, #1
 8029fc0:	429a      	cmp	r2, r3
 8029fc2:	db09      	blt.n	8029fd8 <__s2b+0x30>
 8029fc4:	4630      	mov	r0, r6
 8029fc6:	f7ff ff43 	bl	8029e50 <_Balloc>
 8029fca:	b940      	cbnz	r0, 8029fde <__s2b+0x36>
 8029fcc:	4602      	mov	r2, r0
 8029fce:	4b19      	ldr	r3, [pc, #100]	; (802a034 <__s2b+0x8c>)
 8029fd0:	4819      	ldr	r0, [pc, #100]	; (802a038 <__s2b+0x90>)
 8029fd2:	21ce      	movs	r1, #206	; 0xce
 8029fd4:	f7fc fa6c 	bl	80264b0 <__assert_func>
 8029fd8:	0052      	lsls	r2, r2, #1
 8029fda:	3101      	adds	r1, #1
 8029fdc:	e7f0      	b.n	8029fc0 <__s2b+0x18>
 8029fde:	9b08      	ldr	r3, [sp, #32]
 8029fe0:	6143      	str	r3, [r0, #20]
 8029fe2:	2d09      	cmp	r5, #9
 8029fe4:	f04f 0301 	mov.w	r3, #1
 8029fe8:	6103      	str	r3, [r0, #16]
 8029fea:	dd16      	ble.n	802a01a <__s2b+0x72>
 8029fec:	f104 0909 	add.w	r9, r4, #9
 8029ff0:	46c8      	mov	r8, r9
 8029ff2:	442c      	add	r4, r5
 8029ff4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029ff8:	4601      	mov	r1, r0
 8029ffa:	3b30      	subs	r3, #48	; 0x30
 8029ffc:	220a      	movs	r2, #10
 8029ffe:	4630      	mov	r0, r6
 802a000:	f7ff ff88 	bl	8029f14 <__multadd>
 802a004:	45a0      	cmp	r8, r4
 802a006:	d1f5      	bne.n	8029ff4 <__s2b+0x4c>
 802a008:	f1a5 0408 	sub.w	r4, r5, #8
 802a00c:	444c      	add	r4, r9
 802a00e:	1b2d      	subs	r5, r5, r4
 802a010:	1963      	adds	r3, r4, r5
 802a012:	42bb      	cmp	r3, r7
 802a014:	db04      	blt.n	802a020 <__s2b+0x78>
 802a016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a01a:	340a      	adds	r4, #10
 802a01c:	2509      	movs	r5, #9
 802a01e:	e7f6      	b.n	802a00e <__s2b+0x66>
 802a020:	f814 3b01 	ldrb.w	r3, [r4], #1
 802a024:	4601      	mov	r1, r0
 802a026:	3b30      	subs	r3, #48	; 0x30
 802a028:	220a      	movs	r2, #10
 802a02a:	4630      	mov	r0, r6
 802a02c:	f7ff ff72 	bl	8029f14 <__multadd>
 802a030:	e7ee      	b.n	802a010 <__s2b+0x68>
 802a032:	bf00      	nop
 802a034:	0802f13c 	.word	0x0802f13c
 802a038:	0802f230 	.word	0x0802f230

0802a03c <__hi0bits>:
 802a03c:	0c03      	lsrs	r3, r0, #16
 802a03e:	041b      	lsls	r3, r3, #16
 802a040:	b9d3      	cbnz	r3, 802a078 <__hi0bits+0x3c>
 802a042:	0400      	lsls	r0, r0, #16
 802a044:	2310      	movs	r3, #16
 802a046:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802a04a:	bf04      	itt	eq
 802a04c:	0200      	lsleq	r0, r0, #8
 802a04e:	3308      	addeq	r3, #8
 802a050:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802a054:	bf04      	itt	eq
 802a056:	0100      	lsleq	r0, r0, #4
 802a058:	3304      	addeq	r3, #4
 802a05a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802a05e:	bf04      	itt	eq
 802a060:	0080      	lsleq	r0, r0, #2
 802a062:	3302      	addeq	r3, #2
 802a064:	2800      	cmp	r0, #0
 802a066:	db05      	blt.n	802a074 <__hi0bits+0x38>
 802a068:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802a06c:	f103 0301 	add.w	r3, r3, #1
 802a070:	bf08      	it	eq
 802a072:	2320      	moveq	r3, #32
 802a074:	4618      	mov	r0, r3
 802a076:	4770      	bx	lr
 802a078:	2300      	movs	r3, #0
 802a07a:	e7e4      	b.n	802a046 <__hi0bits+0xa>

0802a07c <__lo0bits>:
 802a07c:	6803      	ldr	r3, [r0, #0]
 802a07e:	f013 0207 	ands.w	r2, r3, #7
 802a082:	4601      	mov	r1, r0
 802a084:	d00b      	beq.n	802a09e <__lo0bits+0x22>
 802a086:	07da      	lsls	r2, r3, #31
 802a088:	d424      	bmi.n	802a0d4 <__lo0bits+0x58>
 802a08a:	0798      	lsls	r0, r3, #30
 802a08c:	bf49      	itett	mi
 802a08e:	085b      	lsrmi	r3, r3, #1
 802a090:	089b      	lsrpl	r3, r3, #2
 802a092:	2001      	movmi	r0, #1
 802a094:	600b      	strmi	r3, [r1, #0]
 802a096:	bf5c      	itt	pl
 802a098:	600b      	strpl	r3, [r1, #0]
 802a09a:	2002      	movpl	r0, #2
 802a09c:	4770      	bx	lr
 802a09e:	b298      	uxth	r0, r3
 802a0a0:	b9b0      	cbnz	r0, 802a0d0 <__lo0bits+0x54>
 802a0a2:	0c1b      	lsrs	r3, r3, #16
 802a0a4:	2010      	movs	r0, #16
 802a0a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 802a0aa:	bf04      	itt	eq
 802a0ac:	0a1b      	lsreq	r3, r3, #8
 802a0ae:	3008      	addeq	r0, #8
 802a0b0:	071a      	lsls	r2, r3, #28
 802a0b2:	bf04      	itt	eq
 802a0b4:	091b      	lsreq	r3, r3, #4
 802a0b6:	3004      	addeq	r0, #4
 802a0b8:	079a      	lsls	r2, r3, #30
 802a0ba:	bf04      	itt	eq
 802a0bc:	089b      	lsreq	r3, r3, #2
 802a0be:	3002      	addeq	r0, #2
 802a0c0:	07da      	lsls	r2, r3, #31
 802a0c2:	d403      	bmi.n	802a0cc <__lo0bits+0x50>
 802a0c4:	085b      	lsrs	r3, r3, #1
 802a0c6:	f100 0001 	add.w	r0, r0, #1
 802a0ca:	d005      	beq.n	802a0d8 <__lo0bits+0x5c>
 802a0cc:	600b      	str	r3, [r1, #0]
 802a0ce:	4770      	bx	lr
 802a0d0:	4610      	mov	r0, r2
 802a0d2:	e7e8      	b.n	802a0a6 <__lo0bits+0x2a>
 802a0d4:	2000      	movs	r0, #0
 802a0d6:	4770      	bx	lr
 802a0d8:	2020      	movs	r0, #32
 802a0da:	4770      	bx	lr

0802a0dc <__i2b>:
 802a0dc:	b510      	push	{r4, lr}
 802a0de:	460c      	mov	r4, r1
 802a0e0:	2101      	movs	r1, #1
 802a0e2:	f7ff feb5 	bl	8029e50 <_Balloc>
 802a0e6:	4602      	mov	r2, r0
 802a0e8:	b928      	cbnz	r0, 802a0f6 <__i2b+0x1a>
 802a0ea:	4b05      	ldr	r3, [pc, #20]	; (802a100 <__i2b+0x24>)
 802a0ec:	4805      	ldr	r0, [pc, #20]	; (802a104 <__i2b+0x28>)
 802a0ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802a0f2:	f7fc f9dd 	bl	80264b0 <__assert_func>
 802a0f6:	2301      	movs	r3, #1
 802a0f8:	6144      	str	r4, [r0, #20]
 802a0fa:	6103      	str	r3, [r0, #16]
 802a0fc:	bd10      	pop	{r4, pc}
 802a0fe:	bf00      	nop
 802a100:	0802f13c 	.word	0x0802f13c
 802a104:	0802f230 	.word	0x0802f230

0802a108 <__multiply>:
 802a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a10c:	4614      	mov	r4, r2
 802a10e:	690a      	ldr	r2, [r1, #16]
 802a110:	6923      	ldr	r3, [r4, #16]
 802a112:	429a      	cmp	r2, r3
 802a114:	bfb8      	it	lt
 802a116:	460b      	movlt	r3, r1
 802a118:	460d      	mov	r5, r1
 802a11a:	bfbc      	itt	lt
 802a11c:	4625      	movlt	r5, r4
 802a11e:	461c      	movlt	r4, r3
 802a120:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802a124:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a128:	68ab      	ldr	r3, [r5, #8]
 802a12a:	6869      	ldr	r1, [r5, #4]
 802a12c:	eb0a 0709 	add.w	r7, sl, r9
 802a130:	42bb      	cmp	r3, r7
 802a132:	b085      	sub	sp, #20
 802a134:	bfb8      	it	lt
 802a136:	3101      	addlt	r1, #1
 802a138:	f7ff fe8a 	bl	8029e50 <_Balloc>
 802a13c:	b930      	cbnz	r0, 802a14c <__multiply+0x44>
 802a13e:	4602      	mov	r2, r0
 802a140:	4b42      	ldr	r3, [pc, #264]	; (802a24c <__multiply+0x144>)
 802a142:	4843      	ldr	r0, [pc, #268]	; (802a250 <__multiply+0x148>)
 802a144:	f240 115d 	movw	r1, #349	; 0x15d
 802a148:	f7fc f9b2 	bl	80264b0 <__assert_func>
 802a14c:	f100 0614 	add.w	r6, r0, #20
 802a150:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802a154:	4633      	mov	r3, r6
 802a156:	2200      	movs	r2, #0
 802a158:	4543      	cmp	r3, r8
 802a15a:	d31e      	bcc.n	802a19a <__multiply+0x92>
 802a15c:	f105 0c14 	add.w	ip, r5, #20
 802a160:	f104 0314 	add.w	r3, r4, #20
 802a164:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802a168:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802a16c:	9202      	str	r2, [sp, #8]
 802a16e:	ebac 0205 	sub.w	r2, ip, r5
 802a172:	3a15      	subs	r2, #21
 802a174:	f022 0203 	bic.w	r2, r2, #3
 802a178:	3204      	adds	r2, #4
 802a17a:	f105 0115 	add.w	r1, r5, #21
 802a17e:	458c      	cmp	ip, r1
 802a180:	bf38      	it	cc
 802a182:	2204      	movcc	r2, #4
 802a184:	9201      	str	r2, [sp, #4]
 802a186:	9a02      	ldr	r2, [sp, #8]
 802a188:	9303      	str	r3, [sp, #12]
 802a18a:	429a      	cmp	r2, r3
 802a18c:	d808      	bhi.n	802a1a0 <__multiply+0x98>
 802a18e:	2f00      	cmp	r7, #0
 802a190:	dc55      	bgt.n	802a23e <__multiply+0x136>
 802a192:	6107      	str	r7, [r0, #16]
 802a194:	b005      	add	sp, #20
 802a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a19a:	f843 2b04 	str.w	r2, [r3], #4
 802a19e:	e7db      	b.n	802a158 <__multiply+0x50>
 802a1a0:	f8b3 a000 	ldrh.w	sl, [r3]
 802a1a4:	f1ba 0f00 	cmp.w	sl, #0
 802a1a8:	d020      	beq.n	802a1ec <__multiply+0xe4>
 802a1aa:	f105 0e14 	add.w	lr, r5, #20
 802a1ae:	46b1      	mov	r9, r6
 802a1b0:	2200      	movs	r2, #0
 802a1b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 802a1b6:	f8d9 b000 	ldr.w	fp, [r9]
 802a1ba:	b2a1      	uxth	r1, r4
 802a1bc:	fa1f fb8b 	uxth.w	fp, fp
 802a1c0:	fb0a b101 	mla	r1, sl, r1, fp
 802a1c4:	4411      	add	r1, r2
 802a1c6:	f8d9 2000 	ldr.w	r2, [r9]
 802a1ca:	0c24      	lsrs	r4, r4, #16
 802a1cc:	0c12      	lsrs	r2, r2, #16
 802a1ce:	fb0a 2404 	mla	r4, sl, r4, r2
 802a1d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802a1d6:	b289      	uxth	r1, r1
 802a1d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802a1dc:	45f4      	cmp	ip, lr
 802a1de:	f849 1b04 	str.w	r1, [r9], #4
 802a1e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802a1e6:	d8e4      	bhi.n	802a1b2 <__multiply+0xaa>
 802a1e8:	9901      	ldr	r1, [sp, #4]
 802a1ea:	5072      	str	r2, [r6, r1]
 802a1ec:	9a03      	ldr	r2, [sp, #12]
 802a1ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802a1f2:	3304      	adds	r3, #4
 802a1f4:	f1b9 0f00 	cmp.w	r9, #0
 802a1f8:	d01f      	beq.n	802a23a <__multiply+0x132>
 802a1fa:	6834      	ldr	r4, [r6, #0]
 802a1fc:	f105 0114 	add.w	r1, r5, #20
 802a200:	46b6      	mov	lr, r6
 802a202:	f04f 0a00 	mov.w	sl, #0
 802a206:	880a      	ldrh	r2, [r1, #0]
 802a208:	f8be b002 	ldrh.w	fp, [lr, #2]
 802a20c:	fb09 b202 	mla	r2, r9, r2, fp
 802a210:	4492      	add	sl, r2
 802a212:	b2a4      	uxth	r4, r4
 802a214:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802a218:	f84e 4b04 	str.w	r4, [lr], #4
 802a21c:	f851 4b04 	ldr.w	r4, [r1], #4
 802a220:	f8be 2000 	ldrh.w	r2, [lr]
 802a224:	0c24      	lsrs	r4, r4, #16
 802a226:	fb09 2404 	mla	r4, r9, r4, r2
 802a22a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802a22e:	458c      	cmp	ip, r1
 802a230:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802a234:	d8e7      	bhi.n	802a206 <__multiply+0xfe>
 802a236:	9a01      	ldr	r2, [sp, #4]
 802a238:	50b4      	str	r4, [r6, r2]
 802a23a:	3604      	adds	r6, #4
 802a23c:	e7a3      	b.n	802a186 <__multiply+0x7e>
 802a23e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a242:	2b00      	cmp	r3, #0
 802a244:	d1a5      	bne.n	802a192 <__multiply+0x8a>
 802a246:	3f01      	subs	r7, #1
 802a248:	e7a1      	b.n	802a18e <__multiply+0x86>
 802a24a:	bf00      	nop
 802a24c:	0802f13c 	.word	0x0802f13c
 802a250:	0802f230 	.word	0x0802f230

0802a254 <__pow5mult>:
 802a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a258:	4615      	mov	r5, r2
 802a25a:	f012 0203 	ands.w	r2, r2, #3
 802a25e:	4606      	mov	r6, r0
 802a260:	460f      	mov	r7, r1
 802a262:	d007      	beq.n	802a274 <__pow5mult+0x20>
 802a264:	4c25      	ldr	r4, [pc, #148]	; (802a2fc <__pow5mult+0xa8>)
 802a266:	3a01      	subs	r2, #1
 802a268:	2300      	movs	r3, #0
 802a26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a26e:	f7ff fe51 	bl	8029f14 <__multadd>
 802a272:	4607      	mov	r7, r0
 802a274:	10ad      	asrs	r5, r5, #2
 802a276:	d03d      	beq.n	802a2f4 <__pow5mult+0xa0>
 802a278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a27a:	b97c      	cbnz	r4, 802a29c <__pow5mult+0x48>
 802a27c:	2010      	movs	r0, #16
 802a27e:	f7fc f985 	bl	802658c <malloc>
 802a282:	4602      	mov	r2, r0
 802a284:	6270      	str	r0, [r6, #36]	; 0x24
 802a286:	b928      	cbnz	r0, 802a294 <__pow5mult+0x40>
 802a288:	4b1d      	ldr	r3, [pc, #116]	; (802a300 <__pow5mult+0xac>)
 802a28a:	481e      	ldr	r0, [pc, #120]	; (802a304 <__pow5mult+0xb0>)
 802a28c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802a290:	f7fc f90e 	bl	80264b0 <__assert_func>
 802a294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a298:	6004      	str	r4, [r0, #0]
 802a29a:	60c4      	str	r4, [r0, #12]
 802a29c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802a2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a2a4:	b94c      	cbnz	r4, 802a2ba <__pow5mult+0x66>
 802a2a6:	f240 2171 	movw	r1, #625	; 0x271
 802a2aa:	4630      	mov	r0, r6
 802a2ac:	f7ff ff16 	bl	802a0dc <__i2b>
 802a2b0:	2300      	movs	r3, #0
 802a2b2:	f8c8 0008 	str.w	r0, [r8, #8]
 802a2b6:	4604      	mov	r4, r0
 802a2b8:	6003      	str	r3, [r0, #0]
 802a2ba:	f04f 0900 	mov.w	r9, #0
 802a2be:	07eb      	lsls	r3, r5, #31
 802a2c0:	d50a      	bpl.n	802a2d8 <__pow5mult+0x84>
 802a2c2:	4639      	mov	r1, r7
 802a2c4:	4622      	mov	r2, r4
 802a2c6:	4630      	mov	r0, r6
 802a2c8:	f7ff ff1e 	bl	802a108 <__multiply>
 802a2cc:	4639      	mov	r1, r7
 802a2ce:	4680      	mov	r8, r0
 802a2d0:	4630      	mov	r0, r6
 802a2d2:	f7ff fdfd 	bl	8029ed0 <_Bfree>
 802a2d6:	4647      	mov	r7, r8
 802a2d8:	106d      	asrs	r5, r5, #1
 802a2da:	d00b      	beq.n	802a2f4 <__pow5mult+0xa0>
 802a2dc:	6820      	ldr	r0, [r4, #0]
 802a2de:	b938      	cbnz	r0, 802a2f0 <__pow5mult+0x9c>
 802a2e0:	4622      	mov	r2, r4
 802a2e2:	4621      	mov	r1, r4
 802a2e4:	4630      	mov	r0, r6
 802a2e6:	f7ff ff0f 	bl	802a108 <__multiply>
 802a2ea:	6020      	str	r0, [r4, #0]
 802a2ec:	f8c0 9000 	str.w	r9, [r0]
 802a2f0:	4604      	mov	r4, r0
 802a2f2:	e7e4      	b.n	802a2be <__pow5mult+0x6a>
 802a2f4:	4638      	mov	r0, r7
 802a2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a2fa:	bf00      	nop
 802a2fc:	0802f380 	.word	0x0802f380
 802a300:	0802f0c6 	.word	0x0802f0c6
 802a304:	0802f230 	.word	0x0802f230

0802a308 <__lshift>:
 802a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a30c:	460c      	mov	r4, r1
 802a30e:	6849      	ldr	r1, [r1, #4]
 802a310:	6923      	ldr	r3, [r4, #16]
 802a312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a316:	68a3      	ldr	r3, [r4, #8]
 802a318:	4607      	mov	r7, r0
 802a31a:	4691      	mov	r9, r2
 802a31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a320:	f108 0601 	add.w	r6, r8, #1
 802a324:	42b3      	cmp	r3, r6
 802a326:	db0b      	blt.n	802a340 <__lshift+0x38>
 802a328:	4638      	mov	r0, r7
 802a32a:	f7ff fd91 	bl	8029e50 <_Balloc>
 802a32e:	4605      	mov	r5, r0
 802a330:	b948      	cbnz	r0, 802a346 <__lshift+0x3e>
 802a332:	4602      	mov	r2, r0
 802a334:	4b28      	ldr	r3, [pc, #160]	; (802a3d8 <__lshift+0xd0>)
 802a336:	4829      	ldr	r0, [pc, #164]	; (802a3dc <__lshift+0xd4>)
 802a338:	f240 11d9 	movw	r1, #473	; 0x1d9
 802a33c:	f7fc f8b8 	bl	80264b0 <__assert_func>
 802a340:	3101      	adds	r1, #1
 802a342:	005b      	lsls	r3, r3, #1
 802a344:	e7ee      	b.n	802a324 <__lshift+0x1c>
 802a346:	2300      	movs	r3, #0
 802a348:	f100 0114 	add.w	r1, r0, #20
 802a34c:	f100 0210 	add.w	r2, r0, #16
 802a350:	4618      	mov	r0, r3
 802a352:	4553      	cmp	r3, sl
 802a354:	db33      	blt.n	802a3be <__lshift+0xb6>
 802a356:	6920      	ldr	r0, [r4, #16]
 802a358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a35c:	f104 0314 	add.w	r3, r4, #20
 802a360:	f019 091f 	ands.w	r9, r9, #31
 802a364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a36c:	d02b      	beq.n	802a3c6 <__lshift+0xbe>
 802a36e:	f1c9 0e20 	rsb	lr, r9, #32
 802a372:	468a      	mov	sl, r1
 802a374:	2200      	movs	r2, #0
 802a376:	6818      	ldr	r0, [r3, #0]
 802a378:	fa00 f009 	lsl.w	r0, r0, r9
 802a37c:	4302      	orrs	r2, r0
 802a37e:	f84a 2b04 	str.w	r2, [sl], #4
 802a382:	f853 2b04 	ldr.w	r2, [r3], #4
 802a386:	459c      	cmp	ip, r3
 802a388:	fa22 f20e 	lsr.w	r2, r2, lr
 802a38c:	d8f3      	bhi.n	802a376 <__lshift+0x6e>
 802a38e:	ebac 0304 	sub.w	r3, ip, r4
 802a392:	3b15      	subs	r3, #21
 802a394:	f023 0303 	bic.w	r3, r3, #3
 802a398:	3304      	adds	r3, #4
 802a39a:	f104 0015 	add.w	r0, r4, #21
 802a39e:	4584      	cmp	ip, r0
 802a3a0:	bf38      	it	cc
 802a3a2:	2304      	movcc	r3, #4
 802a3a4:	50ca      	str	r2, [r1, r3]
 802a3a6:	b10a      	cbz	r2, 802a3ac <__lshift+0xa4>
 802a3a8:	f108 0602 	add.w	r6, r8, #2
 802a3ac:	3e01      	subs	r6, #1
 802a3ae:	4638      	mov	r0, r7
 802a3b0:	612e      	str	r6, [r5, #16]
 802a3b2:	4621      	mov	r1, r4
 802a3b4:	f7ff fd8c 	bl	8029ed0 <_Bfree>
 802a3b8:	4628      	mov	r0, r5
 802a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a3be:	f842 0f04 	str.w	r0, [r2, #4]!
 802a3c2:	3301      	adds	r3, #1
 802a3c4:	e7c5      	b.n	802a352 <__lshift+0x4a>
 802a3c6:	3904      	subs	r1, #4
 802a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 802a3cc:	f841 2f04 	str.w	r2, [r1, #4]!
 802a3d0:	459c      	cmp	ip, r3
 802a3d2:	d8f9      	bhi.n	802a3c8 <__lshift+0xc0>
 802a3d4:	e7ea      	b.n	802a3ac <__lshift+0xa4>
 802a3d6:	bf00      	nop
 802a3d8:	0802f13c 	.word	0x0802f13c
 802a3dc:	0802f230 	.word	0x0802f230

0802a3e0 <__mcmp>:
 802a3e0:	b530      	push	{r4, r5, lr}
 802a3e2:	6902      	ldr	r2, [r0, #16]
 802a3e4:	690c      	ldr	r4, [r1, #16]
 802a3e6:	1b12      	subs	r2, r2, r4
 802a3e8:	d10e      	bne.n	802a408 <__mcmp+0x28>
 802a3ea:	f100 0314 	add.w	r3, r0, #20
 802a3ee:	3114      	adds	r1, #20
 802a3f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802a3f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802a3f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802a3fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802a400:	42a5      	cmp	r5, r4
 802a402:	d003      	beq.n	802a40c <__mcmp+0x2c>
 802a404:	d305      	bcc.n	802a412 <__mcmp+0x32>
 802a406:	2201      	movs	r2, #1
 802a408:	4610      	mov	r0, r2
 802a40a:	bd30      	pop	{r4, r5, pc}
 802a40c:	4283      	cmp	r3, r0
 802a40e:	d3f3      	bcc.n	802a3f8 <__mcmp+0x18>
 802a410:	e7fa      	b.n	802a408 <__mcmp+0x28>
 802a412:	f04f 32ff 	mov.w	r2, #4294967295
 802a416:	e7f7      	b.n	802a408 <__mcmp+0x28>

0802a418 <__mdiff>:
 802a418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a41c:	460c      	mov	r4, r1
 802a41e:	4606      	mov	r6, r0
 802a420:	4611      	mov	r1, r2
 802a422:	4620      	mov	r0, r4
 802a424:	4617      	mov	r7, r2
 802a426:	f7ff ffdb 	bl	802a3e0 <__mcmp>
 802a42a:	1e05      	subs	r5, r0, #0
 802a42c:	d110      	bne.n	802a450 <__mdiff+0x38>
 802a42e:	4629      	mov	r1, r5
 802a430:	4630      	mov	r0, r6
 802a432:	f7ff fd0d 	bl	8029e50 <_Balloc>
 802a436:	b930      	cbnz	r0, 802a446 <__mdiff+0x2e>
 802a438:	4b39      	ldr	r3, [pc, #228]	; (802a520 <__mdiff+0x108>)
 802a43a:	4602      	mov	r2, r0
 802a43c:	f240 2132 	movw	r1, #562	; 0x232
 802a440:	4838      	ldr	r0, [pc, #224]	; (802a524 <__mdiff+0x10c>)
 802a442:	f7fc f835 	bl	80264b0 <__assert_func>
 802a446:	2301      	movs	r3, #1
 802a448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a44c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a450:	bfa4      	itt	ge
 802a452:	463b      	movge	r3, r7
 802a454:	4627      	movge	r7, r4
 802a456:	4630      	mov	r0, r6
 802a458:	6879      	ldr	r1, [r7, #4]
 802a45a:	bfa6      	itte	ge
 802a45c:	461c      	movge	r4, r3
 802a45e:	2500      	movge	r5, #0
 802a460:	2501      	movlt	r5, #1
 802a462:	f7ff fcf5 	bl	8029e50 <_Balloc>
 802a466:	b920      	cbnz	r0, 802a472 <__mdiff+0x5a>
 802a468:	4b2d      	ldr	r3, [pc, #180]	; (802a520 <__mdiff+0x108>)
 802a46a:	4602      	mov	r2, r0
 802a46c:	f44f 7110 	mov.w	r1, #576	; 0x240
 802a470:	e7e6      	b.n	802a440 <__mdiff+0x28>
 802a472:	693e      	ldr	r6, [r7, #16]
 802a474:	60c5      	str	r5, [r0, #12]
 802a476:	6925      	ldr	r5, [r4, #16]
 802a478:	f107 0114 	add.w	r1, r7, #20
 802a47c:	f104 0914 	add.w	r9, r4, #20
 802a480:	f100 0e14 	add.w	lr, r0, #20
 802a484:	f107 0210 	add.w	r2, r7, #16
 802a488:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802a48c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802a490:	46f2      	mov	sl, lr
 802a492:	2700      	movs	r7, #0
 802a494:	f859 3b04 	ldr.w	r3, [r9], #4
 802a498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802a49c:	fa1f f883 	uxth.w	r8, r3
 802a4a0:	fa17 f78b 	uxtah	r7, r7, fp
 802a4a4:	0c1b      	lsrs	r3, r3, #16
 802a4a6:	eba7 0808 	sub.w	r8, r7, r8
 802a4aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802a4ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802a4b2:	fa1f f888 	uxth.w	r8, r8
 802a4b6:	141f      	asrs	r7, r3, #16
 802a4b8:	454d      	cmp	r5, r9
 802a4ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802a4be:	f84a 3b04 	str.w	r3, [sl], #4
 802a4c2:	d8e7      	bhi.n	802a494 <__mdiff+0x7c>
 802a4c4:	1b2b      	subs	r3, r5, r4
 802a4c6:	3b15      	subs	r3, #21
 802a4c8:	f023 0303 	bic.w	r3, r3, #3
 802a4cc:	3304      	adds	r3, #4
 802a4ce:	3415      	adds	r4, #21
 802a4d0:	42a5      	cmp	r5, r4
 802a4d2:	bf38      	it	cc
 802a4d4:	2304      	movcc	r3, #4
 802a4d6:	4419      	add	r1, r3
 802a4d8:	4473      	add	r3, lr
 802a4da:	469e      	mov	lr, r3
 802a4dc:	460d      	mov	r5, r1
 802a4de:	4565      	cmp	r5, ip
 802a4e0:	d30e      	bcc.n	802a500 <__mdiff+0xe8>
 802a4e2:	f10c 0203 	add.w	r2, ip, #3
 802a4e6:	1a52      	subs	r2, r2, r1
 802a4e8:	f022 0203 	bic.w	r2, r2, #3
 802a4ec:	3903      	subs	r1, #3
 802a4ee:	458c      	cmp	ip, r1
 802a4f0:	bf38      	it	cc
 802a4f2:	2200      	movcc	r2, #0
 802a4f4:	441a      	add	r2, r3
 802a4f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802a4fa:	b17b      	cbz	r3, 802a51c <__mdiff+0x104>
 802a4fc:	6106      	str	r6, [r0, #16]
 802a4fe:	e7a5      	b.n	802a44c <__mdiff+0x34>
 802a500:	f855 8b04 	ldr.w	r8, [r5], #4
 802a504:	fa17 f488 	uxtah	r4, r7, r8
 802a508:	1422      	asrs	r2, r4, #16
 802a50a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802a50e:	b2a4      	uxth	r4, r4
 802a510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802a514:	f84e 4b04 	str.w	r4, [lr], #4
 802a518:	1417      	asrs	r7, r2, #16
 802a51a:	e7e0      	b.n	802a4de <__mdiff+0xc6>
 802a51c:	3e01      	subs	r6, #1
 802a51e:	e7ea      	b.n	802a4f6 <__mdiff+0xde>
 802a520:	0802f13c 	.word	0x0802f13c
 802a524:	0802f230 	.word	0x0802f230

0802a528 <__ulp>:
 802a528:	b082      	sub	sp, #8
 802a52a:	ed8d 0b00 	vstr	d0, [sp]
 802a52e:	9b01      	ldr	r3, [sp, #4]
 802a530:	4912      	ldr	r1, [pc, #72]	; (802a57c <__ulp+0x54>)
 802a532:	4019      	ands	r1, r3
 802a534:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802a538:	2900      	cmp	r1, #0
 802a53a:	dd05      	ble.n	802a548 <__ulp+0x20>
 802a53c:	2200      	movs	r2, #0
 802a53e:	460b      	mov	r3, r1
 802a540:	ec43 2b10 	vmov	d0, r2, r3
 802a544:	b002      	add	sp, #8
 802a546:	4770      	bx	lr
 802a548:	4249      	negs	r1, r1
 802a54a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802a54e:	ea4f 5021 	mov.w	r0, r1, asr #20
 802a552:	f04f 0200 	mov.w	r2, #0
 802a556:	f04f 0300 	mov.w	r3, #0
 802a55a:	da04      	bge.n	802a566 <__ulp+0x3e>
 802a55c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802a560:	fa41 f300 	asr.w	r3, r1, r0
 802a564:	e7ec      	b.n	802a540 <__ulp+0x18>
 802a566:	f1a0 0114 	sub.w	r1, r0, #20
 802a56a:	291e      	cmp	r1, #30
 802a56c:	bfda      	itte	le
 802a56e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802a572:	fa20 f101 	lsrle.w	r1, r0, r1
 802a576:	2101      	movgt	r1, #1
 802a578:	460a      	mov	r2, r1
 802a57a:	e7e1      	b.n	802a540 <__ulp+0x18>
 802a57c:	7ff00000 	.word	0x7ff00000

0802a580 <__b2d>:
 802a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a582:	6905      	ldr	r5, [r0, #16]
 802a584:	f100 0714 	add.w	r7, r0, #20
 802a588:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802a58c:	1f2e      	subs	r6, r5, #4
 802a58e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802a592:	4620      	mov	r0, r4
 802a594:	f7ff fd52 	bl	802a03c <__hi0bits>
 802a598:	f1c0 0320 	rsb	r3, r0, #32
 802a59c:	280a      	cmp	r0, #10
 802a59e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802a61c <__b2d+0x9c>
 802a5a2:	600b      	str	r3, [r1, #0]
 802a5a4:	dc14      	bgt.n	802a5d0 <__b2d+0x50>
 802a5a6:	f1c0 0e0b 	rsb	lr, r0, #11
 802a5aa:	fa24 f10e 	lsr.w	r1, r4, lr
 802a5ae:	42b7      	cmp	r7, r6
 802a5b0:	ea41 030c 	orr.w	r3, r1, ip
 802a5b4:	bf34      	ite	cc
 802a5b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a5ba:	2100      	movcs	r1, #0
 802a5bc:	3015      	adds	r0, #21
 802a5be:	fa04 f000 	lsl.w	r0, r4, r0
 802a5c2:	fa21 f10e 	lsr.w	r1, r1, lr
 802a5c6:	ea40 0201 	orr.w	r2, r0, r1
 802a5ca:	ec43 2b10 	vmov	d0, r2, r3
 802a5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a5d0:	42b7      	cmp	r7, r6
 802a5d2:	bf3a      	itte	cc
 802a5d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a5d8:	f1a5 0608 	subcc.w	r6, r5, #8
 802a5dc:	2100      	movcs	r1, #0
 802a5de:	380b      	subs	r0, #11
 802a5e0:	d017      	beq.n	802a612 <__b2d+0x92>
 802a5e2:	f1c0 0c20 	rsb	ip, r0, #32
 802a5e6:	fa04 f500 	lsl.w	r5, r4, r0
 802a5ea:	42be      	cmp	r6, r7
 802a5ec:	fa21 f40c 	lsr.w	r4, r1, ip
 802a5f0:	ea45 0504 	orr.w	r5, r5, r4
 802a5f4:	bf8c      	ite	hi
 802a5f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802a5fa:	2400      	movls	r4, #0
 802a5fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802a600:	fa01 f000 	lsl.w	r0, r1, r0
 802a604:	fa24 f40c 	lsr.w	r4, r4, ip
 802a608:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802a60c:	ea40 0204 	orr.w	r2, r0, r4
 802a610:	e7db      	b.n	802a5ca <__b2d+0x4a>
 802a612:	ea44 030c 	orr.w	r3, r4, ip
 802a616:	460a      	mov	r2, r1
 802a618:	e7d7      	b.n	802a5ca <__b2d+0x4a>
 802a61a:	bf00      	nop
 802a61c:	3ff00000 	.word	0x3ff00000

0802a620 <__d2b>:
 802a620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a624:	4689      	mov	r9, r1
 802a626:	2101      	movs	r1, #1
 802a628:	ec57 6b10 	vmov	r6, r7, d0
 802a62c:	4690      	mov	r8, r2
 802a62e:	f7ff fc0f 	bl	8029e50 <_Balloc>
 802a632:	4604      	mov	r4, r0
 802a634:	b930      	cbnz	r0, 802a644 <__d2b+0x24>
 802a636:	4602      	mov	r2, r0
 802a638:	4b25      	ldr	r3, [pc, #148]	; (802a6d0 <__d2b+0xb0>)
 802a63a:	4826      	ldr	r0, [pc, #152]	; (802a6d4 <__d2b+0xb4>)
 802a63c:	f240 310a 	movw	r1, #778	; 0x30a
 802a640:	f7fb ff36 	bl	80264b0 <__assert_func>
 802a644:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802a648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802a64c:	bb35      	cbnz	r5, 802a69c <__d2b+0x7c>
 802a64e:	2e00      	cmp	r6, #0
 802a650:	9301      	str	r3, [sp, #4]
 802a652:	d028      	beq.n	802a6a6 <__d2b+0x86>
 802a654:	4668      	mov	r0, sp
 802a656:	9600      	str	r6, [sp, #0]
 802a658:	f7ff fd10 	bl	802a07c <__lo0bits>
 802a65c:	9900      	ldr	r1, [sp, #0]
 802a65e:	b300      	cbz	r0, 802a6a2 <__d2b+0x82>
 802a660:	9a01      	ldr	r2, [sp, #4]
 802a662:	f1c0 0320 	rsb	r3, r0, #32
 802a666:	fa02 f303 	lsl.w	r3, r2, r3
 802a66a:	430b      	orrs	r3, r1
 802a66c:	40c2      	lsrs	r2, r0
 802a66e:	6163      	str	r3, [r4, #20]
 802a670:	9201      	str	r2, [sp, #4]
 802a672:	9b01      	ldr	r3, [sp, #4]
 802a674:	61a3      	str	r3, [r4, #24]
 802a676:	2b00      	cmp	r3, #0
 802a678:	bf14      	ite	ne
 802a67a:	2202      	movne	r2, #2
 802a67c:	2201      	moveq	r2, #1
 802a67e:	6122      	str	r2, [r4, #16]
 802a680:	b1d5      	cbz	r5, 802a6b8 <__d2b+0x98>
 802a682:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802a686:	4405      	add	r5, r0
 802a688:	f8c9 5000 	str.w	r5, [r9]
 802a68c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802a690:	f8c8 0000 	str.w	r0, [r8]
 802a694:	4620      	mov	r0, r4
 802a696:	b003      	add	sp, #12
 802a698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a69c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a6a0:	e7d5      	b.n	802a64e <__d2b+0x2e>
 802a6a2:	6161      	str	r1, [r4, #20]
 802a6a4:	e7e5      	b.n	802a672 <__d2b+0x52>
 802a6a6:	a801      	add	r0, sp, #4
 802a6a8:	f7ff fce8 	bl	802a07c <__lo0bits>
 802a6ac:	9b01      	ldr	r3, [sp, #4]
 802a6ae:	6163      	str	r3, [r4, #20]
 802a6b0:	2201      	movs	r2, #1
 802a6b2:	6122      	str	r2, [r4, #16]
 802a6b4:	3020      	adds	r0, #32
 802a6b6:	e7e3      	b.n	802a680 <__d2b+0x60>
 802a6b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802a6bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802a6c0:	f8c9 0000 	str.w	r0, [r9]
 802a6c4:	6918      	ldr	r0, [r3, #16]
 802a6c6:	f7ff fcb9 	bl	802a03c <__hi0bits>
 802a6ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802a6ce:	e7df      	b.n	802a690 <__d2b+0x70>
 802a6d0:	0802f13c 	.word	0x0802f13c
 802a6d4:	0802f230 	.word	0x0802f230

0802a6d8 <__ratio>:
 802a6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6dc:	468a      	mov	sl, r1
 802a6de:	4669      	mov	r1, sp
 802a6e0:	4683      	mov	fp, r0
 802a6e2:	f7ff ff4d 	bl	802a580 <__b2d>
 802a6e6:	a901      	add	r1, sp, #4
 802a6e8:	4650      	mov	r0, sl
 802a6ea:	ec59 8b10 	vmov	r8, r9, d0
 802a6ee:	ee10 6a10 	vmov	r6, s0
 802a6f2:	f7ff ff45 	bl	802a580 <__b2d>
 802a6f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a6fa:	f8da 2010 	ldr.w	r2, [sl, #16]
 802a6fe:	eba3 0c02 	sub.w	ip, r3, r2
 802a702:	e9dd 3200 	ldrd	r3, r2, [sp]
 802a706:	1a9b      	subs	r3, r3, r2
 802a708:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802a70c:	ec55 4b10 	vmov	r4, r5, d0
 802a710:	2b00      	cmp	r3, #0
 802a712:	ee10 0a10 	vmov	r0, s0
 802a716:	bfce      	itee	gt
 802a718:	464a      	movgt	r2, r9
 802a71a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802a71e:	462a      	movle	r2, r5
 802a720:	464f      	mov	r7, r9
 802a722:	4629      	mov	r1, r5
 802a724:	bfcc      	ite	gt
 802a726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802a72a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802a72e:	ec47 6b17 	vmov	d7, r6, r7
 802a732:	ec41 0b16 	vmov	d6, r0, r1
 802a736:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802a73a:	b003      	add	sp, #12
 802a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a740 <__copybits>:
 802a740:	3901      	subs	r1, #1
 802a742:	b570      	push	{r4, r5, r6, lr}
 802a744:	1149      	asrs	r1, r1, #5
 802a746:	6914      	ldr	r4, [r2, #16]
 802a748:	3101      	adds	r1, #1
 802a74a:	f102 0314 	add.w	r3, r2, #20
 802a74e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802a752:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802a756:	1f05      	subs	r5, r0, #4
 802a758:	42a3      	cmp	r3, r4
 802a75a:	d30c      	bcc.n	802a776 <__copybits+0x36>
 802a75c:	1aa3      	subs	r3, r4, r2
 802a75e:	3b11      	subs	r3, #17
 802a760:	f023 0303 	bic.w	r3, r3, #3
 802a764:	3211      	adds	r2, #17
 802a766:	42a2      	cmp	r2, r4
 802a768:	bf88      	it	hi
 802a76a:	2300      	movhi	r3, #0
 802a76c:	4418      	add	r0, r3
 802a76e:	2300      	movs	r3, #0
 802a770:	4288      	cmp	r0, r1
 802a772:	d305      	bcc.n	802a780 <__copybits+0x40>
 802a774:	bd70      	pop	{r4, r5, r6, pc}
 802a776:	f853 6b04 	ldr.w	r6, [r3], #4
 802a77a:	f845 6f04 	str.w	r6, [r5, #4]!
 802a77e:	e7eb      	b.n	802a758 <__copybits+0x18>
 802a780:	f840 3b04 	str.w	r3, [r0], #4
 802a784:	e7f4      	b.n	802a770 <__copybits+0x30>

0802a786 <__any_on>:
 802a786:	f100 0214 	add.w	r2, r0, #20
 802a78a:	6900      	ldr	r0, [r0, #16]
 802a78c:	114b      	asrs	r3, r1, #5
 802a78e:	4298      	cmp	r0, r3
 802a790:	b510      	push	{r4, lr}
 802a792:	db11      	blt.n	802a7b8 <__any_on+0x32>
 802a794:	dd0a      	ble.n	802a7ac <__any_on+0x26>
 802a796:	f011 011f 	ands.w	r1, r1, #31
 802a79a:	d007      	beq.n	802a7ac <__any_on+0x26>
 802a79c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802a7a0:	fa24 f001 	lsr.w	r0, r4, r1
 802a7a4:	fa00 f101 	lsl.w	r1, r0, r1
 802a7a8:	428c      	cmp	r4, r1
 802a7aa:	d10b      	bne.n	802a7c4 <__any_on+0x3e>
 802a7ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a7b0:	4293      	cmp	r3, r2
 802a7b2:	d803      	bhi.n	802a7bc <__any_on+0x36>
 802a7b4:	2000      	movs	r0, #0
 802a7b6:	bd10      	pop	{r4, pc}
 802a7b8:	4603      	mov	r3, r0
 802a7ba:	e7f7      	b.n	802a7ac <__any_on+0x26>
 802a7bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a7c0:	2900      	cmp	r1, #0
 802a7c2:	d0f5      	beq.n	802a7b0 <__any_on+0x2a>
 802a7c4:	2001      	movs	r0, #1
 802a7c6:	e7f6      	b.n	802a7b6 <__any_on+0x30>

0802a7c8 <_calloc_r>:
 802a7c8:	b513      	push	{r0, r1, r4, lr}
 802a7ca:	434a      	muls	r2, r1
 802a7cc:	4611      	mov	r1, r2
 802a7ce:	9201      	str	r2, [sp, #4]
 802a7d0:	f7fb ff52 	bl	8026678 <_malloc_r>
 802a7d4:	4604      	mov	r4, r0
 802a7d6:	b118      	cbz	r0, 802a7e0 <_calloc_r+0x18>
 802a7d8:	9a01      	ldr	r2, [sp, #4]
 802a7da:	2100      	movs	r1, #0
 802a7dc:	f7fb fef4 	bl	80265c8 <memset>
 802a7e0:	4620      	mov	r0, r4
 802a7e2:	b002      	add	sp, #8
 802a7e4:	bd10      	pop	{r4, pc}

0802a7e6 <_realloc_r>:
 802a7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7e8:	4607      	mov	r7, r0
 802a7ea:	4614      	mov	r4, r2
 802a7ec:	460e      	mov	r6, r1
 802a7ee:	b921      	cbnz	r1, 802a7fa <_realloc_r+0x14>
 802a7f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802a7f4:	4611      	mov	r1, r2
 802a7f6:	f7fb bf3f 	b.w	8026678 <_malloc_r>
 802a7fa:	b922      	cbnz	r2, 802a806 <_realloc_r+0x20>
 802a7fc:	f7fb feec 	bl	80265d8 <_free_r>
 802a800:	4625      	mov	r5, r4
 802a802:	4628      	mov	r0, r5
 802a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a806:	f000 fa2f 	bl	802ac68 <_malloc_usable_size_r>
 802a80a:	42a0      	cmp	r0, r4
 802a80c:	d20f      	bcs.n	802a82e <_realloc_r+0x48>
 802a80e:	4621      	mov	r1, r4
 802a810:	4638      	mov	r0, r7
 802a812:	f7fb ff31 	bl	8026678 <_malloc_r>
 802a816:	4605      	mov	r5, r0
 802a818:	2800      	cmp	r0, #0
 802a81a:	d0f2      	beq.n	802a802 <_realloc_r+0x1c>
 802a81c:	4631      	mov	r1, r6
 802a81e:	4622      	mov	r2, r4
 802a820:	f7fb fec4 	bl	80265ac <memcpy>
 802a824:	4631      	mov	r1, r6
 802a826:	4638      	mov	r0, r7
 802a828:	f7fb fed6 	bl	80265d8 <_free_r>
 802a82c:	e7e9      	b.n	802a802 <_realloc_r+0x1c>
 802a82e:	4635      	mov	r5, r6
 802a830:	e7e7      	b.n	802a802 <_realloc_r+0x1c>

0802a832 <__ssputs_r>:
 802a832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a836:	688e      	ldr	r6, [r1, #8]
 802a838:	429e      	cmp	r6, r3
 802a83a:	4682      	mov	sl, r0
 802a83c:	460c      	mov	r4, r1
 802a83e:	4690      	mov	r8, r2
 802a840:	461f      	mov	r7, r3
 802a842:	d838      	bhi.n	802a8b6 <__ssputs_r+0x84>
 802a844:	898a      	ldrh	r2, [r1, #12]
 802a846:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a84a:	d032      	beq.n	802a8b2 <__ssputs_r+0x80>
 802a84c:	6825      	ldr	r5, [r4, #0]
 802a84e:	6909      	ldr	r1, [r1, #16]
 802a850:	eba5 0901 	sub.w	r9, r5, r1
 802a854:	6965      	ldr	r5, [r4, #20]
 802a856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a85a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a85e:	3301      	adds	r3, #1
 802a860:	444b      	add	r3, r9
 802a862:	106d      	asrs	r5, r5, #1
 802a864:	429d      	cmp	r5, r3
 802a866:	bf38      	it	cc
 802a868:	461d      	movcc	r5, r3
 802a86a:	0553      	lsls	r3, r2, #21
 802a86c:	d531      	bpl.n	802a8d2 <__ssputs_r+0xa0>
 802a86e:	4629      	mov	r1, r5
 802a870:	f7fb ff02 	bl	8026678 <_malloc_r>
 802a874:	4606      	mov	r6, r0
 802a876:	b950      	cbnz	r0, 802a88e <__ssputs_r+0x5c>
 802a878:	230c      	movs	r3, #12
 802a87a:	f8ca 3000 	str.w	r3, [sl]
 802a87e:	89a3      	ldrh	r3, [r4, #12]
 802a880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a884:	81a3      	strh	r3, [r4, #12]
 802a886:	f04f 30ff 	mov.w	r0, #4294967295
 802a88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a88e:	6921      	ldr	r1, [r4, #16]
 802a890:	464a      	mov	r2, r9
 802a892:	f7fb fe8b 	bl	80265ac <memcpy>
 802a896:	89a3      	ldrh	r3, [r4, #12]
 802a898:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a8a0:	81a3      	strh	r3, [r4, #12]
 802a8a2:	6126      	str	r6, [r4, #16]
 802a8a4:	6165      	str	r5, [r4, #20]
 802a8a6:	444e      	add	r6, r9
 802a8a8:	eba5 0509 	sub.w	r5, r5, r9
 802a8ac:	6026      	str	r6, [r4, #0]
 802a8ae:	60a5      	str	r5, [r4, #8]
 802a8b0:	463e      	mov	r6, r7
 802a8b2:	42be      	cmp	r6, r7
 802a8b4:	d900      	bls.n	802a8b8 <__ssputs_r+0x86>
 802a8b6:	463e      	mov	r6, r7
 802a8b8:	4632      	mov	r2, r6
 802a8ba:	6820      	ldr	r0, [r4, #0]
 802a8bc:	4641      	mov	r1, r8
 802a8be:	f7ff faa1 	bl	8029e04 <memmove>
 802a8c2:	68a3      	ldr	r3, [r4, #8]
 802a8c4:	6822      	ldr	r2, [r4, #0]
 802a8c6:	1b9b      	subs	r3, r3, r6
 802a8c8:	4432      	add	r2, r6
 802a8ca:	60a3      	str	r3, [r4, #8]
 802a8cc:	6022      	str	r2, [r4, #0]
 802a8ce:	2000      	movs	r0, #0
 802a8d0:	e7db      	b.n	802a88a <__ssputs_r+0x58>
 802a8d2:	462a      	mov	r2, r5
 802a8d4:	f7ff ff87 	bl	802a7e6 <_realloc_r>
 802a8d8:	4606      	mov	r6, r0
 802a8da:	2800      	cmp	r0, #0
 802a8dc:	d1e1      	bne.n	802a8a2 <__ssputs_r+0x70>
 802a8de:	6921      	ldr	r1, [r4, #16]
 802a8e0:	4650      	mov	r0, sl
 802a8e2:	f7fb fe79 	bl	80265d8 <_free_r>
 802a8e6:	e7c7      	b.n	802a878 <__ssputs_r+0x46>

0802a8e8 <_svfiprintf_r>:
 802a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a8ec:	4698      	mov	r8, r3
 802a8ee:	898b      	ldrh	r3, [r1, #12]
 802a8f0:	061b      	lsls	r3, r3, #24
 802a8f2:	b09d      	sub	sp, #116	; 0x74
 802a8f4:	4607      	mov	r7, r0
 802a8f6:	460d      	mov	r5, r1
 802a8f8:	4614      	mov	r4, r2
 802a8fa:	d50e      	bpl.n	802a91a <_svfiprintf_r+0x32>
 802a8fc:	690b      	ldr	r3, [r1, #16]
 802a8fe:	b963      	cbnz	r3, 802a91a <_svfiprintf_r+0x32>
 802a900:	2140      	movs	r1, #64	; 0x40
 802a902:	f7fb feb9 	bl	8026678 <_malloc_r>
 802a906:	6028      	str	r0, [r5, #0]
 802a908:	6128      	str	r0, [r5, #16]
 802a90a:	b920      	cbnz	r0, 802a916 <_svfiprintf_r+0x2e>
 802a90c:	230c      	movs	r3, #12
 802a90e:	603b      	str	r3, [r7, #0]
 802a910:	f04f 30ff 	mov.w	r0, #4294967295
 802a914:	e0d1      	b.n	802aaba <_svfiprintf_r+0x1d2>
 802a916:	2340      	movs	r3, #64	; 0x40
 802a918:	616b      	str	r3, [r5, #20]
 802a91a:	2300      	movs	r3, #0
 802a91c:	9309      	str	r3, [sp, #36]	; 0x24
 802a91e:	2320      	movs	r3, #32
 802a920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a924:	f8cd 800c 	str.w	r8, [sp, #12]
 802a928:	2330      	movs	r3, #48	; 0x30
 802a92a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802aad4 <_svfiprintf_r+0x1ec>
 802a92e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a932:	f04f 0901 	mov.w	r9, #1
 802a936:	4623      	mov	r3, r4
 802a938:	469a      	mov	sl, r3
 802a93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a93e:	b10a      	cbz	r2, 802a944 <_svfiprintf_r+0x5c>
 802a940:	2a25      	cmp	r2, #37	; 0x25
 802a942:	d1f9      	bne.n	802a938 <_svfiprintf_r+0x50>
 802a944:	ebba 0b04 	subs.w	fp, sl, r4
 802a948:	d00b      	beq.n	802a962 <_svfiprintf_r+0x7a>
 802a94a:	465b      	mov	r3, fp
 802a94c:	4622      	mov	r2, r4
 802a94e:	4629      	mov	r1, r5
 802a950:	4638      	mov	r0, r7
 802a952:	f7ff ff6e 	bl	802a832 <__ssputs_r>
 802a956:	3001      	adds	r0, #1
 802a958:	f000 80aa 	beq.w	802aab0 <_svfiprintf_r+0x1c8>
 802a95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a95e:	445a      	add	r2, fp
 802a960:	9209      	str	r2, [sp, #36]	; 0x24
 802a962:	f89a 3000 	ldrb.w	r3, [sl]
 802a966:	2b00      	cmp	r3, #0
 802a968:	f000 80a2 	beq.w	802aab0 <_svfiprintf_r+0x1c8>
 802a96c:	2300      	movs	r3, #0
 802a96e:	f04f 32ff 	mov.w	r2, #4294967295
 802a972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a976:	f10a 0a01 	add.w	sl, sl, #1
 802a97a:	9304      	str	r3, [sp, #16]
 802a97c:	9307      	str	r3, [sp, #28]
 802a97e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a982:	931a      	str	r3, [sp, #104]	; 0x68
 802a984:	4654      	mov	r4, sl
 802a986:	2205      	movs	r2, #5
 802a988:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a98c:	4851      	ldr	r0, [pc, #324]	; (802aad4 <_svfiprintf_r+0x1ec>)
 802a98e:	f7d5 fc5f 	bl	8000250 <memchr>
 802a992:	9a04      	ldr	r2, [sp, #16]
 802a994:	b9d8      	cbnz	r0, 802a9ce <_svfiprintf_r+0xe6>
 802a996:	06d0      	lsls	r0, r2, #27
 802a998:	bf44      	itt	mi
 802a99a:	2320      	movmi	r3, #32
 802a99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a9a0:	0711      	lsls	r1, r2, #28
 802a9a2:	bf44      	itt	mi
 802a9a4:	232b      	movmi	r3, #43	; 0x2b
 802a9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a9aa:	f89a 3000 	ldrb.w	r3, [sl]
 802a9ae:	2b2a      	cmp	r3, #42	; 0x2a
 802a9b0:	d015      	beq.n	802a9de <_svfiprintf_r+0xf6>
 802a9b2:	9a07      	ldr	r2, [sp, #28]
 802a9b4:	4654      	mov	r4, sl
 802a9b6:	2000      	movs	r0, #0
 802a9b8:	f04f 0c0a 	mov.w	ip, #10
 802a9bc:	4621      	mov	r1, r4
 802a9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a9c2:	3b30      	subs	r3, #48	; 0x30
 802a9c4:	2b09      	cmp	r3, #9
 802a9c6:	d94e      	bls.n	802aa66 <_svfiprintf_r+0x17e>
 802a9c8:	b1b0      	cbz	r0, 802a9f8 <_svfiprintf_r+0x110>
 802a9ca:	9207      	str	r2, [sp, #28]
 802a9cc:	e014      	b.n	802a9f8 <_svfiprintf_r+0x110>
 802a9ce:	eba0 0308 	sub.w	r3, r0, r8
 802a9d2:	fa09 f303 	lsl.w	r3, r9, r3
 802a9d6:	4313      	orrs	r3, r2
 802a9d8:	9304      	str	r3, [sp, #16]
 802a9da:	46a2      	mov	sl, r4
 802a9dc:	e7d2      	b.n	802a984 <_svfiprintf_r+0x9c>
 802a9de:	9b03      	ldr	r3, [sp, #12]
 802a9e0:	1d19      	adds	r1, r3, #4
 802a9e2:	681b      	ldr	r3, [r3, #0]
 802a9e4:	9103      	str	r1, [sp, #12]
 802a9e6:	2b00      	cmp	r3, #0
 802a9e8:	bfbb      	ittet	lt
 802a9ea:	425b      	neglt	r3, r3
 802a9ec:	f042 0202 	orrlt.w	r2, r2, #2
 802a9f0:	9307      	strge	r3, [sp, #28]
 802a9f2:	9307      	strlt	r3, [sp, #28]
 802a9f4:	bfb8      	it	lt
 802a9f6:	9204      	strlt	r2, [sp, #16]
 802a9f8:	7823      	ldrb	r3, [r4, #0]
 802a9fa:	2b2e      	cmp	r3, #46	; 0x2e
 802a9fc:	d10c      	bne.n	802aa18 <_svfiprintf_r+0x130>
 802a9fe:	7863      	ldrb	r3, [r4, #1]
 802aa00:	2b2a      	cmp	r3, #42	; 0x2a
 802aa02:	d135      	bne.n	802aa70 <_svfiprintf_r+0x188>
 802aa04:	9b03      	ldr	r3, [sp, #12]
 802aa06:	1d1a      	adds	r2, r3, #4
 802aa08:	681b      	ldr	r3, [r3, #0]
 802aa0a:	9203      	str	r2, [sp, #12]
 802aa0c:	2b00      	cmp	r3, #0
 802aa0e:	bfb8      	it	lt
 802aa10:	f04f 33ff 	movlt.w	r3, #4294967295
 802aa14:	3402      	adds	r4, #2
 802aa16:	9305      	str	r3, [sp, #20]
 802aa18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802aae4 <_svfiprintf_r+0x1fc>
 802aa1c:	7821      	ldrb	r1, [r4, #0]
 802aa1e:	2203      	movs	r2, #3
 802aa20:	4650      	mov	r0, sl
 802aa22:	f7d5 fc15 	bl	8000250 <memchr>
 802aa26:	b140      	cbz	r0, 802aa3a <_svfiprintf_r+0x152>
 802aa28:	2340      	movs	r3, #64	; 0x40
 802aa2a:	eba0 000a 	sub.w	r0, r0, sl
 802aa2e:	fa03 f000 	lsl.w	r0, r3, r0
 802aa32:	9b04      	ldr	r3, [sp, #16]
 802aa34:	4303      	orrs	r3, r0
 802aa36:	3401      	adds	r4, #1
 802aa38:	9304      	str	r3, [sp, #16]
 802aa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa3e:	4826      	ldr	r0, [pc, #152]	; (802aad8 <_svfiprintf_r+0x1f0>)
 802aa40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802aa44:	2206      	movs	r2, #6
 802aa46:	f7d5 fc03 	bl	8000250 <memchr>
 802aa4a:	2800      	cmp	r0, #0
 802aa4c:	d038      	beq.n	802aac0 <_svfiprintf_r+0x1d8>
 802aa4e:	4b23      	ldr	r3, [pc, #140]	; (802aadc <_svfiprintf_r+0x1f4>)
 802aa50:	bb1b      	cbnz	r3, 802aa9a <_svfiprintf_r+0x1b2>
 802aa52:	9b03      	ldr	r3, [sp, #12]
 802aa54:	3307      	adds	r3, #7
 802aa56:	f023 0307 	bic.w	r3, r3, #7
 802aa5a:	3308      	adds	r3, #8
 802aa5c:	9303      	str	r3, [sp, #12]
 802aa5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa60:	4433      	add	r3, r6
 802aa62:	9309      	str	r3, [sp, #36]	; 0x24
 802aa64:	e767      	b.n	802a936 <_svfiprintf_r+0x4e>
 802aa66:	fb0c 3202 	mla	r2, ip, r2, r3
 802aa6a:	460c      	mov	r4, r1
 802aa6c:	2001      	movs	r0, #1
 802aa6e:	e7a5      	b.n	802a9bc <_svfiprintf_r+0xd4>
 802aa70:	2300      	movs	r3, #0
 802aa72:	3401      	adds	r4, #1
 802aa74:	9305      	str	r3, [sp, #20]
 802aa76:	4619      	mov	r1, r3
 802aa78:	f04f 0c0a 	mov.w	ip, #10
 802aa7c:	4620      	mov	r0, r4
 802aa7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802aa82:	3a30      	subs	r2, #48	; 0x30
 802aa84:	2a09      	cmp	r2, #9
 802aa86:	d903      	bls.n	802aa90 <_svfiprintf_r+0x1a8>
 802aa88:	2b00      	cmp	r3, #0
 802aa8a:	d0c5      	beq.n	802aa18 <_svfiprintf_r+0x130>
 802aa8c:	9105      	str	r1, [sp, #20]
 802aa8e:	e7c3      	b.n	802aa18 <_svfiprintf_r+0x130>
 802aa90:	fb0c 2101 	mla	r1, ip, r1, r2
 802aa94:	4604      	mov	r4, r0
 802aa96:	2301      	movs	r3, #1
 802aa98:	e7f0      	b.n	802aa7c <_svfiprintf_r+0x194>
 802aa9a:	ab03      	add	r3, sp, #12
 802aa9c:	9300      	str	r3, [sp, #0]
 802aa9e:	462a      	mov	r2, r5
 802aaa0:	4b0f      	ldr	r3, [pc, #60]	; (802aae0 <_svfiprintf_r+0x1f8>)
 802aaa2:	a904      	add	r1, sp, #16
 802aaa4:	4638      	mov	r0, r7
 802aaa6:	f7fc f82b 	bl	8026b00 <_printf_float>
 802aaaa:	1c42      	adds	r2, r0, #1
 802aaac:	4606      	mov	r6, r0
 802aaae:	d1d6      	bne.n	802aa5e <_svfiprintf_r+0x176>
 802aab0:	89ab      	ldrh	r3, [r5, #12]
 802aab2:	065b      	lsls	r3, r3, #25
 802aab4:	f53f af2c 	bmi.w	802a910 <_svfiprintf_r+0x28>
 802aab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802aaba:	b01d      	add	sp, #116	; 0x74
 802aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aac0:	ab03      	add	r3, sp, #12
 802aac2:	9300      	str	r3, [sp, #0]
 802aac4:	462a      	mov	r2, r5
 802aac6:	4b06      	ldr	r3, [pc, #24]	; (802aae0 <_svfiprintf_r+0x1f8>)
 802aac8:	a904      	add	r1, sp, #16
 802aaca:	4638      	mov	r0, r7
 802aacc:	f7fc faa4 	bl	8027018 <_printf_i>
 802aad0:	e7eb      	b.n	802aaaa <_svfiprintf_r+0x1c2>
 802aad2:	bf00      	nop
 802aad4:	0802ef1c 	.word	0x0802ef1c
 802aad8:	0802ef26 	.word	0x0802ef26
 802aadc:	08026b01 	.word	0x08026b01
 802aae0:	0802a833 	.word	0x0802a833
 802aae4:	0802ef22 	.word	0x0802ef22

0802aae8 <nan>:
 802aae8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802aaf0 <nan+0x8>
 802aaec:	4770      	bx	lr
 802aaee:	bf00      	nop
 802aaf0:	00000000 	.word	0x00000000
 802aaf4:	7ff80000 	.word	0x7ff80000

0802aaf8 <__sread>:
 802aaf8:	b510      	push	{r4, lr}
 802aafa:	460c      	mov	r4, r1
 802aafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ab00:	f000 f8ba 	bl	802ac78 <_read_r>
 802ab04:	2800      	cmp	r0, #0
 802ab06:	bfab      	itete	ge
 802ab08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ab0a:	89a3      	ldrhlt	r3, [r4, #12]
 802ab0c:	181b      	addge	r3, r3, r0
 802ab0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ab12:	bfac      	ite	ge
 802ab14:	6563      	strge	r3, [r4, #84]	; 0x54
 802ab16:	81a3      	strhlt	r3, [r4, #12]
 802ab18:	bd10      	pop	{r4, pc}

0802ab1a <__swrite>:
 802ab1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ab1e:	461f      	mov	r7, r3
 802ab20:	898b      	ldrh	r3, [r1, #12]
 802ab22:	05db      	lsls	r3, r3, #23
 802ab24:	4605      	mov	r5, r0
 802ab26:	460c      	mov	r4, r1
 802ab28:	4616      	mov	r6, r2
 802ab2a:	d505      	bpl.n	802ab38 <__swrite+0x1e>
 802ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ab30:	2302      	movs	r3, #2
 802ab32:	2200      	movs	r2, #0
 802ab34:	f000 f886 	bl	802ac44 <_lseek_r>
 802ab38:	89a3      	ldrh	r3, [r4, #12]
 802ab3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ab3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ab42:	81a3      	strh	r3, [r4, #12]
 802ab44:	4632      	mov	r2, r6
 802ab46:	463b      	mov	r3, r7
 802ab48:	4628      	mov	r0, r5
 802ab4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ab4e:	f000 b835 	b.w	802abbc <_write_r>

0802ab52 <__sseek>:
 802ab52:	b510      	push	{r4, lr}
 802ab54:	460c      	mov	r4, r1
 802ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ab5a:	f000 f873 	bl	802ac44 <_lseek_r>
 802ab5e:	1c43      	adds	r3, r0, #1
 802ab60:	89a3      	ldrh	r3, [r4, #12]
 802ab62:	bf15      	itete	ne
 802ab64:	6560      	strne	r0, [r4, #84]	; 0x54
 802ab66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ab6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ab6e:	81a3      	strheq	r3, [r4, #12]
 802ab70:	bf18      	it	ne
 802ab72:	81a3      	strhne	r3, [r4, #12]
 802ab74:	bd10      	pop	{r4, pc}

0802ab76 <__sclose>:
 802ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ab7a:	f000 b831 	b.w	802abe0 <_close_r>

0802ab7e <strncmp>:
 802ab7e:	b510      	push	{r4, lr}
 802ab80:	b16a      	cbz	r2, 802ab9e <strncmp+0x20>
 802ab82:	3901      	subs	r1, #1
 802ab84:	1884      	adds	r4, r0, r2
 802ab86:	f810 3b01 	ldrb.w	r3, [r0], #1
 802ab8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802ab8e:	4293      	cmp	r3, r2
 802ab90:	d103      	bne.n	802ab9a <strncmp+0x1c>
 802ab92:	42a0      	cmp	r0, r4
 802ab94:	d001      	beq.n	802ab9a <strncmp+0x1c>
 802ab96:	2b00      	cmp	r3, #0
 802ab98:	d1f5      	bne.n	802ab86 <strncmp+0x8>
 802ab9a:	1a98      	subs	r0, r3, r2
 802ab9c:	bd10      	pop	{r4, pc}
 802ab9e:	4610      	mov	r0, r2
 802aba0:	e7fc      	b.n	802ab9c <strncmp+0x1e>

0802aba2 <__ascii_wctomb>:
 802aba2:	b149      	cbz	r1, 802abb8 <__ascii_wctomb+0x16>
 802aba4:	2aff      	cmp	r2, #255	; 0xff
 802aba6:	bf85      	ittet	hi
 802aba8:	238a      	movhi	r3, #138	; 0x8a
 802abaa:	6003      	strhi	r3, [r0, #0]
 802abac:	700a      	strbls	r2, [r1, #0]
 802abae:	f04f 30ff 	movhi.w	r0, #4294967295
 802abb2:	bf98      	it	ls
 802abb4:	2001      	movls	r0, #1
 802abb6:	4770      	bx	lr
 802abb8:	4608      	mov	r0, r1
 802abba:	4770      	bx	lr

0802abbc <_write_r>:
 802abbc:	b538      	push	{r3, r4, r5, lr}
 802abbe:	4d07      	ldr	r5, [pc, #28]	; (802abdc <_write_r+0x20>)
 802abc0:	4604      	mov	r4, r0
 802abc2:	4608      	mov	r0, r1
 802abc4:	4611      	mov	r1, r2
 802abc6:	2200      	movs	r2, #0
 802abc8:	602a      	str	r2, [r5, #0]
 802abca:	461a      	mov	r2, r3
 802abcc:	f7d8 f891 	bl	8002cf2 <_write>
 802abd0:	1c43      	adds	r3, r0, #1
 802abd2:	d102      	bne.n	802abda <_write_r+0x1e>
 802abd4:	682b      	ldr	r3, [r5, #0]
 802abd6:	b103      	cbz	r3, 802abda <_write_r+0x1e>
 802abd8:	6023      	str	r3, [r4, #0]
 802abda:	bd38      	pop	{r3, r4, r5, pc}
 802abdc:	2005715c 	.word	0x2005715c

0802abe0 <_close_r>:
 802abe0:	b538      	push	{r3, r4, r5, lr}
 802abe2:	4d06      	ldr	r5, [pc, #24]	; (802abfc <_close_r+0x1c>)
 802abe4:	2300      	movs	r3, #0
 802abe6:	4604      	mov	r4, r0
 802abe8:	4608      	mov	r0, r1
 802abea:	602b      	str	r3, [r5, #0]
 802abec:	f7d8 f89d 	bl	8002d2a <_close>
 802abf0:	1c43      	adds	r3, r0, #1
 802abf2:	d102      	bne.n	802abfa <_close_r+0x1a>
 802abf4:	682b      	ldr	r3, [r5, #0]
 802abf6:	b103      	cbz	r3, 802abfa <_close_r+0x1a>
 802abf8:	6023      	str	r3, [r4, #0]
 802abfa:	bd38      	pop	{r3, r4, r5, pc}
 802abfc:	2005715c 	.word	0x2005715c

0802ac00 <_fstat_r>:
 802ac00:	b538      	push	{r3, r4, r5, lr}
 802ac02:	4d07      	ldr	r5, [pc, #28]	; (802ac20 <_fstat_r+0x20>)
 802ac04:	2300      	movs	r3, #0
 802ac06:	4604      	mov	r4, r0
 802ac08:	4608      	mov	r0, r1
 802ac0a:	4611      	mov	r1, r2
 802ac0c:	602b      	str	r3, [r5, #0]
 802ac0e:	f7d8 f898 	bl	8002d42 <_fstat>
 802ac12:	1c43      	adds	r3, r0, #1
 802ac14:	d102      	bne.n	802ac1c <_fstat_r+0x1c>
 802ac16:	682b      	ldr	r3, [r5, #0]
 802ac18:	b103      	cbz	r3, 802ac1c <_fstat_r+0x1c>
 802ac1a:	6023      	str	r3, [r4, #0]
 802ac1c:	bd38      	pop	{r3, r4, r5, pc}
 802ac1e:	bf00      	nop
 802ac20:	2005715c 	.word	0x2005715c

0802ac24 <_isatty_r>:
 802ac24:	b538      	push	{r3, r4, r5, lr}
 802ac26:	4d06      	ldr	r5, [pc, #24]	; (802ac40 <_isatty_r+0x1c>)
 802ac28:	2300      	movs	r3, #0
 802ac2a:	4604      	mov	r4, r0
 802ac2c:	4608      	mov	r0, r1
 802ac2e:	602b      	str	r3, [r5, #0]
 802ac30:	f7d8 f897 	bl	8002d62 <_isatty>
 802ac34:	1c43      	adds	r3, r0, #1
 802ac36:	d102      	bne.n	802ac3e <_isatty_r+0x1a>
 802ac38:	682b      	ldr	r3, [r5, #0]
 802ac3a:	b103      	cbz	r3, 802ac3e <_isatty_r+0x1a>
 802ac3c:	6023      	str	r3, [r4, #0]
 802ac3e:	bd38      	pop	{r3, r4, r5, pc}
 802ac40:	2005715c 	.word	0x2005715c

0802ac44 <_lseek_r>:
 802ac44:	b538      	push	{r3, r4, r5, lr}
 802ac46:	4d07      	ldr	r5, [pc, #28]	; (802ac64 <_lseek_r+0x20>)
 802ac48:	4604      	mov	r4, r0
 802ac4a:	4608      	mov	r0, r1
 802ac4c:	4611      	mov	r1, r2
 802ac4e:	2200      	movs	r2, #0
 802ac50:	602a      	str	r2, [r5, #0]
 802ac52:	461a      	mov	r2, r3
 802ac54:	f7d8 f890 	bl	8002d78 <_lseek>
 802ac58:	1c43      	adds	r3, r0, #1
 802ac5a:	d102      	bne.n	802ac62 <_lseek_r+0x1e>
 802ac5c:	682b      	ldr	r3, [r5, #0]
 802ac5e:	b103      	cbz	r3, 802ac62 <_lseek_r+0x1e>
 802ac60:	6023      	str	r3, [r4, #0]
 802ac62:	bd38      	pop	{r3, r4, r5, pc}
 802ac64:	2005715c 	.word	0x2005715c

0802ac68 <_malloc_usable_size_r>:
 802ac68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ac6c:	1f18      	subs	r0, r3, #4
 802ac6e:	2b00      	cmp	r3, #0
 802ac70:	bfbc      	itt	lt
 802ac72:	580b      	ldrlt	r3, [r1, r0]
 802ac74:	18c0      	addlt	r0, r0, r3
 802ac76:	4770      	bx	lr

0802ac78 <_read_r>:
 802ac78:	b538      	push	{r3, r4, r5, lr}
 802ac7a:	4d07      	ldr	r5, [pc, #28]	; (802ac98 <_read_r+0x20>)
 802ac7c:	4604      	mov	r4, r0
 802ac7e:	4608      	mov	r0, r1
 802ac80:	4611      	mov	r1, r2
 802ac82:	2200      	movs	r2, #0
 802ac84:	602a      	str	r2, [r5, #0]
 802ac86:	461a      	mov	r2, r3
 802ac88:	f7d8 f816 	bl	8002cb8 <_read>
 802ac8c:	1c43      	adds	r3, r0, #1
 802ac8e:	d102      	bne.n	802ac96 <_read_r+0x1e>
 802ac90:	682b      	ldr	r3, [r5, #0]
 802ac92:	b103      	cbz	r3, 802ac96 <_read_r+0x1e>
 802ac94:	6023      	str	r3, [r4, #0]
 802ac96:	bd38      	pop	{r3, r4, r5, pc}
 802ac98:	2005715c 	.word	0x2005715c

0802ac9c <_init>:
 802ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ac9e:	bf00      	nop
 802aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802aca2:	bc08      	pop	{r3}
 802aca4:	469e      	mov	lr, r3
 802aca6:	4770      	bx	lr

0802aca8 <_fini>:
 802aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802acaa:	bf00      	nop
 802acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802acae:	bc08      	pop	{r3}
 802acb0:	469e      	mov	lr, r3
 802acb2:	4770      	bx	lr
